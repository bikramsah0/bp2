//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.Text;

namespace LDC.Atlas.Services.PreAccounting.Entities.Bold
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class CommercialInvoiceClient
    {
        private string _baseUrl = "http://10.120.70.7:5511/rest";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CommercialInvoiceClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Successful</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CommercialInvoiceResponse> BookCommercialInvoiceAsync(string resourceID, string path, CommercialInvoiceRoot commercialInvoice)
        {
            return BookCommercialInvoiceAsync(resourceID, path, commercialInvoice, System.Threading.CancellationToken.None);
        }

        /// <returns>Successful</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CommercialInvoiceResponse> BookCommercialInvoiceAsync(string resourceID, string path, CommercialInvoiceRoot commercialInvoice, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/LDC/XC/api/bookCommercialInvoice");


            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (resourceID != null)
                        request_.Headers.TryAddWithoutValidation("$resourceID", ConvertToString(resourceID, System.Globalization.CultureInfo.InvariantCulture));
                    if (path != null)
                        request_.Headers.TryAddWithoutValidation("$path", ConvertToString(path, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(commercialInvoice, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var response = Newtonsoft.Json.JsonConvert.DeserializeObject<CommercialInvoiceResponse>(responseData_);
                            return response;
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Bad request", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Access Denied", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "405")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Operation failed due to a validation error", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Internal server error", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Service not available", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
            return null;
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceLgItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _commodity;
        private string _typeOfExpense;
        private string _dischargeCountry;
        private string _countryCurrency;
        private string _counterpartyId;
        private string _amountFuncCurr;
        private string _profitCenter;
        private string _branch;
        private string _businessDate;
        private string _amountCountryCurr;
        private string _groupCurrency;
        private string _loadCountry;
        private string _functCurrency;
        private string _glAccount;
        private string _contractTrader;
        private string _unitPrice;
        private string _fimmo;
        private string _quantity;
        private string _amountTransactionCurr;
        private string _dischargePort;
        private string _itemId;
        private string _unit;
        private string _cropYear;
        private string _incoterm;
        private string _contractId;
        private string _contractItemId;
        private string _stase;
        private string _loadPort;
        private string _location;
        private string _amountGroupCurr;
        private string _vesselName;

        /// <summary>Commodity code in the LDC group referential</summary>
        [Newtonsoft.Json.JsonProperty("commodity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commodity
        {
            get { return _commodity; }
            set
            {
                if (_commodity != value)
                {
                    _commodity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Type of Expense as of LDC global classifications of costs</summary>
        [Newtonsoft.Json.JsonProperty("typeOfExpense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeOfExpense
        {
            get { return _typeOfExpense; }
            set
            {
                if (_typeOfExpense != value)
                {
                    _typeOfExpense = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Country of discharge</summary>
        [Newtonsoft.Json.JsonProperty("dischargeCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DischargeCountry
        {
            get { return _dischargeCountry; }
            set
            {
                if (_dischargeCountry != value)
                {
                    _dischargeCountry = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Country currency</summary>
        [Newtonsoft.Json.JsonProperty("countryCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCurrency
        {
            get { return _countryCurrency; }
            set
            {
                if (_countryCurrency != value)
                {
                    _countryCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Statistical info to enable 3rd party on offseting account</summary>
        [Newtonsoft.Json.JsonProperty("counterpartyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CounterpartyId
        {
            get { return _counterpartyId; }
            set
            {
                if (_counterpartyId != value)
                {
                    _counterpartyId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in functional currency of the entity</summary>
        [Newtonsoft.Json.JsonProperty("amountFuncCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountFuncCurr
        {
            get { return _amountFuncCurr; }
            set
            {
                if (_amountFuncCurr != value)
                {
                    _amountFuncCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Profit center code</summary>
        [Newtonsoft.Json.JsonProperty("profitCenter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ProfitCenter
        {
            get { return _profitCenter; }
            set
            {
                if (_profitCenter != value)
                {
                    _profitCenter = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>tbc with guillaume</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Branch
        {
            get { return _branch; }
            set
            {
                if (_branch != value)
                {
                    _branch = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Transfer of risk date</summary>
        [Newtonsoft.Json.JsonProperty("businessDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BusinessDate
        {
            get { return _businessDate; }
            set
            {
                if (_businessDate != value)
                {
                    _businessDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in Country currency</summary>
        [Newtonsoft.Json.JsonProperty("amountCountryCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountCountryCurr
        {
            get { return _amountCountryCurr; }
            set
            {
                if (_amountCountryCurr != value)
                {
                    _amountCountryCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Group currency - USD</summary>
        [Newtonsoft.Json.JsonProperty("groupCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupCurrency
        {
            get { return _groupCurrency; }
            set
            {
                if (_groupCurrency != value)
                {
                    _groupCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Country of loading</summary>
        [Newtonsoft.Json.JsonProperty("loadCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LoadCountry
        {
            get { return _loadCountry; }
            set
            {
                if (_loadCountry != value)
                {
                    _loadCountry = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Functional currency</summary>
        [Newtonsoft.Json.JsonProperty("functCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctCurrency
        {
            get { return _functCurrency; }
            set
            {
                if (_functCurrency != value)
                {
                    _functCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>General Ledger Account Number in LDC CoA referential</summary>
        [Newtonsoft.Json.JsonProperty("glAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string GlAccount
        {
            get { return _glAccount; }
            set
            {
                if (_glAccount != value)
                {
                    _glAccount = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Trader associated to the commercial invoice</summary>
        [Newtonsoft.Json.JsonProperty("contractTrader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContractTrader
        {
            get { return _contractTrader; }
            set
            {
                if (_contractTrader != value)
                {
                    _contractTrader = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unitary price</summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Type of Expense as of LDC global classifications of costs</summary>
        [Newtonsoft.Json.JsonProperty("fimmo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Fimmo
        {
            get { return _fimmo; }
            set
            {
                if (_fimmo != value)
                {
                    _fimmo = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Quantity</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in Country currency</summary>
        [Newtonsoft.Json.JsonProperty("amountTransactionCurr", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AmountTransactionCurr
        {
            get { return _amountTransactionCurr; }
            set
            {
                if (_amountTransactionCurr != value)
                {
                    _amountTransactionCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Port of discharge</summary>
        [Newtonsoft.Json.JsonProperty("dischargePort", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DischargePort
        {
            get { return _dischargePort; }
            set
            {
                if (_dischargePort != value)
                {
                    _dischargePort = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique item number in the document</summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ItemId
        {
            get { return _itemId; }
            set
            {
                if (_itemId != value)
                {
                    _itemId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unit of quantity</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Unit
        {
            get { return _unit; }
            set
            {
                if (_unit != value)
                {
                    _unit = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Crop year corresponding to the commodity</summary>
        [Newtonsoft.Json.JsonProperty("cropYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CropYear
        {
            get { return _cropYear; }
            set
            {
                if (_cropYear != value)
                {
                    _cropYear = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Incoterm of the contract</summary>
        [Newtonsoft.Json.JsonProperty("incoterm", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Incoterm
        {
            get { return _incoterm; }
            set
            {
                if (_incoterm != value)
                {
                    _incoterm = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContractId
        {
            get { return _contractId; }
            set
            {
                if (_contractId != value)
                {
                    _contractId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("contractItemId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContractItemId
        {
            get { return _contractItemId; }
            set
            {
                if (_contractItemId != value)
                {
                    _contractItemId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>tbc with guillaume</summary>
        [Newtonsoft.Json.JsonProperty("stase", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Stase
        {
            get { return _stase; }
            set
            {
                if (_stase != value)
                {
                    _stase = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Port of discharge</summary>
        [Newtonsoft.Json.JsonProperty("loadPort", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LoadPort
        {
            get { return _loadPort; }
            set
            {
                if (_loadPort != value)
                {
                    _loadPort = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Physical location</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Location
        {
            get { return _location; }
            set
            {
                if (_location != value)
                {
                    _location = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in group currency</summary>
        [Newtonsoft.Json.JsonProperty("amountGroupCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountGroupCurr
        {
            get { return _amountGroupCurr; }
            set
            {
                if (_amountGroupCurr != value)
                {
                    _amountGroupCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Name of the Vessel</summary>
        [Newtonsoft.Json.JsonProperty("vesselName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string VesselName
        {
            get { return _vesselName; }
            set
            {
                if (_vesselName != value)
                {
                    _vesselName = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InvoiceLgItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceLgItem>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceSublgItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _commodity;
        private string _incoterms;
        private string _intercoPartnerId;
        private string _countryCurrency;
        private string _amountFuncCurr;
        private string _profitCenter;
        private string _branch;
        private string _itemID;
        private string _businessDate;
        private string _amountCountryCurr;
        private string _groupCurrency;
        private string _functCurrency;
        private string _state;
        private string _contractTrader;
        private string _unitPrice;
        private string _quantity;
        private string _baselineDate;
        private string _amountTransactionCurr;
        private string _invoiceDueDate;
        private string _subledgerType;
        private string _counterpartyId;
        private string _bankId;
        private string _unit;
        private string _cropYear;
        private string _debitCard;
        private string _contractId;
        private string _contractItemId;
        private string _location;
        private string _sbox1;
        private string _paymentTerm;
        private string _amountGroupCurr;
        private string _vesselName;

        /// <summary>Commodity code in the LDC group referential</summary>
        [Newtonsoft.Json.JsonProperty("commodity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commodity
        {
            get { return _commodity; }
            set
            {
                if (_commodity != value)
                {
                    _commodity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("incoterms", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Incoterms
        {
            get { return _incoterms; }
            set
            {
                if (_incoterms != value)
                {
                    _incoterms = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("intercoPartnerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string IntercoPartnerId
        {
            get { return _intercoPartnerId; }
            set
            {
                if (_intercoPartnerId != value)
                {
                    _intercoPartnerId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Country currency</summary>
        [Newtonsoft.Json.JsonProperty("countryCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCurrency
        {
            get { return _countryCurrency; }
            set
            {
                if (_countryCurrency != value)
                {
                    _countryCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in functional currency of the entity</summary>
        [Newtonsoft.Json.JsonProperty("amountFuncCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountFuncCurr
        {
            get { return _amountFuncCurr; }
            set
            {
                if (_amountFuncCurr != value)
                {
                    _amountFuncCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Profit center code</summary>
        [Newtonsoft.Json.JsonProperty("profitCenter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ProfitCenter
        {
            get { return _profitCenter; }
            set
            {
                if (_profitCenter != value)
                {
                    _profitCenter = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("branch", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Branch
        {
            get { return _branch; }
            set
            {
                if (_branch != value)
                {
                    _branch = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Unique item number in the document</summary>
        [Newtonsoft.Json.JsonProperty("itemID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ItemID
        {
            get { return _itemID; }
            set
            {
                if (_itemID != value)
                {
                    _itemID = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Transfer of risk date</summary>
        [Newtonsoft.Json.JsonProperty("businessDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BusinessDate
        {
            get { return _businessDate; }
            set
            {
                if (_businessDate != value)
                {
                    _businessDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in Country currency</summary>
        [Newtonsoft.Json.JsonProperty("amountCountryCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountCountryCurr
        {
            get { return _amountCountryCurr; }
            set
            {
                if (_amountCountryCurr != value)
                {
                    _amountCountryCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Group currency - USD</summary>
        [Newtonsoft.Json.JsonProperty("groupCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupCurrency
        {
            get { return _groupCurrency; }
            set
            {
                if (_groupCurrency != value)
                {
                    _groupCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Functional currency</summary>
        [Newtonsoft.Json.JsonProperty("functCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctCurrency
        {
            get { return _functCurrency; }
            set
            {
                if (_functCurrency != value)
                {
                    _functCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("contractTrader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContractTrader
        {
            get { return _contractTrader; }
            set
            {
                if (_contractTrader != value)
                {
                    _contractTrader = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    _unitPrice = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("baselineDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaselineDate
        {
            get { return _baselineDate; }
            set
            {
                if (_baselineDate != value)
                {
                    _baselineDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in Country currency</summary>
        [Newtonsoft.Json.JsonProperty("amountTransactionCurr", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AmountTransactionCurr
        {
            get { return _amountTransactionCurr; }
            set
            {
                if (_amountTransactionCurr != value)
                {
                    _amountTransactionCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("invoiceDueDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string InvoiceDueDate
        {
            get { return _invoiceDueDate; }
            set
            {
                if (_invoiceDueDate != value)
                {
                    _invoiceDueDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicator enable indication whether it is a Vendor or Customer Line, or empty if to be determined by a business rule</summary>
        [Newtonsoft.Json.JsonProperty("subledgerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SubledgerType
        {
            get { return _subledgerType; }
            set
            {
                if (_subledgerType != value)
                {
                    _subledgerType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("counterpartyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CounterpartyId
        {
            get { return _counterpartyId; }
            set
            {
                if (_counterpartyId != value)
                {
                    _counterpartyId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("bankId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankId
        {
            get { return _bankId; }
            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Unit
        {
            get { return _unit; }
            set
            {
                if (_unit != value)
                {
                    _unit = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Crop year corresponding to the commodity</summary>
        [Newtonsoft.Json.JsonProperty("cropYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CropYear
        {
            get { return _cropYear; }
            set
            {
                if (_cropYear != value)
                {
                    _cropYear = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Indicator whther it is a debit credit</summary>
        [Newtonsoft.Json.JsonProperty("debitCard", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DebitCard
        {
            get { return _debitCard; }
            set
            {
                if (_debitCard != value)
                {
                    _debitCard = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Main Contract ID</summary>
        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractId
        {
            get { return _contractId; }
            set
            {
                if (_contractId != value)
                {
                    _contractId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID of the contract split - sub section of a contract</summary>
        [Newtonsoft.Json.JsonProperty("contractItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractItemId
        {
            get { return _contractItemId; }
            set
            {
                if (_contractItemId != value)
                {
                    _contractItemId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Location
        {
            get { return _location; }
            set
            {
                if (_location != value)
                {
                    _location = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Most granular organizational unit from the source application</summary>
        [Newtonsoft.Json.JsonProperty("sbox1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sbox1
        {
            get { return _sbox1; }
            set
            {
                if (_sbox1 != value)
                {
                    _sbox1 = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("paymentTerm", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PaymentTerm
        {
            get { return _paymentTerm; }
            set
            {
                if (_paymentTerm != value)
                {
                    _paymentTerm = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in group currency</summary>
        [Newtonsoft.Json.JsonProperty("amountGroupCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountGroupCurr
        {
            get { return _amountGroupCurr; }
            set
            {
                if (_amountGroupCurr != value)
                {
                    _amountGroupCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("vesselName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string VesselName
        {
            get { return _vesselName; }
            set
            {
                if (_vesselName != value)
                {
                    _vesselName = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InvoiceSublgItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceSublgItem>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceHeader : System.ComponentModel.INotifyPropertyChanged
    {
        private string _documentDate;
        private string _translationDate;
        private string _dmsId;
        private string _acknowledgement;
        private string _invoiceDescription;
        private string _cancellationInvoiceIndicator;
        private string _transactionCurreny;
        private string _documentId;
        private string _transactionDate;
        private string _referenceId;
        private string _legalEntity;
        private string _typeCode;

        /// <summary>date indicated on the document </summary>
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DocumentDate
        {
            get { return _documentDate; }
            set
            {
                if (_documentDate != value)
                {
                    _documentDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>date to consider when we apply a convertion of currencies</summary>
        [Newtonsoft.Json.JsonProperty("translationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslationDate
        {
            get { return _translationDate; }
            set
            {
                if (_translationDate != value)
                {
                    _translationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID enabling the access to the corresponding document in the DSM system</summary>
        [Newtonsoft.Json.JsonProperty("dmsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DmsId
        {
            get { return _dmsId; }
            set
            {
                if (_dmsId != value)
                {
                    _dmsId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("acknowledgement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Acknowledgement
        {
            get { return _acknowledgement; }
            set
            {
                if (_acknowledgement != value)
                {
                    _acknowledgement = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Short description related to the invoice</summary>
        [Newtonsoft.Json.JsonProperty("invoiceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceDescription
        {
            get { return _invoiceDescription; }
            set
            {
                if (_invoiceDescription != value)
                {
                    _invoiceDescription = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>flag indicating the original invoice must be reversed</summary>
        [Newtonsoft.Json.JsonProperty("cancellationInvoiceIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CancellationInvoiceIndicator
        {
            get { return _cancellationInvoiceIndicator; }
            set
            {
                if (_cancellationInvoiceIndicator != value)
                {
                    _cancellationInvoiceIndicator = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Transaction currency</summary>
        [Newtonsoft.Json.JsonProperty("transactionCurreny", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TransactionCurreny
        {
            get { return _transactionCurreny; }
            set
            {
                if (_transactionCurreny != value)
                {
                    _transactionCurreny = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>unique functional ID of the document in the source system</summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    _documentId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>date related to the accounting date / period to book the document</summary>
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TransactionDate
        {
            get { return _transactionDate; }
            set
            {
                if (_transactionDate != value)
                {
                    _transactionDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>ID of the orginal document (eg the invoice ID form the partner) - external reference</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ReferenceId
        {
            get { return _referenceId; }
            set
            {
                if (_referenceId != value)
                {
                    _referenceId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Legal entity</summary>
        [Newtonsoft.Json.JsonProperty("legalEntity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LegalEntity
        {
            get { return _legalEntity; }
            set
            {
                if (_legalEntity != value)
                {
                    _legalEntity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Document type : based on a defined list of variant</summary>
        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TypeCode
        {
            get { return _typeCode; }
            set
            {
                if (_typeCode != value)
                {
                    _typeCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InvoiceHeader FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceHeader>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    public class CommercialInvoiceRoot
    {
        public CommercialInvoice commercialInvoice { get; set; }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CommercialInvoice : System.ComponentModel.INotifyPropertyChanged
    {
        private InvoiceHeader _invoiceHeader;
        private string _senderId;
        private System.Collections.ObjectModel.ObservableCollection<InvoiceSublgItem> _invoiceSublgItem = new System.Collections.ObjectModel.ObservableCollection<InvoiceSublgItem>();
        private System.Collections.ObjectModel.ObservableCollection<InvoiceLgItem> _invoiceLgItem = new System.Collections.ObjectModel.ObservableCollection<InvoiceLgItem>();
        private System.Collections.ObjectModel.ObservableCollection<InvoiceTaxItem> _invoiceTaxItem;

        [Newtonsoft.Json.JsonProperty("invoiceHeader", Required = Newtonsoft.Json.Required.Always)]
        public InvoiceHeader InvoiceHeader
        {
            get { return _invoiceHeader; }
            set
            {
                if (_invoiceHeader != value)
                {
                    _invoiceHeader = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>This is the Identification of the LDC application sending this message. Referential will be provided by enterprise architecture team.</summary>
        [Newtonsoft.Json.JsonProperty("senderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SenderId
        {
            get { return _senderId; }
            set
            {
                if (_senderId != value)
                {
                    _senderId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("invoiceSublgItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<InvoiceSublgItem> InvoiceSublgItem
        {
            get { return _invoiceSublgItem; }
            set
            {
                if (_invoiceSublgItem != value)
                {
                    _invoiceSublgItem = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("invoiceLgItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<InvoiceLgItem> InvoiceLgItem
        {
            get { return _invoiceLgItem; }
            set
            {
                if (_invoiceLgItem != value)
                {
                    _invoiceLgItem = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("invoiceTaxItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InvoiceTaxItem> InvoiceTaxItem
        {
            get { return _invoiceTaxItem; }
            set
            {
                if (_invoiceTaxItem != value)
                {
                    _invoiceTaxItem = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CommercialInvoice FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CommercialInvoice>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceTaxItem : System.ComponentModel.INotifyPropertyChanged
    {
        private string _commodity;
        private string _countryCurrency;
        private string _amountFuncCurr;
        private string _profitCenter;
        private string _amountTransactionCurr;
        private string _amountCountryCurr;
        private string _groupCurrency;
        private string _cropYear;
        private string _contractId;
        private string _contractItemId;
        private string _functCurrency;
        private string _interCoPartnerId;
        private string _amountGroupCurr;

        /// <summary>Commodity code in the LDC group referential</summary>
        [Newtonsoft.Json.JsonProperty("commodity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commodity
        {
            get { return _commodity; }
            set
            {
                if (_commodity != value)
                {
                    _commodity = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Country currency</summary>
        [Newtonsoft.Json.JsonProperty("countryCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCurrency
        {
            get { return _countryCurrency; }
            set
            {
                if (_countryCurrency != value)
                {
                    _countryCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in functional currency of the entity</summary>
        [Newtonsoft.Json.JsonProperty("amountFuncCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountFuncCurr
        {
            get { return _amountFuncCurr; }
            set
            {
                if (_amountFuncCurr != value)
                {
                    _amountFuncCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Profit center code</summary>
        [Newtonsoft.Json.JsonProperty("profitCenter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ProfitCenter
        {
            get { return _profitCenter; }
            set
            {
                if (_profitCenter != value)
                {
                    _profitCenter = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in Country currency</summary>
        [Newtonsoft.Json.JsonProperty("amountTransactionCurr", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AmountTransactionCurr
        {
            get { return _amountTransactionCurr; }
            set
            {
                if (_amountTransactionCurr != value)
                {
                    _amountTransactionCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in Country currency</summary>
        [Newtonsoft.Json.JsonProperty("amountCountryCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountCountryCurr
        {
            get { return _amountCountryCurr; }
            set
            {
                if (_amountCountryCurr != value)
                {
                    _amountCountryCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Group currency - USD</summary>
        [Newtonsoft.Json.JsonProperty("groupCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupCurrency
        {
            get { return _groupCurrency; }
            set
            {
                if (_groupCurrency != value)
                {
                    _groupCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Year</summary>
        [Newtonsoft.Json.JsonProperty("cropYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CropYear
        {
            get { return _cropYear; }
            set
            {
                if (_cropYear != value)
                {
                    _cropYear = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractId
        {
            get { return _contractId; }
            set
            {
                if (_contractId != value)
                {
                    _contractId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("contractItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractItemId
        {
            get { return _contractItemId; }
            set
            {
                if (_contractItemId != value)
                {
                    _contractItemId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Functional currency</summary>
        [Newtonsoft.Json.JsonProperty("functCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctCurrency
        {
            get { return _functCurrency; }
            set
            {
                if (_functCurrency != value)
                {
                    _functCurrency = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("interCoPartnerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InterCoPartnerId
        {
            get { return _interCoPartnerId; }
            set
            {
                if (_interCoPartnerId != value)
                {
                    _interCoPartnerId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount in group currency</summary>
        [Newtonsoft.Json.JsonProperty("amountGroupCurr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AmountGroupCurr
        {
            get { return _amountGroupCurr; }
            set
            {
                if (_amountGroupCurr != value)
                {
                    _amountGroupCurr = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static InvoiceTaxItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvoiceTaxItem>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}