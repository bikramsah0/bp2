import { Cost } from '../entities/cost.entity';
import { SectionReference } from '../entities/section-reference.entity';
import { Section } from '../entities/section.entity';
import { Trade } from '../entities/trade.entity';
import { ContractStatus } from '../enums/contract-status.enum';
import { ContractTypes } from '../enums/contract-type.enum';
import { PositionMonthTypes } from '../enums/position-month-type.enum';
import { PricingMethods } from '../enums/pricing-method.enum';
import { SectionTypes } from '../enums/section-type.enum';

export class TrancheSplitView {
    constructor(section: Section, quantity: number, id: number = 0, sectionType: number = 1) {
        this.id = id;
        this.contractType = section.contractType;
        this.contractLabel = section.contractLabel;
        this.contractId = section.contractId;
        this.commodityId = section.commodityId;
        this.sectionNumber = section.sectionNumber;
        this.status = section.status;
        this.firstApprovalDateTime = section.firstApprovalDateTime;
        this.departmentId = section.departmentId;
        this.buyerCode = section.buyerCode;
        this.sellerCode = section.sellerCode;
        this.counterpartyReference = section.counterpartyReference;
        this.originalQuantity = section.originalQuantity;
        this.quantity = quantity;
        this.portOfOrigin = section.portOfOrigin;
        this.portOfDestination = section.portOfDestination;
        this.costs = section.costs;
        this.deliveryPeriodStartDate = section.deliveryPeriodStartDate;
        this.deliveryPeriodEndDate = section.deliveryPeriodEndDate;
        this.positionMonthType = section.positionMonthType;
        this.positionMonthIndex = section.positionMonthIndex;
        this.cropYear = section.cropYear;
        this.packingCode = section.packingCode;
        this.contractTerms = section.contractTerms;
        this.contractTermsLocation = section.contractTermsLocation;
        this.periodTypeCode = section.periodTypeCode;
        this.periodTypeId = section.periodTypeId;
        this.arbitration = section.arbitration;
        this.pricingMethod = section.pricingMethod;
        this.paymentTerms = section.paymentTerms;
        this.currency = section.currencyCode;
        this.price = section.price;
        this.blDate = section.blDate;
        this.allocatedToId = section.allocatedToId;
        this.allocatedTo = section.allocatedTo;
        this.allocationDate = section.allocationDate;
        this.assignedCharterReference = section.assignedCharterReference;
        this.charterAssignmentDate = section.charterAssignmentDate;
        this.createdBy = section.createdBy;
        this.creationDate = section.creationDate;
        this.lastModifiedBy = section.lastModifiedBy;
        this.lastModifiedDate = section.lastModifiedDate;
        this.header = section.header;
        this.periodTypeId = section.periodTypeId;
        this.sectionOriginId = section.sectionId;
        this.contractLabelOrigin = section.contractLabelOrigin;
        this.premiumDiscountValue = section.premiumDiscountValue;
        this.premiumDiscountCurrency = section.premiumDiscountCurrency;
        this.premiumDiscountBasis = section.premiumDiscountBasis;
        this.memorandum = section.memorandum;
        this.contractedValue = section.contractedValue;
        this.weightUnitId = section.weightUnitId;
        this.priceUnitId = section.priceUnitId;
        this.marketSectorId = section.marketSectorId;
        this.sectionTypeId = sectionType === SectionTypes.Tranche ? SectionTypes.Tranche : SectionTypes.Split;
    }

    contractType: ContractTypes;
    sectionId: number;
    contractId: number;
    physicalContractId: number;
    contractLabel: string;
    sectionNumber: string;
    status: ContractStatus;
    firstApprovalDateTime: Date;
    departmentId: number;
    buyerCode: string;
    sellerCode: string;
    counterpartyReference: string;
    commodityId: number;
    originalQuantity: number;
    quantity: number;
    weightUnitId: number;
    portOfOrigin: string;
    portOfDestination: string;
    deliveryPeriodStartDate: Date;
    deliveryPeriodEndDate: Date;
    costs: Cost[];
    positionMonthType: PositionMonthTypes;
    positionMonthIndex: number;
    positionMonth: Date;
    cropYear: number;
    cropYearTo: number;
    packingCode: string;
    contractTerms: string;
    contractTermsLocation: string;
    periodTypeCode: string;
    periodTypeId: number;
    arbitration: string;
    marketSectorId: number;
    pricingMethod: PricingMethods;
    paymentTerms: string;
    currency: string;
    priceUnitId: number;
    price: number;
    blDate: Date;
    allocatedToId: number;
    allocatedTo: SectionReference;
    allocationDate: Date;
    assignedCharterReference: string;
    charterAssignmentDate: Date;
    createdBy: string;
    creationDate: Date;
    lastModifiedBy: string;
    lastModifiedDate: Date;
    header: Trade<Section>;
    sectionOriginId: number;
    contractLabelOrigin: string;
    premiumDiscountValue: number;
    premiumDiscountCurrency: string;
    premiumDiscountBasis: number;
    memorandum: string;
    contractedValue: string;
    sectionTypeId: number;
    contractDate: Date;
    charterId: number;
    isTouched: boolean;
    id: number;
}
