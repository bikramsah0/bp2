import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { DocumentPopupButtonSettings } from '../../entities/document-popup-button-settings.entity';
import { FormConfigurationProviderService } from '../../services/form-configuration-provider.service';
import { GenerateDocumentActions } from './../../enums/generate-document-action.enum';
import { SnackbarService } from './../../services/snackbar.service';
import { UiService } from './../../services/ui.service';

@Component({
    selector: 'atlas-document-generation-confirmation-dialog-box',
    templateUrl: './document-generation-confirmation-dialog-box.component.html',
    styleUrls: ['./document-generation-confirmation-dialog-box.component.scss'],
})
export class DocumentGenerationConfirmationDialogBoxComponent implements OnInit {
    @Output() readonly documentSelected = new EventEmitter<File>();
    dialogData: {
        title: string,
        hasBrowseButton: boolean,
        entityName: string,
        useEntityNameInButtons: boolean,
        buttonSettings: DocumentPopupButtonSettings,
    };
    bannerTitle = '';
    bannerDescription = '';
    dialogText = '';
    errorMessage = '';
    processMessage = '';
    isWorkInProgress: boolean = false;
    discardTooltip: string = 'Go back and don\'t generate the document';

    constructor(protected formBuilder: FormBuilder,
        public thisDialogRef: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>,
        @Inject(MAT_DIALOG_DATA) public data: {
            title: string, hasBrowseButton: boolean, entityName: string, useEntityNameInButtons: boolean,
            buttonSettings: DocumentPopupButtonSettings,
        },
        protected snackbarService: SnackbarService,
        protected formConfigurationProvider: FormConfigurationProviderService,
        protected uiService: UiService,
    ) {
        this.dialogData = data;
        this.dialogText = 'To create a' + (this.uiService.startsWithVowel(this.dialogData.entityName) ? 'n' : '') + ' '
            + this.dialogData.entityName + ', you can choose to edit the ' + this.dialogData.entityName
            + ' document or to use the one generated by Atlas.';
        thisDialogRef.disableClose = true;
    }

    ngOnInit() {
    }

    onConfirmClicked() {
        this.thisDialogRef.close({ buttonClicked: GenerateDocumentActions.ConfirmDocumentGeneration });
    }

    onFileSelected(event) {
        if (event.target.files.length === 0) {
            return;
        }
        const file: File = event.target.files[0];
        this.documentSelected.emit(file);
        event.stopPropagation();
    }

    onNoClicked() {
        this.thisDialogRef.close(false);
    }
}
