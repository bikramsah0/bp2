{"version":3,"sources":["webpack:///./Client/app/execution/services/execution-cash-common-methods.ts","webpack:///./Client/app/shared/entities/common-entity.ts","webpack:///./Client/app/shared/enums/cash-type.enum.ts","webpack:///./Client/app/shared/enums/transaction-document.enum.ts","webpack:///./Client/app/shared/enums/warning-message-type.enum.ts","webpack:///./Client/app/shared/models/freeze-display-view.ts","webpack:///./Client/app/shared/services/execution/charter-data-loader.ts"],"names":[],"mappings":"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","file":"execution-execution-module~financial-financial-module~reporting-reporting-module~trading-trading-mod~4658959d.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Charter } from '../../shared/entities/charter.entity';\r\nimport { MasterData } from '../../shared/entities/masterdata.entity';\r\nimport { CashType } from '../../shared/enums/cash-type.enum';\r\nimport { TransactionDocument } from '../../shared/enums/transaction-document.enum';\r\nimport { CharterDisplayView } from '../../shared/models/charter-display-view';\r\nimport { CashMatching } from '../../shared/services/execution/dtos/cash-matching';\r\nimport { CommonEntity } from '../../shared/entities/common-entity';\r\nimport { WarningMessageTypes } from '../../shared/enums/warning-message-type.enum';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CommonMethods {\r\n    constructor(\r\n    ) { }\r\n    // get counterpartyid based on counterpartyCode from masterdata\r\n    public getCounterpartyIdBasedOnCodeFromMasterData(counterpartyCode: string, masterData: MasterData): number {\r\n\r\n        if (masterData.counterparties && masterData.counterparties.length > 0) {\r\n            const counterparty = masterData.counterparties.filter(\r\n                (item) => item.counterpartyCode === counterpartyCode,\r\n            );\r\n            if (counterparty.length > 0) {\r\n                return counterparty[0].counterpartyID;\r\n            }\r\n        }\r\n    }\r\n\r\n    // get departmentcode based on departmentId from masterdata\r\n    public getCounterpartyCodeBasedOnIdFromMasterData(counterpartyID: number, masterData: MasterData): string {\r\n\r\n        if (masterData.counterparties && masterData.counterparties.length > 0) {\r\n            const counterparty = masterData.counterparties.filter(\r\n                (item) => item.counterpartyID === counterpartyID,\r\n            );\r\n            if (counterparty.length > 0) {\r\n                return counterparty[0].counterpartyCode;\r\n            }\r\n        }\r\n    }\r\n\r\n    // get department id based on departmentcode from masterdata\r\n    public getDepartmentIdBasedOnCodeFromMasterData(departmentCode: string, masterData: MasterData): number {\r\n\r\n        if (masterData.departments && masterData.departments.length > 0) {\r\n            const department = masterData.departments.filter(\r\n                (item) => item.departmentCode === departmentCode,\r\n            );\r\n            if (department.length > 0) {\r\n                return department[0].departmentId;\r\n            }\r\n        }\r\n    }\r\n\r\n    // get department code based on departmentId from masterdata\r\n    public getDepartmentCodeBasedOnIdFromMasterData(departmentID: number, masterData: MasterData): string {\r\n\r\n        if (masterData.departments && masterData.departments.length > 0) {\r\n            const department = masterData.departments.filter(\r\n                (item) => item.departmentId === departmentID,\r\n            );\r\n            if (department.length > 0) {\r\n                return department[0].departmentCode;\r\n            }\r\n        }\r\n    }\r\n\r\n    // get department code and description  based on departmentId from masterdata\r\n    public getDepartmentCodeDescriptionBasedOnIdFromMasterData(departmentID: number, masterData: MasterData): string {\r\n\r\n        if (masterData.departments && masterData.departments.length > 0) {\r\n            const department = masterData.departments.filter(\r\n                (item) => item.departmentId === departmentID,\r\n            );\r\n            if (department.length > 0) {\r\n                return department[0].departmentCode + ' | ' + department[0].description;\r\n            }\r\n        }\r\n    }\r\n\r\n    // get payementTermcode based on paymentID from Masterdata\r\n    getPaymentTermCodeBasedOnIdFromMasterData(paymentTermId: number, masterData: MasterData): string {\r\n        if (masterData.paymentTerms && masterData.paymentTerms.length > 0) {\r\n            const paymentTerm = masterData.paymentTerms.filter(\r\n                (item) => item.paymentTermsId === paymentTermId,\r\n            );\r\n            if (paymentTerm.length > 0) {\r\n                return paymentTerm[0].paymentTermCode;\r\n            }\r\n        }\r\n    }\r\n\r\n    // get charter code based on charterid from charterList\r\n    getCharterReferenceBasedOnIdFromCharterList(charterId: number, charters: CharterDisplayView[]): string {\r\n        if (charters && charters.length > 0) {\r\n            const charter = charters.filter(\r\n                (item) => item.charterId === charterId,\r\n            );\r\n            if (charter.length > 0) {\r\n                return charter[0].charterCode;\r\n            }\r\n        }\r\n    }\r\n\r\n    // This method returns the sign to show in the document amount with sign in\r\n    // invoice list in pick by transaction page in cash module.\r\n    // Here documentType are like PI,SI,CN,DN and costDirectionId is Pay/receipt\r\n    getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection(documentType: string, costDirectionId: number, document: CashMatching, isLoading: boolean)\r\n        : number {\r\n        let signedValue = 1;\r\n        if (documentType && costDirectionId) {\r\n            if (documentType === TransactionDocument.PurchaseInvoice || documentType === TransactionDocument.CreditNote\r\n            ) {\r\n                signedValue = -1;\r\n            } else if (documentType === TransactionDocument.SalesInvoice || documentType === TransactionDocument.DebitNote\r\n            ) {\r\n                signedValue = 1;\r\n            }\r\n            else if ((documentType === TransactionDocument.JournalEntry\r\n                || documentType === TransactionDocument.CashPayment) && !isLoading) {\r\n                signedValue = Math.sign(document.amount);\r\n            }\r\n            else if (documentType === TransactionDocument.CashReceipt) {\r\n                signedValue = Math.sign(document.amount) * (-1);\r\n            }\r\n\r\n            if (isLoading) {\r\n                return signedValue;\r\n            }\r\n            else {\r\n\r\n                return (costDirectionId === CashType.CashPayment) ? signedValue : -signedValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    // this method will return charterid from charterlist based on charter code\r\n    getCharterIdFromCharterList(charterCode: string, charters: Charter[]): number {\r\n        if (charters && charters.length > 0) {\r\n            const charter = charters.find((item) => item.charterCode === charterCode);\r\n            if (charter) {\r\n                return charter.charterId;\r\n            }\r\n        }\r\n    }\r\n\r\n    // this method is used to format the number to comma separated value with decimal points.\r\n    // ex: 123456.13 => 123,456.13\r\n    // ex: 123 => 123.00\r\n    getFormattedNumberValue(value: any, numberOfDigits: number = 2) {\r\n        if (isNaN(value) || value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: numberOfDigits, maximumFractionDigits: numberOfDigits }).\r\n            format(value);\r\n\r\n    }\r\n\r\n    // This method used while allocation of trades.\r\n    // based on the feild setup value it will add message and error type id to the common entity.\r\n    populateAllocationMessages(isdifferenceBlocking: boolean,\r\n        isDifferenceWarning: boolean, message: string): CommonEntity {\r\n        let errorMessage = new CommonEntity();\r\n\r\n        errorMessage.message = message;\r\n        errorMessage.id = isdifferenceBlocking ? WarningMessageTypes.Restricted :\r\n            (isDifferenceWarning ? WarningMessageTypes.Warning : null);\r\n\r\n        return errorMessage;\r\n    }\r\n}\r\n","export class CommonEntity {\r\n    id: number;\r\n    message: string;\r\n}","export enum CashType {\r\n    CashPayment = 1,\r\n    CashReceipt = 2,\r\n}\r\n","export enum TransactionDocument {\r\n    PurchaseInvoice = 'PI',\r\n    SalesInvoice = 'SI',\r\n    CreditNote = 'CN',\r\n    DebitNote = 'DN',\r\n    CashPayment = 'CP',\r\n    CashReceipt = 'CI',\r\n    JournalEntry = 'JL',\r\n    Revaluation = 'RV',\r\n}\r\n","export enum WarningMessageTypes {\r\n\r\n    Restricted = 1,\r\n    Warning = 2,\r\n\r\n}\r\n","export class FreezeDisplayView {\r\n    dataVersionId: number;\r\n    freezeDate: string;\r\n    actualfreezeDate: Date;\r\n    dataVersionTypeId: number;\r\n\r\n    constructor(dataVersionId: number, freezeDate: string, actualfreezeDate: Date = null, dataVersionTypeId: number = null) {\r\n        this.dataVersionId = dataVersionId;\r\n        this.freezeDate = freezeDate;\r\n        this.actualfreezeDate = actualfreezeDate;\r\n        this.dataVersionTypeId = dataVersionTypeId;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Charter } from '../../entities/charter.entity';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { ExecutionService } from '../http-services/execution.service';\r\n\r\n@Injectable()\r\nexport class CharterDataLoader implements MasterDataLoader {\r\n    constructor(private executionService: ExecutionService) { }\r\n\r\n    getData(): Observable<Charter[]> {\r\n        const list = this.executionService.getCharters()\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value ? data.value.sort\r\n                        ((a, b) => (a.charterCode > b.charterCode) ? 1 : -1) : data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n"],"sourceRoot":""}