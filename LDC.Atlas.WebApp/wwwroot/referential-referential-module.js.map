{"version":3,"sources":["webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/apply/counterparty-apply-button.component.html","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/apply/counterparty-apply-button.component.scss","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/apply/counterparty-apply-button.component.ts","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/counterparty-detail-component.component.html","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/counterparty-detail-component.component.scss","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/counterparty-detail-component.component.ts","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/select-multi-dropdown/select-multi-dropdown.component.html","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/select-multi-dropdown/select-multi-dropdown.component.scss","webpack:///./Client/app/referential/components/referential-bulk-amendment/detail/select-multi-dropdown/select-multi-dropdown.component.ts","webpack:///./Client/app/referential/components/referential-bulk-amendment/list/counterparty-list-component.component.html","webpack:///./Client/app/referential/components/referential-bulk-amendment/list/counterparty-list-component.component.scss","webpack:///./Client/app/referential/components/referential-bulk-amendment/list/counterparty-list-component.component.ts","webpack:///./Client/app/referential/components/referential-bulk-amendment/referential-bulk-amendment-component.component.html","webpack:///./Client/app/referential/components/referential-bulk-amendment/referential-bulk-amendment-component.component.scss","webpack:///./Client/app/referential/components/referential-bulk-amendment/referential-bulk-amendment-component.component.ts","webpack:///./Client/app/referential/components/referential-bulk-amendment/summary/counterparty-summary-component.component.html","webpack:///./Client/app/referential/components/referential-bulk-amendment/summary/counterparty-summary-component.component.scss","webpack:///./Client/app/referential/components/referential-bulk-amendment/summary/counterparty-summary-component.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/address-card/counterparty-address-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/address-card/counterparty-address-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/address-card/counterparty-address-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/address-detail-card/counterparty-address-detail-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/address-detail-card/counterparty-address-detail-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/address-detail-card/counterparty-address-detail-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/counterparty-capture-form-address-tab.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/counterparty-capture-form-address-tab.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/address-tab/counterparty-capture-form-address-tab.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-details/counterparty-bank-account-details.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-details/counterparty-bank-account-details.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-details/counterparty-bank-account-details.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-list/counterparty-bank-account-list.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-list/counterparty-bank-account-list.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-list/counterparty-bank-account-list.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/counterparty-capture-form-bank-account-tab.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/counterparty-capture-form-bank-account-tab.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/bank-account-tab/counterparty-capture-form-bank-account-tab.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/contact-detail-card/contact-detail-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/contact-detail-card/contact-detail-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/contact-detail-card/contact-detail-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/contact-list-card/contact-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/contact-list-card/contact-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/contact-list-card/contact-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/counterparty-capture-form-contact-tab.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/counterparty-capture-form-contact-tab.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/contact-tab/counterparty-capture-form-contact-tab.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-capture.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-capture.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-capture.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-header/counterparty-header.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-header/counterparty-header.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-header/counterparty-header.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-management-menu-bar/counterparty-management-menu-bar.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-management-menu-bar/counterparty-management-menu-bar.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/counterparty-management-menu-bar/counterparty-management-menu-bar.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/alternate-mailing-card/alternate-mailing-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/alternate-mailing-card/alternate-mailing-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/alternate-mailing-card/alternate-mailing-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/counterparty-capture-form-main-tab.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/counterparty-capture-form-main-tab.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/counterparty-capture-form-main-tab.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/customer-default-card/customer-default-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/customer-default-card/customer-default-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/customer-default-card/customer-default-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/information-card/associated-company/associated-counterparties-company.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/information-card/associated-company/associated-counterparties-company.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/information-card/associated-company/associated-counterparties-company.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/information-card/information-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/information-card/information-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/information-card/information-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/main-address-card/main-address-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/main-address-card/main-address-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/main-address-card/main-address-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/third-system-codes-card/third-system-codes-card.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/third-system-codes-card/third-system-codes-card.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/main-tab/third-system-codes-card/third-system-codes-card.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/report-tab/counterparty-capture-form-report-tab.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/report-tab/counterparty-capture-form-report-tab.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/report-tab/counterparty-capture-form-report-tab.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/tax-info-tab/counterparty-capture-form-tax-info-tab.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/tax-info-tab/counterparty-capture-form-tax-info-tab.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/tax-info-tab/counterparty-capture-form-tax-info-tab.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/tax-info-tab/tax-ag-grid-row.ts","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/tax-info-tab/tax-grid-action/tax-grid-action.component.html","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/tax-info-tab/tax-grid-action/tax-grid-action.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/counterparty-capture/tax-info-tab/tax-grid-action/tax-grid-action.component.ts","webpack:///./Client/app/referential/components/referential-counterparties/referential-counterparties.component.html","webpack:///./Client/app/referential/components/referential-counterparties/referential-counterparties.component.scss","webpack:///./Client/app/referential/components/referential-counterparties/referential-counterparties.component.ts","webpack:///./Client/app/referential/components/referential-counterparty-tab/referential-counterparty-tab.component.html","webpack:///./Client/app/referential/components/referential-counterparty-tab/referential-counterparty-tab.component.scss","webpack:///./Client/app/referential/components/referential-counterparty-tab/referential-counterparty-tab.component.ts","webpack:///./Client/app/referential/components/referential-master-data-component/assign-masterdata-dialog-box/assign-masterdata-dialog-box.component.html","webpack:///./Client/app/referential/components/referential-master-data-component/assign-masterdata-dialog-box/assign-masterdata-dialog-box.component.scss","webpack:///./Client/app/referential/components/referential-master-data-component/assign-masterdata-dialog-box/assign-masterdata-dialog-box.component.ts","webpack:///./Client/app/referential/components/referential-master-data-component/assign-masterdata-dialog-box/referential-masterdata-menu-actions.enum.ts","webpack:///./Client/app/referential/components/referential-master-data-component/referential-master-data-component.component.html","webpack:///./Client/app/referential/components/referential-master-data-component/referential-master-data-component.component.scss","webpack:///./Client/app/referential/components/referential-master-data-component/referential-master-data-component.component.ts","webpack:///./Client/app/referential/components/referential-master-data-menu-component/referential-master-data-menu-component.component.html","webpack:///./Client/app/referential/components/referential-master-data-menu-component/referential-master-data-menu-component.component.scss","webpack:///./Client/app/referential/components/referential-master-data-menu-component/referential-master-data-menu-component.component.ts","webpack:///./Client/app/referential/components/trading-and-execution-component/trading-and-execution-component.component.html","webpack:///./Client/app/referential/components/trading-and-execution-component/trading-and-execution-component.component.scss","webpack:///./Client/app/referential/components/trading-and-execution-component/trading-and-execution-component.component.ts","webpack:///./Client/app/referential/referential.module.ts","webpack:///./Client/app/referential/referential.route.ts","webpack:///./Client/app/referential/resolvers/referential-master-data-title.resolver.ts","webpack:///./Client/app/shared/entities/counterparty-company.entity.ts","webpack:///./Client/app/shared/entities/counterparty.entity.ts","webpack:///./Client/app/shared/entities/field-errors.entity.ts","webpack:///./Client/app/shared/entities/field-validation.entity.ts","webpack:///./Client/app/shared/entities/masterdata-deletion-result.entity.ts","webpack:///./Client/app/shared/entities/status-description.entity.ts","webpack:///./Client/app/shared/entities/title-designation.entity.ts","webpack:///./Client/app/shared/enums/bank-type.enum.ts","webpack:///./Client/app/shared/enums/masterdata-operation-status.entity.ts","webpack:///./Client/app/shared/enums/status-description.ts","webpack:///./Client/app/shared/enums/status.enum.ts","webpack:///./Client/app/shared/enums/title-designation.ts","webpack:///./Client/app/shared/services/grid/grid-actions.service.ts","webpack:///./Client/app/shared/services/http-services/referential-counterparties.service.ts","webpack:///./Client/app/shared/services/list-and-search/counterparty-bulk-edit-data-loader.ts","webpack:///./Client/app/shared/services/list-and-search/referentialCounterparties-data-loader.ts","webpack:///./Client/app/shared/services/masterdata-management.service.ts"],"names":[],"mappings":"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","file":"referential-referential-module.js","sourcesContent":["module.exports = \"<button mat-raised-button\\r\\n        style=\\\"width:55px;height:32px;\\\"\\r\\n        (click)=\\\"onDetailsPreviousButtonClicked()\\\">\\r\\n    APPLY\\r\\n</button>\"","module.exports = \"button.mat-raised-button {\\n  margin: 2px;\\n  padding: 0 5px 5px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\nimport { BulkEditSearchResult } from '../../../../../shared/dtos/bulkEdit-search-result';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Country } from '../../../../../shared/entities/country.entity';\r\nimport { Province } from '../../../../../shared/entities/province.entity';\r\nimport { AddressType } from '../../../../../shared/entities/address-type.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-apply-button',\r\n    templateUrl: './counterparty-apply-button.component.html',\r\n    styleUrls: ['./counterparty-apply-button.component.scss']\r\n})\r\nexport class CounterpartyApplyButtonComponent implements ICellRendererAngularComp {\r\n    public params: any;\r\n    rowIndex: any;\r\n    pinnedRowData: BulkEditSearchResult;\r\n    masterdata: MasterData;\r\n    filteredCountry: Country[];\r\n    filteredprovinces: Province[];\r\n    filteredaddressTypes: AddressType[];\r\n\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.rowIndex = params.rowIndex;\r\n        this.pinnedRowData = params.data;\r\n    }\r\n\r\n    constructor(private route: ActivatedRoute, ) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n\r\n    onDetailsPreviousButtonClicked() {\r\n        this.params.context.componentParent.updateAllRow(this.pinnedRowData)\r\n    }\r\n}\r\n\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-around start\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxFlex=\\\"98.5\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-title class=\\\"atlas-grid-card-title mat-card-title\\\">Counterparties to edit</mat-card-title>\\r\\n            <mat-card-content>\\r\\n                <div ag-grid=\\\"detailCounterpartiesLineGridOptions\\\">\\r\\n                    <ag-grid-angular class=\\\"ag-theme-material atr-ag-grid\\\"\\r\\n                                     [rowData]=\\\"editCounterpartyDocumentLines\\\"\\r\\n                                     [columnDefs]=\\\"columnDefs\\\"\\r\\n                                     domLayout=\\\"autoHeight\\\"\\r\\n                                     (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                     [pinnedTopRowData]=\\\"pinnedTopRowData\\\"\\r\\n                                     [pagination]=\\\"true\\\"\\r\\n                                     [paginationPageSize]=\\\"15\\\"\\r\\n                                     [enableSorting]=\\\"true\\\"\\r\\n                                     [enableColResize]=\\\"false\\\"\\r\\n                                     [singleClickEdit]=true\\r\\n                                     [enableRangeSelection]=\\\"true\\\"\\r\\n                                     (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                     [rowHeight]=32>\\r\\n                    </ag-grid-angular>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"::ng-deep .ag-theme-material .ag-cell-inline-editing {\\n  padding: 4px !important;\\n  z-index: 0 !important; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridAutocompleteComponent } from '../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BulkEditSearchResult } from '../../../../shared/dtos/bulkEdit-search-result';\r\nimport { ReferentialCounterpartiesSearchResult } from '../../../../shared/dtos/referential-Counterparties-search-result';\r\nimport { AddressType } from '../../../../shared/entities/address-type.entity';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { CounterpartyTradeStatus } from '../../../../shared/entities/counterparty-trade-status.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { Country } from '../../../../shared/entities/country.entity';\r\nimport { LdcRegion } from '../../../../shared/entities/ldc-region.entity';\r\nimport { MasterDataProps } from '../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { Province } from '../../../../shared/entities/province.entity';\r\nimport { StatusDescriptionTypes } from '../../../../shared/entities/status-description.entity';\r\nimport { StatusDescription } from '../../../../shared/enums/status-description';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { CounterpartyApplyButtonComponent } from './apply/counterparty-apply-button.component';\r\nimport { SelectMultiDropdownComponent } from './select-multi-dropdown/select-multi-dropdown.component';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-detail-component',\r\n    templateUrl: './counterparty-detail-component.component.html',\r\n    styleUrls: ['./counterparty-detail-component.component.scss'],\r\n})\r\nexport class CounterpartyDetailComponentComponent implements OnInit {\r\n    columnDefs: agGrid.ColDef[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    editCounterpartyDocumentLines: BulkEditSearchResult[];\r\n    countryList = new Array<string>();\r\n    filteredLdcRegion: LdcRegion[];\r\n    masterdata: MasterData;\r\n    filteredCountry: Country[];\r\n    filteredCounterpartyList: Counterparty[];\r\n    headOfFamilyControl: Counterparty[];\r\n    statusoptions: StatusDescriptionTypes[];\r\n    titleToView: StatusDescriptionTypes = new StatusDescriptionTypes();\r\n    isSummaryView: boolean = false;\r\n    counterpartyTradeStatusList: CounterpartyTradeStatus[] = [];\r\n    filteredProvince: Province[];\r\n    filteredAddressType: AddressType[];\r\n    columnName: any;\r\n    flagOnChangeValue: boolean = false;\r\n    bulkEditField: string = 'Bulk edit row';\r\n    filteredCompanies: Company[] = [];\r\n    selectedCompanies: Company[] = [];\r\n    pinnedTopRowData: any;\r\n    constructor(protected masterdataService: MasterdataService, private route: ActivatedRoute) { }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCountry = this.masterdata.countries;\r\n        this.filteredLdcRegion = this.masterdata.regions;\r\n        this.filteredCounterpartyList = this.masterdata.counterparties;\r\n        this.counterpartyTradeStatusList = this.masterdata.tradeStatus;\r\n        this.filteredProvince = this.masterdata.provinces;\r\n        this.filteredAddressType = this.masterdata.addressTypes;\r\n        this.filteredCompanies = this.masterdata.companies;\r\n        this.statusoptions = [\r\n            {\r\n                titleId: StatusDescription.StatusActive,\r\n                StatusDescription: 'Active',\r\n            },\r\n            {\r\n                titleId: StatusDescription.StatusInactive,\r\n                StatusDescription: 'Inactive',\r\n            },\r\n        ];\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n    }\r\n\r\n    contractToBeSelected(contracts: BulkEditSearchResult[]) {\r\n        this.editCounterpartyDocumentLines = contracts;\r\n        this.agGridApi.sizeColumnsToFit();\r\n        setTimeout(() => {\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        })\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n        }\r\n\r\n        return params.value;\r\n    }\r\n\r\n    notRequiredCell(params) {\r\n        return params.value;\r\n    }\r\n\r\n    updateAllRow(rowData) {\r\n        this.columnDefs.forEach((columnField) => {\r\n            this.columnName = columnField.field;\r\n            if (rowData[this.columnName] && rowData[this.columnName] != this.bulkEditField) {\r\n                this.agGridApi.forEachNode((rowNode) => {\r\n                    rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getPinnedTopData() {\r\n        return [\r\n            {\r\n                rowStatus: 'Bulk edit row',\r\n                accountReference: '',\r\n                tradeStatusId: '',\r\n                statusId: '',\r\n                accountTitle: '',\r\n                address1: '',\r\n                address2: '',\r\n                main: '',\r\n                city: '',\r\n                country: '',\r\n                zipCode: '',\r\n                mailEmailAddress: '',\r\n                ldcRegion: '',\r\n                province: '',\r\n                addressType: '',\r\n                headOfFamily: '',\r\n                associatedCompanies: '',\r\n                mdmId: '',\r\n                mDMCategoryId: '',\r\n                apply: ' ',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.colDef !== 'headOfFamily') {\r\n            if (params.oldValue !== params.newValue) {\r\n                params.node.data.isDirty = true;\r\n                params.node.setDataValue('rowStatus', 'A');\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'rowStatus',\r\n                field: 'rowStatus',\r\n                editable: false,\r\n                pinned: 'left',\r\n                cellRenderer: (params) => {\r\n                    if (params.value) {\r\n                        return '<mat-chip-list><mat-chip style=\"background-color:green;color:white;text-overflow:clip;\">' + params.value +\r\n                            '</mat-chip></mat-chip-list>';\r\n                    }\r\n\r\n                    return '<mat-chip-list><mat-chip style=\"background-color:green;color:white;text-overflow:clip;\">N</mat-chip></mat-chip-list>';\r\n                },\r\n                pinnedRowCellRenderer: (params) => {\r\n                    if (params.value) {\r\n                        return '<mat-chip-list><mat-chip style=\"background-color:white;color:black;text-overflow:clip;\">' + 'Bulk Edit Row' +\r\n                            '</mt-chip></mat-chip-list>';\r\n                    }\r\n                    return '';\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Account Reference',\r\n                colId: 'accountReference',\r\n                field: 'accountReference',\r\n                editable: true,\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRenderer: this.requiredCell,\r\n                pinnedRowCellRenderer: this.notRequiredCell,\r\n            },\r\n            {\r\n                headerName: 'Trade Status',\r\n                colId: 'tradeStatusId',\r\n                field: 'tradeStatusId',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.counterpartyTradeStatusList,\r\n                    valueProperty: 'enumEntityId',\r\n                    codeProperty: 'enumEntityId',\r\n                    displayProperty: 'enumEntityValue',\r\n                    isRequired: true,\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.counterpartyTradeStatusList,\r\n                    valueProperty: 'enumEntityId',\r\n                    codeProperty: 'enumEntityId',\r\n                    displayProperty: 'enumEntityValue',\r\n\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.tradeStatusId && this.masterdata.tradeStatus) {\r\n                        const tradeStatusValue = this.masterdata.tradeStatus.find((tradeStatus) => tradeStatus.enumEntityId === params.data.tradeStatusId);\r\n                        if (tradeStatusValue) {\r\n                            params.node.setDataValue('tradeStatusId', tradeStatusValue.enumEntityId);\r\n                            params.node.data.isDirty = true;\r\n                            params.node.setDataValue('rowStatus', 'A');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'statusId',\r\n                field: 'statusId',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.statusoptions,\r\n                    valueProperty: 'titleId',\r\n                    codeProperty: 'titleId',\r\n                    displayProperty: 'StatusDescription',\r\n                    isRequired: true,\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.statusoptions,\r\n                    valueProperty: 'titleId',\r\n                    codeProperty: 'titleId',\r\n                    displayProperty: 'StatusDescription',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (this.statusoptions) {\r\n                        const StatusValue = this.statusoptions.find((status) => status.titleId === params.data.statusId);\r\n                        if (StatusValue) {\r\n                            params.node.setDataValue('statusId', StatusValue.titleId);\r\n                            params.node.data.isDirty = true;\r\n                            params.node.setDataValue('rowStatus', 'A');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Account title',\r\n                colId: 'accountTitle',\r\n                field: 'accountTitle',\r\n                editable: true,\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRenderer: this.requiredCell,\r\n                pinnedRowCellRenderer: this.notRequiredCell,\r\n            },\r\n            {\r\n                headerName: 'Address 1',\r\n                colId: 'address1',\r\n                field: 'address1',\r\n                editable: true,\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Address 2',\r\n                colId: 'address2',\r\n                field: 'address2',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                editable: true,\r\n            },\r\n            {\r\n                headerName: 'Main',\r\n                colId: 'main',\r\n                field: 'main',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                        };\r\n                    }\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: 'City',\r\n                colId: 'city',\r\n                field: 'city',\r\n                editable: true,\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Country Code',\r\n                field: 'country',\r\n                colId: 'country',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredCountry,\r\n                    valueProperty: 'countryCode',\r\n                    codeProperty: 'countryCode',\r\n                    displayProperty: 'description',\r\n                    isRequired: (params) => {\r\n                        return true;\r\n                    },\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredCountry,\r\n                    valueProperty: 'countryCode',\r\n                    codeProperty: 'countryCode',\r\n                    displayProperty: 'description',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.country && this.masterdata.countries) {\r\n                        const counterpartyCountryCode = this.masterdata.countries.find((counterpartyCountryCode) => counterpartyCountryCode.countryCode === params.data.country);\r\n                        if (counterpartyCountryCode) {\r\n                            params.node.setDataValue('country', counterpartyCountryCode.countryCode);\r\n                            params.node.data.isDirty = true;\r\n                            params.node.setDataValue('rowStatus', 'A');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Zip code',\r\n                colId: 'zipCode',\r\n                field: 'zipCode',\r\n                editable: true,\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Main Email Address',\r\n                colId: 'mailEmailAddress',\r\n                field: 'mailEmailAddress',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                        };\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'LDC Region',\r\n                colId: 'ldcRegion',\r\n                field: 'ldcRegion',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredLdcRegion,\r\n                    valueProperty: 'ldcRegionId',\r\n                    codeProperty: 'ldcRegionId',\r\n                    displayProperty: 'description',\r\n                    isRequired: true,\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredLdcRegion,\r\n                    valueProperty: 'ldcRegionId',\r\n                    codeProperty: 'ldcRegionId',\r\n                    displayProperty: 'description',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.ldcRegion && this.masterdata.regions) {\r\n                        const ldcRegion = this.masterdata.regions.find((e) => e.ldcRegionId === params.data.ldcRegion);\r\n                        if (ldcRegion) {\r\n                            params.node.setDataValue('ldcRegion', ldcRegion.ldcRegionId);\r\n                            params.node.data.isDirty = true;\r\n                            params.node.setDataValue('rowStatus', 'A');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Provinces',\r\n                field: 'province',\r\n                colId: 'province',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredProvince,\r\n                    valueProperty: 'provinceId',\r\n                    codeProperty: 'provinceId',\r\n                    displayProperty: 'description',\r\n\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredProvince,\r\n                    valueProperty: 'provinceId',\r\n                    codeProperty: 'provinceId',\r\n                    displayProperty: 'description',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.province && this.filteredProvince) {\r\n                        const provinceValue = this.filteredProvince.find((province) => province.provinceId === params.data.province);\r\n                        if (provinceValue) {\r\n                            params.node.setDataValue('province', provinceValue.description);\r\n                            params.node.data.isDirty = true;\r\n                            params.node.setDataValue('rowStatus', 'A');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Address Type',\r\n                field: 'addressType',\r\n                colId: 'addressType',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredAddressType,\r\n                    valueProperty: 'enumEntityId',\r\n                    codeProperty: 'enumEntityId',\r\n                    displayProperty: 'enumEntityValue',\r\n                    isRequired: true,\r\n\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredAddressType,\r\n                    valueProperty: 'enumEntityId',\r\n                    codeProperty: 'enumEntityId',\r\n                    displayProperty: 'enumEntityValue',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.addressType && this.filteredAddressType) {\r\n                        const counterpartyAddressType = this.masterdata.addressTypes.find((counterpartyAddressType) => counterpartyAddressType.enumEntityId === params.data.addressType);\r\n                        if (counterpartyAddressType) {\r\n                            params.node.setDataValue('addressType', counterpartyAddressType.enumEntityValue);\r\n                            params.node.data.isDirty = true;\r\n                            params.node.setDataValue('rowStatus', 'A');\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: 'Head of Family',\r\n                colId: 'headOfFamily',\r\n                field: 'headOfFamily',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    if (Number(params.value)) {\r\n                        const value: Counterparty = this.masterdata.counterparties.find((headoffamilyvalue) =>\r\n                            headoffamilyvalue.counterpartyID === Number(params.value));\r\n                        params.setValue(value ? value.counterpartyCode : null);\r\n                        params.data.rowStatus = 'N';\r\n                        this.flagOnChangeValue = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: true,\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.filteredCounterpartyList,\r\n                        isRequired: false,\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyID',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridContextualSearchComponent,\r\n                pinnedRowCellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: true,\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.filteredCounterpartyList,\r\n                        isRequired: false,\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyID',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (!this.flagOnChangeValue) {\r\n                        params.node.setDataValue('rowStatus', 'A');\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Associated Companies',\r\n                field: 'companyId',\r\n                colId: 'companyId',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                            'border-bottom': '2px solid blue !important'\r\n                        };\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n\r\n                    },\r\n                    options: this.filteredCompanies,\r\n                    valueProperty: 'companyId',\r\n                    codeProperty: 'companyId',\r\n                    displayProperty: 'companyId',\r\n\r\n                },\r\n                pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: true,\r\n                    },\r\n                    options: this.filteredCompanies,\r\n                    valueProperty: 'companyId',\r\n                    codeProperty: 'companyId',\r\n                    displayProperty: 'companyId',\r\n\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.associatedCompanies && this.filteredCompanies) {\r\n                        const associatedCompanies = this.filteredCompanies.find((associatedCompanies) => associatedCompanies.id === params.data.associatedCompanies);\r\n                        if (associatedCompanies) {\r\n                            params.node.setDataValue('companyId', associatedCompanies.companyId);\r\n                            params.node.data.isDirty = true;\r\n                            params.node.setDataValue('rowStatus', 'A');\r\n                        }\r\n                    }\r\n\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: 'MDM ID',\r\n                colId: 'mdmId',\r\n                field: 'mdmId',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n                        };\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'MDM Category Code',\r\n                colId: 'mDMCategoryId',\r\n                field: 'mDMCategoryId',\r\n                cellStyle: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return {\r\n                            'background-color': 'lightgray',\r\n\r\n                        };\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: '',\r\n                colId: 'apply',\r\n                field: 'apply',\r\n                editable: false,\r\n                pinned: 'right',\r\n                suppressMenu: true,\r\n                pinnedRowCellRendererFramework: CounterpartyApplyButtonComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                },\r\n            },\r\n        ];\r\n        this.pinnedTopRowData = this.getPinnedTopData();\r\n    }\r\n\r\n}\r\n\r\n","module.exports = \"<div [class.displayMode]=\\\"!isEditable\\\"\\r\\n     class=\\\"custom-form\\\"\\r\\n     [class.isEmpty]=\\\"!fieldControl.value\\\"\\r\\n     [class.required-field]=\\\"isRequired()\\\">\\r\\n    <mat-form-field *ngIf=\\\"isAutocompleteActivated\\\">\\r\\n        <input matInput\\r\\n               #field\\r\\n               [formControl]=\\\"fieldControl\\\"\\r\\n               [matAutocomplete]=\\\"auto\\\"\\r\\n               (blur)=\\\"onBlur()\\\">\\r\\n        <mat-placeholder>\\r\\n            {{label}}\\r\\n        </mat-placeholder>\\r\\n        <mat-icon *ngIf=\\\"fieldControl.enabled && hasIcon\\\"\\r\\n                  class=\\\"bookmark-icon\\\"\\r\\n                  matSuffix>bookmark</mat-icon>\\r\\n        <mat-autocomplete #auto=\\\"matAutocomplete\\\"\\r\\n                          [displayWith]=\\\"generateDisplay.bind(this)\\\"\\r\\n                          (optionSelected)=\\\"onOptionSelected($event)\\\">\\r\\n            <mat-option *ngFor=\\\"let item of options\\\"\\r\\n                        [value]=\\\"item\\\">\\r\\n                {{ generateSelect(item) }}\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n        <mat-error *ngIf=\\\"fieldControl.errors && isEditable\\\">{{ getErrorMessage() }}</mat-error>\\r\\n        <mat-hint *ngIf=\\\"!fieldControl.value && isEditable && !isRequired()\\\">\\r\\n            {{hint}}\\r\\n        </mat-hint>\\r\\n        <mat-hint *ngIf=\\\"isRequired() && isEditable && !hasWarning\\\">Required *</mat-hint>\\r\\n    </mat-form-field>\\r\\n\\r\\n    <mat-form-field *ngIf=\\\"!isAutocompleteActivated\\\">\\r\\n        <mat-select [formControl]=\\\"fieldControl\\\"\\r\\n                    (selectionChange)=\\\"onSelectionChanged($event)\\\"\\r\\n                    [multiple]=\\\"multiselect\\\"\\r\\n                    [displayWith]=\\\"generateSelect.bind(this)\\\">\\r\\n            <mat-option *ngFor=\\\"let object of options\\\"\\r\\n                        [value]=\\\"valueProperty ? object[valueProperty] : object\\\">\\r\\n                <span>{{ descriptionProperty ? object[descriptionProperty] : descriptionProperty }}</span>\\r\\n            </mat-option>\\r\\n        </mat-select>\\r\\n        <mat-error *ngIf=\\\"fieldControl.errors && isEditable\\\">{{ getErrorMessage() }}</mat-error>\\r\\n        <mat-placeholder>{{label}}</mat-placeholder>\\r\\n        <mat-hint *ngIf=\\\"!fieldControl.value && isEditable && !isRequired()\\\">\\r\\n            {{hint}}\\r\\n        </mat-hint>\\r\\n        <mat-hint *ngIf=\\\"isRequired() && isEditable && !hasWarning\\\">Required *</mat-hint>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\nimport { FormComponentBaseComponent } from '../../../../../shared/components/form-components/form-component-base/form-component-base.component';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent, MatSelectChange } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-select-multi-dropdown',\r\n    templateUrl: './select-multi-dropdown.component.html',\r\n    styleUrls: ['./select-multi-dropdown.component.scss']\r\n})\r\nexport class SelectMultiDropdownComponent extends FormComponentBaseComponent implements ICellRendererAngularComp {\r\n\r\n    isAutocompleteActivated: boolean = true;\r\n    isSelectedValue: boolean;\r\n    valueProperty: string;\r\n    codeProperty: string;\r\n    descriptionProperty: string;\r\n    displayProperty: string;\r\n    displayCode = false;\r\n    colId: string;\r\n\r\n    companyId: string;\r\n    options: any[];\r\n    filteredOptions: any[];\r\n    isRequiredField: boolean = false;\r\n    multiselect: boolean = false;\r\n    onClickRefreshList = false;\r\n    @Output() readonly optionSelected = new EventEmitter<any>();\r\n    protected params: any;\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.options = params.options;\r\n        this.valueProperty = params.valueProperty;\r\n        this.codeProperty = params.codeProperty;\r\n        this.displayProperty = params.displayProperty;\r\n        this.multiselect = params.multiselect,\r\n            this.descriptionProperty = params.descriptionProperty ? params.descriptionProperty : params.displayProperty;\r\n        this.displayCode = params.displayCode ? params.displayCode : false;\r\n    }\r\n\r\n    constructor(protected utils: UtilService) {\r\n        super(utils);\r\n    }\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n\r\n    onOptionSelected(selected: MatAutocompleteSelectedEvent) {\r\n        this.optionSelected.emit(selected.option.value);\r\n\r\n    }\r\n\r\n    onSelectionChanged(selected: MatSelectChange) {\r\n        this.optionSelected.emit(selected.value);\r\n        this.fieldControl.setValue(selected.value);\r\n        this.params.data[this.params.colDef.field] = this.fieldControl.value;\r\n\r\n    }\r\n\r\n    onBlur() {\r\n        if (typeof this.fieldControl.value === 'string' && this.displayProperty) {\r\n            const selectedValue = this.options\r\n                .find((item) => item[this.displayProperty] === this.fieldControl.value);\r\n            if (selectedValue && selectedValue !== this.fieldControl.value) {\r\n                this.fieldControl.setValue(selectedValue);\r\n                this.optionSelected.emit(selectedValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    generateSelect(value: any) {\r\n        if (!value) {\r\n            return '';\r\n        }\r\n        const object = this.valueProperty ? this.options.find((option) => option[this.valueProperty] === value) : null;\r\n        value = typeof value !== 'string' && this.displayProperty ? value[this.displayProperty] : value;\r\n        if (object && this.displayCode && this.codeProperty) {\r\n            return object[this.codeProperty];\r\n        }\r\n        return this.displayProperty && object ? object[this.displayProperty] : value;\r\n    }\r\n}\r\n\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <atlas-masterdata-user-preferences-input fxFlex=\\\"60%\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"accountReferenceCtrl\\\"\\r\\n                                                     (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                                     [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                     label=\\\"Counterparty\\\"\\r\\n                                                     displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                     [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                     gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                     (optionSelected)=\\\"onCounterpartyIdSelected($event)\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n            <atlas-dropdown-select fxFlex='90%'\\r\\n                                   [label]=\\\"'Account Type'\\\"\\r\\n                                   [fieldControl]=\\\"counterPartyTypeCtrl\\\"\\r\\n                                   (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                   [errorMap]=\\\"snapshotErrorMap\\\"\\r\\n                                   isEditable=true\\r\\n                                   [options]=\\\"filteredAccTypesList\\\"\\r\\n                                   displayProperty=\\\"name\\\"\\r\\n                                   [selectProperties]=\\\"['name']\\\"\\r\\n                                   [isAutocompleteActivated]=\\\"isAutoCompleteActivated\\\"></atlas-dropdown-select>\\r\\n\\r\\n\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n    <atlas-filter-set-display (filtersChanged)=\\\"onFilterSetDetailsChange($event)\\\"\\r\\n                              [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                              [gridCode]=\\\"gridCode\\\"\\r\\n                              [company]=\\\"company\\\">\\r\\n    </atlas-filter-set-display>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\">\\r\\n        <mat-card fxFlex=\\\"100\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"counterpartyContractGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"counterpartyContractGridRows\\\"\\r\\n                                 [gridOptions]=\\\"counterpartyContractGridOptions\\\"\\r\\n                                 [columnDefs]=\\\"columnDefs\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 rowSelection=\\\"multiple\\\"\\r\\n                                 [singleClickEdit]=\\\"true\\\"\\r\\n                                 [suppressRowClickSelection]=\\\"true\\\"\\r\\n                                 (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"28\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowHeight]=32>\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { finalize, map } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ListAndSearchComponent } from '../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { BulkEditSearchResult } from '../../../../shared/dtos/bulkEdit-search-result';\r\nimport { ReferentialCounterpartiesSearchResult } from '../../../../shared/dtos/referential-Counterparties-search-result';\r\nimport { AccountType } from '../../../../shared/entities/account-type.entity';\r\nimport { CounterpartyTradeStatus } from '../../../../shared/entities/counterparty-trade-status.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../shared/entities/grid-column-configuration.entity';\r\nimport { LdcRegion } from '../../../../shared/entities/ldc-region.entity';\r\nimport { ListAndSearchFilter } from '../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../../../shared/entities/list-and-search/list-and-search-request.entity';\r\nimport { MasterDataProps } from '../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { ListAndSearchFilterType } from '../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../shared/services/grid-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { ReferentialCounterpartiesService } from '../../../../shared/services/http-services/referential-counterparties.service';\r\nimport { ReferentialBulkEditCounterpartiesDataLoader } from '../../../../shared/services/list-and-search/counterparty-bulk-edit-data-loader';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\n@Component({\r\n    selector: 'atlas-counterparty-list-component',\r\n    templateUrl: './counterparty-list-component.component.html',\r\n    styleUrls: ['./counterparty-list-component.component.scss'],\r\n    providers: [ReferentialBulkEditCounterpartiesDataLoader],\r\n})\r\n\r\nexport class CounterpartyListComponentComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n\r\n    gridCode = 'bulkEditGrid';\r\n    company: string;\r\n    counterpartyContractGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    counterpartyContractGridColumns: agGrid.ColDef[];\r\n    counterpartyContractGridRows: BulkEditSearchResult[];\r\n    accountReferenceCtrl: FormControl = new FormControl();\r\n    counterPartyTypeCtrl: FormControl = new FormControl();\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    filteredAccTypesList: AccountType[];\r\n    allAccTypesList: AccountType[];\r\n    masterdata: MasterData;\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    snapshotErrorMap: Map<string, string> = new Map<string, string>();\r\n    filteredCounterPartyList: Counterparty[];\r\n    counterpartyValue: string;\r\n    clientNameValue: string;\r\n    masterData: MasterData;\r\n    columnDefs: agGrid.ColDef[];\r\n    hasGridSharing = false;\r\n    filters: ListAndSearchFilter[] = [];\r\n    counterpartyTradeStatusList: CounterpartyTradeStatus[] = [];\r\n    isLoading: boolean;\r\n    contractsCounterpartyToedit: BulkEditSearchResult[];\r\n    filteredLdcRegion: LdcRegion[] = [];\r\n    selectedcontractsCounterpartyToedit: BulkEditSearchResult[];\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Counterparties];\r\n    counterpartyId: number;\r\n    searchedCounterpartyCode: string;\r\n    isAutoCompleteActivated: boolean = true;\r\n    @Output() contractsSelected = new EventEmitter();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        private companyManager: CompanyManagerService,\r\n        protected utilService: UtilService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected uiService: UiService,\r\n        private referentialCounterpartiesService: ReferentialCounterpartiesService,\r\n        public dataLoader: ReferentialBulkEditCounterpartiesDataLoader,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filterCounterparties();\r\n        this.allAccTypesList = this.masterData.accountTypes;\r\n        this.filteredAccTypesList = this.masterData.accountTypes;\r\n        this.counterpartyTradeStatusList = this.masterData.tradeStatus;\r\n        this.filteredLdcRegion = this.masterData.regions;\r\n        this.counterPartyTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredAccTypesList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.allAccTypesList,\r\n                ['name'],\r\n            );\r\n        });\r\n        this.loadGridConfiguration();\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.getContractsToCounterparty();\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]): void {\r\n        this.filters = filters;\r\n        this.getContractsToCounterparty();\r\n    }\r\n\r\n    getContractsToCounterparty() {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration && this.columnConfiguration.length > 0) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            if (this.accountReferenceCtrl.value && typeof this.accountReferenceCtrl.value === 'object') {\r\n                this.accountReferenceCtrl.patchValue(this.accountReferenceCtrl.value);\r\n            }\r\n            if (this.counterPartyTypeCtrl.value && typeof this.counterPartyTypeCtrl.value === 'object') {\r\n                this.counterPartyTypeCtrl.patchValue(this.counterPartyTypeCtrl.value);\r\n            }\r\n            const accountRefField = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'AccountReference');\r\n            const accountRefTypeField = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'CounterpartyType');\r\n            if (this.accountReferenceCtrl.value) {\r\n                const filterAccountsRef = new ListAndSearchFilter();\r\n                let filterAccountRef;\r\n                if (accountRefField) {\r\n                    filterAccountRef = new ListAndSearchFilter();\r\n                    filterAccountRef.fieldId = accountRefField.fieldId;\r\n                    filterAccountRef.fieldName = accountRefField.fieldName;\r\n                    filterAccountRef.predicate = {\r\n                        filterType: ListAndSearchFilterType.Text,\r\n                        operator: 'eq',\r\n                        value1: this.accountReferenceCtrl.value.counterpartyCode + '%',\r\n                    };\r\n                    filterAccountRef.isActive = true;\r\n                    filterAccountsRef.logicalOperator = 'or';\r\n                    filterAccountsRef.clauses = [filterAccountRef];\r\n                    this.filters.push(filterAccountsRef);\r\n                }\r\n            }\r\n            if (this.counterPartyTypeCtrl.value && accountRefTypeField) {\r\n                const filterContractNo = new ListAndSearchFilter();\r\n                filterContractNo.fieldId = accountRefTypeField.fieldId;\r\n                filterContractNo.fieldName = accountRefTypeField.fieldName;\r\n                filterContractNo.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.counterPartyTypeCtrl.value.name + '%',\r\n                };\r\n                filterContractNo.isActive = true;\r\n                this.filters.push(filterContractNo);\r\n            }\r\n            this.dataLoader.getData(this.filters, null, null)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.contractsCounterpartyToedit = data.value;\r\n                        this.counterpartyContractGridRows = this.contractsCounterpartyToedit;\r\n\r\n                    }\r\n                });\r\n        }\r\n        this.gridApi.sizeColumnsToFit();\r\n        setTimeout(() => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        })\r\n    }\r\n\r\n    changeTradeStatusId(params) {\r\n        const tradeStatus = this.counterpartyTradeStatusList.find((tradeStatus) => tradeStatus.enumEntityId === Number(params.value));\r\n        return tradeStatus ? tradeStatus.enumEntityValue : '';\r\n    }\r\n    changeLDCRegion(params) {\r\n        const LDCRegion = this.filteredLdcRegion.find((LDCRegion) => LDCRegion.ldcRegionId === Number(params.value));\r\n        return LDCRegion ? LDCRegion.ldcRegionCode : '';\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                width: 40,\r\n                pinned: 'left',\r\n                hide: false,\r\n            });\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                hide: !config.isVisible,\r\n            };\r\n            if (config.fieldName === 'TradeStatusId') {\r\n                columnDef.valueFormatter = this.changeTradeStatusId.bind(this);\r\n            }\r\n            if (config.fieldName === 'LdcRegion') {\r\n                columnDef.valueFormatter = this.changeLDCRegion.bind(this);\r\n            }\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            return columnDef;\r\n        }));\r\n        if (this.counterpartyContractGridOptions) {\r\n            this.counterpartyContractGridOptions.columnDefs = this.columnDefs;\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.counterpartyContractGridColumns;\r\n        this.counterpartyContractGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeContractsGrid();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.selectedcontractsCounterpartyToedit = selectedRows;\r\n        if (selectedRows) {\r\n            this.contractsSelected.emit(true);\r\n        }\r\n    }\r\n\r\n    filterCounterparties() {\r\n        this.searchedCounterpartyCode = this.counterpartyValue;\r\n        let counterpartyList: Counterparty[] = [];\r\n        this.filteredCounterPartyList = this.masterData.counterparties;\r\n        counterpartyList = this.filteredCounterPartyList;\r\n        this.accountReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                counterpartyList,\r\n                ['counterpartyCode', 'description'],\r\n            );\r\n            if (this.accountReferenceCtrl.valid) {\r\n            }\r\n        });\r\n    }\r\n\r\n    onCounterpartyIdSelected(value: Counterparty) {\r\n        this.counterpartyValue = this.accountReferenceCtrl.value;\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        this.getContractsToCounterparty();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n\\r\\n    <h2></h2>\\r\\n\\r\\n    <mat-horizontal-stepper [linear]\\r\\n                            (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                            #stepper>\\r\\n        <ng-template matStepperIcon=\\\"edit\\\">\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </ng-template>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Counterparties</ng-template>\\r\\n            <atlas-counterparty-list-component #counterpartyListComponent\\r\\n                                               (contractsSelected)=\\\"onContractsSelected($event)\\\">\\r\\n            </atlas-counterparty-list-component>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onCounterpartiesSelectionDiscardButtonClicked()\\\">\\r\\n                        CANCEL\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start \\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onCounterpartiesSelectionNextButtonClicked()\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Details</ng-template>\\r\\n            <atlas-counterparty-detail-component #counterpartyDetailComponent></atlas-counterparty-detail-component>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between start\\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onCounterpartiesSelectionDiscardButtonClicked()\\\">\\r\\n                            CANCEL\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onDetailsPreviousButtonClicked()\\\">\\r\\n                            Previous\\r\\n                        </button>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"end center\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onDetailSaveButtonClicked()\\\">\\r\\n                            Save\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n        <mat-step>\\r\\n\\r\\n            <ng-template matStepLabel>Summary</ng-template>\\r\\n            <atlas-counterparty-summary-component #counterpartySummaryComponent></atlas-counterparty-summary-component>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <!-- <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between start\\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onDetailsCancelButtonClicked()\\\">\\r\\n                            CANCEL\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div> -->\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"end end\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"end end\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onSummaryOkButtonClicked()\\\">\\r\\n                            FINISH\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n    </mat-horizontal-stepper>\\r\\n</div>\\r\\n<!-- <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval> -->\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatMenuTrigger, MatStepper } from '@angular/material';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CounterpartyDetailComponentComponent } from './detail/counterparty-detail-component.component';\r\nimport { CounterpartyListComponentComponent } from './list/counterparty-list-component.component';\r\nimport { CounterpartySummaryComponentComponent } from './summary/counterparty-summary-component.component';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { BulkEditSearchResult } from '../../../shared/dtos/bulkEdit-search-result';\r\nimport { Subscription } from 'rxjs';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { BulkCounterparty } from '../../../shared/entities/bulkedit-counterparty.entity';\r\nimport { Counterparty } from '../../../shared/entities/counterparty.entity';\r\nimport { CounterpartyAddress } from '../../../shared/entities/counterparty-address.entity';\r\nimport { CounterpartyCompany } from '../../../shared/entities/counterparty-company.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { Country } from '../../../shared/entities/country.entity';\r\nimport { Province } from '../../../shared/entities/province.entity';\r\nimport { AddressType } from '../../../shared/entities/address-type.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-referential-bulk-amendment-component',\r\n    templateUrl: './referential-bulk-amendment-component.component.html',\r\n    styleUrls: ['./referential-bulk-amendment-component.component.scss'],\r\n})\r\n\r\nexport class ReferentialBulkAmendmentComponentComponent implements OnInit {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('counterpartyListComponent') counterpartyListComponent: CounterpartyListComponentComponent;\r\n    @ViewChild('counterpartyDetailComponent') counterpartyDetailComponent: CounterpartyDetailComponentComponent;\r\n    @ViewChild('counterpartySummaryComponent') counterpartySummaryComponent: CounterpartySummaryComponentComponent;\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n\r\n    masterdata: MasterData;\r\n    filteredCountry: Country[];\r\n    filteredprovinces: Province[];\r\n    filteredaddressTypes: AddressType[];\r\n    company: string;\r\n    isValid: boolean = false;\r\n    subscriptions: Subscription[] = [];\r\n    bulkCounterparty: BulkCounterparty;\r\n    counterparty: Counterparty;\r\n    gridData: BulkEditSearchResult[];\r\n    requiredString: string = 'Required*';\r\n    isGridValid: boolean = true;\r\n\r\n    constructor(protected dialog: MatDialog, private router: Router, private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService,\r\n        protected masterDataService: MasterdataService, ) {\r\n        this.company = this.route.snapshot.paramMap.get(\"company\");\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCountry = this.masterdata.countries;\r\n        this.filteredprovinces = this.masterdata.provinces;\r\n        this.filteredaddressTypes = this.masterdata.addressTypes;\r\n    }\r\n\r\n    contractsSelected() {\r\n        const contracts = this.counterpartyListComponent.selectedcontractsCounterpartyToedit as BulkEditSearchResult[];\r\n        if (contracts) {\r\n            this.counterpartyDetailComponent.contractToBeSelected(contracts);\r\n            this.counterpartySummaryComponent.summaryContractToBeSelected(contracts);\r\n        }\r\n    }\r\n\r\n    onContractsSelected(contractsSelected: boolean) {\r\n        this.isValid = contractsSelected;\r\n    }\r\n\r\n    onCancelWarning() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate([this.company + '/referential/tradeexecution/counterparties/bulkamendment']);\r\n            }\r\n        });\r\n    }\r\n\r\n    onChangeStepAction(event: any) {\r\n    }\r\n\r\n    onCounterpartiesSelectionDiscardButtonClicked() {\r\n        this.onCancelWarning();\r\n    }\r\n\r\n    onCounterpartiesSelectionNextButtonClicked() {\r\n        if (this.isValid) {\r\n            this.contractsSelected();\r\n            this.stepper.next();\r\n        }\r\n        if (!this.isValid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Please select a contract to proceed.',\r\n            );\r\n        }\r\n    }\r\n\r\n    onDetailsPreviousButtonClicked() {\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onDetailSaveButtonClicked() {\r\n        this.isGridValid = true;\r\n        const counterpartyLines = this.counterpartyDetailComponent.editCounterpartyDocumentLines;\r\n        this.gridData = counterpartyLines;\r\n\r\n        this.validateGridData();\r\n\r\n        if (this.isGridValid) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Save Changes',\r\n                    text: 'Do you want to save all the edited details?',\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    const counterpartyLines = this.counterpartyDetailComponent.editCounterpartyDocumentLines;\r\n                    this.bulkCounterparty = <BulkCounterparty>{};\r\n                    this.bulkCounterparty.counterpartyList = [];\r\n\r\n                    counterpartyLines.forEach((cp) => {\r\n                        this.counterparty = <Counterparty>{};\r\n                        this.counterparty.counterpartyAddresses = [];\r\n                        this.counterparty.counterpartyCompanies = [];\r\n\r\n                        this.counterparty.counterpartyID = cp.counterpartyID;\r\n                        this.counterparty.counterpartyTradeStatusId = cp.tradeStatusId;\r\n                        this.counterparty.counterpartyCode = cp.accountReference;\r\n                        this.counterparty.accountTitle = cp.accountTitle\r\n                        if (cp.headOfFamily) {\r\n                            this.counterparty.headofFamily = this.masterdata.counterparties.find((e) => e.counterpartyCode === cp.headOfFamily).counterpartyID;\r\n                        }\r\n                        this.masterdata.counterparties\r\n                        this.counterparty.isDeactivated = cp.statusId;\r\n                        this.counterparty.mdmId = cp.mdmId;\r\n                        this.counterparty.c2CCode = cp.c2CReference;\r\n                        this.counterparty.createdBy = cp.createdBy;\r\n                        this.counterparty.createdDateTime = cp.createdOn;\r\n\r\n                        let counterpartyAddressobj = <CounterpartyAddress>{};\r\n                        counterpartyAddressobj.addressId = cp.addressId;\r\n                        counterpartyAddressobj.address1 = cp.address1;\r\n                        counterpartyAddressobj.address2 = cp.address2;\r\n                        counterpartyAddressobj.city = cp.city;\r\n                        if (cp.country) {\r\n                            counterpartyAddressobj.countryID = this.filteredCountry.find((e) => e.countryCode === cp.country).countryId;\r\n                        }\r\n                        counterpartyAddressobj.zipCode = cp.zipCode;\r\n                        counterpartyAddressobj.ldcRegionId = cp.ldcRegion;\r\n                        if (!this.isEmpty(cp.province)) {\r\n                            counterpartyAddressobj.provinceID = this.filteredprovinces.find((e) => e.description === cp.province).provinceId;\r\n                        }\r\n                        if (!this.isEmpty(cp.addressType)) {\r\n                            counterpartyAddressobj.addressTypeID = this.filteredaddressTypes.find((e) => e.enumEntityValue === cp.addressType).enumEntityId;\r\n                        }\r\n\r\n                        this.counterparty.counterpartyAddresses.push(counterpartyAddressobj)\r\n\r\n                        let counterpartyCompanyObj = <CounterpartyCompany>{};\r\n                        counterpartyCompanyObj.counterpartyId = cp.counterpartyID;\r\n                        if (cp.companyId) {\r\n                            counterpartyCompanyObj.companyId = this.masterdata.companies.find((e) => e.companyId === cp.companyId).id;\r\n                        }\r\n\r\n                        this.counterparty.counterpartyCompanies.push(counterpartyCompanyObj);\r\n\r\n                        this.bulkCounterparty.counterpartyList.push(this.counterparty);\r\n                    });\r\n                    this.bulkCounterparty.isBulkUpdate = true;\r\n\r\n                    this.subscriptions.push(this.masterDataService\r\n                        .bulkUpdateCounterparty(this.bulkCounterparty)\r\n                        .subscribe((data: any[]) => {\r\n                            if (data) {\r\n                                this.snackbarService.informationSnackBar('Counterparty has been updated successfully.');\r\n                                this.counterpartySummaryComponent.summaryContractToBeSelected(counterpartyLines);\r\n                                this.stepper.next();\r\n                            }\r\n                        },\r\n                            (err) => {\r\n                                console.error(err);\r\n                                this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                            }));\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    validateGridData() {\r\n        this.gridData.forEach((data) => {\r\n            if (this.isRequiredString(data.counterpartyID) || this.isRequiredString(data.accountReference) || this.isRequiredString(data.tradeStatusId)\r\n                || data.statusId === false || this.isRequiredString(data.accountTitle) || this.isRequiredString(data.country) || !data.ldcRegion\r\n                || this.isRequiredString(data.addressType)) {\r\n\r\n                this.isGridValid = false;\r\n                this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors');\r\n            }\r\n        });\r\n    }\r\n\r\n    isRequiredString(value: any) {\r\n        return value === null || value === '' || value === this.requiredString;\r\n    }\r\n\r\n    isEmpty(value: any): boolean {\r\n        if (value === '' || value === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onSummaryCancelButtonClicked() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate([this.company + '/referential/tradeexecution/counterparties/bulkamendment']);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSummaryOkButtonClicked() {\r\n        this.router.navigate([this.company + '/referential/tradeexecution/counterparties/bulkamendment']);\r\n    }\r\n}","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-around start\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxFlex=\\\"98.5\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-title class=\\\"atlas-grid-card-title mat-card-title\\\">Counterparties to Summary</mat-card-title>\\r\\n            <mat-card-content>\\r\\n                <div ag-grid=\\\"summaryCounterpartiesLineGridOptionsCounterpartiesLineGridOptions\\\">\\r\\n                    <ag-grid-angular class=\\\"ag-theme-material atr-ag-grid\\\"\\r\\n                                     [rowData]=\\\"summaryCounterpartyDocumentLines\\\"\\r\\n                                     [columnDefs]=\\\"columnDefs\\\"\\r\\n                                     domLayout=\\\"autoHeight\\\"\\r\\n                                     (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                     [pagination]=\\\"true\\\"\\r\\n                                     [paginationPageSize]=\\\"15\\\"\\r\\n                                     [enableSorting]=\\\"true\\\"\\r\\n                                     [enableColResize]=\\\"false\\\"\\r\\n                                     [singleClickEdit]=true\\r\\n                                     (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                     [enableRangeSelection]=\\\"true\\\"\\r\\n                                     [rowHeight]=32>\\r\\n                    </ag-grid-angular>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BulkEditSearchResult } from '../../../../shared/dtos/bulkEdit-search-result';\r\nimport { ReferentialCounterpartiesSearchResult } from '../../../../shared/dtos/referential-Counterparties-search-result';\r\nimport { CounterpartyTradeStatus } from '../../../../shared/entities/counterparty-trade-status.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { LdcRegion } from '../../../../shared/entities/ldc-region.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\n@Component({\r\n    selector: 'atlas-counterparty-summary-component',\r\n    templateUrl: './counterparty-summary-component.component.html',\r\n    styleUrls: ['./counterparty-summary-component.component.scss'],\r\n})\r\nexport class CounterpartySummaryComponentComponent implements OnInit {\r\n\r\n    columnDefs: agGrid.ColDef[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    summaryCounterpartyDocumentLines: BulkEditSearchResult[];\r\n    countryList = new Array<string>();\r\n    mainAddress: string = 'Main Address'\r\n    masterdata: MasterData;\r\n    filteredCounterPartyList: Counterparty[];\r\n    filteredLdcRegion: LdcRegion[];\r\n    counterpartyTradeStatusList: CounterpartyTradeStatus[] = [];\r\n    constructor(private route: ActivatedRoute) { }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterpartyTradeStatusList = this.masterdata.tradeStatus;\r\n        this.filteredLdcRegion = this.masterdata.regions;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    summaryContractToBeSelected(contracts: BulkEditSearchResult[]) {\r\n        this.summaryCounterpartyDocumentLines = contracts;\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n            params.node.setDataValue('rowStatus', 'S');\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'rowStatus',\r\n                field: 'rowStatus',\r\n                editable: false,\r\n                pinned: 'left',\r\n                cellRenderer: (params) => {\r\n                    if (params.value) {\r\n                        return '<mat-chip-list><mat-chip style=\"background-color:green;color:white;text-overflow:clip;\">' + params.value +\r\n                            '</mat-chip></mat-chip-list>';\r\n                    }\r\n\r\n                    return '<mat-chip-list><mat-chip style=\"background-color:green;color:white;text-overflow:clip;\">S</mat-chip></mat-chip-list>';\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Account Reference',\r\n                colId: 'accountReference',\r\n                field: 'accountReference',\r\n            },\r\n            {\r\n                headerName: 'Trade Status',\r\n                colId: 'tradeStatusId',\r\n                field: 'tradeStatusId',\r\n                valueFormatter: this.setTradeStatusValueCell.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'statusId',\r\n                field: 'statusId',\r\n                valueFormatter: this.setStatusValueCell.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Account title',\r\n                colId: 'accountTitle',\r\n                field: 'accountTitle',\r\n            },\r\n            {\r\n                headerName: 'Address 1',\r\n                colId: 'address1',\r\n                field: 'address1',\r\n\r\n            },\r\n            {\r\n                headerName: 'Address 2',\r\n                colId: 'address2',\r\n                field: 'address2',\r\n            },\r\n            {\r\n                headerName: 'Main',\r\n                colId: 'main',\r\n                field: 'main',\r\n                valueFormatter: this.mainValueFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'City',\r\n                colId: 'city',\r\n                field: 'city',\r\n                editable: true,\r\n            },\r\n            {\r\n                headerName: 'Country Code',\r\n                field: 'country',\r\n                colId: 'country',\r\n            },\r\n            {\r\n                headerName: 'Zip code',\r\n                colId: 'zipCode',\r\n                field: 'zipCode',\r\n                editable: true,\r\n            },\r\n            {\r\n                headerName: 'Main Email Address',\r\n                colId: 'mailEmailAddress',\r\n                field: 'mailEmailAddress',\r\n            },\r\n            {\r\n                headerName: 'LDC Region',\r\n                colId: 'ldcRegion',\r\n                field: 'ldcRegion',\r\n                valueFormatter: this.ldcValueFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Provinces',\r\n                colId: 'province',\r\n                field: 'province',\r\n\r\n            },\r\n            {\r\n                headerName: 'Address Type',\r\n                colId: 'addressType',\r\n                field: 'addressType',\r\n            },\r\n            {\r\n                headerName: 'Head of Family',\r\n                colId: 'headOfFamily',\r\n                field: 'headOfFamily',\r\n            },\r\n            {\r\n                headerName: 'Associated Companies',\r\n                colId: 'companyId',\r\n                field: 'companyId',\r\n            },\r\n            {\r\n                headerName: 'MDM ID',\r\n                colId: 'mdmId',\r\n                field: 'mdmId',\r\n            },\r\n            {\r\n                headerName: 'MDM Category Code',\r\n                colId: 'MDMCategoryId',\r\n                field: 'MDMCategoryId',\r\n            },\r\n        ];\r\n    }\r\n    setTradeStatusValueCell(params) {\r\n        const tradeStatus = this.counterpartyTradeStatusList.find((status) => status.enumEntityId === params.value);\r\n        return tradeStatus ? tradeStatus.enumEntityValue : '';\r\n    }\r\n\r\n    setStatusValueCell(params) {\r\n        if (params.value) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    mainValueFormatter(params) {\r\n        if (params.value) {\r\n            return this.mainAddress;\r\n        }\r\n        return null;\r\n    }\r\n    ldcValueFormatter(params) {\r\n        const ldcValue = this.filteredLdcRegion.find((value) => value.ldcRegionId === params.value);\r\n        return ldcValue ? ldcValue.description : '';\r\n    }\r\n}\r\n\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Counterparty Addresses</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"center end\\\">\\r\\n            <mat-nav-list *ngFor=\\\"let counterpartyAddress of counterpartyAddresses\\\">\\r\\n                <div *ngIf=\\\"!counterpartyAddress.isDeleted\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxFlex=\\\"100%\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"left start\\\">\\r\\n                            <mat-list-item style=\\\"min-width: 450px;\\\"\\r\\n                                           (click)='onRowClicked(counterpartyAddress)'>\\r\\n                                <div fxLayout=\\\"column\\\">\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        <b>AddressType Code</b>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        {{  counterpartyAddress.addressTypeCode}}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <div fxLayout=\\\"column\\\">\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        <b>Address Type Name</b>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        {{ counterpartyAddress.addresTypeName }}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <mat-divider class=\\\"charter-creation-divider\\\"></mat-divider>\\r\\n                            </mat-list-item>\\r\\n                            <mat-list-item (click)=\\\"onSetAddressFavorite(counterpartyAddress)\\\">\\r\\n                                <div fxLayout=\\\"column\\\">\\r\\n                                    <mat-icon [ngClass]=\\\"counterpartyAddress.main ? 'heart-saved' : 'heart-not-saved'\\\">\\r\\n                                        {{ counterpartyAddress.main ? 'favorite' : 'favorite_border' }}\\r\\n                                    </mat-icon>\\r\\n                                </div>\\r\\n                            </mat-list-item>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-nav-list>\\r\\n            <div class=\\\"btn-container\\\"></div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button mat-raised-button\\r\\n                        [disabled]=\\\"isAddressListDataClicked || isViewMode\\\"\\r\\n                        (click)='onNewAddressButtonClicked()'\\r\\n                        type=\\\"button\\\">\\r\\n                    ADD NEW ADDRESS\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter, ViewChild, ElementRef, Input } from '@angular/core';\r\nimport { CounterpartyAddress } from '../../../../../../shared/entities/counterparty-address.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-address-card',\r\n    templateUrl: './counterparty-address-card.component.html',\r\n    styleUrls: ['./counterparty-address-card.component.scss']\r\n})\r\nexport class CounterpartyAddressCardComponent implements OnInit {\r\n\r\n    data: any[] = [];\r\n    counterpartyAddresses: CounterpartyAddress[] = [];\r\n\r\n    @Output() readonly addNewAddress = new EventEmitter();\r\n    @Output() readonly rowClicked = new EventEmitter();\r\n    @ViewChild('button') button: ElementRef;\r\n    isAddressListDataClicked: boolean = false;\r\n    isDeleteButtonEnabled: boolean = false;\r\n    @Input() isViewMode: boolean = false;\r\n    masterdata: MasterData;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService, ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onNewAddressButtonClicked() {\r\n        this.addNewAddress.emit(true);\r\n    }\r\n\r\n    onRowClicked(data: CounterpartyAddress) {\r\n        if (data) {\r\n            if (data.main && !this.isViewMode) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Main address can only be edited in Main tab.',\r\n                );\r\n            }\r\n            else {\r\n                this.rowClicked.emit(data);\r\n                this.isAddressListDataClicked = true;\r\n                this.isDeleteButtonEnabled = true\r\n            }\r\n        }\r\n    }\r\n\r\n    updatingAddressListOnEditing(addressToBeUpdated: CounterpartyAddress) {\r\n        if (addressToBeUpdated) {\r\n            let index = -1\r\n            index = this.counterpartyAddresses.findIndex(address => address.randomId === addressToBeUpdated.randomId);\r\n            if (index != -1) {\r\n                this.counterpartyAddresses.splice(index, 1, addressToBeUpdated);\r\n            }\r\n            else {\r\n                this.counterpartyAddresses.push(addressToBeUpdated);\r\n            }\r\n        }\r\n        this.isAddressListDataClicked = false;\r\n    }\r\n\r\n    updatingAddressListOnDeletion(addressToBeDeleted: CounterpartyAddress) {\r\n        if (addressToBeDeleted) {\r\n            let index = -1\r\n            index = this.counterpartyAddresses.findIndex(address => address.randomId === addressToBeDeleted.randomId);\r\n            if (index != -1) {\r\n                addressToBeDeleted.isDeactivated = true;\r\n                addressToBeDeleted.isDeleted = true;\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        }\r\n        this.isAddressListDataClicked = false;\r\n    }\r\n\r\n    onSetAddressFavorite(addressFavorite: CounterpartyAddress) {\r\n        if (addressFavorite && !this.isViewMode) {\r\n            this.counterpartyAddresses.forEach((element) => {\r\n                if (element.randomId === addressFavorite.randomId) {\r\n                    element.main = !element.main;\r\n                }\r\n                else {\r\n                    element.main = false;\r\n                }\r\n            });\r\n        }\r\n        this.isAddressListDataClicked = false;\r\n    }\r\n\r\n    populateValue() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        if (this.counterpartyAddresses) {\r\n            this.counterpartyAddresses.forEach((address) => {\r\n                if (address.addressTypeID) {\r\n                    address.addressTypeCode = (this.masterdata.addressTypes.find((addressType) => addressType.enumEntityId === address.addressTypeID).enumEntityValue);\r\n                    address.addresTypeName = address.addressTypeCode;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"editAddress || newAddressForm\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Counterparty Address Information</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"end end\\\">\\r\\n        <button [disabled]=\\\"newAddressForm || isDeleteDisabled || isViewMode\\\"\\r\\n                mat-raised-button\\r\\n                fxFlex=\\\"100%\\\"\\r\\n                (click)='onDeleteButtonClicked()'\\r\\n                type=\\\"button\\\">\\r\\n            DELETE\\r\\n        </button>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address Type Name\\\"\\r\\n                       [formControl]=\\\"addressTypeNameCtrl\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address 1\\\"\\r\\n                       [formControl]=\\\"address1Ctrl\\\">\\r\\n                <mat-error *ngIf=\\\"address1Ctrl.hasError('maxlength')\\\"> Address\\r\\n                    1\\r\\n                    should be at\\r\\n                    most 60 Characters long </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address 2\\\"\\r\\n                       [formControl]=\\\"address2Ctrl\\\">\\r\\n                <mat-error *ngIf=\\\"address2Ctrl.hasError('maxlength')\\\"> Address\\r\\n                    2\\r\\n                    should be at\\r\\n                    most 60 Characters long </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address Type Code\\\"\\r\\n                       [matAutocomplete]=\\\"addressCode\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]=\\\"addressTypeCodeCtrl\\\">\\r\\n\\r\\n                <mat-autocomplete #addressCode=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\"\\r\\n                                  (optionSelected)=\\\"onSelectionChanged($event)\\\">\\r\\n                    <mat-option *ngFor=\\\"let addressType of filteredAddressType\\\"\\r\\n                                [value]=\\\"addressType.enumEntityValue\\\">\\r\\n                        {{addressType.enumEntityId}} | {{addressType.enumEntityValue}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"addressTypeCodeCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"addressTypeCodeCtrl.isRequired\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Zip Code\\\"\\r\\n                       (keypress)=\\\"numberValidation($event)\\\"\\r\\n                       [formControl]=\\\"zipCodeCtrl\\\">\\r\\n                <mat-error *ngIf=\\\"zipCodeCtrl.hasError('maxlength')\\\"> Zip Code\\r\\n                    should be at\\r\\n                    most 40 Characters long </mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <div fxFlex=\\\"50%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"City\\\"\\r\\n                           [formControl]=\\\"cityCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"cityCtrl.hasError('maxlength')\\\">City\\r\\n                        should be at\\r\\n                        most 60 Characters long </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Province\\\"\\r\\n                       [matAutocomplete]=\\\"provinceCode\\\"\\r\\n                       [formControl]=\\\"provinceCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-autocomplete #provinceCode=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\">\\r\\n                    <mat-option *ngFor=\\\"let province of filteredProvince\\\"\\r\\n                                [value]=\\\"province.description\\\">\\r\\n                        {{province.provinceId}} | {{province.description}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"provinceCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"provinceCtrl.isRequired\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <div fxFlex=\\\"50%\\\"\\r\\n                 [class.isEmpty]=\\\"!countryCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"countryCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Country\\\"\\r\\n                           [matAutocomplete]=\\\"countryCode\\\"\\r\\n                           [formControl]=\\\"countryCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-autocomplete #countryCode=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                        <mat-option *ngFor=\\\"let country of filteredCountry\\\"\\r\\n                                    [value]=\\\"country.description\\\">\\r\\n                            {{country.countryId}} | {{country.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"countryCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"countryCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                    <mat-error *ngIf=\\\"countryCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <mat-list>\\r\\n            <mat-divider></mat-divider>\\r\\n        </mat-list>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Main Email Address\\\"\\r\\n                       [formControl]=\\\"emailCtrl\\\">\\r\\n                <mat-error *ngIf=\\\"emailCtrl.hasError('email')\\\">\\r\\n                    Not a valid email\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"emailCtrl.hasError('maxlength')\\\"> Email\\r\\n                    should be at\\r\\n                    most 40 Characters long </mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           maxlength=\\\"10\\\"\\r\\n                           (keypress)=\\\"numberValidation($event)\\\"\\r\\n                           placeholder=\\\"Phone Number\\\"\\r\\n                           [formControl]=\\\"phoneNumberCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Fax Number\\\"\\r\\n                           (keypress)=\\\"numberValidation($event)\\\"\\r\\n                           [formControl]=\\\"faxNumberCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"faxNumberCtrl.hasError('maxlength')\\\">Fax Number\\r\\n                        should be at\\r\\n                        most 40 Characters long </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"LDC Region\\\"\\r\\n                       [matAutocomplete]=\\\"ldcRegionCode\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]=\\\"ldcRegionCtrl\\\">\\r\\n\\r\\n                <mat-autocomplete #ldcRegionCode=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\">\\r\\n                    <mat-option *ngFor=\\\"let ldcRegion of filteredLdcRegion\\\"\\r\\n                                [value]=\\\"ldcRegion.description\\\">\\r\\n                        {{ldcRegion.ldcRegionCode}} | {{ldcRegion.description}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"ldcRegionCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"ldcRegionCtrl.isRequired\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             fxLayoutGap=\\\"2%\\\">\\r\\n            <button mat-raised-button\\r\\n                    [disabled]=\\\"isViewMode\\\"\\r\\n                    (click)='onCancelButtonClicked()'\\r\\n                    type=\\\"button\\\">\\r\\n                CANCEL\\r\\n            </button>\\r\\n            <div fxFlex=\\\"15%\\\">\\r\\n                <button mat-raised-button\\r\\n                        [disabled]=\\\"isViewMode\\\"\\r\\n                        (click)='onSaveButtonClicked()'\\r\\n                        type=\\\"button\\\">\\r\\n                    SAVE\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card-content>\\r\\n\\r\\n</mat-card>\\r\\n\\r\\n<atlas-empty-state *ngIf=\\\" !newAddressForm && !editAddress\\\"\\r\\n                   title=\\\"Want to see the detail of an address ?\\\"\\r\\n                   [message]=\\\"displayMessage\\\"></atlas-empty-state>\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CounterpartyAddress } from '../../../../../../shared/entities/counterparty-address.entity';\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { MatDialog } from '@angular/material';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { Province } from '../../../../../../shared/entities/province.entity';\r\nimport { Country } from '../../../../../../shared/entities/country.entity';\r\nimport { LdcRegion } from '../../../../../../shared/entities/ldc-region.entity';\r\nimport { AddressType } from '../../../../../../shared/entities/address-type.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-address-detail-card',\r\n    templateUrl: './counterparty-address-detail-card.component.html',\r\n    styleUrls: ['./counterparty-address-detail-card.component.scss']\r\n})\r\nexport class CounterpartyAddressDetailCardComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly cancelAddress = new EventEmitter<any>();\r\n    displayMessage: string = 'Start by selecting one';\r\n    addressTypeNameCtrl = new AtlasFormControl('addressTypeNameCtrl');\r\n    address1Ctrl = new AtlasFormControl('address1Ctrl');\r\n    address2Ctrl = new AtlasFormControl('address2Ctrl');\r\n    zipCodeCtrl = new AtlasFormControl('zipCodeCtrl');\r\n    cityCtrl = new AtlasFormControl('cityCtrl');\r\n    provinceCtrl = new AtlasFormControl('provinceCtrl');\r\n    countryCtrl = new AtlasFormControl('countryCtrl');\r\n    emailCtrl = new AtlasFormControl('emailCtrl');\r\n    phoneNumberCtrl = new AtlasFormControl('phoneNumberCtrl');\r\n    faxNumberCtrl = new AtlasFormControl('faxNumberCtrl');\r\n    ldcRegionCtrl = new AtlasFormControl('ldcRegionCtrl');\r\n    addressTypeCodeCtrl = new AtlasFormControl('addressTypeCodeCtrl');\r\n    counterpartyAddress: CounterpartyAddress;\r\n    addressData: CounterpartyAddress;\r\n    isCreateOrEdit: boolean = false;\r\n    @Output() readonly addedNewAddress = new EventEmitter();\r\n    masterdata: MasterData;\r\n    filteredProvince: Province[];\r\n    filteredCountry: Country[];\r\n    filteredLdcRegion: LdcRegion[];\r\n    isNewAddress: boolean = true;\r\n    @Input() addressListLength: number;\r\n    @Output() addressDeleted = new EventEmitter<CounterpartyAddress>();\r\n    newAddressForm: boolean = false;\r\n    editAddress: boolean = false;\r\n    @Input() counterPartyId: number;\r\n    isDeactivated: boolean = false;\r\n    isDeleteDisabled: boolean = false;\r\n    filteredAddressType: AddressType[];\r\n    @Input() isViewMode: boolean = false;\r\n    isDeleted: boolean = false;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Province,\r\n        MasterDataProps.Ports,\r\n        MasterDataProps.ContractTerms,\r\n        MasterDataProps.AddressTypes,\r\n        MasterDataProps.LdcRegion,\r\n    ];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected dialog: MatDialog,\r\n        private snackbarService: SnackbarService,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n    ngOnInit() {\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.filteredAddressType = this.masterdata.addressTypes;\r\n                this.addressTypeCodeCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredAddressType = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.addressTypes,\r\n                        ['enumEntityId', 'enumEntityValue'],\r\n                    );\r\n                });\r\n\r\n                this.filteredProvince = this.masterdata.provinces;\r\n                this.provinceCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredProvince = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.provinces,\r\n                        ['provinceId', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.filteredCountry = this.masterdata.countries;\r\n                this.countryCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredCountry = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.countries,\r\n                        ['countryId', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.filteredLdcRegion = this.masterdata.regions;\r\n                this.ldcRegionCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredLdcRegion = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.regions,\r\n                        ['ldcRegionId', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.setValidators();\r\n\r\n            });\r\n\r\n        this.addressTypeNameCtrl.disable();\r\n    }\r\n\r\n    initializeValues(counterpartyAddresses: CounterpartyAddress, deletionFlag: boolean) {\r\n        this.addressData = counterpartyAddresses;\r\n        if (counterpartyAddresses.randomId) {\r\n            this.isNewAddress = false;\r\n        }\r\n        this.addressTypeNameCtrl.setValue(counterpartyAddresses.addresTypeName);\r\n        this.address1Ctrl.setValue(counterpartyAddresses.address1);\r\n        this.address2Ctrl.setValue(counterpartyAddresses.address2);\r\n        this.zipCodeCtrl.setValue(counterpartyAddresses.zipCode);\r\n        this.cityCtrl.setValue(counterpartyAddresses.city);\r\n        if (counterpartyAddresses.provinceID) {\r\n            this.provinceCtrl.setValue(this.filteredProvince.find((province) => province.provinceId === counterpartyAddresses.provinceID).description);\r\n        }\r\n        if (counterpartyAddresses.countryID) {\r\n            this.countryCtrl.setValue(this.filteredCountry.find((country) => country.countryId === counterpartyAddresses.countryID).description);\r\n        }\r\n        this.emailCtrl.setValue(counterpartyAddresses.mail);\r\n        this.phoneNumberCtrl.setValue(counterpartyAddresses.phoneNo);\r\n        this.faxNumberCtrl.setValue(counterpartyAddresses.faxNo);\r\n        if (counterpartyAddresses.addressTypeID) {\r\n            this.addressTypeCodeCtrl.setValue(this.filteredAddressType.find((addressType) => addressType.enumEntityId === counterpartyAddresses.addressTypeID).enumEntityValue);\r\n        }\r\n        if (counterpartyAddresses.ldcRegionId) {\r\n            this.ldcRegionCtrl.setValue(this.filteredLdcRegion.find((region) => region.ldcRegionId === counterpartyAddresses.ldcRegionId).description);\r\n        }\r\n\r\n        if (deletionFlag = true) {\r\n            this.newAddressForm = false;\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            addressTypeNameCtrl: this.addressTypeNameCtrl,\r\n            address1Ctrl: this.address1Ctrl,\r\n            address2Ctrl: this.address2Ctrl,\r\n            zipCodeCtrl: this.zipCodeCtrl,\r\n            cityCtrl: this.cityCtrl,\r\n            provinceCtrl: this.provinceCtrl,\r\n            countryCtrl: this.countryCtrl,\r\n            emailCtrl: this.emailCtrl,\r\n            phoneNumberCtrl: this.phoneNumberCtrl,\r\n            faxNumberCtrl: this.faxNumberCtrl,\r\n            ldcRegionCtrl: this.ldcRegionCtrl,\r\n            addressTypeCodeCtrl: this.addressTypeCodeCtrl\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    numberValidation(event: any) {\r\n        const pattern = /[0-9]/;\r\n        let inputChar = String.fromCharCode(event.charCode);\r\n        if (!pattern.test(inputChar)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.provinceCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.provinces,\r\n                    nameof<Province>('description'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.countryCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.countries,\r\n                    nameof<Country>('description'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.ldcRegionCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.regions,\r\n                    nameof<LdcRegion>('description'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.address1Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(60)]),\r\n        );\r\n\r\n        this.address2Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(60)]),\r\n        );\r\n\r\n        this.cityCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(60)]),\r\n        );\r\n\r\n        this.zipCodeCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(40)]),\r\n        );\r\n\r\n        this.emailCtrl.setValidators(Validators.compose\r\n            ([Validators.email, Validators.maxLength(40)]),\r\n        );\r\n\r\n        this.faxNumberCtrl.setValidators(Validators.compose\r\n            ([Validators.maxLength(40)]),\r\n        );\r\n\r\n        this.addressTypeCodeCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.addressTypes,\r\n                    nameof<AddressType>('enumEntityValue'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    onSelectionChanged(event: any) {\r\n        const addressType = this.masterdata.addressTypes.find(\r\n            (addType) => addType.enumEntityValue === event.option.value,\r\n        );\r\n        if (addressType) {\r\n            this.addressTypeNameCtrl.patchValue(addressType.enumEntityValue);\r\n        }\r\n        else {\r\n            this.addressTypeNameCtrl.patchValue('');\r\n        }\r\n    }\r\n\r\n    onDeleteButtonClicked() {\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'Do you confirm the deletion of the address ' + this.addressTypeCodeCtrl.value,\r\n                okButton: 'Yes',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe(\r\n            (answer) => {\r\n                if (answer) {\r\n                    this.addressDeleted.emit(this.addressData);\r\n                    this.formGroup.reset();\r\n                    this.newAddressForm = false;\r\n                    this.editAddress = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (this.formGroup.valid) {\r\n            let address = <CounterpartyAddress>{\r\n                isDeactivated: this.isDeactivated,\r\n                counterpartyId: this.counterPartyId,\r\n                addressId: this.addressData ? this.addressData.addressId : null,\r\n                randomId: this.isNewAddress ? this.addressListLength + 1 : this.addressData.randomId,\r\n                addresTypeName: this.addressTypeNameCtrl.value,\r\n                address1: this.address1Ctrl.value,\r\n                address2: this.address2Ctrl.value,\r\n                city: this.cityCtrl.value,\r\n                countryID: this.countryCtrl.value ? this.filteredCountry.find((country) => country.description === this.countryCtrl.value).countryId : '',\r\n                faxNo: this.faxNumberCtrl.value,\r\n                mail: this.emailCtrl.value,\r\n                phoneNo: this.phoneNumberCtrl.value,\r\n                provinceID: this.provinceCtrl.value ? this.filteredProvince.find((province) => province.description === this.provinceCtrl.value).provinceId : '',\r\n                zipCode: this.zipCodeCtrl.value,\r\n                ldcRegionId: this.ldcRegionCtrl.value ? this.filteredLdcRegion.find((ldcRegion) => ldcRegion.description === this.ldcRegionCtrl.value).ldcRegionId : '',\r\n                addressTypeID: this.addressTypeCodeCtrl.value ? this.filteredAddressType.find((addressType) => addressType.enumEntityValue === this.addressTypeCodeCtrl.value).enumEntityId : '',\r\n                addressTypeCode: this.addressTypeCodeCtrl.value,\r\n                isDeleted: this.isDeleted,\r\n                main: false,\r\n            };\r\n            this.addedNewAddress.emit(address);\r\n            this.isNewAddress = true;\r\n            this.newAddressForm = false;\r\n            this.editAddress = false;\r\n            this.formGroup.reset();\r\n        }\r\n        else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.formGroup.reset();\r\n        this.newAddressForm = false;\r\n        this.editAddress = false;\r\n        this.cancelAddress.emit();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <main>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\"\\r\\n             class='charter-creation-margin'>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"48\\\">\\r\\n                <atlas-counterparty-address-card #addressComponent\\r\\n                                                 (addNewAddress)=\\\"addNewAddressCalled($event)\\\"\\r\\n                                                 (rowClicked)=\\\"rowClickedCalled($event)\\\"\\r\\n                                                 (cancelAddress)=\\\"onCancelAddress()\\\"\\r\\n                                                 [isViewMode]=\\\"isViewMode\\\">\\r\\n                </atlas-counterparty-address-card>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"49\\\">\\r\\n                <atlas-counterparty-address-detail-card #addressDetailComponent\\r\\n                                                        (addedNewAddress)=\\\"saveNewAddressCalled($event)\\\"\\r\\n                                                        (addressDeleted)=\\\"onAddressDeleted($event)\\\"\\r\\n                                                        [addressListLength]=\\\"addressListLength\\\"\\r\\n                                                        (cancelAddress)=\\\"onCancelAddress()\\\"\\r\\n                                                        [counterPartyId]=\\\"counterPartyId\\\"\\r\\n                                                        [isViewMode]=\\\"isViewMode\\\">\\r\\n                </atlas-counterparty-address-detail-card>\\r\\n            </div>\\r\\n        </div>\\r\\n    </main>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { CounterpartyAddressDetailCardComponent } from './address-detail-card/counterparty-address-detail-card.component';\r\nimport { CounterpartyAddressCardComponent } from './address-card/counterparty-address-card.component';\r\nimport { CounterpartyAddress } from '../../../../../shared/entities/counterparty-address.entity';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-capture-form-address-tab',\r\n    templateUrl: './counterparty-capture-form-address-tab.component.html',\r\n    styleUrls: ['./counterparty-capture-form-address-tab.component.scss']\r\n})\r\nexport class CounterpartyCaptureFormAddressTabComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('addressComponent') addressComponent: CounterpartyAddressCardComponent;\r\n    @ViewChild('addressDetailComponent') addressDetailComponent: CounterpartyAddressDetailCardComponent;\r\n    formComponents: BaseFormComponent[] = [];\r\n    addressListLength: number;\r\n    counterPartyId: number;\r\n    @Input() isViewMode: boolean = false;\r\n\r\n    constructor(protected formBuilder: FormBuilder, private route: ActivatedRoute, protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n\r\n        this.addressListLength = this.addressComponent.counterpartyAddresses.length;\r\n        this.counterPartyId = Number(this.route.snapshot.paramMap.get('counterpartyID'));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            addressDetailComponent: this.addressDetailComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    addNewAddressCalled(params) {\r\n        if (params) {\r\n            this.addressDetailComponent.formGroup.reset();\r\n            this.addressDetailComponent.newAddressForm = true;\r\n            this.addressDetailComponent.addressListLength = this.addressComponent.counterpartyAddresses.length;\r\n        }\r\n    }\r\n\r\n    rowClickedCalled(counterpartyAddresses) {\r\n        if (counterpartyAddresses) {\r\n            this.addressDetailComponent.addressListLength = this.addressComponent.counterpartyAddresses.length;\r\n            this.addressDetailComponent.editAddress = true;\r\n            this.addressDetailComponent.initializeValues(counterpartyAddresses, this.addressComponent.isDeleteButtonEnabled);\r\n        }\r\n    }\r\n\r\n    saveNewAddressCalled(address: CounterpartyAddress) {\r\n        if (address) {\r\n            this.addressComponent.updatingAddressListOnEditing(address);\r\n        }\r\n    }\r\n\r\n    onAddressDeleted(deletedAddress: CounterpartyAddress) {\r\n        if (deletedAddress) {\r\n            this.addressComponent.updatingAddressListOnDeletion(deletedAddress);\r\n        }\r\n    }\r\n    onCancelAddress() {\r\n        this.addressComponent.isAddressListDataClicked = false;\r\n        this.addressDetailComponent.isNewAddress = true;\r\n    }\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"newBankAccountForm || editBankAccount\\\">\\r\\n    <div class=\\\"bankAccountDetails\\\">\\r\\n        <mat-card-content>\\r\\n            <mat-panel-title>\\r\\n                <label class=\\\"headerName\\\">{{bankAccountName}}</label>\\r\\n            </mat-panel-title>\\r\\n            <mat-accordion>\\r\\n                <mat-expansion-panel [expanded]=\\\"true\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            Bank Information\\r\\n                        </mat-panel-title>\\r\\n                        <mat-panel-description>\\r\\n                        </mat-panel-description>\\r\\n                    </mat-expansion-panel-header>\\r\\n                    <form [formGroup]=\\\"bankAccountFormGroup\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxFlex=\\\"100%\\\"\\r\\n                             class=\\\"bankInformation\\\">\\r\\n                            <div>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <div fxLayout=\\\"row\\\">\\r\\n                                    <div>\\r\\n                                        <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                                                 [disabled]=\\\"isViewMode\\\"\\r\\n                                                                 [formControl]=\\\"bankAccountStatusCtrl\\\"\\r\\n                                                                 aria-label=\\\"Date\\\"\\r\\n                                                                 (change)='bankAccountStatusChanged()'>\\r\\n                                            <mat-button-toggle [value]=\\\"1\\\">Activate</mat-button-toggle>\\r\\n                                            <mat-button-toggle [value]=\\\"2\\\">Deactivate</mat-button-toggle>\\r\\n                                        </mat-button-toggle-group>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <div fxLayout=\\\"row\\\">\\r\\n                                    <div>\\r\\n                                        <button [disabled]=\\\"newBankAccountForm || isDeleteDisabled || isViewMode\\\"\\r\\n                                                mat-raised-button\\r\\n                                                (click)='onBankAccountDeleteButtonClick()'\\r\\n                                                type=\\\"button\\\"\\r\\n                                                class=\\\"deleteField\\\">\\r\\n                                            Delete\\r\\n                                        </button>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"50%\\\"\\r\\n                                                  [fieldControl]=\\\"bankNameCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"bankNameCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Bank Name'\\\">\\r\\n                                    <mat-error *ngIf=\\\"bankNameCtrl.hasError('maxlength')\\\"> Bank Account\\r\\n                                        Bank Name should be at\\r\\n                                        most 40 Characters long </mat-error>\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Bank Account Description\\\"\\r\\n                                              [formControl]='bankAccountDescriptionCtrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"bankAccountDescriptionCtrl.hasError('maxlength')\\\"> Bank Account\\r\\n                                        Description should be at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <b>Address</b>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 1\\\"\\r\\n                                              [formControl]='addressLine1Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"addressLine1Ctrl.hasError('maxlength')\\\"> Address Line 1 should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 2\\\"\\r\\n                                              [formControl]='addressLine2Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"addressLine2Ctrl.hasError('maxlength')\\\"> Address Line 2 should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 3\\\"\\r\\n                                              [formControl]='addressLine3Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"addressLine3Ctrl.hasError('maxlength')\\\"> Address Line 3 should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 4\\\"\\r\\n                                              [formControl]='addressLine4Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"addressLine4Ctrl.hasError('maxlength')\\\"> Address Line 4 should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"cityCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'City'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Country\\\"\\r\\n                                           [matAutocomplete]=\\\"countryCode\\\"\\r\\n                                           [formControl]=\\\"countryCtrl\\\"\\r\\n                                           [required]=\\\"countryCtrl.isRequired\\\"\\r\\n                                           autocomplete=\\\"off\\\">\\r\\n                                    <mat-autocomplete #countryCode=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                                        <mat-option *ngFor=\\\"let country of bankCountry\\\"\\r\\n                                                    [value]=\\\"country.description\\\">\\r\\n                                            {{country.countryId}} | {{country.description}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                    <mat-error *ngIf=\\\"countryCtrl.hasError('inDropdownList')\\\">\\r\\n                                        Value is not in the List\\r\\n                                    </mat-error>\\r\\n                                </mat-form-field>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"zipCodeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Zip Code'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankSWIFTCodeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"bankSWIFTCodeCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Bank SWIFT Code'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Currency\\\"\\r\\n                                           [matAutocomplete]=\\\"currencyCode\\\"\\r\\n                                           [formControl]=\\\"accountCcyCtrl\\\"\\r\\n                                           [required]=\\\"accountCcyCtrl.isRequired\\\"\\r\\n                                           autocomplete=\\\"off\\\">\\r\\n                                    <mat-autocomplete #currencyCode=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                                        <mat-option *ngFor=\\\"let currency of accountCurrency\\\"\\r\\n                                                    [value]=\\\"currency.description\\\">\\r\\n                                            {{currency.currencyCode}} | {{currency.description}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                    <mat-error *ngIf=\\\"accountCcyCtrl.hasError('inDropdownList')\\\">\\r\\n                                        Value is not in the List\\r\\n                                    </mat-error>\\r\\n                                </mat-form-field>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-dropdown-select fxFlex='30%'\\r\\n                                                       label=\\\"Bank Type\\\"\\r\\n                                                       [fieldControl]=\\\"bankTypeCtrl\\\"\\r\\n                                                       isEditable=\\\"true\\\"\\r\\n                                                       [required]=\\\"bankTypeCtrl.isRequired\\\"\\r\\n                                                       [options]=\\\"bankTypeOptions\\\"\\r\\n                                                       [displayProperty]=\\\"bankTypeDisplayProperty\\\"\\r\\n                                                       [selectProperties]=\\\"bankTypeSelectProperties\\\">\\r\\n                                </atlas-dropdown-select>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankNoCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"bankNoCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Bank No'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankBranchCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Branch '\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"accountNoCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"accountNoCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Account No'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankNccTypeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank NCC Type'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"nccCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'NCC'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"ncsCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'NCS'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"fedABACtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'FED ABA'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"chipsCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Chips'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankPhoneNumberCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Phone Number'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankTelexNumberCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Telex Number'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankFaxNumberCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Fax Number'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"interfaceCodeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Interface Code'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </mat-expansion-panel>\\r\\n                <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\"\\r\\n                                     (closed)=\\\"panelOpenState = false\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            Bank Intermediary Details (1)\\r\\n                        </mat-panel-title>\\r\\n                        <mat-panel-description>\\r\\n                        </mat-panel-description>\\r\\n                    </mat-expansion-panel-header>\\r\\n                    <form [formGroup]=\\\"bankAccountIntermediary1FormGroup\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxFlex=\\\"100%\\\"\\r\\n                             class=\\\"bankIntermediaryDetails\\\">\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"right start\\\">\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <button mat-button\\r\\n                                        [disabled]=\\\"isViewMode\\\"\\r\\n                                        type=\\\"button\\\"\\r\\n                                        (click)=\\\"onBankIntermediary1AccountDeleteButtonClick()\\\">\\r\\n                                    DELETE\\r\\n                                </button>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"50%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1BankNameCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary1BankNameCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Intermediary Bank Name'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Bank Account Description\\\"\\r\\n                                              [formControl]='bankIntermediary1AccountDescriptionCtrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"bankIntermediary1AccountDescriptionCtrl.hasError('maxlength')\\\">\\r\\n                                        Bank\\r\\n                                        Account\\r\\n                                        Description should be at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <b>Address</b>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 1\\\"\\r\\n                                              [formControl]='intermediary1AddressLine1Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary1AddressLine1Ctrl.hasError('maxlength')\\\"> Address\\r\\n                                        Line 1\\r\\n                                        should be at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 2\\\"\\r\\n                                              [formControl]='intermediary1AddressLine2Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary1AddressLine2Ctrl.hasError('maxlength')\\\"> Address\\r\\n                                        Line 2\\r\\n                                        should be at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 3\\\"\\r\\n                                              [formControl]='intermediary1AddressLine3Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary1AddressLine3Ctrl.hasError('maxlength')\\\"> Address Line\\r\\n                                        3\\r\\n                                        should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 4\\\"\\r\\n                                              [formControl]='intermediary1AddressLine4Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary1AddressLine4Ctrl.hasError('maxlength')\\\"> Address Line\\r\\n                                        4\\r\\n                                        should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1CityCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'City'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Country\\\"\\r\\n                                           [matAutocomplete]=\\\"intermediary1CountryCode\\\"\\r\\n                                           [formControl]=\\\"intermediary1CountryCtrl\\\"\\r\\n                                           [required]=\\\"intermediary1CountryCtrl.isRequired\\\"\\r\\n                                           autocomplete=\\\"off\\\">\\r\\n                                    <mat-autocomplete #intermediary1CountryCode=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                                        <mat-option *ngFor=\\\"let country of bankIntermediary1Country\\\"\\r\\n                                                    [value]=\\\"country.description\\\">\\r\\n                                            {{country.countryId}} | {{country.description}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                </mat-form-field>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1ZipCodeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Zip Code'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1BankNoCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary1BankNoCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Bank No'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-dropdown-select fxFlex='30%'\\r\\n                                                       label=\\\"Bank Type\\\"\\r\\n                                                       [fieldControl]=\\\"intermediary1BankTypeCtrl\\\"\\r\\n                                                       isEditable=\\\"true\\\"\\r\\n                                                       [required]=\\\"intermediary1BankTypeCtrl.isRequired\\\"\\r\\n                                                       [options]=\\\"bankTypeOptions\\\"\\r\\n                                                       [displayProperty]=\\\"bankTypeDisplayProperty\\\"\\r\\n                                                       [selectProperties]=\\\"bankTypeSelectProperties\\\">\\r\\n                                </atlas-dropdown-select>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1AccountNoCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary1AccountNoCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Account No'\\\">\\r\\n                                </atlas-form-input>\\r\\n\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Currency\\\"\\r\\n                                           [matAutocomplete]=\\\"intermediary1currencyCode\\\"\\r\\n                                           [formControl]=\\\"intermediary1AccountCcyCtrl\\\"\\r\\n                                           [required]=\\\"intermediary1AccountCcyCtrl.isRequired\\\"\\r\\n                                           autocomplete=\\\"off\\\">\\r\\n                                    <mat-autocomplete #intermediary1currencyCode=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                                        <mat-option *ngFor=\\\"let currency of accountIntermediary1Currency\\\"\\r\\n                                                    [value]=\\\"currency.description\\\">\\r\\n                                            {{currency.currencyCode}} | {{currency.description}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                </mat-form-field>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1BankSWIFTCodeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary1BankSWIFTCodeCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Bank SWIFT Code'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankName1Ctrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Name'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1BankBranchCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Branch'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1FEDABACtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'FED ABA'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1ChipsCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Chips'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1BankNccTypeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank NCC Type'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"26%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1NCCCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'NCC'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"26%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary1NCSCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'NCS'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-dropdown-select fxFlex='38%'\\r\\n                                                       label=\\\"Bank Intermediary Order\\\"\\r\\n                                                       [fieldControl]=\\\"bankIntermediary1OrderCtrl\\\"\\r\\n                                                       isEditable=\\\"true\\\"\\r\\n                                                       [options]=\\\"bankIntermediary1OrderOptions\\\"\\r\\n                                                       [displayProperty]=\\\"bankIntermediary1OrderDisplayProperty\\\"\\r\\n                                                       [selectProperties]=\\\"bankIntermediary1OrderSelectProperties\\\">\\r\\n                                </atlas-dropdown-select>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </mat-expansion-panel>\\r\\n                <mat-expansion-panel (opened)=\\\"panelOpenState = true\\\"\\r\\n                                     (closed)=\\\"panelOpenState = false\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            Bank Intermediary Details (2)\\r\\n                        </mat-panel-title>\\r\\n                        <mat-panel-description>\\r\\n                        </mat-panel-description>\\r\\n                    </mat-expansion-panel-header>\\r\\n                    <form [formGroup]=\\\"bankAccountIntermediary2FormGroup\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxFlex=\\\"100%\\\"\\r\\n                             class=\\\"BankIntermediarySecondayDetails\\\">\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"right start\\\">\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <button mat-button\\r\\n                                        [disabled]=\\\"isViewMode\\\"\\r\\n                                        type=\\\"button\\\"\\r\\n                                        (click)=\\\"onBankIntermediary2AccountDeleteButtonClick()\\\">\\r\\n                                    DELETE\\r\\n                                </button>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"50%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2BankNameCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary2BankNameCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Intermediary Bank Name'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Bank Account Description\\\"\\r\\n                                              [formControl]='bankIntermediary2AccountDescriptionCtrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"bankIntermediary2AccountDescriptionCtrl.hasError('maxlength')\\\">\\r\\n                                        Bank\\r\\n                                        Account\\r\\n                                        Description should be at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <b>Address</b>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 1\\\"\\r\\n                                              [formControl]='intermediary2AddressLine1Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary2AddressLine1Ctrl.hasError('maxlength')\\\"> Address\\r\\n                                        Line 1\\r\\n                                        should be at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 2\\\"\\r\\n                                              [formControl]='intermediary2AddressLine2Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary2AddressLine2Ctrl.hasError('maxlength')\\\"> Address\\r\\n                                        Line 2\\r\\n                                        should be at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 3\\\"\\r\\n                                              [formControl]='intermediary2AddressLine3Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary2AddressLine3Ctrl.hasError('maxlength')\\\"> Address Line\\r\\n                                        3\\r\\n                                        should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <textarea matInput\\r\\n                                              rows=\\\"3\\\"\\r\\n                                              placeholder=\\\"Address Line 4\\\"\\r\\n                                              [formControl]='intermediary2AddressLine4Ctrl'></textarea>\\r\\n                                    <mat-error *ngIf=\\\"intermediary2AddressLine4Ctrl.hasError('maxlength')\\\"> Address Line\\r\\n                                        4\\r\\n                                        should be\\r\\n                                        at\\r\\n                                        most 160 Characters long </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2CityCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'City'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Country\\\"\\r\\n                                           [matAutocomplete]=\\\"intermediary2CountryCode\\\"\\r\\n                                           [formControl]=\\\"intermediary2CountryCtrl\\\"\\r\\n                                           [required]=\\\"intermediary2CountryCtrl.isRequired\\\"\\r\\n                                           autocomplete=\\\"off\\\">\\r\\n                                    <mat-autocomplete #intermediary2CountryCode=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                                        <mat-option *ngFor=\\\"let country of bankIntermediary2Country\\\"\\r\\n                                                    [value]=\\\"country.description\\\">\\r\\n                                            {{country.countryId}} | {{country.description}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                </mat-form-field>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2ZipCodeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Zip Code'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2BankNoCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary2BankNoCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Bank No'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-dropdown-select fxFlex='30%'\\r\\n                                                       label=\\\"Bank Type\\\"\\r\\n                                                       [fieldControl]=\\\"intermediary2BankTypeCtrl\\\"\\r\\n                                                       isEditable=\\\"true\\\"\\r\\n                                                       [required]=\\\"intermediary2BankTypeCtrl.isRequired\\\"\\r\\n                                                       [options]=\\\"bankTypeOptions\\\"\\r\\n                                                       [displayProperty]=\\\"bankTypeDisplayProperty\\\"\\r\\n                                                       [selectProperties]=\\\"bankTypeSelectProperties\\\">\\r\\n                                </atlas-dropdown-select>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2AccountNoCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary2AccountNoCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Account No'\\\">\\r\\n                                </atlas-form-input>\\r\\n\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Currency\\\"\\r\\n                                           [matAutocomplete]=\\\"intermediary2currencyCode\\\"\\r\\n                                           [formControl]=\\\"intermediary2AccountCcyCtrl\\\"\\r\\n                                           [required]=\\\"intermediary2AccountCcyCtrl.isRequired\\\"\\r\\n                                           autocomplete=\\\"off\\\">\\r\\n                                    <mat-autocomplete #intermediary2currencyCode=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                                        <mat-option *ngFor=\\\"let currency of accountIntermediary2Currency\\\"\\r\\n                                                    [value]=\\\"currency.description\\\">\\r\\n                                            {{currency.currencyCode}} | {{currency.description}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                </mat-form-field>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2BankSWIFTCodeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [required]=\\\"intermediary2BankSWIFTCodeCtrl.isRequired\\\"\\r\\n                                                  [label]=\\\"'Bank SWIFT Code'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"bankName1Ctrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Name'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2BankBranchCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank Branch'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2FEDABACtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'FED ABA'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2ChipsCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Chips'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2BankNccTypeCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'Bank NCC Type'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"26%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2NCCCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'NCC'\\\">\\r\\n                                </atlas-form-input>\\r\\n                                <span class=\\\"fill-space\\\"></span>\\r\\n                                <atlas-form-input fxFlex=\\\"26%\\\"\\r\\n                                                  [fieldControl]=\\\"intermediary2NCSCtrl\\\"\\r\\n                                                  [isEditable]=\\\"true\\\"\\r\\n                                                  [label]=\\\"'NCS'\\\">\\r\\n                                </atlas-form-input>\\r\\n                            </div>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\"\\r\\n                                 class=\\\"margin-top-8\\\">\\r\\n                                <atlas-dropdown-select fxFlex='38%'\\r\\n                                                       label=\\\"Bank Intermediary Order\\\"\\r\\n                                                       [fieldControl]=\\\"bankIntermediary2OrderCtrl\\\"\\r\\n                                                       isEditable=\\\"true\\\"\\r\\n                                                       [options]=\\\"bankIntermediary2OrderOptions\\\"\\r\\n                                                       [displayProperty]=\\\"bankIntermediary2OrderDisplayProperty\\\"\\r\\n                                                       [selectProperties]=\\\"bankIntermediary2OrderSelectProperties\\\">\\r\\n                                </atlas-dropdown-select>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                </mat-expansion-panel>\\r\\n            </mat-accordion>\\r\\n            <div fxLayout=\\\"row\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <button mat-raised-button\\r\\n                            [disabled]=\\\"isViewMode\\\"\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onBankAccountCancelButtonClick()\\\">\\r\\n                        CANCEL\\r\\n                    </button>\\r\\n                </div>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"end start\\\">\\r\\n                    <button mat-raised-button\\r\\n                            [disabled]=\\\"isViewMode\\\"\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onBankAccountSaveButtonClick()\\\">\\r\\n                        SAVE\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<atlas-empty-state *ngIf=\\\"!newBankAccountForm && !editBankAccount\\\"\\r\\n                   title=\\\"Want to see the Detail of a Bank Account\\\"\\r\\n                   [message]=\\\"bankAccountEmptyMessage\\\"></atlas-empty-state>\"","module.exports = \".margin-top-8 {\\n  margin-top: 8px; }\\n\\n.deleteField {\\n  margin: 8px 0 12px 0px;\\n  height: 29px;\\n  border-radius: 0px;\\n  width: 83px; }\\n\\ndiv.bankAccountDetails {\\n  overflow: scroll;\\n  height: 300px;\\n  width: 570px; }\\n\\n.headerName {\\n  font-weight: bolder; }\\n\"","import { Component, OnInit, EventEmitter, Output, Input, ViewChild, HostListener } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service'\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component'\r\nimport { CounterpartyBankAccountDetails } from '../../../../../../shared/entities/counterparty-bank-account-details.entity';\r\nimport { BankTypes } from '../../../../../../shared/enums/bank-type.enum';\r\nimport { BankType } from '../../../../../../shared/entities/bank-type.entity';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { Country } from '../../../../../../shared/entities/country.entity';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { UtilService, } from '../../../../../../shared/services/util.service';\r\nimport { Currency } from '../../../../../../shared/entities/currency.entity';\r\nimport { CounterpartyBankAccountIntermediary } from '../../../../../../shared/entities/counterparty-bank-account-intermediary.entity';\r\nimport { BankNccType } from '../../../../../../shared/entities/bank-ncc-type.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-bank-account-details',\r\n    templateUrl: './counterparty-bank-account-details.component.html',\r\n    styleUrls: ['./counterparty-bank-account-details.component.scss']\r\n})\r\nexport class CounterpartyBankAccountDetailsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly setBankAccountData = new EventEmitter<any>();\r\n    @Output() readonly deleteBankAccountData = new EventEmitter<any>();\r\n    @Output() readonly cancelBankAccountData = new EventEmitter<any>();\r\n    @Input() bankAccountListLength: number;\r\n    bankAccountFormGroup: FormGroup;\r\n    bankAccountIntermediary1FormGroup: FormGroup;\r\n    bankAccountIntermediary2FormGroup: FormGroup;\r\n    bankAccountDisplay: CounterpartyBankAccountDetails;\r\n    panelOpenState = false;\r\n    bankType: BankType[];\r\n    bankNccTypes: BankNccType[];\r\n    isNewBankAccount: boolean = true;\r\n    newBankAccountForm: boolean = false;\r\n    editBankAccount: boolean = false;\r\n    bankCountry: Country[];\r\n    bankIntermediary1Country: Country[];\r\n    bankIntermediary2Country: Country[];\r\n    accountCurrency: Currency[];\r\n    accountIntermediary1Currency: Currency[];\r\n    accountIntermediary2Currency: Currency[];\r\n    masterdata: MasterData;\r\n    bankAccountEmptyMessage: string = \"Start by Selecting One\";\r\n    bankStatus: number = 1;\r\n    bankAccountName: string;\r\n\r\n    bankAccountStatusCtrl = new AtlasFormControl('bankAccountStatus');\r\n    bankNameCtrl = new AtlasFormControl('bankName');\r\n    bankAccountDescriptionCtrl = new AtlasFormControl('bankAccountDescription');\r\n    addressLine1Ctrl = new AtlasFormControl('addressLine1');\r\n    addressLine2Ctrl = new AtlasFormControl('addressLine2');\r\n    addressLine3Ctrl = new AtlasFormControl('addressLine3');\r\n    addressLine4Ctrl = new AtlasFormControl('addressLine4');\r\n    zipCodeCtrl = new AtlasFormControl('zipCode');\r\n    cityCtrl = new AtlasFormControl('city');\r\n    countryCtrl = new AtlasFormControl('country');\r\n    bankSWIFTCodeCtrl = new AtlasFormControl('bankSWIFTCode');\r\n    accountCcyCtrl = new AtlasFormControl('accountCcy');\r\n    bankTypeCtrl = new AtlasFormControl('bankType');\r\n    bankNoCtrl = new AtlasFormControl('bankNo');\r\n    bankBranchCtrl = new AtlasFormControl('bankBranch');\r\n    accountNoCtrl = new AtlasFormControl('accountNo');\r\n    bankNccTypeCtrl = new AtlasFormControl('bankNccType');\r\n    nccCtrl = new AtlasFormControl('ncc');\r\n    ncsCtrl = new AtlasFormControl('ncs');\r\n    fedABACtrl = new AtlasFormControl('fedABA');\r\n    chipsCtrl = new AtlasFormControl('chips');\r\n    bankPhoneNumberCtrl = new AtlasFormControl('bankPhoneNumber');\r\n    bankFaxNumberCtrl = new AtlasFormControl('bankFaxNumber');\r\n    bankTelexNumberCtrl = new AtlasFormControl('bankTelexNumber');\r\n    interfaceCodeCtrl = new AtlasFormControl('interfaceCode');\r\n\r\n    bankIntermediary1AccountDescriptionCtrl = new AtlasFormControl('bankIntermediary1AccountDescription');\r\n    intermediary1BankNameCtrl = new AtlasFormControl('intermediary1BankName');\r\n    intermediary1AddressLine1Ctrl = new AtlasFormControl('intermediary1AddressLine1');\r\n    intermediary1AddressLine2Ctrl = new AtlasFormControl('intermediary1AddressLine2');\r\n    intermediary1AddressLine3Ctrl = new AtlasFormControl('intermediary1AddressLine3');\r\n    intermediary1AddressLine4Ctrl = new AtlasFormControl('intermediary1AddressLine4');\r\n    intermediary1ZipCodeCtrl = new AtlasFormControl('intermediary1ZipCode');\r\n    intermediary1BankTypeCtrl = new AtlasFormControl('intermediary1BankType');\r\n    intermediary1BankNoCtrl = new AtlasFormControl('intermediary1BankNo');\r\n    intermediary1CityCtrl = new AtlasFormControl('intermediary1City');\r\n    intermediary1CountryCtrl = new AtlasFormControl('intermediary1Country');\r\n    intermediary1AccountNoCtrl = new AtlasFormControl('intermediary1AccountNo');\r\n    intermediary1AccountCcyCtrl = new AtlasFormControl('intermediary1AccountCcy');\r\n    intermediary1BankSWIFTCodeCtrl = new AtlasFormControl('intermediary1BankSWIFTCode');\r\n    bankName1Ctrl = new AtlasFormControl('bankName1');\r\n    intermediary1BankBranchCtrl = new AtlasFormControl('intermediary1BankBranch');\r\n    intermediary1FEDABACtrl = new AtlasFormControl('intermediary1FEDABA');\r\n    intermediary1ChipsCtrl = new AtlasFormControl('intermediary1Chips');\r\n    intermediary1NCCCtrl = new AtlasFormControl('intermediary1NCC');\r\n    intermediary1NCSCtrl = new AtlasFormControl('intermediary1NCS');\r\n    bankIntermediary1OrderCtrl = new AtlasFormControl('bankIntermediary1Order');\r\n    intermediary1BankNccTypeCtrl = new AtlasFormControl('intermediary1BankNccType');\r\n\r\n    bankIntermediary2AccountDescriptionCtrl = new AtlasFormControl('bankIntermediary2AccountDescription');\r\n    intermediary2BankNameCtrl = new AtlasFormControl('intermediary2BankName');\r\n    intermediary2AddressLine1Ctrl = new AtlasFormControl('intermediary2AddressLine1');\r\n    intermediary2AddressLine2Ctrl = new AtlasFormControl('intermediary2AddressLine2');\r\n    intermediary2AddressLine3Ctrl = new AtlasFormControl('intermediary2AddressLine3');\r\n    intermediary2AddressLine4Ctrl = new AtlasFormControl('intermediary2AddressLine4');\r\n    intermediary2ZipCodeCtrl = new AtlasFormControl('intermediary2ZipCode');\r\n    intermediary2BankTypeCtrl = new AtlasFormControl('intermediary2BankType');\r\n    intermediary2BankNoCtrl = new AtlasFormControl('intermediary2BankNo');\r\n    intermediary2CityCtrl = new AtlasFormControl('intermediary2City');\r\n    intermediary2CountryCtrl = new AtlasFormControl('intermediary2Country');\r\n    intermediary2AccountNoCtrl = new AtlasFormControl('intermediary2AccountNo');\r\n    intermediary2AccountCcyCtrl = new AtlasFormControl('intermediary2AccountCcy');\r\n    intermediary2BankSWIFTCodeCtrl = new AtlasFormControl('intermediary2BankSWIFTCode');\r\n    bankName2Ctrl = new AtlasFormControl('bankName2');\r\n    intermediary2BankBranchCtrl = new AtlasFormControl('intermediary2BankBranch');\r\n    intermediary2FEDABACtrl = new AtlasFormControl('intermediary2FEDABA');\r\n    intermediary2ChipsCtrl = new AtlasFormControl('intermediary2Chips');\r\n    intermediary2NCCCtrl = new AtlasFormControl('intermediary2NCC');\r\n    intermediary2NCSCtrl = new AtlasFormControl('intermediary2NCS');\r\n    bankIntermediary2OrderCtrl = new AtlasFormControl('bankIntermediary2Order');\r\n    intermediary2BankNccTypeCtrl = new AtlasFormControl('intermediary2BankNccType');\r\n\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Countries,\r\n        MasterDataProps.BankTypes,\r\n        MasterDataProps.BankNccTypes,\r\n        MasterDataProps.Currencies,\r\n    ];\r\n\r\n    bankTypeDisplayProperty: string = 'enumEntityValue';\r\n    bankTypeSelectProperties: string[] = ['enumEntityValue'];\r\n    bankTypeOptions = this.bankType;\r\n\r\n    bankIntermediary1OrderDisplayProperty: string = 'bankIntermediaryOrder';\r\n    bankIntermediary1OrderSelectProperties: string[] = ['bankIntermediaryOrder'];\r\n    bankIntermediary1OrderOptions = new Array<any>(\r\n        { bankIntermediaryOrder: '1' },\r\n        { bankIntermediaryOrder: '2' },\r\n    );\r\n\r\n    bankIntermediary2OrderDisplayProperty: string = 'bankIntermediaryOrder';\r\n    bankIntermediary2OrderSelectProperties: string[] = ['bankIntermediaryOrder'];\r\n    bankIntermediary2OrderOptions = new Array<any>(\r\n        { bankIntermediaryOrder: '1' },\r\n        { bankIntermediaryOrder: '2' },\r\n    );\r\n\r\n    isDeleteDisabled: boolean = false;\r\n    @Input() isViewMode: boolean = false;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeForm();\r\n\r\n        if (this.isViewMode) {\r\n            this.bankAccountFormGroup.disable();\r\n            this.bankAccountIntermediary1FormGroup.disable();\r\n            this.bankAccountIntermediary2FormGroup.disable();\r\n        }\r\n\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n                this.bankTypeOptions = this.masterdata.bankTypes;\r\n                this.bankIntermediary1Country = this.masterdata.countries;\r\n                this.bankCountry = this.masterdata.countries;\r\n                this.bankIntermediary1Country = this.masterdata.countries;\r\n                this.bankIntermediary2Country = this.masterdata.countries;\r\n                this.accountCurrency = this.masterdata.currencies;\r\n                this.accountIntermediary1Currency = this.masterdata.currencies;\r\n                this.accountIntermediary2Currency = this.masterdata.currencies;\r\n                this.countryCtrl.valueChanges.subscribe((input) => {\r\n                    this.bankCountry = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.countries,\r\n                        ['countryId', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.intermediary1CountryCtrl.valueChanges.subscribe((input) => {\r\n                    this.bankIntermediary1Country = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.countries,\r\n                        ['countryId', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.intermediary2CountryCtrl.valueChanges.subscribe((input) => {\r\n                    this.bankIntermediary2Country = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.countries,\r\n                        ['countryId', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.accountCcyCtrl.valueChanges.subscribe((input) => {\r\n                    this.accountCurrency = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.currencies,\r\n                        ['currencyCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.intermediary1AccountCcyCtrl.valueChanges.subscribe((input) => {\r\n                    this.accountIntermediary1Currency = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.currencies,\r\n                        ['currencyCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.intermediary2AccountCcyCtrl.valueChanges.subscribe((input) => {\r\n                    this.accountIntermediary2Currency = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.currencies,\r\n                        ['currencyCode', 'description'],\r\n                    );\r\n                });\r\n            });\r\n\r\n\r\n\r\n        this.setValidators();\r\n    }\r\n\r\n    initializeForm() {\r\n        this.bankAccountFormGroup = this.formBuilder.group(\r\n            {\r\n                bankAccountStatusCtrl: this.bankAccountStatusCtrl,\r\n                bankNameCtrl: this.bankNameCtrl,\r\n                bankAccountDescriptionCtrl: this.bankAccountDescriptionCtrl,\r\n                addressLine1Ctrl: this.addressLine1Ctrl,\r\n                addressLine2Ctrl: this.addressLine2Ctrl,\r\n                addressLine3Ctrl: this.addressLine3Ctrl,\r\n                addressLine4Ctrl: this.addressLine4Ctrl,\r\n                zipCodeCtrl: this.zipCodeCtrl,\r\n                cityCtrl: this.cityCtrl,\r\n                countryCtrl: this.countryCtrl,\r\n                bankSWIFTCodeCtrl: this.bankSWIFTCodeCtrl,\r\n                accountCcyCtrl: this.accountCcyCtrl,\r\n                bankTypeCtrl: this.bankTypeCtrl,\r\n                bankNoCtrl: this.bankNoCtrl,\r\n                bankBranchCtrl: this.bankBranchCtrl,\r\n                accountNoCtrl: this.accountNoCtrl,\r\n                nccCtrl: this.nccCtrl,\r\n                ncsCtrl: this.ncsCtrl,\r\n                fedABACtrl: this.fedABACtrl,\r\n                chipsCtrl: this.chipsCtrl,\r\n                bankPhoneNumberCtrl: this.bankPhoneNumberCtrl,\r\n                bankFaxNumberCtrl: this.bankFaxNumberCtrl,\r\n                bankTelexNumberCtrl: this.bankTelexNumberCtrl,\r\n            },\r\n        );\r\n        this.bankAccountIntermediary1FormGroup = this.formBuilder.group(\r\n            {\r\n                bankIntermediary1AccountDescriptionCtrl: this.bankIntermediary1AccountDescriptionCtrl,\r\n                intermediary1BankNameCtrl: this.intermediary1BankNameCtrl,\r\n                intermediary1AddressLine1Ctrl: this.intermediary1AddressLine1Ctrl,\r\n                intermediary1AddressLine2Ctrl: this.intermediary1AddressLine2Ctrl,\r\n                intermediary1AddressLine3Ctrl: this.intermediary1AddressLine3Ctrl,\r\n                intermediary1AddressLine4Ctrl: this.intermediary1AddressLine4Ctrl,\r\n                intermediary1ZipCodeCtrl: this.intermediary1ZipCodeCtrl,\r\n                intermediary1BankTypeCtrl: this.intermediary1BankTypeCtrl,\r\n                intermediary1BankNoCtrl: this.intermediary1BankNoCtrl,\r\n                intermediary1CityCtrl: this.intermediary1CityCtrl,\r\n                intermediary1CountryCtrl: this.intermediary1CountryCtrl,\r\n                intermediary1AccountNoCtrl: this.intermediary1AccountNoCtrl,\r\n                intermediary1AccountCcyCtrl: this.intermediary1AccountCcyCtrl,\r\n                intermediary1BankSWIFTCodeCtrl: this.intermediary1BankSWIFTCodeCtrl,\r\n                bankName1Ctrl: this.bankName1Ctrl,\r\n                intermediary1BankBranchCtrl: this.intermediary1BankBranchCtrl,\r\n                intermediary1FEDABACtrl: this.intermediary1FEDABACtrl,\r\n                intermediary1ChipsCtrl: this.intermediary1ChipsCtrl,\r\n                intermediary1NCCCtrl: this.intermediary1NCCCtrl,\r\n                intermediary1NCSCtrl: this.intermediary1NCSCtrl,\r\n                bankIntermediary1OrderCtrl: this.bankIntermediary1OrderCtrl,\r\n            },\r\n        );\r\n        this.bankAccountIntermediary2FormGroup = this.formBuilder.group(\r\n            {\r\n                bankIntermediary2AccountDescriptionCtrl: this.bankIntermediary2AccountDescriptionCtrl,\r\n                intermediary2BankNameCtrl: this.intermediary2BankNameCtrl,\r\n                intermediary2AddressLine1Ctrl: this.intermediary2AddressLine1Ctrl,\r\n                intermediary2AddressLine2Ctrl: this.intermediary2AddressLine2Ctrl,\r\n                intermediary2AddressLine3Ctrl: this.intermediary2AddressLine3Ctrl,\r\n                intermediary2AddressLine4Ctrl: this.intermediary2AddressLine4Ctrl,\r\n                intermediary2ZipCodeCtrl: this.intermediary2ZipCodeCtrl,\r\n                intermediary2BankTypeCtrl: this.intermediary2BankTypeCtrl,\r\n                intermediary2BankNoCtrl: this.intermediary2BankNoCtrl,\r\n                intermediary2CityCtrl: this.intermediary2CityCtrl,\r\n                intermediary2CountryCtrl: this.intermediary2CountryCtrl,\r\n                intermediary2AccountNoCtrl: this.intermediary2AccountNoCtrl,\r\n                intermediary2AccountCcyCtrl: this.intermediary2AccountCcyCtrl,\r\n                intermediary2BankSWIFTCodeCtrl: this.intermediary2BankSWIFTCodeCtrl,\r\n                bankName2Ctrl: this.bankName2Ctrl,\r\n                intermediary2BankBranchCtrl: this.intermediary2BankBranchCtrl,\r\n                intermediary2FEDABACtrl: this.intermediary2FEDABACtrl,\r\n                intermediary2ChipsCtrl: this.intermediary2ChipsCtrl,\r\n                intermediary2NCCCtrl: this.intermediary2NCCCtrl,\r\n                intermediary2NCSCtrl: this.intermediary2NCSCtrl,\r\n                bankIntermediary2OrderCtrl: this.bankIntermediary2OrderCtrl,\r\n            },\r\n        );\r\n    }\r\n\r\n    setValidators() {\r\n        this.bankNameCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.bankNoCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.countryCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.bankSWIFTCodeCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.accountCcyCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.accountNoCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.bankTypeCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.bankNameCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(40)]),\r\n        );\r\n        this.bankAccountDescriptionCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n        this.addressLine1Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n        this.addressLine2Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n\r\n        this.intermediary1BankNameCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(40)]),\r\n        );\r\n        this.bankIntermediary1AccountDescriptionCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n        this.intermediary1AddressLine1Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n        this.intermediary1AddressLine2Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n\r\n        this.intermediary2BankNameCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(40)]),\r\n        );\r\n        this.bankIntermediary2AccountDescriptionCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n        this.intermediary2AddressLine1Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n        this.intermediary2AddressLine2Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n\r\n        this.bankAccountFormGroup.updateValueAndValidity();\r\n    }\r\n\r\n    bankAccountStatusChanged() {\r\n        this.bankStatus = this.bankAccountStatusCtrl.value;\r\n    }\r\n\r\n    saveBankAccount() {\r\n        let bankAccount = <CounterpartyBankAccountDetails>{\r\n            bankAccountId: this.bankAccountDisplay ? this.bankAccountDisplay.bankAccountId : null,\r\n            randomId: this.isNewBankAccount ? this.bankAccountListLength + 1 : this.bankAccountDisplay.randomId,\r\n            bankAccountStatusID: this.bankStatus,\r\n            bankName: this.bankNameCtrl.value,\r\n            bankAccountDesc: this.bankAccountDescriptionCtrl.value,\r\n            bankAddressLine1: this.addressLine1Ctrl.value,\r\n            bankAddressLine2: this.addressLine2Ctrl.value,\r\n            bankAddressLine3: this.addressLine3Ctrl.value,\r\n            bankAddressLine4: this.addressLine4Ctrl.value,\r\n            bankZIPCode: this.zipCodeCtrl.value,\r\n            bankCity: this.cityCtrl.value,\r\n            bankCountryKey: this.countryCtrl.value ? this.bankCountry.find(country => country.description === this.countryCtrl.value).countryId : '',\r\n            bankSwiftCode: this.bankSWIFTCodeCtrl.value,\r\n            accountCCY: this.accountCcyCtrl.value ? this.accountCurrency.find(currency => currency.description === this.accountCcyCtrl.value).currencyCode : '',\r\n            bankTypeID: this.bankTypeCtrl.value ? this.bankTypeCtrl.value.enumEntityId : '',\r\n            bankKey: this.bankNoCtrl.value,\r\n            bankBranch: this.bankBranchCtrl.value,\r\n            accountNo: this.accountNoCtrl.value,\r\n            ncc: this.nccCtrl.value,\r\n            ncs: this.ncsCtrl.value,\r\n            fedaba: this.fedABACtrl.value,\r\n            chips: this.chipsCtrl.value,\r\n            interfaceCode: this.interfaceCodeCtrl.value,\r\n            bankPhoneNo: this.bankPhoneNumberCtrl.value,\r\n            bankFaxNo: this.bankFaxNumberCtrl.value,\r\n            bankTelexNo: this.bankTelexNumberCtrl.value,\r\n            externalReference: \"\",\r\n            mdmID: null,\r\n            counterpartyId: this.bankAccountDisplay ? this.bankAccountDisplay.counterpartyId : null,\r\n            bankAccountDefault: false,\r\n            bankAccountIntermediary: false,\r\n            bankNccType: this.bankNccTypeCtrl.value,\r\n            isDeactivated: (this.bankStatus == 1) ? false : true,\r\n            tempBankAccountId: this.isNewBankAccount ? this.bankAccountListLength + 1 : this.bankAccountDisplay.tempBankAccountId,\r\n        };\r\n\r\n        bankAccount.bankAccountIntermediary1 = <CounterpartyBankAccountIntermediary>{\r\n            bankAccountIntermediaryId: this.bankAccountDisplay ? this.bankAccountDisplay.bankAccountIntermediary1 ? this.bankAccountDisplay.bankAccountIntermediary1.bankAccountIntermediaryId : null : null,\r\n            intermediaryId: this.bankAccountDisplay ? this.bankAccountDisplay.bankAccountIntermediary1 ? this.bankAccountDisplay.bankAccountIntermediary1.intermediaryId : null : null,\r\n            bankAccountId: this.bankAccountDisplay ? this.bankAccountDisplay.bankAccountIntermediary1 ? this.bankAccountDisplay.bankAccountIntermediary1.bankAccountId : null : null,\r\n            parentBankAccountId: bankAccount.bankAccountId,\r\n            bankAccountDesc: this.bankIntermediary1AccountDescriptionCtrl.value,\r\n            bankName: this.intermediary1BankNameCtrl.value,\r\n            bankAddressLine1: this.intermediary1AddressLine1Ctrl.value,\r\n            bankAddressLine2: this.intermediary1AddressLine2Ctrl.value,\r\n            bankAddressLine3: this.intermediary1AddressLine3Ctrl.value,\r\n            bankAddressLine4: this.intermediary1AddressLine4Ctrl.value,\r\n            bankZIPCode: this.intermediary1ZipCodeCtrl.value,\r\n            bankCity: this.intermediary1CityCtrl.value,\r\n            bankCountryKey: this.intermediary1CountryCtrl.value ? this.bankIntermediary1Country.find(country => country.description === this.intermediary1CountryCtrl.value).countryId : '',\r\n            accountNo: this.intermediary1AccountNoCtrl.value,\r\n            accountCCY: this.intermediary1AccountCcyCtrl.value ? this.accountIntermediary1Currency.find(currency => currency.description === this.intermediary1AccountCcyCtrl.value).currencyCode : '',\r\n            bankTypeID: this.intermediary1BankTypeCtrl.value ? this.intermediary1BankTypeCtrl.value.enumEntityId : '',\r\n            bankKey: this.intermediary1BankNoCtrl.value,\r\n            bankAccountStatusID: this.bankStatus,\r\n            externalReference: \"\",\r\n            mdmID: null,\r\n            counterpartyId: bankAccount.counterpartyId,\r\n            bankAccountDefault: false,\r\n            bankAccountIntermediary: false,\r\n            bankSwiftCode: this.intermediary1BankSWIFTCodeCtrl.value,\r\n            bankBranch: this.intermediary1BankBranchCtrl.value,\r\n            fedaba: this.intermediary1FEDABACtrl.value,\r\n            chips: this.intermediary1ChipsCtrl.value,\r\n            ncc: this.intermediary1NCCCtrl.value,\r\n            ncs: this.intermediary1NCSCtrl.value,\r\n            order: this.bankIntermediary1OrderCtrl.value ? this.bankIntermediary1OrderCtrl.value.bankIntermediaryOrder : '',\r\n            bankNccType: this.intermediary1BankNccTypeCtrl.value,\r\n            tempParentBankAccountId: this.isNewBankAccount ? this.bankAccountListLength + 1 : this.bankAccountDisplay.tempBankAccountId,\r\n        };\r\n\r\n        bankAccount.bankAccountIntermediary2 = <CounterpartyBankAccountIntermediary>{\r\n            bankAccountIntermediaryId: this.bankAccountDisplay ? this.bankAccountDisplay.bankAccountIntermediary2 ? this.bankAccountDisplay.bankAccountIntermediary2.bankAccountIntermediaryId : null : null,\r\n            intermediaryId: this.bankAccountDisplay ? this.bankAccountDisplay.bankAccountIntermediary2 ? this.bankAccountDisplay.bankAccountIntermediary2.intermediaryId : null : null,\r\n            bankAccountId: this.bankAccountDisplay ? this.bankAccountDisplay.bankAccountIntermediary2 ? this.bankAccountDisplay.bankAccountIntermediary2.bankAccountId : null : null,\r\n            parentBankAccountId: bankAccount.bankAccountId,\r\n            bankAccountDesc: this.bankIntermediary2AccountDescriptionCtrl.value,\r\n            bankName: this.intermediary2BankNameCtrl.value,\r\n            bankAddressLine1: this.intermediary2AddressLine1Ctrl.value,\r\n            bankAddressLine2: this.intermediary2AddressLine2Ctrl.value,\r\n            bankAddressLine3: this.intermediary2AddressLine3Ctrl.value,\r\n            bankAddressLine4: this.intermediary2AddressLine4Ctrl.value,\r\n            bankZIPCode: this.intermediary2ZipCodeCtrl.value,\r\n            bankCity: this.intermediary2CityCtrl.value,\r\n            bankCountryKey: this.intermediary2CountryCtrl.value ? this.bankIntermediary2Country.find(country => country.description === this.intermediary2CountryCtrl.value).countryId : '',\r\n            accountNo: this.intermediary2AccountNoCtrl.value,\r\n            accountCCY: this.intermediary2AccountCcyCtrl.value ? this.accountIntermediary2Currency.find(currency => currency.description === this.intermediary2AccountCcyCtrl.value).currencyCode : '',\r\n            bankTypeID: this.intermediary2BankTypeCtrl.value ? this.intermediary2BankTypeCtrl.value.enumEntityId : '',\r\n            bankKey: this.intermediary2BankNoCtrl.value,\r\n            bankAccountStatusID: this.bankStatus,\r\n            externalReference: \"\",\r\n            mdmID: null,\r\n            counterpartyId: bankAccount.counterpartyId,\r\n            bankAccountDefault: false,\r\n            bankAccountIntermediary: false,\r\n            bankSwiftCode: this.intermediary2BankSWIFTCodeCtrl.value,\r\n            bankBranch: this.intermediary2BankBranchCtrl.value,\r\n            fedaba: this.intermediary2FEDABACtrl.value,\r\n            chips: this.intermediary2ChipsCtrl.value,\r\n            ncc: this.intermediary2NCCCtrl.value,\r\n            ncs: this.intermediary2NCSCtrl.value,\r\n            order: this.bankIntermediary2OrderCtrl.value ? this.bankIntermediary2OrderCtrl.value.bankIntermediaryOrder : '',\r\n            bankNccType: this.intermediary2BankNccTypeCtrl.value,\r\n            tempParentBankAccountId: this.isNewBankAccount ? this.bankAccountListLength + 1 : this.bankAccountDisplay.tempBankAccountId,\r\n        };\r\n        this.setBankAccountData.emit(bankAccount);\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.bankAccountFormGroup.dirty ||\r\n            this.bankAccountIntermediary1FormGroup.dirty ||\r\n            this.bankAccountIntermediary2FormGroup.dirty) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Discard Changes',\r\n                    text: 'Do you want to save the details',\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.onBankAccountSaveButtonClick();\r\n                }\r\n            });\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    onBankAccountDeleteButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'Do you confirm the deletion of Bank Account ' + this.bankName1Ctrl.value,\r\n                okButton: 'Yes',\r\n                cancelButton: 'No',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.deleteBankAccountData.emit(this.bankAccountDisplay);\r\n                this.bankAccountFormGroup.reset();\r\n                this.bankAccountIntermediary1FormGroup.reset();\r\n                this.bankAccountIntermediary2FormGroup.reset();\r\n                this.newBankAccountForm = false;\r\n                this.editBankAccount = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    onBankIntermediary1AccountDeleteButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'Do you confirm the deletion of Bank Account ' + this.intermediary1BankNameCtrl.value,\r\n                okButton: 'Yes',\r\n                cancelButton: 'No',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.bankAccountIntermediary1FormGroup.reset();\r\n            }\r\n        });\r\n    }\r\n\r\n    onBankIntermediary2AccountDeleteButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'Do you confirm the deletion of Bank Account ' + this.intermediary2BankNameCtrl.value,\r\n                okButton: 'Yes',\r\n                cancelButton: 'No',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.bankAccountIntermediary2FormGroup.reset();\r\n            }\r\n        });\r\n    }\r\n\r\n    onBankAccountSaveButtonClick() {\r\n        if (this.bankAccountFormGroup.valid &&\r\n            this.bankAccountIntermediary1FormGroup.valid &&\r\n            this.bankAccountIntermediary2FormGroup.valid) {\r\n            this.saveBankAccount();\r\n            this.bankAccountFormGroup.reset();\r\n            this.bankAccountIntermediary1FormGroup.reset();\r\n            this.bankAccountIntermediary2FormGroup.reset();\r\n            this.newBankAccountForm = false;\r\n            this.editBankAccount = false;\r\n        }\r\n        else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n    }\r\n\r\n    onBankAccountCancelButtonClick() {\r\n        this.bankAccountFormGroup.reset();\r\n        this.bankAccountIntermediary1FormGroup.reset();\r\n        this.bankAccountIntermediary2FormGroup.reset();\r\n        this.newBankAccountForm = false;\r\n        this.editBankAccount = false;\r\n        this.cancelBankAccountData.emit();\r\n    }\r\n\r\n    getBankAccountData(data: CounterpartyBankAccountDetails, deletionFlag: boolean) {\r\n        if (data) {\r\n            this.bankAccountDisplay = data;\r\n            this.bankAccountName = this.bankAccountDisplay.bankName;\r\n            if (data.randomId) {\r\n                this.isNewBankAccount = false;\r\n            }\r\n            if (data.isDeactivated) {\r\n                data.bankAccountStatusID = 2;\r\n            }\r\n            else {\r\n                data.bankAccountStatusID = 1;\r\n            }\r\n\r\n            this.bankAccountStatusCtrl.patchValue(data.bankAccountStatusID);\r\n            this.bankStatus = data.bankAccountStatusID;\r\n            this.bankNameCtrl.patchValue(data.bankName);\r\n            this.bankAccountDescriptionCtrl.patchValue(data.bankAccountDesc);\r\n            this.addressLine1Ctrl.patchValue(data.bankAddressLine1);\r\n            this.addressLine2Ctrl.patchValue(data.bankAddressLine2);\r\n            this.addressLine3Ctrl.patchValue(data.bankAddressLine3);\r\n            this.addressLine4Ctrl.patchValue(data.bankAddressLine4);\r\n            this.zipCodeCtrl.patchValue(data.bankZIPCode);\r\n            this.cityCtrl.patchValue(data.bankCity);\r\n            if (data.bankCountryKey) {\r\n                this.countryCtrl.patchValue(this.bankCountry.find(country => country.countryId === data.bankCountryKey).description);\r\n            }\r\n            this.bankSWIFTCodeCtrl.patchValue(data.bankSwiftCode);\r\n            if (data.accountCCY) {\r\n                this.accountCcyCtrl.patchValue(this.accountCurrency.find(currency => currency.currencyCode === data.accountCCY).description);\r\n            }\r\n            this.bankTypeCtrl.patchValue(this.bankTypeOptions.find(item => item.enumEntityId === data.bankTypeID));\r\n            this.bankNoCtrl.patchValue(data.bankKey);\r\n            this.bankBranchCtrl.patchValue(data.bankBranch);\r\n            this.accountNoCtrl.patchValue(data.accountNo);\r\n            this.nccCtrl.patchValue(data.ncc);\r\n            this.ncsCtrl.patchValue(data.ncs);\r\n            this.fedABACtrl.patchValue(data.fedaba);\r\n            this.chipsCtrl.patchValue(data.chips);\r\n            this.interfaceCodeCtrl.patchValue(data.interfaceCode);\r\n            this.bankPhoneNumberCtrl.patchValue(data.bankPhoneNo);\r\n            this.bankFaxNumberCtrl.patchValue(data.bankFaxNo);\r\n            this.bankTelexNumberCtrl.patchValue(data.bankTelexNo);\r\n            this.bankNccTypeCtrl.patchValue(data.bankNccType);\r\n\r\n            this.bankIntermediary1AccountDescriptionCtrl.patchValue(data.bankAccountIntermediary1.bankAccountDesc);\r\n            this.intermediary1BankNameCtrl.patchValue(data.bankAccountIntermediary1.bankName);\r\n            this.intermediary1AddressLine1Ctrl.patchValue(data.bankAccountIntermediary1.bankAddressLine1);\r\n            this.intermediary1AddressLine2Ctrl.patchValue(data.bankAccountIntermediary1.bankAddressLine2);\r\n            this.intermediary1AddressLine3Ctrl.patchValue(data.bankAccountIntermediary1.bankAddressLine3);\r\n            this.intermediary1AddressLine4Ctrl.patchValue(data.bankAccountIntermediary1.bankAddressLine4);\r\n            this.intermediary1ZipCodeCtrl.patchValue(data.bankAccountIntermediary1.bankZIPCode);\r\n            this.intermediary1BankTypeCtrl.patchValue(this.bankTypeOptions.find(item => item.enumEntityId === data.bankTypeID));\r\n            this.intermediary1BankNoCtrl.patchValue(data.bankAccountIntermediary1.bankKey);\r\n            this.intermediary1CityCtrl.patchValue(data.bankAccountIntermediary1.bankCity);\r\n            if (data.bankAccountIntermediary1.bankCountryKey) {\r\n                this.intermediary1CountryCtrl.patchValue(this.bankIntermediary1Country.find(country => country.countryId === data.bankAccountIntermediary1.bankCountryKey).description);\r\n            }\r\n            this.intermediary1AccountNoCtrl.patchValue(data.bankAccountIntermediary1.accountNo);\r\n            if (data.bankAccountIntermediary1.accountCCY) {\r\n                this.intermediary1AccountCcyCtrl.patchValue(this.accountIntermediary1Currency.find(currency => currency.currencyCode === data.bankAccountIntermediary1.accountCCY).description);\r\n            }\r\n            this.intermediary1BankSWIFTCodeCtrl.patchValue(data.bankAccountIntermediary1.bankSwiftCode);\r\n            this.bankName1Ctrl.patchValue(data.bankName);\r\n            this.intermediary1BankBranchCtrl.patchValue(data.bankAccountIntermediary1.bankBranch);\r\n            this.intermediary1FEDABACtrl.patchValue(data.bankAccountIntermediary1.fedaba);\r\n            this.intermediary1ChipsCtrl.patchValue(data.bankAccountIntermediary1.chips);\r\n            this.intermediary1BankNccTypeCtrl.patchValue(data.bankAccountIntermediary1.bankNccType);\r\n            this.intermediary1NCCCtrl.patchValue(data.bankAccountIntermediary1.ncc);\r\n            this.intermediary1NCSCtrl.patchValue(data.bankAccountIntermediary1.ncs);\r\n            this.bankIntermediary1OrderCtrl.patchValue(this.bankIntermediary1OrderOptions[data.bankAccountIntermediary1.order - 1]);\r\n\r\n            this.bankIntermediary2AccountDescriptionCtrl.patchValue(data.bankAccountIntermediary2.bankAccountDesc);\r\n            this.intermediary2BankNameCtrl.patchValue(data.bankAccountIntermediary2.bankName);\r\n            this.intermediary2AddressLine1Ctrl.patchValue(data.bankAccountIntermediary2.bankAddressLine1);\r\n            this.intermediary2AddressLine2Ctrl.patchValue(data.bankAccountIntermediary2.bankAddressLine2);\r\n            this.intermediary2AddressLine3Ctrl.patchValue(data.bankAccountIntermediary2.bankAddressLine3);\r\n            this.intermediary2AddressLine4Ctrl.patchValue(data.bankAccountIntermediary2.bankAddressLine4);\r\n            this.intermediary2ZipCodeCtrl.patchValue(data.bankAccountIntermediary2.bankZIPCode);\r\n            this.intermediary2BankTypeCtrl.patchValue(this.bankTypeOptions.find(item => item.enumEntityId === data.bankTypeID));\r\n            this.intermediary2BankNoCtrl.patchValue(data.bankAccountIntermediary2.bankKey);\r\n            this.intermediary2CityCtrl.patchValue(data.bankAccountIntermediary2.bankCity);\r\n            if (data.bankAccountIntermediary2.bankCountryKey) {\r\n                this.intermediary2CountryCtrl.patchValue(this.bankIntermediary2Country.find(country => country.countryId === data.bankAccountIntermediary2.bankCountryKey).description);\r\n            }\r\n            this.intermediary2AccountNoCtrl.patchValue(data.bankAccountIntermediary2.accountNo);\r\n            if (data.bankAccountIntermediary2.accountCCY) {\r\n                this.intermediary2AccountCcyCtrl.patchValue(this.accountIntermediary2Currency.find(currency => currency.currencyCode === data.bankAccountIntermediary2.accountCCY).description);\r\n            }\r\n            this.intermediary2BankSWIFTCodeCtrl.patchValue(data.bankAccountIntermediary2.bankSwiftCode);\r\n            this.bankName1Ctrl.patchValue(data.bankName);\r\n            this.intermediary2BankBranchCtrl.patchValue(data.bankAccountIntermediary2.bankBranch);\r\n            this.intermediary2FEDABACtrl.patchValue(data.bankAccountIntermediary2.fedaba);\r\n            this.intermediary2ChipsCtrl.patchValue(data.bankAccountIntermediary2.chips);\r\n            this.intermediary2BankNccTypeCtrl.patchValue(data.bankAccountIntermediary2.bankNccType);\r\n            this.intermediary2NCCCtrl.patchValue(data.bankAccountIntermediary2.ncc);\r\n            this.intermediary2NCSCtrl.patchValue(data.bankAccountIntermediary2.ncs);\r\n            this.bankIntermediary2OrderCtrl.patchValue(this.bankIntermediary2OrderOptions[data.bankAccountIntermediary2.order - 1]);\r\n        }\r\n        if (deletionFlag = true) {\r\n            this.newBankAccountForm = false;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Counterparty Bank Accounts</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"center end\\\">\\r\\n            <mat-nav-list *ngFor=\\\"let data of bankAccountsData\\\">\\r\\n                <div *ngIf=\\\"!data.isDeleted\\\">\\r\\n                    <div fxLayout=\\\"column\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"left start\\\">\\r\\n                            <mat-list-item style=\\\"width: 510px;\\\"\\r\\n                                           (click)=\\\"onSetBankAccountData(data)\\\">\\r\\n                                <div fxLayout=\\\"column\\\"\\r\\n                                     style=\\\"width: 240px;\\\">\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        <b>Bank Name</b>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        {{ data.bankName }}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <span class=\\\"fill-space\\\"\\r\\n                                      style=\\\" flex: 0.1 1 auto;\\\"></span>\\r\\n                                <div fxLayout=\\\"column\\\">\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        <b>Currency</b>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        {{ data.accountCCY}}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <span class=\\\"fill-space\\\"\\r\\n                                      style=\\\" flex: 0.1 1 auto;\\\"></span>\\r\\n                                <div fxLayout=\\\"column\\\">\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        <b>Status</b>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row\\\">\\r\\n                                        {{ (data.isDeactivated) ? 'Deactivated' : 'Activated' }}\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </mat-list-item>\\r\\n                            <mat-list-item (click)=\\\"onSetBankAccountFavorite(data)\\\">\\r\\n                                <div fxLayout=\\\"column\\\">\\r\\n                                    <mat-icon [ngClass]=\\\"data.bankAccountDefault ? 'heart-saved' : 'heart-not-saved'\\\">\\r\\n                                        {{ data.bankAccountDefault ? 'favorite' : 'favorite_border' }}\\r\\n                                    </mat-icon>\\r\\n                                </div>\\r\\n                            </mat-list-item>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <mat-divider class=\\\"charter-creation-divider\\\"></mat-divider>\\r\\n                </div>\\r\\n            </mat-nav-list>\\r\\n            <div class=\\\"btn-container\\\"></div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button mat-raised-button\\r\\n                        [disabled]=\\\"isAddNewBankAccountDisabled || isViewMode\\\"\\r\\n                        (click)=\\\"onAddNewBankAccountButtonClick()\\\"\\r\\n                        type=\\\"button\\\">\\r\\n                    ADD NEW BANK ACCOUNT\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".mat-raised-button {\\n  font-weight: 900;\\n  background: #fefcfe;\\n  color: #060606; }\\n\"","import { Component, OnInit, EventEmitter, Output, Input } from '@angular/core';\r\nimport { CounterpartyBankAccountDetails } from '../../../../../../shared/entities/counterparty-bank-account-details.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-bank-account-list',\r\n    templateUrl: './counterparty-bank-account-list.component.html',\r\n    styleUrls: ['./counterparty-bank-account-list.component.scss']\r\n})\r\nexport class CounterpartyBankAccountListComponent implements OnInit {\r\n    @Output() readonly addNewflag = new EventEmitter<any>();\r\n    @Output() readonly setBankData = new EventEmitter<any>();\r\n    bankAccountsData: CounterpartyBankAccountDetails[] = [];\r\n    isAddNewBankAccountDisabled: boolean = false;\r\n    isDeleteBankAccountDisabled: boolean = false;\r\n    favoriteFlag: boolean = false;\r\n    @Input() isViewMode: boolean = false;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onAddNewBankAccountButtonClick() {\r\n        this.addNewflag.emit(true);\r\n    }\r\n\r\n    onSetBankAccountData(bankData: CounterpartyBankAccountDetails) {\r\n        if (bankData) {\r\n            this.isAddNewBankAccountDisabled = true;\r\n            this.isDeleteBankAccountDisabled = true;\r\n            this.setBankData.emit(bankData);\r\n        }\r\n    }\r\n\r\n    updatingBankAccountListOnEditing(bankAccountUpdated: CounterpartyBankAccountDetails) {\r\n        if (bankAccountUpdated) {\r\n            let index = -1\r\n            index = this.bankAccountsData.findIndex(bank => bank.randomId === bankAccountUpdated.randomId);\r\n            if (this.bankAccountsData && this.bankAccountsData.length > 0) {\r\n                bankAccountUpdated.counterpartyId = this.bankAccountsData[0].counterpartyId;\r\n            }\r\n            if (index != -1) {\r\n                this.bankAccountsData.splice(index, 1, bankAccountUpdated);\r\n            }\r\n            else {\r\n                this.bankAccountsData.push(bankAccountUpdated);\r\n            }\r\n        }\r\n        this.isAddNewBankAccountDisabled = false;\r\n    }\r\n\r\n    deletingBankAccountListOnDeletion(bankAccountDeleted: CounterpartyBankAccountDetails) {\r\n        if (bankAccountDeleted) {\r\n            let index = -1\r\n            index = this.bankAccountsData.findIndex(bank => bank.randomId === bankAccountDeleted.randomId);\r\n            if (index != -1) {\r\n                bankAccountDeleted.isDeleted = true;\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        }\r\n        this.isAddNewBankAccountDisabled = false;\r\n    }\r\n\r\n    onSetBankAccountFavorite(bankAccountFavorite: CounterpartyBankAccountDetails) {\r\n        if (bankAccountFavorite && !this.isViewMode) {\r\n            this.bankAccountsData.forEach((element) => {\r\n                if (element.bankKey === bankAccountFavorite.bankKey\r\n                    && element.counterpartyId === bankAccountFavorite.counterpartyId && element.accountCCY === bankAccountFavorite.accountCCY) {\r\n                    element.bankAccountDefault = !element.bankAccountDefault;\r\n                }\r\n                else if (element.accountCCY === bankAccountFavorite.accountCCY\r\n                    && element.counterpartyId === bankAccountFavorite.counterpartyId) {\r\n                    element.bankAccountDefault = false;\r\n                }\r\n            });\r\n        }\r\n        this.isAddNewBankAccountDisabled = false;\r\n    }\r\n}","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <main>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\"\\r\\n             class='charter-creation-margin'>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"48\\\">\\r\\n                <atlas-counterparty-bank-account-list #bankAccountListComponent\\r\\n                                                      (addNewflag)=\\\"addNewBankAccount($event)\\\"\\r\\n                                                      (setBankData)=\\\"setBankAccount($event)\\\"\\r\\n                                                      (cancelBankAccountData)=\\\"onCancelBankAccountData()\\\"\\r\\n                                                      [isViewMode]=\\\"isViewMode\\\">\\r\\n\\r\\n                </atlas-counterparty-bank-account-list>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"49\\\">\\r\\n                <atlas-counterparty-bank-account-details #bankAccountDetailsComponent\\r\\n                                                         (setBankAccountData)=\\\"onSetBankAccountData($event)\\\"\\r\\n                                                         (deleteBankAccountData)=\\\"onBankAccountDeleted($event)\\\"\\r\\n                                                         (cancelBankAccountData)=\\\"onCancelBankAccountData()\\\"\\r\\n                                                         [bankAccountListLength]=\\\"bankAccountListLength\\\"\\r\\n                                                         [isViewMode]=\\\"isViewMode\\\">\\r\\n                </atlas-counterparty-bank-account-details>\\r\\n            </div>\\r\\n        </div>\\r\\n    </main>\\r\\n</div>\"","module.exports = \".width-card {\\n  width: 530px; }\\n\"","import { Component, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { CounterpartyBankAccountListComponent } from './bank-account-list/counterparty-bank-account-list.component';\r\nimport { CounterpartyBankAccountDetailsComponent } from './bank-account-details/counterparty-bank-account-details.component';\r\nimport { CounterpartyBankAccountDetails } from '../../../../../shared/entities/counterparty-bank-account-details.entity';\r\nimport { BankTypes } from '../../../../../shared/enums/bank-type.enum';\r\nimport { Status } from '../../../../../shared/enums/status.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-capture-form-bank-account-tab',\r\n    templateUrl: './counterparty-capture-form-bank-account-tab.component.html',\r\n    styleUrls: ['./counterparty-capture-form-bank-account-tab.component.scss']\r\n})\r\nexport class CounterpartyCaptureFormBankAccountTabComponent implements OnInit {\r\n    @ViewChild('bankAccountListComponent') bankAccountListComponent: CounterpartyBankAccountListComponent;\r\n    @ViewChild('bankAccountDetailsComponent') bankAccountDetailsComponent: CounterpartyBankAccountDetailsComponent;\r\n    bankAccountListLength: number;\r\n    bankAccountDisplay: CounterpartyBankAccountDetails;\r\n    bankAccountUpdate: CounterpartyBankAccountDetails;\r\n    @Input() isViewMode: boolean = false;\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        this.bankAccountListLength = this.bankAccountListComponent.bankAccountsData.length;\r\n\r\n    }\r\n\r\n    onSetBankAccountData(newBankAccount: CounterpartyBankAccountDetails) {\r\n        if (newBankAccount) {\r\n            newBankAccount.evalue = BankTypes[newBankAccount.bankTypeID]\r\n            newBankAccount.stausValue = Status[newBankAccount.bankAccountStatusID]\r\n            this.bankAccountListComponent.updatingBankAccountListOnEditing(newBankAccount);\r\n        }\r\n    }\r\n    addNewBankAccount(addNewData: boolean) {\r\n        if (addNewData) {\r\n            this.bankAccountDetailsComponent.newBankAccountForm = true;\r\n            this.bankAccountDetailsComponent.bankAccountFormGroup.reset();\r\n            this.bankAccountDetailsComponent.bankAccountIntermediary1FormGroup.reset();\r\n            this.bankAccountDetailsComponent.bankAccountIntermediary2FormGroup.reset();\r\n            this.bankAccountDetailsComponent.bankAccountListLength = this.bankAccountListComponent.bankAccountsData.length;\r\n            this.bankAccountDetailsComponent.bankAccountStatusCtrl.patchValue('1');\r\n        }\r\n    }\r\n    setBankAccount(data: CounterpartyBankAccountDetails) {\r\n        if (data) {\r\n            this.bankAccountDisplay = data;\r\n            this.bankAccountDetailsComponent.editBankAccount = true;\r\n\r\n            this.bankAccountDetailsComponent.getBankAccountData(this.bankAccountDisplay, this.bankAccountListComponent.isDeleteBankAccountDisabled);\r\n            this.bankAccountDetailsComponent.bankAccountListLength = this.bankAccountListComponent.bankAccountsData.length;\r\n        }\r\n    }\r\n\r\n    onBankAccountDeleted(deletedBankAccount: CounterpartyBankAccountDetails) {\r\n        if (deletedBankAccount) {\r\n            this.bankAccountListComponent.deletingBankAccountListOnDeletion(deletedBankAccount);\r\n        }\r\n    }\r\n    onCancelBankAccountData() {\r\n        this.bankAccountListComponent.isAddNewBankAccountDisabled = false;\r\n        this.bankAccountDetailsComponent.isNewBankAccount = true;\r\n    }\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"newContactForm || editContact\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>\\r\\n                <atlas-dropdown-select fxFlex='20%'\\r\\n                                       label=\\\"Title\\\"\\r\\n                                       [fieldControl]=\\\"titleDesignationCtrl\\\"\\r\\n                                       isEditable=\\\"true\\\"\\r\\n                                       [options]=\\\"options\\\"\\r\\n                                       [displayProperty]=\\\"displayProperty\\\"\\r\\n                                       [selectProperties]=\\\"selectProperties\\\"></atlas-dropdown-select>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n                <atlas-form-input fxFlex=\\\"50%\\\"\\r\\n                                  [fieldControl]=\\\"contactNameCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [required]=\\\"contactNameCtrl.isRequired\\\"\\r\\n                                  label=\\\"Contact Name\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n            </h2>\\r\\n\\r\\n            <div fxFlex=\\\"20%\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <button [disabled]=\\\"newContactForm || isDeleteDisabled || isViewMode\\\"\\r\\n                        mat-raised-button\\r\\n                        (click)='deleteContact()'\\r\\n                        type=\\\"button\\\">\\r\\n                    DELETE\\r\\n                </button>\\r\\n            </div>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"surNameCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Sur Name\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"firstNameCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"First Name\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"extraInitialsCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Extra Initials\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"60%\\\"\\r\\n                                  [fieldControl]=\\\"jobTitleRelationShipCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Job Title/Relationship\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMapforJobTitleRelationShip\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"40%\\\"\\r\\n                                  [fieldControl]=\\\"domainCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Domain\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMapforDomain\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">Address\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"100%\\\"\\r\\n                                  [fieldControl]=\\\"address1Ctrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Address 1\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"100%\\\"\\r\\n                                  [fieldControl]=\\\"address2Ctrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Address 2\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"zipCodeCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  style=\\\"margin-right: 10px\\\"\\r\\n                                  label=\\\"Zip Code\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"cityCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  style=\\\"margin-right: 10px\\\"\\r\\n                                  label=\\\"City\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Country\\\"\\r\\n                           [matAutocomplete]=\\\"countryCode\\\"\\r\\n                           [formControl]=\\\"countryCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-autocomplete #countryCode=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                        <mat-option *ngFor=\\\"let country of filteredCountry\\\"\\r\\n                                    [value]=\\\"country.description\\\">\\r\\n                            {{country.countryId}} | {{country.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"countryCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"countryCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                    <mat-error *ngIf=\\\"countryCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"100%\\\"\\r\\n                                  [fieldControl]=\\\"emailAddressCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Email Address\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"phoneNumberCtrl\\\"\\r\\n                                  (keypress)=\\\"phoneNoValidation($event)\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMapforPhoneNumnber\\\"\\r\\n                                  label=\\\"Phone No.\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"mobilePhoneNumberCtrl\\\"\\r\\n                                  (keypress)=\\\"phoneNoValidation($event)\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  label=\\\"Mobile Phone No.\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"privatePhoneNumberCtrl\\\"\\r\\n                                  (keypress)=\\\"phoneNoValidation($event)\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMapforPrivatePhoneNumber\\\"\\r\\n                                  label=\\\"Private Phone No.\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <mat-form-field>\\r\\n                    <textarea matInput\\r\\n                              rows=\\\"5\\\"\\r\\n                              placeholder=\\\"Communications\\\"\\r\\n                              [formControl]='communicationsCtrl'></textarea>\\r\\n                    <mat-error *ngIf=\\\"communicationsCtrl.hasError('maxlength')\\\">\\r\\n                        Communications memorandum should be at most 2000 Characters long.\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\">\\r\\n                <div class=\\\"btn-container\\\">\\r\\n                    <div fxFlex=\\\"50\\\"\\r\\n                         fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                [disabled]=\\\"isViewMode\\\"\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                            cancel\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"50\\\"\\r\\n                         fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start end\\\">\\r\\n                        <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n                        <button mat-raised-button\\r\\n                                [disabled]=\\\"isViewMode\\\"\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n                            save\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\\r\\n<atlas-empty-state *ngIf=\\\"!newContactForm && !editContact\\\"\\r\\n                   title=\\\"Want to see the Detail of a Contact\\\"\\r\\n                   [message]=\\\"contactEmptyMessage\\\"></atlas-empty-state>\"","module.exports = \"\"","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control'\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component'\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service'\r\nimport { Contact } from '../../../../../../shared/entities/contact.entity';\r\nimport { TitleDesignation } from '../../../../../../shared/enums/title-designation';\r\nimport { TitleDesignationTypes } from '../../../../../../shared/entities/title-designation.entity';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service'\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { MatDialog } from '@angular/material';\r\nimport { UtilService, nameof } from '../../../../../../shared/services/util.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { Country } from '../../../../../../shared/entities/country.entity';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive'\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-contact-detail-card',\r\n    templateUrl: './contact-detail-card.component.html',\r\n    styleUrls: ['./contact-detail-card.component.scss']\r\n})\r\nexport class ContactDetailCardComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly cancelContact = new EventEmitter<any>();\r\n    contactNameCtrl = new AtlasFormControl('ContactName');\r\n    titleDesignationCtrl = new AtlasFormControl('TitleDesignation');\r\n    surNameCtrl = new AtlasFormControl('SurName');\r\n    firstNameCtrl = new AtlasFormControl('FirstName');\r\n    extraInitialsCtrl = new AtlasFormControl('ExtraInitials');\r\n    jobTitleRelationShipCtrl = new AtlasFormControl('JobTitleRelationShip');\r\n    domainCtrl = new AtlasFormControl('Domain');\r\n    address1Ctrl = new AtlasFormControl('Address1');\r\n    address2Ctrl = new AtlasFormControl('Address2');\r\n    zipCodeCtrl = new AtlasFormControl('ZipCode');\r\n    cityCtrl = new AtlasFormControl('City');\r\n    countryCtrl = new AtlasFormControl('Country');\r\n    emailAddressCtrl = new AtlasFormControl('EmailAddress');\r\n    phoneNumberCtrl = new AtlasFormControl('PhoneNumber');\r\n    mobilePhoneNumberCtrl = new AtlasFormControl('MobilePhoneNumber');\r\n    privatePhoneNumberCtrl = new AtlasFormControl('PrivatePhoneNumber');\r\n    communicationsCtrl = new AtlasFormControl('Communications');\r\n\r\n    displayProperty: string = 'titleDesignation';\r\n    selectProperties: string[] = ['titleDesignation'];\r\n    options: TitleDesignationTypes[];\r\n    titleToView: TitleDesignationTypes = new TitleDesignationTypes();\r\n\r\n    newContactForm: boolean = false;\r\n    contactToDisplay: Contact;\r\n    @Output() contactCreated = new EventEmitter<Contact>();\r\n    @Output() contactDeleted = new EventEmitter<Contact>();\r\n    @Input() contactListLength: number;\r\n    @Input() isViewMode: boolean = false;\r\n    contactEmptyMessage: string = \"Start by Selecting One\";\r\n    editContact: boolean = false;\r\n    isEditMode: boolean = false;\r\n    titleValue: string;\r\n    isNewContact: boolean = true;\r\n    filteredCountry: Country[];\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Countries,\r\n    ];\r\n    @Input() counterPartyId: number;\r\n    isDeleted: boolean = false;\r\n    isDeleteDisabled: boolean = false;\r\n    inputErrorMap: Map<string, string> = new Map();\r\n    inputErrorMapforPhoneNumnber: Map<string, string> = new Map();\r\n    inputErrorMapforJobTitleRelationShip: Map<string, string> = new Map();\r\n    inputErrorMapforDomain: Map<string, string> = new Map();\r\n    inputErrorMapforPrivatePhoneNumber: Map<string, string> = new Map();\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService, protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.inputErrorMap.set('maxlength', 'Maximum 10 digits Allowed');\r\n        this.inputErrorMapforPhoneNumnber.set('maxlength', 'Maximum 16 digits Allowed');\r\n        this.inputErrorMapforJobTitleRelationShip.set('maxlength', 'Maximum 50 digits Allowed');\r\n        this.inputErrorMapforDomain.set('maxlength', 'Maximum 50 digits Allowed');\r\n        this.inputErrorMapforPrivatePhoneNumber.set('maxlenght', 'Maximum 16 didgits Allowed');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isEditMode = true;\r\n\r\n        if (!this.isEditMode) {\r\n            this.formGroup.disable();\r\n        }\r\n        this.options = [\r\n            {\r\n                titleId: TitleDesignation.Mr,\r\n                titleDesignation: 'Mr.',\r\n            },\r\n            {\r\n                titleId: TitleDesignation.Mrs,\r\n                titleDesignation: 'Mrs.',\r\n            },\r\n            {\r\n                titleId: TitleDesignation.Ms,\r\n                titleDesignation: 'Ms.',\r\n            },\r\n        ];\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n                this.filteredCountry = this.masterdata.countries;\r\n            });\r\n        this.countryCtrl.valueChanges.subscribe((input) => {\r\n\r\n            this.filteredCountry = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.countries,\r\n                ['countryId', 'description'],\r\n            );\r\n        });\r\n        this.setValidators();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            contactNameCtrl: this.contactNameCtrl,\r\n            titleDesignationCtrl: this.titleDesignationCtrl,\r\n            surNameCtrl: this.surNameCtrl,\r\n            firstNameCtrl: this.firstNameCtrl,\r\n            extraInitialsCtrl: this.extraInitialsCtrl,\r\n            jobTitleRelationShipCtrl: this.jobTitleRelationShipCtrl,\r\n            domainCtrl: this.domainCtrl,\r\n            address1Ctrl: this.address1Ctrl,\r\n            address2Ctrl: this.address2Ctrl,\r\n            zipCodeCtrl: this.zipCodeCtrl,\r\n            cityCtrl: this.cityCtrl,\r\n            countryCtrl: this.countryCtrl,\r\n            emailAddressCtrl: this.emailAddressCtrl,\r\n            phoneNumberCtrl: this.phoneNumberCtrl,\r\n            mobilePhoneNumberCtrl: this.mobilePhoneNumberCtrl,\r\n            privatePhoneNumberCtrl: this.privatePhoneNumberCtrl,\r\n            communicationsCtrl: this.communicationsCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n\r\n    setValidators() {\r\n        this.contactNameCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z ]*$')]),\r\n        );\r\n        this.firstNameCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z ]*$')])\r\n        );\r\n        this.jobTitleRelationShipCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.maxLength(50), Validators.pattern('^[a-zA-Z ]*$')])\r\n        );\r\n        this.domainCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.maxLength(50), Validators.pattern('^[a-zA-Z ]*$')])\r\n        );\r\n        this.phoneNumberCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(16)])\r\n        );\r\n        this.privatePhoneNumberCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.maxLength(16)])\r\n        );\r\n        this.mobilePhoneNumberCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.maxLength(10)])\r\n        );\r\n        this.emailAddressCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.com')])\r\n        );\r\n\r\n        this.surNameCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z ]*$')])\r\n        );\r\n\r\n        this.communicationsCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(2000)]),\r\n        );\r\n\r\n        this.extraInitialsCtrl.setValidators(\r\n            Validators.compose([Validators.pattern('^[a-zA-Z ]*$')])\r\n        );\r\n\r\n        this.countryCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.countries,\r\n                    nameof<Country>('description'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    phoneNoValidation(event: any) {\r\n        const pattern = /[0-9]/;\r\n        let inputChar = String.fromCharCode(event.charCode);\r\n        if (!pattern.test(inputChar)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    deleteContact() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'Do you confirm the deletion of Contact ' + this.contactNameCtrl.value,\r\n                okButton: 'Yes',\r\n                cancelButton: 'No',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.contactDeleted.emit(this.contactToDisplay);\r\n                this.formGroup.reset();\r\n                this.newContactForm = false;\r\n                this.editContact = false;\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    setContactInformationOnDisplayCard(contact: Contact, deletionFlag: boolean) {\r\n        if (contact) {\r\n            this.contactToDisplay = contact;\r\n            if (contact.randomId) {\r\n                this.isNewContact = false;\r\n            }\r\n            this.firstNameCtrl.patchValue(contact.firstName);\r\n            if (contact.title) {\r\n                this.titleDesignationCtrl.patchValue(this.options.find(item => item.titleId === contact.title));\r\n            }\r\n            this.contactNameCtrl.patchValue(contact.contactName);\r\n            this.surNameCtrl.patchValue(contact.surname);\r\n            this.extraInitialsCtrl.patchValue(contact.extraInitials);\r\n            this.jobTitleRelationShipCtrl.patchValue(contact.jobRole);\r\n            this.domainCtrl.patchValue(contact.domain);\r\n            this.address1Ctrl.patchValue(contact.address1);\r\n            this.address2Ctrl.patchValue(contact.address2);\r\n            this.zipCodeCtrl.patchValue(contact.zipCode);\r\n            if (contact.countryId) {\r\n                this.countryCtrl.patchValue(this.filteredCountry.find(country => country.countryId === contact.countryId).description);\r\n            }\r\n            this.cityCtrl.patchValue(contact.city);\r\n            this.emailAddressCtrl.patchValue(contact.email);\r\n            this.phoneNumberCtrl.patchValue(contact.phoneNo);\r\n            this.privatePhoneNumberCtrl.patchValue(contact.privatePhoneNo);\r\n            this.mobilePhoneNumberCtrl.patchValue(contact.mobilePhoneNo);\r\n            this.communicationsCtrl.patchValue(contact.communications);\r\n\r\n        }\r\n        if (deletionFlag = true) {\r\n            this.newContactForm = false;\r\n        }\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (this.formGroup.valid) {\r\n            let contact = <Contact>{\r\n                contactId: this.contactToDisplay ? this.contactToDisplay.contactId : null,\r\n                randomId: this.isNewContact ? this.contactListLength + 1 : this.contactToDisplay.randomId,\r\n                firstName: this.firstNameCtrl.value,\r\n                title: this.titleDesignationCtrl.value ? this.titleDesignationCtrl.value.titleId : null,\r\n                contactName: this.contactNameCtrl.value,\r\n                surname: this.surNameCtrl.value,\r\n                extraInitials: this.extraInitialsCtrl.value,\r\n                jobRole: this.jobTitleRelationShipCtrl.value,\r\n                domain: this.domainCtrl.value,\r\n                address1: this.address1Ctrl.value,\r\n                address2: this.address2Ctrl.value,\r\n                zipCode: this.zipCodeCtrl.value,\r\n                city: this.cityCtrl.value,\r\n                countryId: this.countryCtrl.value ? this.filteredCountry.find(country => country.description === this.countryCtrl.value).countryId : '',\r\n                email: this.emailAddressCtrl.value,\r\n                phoneNo: this.phoneNumberCtrl.value,\r\n                mobilePhoneNo: this.mobilePhoneNumberCtrl.value,\r\n                privatePhoneNo: this.privatePhoneNumberCtrl.value,\r\n                communications: this.communicationsCtrl.value,\r\n                counterpartyId: this.counterPartyId,\r\n                main: false,\r\n                isDeleted: this.isDeleted,\r\n            };\r\n            this.contactCreated.emit(contact);\r\n            this.formGroup.reset();\r\n            this.isNewContact = true;\r\n            this.newContactForm = false;\r\n            this.editContact = false;\r\n        }\r\n\r\n        else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.formGroup.reset();\r\n        this.newContactForm = false;\r\n        this.editContact = false;\r\n        this.cancelContact.emit();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Counterparty Contacts</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"center end\\\">\\r\\n            <mat-nav-list *ngFor=\\\"let contact of contactData\\\">\\r\\n                <div *ngIf=\\\"!contact.isDeleted\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxFlex=\\\"100%\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"left start\\\">\\r\\n                            <mat-list-item style=\\\"min-width: 450px;\\\"\\r\\n                                           (click)=\\\"onOpenContact(contact)\\\">\\r\\n                                <div fxLayout=\\\"column\\\"\\r\\n                                     fxFlex=\\\"100\\\">\\r\\n                                    <div fxLayout=\\\"row\\\"\\r\\n                                         fxLayoutAlign=\\\"left start\\\"\\r\\n                                         fxLayoutGap=\\\"35px\\\">\\r\\n                                        <div fxLayout=\\\"column\\\">\\r\\n                                            <div fxLayout=\\\"row\\\">\\r\\n                                                <b>Title</b>\\r\\n                                            </div>\\r\\n                                            <div fxLayout=\\\"row\\\">\\r\\n                                                {{ contact.titleValue }}\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                        <div fxLayout=\\\"column\\\">\\r\\n                                            <div fxLayout=\\\"row\\\">\\r\\n                                                <b>First Name</b>\\r\\n                                            </div>\\r\\n                                            <div fxLayout=\\\"row\\\">\\r\\n                                                {{ contact.firstName }}\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <mat-divider class=\\\"charter-creation-divider\\\"></mat-divider>\\r\\n                            </mat-list-item>\\r\\n                            <mat-list-item (click)=\\\"onSetContactFavorite(contact)\\\">\\r\\n                                <div fxLayout=\\\"column\\\">\\r\\n                                    <mat-icon [ngClass]=\\\"contact.isFavorite ? 'heart-saved' : 'heart-not-saved'\\\">\\r\\n                                        {{ contact.isFavorite ? 'favorite' : 'favorite_border' }}\\r\\n                                    </mat-icon>\\r\\n                                </div>\\r\\n                            </mat-list-item>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n            </mat-nav-list>\\r\\n            <div class=\\\"btn-container\\\"></div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button mat-raised-button\\r\\n                        type=\\\"button\\\"\\r\\n                        [disabled]=\\\"isContactListDataClicked || isViewMode\\\"\\r\\n                        (click)=\\\"onAddNewContact()\\\">\\r\\n                    ADD NEW Contact\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { Contact } from '../../../../../../shared/entities/contact.entity'\r\nimport { TitleDesignationTypes } from '../../../../../../shared/entities/title-designation.entity';\r\nimport { TitleDesignation } from '../../../../../../shared/enums/title-designation';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-contact-card',\r\n    templateUrl: './contact-card.component.html',\r\n    styleUrls: ['./contact-card.component.scss']\r\n})\r\nexport class ContactCardComponent implements OnInit {\r\n    contactData: Contact[] = [];\r\n    @Output() addNewContact = new EventEmitter<any>();\r\n    @Output() contactDetails = new EventEmitter<any>();\r\n    isContactListDataClicked: boolean = false;\r\n    isDeleteButtonEnabled: boolean = false;\r\n    @Input() isViewMode: boolean = false;\r\n    options: TitleDesignationTypes[];\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        this.options = [\r\n            {\r\n                titleId: TitleDesignation.Mr,\r\n                titleDesignation: 'Mr.',\r\n            },\r\n            {\r\n                titleId: TitleDesignation.Mrs,\r\n                titleDesignation: 'Mrs.',\r\n            },\r\n            {\r\n                titleId: TitleDesignation.Ms,\r\n                titleDesignation: 'Ms.',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onOpenContact(contact: Contact) {\r\n        this.isContactListDataClicked = true\r\n        this.isDeleteButtonEnabled = true\r\n        this.contactDetails.emit(contact);\r\n    }\r\n\r\n    onAddNewContact() {\r\n        this.addNewContact.emit(true);\r\n    }\r\n\r\n    updatingContactListOnEditing(contactToBeUpdated: Contact) {\r\n        if (contactToBeUpdated) {\r\n            let index = -1\r\n            index = this.contactData.findIndex(contact => contact.randomId === contactToBeUpdated.randomId);\r\n            if (index != -1) {\r\n                this.contactData.splice(index, 1, contactToBeUpdated);\r\n            }\r\n            else {\r\n                this.contactData.push(contactToBeUpdated);\r\n            }\r\n        }\r\n        this.isContactListDataClicked = false;\r\n    }\r\n\r\n    updatingContactListOnDeletion(contactToBeDeleted: Contact) {\r\n        if (contactToBeDeleted) {\r\n            let index = -1\r\n            index = this.contactData.findIndex(contact => contact.randomId === contactToBeDeleted.randomId);\r\n            if (index != -1) {\r\n                contactToBeDeleted.isDeleted = true;\r\n                contactToBeDeleted.isDeactivated = true;\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        }\r\n        this.isContactListDataClicked = false;\r\n    }\r\n\r\n    onSetContactFavorite(contactFavorite: Contact) {\r\n        if (contactFavorite && !this.isViewMode) {\r\n            this.contactData.forEach((element) => {\r\n                if (element.randomId === contactFavorite.randomId) {\r\n                    element.isFavorite = true;\r\n                }\r\n                else {\r\n                    element.isFavorite = false;\r\n                }\r\n            });\r\n        }\r\n        this.isContactListDataClicked = false;\r\n    }\r\n\r\n    populateValue() {\r\n        if (this.contactData) {\r\n            this.contactData.forEach((contact) => {\r\n                if (contact.title) {\r\n                    contact.titleValue = this.options.find((c) => c.titleId == contact.title).titleDesignation;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <main>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\"\\r\\n             class='charter-creation-margin'>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"48\\\">\\r\\n                <atlas-counterparty-contact-card #contactCardComponent\\r\\n                                                 (addNewContact)=\\\"onAddNewContactClicked($event)\\\"\\r\\n                                                 (contactDetails)=\\\"onContactListClicked($event)\\\"\\r\\n                                                 (cancelContact)=\\\"onCancelContact()\\\"\\r\\n                                                 [isViewMode]=\\\"isViewMode\\\">\\r\\n                </atlas-counterparty-contact-card>\\r\\n\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"49\\\">\\r\\n                <atlas-counterparty-contact-detail-card #contactDetailCardComponent\\r\\n                                                        (contactCreated)=\\\"onNewContactCreated($event)\\\"\\r\\n                                                        (contactDeleted)=\\\"onContactDeleted($event)\\\"\\r\\n                                                        (cancelContact)=\\\"onCancelContact()\\\"\\r\\n                                                        [contactListLength]=\\\"contactListLength\\\"\\r\\n                                                        [counterPartyId]=\\\"counterPartyId\\\"\\r\\n                                                        [isViewMode]=\\\"isViewMode\\\">\\r\\n                </atlas-counterparty-contact-detail-card>\\r\\n            </div>\\r\\n        </div>\\r\\n    </main>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { Contact } from '../.././../../../shared/entities/contact.entity';\r\nimport { ContactDetailCardComponent } from './contact-detail-card/contact-detail-card.component';\r\nimport { ContactCardComponent } from './contact-list-card/contact-card.component';\r\nimport { TitleDesignation } from '../.././../../../shared/enums/title-designation';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { FormConfigurationProviderService } from '../.././../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../.././../../../shared/components/base-form-component/base-form-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-capture-form-contact-tab',\r\n    templateUrl: './counterparty-capture-form-contact-tab.component.html',\r\n    styleUrls: ['./counterparty-capture-form-contact-tab.component.scss']\r\n})\r\nexport class CounterpartyCaptureFormContactTabComponent extends BaseFormComponent implements OnInit {\r\n\r\n    newContact: boolean = false;\r\n    contactToDisplay: Contact;\r\n    updatedContact: Contact;\r\n    contactListLength: number;\r\n    counterPartyId: number;\r\n    @Input() isViewMode: boolean = false;\r\n    @ViewChild('contactDetailCardComponent') contactDetailCardComponent: ContactDetailCardComponent\r\n    @ViewChild('contactCardComponent') contactCardComponent: ContactCardComponent;\r\n    constructor(private route: ActivatedRoute, protected formBuilder: FormBuilder, protected formConfigurationProvider: FormConfigurationProviderService, ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.contactListLength = this.contactCardComponent.contactData.length;\r\n        this.counterPartyId = Number(this.route.snapshot.paramMap.get('counterpartyID'));\r\n    }\r\n\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            contactDetailCardComponent: this.contactDetailCardComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n\r\n    onAddNewContactClicked(value: boolean) {\r\n        if (value === true) {\r\n            this.contactDetailCardComponent.newContactForm = true;\r\n            this.contactDetailCardComponent.formGroup.reset();\r\n            this.contactDetailCardComponent.contactListLength = this.contactCardComponent.contactData.length;\r\n        }\r\n    }\r\n    onContactListClicked(contact: Contact) {\r\n        if (contact) {\r\n            this.contactToDisplay = contact;\r\n            this.contactDetailCardComponent.editContact = true;\r\n            this.contactDetailCardComponent.setContactInformationOnDisplayCard(this.contactToDisplay, this.contactCardComponent.isDeleteButtonEnabled);\r\n            this.contactDetailCardComponent.contactListLength = this.contactCardComponent.contactData.length;\r\n        }\r\n    }\r\n    onNewContactCreated(newContact: Contact) {\r\n        if (newContact) {\r\n            newContact.titleValue = TitleDesignation[newContact.title];\r\n            this.contactCardComponent.updatingContactListOnEditing(newContact);\r\n        }\r\n    }\r\n    onContactDeleted(deletedContact: Contact) {\r\n        if (deletedContact) {\r\n            this.contactCardComponent.updatingContactListOnDeletion(deletedContact);\r\n        }\r\n\r\n    }\r\n    onCancelContact() {\r\n        this.contactCardComponent.isContactListDataClicked = false;\r\n        this.contactDetailCardComponent.isNewContact = true;\r\n    }\r\n}\r\n","module.exports = \"<mat-sidenav-container>\\r\\n    <mat-sidenav-content>\\r\\n        <div *ngIf=\\\"isLoading\\\">\\r\\n            <mat-card>\\r\\n                <h2>Loading</h2>\\r\\n                <div class=\\\"custom-line-title\\\"></div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"center center\\\"\\r\\n                     fxLayoutWrap\\r\\n                     fxLayoutGap=\\\"20px\\\">\\r\\n                    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <form [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\"\\r\\n              [formGroup]=\\\"captureCounterpartyFormGroup\\\">\\r\\n            <atlas-counterparty-header #headerComponent\\r\\n                                       [isCreateMode]=\\\"isCreateMode\\\"\\r\\n                                       [isEditMode]=\\\"isEditMode\\\">\\r\\n            </atlas-counterparty-header>\\r\\n            <atlas-counterparty-management-menu-bar #menuComponent\\r\\n                                                    (localViewMode)=\\\"onLocalViewModeCalled($event)\\\"\\r\\n                                                    (saveMethod)=\\\"OnSaveMethodCalled()\\\"\\r\\n                                                    [isCreateMode]=\\\"isCreateMode\\\"\\r\\n                                                    [isViewMode]=\\\"isViewMode\\\">\\r\\n            </atlas-counterparty-management-menu-bar>\\r\\n\\r\\n            <div class=\\\"main-container\\\">\\r\\n                <main>\\r\\n\\r\\n                    <mat-tab-group dynamicHeight\\r\\n                                   [(selectedIndex)]=selectedTab\\r\\n                                   class=\\\"bright-tab\\\">\\r\\n                        <mat-tab label=\\\"MAIN\\\">\\r\\n                            <atlas-counterparty-capture-form-main-tab #mainTabComponent\\r\\n                                                                      [isViewMode]=\\\"isViewMode\\\"\\r\\n                                                                      [isEditMode]=\\\"isEditMode\\\"\\r\\n                                                                      [mappedData]=\\\"mappedData\\\">\\r\\n                            </atlas-counterparty-capture-form-main-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"ADDRESS\\\">\\r\\n                            <atlas-counterparty-capture-form-address-tab #addressTabComponent\\r\\n                                                                         [isViewMode]=\\\"isViewMode\\\">\\r\\n                            </atlas-counterparty-capture-form-address-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"CONTACT\\\">\\r\\n                            <atlas-counterparty-capture-form-contact-tab #contactTabComponent\\r\\n                                                                         [isViewMode]=\\\"isViewMode\\\">\\r\\n                            </atlas-counterparty-capture-form-contact-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"BANK ACCOUNTS\\\">\\r\\n                            <atlas-counterparty-capture-form-bank-account-tab #bankAccountTabComponent\\r\\n                                                                              [isViewMode]=\\\"isViewMode\\\">\\r\\n                            </atlas-counterparty-capture-form-bank-account-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"TAX INFO\\\">\\r\\n                            <atlas-counterparty-capture-form-tax-info-tab #taxInfoTabComponent\\r\\n                                                                          [isViewMode]=\\\"isViewMode\\\">\\r\\n                            </atlas-counterparty-capture-form-tax-info-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"REPORTS\\\">\\r\\n                            <atlas-counterparty-capture-form-report-tab #reportTabComponent\\r\\n                                                                        [counterPartyId]=\\\"counterPartyId\\\"\\r\\n                                                                        [isCreateMode]=\\\"isCreateMode\\\">\\r\\n                            </atlas-counterparty-capture-form-report-tab>\\r\\n                        </mat-tab>\\r\\n                    </mat-tab-group>\\r\\n                </main>\\r\\n\\r\\n                <mat-divider class=\\\"trade-capture-divider\\\"></mat-divider>\\r\\n                <div class=\\\"btn-container\\\">\\r\\n                    <div fxFlex=\\\"50\\\"\\r\\n                         fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start start\\\">\\r\\n                        <button mat-button\\r\\n                                type=\\\"button\\\"\\r\\n                                [disabled]=\\\"isShow\\\"\\r\\n                                (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                            cancel\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"50\\\"\\r\\n                         fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start end\\\">\\r\\n                        <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n                        <button mat-raised-button\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"onSaveButtonClicked()\\\"\\r\\n                                [disabled]=\\\"saveInProgress || isViewMode\\\">\\r\\n                            save\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-sidenav-content>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</mat-sidenav-container>\"","module.exports = \"\"","import { Component, OnDestroy, OnInit, ViewChild, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { CounterpartyCaptureFormMainTabComponent } from './main-tab/counterparty-capture-form-main-tab.component';\r\nimport { CounterpartyCaptureFormAddressTabComponent } from './address-tab/counterparty-capture-form-address-tab.component';\r\nimport { CounterpartyCaptureFormContactTabComponent } from './contact-tab/counterparty-capture-form-contact-tab.component';\r\nimport { CounterpartyCaptureFormBankAccountTabComponent } from './bank-account-tab/counterparty-capture-form-bank-account-tab.component';\r\nimport { CounterpartyCaptureFormTaxInfoTabComponent } from './tax-info-tab/counterparty-capture-form-tax-info-tab.component';\r\nimport { CounterpartyCaptureFormReportTabComponent } from './report-tab/counterparty-capture-form-report-tab.component';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { CounterpartyHeaderComponent } from './counterparty-header/counterparty-header.component';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { PermissionLevels } from './../../../../shared/enums/permission-level.enum';\r\nimport { CounterpartyManagementMenuBarComponent } from './counterparty-management-menu-bar/counterparty-management-menu-bar.component';\r\nimport { CounterpartyAddress } from './../../../../shared/entities/counterparty-address.entity';\r\nimport { MasterData } from './../../../../shared/entities/masterdata.entity';\r\nimport { Company } from './../../../../shared/entities/company.entity';\r\nimport { MdmCategoryAccountTypeMapping } from './../../../../shared/mdmCategory-account-mapping-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-capture',\r\n    templateUrl: './counterparty-capture.component.html',\r\n    styleUrls: ['./counterparty-capture.component.scss']\r\n})\r\nexport class CounterpartyCaptureComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('headerComponent') headerComponent: CounterpartyHeaderComponent;\r\n    @ViewChild('menuComponent') menuComponent: CounterpartyManagementMenuBarComponent;\r\n    @ViewChild('mainTabComponent') mainTabComponent: CounterpartyCaptureFormMainTabComponent;\r\n    @ViewChild('addressTabComponent') addressTabComponent: CounterpartyCaptureFormAddressTabComponent;\r\n    @ViewChild('contactTabComponent') contactTabComponent: CounterpartyCaptureFormContactTabComponent;\r\n    @ViewChild('bankAccountTabComponent') bankAccountTabComponent: CounterpartyCaptureFormBankAccountTabComponent;\r\n    @ViewChild('taxInfoTabComponent') taxInfoTabComponent: CounterpartyCaptureFormTaxInfoTabComponent;\r\n    @ViewChild('reportTabComponent') reportTabComponent: CounterpartyCaptureFormReportTabComponent;\r\n\r\n    public selectedTab: number = 0;\r\n    isLoading: boolean = false;\r\n    isShow: boolean = true;\r\n    isEdit: boolean = false;\r\n    saveInProgress: boolean;\r\n    counterPartyId: number;\r\n    company: string;\r\n    creationDate: string;\r\n    createdBy: string;\r\n    modifiedDate: string;\r\n    modifiedBy: string;\r\n    captureCounterpartyFormGroup: FormGroup;\r\n    statusClassApplied: string;\r\n    counterpartyStatus: string = '';\r\n    onValidationState = false;\r\n    counterPartyStatusTypeCtrl = new AtlasFormControl('counterPartyStatusTypeCtrl');\r\n    model: Counterparty;\r\n    subscriptions: Subscription[] = [];\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    isCreateMode: boolean = false;\r\n    isEditMode: boolean = false;\r\n    isViewMode: boolean = false;\r\n    isEditExceptionPrivilege: boolean = false;\r\n    isReadWritePermission: boolean = false;\r\n    mainAddress: any;\r\n    counterpartyAddresses: CounterpartyAddress[] = [];\r\n    companyId: number;\r\n    masterdata: MasterData;\r\n    filteredCompany: Company[];\r\n    mappedData: MdmCategoryAccountTypeMapping[] = [];\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        private cdr: ChangeDetectorRef,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private titleService: TitleService,\r\n        protected dialog: MatDialog,\r\n        protected masterDataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        private companyManager: CompanyManagerService,\r\n        private router: Router,\r\n        protected snackbarService: SnackbarService,\r\n        protected securityService: SecurityService, private authorizationService: AuthorizationService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isLoading = true;\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCompany = this.masterdata.companies;\r\n        this.companyId = this.filteredCompany.find((company) => company.companyId === this.company).id;\r\n\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Referential')) {\r\n\r\n                let permissionLevel: number;\r\n                permissionLevel = this.authorizationService.getPermissionLevel(this.company, 'TradingAndExecution', 'Referential');\r\n                if (permissionLevel == PermissionLevels.ReadWrite) {\r\n                    this.menuComponent.isEditCounterpartyPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'TradingAndExecution');\r\n                }\r\n            }\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Referential')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'TradingAndExecution')) {\r\n                this.isEditExceptionPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'EditCounterparty');\r\n            }\r\n            if (!this.authorizationService.isAdministrator(this.company)) {\r\n                this.addressTabComponent.addressDetailComponent.isDeleteDisabled = true;\r\n                this.bankAccountTabComponent.bankAccountDetailsComponent.isDeleteDisabled = true;\r\n                this.contactTabComponent.contactDetailCardComponent.isDeleteDisabled = true;\r\n                this.taxInfoTabComponent.isDeleteDisabled = true;\r\n            }\r\n            else {\r\n                this.mainTabComponent.informationCardComponent.isAdmin = true;\r\n                this.mainTabComponent.thirdSystemCodesCardComponent.isAdmin = true;\r\n                this.headerComponent.isAdmin = true;\r\n                this.addressTabComponent.addressDetailComponent.isDeleteDisabled = false;\r\n                this.bankAccountTabComponent.bankAccountDetailsComponent.isDeleteDisabled = false;\r\n                this.contactTabComponent.contactDetailCardComponent.isDeleteDisabled = false;\r\n                this.taxInfoTabComponent.isDeleteDisabled = false;\r\n            }\r\n        });\r\n\r\n        this.captureCounterpartyFormGroup = this.formBuilder.group({\r\n            headerGroup: this.headerComponent.getFormGroup(),\r\n            mainTabComponent: this.mainTabComponent.getFormGroup(),\r\n            addressTabComponent: this.addressTabComponent.getFormGroup(),\r\n            contactTabComponent: this.contactTabComponent.getFormGroup(),\r\n        });\r\n\r\n        if (this.route.snapshot.data.formId === 'CounterPartyCapture') {\r\n            this.isCreateMode = true;\r\n        }\r\n        if (this.route.snapshot.data.formId === 'CounterPartyDisplay') {\r\n            this.isViewMode = true;\r\n            this.counterPartyId = Number(this.route.snapshot.paramMap.get('counterpartyID'));\r\n            this.captureCounterpartyFormGroup.disable();\r\n        }\r\n        if (this.route.snapshot.data.formId === 'CounterPartyEdit') {\r\n            this.counterPartyId = Number(this.route.snapshot.paramMap.get('counterpartyID'));\r\n            this.isEditMode = true;\r\n        }\r\n\r\n        if (this.counterPartyId && this.counterPartyId > 0) {\r\n            if (!this.isViewMode) {\r\n                this.titleService.setTitle(\"Counterparty Edit\");\r\n            } else {\r\n                this.titleService.setTitle(\"Counterparty View\");\r\n            }\r\n            this.masterDataService\r\n                .getCounterpartyById(this.counterPartyId)\r\n                .subscribe((data) => {\r\n                    let counterparty: any = data;\r\n                    if (counterparty) {\r\n                        this.fillValues(counterparty);\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            this.isLoading = false;\r\n            this.titleService.setTitle(\"Capture Counterparty\");\r\n        }\r\n\r\n        this.masterDataService\r\n            .getMdmCategoryAccountTypeMapping()\r\n            .subscribe((data) => {\r\n                this.mappedData = data.value;\r\n            });\r\n\r\n\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    fillValues(counterparty: Counterparty) {\r\n        this.model = counterparty;\r\n        this.headerComponent.accountRefCtrl.patchValue(this.model.counterpartyCode);\r\n        this.headerComponent.accountTitleCtrl.patchValue(this.model.description);\r\n        this.headerComponent.creationDateCtrl.patchValue(counterparty.createdDateTime.toDateString());\r\n        this.headerComponent.createdByCtrl.patchValue(counterparty.createdBy);\r\n        this.model.counterpartyCompanies.forEach((comp) => {\r\n\r\n            if (comp.companyId === this.companyId) {\r\n                this.headerComponent.isDeactivated = comp.isDeactivated;\r\n            }\r\n        });\r\n\r\n        if (counterparty.modifiedDateTime) {\r\n            this.headerComponent.lastAmendedByCtrl.patchValue(counterparty.modifiedDateTime.toDateString());\r\n            this.headerComponent.isShowLastAmendedBy = true;\r\n            this.headerComponent.modifiedDateCtrl.patchValue(counterparty.modifiedBy);\r\n        }\r\n\r\n        this.model.associatedCompanies = this.model.counterpartyCompanies;\r\n        this.mainTabComponent.informationCardComponent.populateValue(this.model);\r\n        this.mainTabComponent.informationCardComponent.nameCtrl.patchValue(this.model.description);\r\n        this.mainTabComponent.informationCardComponent.accountTypeCtrl.patchValue(this.model.accountTypeName);\r\n        this.mainTabComponent.informationCardComponent.departmentCtrl.patchValue(this.model.departmentCode);\r\n        this.mainTabComponent.informationCardComponent.departmentDescriptionCtrl.patchValue(this.model.departmentName);\r\n        this.mainTabComponent.informationCardComponent.fiscalRegCtrl.patchValue(this.model.fiscalRegistrationNumber);\r\n\r\n        this.updateRandomId(this.model);\r\n\r\n        this.mainAddress = this.model.counterpartyAddresses.find((address) => address.main);\r\n        if (!this.mainAddress && this.model.counterpartyAddresses && this.model.counterpartyAddresses.length > 0) {\r\n            this.mainAddress = this.model.counterpartyAddresses[0];\r\n        }\r\n\r\n        if (this.mainAddress) {\r\n\r\n            this.mainTabComponent.mainAddressCardComponent.populateValues(this.mainAddress);\r\n\r\n            this.mainTabComponent.mainAddressCardComponent.addressTypeCodeCtrl.patchValue(this.mainAddress.addressTypeCode);\r\n            this.mainTabComponent.mainAddressCardComponent.addressTypeNameCtrl.patchValue(this.mainAddress.addressTypeCode);\r\n            this.mainTabComponent.mainAddressCardComponent.address1Ctrl.patchValue(this.mainAddress.address1);\r\n            this.mainTabComponent.mainAddressCardComponent.address2Ctrl.patchValue(this.mainAddress.address2);\r\n            this.mainTabComponent.mainAddressCardComponent.zipCodeCtrl.patchValue(this.mainAddress.zipCode);\r\n            this.mainTabComponent.mainAddressCardComponent.cityCtrl.patchValue(this.mainAddress.city);\r\n            this.mainTabComponent.mainAddressCardComponent.emailCtrl.patchValue(this.mainAddress.mail);\r\n            this.mainTabComponent.mainAddressCardComponent.phoneNumberCtrl.patchValue(this.mainAddress.phoneNo);\r\n            this.mainTabComponent.mainAddressCardComponent.faxNumberCtrl.patchValue(this.mainAddress.faxNo);\r\n            this.mainTabComponent.mainAddressCardComponent.ldcRegionCtrl.patchValue(this.mainAddress.ldcRegionCode);\r\n            this.mainTabComponent.mainAddressCardComponent.provinceCtrl.patchValue(this.model.provinceName);\r\n            this.mainTabComponent.mainAddressCardComponent.countryCtrl.patchValue(this.model.countryName);\r\n        }\r\n\r\n        this.addressTabComponent.addressComponent.counterpartyAddresses = this.model.counterpartyAddresses;\r\n        this.addressTabComponent.addressComponent.populateValue();\r\n        this.contactTabComponent.contactCardComponent.contactData = this.model.counterpartyContacts;\r\n        this.contactTabComponent.contactCardComponent.populateValue();\r\n        this.bankAccountTabComponent.bankAccountListComponent.bankAccountsData = this.model.counterpartyBankAccounts;\r\n        if (this.model.counterpartyBankAccountIntermediaries) {\r\n            if (this.model.counterpartyBankAccountIntermediaries[0]) {\r\n                this.bankAccountTabComponent.bankAccountListComponent.bankAccountsData[0].bankAccountIntermediary1 = this.model.counterpartyBankAccountIntermediaries[0];\r\n            }\r\n            if (this.model.counterpartyBankAccountIntermediaries[1]) {\r\n                this.bankAccountTabComponent.bankAccountListComponent.bankAccountsData[0].bankAccountIntermediary2 = this.model.counterpartyBankAccountIntermediaries[1];\r\n            }\r\n        }\r\n        this.taxInfoTabComponent.counterpartyTaxes = this.model.counterpartyTaxes;\r\n        this.taxInfoTabComponent.initTaxsGridRows();\r\n\r\n        this.mainTabComponent.thirdSystemCodesCardComponent.populateValue(this.model);\r\n\r\n        this.mainTabComponent.alternateMailingCardComponent.populateValue(this.model);\r\n\r\n        this.mainTabComponent.customerDefaultCardComponent.populateContractTermValue(this.model);\r\n\r\n        this.isLoading = false;\r\n    }\r\n\r\n    updateRandomId(model: Counterparty) {\r\n        if (model) {\r\n            let counter = 1;\r\n            if (model.counterpartyAddresses) {\r\n                model.counterpartyAddresses.forEach((address) => {\r\n                    address.randomId = counter;\r\n                    counter++;\r\n                });\r\n            }\r\n\r\n            if (model.counterpartyContacts) {\r\n                counter = 1;\r\n                model.counterpartyContacts.forEach((contact) => {\r\n                    contact.randomId = counter;\r\n                    counter++;\r\n                });\r\n            }\r\n\r\n            if (model.counterpartyBankAccounts) {\r\n                counter = 1;\r\n                model.counterpartyBankAccounts.forEach((bankAccount) => {\r\n                    bankAccount.randomId = counter;\r\n                    counter++;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.saveInProgress = true;\r\n        this.onValidationState = true;\r\n        this.utilService.updateFormGroupValidity(this.captureCounterpartyFormGroup);\r\n\r\n        if (this.captureCounterpartyFormGroup.pending) {\r\n            this.captureCounterpartyFormGroup.statusChanges.subscribe(() => {\r\n                if (this.onValidationState) {\r\n                    this.onValidationState = false;\r\n                    this.handleSave();\r\n                }\r\n            });\r\n        } else {\r\n            this.onValidationState = false;\r\n            this.handleSave();\r\n        }\r\n    }\r\n\r\n    handleSave() {\r\n        try {\r\n            if (!this.headerComponent.formGroup.valid) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Form is invalid. Please resolve the errors.',\r\n                );\r\n                this.saveInProgress = false;\r\n                return;\r\n            }\r\n            if (!this.mainTabComponent.formGroup.valid) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Form is invalid. Please resolve the errors.',\r\n                );\r\n                this.saveInProgress = false;\r\n                return;\r\n            }\r\n\r\n            if (!this.taxInfoTabComponent.validate()) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Form is invalid. Please resolve the errors.',\r\n                );\r\n                this.saveInProgress = false;\r\n                return;\r\n            }\r\n\r\n            if (!this.model) {\r\n                this.model = new Counterparty();\r\n            }\r\n            this.model.counterpartyAddresses = [];\r\n\r\n            this.headerComponent.populateEntity(this.model);\r\n            this.mainTabComponent.informationCardComponent.populateEntity(this.model);\r\n            if (this.model.counterpartyCompanies.length == 0) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'please select the associated company.',\r\n                );\r\n                this.saveInProgress = false;\r\n                return;\r\n            }\r\n\r\n            this.mainTabComponent.mainAddressCardComponent.updateEntity(this.model, this.mainAddress);\r\n            this.mainTabComponent.customerDefaultCardComponent.populateEntity(this.model);\r\n            this.mainTabComponent.alternateMailingCardComponent.populateEntity(this.model);\r\n            this.mainTabComponent.thirdSystemCodesCardComponent.populateEntity(this.model);\r\n\r\n            if (this.addressTabComponent.addressComponent.counterpartyAddresses && this.addressTabComponent.addressComponent.counterpartyAddresses.length > 0) {\r\n                let counter = 0;\r\n                this.addressTabComponent.addressComponent.counterpartyAddresses.forEach((address) => {\r\n\r\n                    if (this.model.counterpartyAddresses.find((add) => add.addressId == address.addressId &&\r\n                        add.randomId == address.randomId && !address.isDeactivated)) {\r\n                        if (address.main) {\r\n                            this.counterpartyAddresses[counter] = this.model.counterpartyAddresses[0];\r\n                        }\r\n                        else {\r\n                            this.model.counterpartyAddresses[0].main = false;\r\n                            this.counterpartyAddresses[counter] = this.model.counterpartyAddresses[0];\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.counterpartyAddresses.push(address);\r\n                    }\r\n                    counter++;\r\n                });\r\n                this.model.counterpartyAddresses = this.counterpartyAddresses;\r\n            }\r\n\r\n            this.model.counterpartyContacts = this.contactTabComponent.contactCardComponent.contactData;\r\n            this.model.counterpartyBankAccounts = this.bankAccountTabComponent.bankAccountListComponent.bankAccountsData;\r\n            if (this.model.counterpartyBankAccounts && this.model.counterpartyBankAccounts.length > 0) {\r\n                this.model.counterpartyBankAccountIntermediaries = [];\r\n                this.model.counterpartyBankAccountIntermediaries.push(this.bankAccountTabComponent.bankAccountListComponent.bankAccountsData[0].bankAccountIntermediary1);\r\n                this.model.counterpartyBankAccountIntermediaries.push(this.bankAccountTabComponent.bankAccountListComponent.bankAccountsData[0].bankAccountIntermediary2);\r\n            }\r\n            else {\r\n                this.model.counterpartyBankAccountIntermediaries = [];\r\n            }\r\n            this.model.counterpartyTaxes = this.taxInfoTabComponent.counterpartyTaxes;\r\n\r\n            this.updateCounerpartyId(this.model);\r\n\r\n            this.subscriptions.push(this.masterDataService\r\n                .addOrUpdateCounterparty(this.model)\r\n                .subscribe((data: any[]) => {\r\n                    if (data) {\r\n                        this.saveInProgress = false\r\n                        if (this.isCreateMode) {\r\n                            this.snackbarService.informationSnackBar('Counterparty has been created successfully.');\r\n                        }\r\n                        else if (this.isEditMode) {\r\n                            this.snackbarService.informationSnackBar('Counterparty has been updated successfully.');\r\n                        }\r\n                        this.goToCounterPartyDetails(data[0]);\r\n                    }\r\n                    else {\r\n                        this.saveInProgress = false\r\n                    }\r\n                },\r\n                    (err) => {\r\n                        this.saveInProgress = false\r\n                        console.error(err);\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    }));\r\n        }\r\n        catch (ex) {\r\n            this.saveInProgress = false;\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n\r\n    updateCounerpartyId(model: Counterparty) {\r\n        if (model.counterpartyID) {\r\n            if (model.counterpartyAccountTypes) {\r\n                model.counterpartyAccountTypes.forEach((obj) => {\r\n                    obj.counterpartyID = model.counterpartyID;\r\n                });\r\n            }\r\n\r\n            if (model.counterpartyCompanies) {\r\n                model.counterpartyCompanies.forEach((obj) => {\r\n                    obj.counterpartyId = model.counterpartyID;\r\n                    if (obj.companyId === this.companyId) {\r\n                        obj.c2CCode = model.c2CCode;\r\n                        obj.isDeactivated = model.isDeactivated;\r\n                    }\r\n                });\r\n                model.isDeactivated = false;\r\n                model.c2CCode = '';\r\n            }\r\n\r\n            if (model.counterpartyContacts) {\r\n                model.counterpartyContacts.forEach((obj) => {\r\n                    obj.counterpartyId = model.counterpartyID;\r\n                    obj.main = obj.isFavorite;\r\n                });\r\n            }\r\n\r\n            if (model.counterpartyAddresses) {\r\n                model.counterpartyAddresses.forEach((obj) => {\r\n                    obj.counterpartyId = model.counterpartyID;\r\n                    obj.main = obj.main;\r\n                });\r\n            }\r\n\r\n            if (model.counterpartyBankAccounts) {\r\n                model.counterpartyBankAccounts.forEach((obj) => {\r\n                    obj.counterpartyId = model.counterpartyID;\r\n                });\r\n            }\r\n\r\n            if (model.counterpartyTaxes) {\r\n                model.counterpartyTaxes.forEach((obj) => {\r\n                    obj.counterpartyId = model.counterpartyID;\r\n                });\r\n            }\r\n\r\n            if (model.counterpartyMdmCategory) {\r\n                model.counterpartyMdmCategory.forEach((obj) => {\r\n                    obj.counterpartyID = model.counterpartyID;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    OnSaveMethodCalled() {\r\n        this.onSaveButtonClicked();\r\n    }\r\n    onLocalViewModeCalled(event: any) {\r\n        if (event && event.value && event.value === \"Local\") {\r\n            if (this.model.associatedCompanies && this.model.associatedCompanies.length > 0) {\r\n                const company = this.model.associatedCompanies.find((c) => c.companyName == this.company);\r\n                if (company) {\r\n                    this.mainTabComponent.thirdSystemCodesCardComponent.c2cCodeCtrl.patchValue(company.c2CCode);\r\n                }\r\n                else {\r\n                    this.mainTabComponent.thirdSystemCodesCardComponent.c2cCodeCtrl.patchValue('');\r\n                }\r\n            }\r\n            else {\r\n                this.mainTabComponent.thirdSystemCodesCardComponent.c2cCodeCtrl.patchValue('');\r\n            }\r\n        }\r\n        else {\r\n            this.mainTabComponent.thirdSystemCodesCardComponent.c2cCodeCtrl.patchValue('');\r\n        }\r\n\r\n        if (event && event.value && event.value === \"Local\" &&\r\n            this.isEditMode && this.isEditExceptionPrivilege) {\r\n            this.mainTabComponent.thirdSystemCodesCardComponent.c2cCodeCtrl.enable();\r\n            this.mainTabComponent.informationCardComponent.departmentCtrl.enable();\r\n            this.headerComponent.isLocalViewMode = true;\r\n        }\r\n        else {\r\n            this.mainTabComponent.thirdSystemCodesCardComponent.c2cCodeCtrl.disable();\r\n            this.mainTabComponent.informationCardComponent.departmentCtrl.disable();\r\n            this.headerComponent.isLocalViewMode = false;\r\n        }\r\n    }\r\n\r\n    goToCounterPartyDetails(counterPartyId: number) {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/referential/counterparty/display', counterPartyId]);\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/referential/tradeexecution/counterparties']);\r\n    }\r\n}","module.exports = \"<header class=\\\"header-background\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n        <div [formGroup]=\\\"headerFormGroup\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"1px\\\">\\r\\n                <h2>\\r\\n                    <atlas-form-input fxFlex=\\\"90%\\\"\\r\\n                                      [fieldControl]=\\\"accountRefCtrl\\\"\\r\\n                                      [errorMap]=\\\"accountrefErrorMap\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      [required]=\\\"accountRefCtrl.isRequired\\\"\\r\\n                                      label=\\\"Account Ref\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <h1> : </h1>\\r\\n                    <atlas-form-input fxFlex=\\\"320px\\\"\\r\\n                                      [fieldControl]=\\\"accountTitleCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      [required]=\\\"accountTitleCtrl.isRequired\\\"\\r\\n                                      label=\\\"Account Title\\\">\\r\\n                    </atlas-form-input>\\r\\n                </h2>\\r\\n                <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                         aria-label=\\\"Date\\\"\\r\\n                                         selected\\r\\n                                         disabled>\\r\\n                    <mat-button-toggle [value]=\\\"0\\\"\\r\\n                                       [checked]=\\\"!isDeactivated\\\">Active</mat-button-toggle>\\r\\n                    <mat-button-toggle [value]=\\\"1\\\"\\r\\n                                       [checked]=\\\"isDeactivated\\\">Inactive</mat-button-toggle>\\r\\n                </mat-button-toggle-group>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start end\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                  [fieldControl]=\\\"createdByCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Created By\\\">\\r\\n                </atlas-form-input>\\r\\n                <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                  [fieldControl]=\\\"creationDateCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"On\\\">\\r\\n                </atlas-form-input>\\r\\n                <atlas-form-input *ngIf=\\\"isShowLastAmendedBy\\\"\\r\\n                                  fxFlex=\\\"20%\\\"\\r\\n                                  [fieldControl]=\\\"lastAmendedByCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Last Amended By\\\">\\r\\n                </atlas-form-input>\\r\\n                <atlas-form-input *ngIf=\\\"isShowLastAmendedBy\\\"\\r\\n                                  fxFlex=\\\"20%\\\"\\r\\n                                  [fieldControl]=\\\"modifiedDateCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"On\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n                <mat-button-toggle-group fxLayoutAlign=\\\"start end\\\"\\r\\n                                         *ngIf=\\\"isLocalViewMode\\\"\\r\\n                                         aria-label=\\\"Date\\\"\\r\\n                                         (change)='onStatusChanged($event.value)'>\\r\\n                    <mat-button-toggle [value]=\\\"0\\\"\\r\\n                                       [checked]=\\\"!isDeactivated\\\">Activate</mat-button-toggle>\\r\\n                    <mat-button-toggle [value]=\\\"1\\\"\\r\\n                                       [checked]=\\\"isDeactivated\\\">Deactivate</mat-button-toggle>\\r\\n                </mat-button-toggle-group>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n    </div>\\r\\n</header>\"","module.exports = \":host ::ng-deep .mat-form-field-appearance-legacy .mat-form-field-infix {\\n  margin-right: -1px !important; }\\n\\n:host ::ng-deep .mat-input-element:disabled {\\n  color: rgba(0, 0, 0, 0.87) !important;\\n  font-weight: bolder; }\\n\\n:host ::ng-deep .mat-chip.mat-standard-chip.mat-chip-selected.mat-chip.mat-standard-chip {\\n  background-color: #009cb9;\\n  color: white;\\n  margin-left: 10% !important; }\\n\\n:host ::ng-deep .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline {\\n  background-image: linear-gradient(to right, #fefcfe 0%, #fefcfe 33%, transparent 0%);\\n  background-size: 4px 100%;\\n  background-repeat: repeat-x; }\\n\\n:host ::ng-deep .mat-form-field-flex {\\n  margin-right: -60px !important; }\\n\\n:host ::ng-deep h1 {\\n  font-size: 1.4em !important;\\n  margin-left: -20px !important;\\n  margin-right: 10px !important;\\n  margin-bottom: 27px !important; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { BaseFormComponent } from '../.././../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../.././../../../shared/entities/atlas-form-control'\r\nimport { FormConfigurationProviderService } from '../.././../../../shared/services/form-configuration-provider.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Counterparty } from '../.././../../../shared/entities/counterparty.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-header',\r\n    templateUrl: './counterparty-header.component.html',\r\n    styleUrls: ['./counterparty-header.component.scss']\r\n})\r\n\r\nexport class CounterpartyHeaderComponent extends BaseFormComponent implements OnInit {\r\n    headerFormGroup: FormGroup;\r\n    accountRefCtrl = new AtlasFormControl('AccountRef');\r\n    accountTitleCtrl = new AtlasFormControl('AccountTitle');\r\n    createdByCtrl = new AtlasFormControl('CreatedBy');\r\n    creationDateCtrl = new AtlasFormControl('CreationDate');\r\n    lastAmendedByCtrl = new AtlasFormControl('LastAmendedBy');\r\n    modifiedDateCtrl = new AtlasFormControl('ModifiedDate');\r\n    counterpartyStatusCtrl = new AtlasFormControl('counterpartyStatus');\r\n    statusClassApplied: string;\r\n    isDeactivated: boolean = false;\r\n    @Input() isEditMode: boolean = false;\r\n    isLocalViewMode: boolean = false;\r\n    isAdmin: boolean = false;\r\n    isShowLastAmendedBy: boolean = true;\r\n    accountrefErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required*')\r\n        .set('maxlength', 'Maximum 10 charcters Allowed');\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEditMode && this.isAdmin) {\r\n            this.isLocalViewMode = true;\r\n        }\r\n\r\n        this.headerFormGroup = this.formBuilder.group({\r\n            accountRefCtrl: this.accountRefCtrl,\r\n            accountTitleCtrl: this.accountTitleCtrl,\r\n            createdByCtrl: this.createdByCtrl,\r\n            creationDateCtrl: this.creationDateCtrl,\r\n            lastAmendedByCtrl: this.lastAmendedByCtrl,\r\n            modifiedDateCtrl: this.modifiedDateCtrl\r\n        });\r\n\r\n        this.accountTitleCtrl.disable();\r\n        this.createdByCtrl.disable();\r\n        this.creationDateCtrl.disable();\r\n        this.lastAmendedByCtrl.disable();\r\n        this.modifiedDateCtrl.disable();\r\n\r\n        if (this.isEditMode) {\r\n            this.createdByCtrl.disable();\r\n            this.creationDateCtrl.disable();\r\n        }\r\n        else {\r\n            this.isLocalViewMode = true;\r\n        }\r\n\r\n        this.isLocalViewMode = false;\r\n        this.setValidators();\r\n        this.isShowLastAmendedBy = (this.lastAmendedByCtrl.value) ? true : false;\r\n    }\r\n\r\n    setValidators() {\r\n        this.accountRefCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.maxLength(10)]),\r\n        );\r\n\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            accountRefCtrl: this.accountRefCtrl,\r\n            accountTitleCtrl: this.accountTitleCtrl,\r\n            createdByCtrl: this.createdByCtrl,\r\n            creationDateCtrl: this.creationDateCtrl,\r\n            lastAmendedByCtrl: this.lastAmendedByCtrl,\r\n            modifiedDateCtrl: this.modifiedDateCtrl\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onStatusChanged(event: any) {\r\n        this.isDeactivated = (Number(event) == 0) ? false : true;\r\n    }\r\n\r\n    populateEntity(model: Counterparty) {\r\n        model.counterpartyCode = this.accountRefCtrl.value;\r\n        // model.createdBy = this.createdByCtrl.value;\r\n        // model.createdDateTime = this.creationDateCtrl.value;\r\n        model.isDeactivated = this.isDeactivated;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n\r\n    }\r\n}\r\n","module.exports = \"<mat-toolbar class=\\\"menu-bar mat-elevation-z6\\\">\\r\\n    <div class=\\\"toolbar-div\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxFlex=\\\"100\\\"\\r\\n             fxLayoutGap=\\\"100px\\\">\\r\\n            <mat-button-toggle-group class=\\\"toggle-group toggle-button-counterparty\\\"\\r\\n                                     (change)=\\\"onViewModeChanged($event)\\\"\\r\\n                                     aria-label=\\\"Contract Type\\\"\\r\\n                                     [value]=\\\"selectedCounterpartyDisplayVal\\\">\\r\\n                <mat-button-toggle value=\\\"Global\\\"\\r\\n                                   [checked]=\\\"true\\\">\\r\\n                    Global View Mode\\r\\n                </mat-button-toggle>\\r\\n                <mat-button-toggle value=\\\"Local\\\">\\r\\n                    Local View Mode\\r\\n                </mat-button-toggle>\\r\\n                <mat-button-toggle [matMenuTriggerFor]=\\\"reports\\\"\\r\\n                                   value=\\\"Local\\\">\\r\\n                    Reports\\r\\n                </mat-button-toggle>\\r\\n                <mat-menu #reports=\\\"matMenu\\\"\\r\\n                          [overlapTrigger]=\\\"false\\\"\\r\\n                          xPosition=\\\"after\\\">\\r\\n                    <span *ngFor=\\\"let item of filteredTemplates\\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"OnReportClick(item)\\\">\\r\\n                            {{item.name}}\\r\\n                        </button>\\r\\n                    </span>\\r\\n                </mat-menu>\\r\\n            </mat-button-toggle-group>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             fxFlex=\\\"100\\\"\\r\\n             fxLayoutGap=\\\"100px\\\">\\r\\n            <a (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n               *ngIf=\\\"!isViewMode\\\"\\r\\n               matTooltip=\\\"Discard the changes\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">backspace</mat-icon>\\r\\n            </a>\\r\\n\\r\\n            <a (click)=\\\"onSaveCounterPartyButtonClicked()\\\"\\r\\n               *ngIf=\\\"!isViewMode || isCreateMode\\\"\\r\\n               matTooltip=\\\"Save the Counterparty\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">save</mat-icon>\\r\\n            </a>\\r\\n\\r\\n            <a (click)=\\\"onEditCounterPartyButtonClicked()\\\"\\r\\n               *ngIf=\\\"isViewMode && isEditCounterpartyPrivilege && !isCreateMode\\\"\\r\\n               matTooltip=\\\"Edit the Counterparty\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon>create</mat-icon>\\r\\n            </a>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-toolbar>\"","module.exports = \"mat-toolbar {\\n  height: 56px !important;\\n  background-color: white !important; }\\n\\n:host ::ng-deep .mat-toolbar.mat-toolbar .mat-icon {\\n  margin-top: 7px !important; }\\n\\n:host ::ng-deep .menu-bar .menu-bar-action-icon {\\n  margin: 7px !important; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { GenericReportViewerComponent } from '../../../../../shared/components/generic-report-viewer/generic-report-viewer.component';\r\nimport { PhysicalDocumentTemplate } from '../../../../../shared/entities/document-template.entity';\r\nimport { DocumentService } from '../../../../../shared/services/http-services/document.service';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-management-menu-bar',\r\n    templateUrl: './counterparty-management-menu-bar.component.html',\r\n    styleUrls: ['./counterparty-management-menu-bar.component.scss'],\r\n})\r\nexport class CounterpartyManagementMenuBarComponent implements OnInit {\r\n\r\n    isEditCounterpartyPrivilege: boolean = false;\r\n    counterpartyID: number;\r\n    @Input() isCreateMode: boolean = false;\r\n    @Input() isViewMode: boolean = false;\r\n    @Output() readonly localViewMode = new EventEmitter();\r\n    @Output() readonly saveMethod = new EventEmitter();\r\n    isAdmin: boolean = false;\r\n    selectedCounterpartyDisplayVal: boolean = true;\r\n    filteredTemplates: PhysicalDocumentTemplate[] = new Array<PhysicalDocumentTemplate>();\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        protected documentService: DocumentService,\r\n        protected dialog: MatDialog) { }\r\n\r\n    ngOnInit() {\r\n        this.counterpartyID = Number(this.route.snapshot.paramMap.get('counterpartyID'));\r\n        const documentType = 76;\r\n        this.documentService.getTemplates(documentType, 'Counterparties').subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n        });\r\n    }\r\n\r\n    onEditCounterPartyButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/referential/counterparty/edit', this.counterpartyID]);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/referential/counterparty/display', this.counterpartyID]);\r\n    }\r\n\r\n    onSaveCounterPartyButtonClicked() {\r\n        this.saveMethod.emit(true);\r\n    }\r\n\r\n    OnReportClick(data: any) {\r\n\r\n        const openTradepnlReportDialog = this.dialog.open(GenericReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: data.name,\r\n                reportPath: data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n\r\n    }\r\n\r\n    onViewModeChanged(event: any) {\r\n        if (!this.isAdmin) {\r\n            this.localViewMode.emit(event);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Alternate Mailing Address</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input style=\\\"margin-right: 10px;\\\"\\r\\n                                  fxFlex=\\\"40%\\\"\\r\\n                                  [fieldControl]=\\\"alternateMailingAdd1Ctrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  label=\\\"Alternate Email Address\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n                <atlas-form-input fxFlex=\\\"40%\\\"\\r\\n                                  [fieldControl]=\\\"alternateMailingAdd2Ctrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  label=\\\"Alternate Email Address\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input style=\\\"margin-right: 10px;\\\"\\r\\n                                  fxFlex=\\\"40%\\\"\\r\\n                                  [fieldControl]=\\\"alternateMailingAdd3Ctrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  label=\\\"Alternate Email Address\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n                <atlas-form-input fxFlex=\\\"40%\\\"\\r\\n                                  [fieldControl]=\\\"alternateMailingAdd4Ctrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  label=\\\"Alternate Email Address\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control'\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Counterparty } from '../../../../../../shared/entities/counterparty.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-alternate-mailing-card',\r\n    templateUrl: './alternate-mailing-card.component.html',\r\n    styleUrls: ['./alternate-mailing-card.component.scss']\r\n})\r\nexport class AlternateMailingCardComponent extends BaseFormComponent implements OnInit {\r\n    alternateMailingAdd1Ctrl = new AtlasFormControl('AlternateMailingAddress1');\r\n    alternateMailingAdd2Ctrl = new AtlasFormControl('AlternateMailingAddress2');\r\n    alternateMailingAdd3Ctrl = new AtlasFormControl('AlternateMailingAddress3');\r\n    alternateMailingAdd4Ctrl = new AtlasFormControl('AlternateMailingAddress4');\r\n    inputErrorMap: Map<string, string> = new Map();\r\n\r\n    constructor(protected formBuilder: FormBuilder, protected formConfigurationProvider: FormConfigurationProviderService, ) {\r\n        super(formConfigurationProvider);\r\n        this.inputErrorMap.set('email', 'Not a valid email');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setValidators();\r\n    }\r\n\r\n    setValidators() {\r\n        this.alternateMailingAdd1Ctrl.setValidators(\r\n            Validators.compose([Validators.email, Validators.maxLength(160)]),\r\n        );\r\n\r\n        this.alternateMailingAdd2Ctrl.setValidators(\r\n            Validators.compose([Validators.email, Validators.maxLength(160)]),\r\n        );\r\n\r\n        this.alternateMailingAdd3Ctrl.setValidators(\r\n            Validators.compose([Validators.email, Validators.maxLength(160)]),\r\n        );\r\n\r\n        this.alternateMailingAdd4Ctrl.setValidators(\r\n            Validators.compose([Validators.email, Validators.maxLength(160)]),\r\n        );\r\n    }\r\n\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            alternateMailingAdd1Ctrl: this.alternateMailingAdd1Ctrl,\r\n            alternateMailingAdd2Ctrl: this.alternateMailingAdd2Ctrl,\r\n            alternateMailingAdd3Ctrl: this.alternateMailingAdd3Ctrl,\r\n            alternateMailingAdd4Ctrl: this.alternateMailingAdd4Ctrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateValue(model: Counterparty) {\r\n        this.alternateMailingAdd1Ctrl.patchValue(model.alternateMailingAddress1);\r\n        this.alternateMailingAdd2Ctrl.patchValue(model.alternateMailingAddress2);\r\n        this.alternateMailingAdd3Ctrl.patchValue(model.alternateMailingAddress3);\r\n        this.alternateMailingAdd4Ctrl.patchValue(model.alternateMailingAddress4);\r\n\r\n    }\r\n\r\n    populateEntity(model: Counterparty) {\r\n        model.alternateMailingAddress1 = this.alternateMailingAdd1Ctrl.value;\r\n        model.alternateMailingAddress2 = this.alternateMailingAdd2Ctrl.value;\r\n        model.alternateMailingAddress3 = this.alternateMailingAdd3Ctrl.value;\r\n        model.alternateMailingAddress4 = this.alternateMailingAdd4Ctrl.value;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"row\\\">\\r\\n    <main>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxFlex=\\\"50%\\\"\\r\\n             style=\\\"padding-right: 28px\\\">\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"57\\\">\\r\\n\\r\\n                <atlas-information-card #informationCardComponent\\r\\n                                        [isViewMode]=\\\"isViewMode\\\"\\r\\n                                        [isEditMode]=\\\"isEditMode\\\"\\r\\n                                        (selectedAccountTypesOptions)=\\\"onSelectedAccountTypesOptions($event)\\\">\\r\\n                </atlas-information-card>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"50\\\">\\r\\n                <atlas-third-system-codes-card #thirdSystemCodesCardComponent\\r\\n                                               [isEditMode]=\\\"isEditMode\\\"\\r\\n                                               (selectedMdmCodesOptions)=\\\"onSelectedMdmCodesOptions($event)\\\">\\r\\n                </atlas-third-system-codes-card>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"50\\\">\\r\\n\\r\\n                <atlas-alternate-mailing-card #alternateMailingCardComponent></atlas-alternate-mailing-card>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxFlex=\\\"50%\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\"\\r\\n             class='charter-creation-margin'>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"100%\\\">\\r\\n                <atlas-main-address-card #mainAddressCardComponent></atlas-main-address-card>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"100%\\\">\\r\\n                <atlas-customer-default-card #customerDefaultCardComponent></atlas-customer-default-card>\\r\\n            </div>\\r\\n        </div>\\r\\n    </main>\\r\\n</div>\"","module.exports = \":host ::ng-deep .mat-card {\\n  width: 500px !important; }\\n\"","import { Component, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { InformationCardComponent } from './information-card/information-card.component';\r\nimport { MainAddressCardComponent } from './main-address-card/main-address-card.component';\r\nimport { CustomerDefaultCardComponent } from './customer-default-card/customer-default-card.component';\r\nimport { ThirdSystemCodesCardComponent } from './third-system-codes-card/third-system-codes-card.component';\r\nimport { AlternateMailingCardComponent } from './alternate-mailing-card/alternate-mailing-card.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MdmCategoryAccountTypeMapping } from '../../../../../shared/mdmCategory-account-mapping-entity';\r\nimport { CounterpartyMdmCategory } from '../../../../../shared/entities/counterparty-mdm-category.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { MdmCategory } from '../../../../../shared/entities/mdm-Category.entity';\r\nimport { AccountType } from '../../../../../shared/entities/account-type.entity';\r\nimport { CounterpartyAccountType } from '../../../../../shared/entities/counterparty-account-type.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-capture-form-main-tab',\r\n    templateUrl: './counterparty-capture-form-main-tab.component.html',\r\n    styleUrls: ['./counterparty-capture-form-main-tab.component.scss']\r\n})\r\nexport class CounterpartyCaptureFormMainTabComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('informationCardComponent') informationCardComponent: InformationCardComponent;\r\n    @ViewChild('mainAddressCardComponent') mainAddressCardComponent: MainAddressCardComponent;\r\n    @ViewChild('thirdSystemCodesCardComponent') thirdSystemCodesCardComponent: ThirdSystemCodesCardComponent;\r\n    @ViewChild('alternateMailingCardComponent') alternateMailingCardComponent: AlternateMailingCardComponent;\r\n    @ViewChild('customerDefaultCardComponent') customerDefaultCardComponent: CustomerDefaultCardComponent;\r\n\r\n    @Input() isViewMode: boolean = false;\r\n    @Input() isEditMode: boolean = false;\r\n    @Input() mappedData: MdmCategoryAccountTypeMapping[] = [];\r\n    masterdata: MasterData;\r\n    filteredAccountTypes: AccountType[];\r\n    filteredMdmCategories: MdmCategory[];\r\n    constructor(private route: ActivatedRoute, protected formBuilder: FormBuilder, protected formConfigurationProvider: FormConfigurationProviderService, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            informationCardComponent: this.informationCardComponent.getFormGroup(),\r\n            mainAddressCardComponent: this.mainAddressCardComponent.getFormGroup(),\r\n            thirdSystemCodesCardComponent: this.thirdSystemCodesCardComponent.getFormGroup(),\r\n            alternateMailingCardComponent: this.alternateMailingCardComponent.getFormGroup(),\r\n            customerDefaultCardComponent: this.customerDefaultCardComponent.getFormGroup(),\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSelectedAccountTypesOptions(event) {\r\n        let selectedCodes: CounterpartyMdmCategory[] = [];\r\n        let selected: any[] = event;\r\n        this.mappedData.forEach((accountType) => {\r\n            selected.forEach((accType) => {\r\n                if (accType.accountTypeId == accountType.accountTypeID) {\r\n                    const code = selectedCodes.find((c => c.mdmCategoryID == accountType.mdmCategoryID));\r\n                    if (!code) {\r\n                        let mdmCategory: CounterpartyMdmCategory = <CounterpartyMdmCategory>{};\r\n                        mdmCategory.mdmCategoryID = accountType.mdmCategoryID;\r\n                        selectedCodes.push(mdmCategory);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.filteredMdmCategories = [];\r\n        selectedCodes.forEach((obj) => {\r\n            const mdmCode = this.masterdata.mdmCategories.find((c) => c.mdmCategoryId === obj.mdmCategoryID);\r\n            if (mdmCode) {\r\n                this.filteredMdmCategories.push(mdmCode);\r\n            }\r\n        });\r\n\r\n        this.thirdSystemCodesCardComponent.mdmCategoryCodeCtrl.patchValue(this.filteredMdmCategories);\r\n    }\r\n\r\n    onSelectedMdmCodesOptions(event) {\r\n        let selectedAccountTypes: CounterpartyAccountType[] = [];\r\n        let selected: any[] = event;\r\n        this.mappedData.forEach((mdmCodes) => {\r\n            selected.forEach((mdmCode) => {\r\n                if (mdmCode.mdmCategoryId == mdmCodes.mdmCategoryID) {\r\n                    const code = selectedAccountTypes.find((c => c.accountTypeId == mdmCodes.accountTypeID));\r\n                    if (!code) {\r\n                        let accountTypeObj: CounterpartyAccountType = <CounterpartyAccountType>{};\r\n                        accountTypeObj.accountTypeId = mdmCodes.accountTypeID;\r\n                        selectedAccountTypes.push(accountTypeObj);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.filteredAccountTypes = [];\r\n        selectedAccountTypes.forEach((obj) => {\r\n            const accType = this.masterdata.accountTypes.find((c) => c.accountTypeId === obj.accountTypeId);\r\n            if (accType) {\r\n                this.filteredAccountTypes.push(accType);\r\n            }\r\n        });\r\n        this.informationCardComponent.accountTypeCtrl.patchValue(this.filteredAccountTypes);\r\n    }\r\n}","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Customer's Default</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"50%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-contract-terms\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"contractTermsCtrl\\\"\\r\\n                                                         label=\\\"Contract Terms\\\"\\r\\n                                                         [options]=\\\"filteredContractTerms\\\"\\r\\n                                                         displayProperty=\\\"contractTermCode\\\"\\r\\n                                                         [selectProperties]=\\\"['contractTermCode', 'description']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Contract Terms\\\"\\r\\n                                                         gridId=\\\"contractTermsGrid\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"50%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Introductory Brocker\\\"\\r\\n                           [formControl]=\\\"introductoryBrockerCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"introductoryBrockerCtrl.hasError('maxlength')\\\">\\r\\n                        Maximum 160 charcters Allowed\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control'\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { UtilService, nameof } from '../../../../../../shared/services/util.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { ContractTerm } from '../../../../../../shared/entities/contract-term.entity';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { Counterparty } from '../../../../../../shared/entities/counterparty.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'atlas-customer-default-card',\r\n    templateUrl: './customer-default-card.component.html',\r\n    styleUrls: ['./customer-default-card.component.scss']\r\n})\r\nexport class CustomerDefaultCardComponent extends BaseFormComponent implements OnInit {\r\n    contractTermsCtrl = new AtlasFormControl('contractTermsCtrl');\r\n    introductoryBrockerCtrl = new AtlasFormControl('introductoryBrockerCtrl');\r\n    filteredContractTerms: ContractTerm[];\r\n    contractTermControl: ContractTerm;\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.ContractTerms\r\n    ];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        protected masterdataService: MasterdataService, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.filteredContractTerms = this.masterdata.contractTerms;\r\n                this.contractTermsCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredContractTerms = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.contractTerms,\r\n                        ['contractTermCode', 'description'],\r\n                    );\r\n                });\r\n                this.setValidators();\r\n            });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            contractTermsCtrl: this.contractTermsCtrl,\r\n            introductoryBrockerCtrl: this.introductoryBrockerCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setValidators() {\r\n        this.contractTermsCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.contractTerms,\r\n                    nameof<ContractTerm>('contractTermCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.introductoryBrockerCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(160)]),\r\n        );\r\n    }\r\n\r\n    populateEntity(model: Counterparty) {\r\n        model.contractTermId = (this.contractTermsCtrl.value) ? this.contractTermsCtrl.value.contractTermId : null;\r\n        model.introductoryBrocker = this.introductoryBrockerCtrl.value;\r\n    }\r\n\r\n    populateContractTermValue(model: Counterparty) {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredContractTerms = this.masterdata.contractTerms;\r\n\r\n        if (model.contractTermId) {\r\n            this.contractTermControl = this.filteredContractTerms.find((contractTerm) => contractTerm.contractTermId === model.contractTermId);\r\n            this.contractTermsCtrl.patchValue(this.contractTermControl);\r\n        }\r\n        if (model.introductoryBrocker) {\r\n            this.introductoryBrockerCtrl.patchValue(model.introductoryBrocker);\r\n        }\r\n\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Associate Counterparties To Company</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-dropdown-select-list fxFlex='50%'\\r\\n                                            fxLayout=\\\"row\\\"\\r\\n                                            fxLayoutAlign=\\\"start left\\\"\\r\\n                                            label=\\\"Available Companies\\\"\\r\\n                                            [fieldControl]=\\\"counterpartyCompaniesCtrl\\\"\\r\\n                                            isEditable=\\\"false\\\"\\r\\n                                            [readonly]=\\\"true\\\"\\r\\n                                            [(options)]=\\\"counterpartCompanyList\\\"\\r\\n                                            isEditable=true\\r\\n                                            [selectProperties]=\\\"counterpartyCompany\\\"\\r\\n                                            (optionSelected)=\\\"optionSelected($event)\\\"\\r\\n                                            [defaultSelected]=\\\"matrixData\\\"\\r\\n                                            multiselect=true>\\r\\n                </atlas-dropdown-select-list>\\r\\n                <atlas-dropdown-select-list fxLayout=\\\"row\\\"\\r\\n                                            fxLayoutAlign=\\\"start end\\\"\\r\\n                                            fxFlex='50%'\\r\\n                                            label=\\\"Associated Companies\\\"\\r\\n                                            [fieldControl]=\\\"counterpartyAssociateCompanyCtrl\\\"\\r\\n                                            isEditable=\\\"false\\\"\\r\\n                                            [readonly]=\\\"true\\\"\\r\\n                                            [(options)]=\\\"associateCompany\\\"\\r\\n                                            isEditable=true\\r\\n                                            selected=\\\"true\\\"\\r\\n                                            [selectProperties]=\\\"counterpartyAssociate\\\"\\r\\n                                            [defaultSelected]=\\\"associateCompany\\\"\\r\\n                                            [checked]=\\\"true\\\"\\r\\n                                            multiselect=true>\\r\\n                </atlas-dropdown-select-list>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"btn-container\\\">\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                    cancel\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button mat-raised-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onSaveButtonClicked()\\\">\\r\\n                    save\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { MasterDataProps } from '../../../../../../../shared/entities/masterdata-props.entity';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Company } from '../../../../../../../shared/entities/company.entity';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { CounterpartyCompany } from '../../../../../../../shared/entities/counterparty-company.entity';\r\n@Component({\r\n    selector: 'atlas-associated-counterparties-company',\r\n    templateUrl: './associated-counterparties-company.component.html',\r\n    styleUrls: ['./associated-counterparties-company.component.scss']\r\n})\r\nexport class AssociatedCounterpartiesCompanyComponent extends BaseFormComponent implements OnInit {\r\n\r\n    counterpartyCompaniesCtrl = new AtlasFormControl('CounterpartyCompany');\r\n    counterpartyAssociateCompanyCtrl = new AtlasFormControl('CounterpartyAssociateCompany')\r\n    counterpartCompanyList: Company[] = [];\r\n    filteredCompany: Company[] = [];\r\n    associateCompany: Company[] = [];\r\n    checkedAssociateCompany: Company[];\r\n    counterpartyCompany: string[] = ['companyId'];\r\n    counterpartyAssociate: string[] = ['companyId'];\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Companies\r\n    ];\r\n    form: FormGroup;\r\n    matrixData: Company[] = [];\r\n    constructor(public thisDialogRef: MatDialogRef<AssociatedCounterpartiesCompanyComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            matrixData: CounterpartyCompany[],\r\n        },\r\n        protected formConfigurationProvider: FormConfigurationProviderService, protected masterdataService: MasterdataService,\r\n        private formBuilder: FormBuilder) {\r\n\r\n        super(formConfigurationProvider);\r\n\r\n    }\r\n    ngOnInit() {\r\n\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n                this.filteredCompany = this.masterdata.companies;\r\n                this.counterpartCompanyList = this.filteredCompany;\r\n                this.data.matrixData.forEach((row) => {\r\n                    const availableCompany = this.counterpartCompanyList.find(company => company.companyId === row.companyName)\r\n                    this.matrixData.push(availableCompany);\r\n                })\r\n            });\r\n\r\n    }\r\n    optionSelected(data: any) {\r\n        this.associateCompany = [];\r\n        data.forEach(element => {\r\n            this.associateCompany.push(element);\r\n        });\r\n    }\r\n    onSaveButtonClicked() {\r\n\r\n        this.thisDialogRef.close(this.associateCompany);\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.associateCompany = [];\r\n        this.thisDialogRef.close('true');\r\n    }\r\n\r\n    getAssociatedCompanies() {\r\n        return this.associateCompany;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Information</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"100%\\\"\\r\\n                                  [fieldControl]=\\\"nameCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"nameErrorMap\\\"\\r\\n                                  [required]=\\\"nameCtrl.isRequired\\\"\\r\\n                                  label=\\\"Name\\\"\\r\\n                                  [readonly]=\\\"true\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-dropdown-select-list fxFlex='100%'\\r\\n                                            label=\\\"Account Type Name\\\"\\r\\n                                            [fieldControl]=\\\"accountTypeCtrl\\\"\\r\\n                                            [readonly]=\\\"true\\\"\\r\\n                                            [options]=\\\"accountTypes\\\"\\r\\n                                            [required]=\\\"accountTypeCtrl.isRequired\\\"\\r\\n                                            isEditable=\\\"true\\\"\\r\\n                                            (optionSelected)=\\\"optionSelected($event)\\\"\\r\\n                                            [selectProperties]=\\\"accountTypesSelect\\\"\\r\\n                                            [defaultSelected]=\\\"checkedAccountTypes\\\"\\r\\n                                            multiselect=\\\"true\\\">\\r\\n                </atlas-dropdown-select-list>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n\\r\\n                <mat-form-field style=\\\"max-width: 130px;\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Account Manager\\\"\\r\\n                           [matAutocomplete]=\\\"accountManager\\\"\\r\\n                           [formControl]=\\\"accountManagerCtrl\\\"\\r\\n                           [matTooltip]=\\\"'Account Manager'\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-autocomplete #accountManager=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                        <mat-option *ngFor=\\\"let accountManager of filteredAccountManagers\\\"\\r\\n                                    [value]=\\\"accountManager.samAccountName\\\">\\r\\n                            {{ accountManager.samAccountName }} | {{accountManager.displayName}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n\\r\\n                    <mat-error *ngIf=\\\"accountManagerCtrl.hasError('inDropdownList')\\\">\\r\\n                        Account Manager is not in the List\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-dropdown-select fxFlex='25%'\\r\\n                                       label=\\\"Trade Status\\\"\\r\\n                                       [fieldControl]=\\\"tradeStatusCtrl\\\"\\r\\n                                       [readonly]=\\\"true\\\"\\r\\n                                       [options]=\\\"counterpartyTradeStatusList\\\"\\r\\n                                       [required]=\\\"tradeStatusCtrl.isRequired\\\"\\r\\n                                       isEditable=\\\"true\\\"\\r\\n                                       [selectProperties]=\\\"counterpartyTradeStatusDisplayProperty\\\">\\r\\n                </atlas-dropdown-select>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"25%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"headOfFamilyCtrl\\\"\\r\\n                                                         [options]=\\\"headofFamily\\\"\\r\\n                                                         label=\\\"Head of Family\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"onCounterpartyIdSelected($event)\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Department\\\"\\r\\n                           [matAutocomplete]=\\\"departmentCode\\\"\\r\\n                           [formControl]=\\\"departmentCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-autocomplete #departmentCode=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (optionSelected)=\\\"onSelectionChanged($event)\\\">\\r\\n                        <mat-option *ngFor=\\\"let department of filteredDepartments\\\"\\r\\n                                    [value]=\\\"department.departmentCode\\\">\\r\\n                            {{department.departmentCode}} | {{department.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"departmentCtrl.hasError('inDropdownList')\\\">\\r\\n                        value is not in the List\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"departmentDescriptionCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Description\\\"\\r\\n                                  [readonly]=\\\"true\\\">\\r\\n                </atlas-form-input>\\r\\n                <atlas-form-input fxFlex=\\\"35%\\\"\\r\\n                                  [fieldControl]=\\\"fiscalRegCtrl\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Fiscal Registration Number\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div FxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"60%\\\"\\r\\n                                  [fieldControl]=\\\"associatedCompaniesCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [required]=\\\"associatedCompaniesCtrl.isRequired\\\"\\r\\n                                  label=\\\"Associated Companies\\\"\\r\\n                                  [readonly]=\\\"true\\\">\\r\\n                </atlas-form-input>\\r\\n                <button (click)=\\\"onChangeButtonClicked()\\\"\\r\\n                        [disabled]=\\\"isViewMode || !isAdmin\\\"\\r\\n                        mat-raised-button\\r\\n                        type=\\\"button\\\">\\r\\n                    Change\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control'\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { Trader } from '../../../../../../shared/entities/trader.entity';\r\nimport { TradingService } from '../../../../../../shared/services/http-services/trading.service';\r\nimport { UtilService, nameof } from '../../../../../../shared/services/util.service';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { Department } from '../../../../../../shared/entities/department.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { DepartmentDataLoader } from '../../../../../../shared/services/masterdata/department-data-loader';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { Counterparty } from '../../../../../../shared/entities/counterparty.entity';\r\nimport { MatDialog } from '@angular/material';\r\nimport { AssociatedCounterpartiesCompanyComponent } from './associated-company/associated-counterparties-company.component';\r\nimport { CounterpartyTradeStatus } from '../../../../../../shared/entities/counterparty-trade-status.entity';\r\nimport { Company } from '../../../../../../shared/entities/company.entity';\r\nimport { AccountType } from '../../../../../../shared/entities/account-type.entity';\r\nimport { CounterpartyAccountType } from '../../../../../../shared/entities/counterparty-account-type.entity';\r\nimport { CounterpartyCompany } from '../../../../../../shared/entities/counterparty-company.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Province } from '../../../../../../shared/entities/province.entity';\r\nimport { Country } from '../../../../../../shared/entities/country.entity';\r\nimport { ContractTerm } from '../../../../../../shared/entities/contract-term.entity';\r\nimport { MdmCategoryAccountTypeMapping } from '../../../../../../shared/mdmCategory-account-mapping-entity';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-information-card',\r\n    templateUrl: './information-card.component.html',\r\n    styleUrls: ['./information-card.component.scss'],\r\n    providers: [DepartmentDataLoader],\r\n})\r\n\r\nexport class InformationCardComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('associatedCounterpartiesCompanyComponent') associatedCounterpartiesCompanyComponent: AssociatedCounterpartiesCompanyComponent;\r\n\r\n    nameCtrl = new AtlasFormControl('Name');\r\n    accountTypeCtrl = new AtlasFormControl('AccountType');\r\n    accountManagerCtrl = new AtlasFormControl('AccountManager');\r\n    tradeStatusCtrl = new AtlasFormControl('tradeStatus');\r\n    headOfFamilyCtrl = new AtlasFormControl('HeadOfFamily');\r\n    departmentCtrl = new AtlasFormControl('Department');\r\n    departmentDescriptionCtrl = new AtlasFormControl('DepartmentDescription');\r\n    fiscalRegCtrl = new AtlasFormControl('FiscalReg');\r\n    associatedCompaniesCtrl = new AtlasFormControl('AssociatedCompanies');\r\n    counterpartyMainInformationFormGroup: FormGroup;\r\n    filteredAccountManagers: Trader[];\r\n    accountManagers: Trader[] = [];\r\n    filteredDepartments: Department[];\r\n    filteredCompany: Company[];\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Province,\r\n        MasterDataProps.Ports,\r\n        MasterDataProps.AccountTypes,\r\n        MasterDataProps.ContractTerms,\r\n        MasterDataProps.Departments,\r\n        MasterDataProps.TradeStatus\r\n    ];\r\n\r\n    accountTypes: AccountType[];\r\n    selectedAccountTypes: CounterpartyAccountType[];\r\n    filteredAccountTypes: AccountType[];\r\n    checkedAccountTypes: AccountType[];\r\n    accountTypesSelect: string[] = ['name'];\r\n    headofFamily: Counterparty[];\r\n    headOfFamilyFiltered: Counterparty[];\r\n    headofFamilyControl: Counterparty;\r\n    headOfFamilySelect: string[] = ['counterpartyCode'];\r\n    counterpartyTradeStatusList: CounterpartyTradeStatus[] = [];\r\n    counterpartyTradeStatusDisplayProperty: string[] = ['enumEntityValue'];\r\n    @Input() isViewMode: boolean = false;\r\n    @Input() isEditMode: boolean = false;\r\n    @Output() selectedAccountTypesOptions = new EventEmitter<any>();\r\n    associatedCompanies: CounterpartyCompany[];\r\n\r\n    isAdmin: boolean = false;\r\n    filteredProvince: Province[];\r\n    filteredCountry: Country[];\r\n    inputErrorMap: Map<string, string> = new Map();\r\n    nameErrorMap: Map<string, string> = new Map();\r\n\r\n    headOfFamilyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Counterparty not in the list.');\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Counterparty not in the list.');\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected tradingService: TradingService,\r\n        protected utilService: UtilService,\r\n        public departmentDataLoader: DepartmentDataLoader,\r\n        private route: ActivatedRoute,\r\n        protected masterdataService: MasterdataService,\r\n        protected dialog: MatDialog, ) {\r\n        super(formConfigurationProvider);\r\n        this.inputErrorMap.set('maxlength', 'Maximum 20 charcters Allowed');\r\n        this.nameErrorMap.set('maxlength', 'Maximum 200 charcters Allowed');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.associatedCompaniesCtrl.disable();\r\n        if (this.isEditMode && !this.isAdmin) {\r\n            this.nameCtrl.disable();\r\n            this.tradeStatusCtrl.disable();\r\n        }\r\n\r\n        this.tradingService.getAllTraders()\r\n            .subscribe((traders) => {\r\n                this.accountManagers = this.filteredAccountManagers = traders.value;\r\n                this.accountManagerCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredAccountManagers = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.accountManagers,\r\n                        ['samAccountName', 'firstName', 'lastName'],\r\n                    );\r\n                });\r\n                this.setValidatorsforAccount();\r\n            });\r\n\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.accountTypes = this.masterdata.accountTypes;\r\n\r\n                this.filteredDepartments = this.masterdata.departments;\r\n                this.departmentCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredDepartments = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.departments,\r\n                        ['departmentCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.headofFamily = this.masterdata.counterparties;\r\n                this.counterpartyTradeStatusList = this.masterdata.tradeStatus;\r\n\r\n                this.headOfFamilyFiltered = this.headofFamily;\r\n                this.headOfFamilyCtrl.valueChanges.subscribe((input) => {\r\n                    this.headOfFamilyFiltered = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.headofFamily,\r\n                        ['counterpartyCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.setDefaultTrade();\r\n                this.setValidators();\r\n            });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            nameCtrl: this.nameCtrl,\r\n            accountTypeCtrl: this.accountTypeCtrl,\r\n            accountManagerCtrl: this.accountManagerCtrl,\r\n            tradeStatusCtrl: this.tradeStatusCtrl,\r\n            headOfFamilyCtrl: this.headOfFamilyCtrl,\r\n            departmentCtrl: this.departmentCtrl,\r\n            departmentDescriptionCtrl: this.departmentDescriptionCtrl,\r\n            fiscalRegCtrl: this.fiscalRegCtrl,\r\n            associatedCompaniesCtrl: this.associatedCompaniesCtrl,\r\n        });\r\n        this.associatedCompaniesCtrl.disable();\r\n        return super.getFormGroup();\r\n    }\r\n    optionSelected(data: any) {\r\n        this.selectedAccountTypes = [];\r\n        data.forEach(element => {\r\n            this.selectedAccountTypes.push(element);\r\n        });\r\n\r\n        this.selectedAccountTypesOptions.emit(this.selectedAccountTypes);\r\n    }\r\n\r\n    onCounterpartyIdSelected(value: Counterparty) {\r\n        this.headOfFamilyCtrl.patchValue(this.headOfFamilyCtrl.value);\r\n    }\r\n\r\n    onChangeButtonClicked() {\r\n        const openCostMatrixDialog = this.dialog.open(AssociatedCounterpartiesCompanyComponent, {\r\n            width: '45%',\r\n            data: {\r\n                matrixData: this.associatedCompanies,\r\n            },\r\n        });\r\n        openCostMatrixDialog.afterClosed().subscribe((selectedCompanies) => {\r\n            if (selectedCompanies !== null &&\r\n                typeof (selectedCompanies) === \"object\" &&\r\n                selectedCompanies.length > 0) {\r\n                let associateCompanies: String = '';\r\n\r\n                selectedCompanies.forEach(element => {\r\n                    if (element.companyId) {\r\n                        associateCompanies = element.companyId + ', ' + associateCompanies;\r\n                    }\r\n                });\r\n\r\n                if (associateCompanies != '') {\r\n                    associateCompanies = associateCompanies.trim();\r\n                    associateCompanies = associateCompanies.substr(0, associateCompanies.length - 1);\r\n                    this.associatedCompaniesCtrl.patchValue(associateCompanies);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onSelectionChanged(event: any) {\r\n        const selectedDepartment = this.masterdata.departments.find(\r\n            (department) => department.departmentCode === event.option.value,\r\n        );\r\n        if (selectedDepartment) {\r\n            this.departmentDescriptionCtrl.patchValue(selectedDepartment.description);\r\n        }\r\n        else {\r\n            this.departmentDescriptionCtrl.patchValue('');\r\n        }\r\n    }\r\n\r\n    getDepartmentId(code: string): number {\r\n        const selectedDepartment = this.masterdata.departments.find(\r\n            (department) => department.departmentCode === code,\r\n        );\r\n        if (selectedDepartment) {\r\n            return selectedDepartment.departmentId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setValidatorsforAccount() {\r\n        this.accountManagerCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.filteredAccountManagers,\r\n                    nameof<Trader>('samAccountName'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n    }\r\n\r\n    setValidators() {\r\n        this.departmentCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.nameCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.maxLength(200)]),\r\n        );\r\n\r\n        this.tradeStatusCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.associatedCompaniesCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.fiscalRegCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(20)]),\r\n        );\r\n\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    displayAccountManager(userId: number): string {\r\n        if (userId) {\r\n            const selectedUser = this.accountManagers.find(\r\n                (user) => user.userId === userId,\r\n            );\r\n\r\n            if (selectedUser) {\r\n                return selectedUser.displayName;\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n\r\n    getAccountManager(name: string) {\r\n        if (name) {\r\n            const selectedUser = this.accountManagers.find(\r\n                (user) => user.samAccountName === name,\r\n            );\r\n\r\n            if (selectedUser) {\r\n                return selectedUser.userId;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    setDefaultTrade() {\r\n        this.tradeStatusCtrl.patchValue(this.counterpartyTradeStatusList.find((status) =>\r\n            status.enumEntityValue === 'Trade'));\r\n    }\r\n\r\n    getTradeId(name: string): number {\r\n        if (name) {\r\n            const selectedTrade = this.counterpartyTradeStatusList.find(\r\n                (trade) => trade.enumEntityValue === name,\r\n            );\r\n\r\n            if (selectedTrade) {\r\n                return selectedTrade.enumEntityId;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getHeadOfFamily(name: string): number {\r\n        if (name) {\r\n            const selectedHeadOfFamily = this.headofFamily.find(\r\n                (family) => family.name === name,\r\n            );\r\n\r\n            if (selectedHeadOfFamily) {\r\n                return selectedHeadOfFamily.counterpartyID;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getAssociatedCompanies(model: Counterparty, selectedNames: string) {\r\n        let associatedCompanies: CounterpartyCompany[] = [];\r\n\r\n        if (selectedNames) {\r\n            let selectedNameList = selectedNames.split(\",\");\r\n            if (selectedNameList && selectedNameList.length > 0) {\r\n                selectedNameList.forEach((company) => {\r\n                    const selectedCompany: any = this.masterdata.companies.find(\r\n                        (comp) => comp.companyId === company.trim(),\r\n                    );\r\n\r\n                    if (selectedCompany) {\r\n                        let counterpartyCompany = new CounterpartyCompany();\r\n                        counterpartyCompany.companyId = selectedCompany.id;\r\n                        counterpartyCompany.isDeactivated = false;\r\n                        associatedCompanies.push(counterpartyCompany);\r\n                    }\r\n                });\r\n\r\n                const availableCompanies = this.masterdata.companies;\r\n                availableCompanies.forEach((company) => {\r\n                    const selectedCompany: any = associatedCompanies.find(\r\n                        (comp) => comp.companyId === company.id,\r\n                    );\r\n                    if (!selectedCompany) {\r\n                        let counterpartyCompany = new CounterpartyCompany();\r\n                        counterpartyCompany.companyId = company.id;\r\n                        counterpartyCompany.isDeactivated = true;\r\n                        associatedCompanies.push(counterpartyCompany);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (associatedCompanies && associatedCompanies.length > 0 &&\r\n                model.counterpartyCompanies && model.counterpartyCompanies.length > 0) {\r\n                associatedCompanies.forEach((company) => {\r\n                    const selectedCompany: any = model.counterpartyCompanies.find(\r\n                        (comp) => comp.companyId === company.companyId,\r\n                    );\r\n                    if (selectedCompany) {\r\n                        company.c2CCode = selectedCompany.c2CCode;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return associatedCompanies;\r\n    }\r\n\r\n    getAssociatedCompanyNameById(id: number) {\r\n        let companyName: string = \"\";\r\n        const selectedCompany: any = this.masterdata.companies.find(\r\n            (comp) => comp.companyId === \"\",\r\n        );\r\n\r\n        if (selectedCompany) {\r\n            companyName = selectedCompany.companyId;\r\n        }\r\n        return companyName;\r\n    }\r\n\r\n    populateEntity(model: Counterparty) {\r\n        model.name = this.nameCtrl.value;\r\n        model.description = this.nameCtrl.value;\r\n        model.counterpartyAccountTypes = this.accountTypeCtrl.value;\r\n        model.acManagerId = this.getAccountManager(this.accountManagerCtrl.value);\r\n        model.counterpartyTradeStatusId = this.tradeStatusCtrl.value.enumEntityId;\r\n        model.headofFamily = (this.headOfFamilyCtrl.value) ? this.headOfFamilyCtrl.value.counterpartyID : null;\r\n        model.departmentId = this.getDepartmentId(this.departmentCtrl.value);\r\n        model.fiscalRegistrationNumber = this.fiscalRegCtrl.value;\r\n        model.counterpartyCompanies = this.getAssociatedCompanies(model, this.associatedCompaniesCtrl.value);\r\n    }\r\n\r\n\r\n    populateValue(model: Counterparty) {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCountry = this.masterdata.countries;\r\n        this.filteredProvince = this.masterdata.provinces;\r\n        this.filteredDepartments = this.masterdata.departments;\r\n        this.filteredCompany = this.masterdata.companies;\r\n        this.filteredAccountManagers = this.accountManagers;\r\n        this.headOfFamilyFiltered = this.masterdata.counterparties;\r\n        this.filteredAccountTypes = this.masterdata.accountTypes;\r\n        this.counterpartyTradeStatusList = this.masterdata.tradeStatus;\r\n\r\n        if (model.countryId) {\r\n            let country = this.filteredCountry.find((country) => country.countryId === model.countryId);\r\n            if (country) {\r\n                model.countryName = country.description;\r\n            }\r\n        }\r\n\r\n        if (model.provinceId) {\r\n            let province = this.filteredProvince.find((province) => province.provinceId === model.provinceId);\r\n            if (province) {\r\n                model.provinceName = province.description;\r\n            }\r\n        }\r\n\r\n        if (model.departmentId) {\r\n            let department = this.filteredDepartments.find((department) => department.departmentId === model.departmentId);\r\n            if (department) {\r\n                model.departmentCode = department.departmentCode;\r\n                model.departmentName = department.description;\r\n            }\r\n            else {\r\n                model.departmentName = '';\r\n            }\r\n        }\r\n        else {\r\n            model.departmentName = '';\r\n        }\r\n\r\n        if (model.associatedCompanies) {\r\n            this.associatedCompanies = model.associatedCompanies;\r\n            let companyName: string = \"\";\r\n            model.associatedCompanies.forEach((comp) => {\r\n                if (!comp.isDeactivated) {\r\n                    let company = this.filteredCompany.find((company) => company.id === comp.companyId);\r\n                    if (company) {\r\n                        comp.companyName = company.companyId;\r\n                    }\r\n                    companyName = comp.companyName + \",\" + companyName;\r\n                }\r\n            });\r\n            companyName = companyName.substr(0, companyName.length - 1);\r\n            this.associatedCompaniesCtrl.patchValue(companyName);\r\n        }\r\n\r\n        if (model.headofFamily) {\r\n            this.headofFamilyControl = this.headOfFamilyFiltered.find((headValue) => headValue.counterpartyID === model.headofFamily);\r\n            this.headOfFamilyCtrl.patchValue(this.headofFamilyControl);\r\n        }\r\n\r\n        if (model.counterpartyAccountTypes) {\r\n            this.checkedAccountTypes = [];\r\n            this.selectedAccountTypes = [];\r\n            model.counterpartyAccountTypes.forEach(element => {\r\n                let accountType = this.filteredAccountTypes.find((accountType) => accountType.accountTypeId === element.accountTypeId);\r\n                if (accountType) {\r\n                    element.name = accountType.name;\r\n                    this.checkedAccountTypes.push(accountType);\r\n                    this.selectedAccountTypes.push(element);\r\n                }\r\n            });\r\n\r\n            this.accountTypeCtrl.patchValue(this.checkedAccountTypes);\r\n        }\r\n\r\n        if (model.counterpartyTradeStatusId) {\r\n            const tradeStatus = this.counterpartyTradeStatusList.find((status) =>\r\n                status.enumEntityId === model.counterpartyTradeStatusId);\r\n            if (tradeStatus) {\r\n                this.tradeStatusCtrl.patchValue(this.counterpartyTradeStatusList.find((status) =>\r\n                    status.enumEntityValue === tradeStatus.enumEntityValue));\r\n            }\r\n        }\r\n\r\n        this.tradingService.getAllTraders()\r\n            .subscribe((traders) => {\r\n                if (traders.value) {\r\n                    this.filteredAccountManagers = traders.value;\r\n                    if (model.acManagerId && this.filteredAccountManagers) {\r\n                        let acManager = this.filteredAccountManagers.find((manager) => manager.userId === model.acManagerId);\r\n                        if (acManager) {\r\n                            model.acManagerName = acManager.samAccountName;\r\n                            this.accountManagerCtrl.patchValue(model.acManagerName);\r\n                        }\r\n                        else {\r\n                            this.accountManagerCtrl.patchValue('');\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n","module.exports = \"<mat-card style=\\\"width: 400px\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Counterparty Main Address</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address Type Name\\\"\\r\\n                       [formControl]=\\\"addressTypeNameCtrl\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address 1\\\"\\r\\n                       [formControl]=\\\"address1Ctrl\\\">\\r\\n                <mat-error *ngIf=\\\"address1Ctrl.hasError('maxlength')\\\">\\r\\n                    Maximum 60 charcters Allowed\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address 2\\\"\\r\\n                       [formControl]=\\\"address2Ctrl\\\">\\r\\n                <mat-error *ngIf=\\\"address2Ctrl.hasError('maxlength')\\\">\\r\\n                    Maximum 60 charcters Allowed\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Address Type Code\\\"\\r\\n                       [matAutocomplete]=\\\"addressCode\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]=\\\"addressTypeCodeCtrl\\\">\\r\\n\\r\\n                <mat-autocomplete #addressCode=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\"\\r\\n                                  (optionSelected)=\\\"onSelectionChanged($event)\\\">\\r\\n                    <mat-option *ngFor=\\\"let addressType of filteredAddressType\\\"\\r\\n                                [value]=\\\"addressType.enumEntityValue\\\">\\r\\n                        {{addressType.enumEntityId}} | {{addressType.enumEntityValue}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-hint *ngIf=\\\"addressTypeCodeCtrl.isRequired\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n                <mat-error *ngIf=\\\"addressTypeCodeCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Zip Code\\\"\\r\\n                       (keypress)=\\\"numberValidation($event)\\\"\\r\\n                       [formControl]=\\\"zipCodeCtrl\\\">\\r\\n                <mat-error *ngIf=\\\"zipCodeCtrl.hasError('maxlength')\\\">\\r\\n                    Maximum 40 digits Allowed\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <div fxFlex=\\\"50%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"City\\\"\\r\\n                           [formControl]=\\\"cityCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"cityCtrl.hasError('maxlength')\\\">\\r\\n                        Maximum 60 charcters Allowed\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"50%\\\"\\r\\n                            [class.isEmpty]=\\\"!provinceCtrl.value\\\"\\r\\n                            [class.required-field]=\\\"provinceCtrl.isRequired\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Province\\\"\\r\\n                       [matAutocomplete]=\\\"provinceCode\\\"\\r\\n                       [formControl]=\\\"provinceCtrl\\\"\\r\\n                       [required]=\\\"provinceCtrl.isRequired\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-autocomplete #provinceCode=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\">\\r\\n                    <mat-option *ngFor=\\\"let province of filteredProvince\\\"\\r\\n                                [value]=\\\"province.description\\\">\\r\\n                        {{province.provinceId}} | {{province.description}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-hint *ngIf=\\\"provinceCtrl.isRequired\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n                <mat-error *ngIf=\\\"provinceCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <div fxFlex=\\\"50%\\\"\\r\\n                 [class.isEmpty]=\\\"!countryCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"countryCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Country\\\"\\r\\n                           [matAutocomplete]=\\\"countryCode\\\"\\r\\n                           [formControl]=\\\"countryCtrl\\\"\\r\\n                           [required]=\\\"countryCtrl.isRequired\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-autocomplete #countryCode=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                        <mat-option *ngFor=\\\"let country of filteredCountry\\\"\\r\\n                                    [value]=\\\"country.description\\\">\\r\\n                            {{country.countryId}} | {{country.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"countryCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"countryCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                    <mat-error *ngIf=\\\"countryCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <mat-list>\\r\\n            <mat-divider></mat-divider>\\r\\n        </mat-list>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Main Email Address\\\"\\r\\n                       [formControl]=\\\"emailCtrl\\\">\\r\\n                <mat-error *ngIf=\\\"emailCtrl.hasError('email')\\\">\\r\\n                    Not a valid email\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"emailCtrl.hasError('maxlength')\\\">\\r\\n                    Maximum 40 charcters Allowed\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           (keypress)=\\\"numberValidation($event)\\\"\\r\\n                           placeholder=\\\"Phone Number\\\"\\r\\n                           [formControl]=\\\"phoneNumberCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"phoneNumberCtrl.hasError('maxlength')\\\">\\r\\n                        Maximum 10 digits Allowed\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           (keypress)=\\\"numberValidation($event)\\\"\\r\\n                           placeholder=\\\"Fax Number\\\"\\r\\n                           [formControl]=\\\"faxNumberCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"faxNumberCtrl.hasError('maxlength')\\\">\\r\\n                        Maximum 40 digits Allowed\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"LDC Region\\\"\\r\\n                       [matAutocomplete]=\\\"ldcRegionCode\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]=\\\"ldcRegionCtrl\\\">\\r\\n\\r\\n                <mat-autocomplete #ldcRegionCode=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\">\\r\\n                    <mat-option *ngFor=\\\"let ldcRegion of filteredLdcRegion\\\"\\r\\n                                [value]=\\\"ldcRegion.description\\\">\\r\\n                        {{ldcRegion.ldcRegionCode}} | {{ldcRegion.description}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-hint *ngIf=\\\"ldcRegionCtrl.isRequired\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n                <mat-error *ngIf=\\\"ldcRegionCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AddressType } from '../../../../../../shared/entities/address-type.entity';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CounterpartyAddress } from '../../../../../../shared/entities/counterparty-address.entity';\r\nimport { Counterparty } from '../../../../../../shared/entities/counterparty.entity';\r\nimport { Country } from '../../../../../../shared/entities/country.entity';\r\nimport { LdcRegion } from '../../../../../../shared/entities/ldc-region.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { Province } from '../../../../../../shared/entities/province.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-main-address-card',\r\n    templateUrl: './main-address-card.component.html',\r\n    styleUrls: ['./main-address-card.component.scss'],\r\n})\r\nexport class MainAddressCardComponent extends BaseFormComponent implements OnInit {\r\n    addressTypeNameCtrl = new AtlasFormControl('addressTypeNameCtrl');\r\n    address1Ctrl = new AtlasFormControl('address1Ctrl');\r\n    address2Ctrl = new AtlasFormControl('address2Ctrl');\r\n    zipCodeCtrl = new AtlasFormControl('zipCodeCtrl');\r\n    cityCtrl = new AtlasFormControl('cityCtrl');\r\n    provinceCtrl = new AtlasFormControl('provinceCtrl');\r\n    countryCtrl = new AtlasFormControl('countryCtrl');\r\n    emailCtrl = new AtlasFormControl('emailCtrl');\r\n    phoneNumberCtrl = new AtlasFormControl('phoneNumberCtrl');\r\n    faxNumberCtrl = new AtlasFormControl('faxNumberCtrl');\r\n    ldcRegionCtrl = new AtlasFormControl('ldcRegionCtrl');\r\n    addressTypeCodeCtrl = new AtlasFormControl('addressTypeCodeCtrl');\r\n    filteredProvince: Province[];\r\n    filteredCountry: Country[];\r\n    filteredLdcRegion: LdcRegion[];\r\n    filteredAddressType: AddressType[];\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Province,\r\n        MasterDataProps.Ports,\r\n        MasterDataProps.ContractTerms,\r\n        MasterDataProps.AddressTypes,\r\n    ];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected dialog: MatDialog,\r\n        private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.filteredProvince = this.masterdata.provinces;\r\n                this.provinceCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredProvince = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.provinces,\r\n                        ['provinceId', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.filteredCountry = this.masterdata.countries;\r\n                this.countryCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredCountry = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.countries,\r\n                        ['countryId', 'description'],\r\n                    );\r\n                });\r\n                this.filteredAddressType = this.masterdata.addressTypes;\r\n                this.addressTypeCodeCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredAddressType = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.addressTypes,\r\n                        ['enumEntityId', 'enumEntityValue'],\r\n                    );\r\n                });\r\n\r\n                this.filteredLdcRegion = this.masterdata.regions;\r\n                this.ldcRegionCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredLdcRegion = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.regions,\r\n                        ['ldcRegionCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.setValidators();\r\n\r\n            });\r\n\r\n        this.addressTypeNameCtrl.disable();\r\n\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            addressTypeNameCtrl: this.addressTypeNameCtrl,\r\n            address1Ctrl: this.address1Ctrl,\r\n            address2Ctrl: this.address2Ctrl,\r\n            zipCodeCtrl: this.zipCodeCtrl,\r\n            cityCtrl: this.cityCtrl,\r\n            provinceCtrl: this.provinceCtrl,\r\n            countryCtrl: this.countryCtrl,\r\n            emailCtrl: this.emailCtrl,\r\n            phoneNumberCtrl: this.phoneNumberCtrl,\r\n            faxNumberCtrl: this.faxNumberCtrl,\r\n            ldcRegionCtrl: this.ldcRegionCtrl,\r\n            addressTypeCodeCtrl: this.addressTypeCodeCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    numberValidation(event: any) {\r\n        const pattern = /[0-9]/;\r\n        const inputChar = String.fromCharCode(event.charCode);\r\n        if (!pattern.test(inputChar)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.provinceCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.provinces,\r\n                    nameof<Province>('description'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.countryCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.countries,\r\n                    nameof<Country>('description'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.ldcRegionCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.regions,\r\n                    nameof<LdcRegion>('ldcRegionCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.addressTypeCodeCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.addressTypes,\r\n                    nameof<AddressType>('enumEntityValue'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.address1Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(60)]),\r\n        );\r\n\r\n        this.address2Ctrl.setValidators(\r\n            Validators.compose([Validators.maxLength(60)]),\r\n        );\r\n\r\n        this.cityCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(60)]),\r\n        );\r\n\r\n        this.zipCodeCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(40)]),\r\n        );\r\n\r\n        this.emailCtrl.setValidators(Validators.compose\r\n            ([Validators.email, Validators.maxLength(40)]),\r\n        );\r\n\r\n        this.faxNumberCtrl.setValidators(Validators.compose\r\n            ([Validators.maxLength(40)]),\r\n        );\r\n\r\n        this.phoneNumberCtrl.setValidators(Validators.compose\r\n            ([Validators.maxLength(10)]),\r\n        );\r\n\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    onSelectionChanged(event: any) {\r\n        const addressType = this.masterdata.addressTypes.find(\r\n            (addType) => addType.enumEntityValue === event.option.value,\r\n        );\r\n        if (addressType) {\r\n            this.addressTypeNameCtrl.patchValue(addressType.enumEntityValue);\r\n        } else {\r\n            this.addressTypeNameCtrl.patchValue('');\r\n        }\r\n    }\r\n\r\n    getCountryId(name: string): number {\r\n        if (name) {\r\n            const country = this.masterdata.countries.find(\r\n                (cn) => cn.description === name,\r\n            );\r\n\r\n            if (country) {\r\n                return country.countryId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAddressTypeCodeId(name: string): number {\r\n        if (name) {\r\n            const addressType = this.masterdata.addressTypes.find(\r\n                (cn) => cn.enumEntityValue === name,\r\n            );\r\n\r\n            if (addressType) {\r\n                return addressType.enumEntityId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getLdcRegionId(name: string): number {\r\n        if (name) {\r\n            const ldcRegion = this.masterdata.regions.find(\r\n                (cn) => cn.description === name,\r\n            );\r\n\r\n            if (ldcRegion) {\r\n                return ldcRegion.ldcRegionId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getProvinceId(name: string): number {\r\n        if (name) {\r\n            const province = this.masterdata.provinces.find(\r\n                (p) => p.description === name,\r\n            );\r\n\r\n            if (province) {\r\n                return province.provinceId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    updateEntity(model: Counterparty, mainAddress: any) {\r\n        const counterpartyAddress: CounterpartyAddress = {} as CounterpartyAddress;\r\n        counterpartyAddress.address1 = this.address1Ctrl.value;\r\n        counterpartyAddress.address2 = this.address2Ctrl.value;\r\n        counterpartyAddress.addressTypeID = this.getAddressTypeCodeId(this.addressTypeCodeCtrl.value);\r\n        counterpartyAddress.addresTypeName = this.addressTypeNameCtrl.value;\r\n        counterpartyAddress.zipCode = this.zipCodeCtrl.value;\r\n        counterpartyAddress.city = this.cityCtrl.value;\r\n        counterpartyAddress.provinceID = this.getProvinceId(this.provinceCtrl.value);\r\n        counterpartyAddress.countryID = this.getCountryId(this.countryCtrl.value);\r\n        counterpartyAddress.mail = this.emailCtrl.value;\r\n        counterpartyAddress.phoneNo = this.phoneNumberCtrl.value;\r\n        counterpartyAddress.faxNo = this.faxNumberCtrl.value;\r\n        counterpartyAddress.ldcRegionId = this.getLdcRegionId(this.ldcRegionCtrl.value);\r\n        counterpartyAddress.main = true;\r\n        if (mainAddress) {\r\n            counterpartyAddress.addressId = mainAddress.addressId;\r\n            counterpartyAddress.randomId = mainAddress.randomId;\r\n        }\r\n\r\n        model.countryId = this.getCountryId(this.countryCtrl.value);\r\n        model.provinceId = this.getProvinceId(this.provinceCtrl.value);\r\n\r\n        model.counterpartyAddresses.push(counterpartyAddress);\r\n    }\r\n\r\n    populateValues(model: CounterpartyAddress) {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredLdcRegion = this.masterdata.regions;\r\n        this.filteredAddressType = this.masterdata.addressTypes;\r\n\r\n        if (model.ldcRegionId) {\r\n            const ldcRegion = this.filteredLdcRegion.find((region) => region.ldcRegionId === model.ldcRegionId);\r\n            if (ldcRegion) {\r\n                model.ldcRegionCode = ldcRegion.ldcRegionCode;\r\n            }\r\n        }\r\n\r\n        if (model.addressTypeID) {\r\n            const address = this.filteredAddressType.find((addressType) => addressType.enumEntityId === model.addressTypeID);\r\n            if (address) {\r\n                model.addressTypeCode = address.enumEntityValue;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Third System Party Codes</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"mdmIdCtrl\\\"\\r\\n                                  (keypress)=\\\"mdmIdValidation($event)\\\"\\r\\n                                  [errorMap]=\\\"numberErrorMap\\\"\\r\\n                                  (blur)=\\\"onBlur()\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  label=\\\"Mdm Id\\\">\\r\\n                </atlas-form-input>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-dropdown-select-list fxFlex='100%'\\r\\n                                            label=\\\"Mdm Category Code\\\"\\r\\n                                            [fieldControl]=\\\"mdmCategoryCodeCtrl\\\"\\r\\n                                            [readonly]=\\\"true\\\"\\r\\n                                            [options]=\\\"mdmCategories\\\"\\r\\n                                            isEditable=\\\"true\\\"\\r\\n                                            (optionSelected)=\\\"optionSelected($event)\\\"\\r\\n                                            [selectProperties]=\\\"mdmCategoriesSelect\\\"\\r\\n                                            [defaultSelected]=\\\"checkedMdmCategories\\\"\\r\\n                                            multiselect=\\\"true\\\">\\r\\n                </atlas-dropdown-select-list>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                                  [fieldControl]=\\\"c2cCodeCtrl\\\"\\r\\n                                  [isEditable]=\\\"true\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  label=\\\"C2C Code\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control'\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { Counterparty } from '../../../../../../shared/entities/counterparty.entity';\r\nimport { UtilService } from '../../../../../../shared/services/util.service';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MdmCategory } from '../../../../../../shared/entities/mdm-Category.entity';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CounterpartyMdmCategory } from '../../../../../../shared/entities/counterparty-mdm-category.entity';\r\nimport { MdmCategoryAccountTypeMapping } from '../../../../../../shared/mdmCategory-account-mapping-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-third-system-codes-card',\r\n    templateUrl: './third-system-codes-card.component.html',\r\n    styleUrls: ['./third-system-codes-card.component.scss']\r\n})\r\n\r\nexport class ThirdSystemCodesCardComponent extends BaseFormComponent implements OnInit {\r\n    mdmIdCtrl = new AtlasFormControl('MdmId');\r\n    mdmCategoryCodeCtrl = new AtlasFormControl('MdmCategoryCode');\r\n    c2cCodeCtrl = new AtlasFormControl('C2cCode');\r\n    counterpartiesList: Counterparty[];\r\n    counterpartiesListFiltered: Counterparty[];\r\n    filteredMdmCategories: MdmCategory[];\r\n    selectedMdmCategories: CounterpartyMdmCategory[];\r\n    mdmCategories: MdmCategory[];\r\n    checkedMdmCategories: MdmCategory[];\r\n    mdmCategoriesSelect: string[] = ['mdmCategoryCode'];\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Counterparties,\r\n        MasterDataProps.MdmCategories\r\n    ];\r\n    @Input() isEditMode: boolean = false;\r\n    isAdmin: boolean = false;\r\n    inputErrorMap: Map<string, string> = new Map();\r\n    numberErrorMap: Map<string, string> = new Map();\r\n    counterPartyId: number;\r\n    @Output() selectedMdmCodesOptions = new EventEmitter<any>();\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService,\r\n        protected masterdataService: MasterdataService, ) {\r\n        super(formConfigurationProvider);\r\n        this.inputErrorMap.set('maxlength', 'Maximum 9 charcters Allowed');\r\n        this.numberErrorMap.set('maxlength', 'Maximum 9 digits Allowed');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.counterPartyId = Number(this.route.snapshot.paramMap.get('counterpartyID'));\r\n        if (this.isEditMode && !this.isAdmin) {\r\n            this.mdmIdCtrl.disable();\r\n            this.mdmCategoryCodeCtrl.disable();\r\n        }\r\n\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n                this.filteredMdmCategories = this.masterdata.mdmCategories;\r\n                this.mdmCategories = this.masterdata.mdmCategories;\r\n            });\r\n\r\n        this.setValidators();\r\n    }\r\n\r\n    setValidators() {\r\n        this.c2cCodeCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(9)]),\r\n        );\r\n\r\n        this.mdmIdCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(9)]),\r\n        );\r\n    }\r\n\r\n    mdmIdValidation(event: any) {\r\n        const pattern = /[0-9]/;\r\n        let inputChar = String.fromCharCode(event.charCode);\r\n        if (!pattern.test(inputChar)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onBlur() {\r\n        if (this.mdmIdCtrl.value) {\r\n            if (this.counterPartyId) {\r\n                let mdmID = this.masterdata.counterparties.find((value) =>\r\n                    value.mdmId === Number(this.mdmIdCtrl.value) &&\r\n                    value.counterpartyID !== this.counterPartyId);\r\n                if (mdmID) {\r\n                    this.snackbarService.informationSnackBar('MDM ID should be unique');\r\n                    this.mdmIdCtrl.patchValue(null);\r\n                }\r\n            }\r\n            else {\r\n                let mdmID = this.masterdata.counterparties.find((value) =>\r\n                    value.mdmId === Number(this.mdmIdCtrl.value));\r\n                if (mdmID) {\r\n                    this.snackbarService.informationSnackBar('MDM ID should be unique');\r\n                    this.mdmIdCtrl.patchValue(null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getValues(model: Counterparty) {\r\n        model.mdmId = this.mdmIdCtrl.value;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            mdmIdCtrl: this.mdmIdCtrl,\r\n            mdmCategoryCodeCtrl: this.mdmCategoryCodeCtrl,\r\n            c2cCodeCtrl: this.c2cCodeCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(model: Counterparty) {\r\n        model.c2CCode = this.c2cCodeCtrl.value;\r\n        model.mdmId = this.mdmIdCtrl.value\r\n        model.counterpartyMdmCategory = this.mdmCategoryCodeCtrl.value;\r\n    }\r\n\r\n    optionSelected(data: any) {\r\n        this.selectedMdmCategories = [];\r\n        data.forEach(element => {\r\n            this.selectedMdmCategories.push(element);\r\n        });\r\n\r\n        this.selectedMdmCodesOptions.emit(this.selectedMdmCategories);\r\n    }\r\n\r\n    populateValue(model: Counterparty) {\r\n        if (model.mdmId) {\r\n            this.mdmIdCtrl.patchValue(model.mdmId);\r\n        }\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredMdmCategories = this.masterdata.mdmCategories;\r\n\r\n        if (model.counterpartyMdmCategory) {\r\n            this.checkedMdmCategories = [];\r\n            this.selectedMdmCategories = [];\r\n            model.counterpartyMdmCategory.forEach(element => {\r\n                let mdmCategory = this.filteredMdmCategories.find((mdmCategory) => mdmCategory.mdmCategoryId === element.mdmCategoryID);\r\n                if (mdmCategory) {\r\n                    element.mdmCategoryCode = mdmCategory.mdmCategoryCode;\r\n                    this.checkedMdmCategories.push(mdmCategory);\r\n                    this.selectedMdmCategories.push(element);\r\n                }\r\n            });\r\n            this.mdmCategoryCodeCtrl.patchValue(this.checkedMdmCategories);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxFlex=\\\"50%\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <span class=\\\"fill-space\\\"></span>\\r\\n                    <button mat-raised-button\\r\\n                            [disabled]=\\\"isCreateMode\\\"\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"navigateCListReport()\\\">\\r\\n                        CLIST REPORTS\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <button mat-raised-button\\r\\n                            [disabled]=\\\"isCreateMode\\\"\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"navigateTradeReport()\\\">\\r\\n                        TRADE REPORTS\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../../app/core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-capture-form-report-tab',\r\n    templateUrl: './counterparty-capture-form-report-tab.component.html',\r\n    styleUrls: ['./counterparty-capture-form-report-tab.component.scss']\r\n})\r\nexport class CounterpartyCaptureFormReportTabComponent implements OnInit {\r\n    @Input() counterPartyId: number;\r\n    @Input() isCreateMode: boolean = false;\r\n    constructor(private companyManager: CompanyManagerService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    navigateCListReport() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/reporting/globalreports/clientreport', this.counterPartyId]);\r\n    }\r\n\r\n    navigateTradeReport() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/reporting/globalreports/trade', this.counterPartyId]);\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxFlex=\\\"50%\\\">\\r\\n        <h2 class=\\\"atlas-grid-card-title\\\"> VAT Registrations numbers</h2>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"end\\\"\\r\\n         fxFlex=\\\"50%\\\">\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"start end \\\">\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"end start \\\">\\r\\n                <button mat-button\\r\\n                        [disabled]=\\\"isViewMode\\\"\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onAddRowButtonClicked()\\\">Add New VAT</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div>\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div ag-grid=\\\"taxGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width:100%; height: 100%;\\\">\\r\\n                <ag-grid-angular style=\\\"height: 100%; width:100%; \\\"\\r\\n                                 ag-grid=\\\"taxGridOptions\\\"\\r\\n                                 [rowData]=\\\"counterpartyTaxes\\\"\\r\\n                                 [columnDefs]=\\\"taxGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [suppressDragLeaveHidesColumns]=\\\"true\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 enableFilter\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [gridOptions]=\\\"taxGridOptions\\\"\\r\\n                                 [singleClickEdit]=\\\"true\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TaxListDisplayView } from './tax-ag-grid-row';\r\nimport { CounterpartyTax } from '../../../../../shared/entities/counterparty-tax.entity';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { MatDialog } from '@angular/material';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { AgGridAutocompleteComponent } from '../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TaxGridActionComponent } from './tax-grid-action/tax-grid-action.component';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-capture-form-tax-info-tab',\r\n    templateUrl: './counterparty-capture-form-tax-info-tab.component.html',\r\n    styleUrls: ['./counterparty-capture-form-tax-info-tab.component.scss']\r\n})\r\n\r\nexport class CounterpartyCaptureFormTaxInfoTabComponent extends BaseFormComponent implements OnInit {\r\n    company: string;\r\n    masterdata: MasterData;\r\n    taxGridCols: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    taxGridOptions: agGrid.GridOptions = {};\r\n    countryList = new Array<string>();\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    gridContext1 = {\r\n        gridEditable: false,\r\n    };\r\n    checkIfFavorite: boolean = false;\r\n    taxGridContextualMenuActions: AgContextualMenuAction[];\r\n    taxMenuActions: { [key: string]: string } = {\r\n        deleteTax: 'delete',\r\n    };\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    sideNavOpened: boolean = false;\r\n    counterpartyTaxes: CounterpartyTax[];\r\n    isDeleteDisabled: boolean = false;\r\n    @Input() isViewMode: boolean = false;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected masterdataService: MasterdataService,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog, ) {\r\n        super(formConfigurationProvider);\r\n        this.taxGridOptions = {\r\n            context: { componentParent: this },\r\n        };\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.masterdata.countries.forEach((element) => {\r\n            this.countryList.push(element.countryCode);\r\n        });\r\n        this.init();\r\n        this.initializeGridColumns();\r\n        this.initTaxsGridRows();\r\n    }\r\n\r\n    init() {\r\n        const newTaxRow = new TaxListDisplayView();\r\n        this.taxGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.taxMenuActions.deleteTax,\r\n                disabled: this.isDeleteDisabled,\r\n            },\r\n        ];\r\n    }\r\n\r\n    updateAllRow(rowIndex) {\r\n        if (!this.isViewMode) {\r\n            this.gridApi.forEachNode((rowNode, index) => {\r\n                rowNode.setDataValue(\"main\", false)\r\n                if (index == rowIndex) {\r\n                    rowNode.data.main = true;\r\n                }\r\n            });\r\n        }\r\n        this.gridApi.refreshView();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.gridApi = this.agGridOptions.api;\r\n        this.gridColumnApi = this.agGridOptions.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onAddRowButtonClicked() {\r\n        const newItem = this.createNewRowData();\r\n        const res = this.gridApi.updateRowData({ add: [newItem] });\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newTaxRow = new TaxListDisplayView();\r\n        return newTaxRow;\r\n    }\r\n\r\n    initTaxsGridRows() {\r\n        if (this.counterpartyTaxes) {\r\n            this.counterpartyTaxes = this.counterpartyTaxes.filter((p) => p.isDeactivated === false);\r\n        }\r\n    }\r\n\r\n    isGridEditable(params) {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    handleAction(action: string, tax: TaxListDisplayView) {\r\n        switch (action) {\r\n\r\n            case this.taxMenuActions.deleteTax:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Tax Deletion',\r\n                        text: 'Do you confirm the deletion?',\r\n                        okButton: 'Yes',\r\n                        cancelButton: 'No',\r\n                    },\r\n                });\r\n                const confirmationDeleteSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.gridApi.updateRowData({ remove: [tax] });\r\n                        this.taxGridOptions.api.refreshView();\r\n                        this.counterpartyTaxes.forEach((row) => {\r\n                            if (row.counterpartyTaxId === tax.counterpartyTaxId) {\r\n                                row.isDeactivated = true;\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n                this.subscriptions.push(confirmationDeleteSubscription);\r\n                break;\r\n            default: this.assertUnreachable(action);\r\n        }\r\n    }\r\n\r\n    assertUnreachable(x): never {\r\n        throw new Error('Unknown action');\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.taxGridOptions = {\r\n            context: this.isViewMode ? this.gridContext1 : this.gridContext,\r\n        };\r\n        this.taxGridCols = [\r\n            {\r\n                headerName: 'VAT Registration',\r\n                field: 'vatRegistrationNumber',\r\n                colId: 'vatRegistrationNumber',\r\n                width: 300,\r\n                minWidth: 300,\r\n                maxWidth: 300,\r\n                editable: this.isViewMode ? false : true,\r\n                cellRenderer: this.requiredCell,\r\n\r\n            },\r\n            {\r\n                headerName: 'Country Code',\r\n                field: 'countryId',\r\n                colId: 'countryId',\r\n                width: 600,\r\n                minWidth: 600,\r\n                maxWidth: 600,\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    options: this.masterdata.countries,\r\n                    valueProperty: 'countryId',\r\n                    codeProperty: 'description',\r\n                    displayProperty: 'countryCode',\r\n                    isRequired: (params) => {\r\n                        return true;\r\n                    },\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: '',\r\n                field: 'main',\r\n                cellRendererFramework: TaxGridActionComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                },\r\n                width: 100,\r\n                minWidth: 100,\r\n                maxWidth: 100,\r\n            },\r\n            {\r\n                headerName: '',\r\n                field: 'isDeactivated',\r\n                colId: 'isDeactivated',\r\n                hide: this.isViewMode ? true : false,\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.isViewMode ? this.gridContext1 : this.gridContext,\r\n                    },\r\n                    menuActions: this.taxGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 100,\r\n                minWidth: 100,\r\n                maxWidth: 100,\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        const counterpartyTaxesValidations = this.counterpartyTaxes;\r\n        this.counterpartyTaxes = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (!(rowData.data.vatRegistrationNumber && rowData.data.countryId)) {\r\n                isValid = false;\r\n            }\r\n            else {\r\n                let taxListDisplayView = new TaxListDisplayView();\r\n                taxListDisplayView.counterpartyTaxId = rowData.data.counterpartyTaxId;\r\n                taxListDisplayView.vatRegistrationNumber = rowData.data.vatRegistrationNumber;\r\n                taxListDisplayView.countryId = rowData.data.countryId;\r\n                taxListDisplayView.main = rowData.data.main;\r\n                this.counterpartyTaxes.push(taxListDisplayView);\r\n            }\r\n        });\r\n\r\n        if (counterpartyTaxesValidations && counterpartyTaxesValidations.length > 0 &&\r\n            this.counterpartyTaxes && this.counterpartyTaxes.length > 0) {\r\n            counterpartyTaxesValidations.forEach((obj) => {\r\n                const objExists = this.counterpartyTaxes.find((cp) => cp.counterpartyTaxId === obj.counterpartyTaxId);\r\n                if (!objExists && obj.isDeactivated) {\r\n                    this.counterpartyTaxes.push(obj);\r\n                }\r\n            });\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n}\r\n","import { CounterpartyTax } from '../../../../../shared/entities/counterparty-tax.entity';\r\n\r\nexport class TaxListDisplayView {\r\n    counterpartyTaxId: number;\r\n    counterpartyId: number;\r\n    vatRegistrationNumber: string;\r\n    countryId: number;\r\n    main: boolean;\r\n    isDeactivated: boolean;\r\n}","module.exports = \"<button mat-icon-button\\r\\n        type=\\\"button\\\"\\r\\n        (click)='setFavorite(rowIndex)'\\r\\n        matTooltip=\\\"Make favorite\\\">\\r\\n    <mat-icon [ngClass]=\\\"isFavorite ? 'heart-saved' : 'heart-not-saved'\\\">\\r\\n        {{isFavorite ? 'favorite' : 'favorite_border'}}\\r\\n    </mat-icon>\\r\\n</button>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\nimport { IAfterGuiAttachedParams } from 'ag-grid-community';\r\nimport { TaxListDisplayView } from '../tax-ag-grid-row';\r\n\r\n@Component({\r\n    selector: 'atlas-tax-grid-action',\r\n    templateUrl: './tax-grid-action.component.html',\r\n    styleUrls: ['./tax-grid-action.component.scss']\r\n})\r\nexport class TaxGridActionComponent implements ICellRendererAngularComp {\r\n    isFavorite: boolean = false;\r\n    selectedFilterSet: TaxListDisplayView;\r\n    public params: any;\r\n    rowIndex: any;\r\n    cellValue: any;\r\n\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.rowIndex = params.rowIndex;\r\n        this.cellValue = params.value;\r\n        this.params.value ? this.isFavorite = true : this.isFavorite = false;\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setFavorite(rowIndex) {\r\n        this.params.context.componentParent.updateAllRow(rowIndex);\r\n    }\r\n\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n\r\n}\r\n","module.exports = \"<atlas-referential-counterparty-tab #referentialComponent\\r\\n                                    (localViewMode)=\\\"onLocalViewModeCalled($event)\\\">\\r\\n</atlas-referential-counterparty-tab>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <atlas-masterdata-user-preferences-input fxFlex=\\\"60%\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"accountReferenceCtrl\\\"\\r\\n                                                     (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                                     [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                     label=\\\"Counterparty\\\"\\r\\n                                                     displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                     [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                     [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                     gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                     (optionSelected)=\\\"onCounterpartyIdSelected($event)\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n            <atlas-dropdown-select fxFlex='90%'\\r\\n                                   [label]=\\\"'Account Type'\\\"\\r\\n                                   [fieldControl]=\\\"counterPartyTypeCtrl\\\"\\r\\n                                   (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                   [errorMap]=\\\"snapshotErrorMap\\\"\\r\\n                                   isEditable=true\\r\\n                                   [options]=\\\"filteredAccTypesList\\\"\\r\\n                                   displayProperty=\\\"name\\\"\\r\\n                                   [selectProperties]=\\\"['name']\\\"\\r\\n                                   [isAutocompleteActivated]=\\\"isAutoCompleteActivated\\\"></atlas-dropdown-select>\\r\\n\\r\\n\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-list-and-search [gridCode]=\\\"gridCode\\\"\\r\\n                           [gridTitle]=\\\"'Counterparties'\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           (rowClicked)=\\\"onCounterPartyRowClicked($event)\\\"\\r\\n                           (configurationLoaded)=\\\"onConfigurationLoaded()\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [pageSize]=\\\"100\\\"\\r\\n                           [hasQuickSum]=\\\"false\\\"\\r\\n                           [hasGrouping]=\\\"true\\\"\\r\\n                           toogleText=\\\"Show Duplicate Counterparty data\\\"\\r\\n                           #listAndSearchComponent\\r\\n                           class=\\\"default-height\\\">\\r\\n    </atlas-list-and-search>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ListAndSearchComponent } from '../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AccountType } from '../../../shared/entities/account-type.entity';\r\nimport { Counterparty } from '../../../shared/entities/counterparty.entity';\r\nimport { ListAndSearchFilter } from '../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterDataProps } from '../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { ListAndSearchFilterType } from '../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { ReferentialCounterpartiesDataLoader } from '../../../shared/services/list-and-search/referentialCounterparties-data-loader';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { ReferentialCounterpartyTabComponent } from '../referential-counterparty-tab/referential-counterparty-tab.component';\r\n\r\n@Component({\r\n    selector: 'atlas-referential-counterparties',\r\n    providers: [ReferentialCounterpartiesDataLoader],\r\n    templateUrl: './referential-counterparties.component.html',\r\n    styleUrls: ['./referential-counterparties.component.scss'],\r\n})\r\nexport class ReferentialCounterpartiesComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    @ViewChild('referentialComponent') referentialComponent: ReferentialCounterpartyTabComponent;\r\n\r\n    gridCode = 'referentialCounterPartiesGrid';\r\n    company: string;\r\n    accountReferenceCtrl: FormControl = new FormControl();\r\n    counterPartyTypeCtrl: FormControl = new FormControl();\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    filteredAccTypesList: AccountType[];\r\n    allAccTypesList: AccountType[];\r\n    masterdata: MasterData;\r\n\r\n    snapshotErrorMap: Map<string, string> = new Map<string, string>();\r\n    filteredCounterPartyList: Counterparty[];\r\n    counterpartyValue: string;\r\n    clientNameValue: string;\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Counterparties];\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n\r\n    counterpartyId: number;\r\n    searchedCounterpartyCode: string;\r\n    isAutoCompleteActivated: boolean = true;\r\n    isLocalViewModeSelected: boolean = false;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        private companyManager: CompanyManagerService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        public dataLoader: ReferentialCounterpartiesDataLoader,\r\n        private titleService: TitleService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filterCounterparties();\r\n        this.allAccTypesList = this.masterData.accountTypes;\r\n        this.filteredAccTypesList = this.masterData.accountTypes;\r\n        this.counterPartyTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredAccTypesList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.allAccTypesList,\r\n                ['name'],\r\n            );\r\n        });\r\n    }\r\n\r\n    filterCounterparties() {\r\n        this.searchedCounterpartyCode = this.counterpartyValue;\r\n        let counterpartyList: Counterparty[] = [];\r\n\r\n        this.filteredCounterPartyList = this.masterData.counterparties;\r\n\r\n        counterpartyList = this.filteredCounterPartyList;\r\n        this.accountReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                counterpartyList,\r\n                ['counterpartyCode', 'description'],\r\n            );\r\n            if (this.accountReferenceCtrl.valid) {\r\n                // this.onCounterpartyIdSelected(this.accountReferenceCtrl.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    onCounterpartyIdSelected(value: Counterparty) {\r\n        this.counterpartyValue = this.accountReferenceCtrl.value;\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        if (this.accountReferenceCtrl.value && typeof this.accountReferenceCtrl.value === 'object') {\r\n            this.accountReferenceCtrl.patchValue(this.accountReferenceCtrl.value);\r\n        }\r\n        if (this.counterPartyTypeCtrl.value && typeof this.counterPartyTypeCtrl.value === 'object') {\r\n            this.counterPartyTypeCtrl.patchValue(this.counterPartyTypeCtrl.value);\r\n        }\r\n\r\n        if (!this.listAndSearchComponent) {\r\n            return;\r\n        }\r\n\r\n        this.additionalFilters = [];\r\n        const accountRefField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'CounterpartyCode');\r\n        const accountRefTypeField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'CounterpartyType');\r\n\r\n        if (this.accountReferenceCtrl.value) {\r\n            const filterAccountsRef = new ListAndSearchFilter();\r\n            let filterAccountRef;\r\n\r\n            if (accountRefField) {\r\n                filterAccountRef = new ListAndSearchFilter();\r\n                filterAccountRef.fieldId = accountRefField.fieldId;\r\n                filterAccountRef.fieldName = accountRefField.fieldName;\r\n                filterAccountRef.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.accountReferenceCtrl.value.counterpartyCode + '%',\r\n                };\r\n                filterAccountRef.isActive = true;\r\n                filterAccountsRef.logicalOperator = 'or';\r\n                filterAccountsRef.clauses = [filterAccountRef];\r\n                this.additionalFilters.push(filterAccountsRef);\r\n            }\r\n\r\n        }\r\n        if (this.counterPartyTypeCtrl.value && accountRefTypeField) {\r\n            const filterContractNo = new ListAndSearchFilter();\r\n            filterContractNo.fieldId = accountRefTypeField.fieldId;\r\n            filterContractNo.fieldName = accountRefTypeField.fieldName;\r\n            filterContractNo.predicate = {\r\n                filterType: ListAndSearchFilterType.Text,\r\n                operator: 'eq',\r\n                value1: this.counterPartyTypeCtrl.value.name + '%',\r\n            };\r\n            filterContractNo.isActive = true;\r\n            this.additionalFilters.push(filterContractNo);\r\n        }\r\n\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n\r\n    }\r\n\r\n    onCounterPartyRowClicked(event) {\r\n        if (event) {\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/referential/counterparty/display',\r\n            event.data.counterpartyID]);\r\n        }\r\n    }\r\n\r\n    onLocalViewModeCalled(event: any) {\r\n        if (event && event === 1) {\r\n            this.isLocalViewModeSelected = true;\r\n            this.listAndSearchComponent.agGridColumnApi.setColumnVisible('c2CCode', true);\r\n            this.listAndSearchComponent.agGridColumnApi.setColumnVisible('tradeStatus', true);\r\n        } else {\r\n            this.isLocalViewModeSelected = false;\r\n            this.listAndSearchComponent.agGridColumnApi.setColumnVisible('c2CCode', false);\r\n            this.listAndSearchComponent.agGridColumnApi.setColumnVisible('tradeStatus', false);\r\n        }\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n    onConfigurationLoaded() {\r\n        this.listAndSearchComponent.columnConfiguration.filter((colProperties) =>\r\n            colProperties.fieldName === 'C2CCode'||  colProperties.fieldName ==='TradeStatus'  || colProperties.fieldName === 'IsDeactivated',\r\n        ).forEach((colProperties) => colProperties.isVisible = this.isLocalViewModeSelected);\r\n    }\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\"\\r\\n         *ngIf=\\\"isEditCounterpartyPrivilege\\\">\\r\\n        <button mat-raised-button\\r\\n                class=\\\"fab-text-button\\\"\\r\\n                color=\\\"accent\\\"\\r\\n                [matMenuTriggerFor]=\\\"menu\\\">\\r\\n            <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n            COUNTERPARTY ACTIONS\\r\\n        </button>\\r\\n        <mat-menu #menu=\\\"matMenu\\\"\\r\\n                  class=\\\"floating-menu has-header\\\">\\r\\n            <button mat-menu-item\\r\\n                    class=\\\"menu-header\\\">\\r\\n                <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n                <span>COUNTERPARTY ACTIONS</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onCreateCounterpartyButtonClicked()\\\">\\r\\n                <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n                Create Counterparty\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onCreateBulkCounterpartyButtonClicked()\\\">\\r\\n                <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n                Bulk Amendment\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"1%\\\">\\r\\n        <mat-tab-group (selectedIndexChange)=\\\"onSelectModeChanged($event)\\\"\\r\\n                       aria-label=\\\"Contract Type\\\"\\r\\n                       mat-align-tabs=\\\"start\\\"\\r\\n                       [value]=\\\"selectedCounterpartyDisplayVal\\\">\\r\\n            <mat-tab value=\\\"Global\\\"\\r\\n                     [checked]=\\\"true\\\"\\r\\n                     label=\\\"Global View Mode\\\">\\r\\n            </mat-tab>\\r\\n            <mat-tab value=\\\"Local\\\"\\r\\n                     label=\\\"Local View Mode\\\">\\r\\n            </mat-tab>\\r\\n            <mat-tab>\\r\\n                <ng-template mat-tab-label>\\r\\n                    <label [matMenuTriggerFor]=\\\"reports\\\"\\r\\n                           (click)=\\\"$event.stopPropagation()\\\">\\r\\n                        Reports\\r\\n                    </label>\\r\\n                    <mat-menu #reports=\\\"matMenu\\\"\\r\\n                              [overlapTrigger]=\\\"false\\\"\\r\\n                              xPosition=\\\"after\\\">\\r\\n                        <span *ngFor=\\\"let item of filteredTemplates\\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"OnReportClick(item)\\\">\\r\\n                                {{item.name}}\\r\\n                            </button>\\r\\n                        </span>\\r\\n                    </mat-menu>\\r\\n                </ng-template>\\r\\n            </mat-tab>\\r\\n        </mat-tab-group>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".header-tab {\\n  margin-bottom: 40px; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n.menu-header:hover {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header:hover mat-icon {\\n    color: white; }\\n\\n.floating-menu {\\n  top: -1px; }\\n\\n.toggle-button-counterparty {\\n  margin-left: 77px;\\n  margin-top: 60px; }\\n\\n.mat-button-toggle.mat-button-toggle-checked {\\n  background-color: #53c234 !important;\\n  color: white !important; }\\n\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { PhysicalDocumentTemplate } from '../../../shared/entities/document-template.entity';\r\nimport { GenericReportViewerComponent } from '../../../shared/components/generic-report-viewer/generic-report-viewer.component';\r\nimport { MatDialog } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-referential-counterparty-tab',\r\n    templateUrl: './referential-counterparty-tab.component.html',\r\n    styleUrls: ['./referential-counterparty-tab.component.scss']\r\n})\r\nexport class ReferentialCounterpartyTabComponent implements OnInit {\r\n\r\n    selectedCounterpartyDisplayVal: string;\r\n    company: string;\r\n    isEditCounterpartyPrivilege: boolean = false;\r\n    @Output() readonly localViewMode = new EventEmitter();\r\n    filteredTemplates: PhysicalDocumentTemplate[] = new Array<PhysicalDocumentTemplate>();\r\n\r\n\r\n    constructor(private route: ActivatedRoute, private router: Router,\r\n        protected securityService: SecurityService, private authorizationService: AuthorizationService,\r\n        private companyManager: CompanyManagerService, protected documentService: DocumentService,\r\n        protected dialog: MatDialog, ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.selectedCounterpartyDisplayVal = 'Global view Mode';\r\n\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Referential')) {\r\n\r\n                let permissionLevel: number;\r\n                permissionLevel = this.authorizationService.getPermissionLevel(this.company, 'TradingAndExecution', 'Referential');\r\n                if (permissionLevel == PermissionLevels.ReadWrite) {\r\n                    this.isEditCounterpartyPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'TradingAndExecution');\r\n                }\r\n            }\r\n        });\r\n        const documentType = 76;\r\n        this.documentService.getTemplates(documentType, 'Counterparties').subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n        });\r\n\r\n    }\r\n    onCreateCounterpartyButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/referential/counterparty/capture']);\r\n    }\r\n    onCreateBulkCounterpartyButtonClicked() {\r\n        this.router.navigate([this.company + '/referential/tradeexecution/counterparties/bulkamendment']);\r\n    }\r\n\r\n    onSelectModeChanged(event: any) {\r\n        this.localViewMode.emit(event);\r\n\r\n    }\r\n\r\n    OnReportClick(data: any) {\r\n\r\n        const openTradepnlReportDialog = this.dialog.open(GenericReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: data.name,\r\n                reportPath: data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n\r\n\r\n}\r\n","module.exports = \"<h2>{{popupTitle}} {{dialogData.masterdataName}} to companies</h2>\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <div ag-grid=\\\"agGridOptions\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             domLayout=autoHeight\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [rowData]=\\\"agGridRows\\\"\\r\\n                             [columnDefs]=\\\"companyGridCols\\\"\\r\\n                             [gridOptions]=\\\"agGridOptions\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             [headerHeight]=\\\"atlasAgGridParam.headerHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCancelButtonClicked()\\\">Cancel</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">Save</button>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CompanyActivation } from '../../../../shared/entities/company-activation.entity';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { AgGridCheckboxTriStateComponent } from './../../../../shared/components/ag-grid/checkbox-tri-state/ag-grid-checkbox-tri-state.component';\r\nimport { CompanyAssignment } from './../../../../shared/entities/company-assignment.entity';\r\nimport { ReferentialMasterdataMenuActions } from './referential-masterdata-menu-actions.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-assign-masterdata-dialog-box',\r\n    templateUrl: './assign-masterdata-dialog-box.component.html',\r\n    styleUrls: ['./assign-masterdata-dialog-box.component.scss'],\r\n})\r\nexport class AssignMasterdataDialogBoxComponent implements OnInit {\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridApi: agGrid.GridApi;\r\n    columnAPI: agGrid.ColumnApi;\r\n    companyGridCols: agGrid.ColDef[] = [];\r\n    agGridRows: any[];\r\n    dialogData: {\r\n        masterdataName: string,\r\n        actionType: string,\r\n        selected: any[],\r\n    };\r\n    popupTitle: string;\r\n    companies: Company[];\r\n    company: string;\r\n\r\n    constructor(\r\n        protected companyManager: CompanyManagerService,\r\n        private agGridService: AgGridService,\r\n        public thisDialogRef: MatDialogRef<AssignMasterdataDialogBoxComponent>,\r\n        protected masterDataService: MasterdataService,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            masterdataName: string,\r\n            actionType: string,\r\n            selected: number[],\r\n        },\r\n    ) {\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.dialogData = data;\r\n        this.popupTitle = this.dialogData.actionType === 'assign' ? 'Assign' : 'Deactivate';\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.agGridService.getAgGridParam();\r\n        this.initCompanyGridCols();\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        switch (this.dialogData.actionType) {\r\n            case ReferentialMasterdataMenuActions.assign:\r\n                this.masterDataService.getMasterDataAssignments(this.data.masterdataName, this.data.selected).subscribe(\r\n                    (companyAssignments: CompanyAssignment[]) => {\r\n                        this.agGridRows = companyAssignments;\r\n                        this.agGridRows.forEach((row) => {\r\n                            row.originalAssignmentState = row.assignmentState;\r\n                            row.isTouched = false;\r\n                        });\r\n                    });\r\n                break;\r\n            case ReferentialMasterdataMenuActions.deactivate:\r\n                this.masterDataService.getMasterDataActivated(this.data.masterdataName, this.data.selected).subscribe(\r\n                    (companyActivations: CompanyActivation[]) => {\r\n                        this.agGridRows = companyActivations;\r\n                        this.agGridRows.forEach((row) => {\r\n                            row.originalActivationState = row.activationState;\r\n                            row.isTouched = false;\r\n                        });\r\n                    });\r\n                break;\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        params.columnDefs = this.companyGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.columnAPI = this.agGridOptions.columnApi;\r\n        this.agGridService.sizeColumns(this.agGridOptions);\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.thisDialogRef.close(this.agGridRows.filter((row) => row.isTouched));\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n\r\n    initCompanyGridCols() {\r\n        let fieldState;\r\n        let originalFieldState;\r\n        let headerName = '';\r\n        let fixWidth;\r\n        switch (this.dialogData.actionType) {\r\n            case ReferentialMasterdataMenuActions.assign:\r\n                fieldState = 'assignmentState';\r\n                originalFieldState = 'originalAssignmentState';\r\n                fixWidth = 60;\r\n                break;\r\n            case ReferentialMasterdataMenuActions.deactivate:\r\n                fieldState = 'activationState';\r\n                originalFieldState = 'originalActivationState';\r\n                headerName = 'Is Active';\r\n                fixWidth = 120;\r\n                break;\r\n        }\r\n        this.companyGridCols = [\r\n            {\r\n                headerName,\r\n                colId: 'selection',\r\n                field: fieldState,\r\n                cellRendererFramework: AgGridCheckboxTriStateComponent,\r\n                cellRendererParams: {\r\n                    disabled: false,\r\n                    originalCheckStatusField: originalFieldState,\r\n                    onCellValueChanged: (params) => { params.data.isTouched = true; },\r\n                },\r\n                minWidth: fixWidth,\r\n                maxWidth: fixWidth,\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'Company',\r\n                colId: 'companyCode',\r\n                field: 'companyCode',\r\n            },\r\n        ];\r\n    }\r\n}\r\n","export enum ReferentialMasterdataMenuActions {\r\n    deleteRows = 'delete',\r\n    assign = 'assign',\r\n    deactivate = 'deactivate',\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav mat-tab-nav-bar>\\r\\n            <a mat-tab-link\\r\\n               (click)=\\\"onSelectedIndexChanged('global')\\\"\\r\\n               [active]=\\\"viewModeGlobal\\\"\\r\\n               *ngIf=\\\"isGlobal\\\">\\r\\n                Global View Mode\\r\\n            </a>\\r\\n            <a mat-tab-link\\r\\n               (click)=\\\"onSelectedIndexChanged('local')\\\"\\r\\n               [active]=\\\"!viewModeGlobal\\\"\\r\\n               *ngIf=\\\"isLocal\\\">\\r\\n                Local View Mode\\r\\n            </a>\\r\\n            <a mat-tab-link\\r\\n               [matMenuTriggerFor]=\\\"reports\\\"\\r\\n               [disabled]=\\\"menuDisable\\\"\\r\\n               *ngIf=\\\"isReportVisible\\\">\\r\\n                Reports\\r\\n            </a>\\r\\n            <mat-menu #reports=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <span *ngFor=\\\"let item of filteredTemplates\\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onReportClick(item)\\\">\\r\\n                        {{item.name}}\\r\\n                    </button>\\r\\n                </span>\\r\\n            </mat-menu>\\r\\n        </nav>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"masterDataCodeCtrl\\\"\\r\\n                       placeholder=\\\"Code\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #message>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"masterDataDescriptionCtrl\\\"\\r\\n                       placeholder=\\\"Description\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #action>\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <mat-card *ngIf=\\\"!isLoading\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <mat-card-title class=\\\"no-margin\\\">{{ masterdataFriendlyName }}</mat-card-title>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end end\\\">\\r\\n                <div *ngIf=\\\"!isEdit\\\">\\r\\n                    <button *ngIf=\\\"(((this.isLocal && !this.isGlobal) && !this.viewModeGlobal)\\r\\n                                    || ((this.isLocal && this.isGlobal) && this.viewModeGlobal)\\r\\n                                    || ((!this.isLocal && this.isGlobal) && this.viewModeGlobal))\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"handleSelectedMasterdataAction(userMenuActions.assign)\\\"\\r\\n                            matTooltip=\\\"assign all selected masterdatas\\\">\\r\\n                        Assign Selected\\r\\n                    </button>\\r\\n                    <button *ngIf=\\\"(((this.isLocal && !this.isGlobal) && !this.viewModeGlobal)\\r\\n                                     || ((this.isLocal && this.isGlobal) && this.viewModeGlobal)\\r\\n                                      ||((!this.isLocal && this.isGlobal) && this.viewModeGlobal))\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"handleSelectedMasterdataAction(userMenuActions.deactivate)\\\"\\r\\n                            matTooltip=\\\"deactivate all selected masterdatas\\\">\\r\\n                        Deactivate Selected\\r\\n                    </button>\\r\\n                    <button *ngIf=\\\"viewModeGlobal\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"handleSelectedMasterdataAction(userMenuActions.deleteRows)\\\"\\r\\n                            matTooltip=\\\"delete all selected masterdatas\\\">\\r\\n                        Delete Selected\\r\\n                    </button></div>\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"agGridOptions && agGridOptions.columnDefs\\\"\\r\\n                                                [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"gridCode\\\"\\r\\n                                                [showExport]=\\\"true\\\"\\r\\n                                                [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"agGridOptions\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             domLayout=autoHeight\\r\\n                             [rowData]=\\\"agGridRows\\\"\\r\\n                             [columnDefs]=\\\"agGridCols\\\"\\r\\n                             [gridOptions]=\\\"agGridOptions\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [paginationPageSize]=\\\"pageSize\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             [headerHeight]=\\\"atlasAgGridParam.headerHeight\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             (firstDataRendered)=\\\"onFirstDataRendered()\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                                      [fabType]=\\\"fabType\\\"\\r\\n                                      [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                      [isParentLoaded]=\\\"!isLoading\\\"\\r\\n                                      (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n        </atlas-floating-action-button>\\r\\n    </mat-card>\\r\\n    <mat-card *ngIf=\\\"isLoading\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \".no-margin {\\n  margin: 0 !important; }\\n\\n.atlas-grid-card-header button.mat-button {\\n  margin: 0 !important; }\\n\"","import { Component, Inject, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { concatMap, finalize, map } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridUserPreferencesComponent } from '../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AgContextualMenuAction } from '../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Company } from '../../../shared/entities/company.entity';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { ColumnConfigurationProperties } from '../../../shared/entities/grid-column-configuration.entity';\r\nimport { MasterDataDeletionResult } from '../../../shared/entities/masterdata-deletion-result.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { MasterDataOperationStatus } from '../../../shared/enums/masterdata-operation-status.entity';\r\nimport { AgGridService } from '../../../shared/services/ag-grid.service';\r\nimport { ApiCollection } from '../../../shared/services/common/models';\r\nimport { GridConfigurationProviderService } from '../../../shared/services/grid-configuration-provider.service';\r\nimport { GridActionsService } from '../../../shared/services/grid/grid-actions.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { MasterdataManagementService } from '../../../shared/services/masterdata-management.service';\r\nimport { UiService } from '../../../shared/services/ui.service';\r\nimport { CellEditorAtlasNumericComponent } from './../../../shared/components/cell-editor-numeric/cell-editor-atlas-numeric/cell-editor-atlas-numeric.component';\r\nimport { GenericReportViewerComponent } from './../../../shared/components/generic-report-viewer/generic-report-viewer.component';\r\nimport { ColumnException } from './../../../shared/entities/column-exception.entity';\r\nimport { PhysicalDocumentTemplate } from './../../../shared/entities/document-template.entity';\r\nimport { FieldErrors } from './../../../shared/entities/field-errors.entity';\r\nimport { FieldValidation } from './../../../shared/entities/field-validation.entity';\r\nimport { DocumentService } from './../../../shared/services/http-services/document.service';\r\nimport { GridConfigurationService } from './../../../shared/services/http-services/grid-configuration.service';\r\nimport { SnackbarService } from './../../../shared/services/snackbar.service';\r\nimport { AssignMasterdataDialogBoxComponent } from './assign-masterdata-dialog-box/assign-masterdata-dialog-box.component';\r\nimport { ReferentialMasterdataMenuActions } from './assign-masterdata-dialog-box/referential-masterdata-menu-actions.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-referential-component',\r\n    templateUrl: './referential-master-data-component.component.html',\r\n    styleUrls: ['./referential-master-data-component.component.scss'],\r\n})\r\nexport class ReferentialMasterDataComponentComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    isLoading = true;\r\n    masterdata: MasterData;\r\n    isReportVisible: boolean = false;\r\n    menus: any;\r\n    masterdataName: string;\r\n    masterdataFriendlyName: string;\r\n    agGridCols: agGrid.ColDef[];\r\n    pristineColumns: agGrid.ColDef[];\r\n    agGridRows: any[];\r\n    pristineRows: any[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    masterDataCodeCtrl = new FormControl('');\r\n    masterDataDescriptionCtrl = new FormControl('');\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    gridContextualMenuActions: AgContextualMenuAction[] = [];\r\n    userMenuActions = ReferentialMasterdataMenuActions;\r\n    companyConfiguration: Company;\r\n    isEdit: boolean = false;\r\n    menuDisable: boolean;\r\n    validations: FieldValidation;\r\n    isLocal: boolean;\r\n    isGlobal: boolean;\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    viewMode: string;\r\n    viewModeGlobal: boolean;\r\n    tabIndex: number;\r\n    filteredTemplates: PhysicalDocumentTemplate[] = new Array<PhysicalDocumentTemplate>();\r\n    columnExceptions: ColumnException[];\r\n\r\n    @Input() gridCode: string;\r\n    @Input() company: string;\r\n    @Input() pageSize: number = 10;\r\n    @Input() isFilterSetDisplay: boolean = true;\r\n    @Input() gridTitle: string;\r\n    gridComponents = {\r\n        atlasNumericCellEditor: CellEditorAtlasNumericComponent,\r\n    };\r\n\r\n    constructor(\r\n        @Inject(WINDOW) private window: Window,\r\n        private route: ActivatedRoute,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private gridConfigurationService: GridConfigurationService,\r\n        private uiService: UiService,\r\n        protected masterdataService: MasterdataService,\r\n        protected masterdataManagementService: MasterdataManagementService,\r\n        protected companyManager: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n        public gridActions: GridActionsService,\r\n        public dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        protected documentService: DocumentService,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.masterdataName = this.route.snapshot.paramMap.get('name');\r\n        this.masterdataFriendlyName = this.uiService.getMasterDataFriendlyName(this.masterdataName);\r\n        this.isLocal = this.masterdataManagementService.isLocalLevel(this.masterdataName);\r\n        this.isGlobal = this.masterdataManagementService.isGlobalLevel(this.masterdataName);\r\n        if (this.isGlobal) {\r\n            this.viewModeGlobal = true;\r\n        }\r\n\r\n        const documentType = 76;\r\n        if (this.masterdataFriendlyName.trim() === 'Vessel Information') {\r\n            this.isReportVisible = true;\r\n            this.documentService.getTemplates(documentType, 'Vessels').subscribe((templates) => {\r\n                this.filteredTemplates = templates.value;\r\n            });\r\n        } else if (this.masterdataFriendlyName.trim() === 'Nominal Account Ledger') {\r\n            this.isReportVisible = true;\r\n            this.documentService.getTemplates(documentType, 'NominalAccountLedger').subscribe((templates) => {\r\n                this.filteredTemplates = templates.value;\r\n            });\r\n        }\r\n        // Resolver put all masterdata in masterdata's variable\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.gridCode = this.masterdataManagementService.getGridName(this.masterdataName);\r\n        this.companyConfiguration = this.companyManager.getCurrentCompany();\r\n        this.company = this.companyConfiguration ? this.companyConfiguration.companyId : null;\r\n        this.validations = this.masterdataManagementService.getValidationForMasterData(this.masterdataName);\r\n\r\n        this.gridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.userMenuActions.deleteRows,\r\n                disabled: () => !this.isOperatorAvailable() || this.isEdit,\r\n            },\r\n        ];\r\n        if (this.isLocal && this.isGlobal) {\r\n            this.gridContextualMenuActions.push({\r\n                icon: 'sync_alt',\r\n                text: 'Assign',\r\n                action: this.userMenuActions.assign,\r\n                disabled: () => !this.isOperatorAvailable() || this.isEdit,\r\n            });\r\n            this.gridContextualMenuActions.push({\r\n                icon: 'block',\r\n                text: 'Deactivate',\r\n                action: this.userMenuActions.deactivate,\r\n                disabled: () => !this.isOperatorAvailable() || this.isEdit,\r\n            });\r\n        }\r\n\r\n        this.loadGridConfiguration();\r\n        this.getData();\r\n        this.initFABActions();\r\n    }\r\n\r\n    onSelectedIndexChanged = (navViewMode: string): void => {\r\n        this.viewMode = navViewMode;\r\n        this.viewModeGlobal = navViewMode === 'global';\r\n        this.getData();\r\n        this.initFABActions();\r\n    }\r\n\r\n    onReportClick(data: any) {\r\n        const openTradepnlReportDialog = this.dialog.open(GenericReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: data.name,\r\n                reportPath: data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.isLoading = true;\r\n        forkJoin([this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode),\r\n        this.gridConfigurationService.getColumnExceptions(this.gridCode)])\r\n            .subscribe(([configuration, columnExceptions]) => {\r\n                this.columnExceptions = columnExceptions;\r\n                this.columnConfiguration = configuration.columns;\r\n                this.gridActions.getColumns(\r\n                    this.columnConfiguration, this.gridCode, this.company)\r\n                    .subscribe((columns) => {\r\n\r\n                        // Deep copy is needed. We need a full separated copy\r\n                        this.pristineColumns = columns.map((col) => ({ ...col }));\r\n                        // selection column\r\n                        columns.unshift(\r\n                            {\r\n                                headerName: '',\r\n                                colId: 'selection',\r\n                                checkboxSelection: () => this.isOperatorAvailable() && !this.isEdit,\r\n                                minWidth: 40,\r\n                                maxWidth: 40,\r\n                                pinned: 'left',\r\n                                hide: false,\r\n                            });\r\n                        if (this.gridContextualMenuActions && this.gridContextualMenuActions.length > 0) {\r\n                            columns.push(\r\n                                {\r\n                                    colId: 'menuAction',\r\n                                    headerName: '',\r\n                                    cellRendererFramework: AgContextualMenuComponent,\r\n                                    cellRendererParams: {\r\n                                        context: {\r\n                                            componentParent: this,\r\n                                        },\r\n                                        menuActions: this.gridContextualMenuActions,\r\n                                    },\r\n                                    cellClass: 'ag-contextual-menu',\r\n                                    maxWidth: 80,\r\n                                });\r\n                        }\r\n\r\n                        this.agGridCols = columns.map((column) => {\r\n                            if (column.cellRendererFramework) {\r\n                                column.cellRendererParams.disabled = () => !this.isColumnEditable(column.colId);\r\n                                if (!column.onCellValueChanged) {\r\n                                    // The onCellValueChanged Event defined in the html is not automatically applied on cell Renderers\r\n                                    // We need to apply it manually\r\n                                    column.onCellValueChanged = this.onCellValueChanged;\r\n                                }\r\n                                column.editable = false;\r\n                            } else {\r\n                                column.editable = () => this.isColumnEditable(column.colId);\r\n                            }\r\n                            return column;\r\n                        });\r\n\r\n                        // Set default order by column\r\n                        const columnProperties = this.gridActions.getGridPropertyForMasterData(this.masterdataName);\r\n                        if (columnProperties) {\r\n                            const getColumn = this.agGridCols.find((column) => column.field === columnProperties.orderBy);\r\n                            if (getColumn) {\r\n                                getColumn.sort = 'asc';\r\n                            }\r\n                        }\r\n\r\n                        if (this.agGridApi) {\r\n                            this.agGridApi.setColumnDefs(this.agGridCols);\r\n                        }\r\n\r\n                        if (this.agGridOptions) {\r\n                            this.agGridOptions.columnDefs = this.agGridCols;\r\n                        }\r\n\r\n                        if (this.agGridRows) { // If data and config are loaded\r\n                            this.isLoading = false;\r\n                        }\r\n                    });\r\n            });\r\n    }\r\n\r\n    onFirstDataRendered() {\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.agGridOptions);\r\n    }\r\n\r\n    isColumnEditable(colId: string): boolean {\r\n        const column = this.pristineColumns.find((col) => col.colId === colId);\r\n        if (column && !this.viewModeGlobal) {\r\n            const columnException = this.columnExceptions.find((col) => col.fieldName === column.field);\r\n            if (columnException) {\r\n                return this.isEdit;\r\n            }\r\n        }\r\n        return column && (this.viewModeGlobal ? column.editable : false) && this.isEdit;\r\n    }\r\n\r\n    getData(code?: string, description?: string) {\r\n        this.isLoading = true;\r\n        this.masterdataService.getFullMasterData(this.masterdataName, this.company, this.viewModeGlobal, code, description)\r\n\r\n            .subscribe((data) => {\r\n                this.agGridRows = data[this.masterdataName];\r\n\r\n                // Deep copy is needed. We need a full separated copy\r\n                this.pristineRows = data[this.masterdataName].map((row) => ({ ...row }));\r\n\r\n                if (this.agGridApi) {\r\n                    this.agGridApi.setRowData(this.agGridRows);\r\n                    this.agGridApi.redrawRows();\r\n                }\r\n\r\n                if (this.agGridCols) { // If data and config are loaded\r\n                    this.isLoading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    onColumnVisibilityChanged(column: any) {\r\n        if (this.userPreferencesComponent) {\r\n            this.userPreferencesComponent.onChangeColumnVisibility(column);\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modifications pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.isEdit = false;\r\n                if (this.agGridOptions) {\r\n                    this.initFABActions();\r\n                    // Deep copy is needed. We need a full separated copy\r\n                    this.agGridRows = this.pristineRows.map((row) => ({ ...row }));\r\n                    this.agGridOptions.api.refreshCells();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onAssignActionClick(action: string, masterdatas: any[]) {\r\n        const technicalId = this.gridActions.getGridPropertyForMasterData(this.masterdataName).id;\r\n        const selected = masterdatas.map((row) => row[technicalId]);\r\n        const dialogRef = this.dialog.open(AssignMasterdataDialogBoxComponent, {\r\n            width: '600px',\r\n            data: {\r\n                masterdataName: this.masterdataName,\r\n                actionType: action,\r\n                selected,\r\n            },\r\n        });\r\n        dialogRef.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                if (answer.length > 0) {\r\n                    this.isLoading = true;\r\n                    let saveObservable;\r\n                    let successMessage;\r\n                    switch (action) {\r\n                        case this.userMenuActions.assign:\r\n                            saveObservable = this.masterdataService.assignMasterData(this.masterdataName, answer, selected);\r\n                            successMessage = 'Assignment successful';\r\n                            break;\r\n                        case this.userMenuActions.deactivate:\r\n                            saveObservable = this.masterdataService.activateMasterData(this.masterdataName, answer, selected);\r\n                            successMessage = 'Deactivation successful';\r\n                            break;\r\n                    }\r\n                    saveObservable\r\n                        .pipe(\r\n                            finalize(() => {\r\n                                this.isLoading = false;\r\n                            }),\r\n                        )\r\n                        .subscribe(\r\n                            () => {\r\n                                this.snackbarService.informationSnackBar(successMessage);\r\n                            },\r\n                            (error) => {\r\n                                if (error && error.status === 400 && error.error && error.error.detail) {\r\n                                    this.snackbarService.throwErrorSnackBar(error.error.detail, true);\r\n                                } else {\r\n                                    throw error;\r\n                                }\r\n                            });\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar('No changes detected');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onEditMasterDataButtonClicked() {\r\n        this.isEdit = true;\r\n        if (this.agGridApi) {\r\n            this.agGridApi.redrawRows();\r\n        }\r\n        this.initFABActions();\r\n    }\r\n\r\n    onAddMasterDataButtonClicked() {\r\n        const newItem: any = {};\r\n        newItem.isNew = true;\r\n        this.agGridRows.push(newItem);\r\n        this.agGridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n    }\r\n\r\n    onSaveButtonClick() {\r\n        this.isLoading = true;\r\n\r\n        const masterdataUpdate: MasterData = new MasterData();\r\n        masterdataUpdate[this.masterdataName] = this.agGridRows.filter((line) => line.isDirty === true && line.isNew !== true);\r\n        const masterdataCreate: MasterData = new MasterData();\r\n        masterdataCreate[this.masterdataName] = this.agGridRows.filter((line) => line.isNew === true);\r\n\r\n        this.agGridRows.forEach((row) => {\r\n            row['invalid'] = []; // reset errors\r\n        });\r\n        const isValid = this.isDataValid(masterdataUpdate[this.masterdataName].concat(masterdataCreate[this.masterdataName]));\r\n        if (this.agGridOptions && this.agGridOptions.api) {\r\n            this.agGridOptions.api.refreshCells();\r\n        }\r\n        if (!isValid) {\r\n            this.isLoading = false;\r\n            return;\r\n        }\r\n\r\n        const updateMasterDataObservable = (masterdataUpdate[this.masterdataName] as any[]).length > 0 ?\r\n            this.masterdataService.updateMasterData(masterdataUpdate, this.masterdataName, this.viewModeGlobal, this.company) : of(null);\r\n\r\n        const createMasterDataObservable = (masterdataCreate[this.masterdataName] as any[]).length > 0 ?\r\n            this.masterdataService.createMasterData(masterdataCreate, this.masterdataName, this.company) : of(null);\r\n\r\n        updateMasterDataObservable.pipe(\r\n            concatMap(() => createMasterDataObservable),\r\n            finalize(() => {\r\n                this.isLoading = false;\r\n                this.initFABActions();\r\n            }),\r\n        ).subscribe(() => {\r\n            this.isEdit = false;\r\n            this.getData();\r\n            if (this.agGridApi) {\r\n                this.agGridApi.redrawRows();\r\n            }\r\n            this.snackbarService.informationSnackBar('Row(s) updated');\r\n        },          (error) => {\r\n            if (error && error.error) {\r\n                this.snackbarService.throwErrorSnackBar(error.error.detail);\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSelectedMasterdataAction(action: string) {\r\n        const selectedMasterdata = this.agGridApi.getSelectedRows();\r\n        if (selectedMasterdata && selectedMasterdata.length > 0) {\r\n            this.handleActionForRows(action, selectedMasterdata);\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Please select some rows');\r\n        }\r\n    }\r\n\r\n    // contextual action menu on one row\r\n    handleAction(action: string, masterdata: any) {\r\n        this.handleActionForRows(action, [masterdata]);\r\n    }\r\n\r\n    handleActionForRows(action: string, masterdata: any[]) {\r\n        switch (action) {\r\n            case this.userMenuActions.deleteRows:\r\n                this.deleteMasterData(masterdata);\r\n\r\n                break;\r\n            case this.userMenuActions.assign:\r\n            case this.userMenuActions.deactivate:\r\n                this.onAssignActionClick(action, masterdata);\r\n                break;\r\n            default:\r\n                throw new Error(`Action ${action} not recognized`);\r\n        }\r\n    }\r\n\r\n    deleteMasterData(masterdataItemOrArray: any[]) {\r\n        this.isLoading = false;\r\n        const masterdataToDelete: MasterData = new MasterData();\r\n\r\n        masterdataToDelete[this.masterdataName] = masterdataItemOrArray;\r\n\r\n        const technicalId = this.gridActions.getGridPropertyForMasterData(this.masterdataName).id;\r\n        const listId = masterdataToDelete[this.masterdataName].map((val) => val[technicalId]);\r\n\r\n        this.masterdataService.deleteMasterData(listId, this.masterdataName, this.company)\r\n            .pipe(\r\n                map((data: ApiCollection<MasterDataDeletionResult>) => data.value.map((result) => {\r\n                    return new MasterDataDeletionResult(result.id, result.code, result.masterDataOperationStatus);\r\n                }),\r\n                ),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((masterDataDeletionResult: MasterDataDeletionResult[]) => {\r\n\r\n                this.getData();\r\n                this.postActionCleanUp();\r\n\r\n                const rowsUpdatedWithSuccess = masterDataDeletionResult\r\n                    .filter((result) => result.masterDataOperationStatus === MasterDataOperationStatus.Success);\r\n                const rowsUpdatedWithError = masterDataDeletionResult\r\n                    .filter((result) => result.masterDataOperationStatus !== MasterDataOperationStatus.Success);\r\n\r\n                let snackBarMessage: string = `${rowsUpdatedWithSuccess.length} item(s) have been successfuly deleted \\n`;\r\n\r\n                if (rowsUpdatedWithError.length !== 0) {\r\n                    snackBarMessage += `${rowsUpdatedWithError.length}  row(s) with error: \\n`;\r\n                    rowsUpdatedWithError.forEach((masterdataOperationStatus) => {\r\n                        snackBarMessage +=\r\n                            `Code: ${masterdataOperationStatus.code} Status: ${masterdataOperationStatus.toUserFriendlyMessage()} \\n`;\r\n                    });\r\n                }\r\n                this.snackbarService.informationSnackBar(snackBarMessage);\r\n            });\r\n    }\r\n\r\n    isDataValid(masterDataList) {\r\n        const errorMessage = this.getErrorMessage(masterDataList);\r\n        const isValid = !errorMessage || errorMessage.length === 0;\r\n\r\n        if (!isValid) {\r\n            this.snackbarService.throwErrorSnackBar('Some data are not valid : ' + errorMessage, true);\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    postActionCleanUp() {\r\n        this.isEdit = false;\r\n        this.isLoading = false;\r\n        this.initFABActions();\r\n        if (this.agGridApi) {\r\n            this.agGridApi.redrawRows();\r\n        }\r\n    }\r\n\r\n    getErrorMessage(masterDataList) {\r\n        const errorUnicity = this.masterdataManagementService.getUnicityValidationErrors(this.agGridRows, this.validations.unique);\r\n        const errors = new FieldErrors();\r\n        masterDataList.forEach((row) => {\r\n            const rowErrors = this.masterdataManagementService.getRowValidationErrors(this.validations, row, this.masterdata);\r\n            if (rowErrors) {\r\n                errors.concatDistinct(rowErrors);\r\n            }\r\n        });\r\n        let errorMessage = errorUnicity.map((error) => 'The ' + error.name + ' cannot have duplicated values : '\r\n            + error.values.join(', ')).join('. ');\r\n        if (errorMessage.length > 0) {\r\n            errorMessage = errorMessage + '. ';\r\n        }\r\n        errorMessage = errorMessage + errors.toString();\r\n\r\n        return errorMessage;\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n        }\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        const code = this.masterDataCodeCtrl.value === '' ? null : this.masterDataCodeCtrl.value;\r\n        const description = this.masterDataDescriptionCtrl.value === '' ?\r\n            null : this.masterDataDescriptionCtrl.value;\r\n        this.getData(code, description);\r\n    }\r\n\r\n    initFABActions() {\r\n        this.fabTitle = 'Manage Master Data';\r\n        this.fabType = FABType.MiniFAB;\r\n        this.fabMenuActions = [];\r\n        const isDisabled = !this.isOperatorAvailable();\r\n\r\n        if (!this.isEdit) {\r\n            const editMasterData: FloatingActionButtonActions = {\r\n                icon: 'edit',\r\n                text: 'Edit Master Data',\r\n                action: 'editMasterData',\r\n                disabled: false,\r\n                index: 0,\r\n            };\r\n            this.fabMenuActions.push(editMasterData);\r\n        } else {\r\n\r\n            const saveChanges: FloatingActionButtonActions = {\r\n                icon: 'save',\r\n                text: 'Save Changes',\r\n                action: 'saveChanges',\r\n                disabled: false,\r\n                index: 0,\r\n            };\r\n\r\n            const addMasterData: FloatingActionButtonActions = {\r\n                icon: 'add',\r\n                text: 'Add Master Data',\r\n                action: 'addMasterData',\r\n                disabled: isDisabled,\r\n                index: 1,\r\n            };\r\n\r\n            const discardChanges: FloatingActionButtonActions = {\r\n                icon: 'clear',\r\n                text: 'Discard Changes',\r\n                action: 'discardChanges',\r\n                disabled: false,\r\n                index: 2,\r\n            };\r\n\r\n            if (this.isOperatorAvailable()) {\r\n                this.fabMenuActions.push(addMasterData);\r\n            }\r\n            this.fabMenuActions.push(discardChanges);\r\n            this.fabMenuActions.push(saveChanges);\r\n        }\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'editMasterData': {\r\n                this.onEditMasterDataButtonClicked();\r\n                break;\r\n            }\r\n            case 'saveChanges': {\r\n                this.onSaveButtonClick();\r\n                break;\r\n            }\r\n            case 'addMasterData': {\r\n                this.onAddMasterDataButtonClicked();\r\n                break;\r\n            }\r\n            case 'discardChanges': {\r\n                this.onDiscardButtonClick();\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    isOperatorAvailable(): boolean {\r\n        return (((this.isLocal && !this.isGlobal) && !this.viewModeGlobal) // company level (only)\r\n        ||  ((this.isLocal && this.isGlobal) && this.viewModeGlobal) // master level\r\n        || ((!this.isLocal && this.isGlobal) && this.viewModeGlobal)); // global level\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayout.lt-md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         fxLayoutGap.lt-md=\\\"0px\\\"\\r\\n         class=\\\"hub-menu-panel\\\"\\r\\n         [hidden]=\\\"isLoading\\\">\\r\\n        <div *ngFor=\\\"let menu of menus\\\">\\r\\n            <!-- Temporary ifAuthorized-->\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      *ifAuthorized=\\\"menu.authorized !== '' ? menu.authorized : 'Referential', company:this.company\\\">\\r\\n                <!-- remove tooltip and overlay when link implemented-->\\r\\n                <img mat-card-image\\r\\n                     [src]=\\\"menu.imageUrl\\\"\\r\\n                     alt=\\\"menu picture\\\" />\\r\\n                <mat-card-title>\\r\\n                    {{menu.title}}\\r\\n                </mat-card-title>\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n                         fxLayoutGap=\\\"8px\\\"\\r\\n                         fxLayoutGap.lt-md=\\\"0\\\"\\r\\n                         class=\\\"hub-menu-panel\\\"\\r\\n                         [hidden]=\\\"isLoading\\\">\\r\\n                        <div *ngFor=\\\"let menuChild of menu.childrens\\\">\\r\\n                            <a class=\\\"no-margin\\\"\\r\\n                               (click)=\\\"onNavigateButtonClicked(menu.navigateUrl + menuChild.navigateUrl)\\\">\\r\\n                                {{ menuChild.title }}\\r\\n                            </a>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"isLoading\\\">\\r\\n            <mat-card>\\r\\n                <h2>Loading</h2>\\r\\n                <div class=\\\"custom-line-title\\\"></div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"center center\\\"\\r\\n                     fxLayoutWrap\\r\\n                     fxLayoutGap=\\\"20px\\\">\\r\\n                    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n    </div>\\r\\n\"","module.exports = \".hub-menu .hub-menu-panel {\\n  max-height: none !important;\\n  height: 100%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Menu } from '../../../shared/entities/menu.entity';\r\nimport { MasterdataManagementService } from '../../../shared/services/masterdata-management.service';\r\n\r\n@Component({\r\n    selector: 'atlas-referential-master-data-menu-component',\r\n    templateUrl: './referential-master-data-menu-component.component.html',\r\n    styleUrls: ['./referential-master-data-menu-component.component.scss'],\r\n})\r\nexport class ReferentialMasterDataMenuComponentComponent implements OnInit {\r\n    company: string;\r\n    isLoading = false;\r\n    menus: Menu[];\r\n\r\n    constructor(\r\n        protected masterdataService: MasterdataManagementService,\r\n        private route: ActivatedRoute,\r\n        private router: Router) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.menus = this.masterdataService.menus;\r\n    }\r\n\r\n    onNavigateButtonClicked(route: string) {\r\n        this.router.navigate(['/' + this.company + route]);\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.sm=\\\"row wrap\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxLayoutAlign.sm=\\\"space-around stretch\\\"\\r\\n         fxLayoutAlign.xs=\\\"center center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         fxLayoutGap.sm=\\\"0\\\"\\r\\n         class=\\\"hub-menu-panel\\\"\\r\\n         [hidden]=\\\"isLoading\\\">\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/referential/tradeexecution/counterparties')\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Counterparties</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">To Manage Counterparty Details</p>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"isLoading\\\">\\r\\n        <mat-card>\\r\\n            <h2>Loading</h2>\\r\\n            <div class=\\\"custom-line-title\\\"></div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"20px\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trading-and-execution-component',\r\n    templateUrl: './trading-and-execution-component.component.html',\r\n    styleUrls: ['./trading-and-execution-component.component.scss'],\r\n})\r\nexport class TradingAndExecutionComponentComponent implements OnInit {\r\n\r\n    company: string;\r\n    isLoading = false;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private titleService: TitleService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle('Referential - Trading And Execution');\r\n    }\r\n\r\n    onNavigateButtonClicked(route: string) {\r\n        this.router.navigate(['/' + this.company + route]);\r\n    }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { MaterialModule } from '../shared/material.module';\r\nimport { ATLAS_DATE_FORMATS, SharedModule } from '../shared/shared.module';\r\nimport { CounterpartyApplyButtonComponent } from './components/referential-bulk-amendment/detail/apply/counterparty-apply-button.component';\r\nimport { CounterpartyDetailComponentComponent } from './components/referential-bulk-amendment/detail/counterparty-detail-component.component';\r\nimport { SelectMultiDropdownComponent } from './components/referential-bulk-amendment/detail/select-multi-dropdown/select-multi-dropdown.component';\r\nimport { CounterpartyListComponentComponent } from './components/referential-bulk-amendment/list/counterparty-list-component.component';\r\nimport { ReferentialBulkAmendmentComponentComponent } from './components/referential-bulk-amendment/referential-bulk-amendment-component.component';\r\nimport { CounterpartySummaryComponentComponent } from './components/referential-bulk-amendment/summary/counterparty-summary-component.component';\r\nimport { CounterpartyAddressCardComponent } from './components/referential-counterparties/counterparty-capture/address-tab/address-card/counterparty-address-card.component';\r\nimport { CounterpartyAddressDetailCardComponent } from './components/referential-counterparties/counterparty-capture/address-tab/address-detail-card/counterparty-address-detail-card.component';\r\nimport { CounterpartyCaptureFormAddressTabComponent } from './components/referential-counterparties/counterparty-capture/address-tab/counterparty-capture-form-address-tab.component';\r\nimport { CounterpartyBankAccountDetailsComponent } from './components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-details/counterparty-bank-account-details.component';\r\nimport { CounterpartyBankAccountListComponent } from './components/referential-counterparties/counterparty-capture/bank-account-tab/bank-account-list/counterparty-bank-account-list.component';\r\nimport { CounterpartyCaptureFormBankAccountTabComponent } from './components/referential-counterparties/counterparty-capture/bank-account-tab/counterparty-capture-form-bank-account-tab.component';\r\nimport { ContactDetailCardComponent } from './components/referential-counterparties/counterparty-capture/contact-tab/contact-detail-card/contact-detail-card.component';\r\nimport { ContactCardComponent } from './components/referential-counterparties/counterparty-capture/contact-tab/contact-list-card/contact-card.component';\r\nimport { CounterpartyCaptureFormContactTabComponent } from './components/referential-counterparties/counterparty-capture/contact-tab/counterparty-capture-form-contact-tab.component';\r\nimport { CounterpartyCaptureComponent } from './components/referential-counterparties/counterparty-capture/counterparty-capture.component';\r\nimport { CounterpartyHeaderComponent } from './components/referential-counterparties/counterparty-capture/counterparty-header/counterparty-header.component';\r\nimport { CounterpartyManagementMenuBarComponent } from './components/referential-counterparties/counterparty-capture/counterparty-management-menu-bar/counterparty-management-menu-bar.component';\r\nimport { AlternateMailingCardComponent } from './components/referential-counterparties/counterparty-capture/main-tab/alternate-mailing-card/alternate-mailing-card.component';\r\nimport { CounterpartyCaptureFormMainTabComponent } from './components/referential-counterparties/counterparty-capture/main-tab/counterparty-capture-form-main-tab.component';\r\nimport { CustomerDefaultCardComponent } from './components/referential-counterparties/counterparty-capture/main-tab/customer-default-card/customer-default-card.component';\r\nimport { AssociatedCounterpartiesCompanyComponent } from './components/referential-counterparties/counterparty-capture/main-tab/information-card/associated-company/associated-counterparties-company.component';\r\nimport { InformationCardComponent } from './components/referential-counterparties/counterparty-capture/main-tab/information-card/information-card.component';\r\nimport { MainAddressCardComponent } from './components/referential-counterparties/counterparty-capture/main-tab/main-address-card/main-address-card.component';\r\nimport { ThirdSystemCodesCardComponent } from './components/referential-counterparties/counterparty-capture/main-tab/third-system-codes-card/third-system-codes-card.component';\r\nimport { CounterpartyCaptureFormReportTabComponent } from './components/referential-counterparties/counterparty-capture/report-tab/counterparty-capture-form-report-tab.component';\r\nimport { CounterpartyCaptureFormTaxInfoTabComponent } from './components/referential-counterparties/counterparty-capture/tax-info-tab/counterparty-capture-form-tax-info-tab.component';\r\nimport { TaxGridActionComponent } from './components/referential-counterparties/counterparty-capture/tax-info-tab/tax-grid-action/tax-grid-action.component';\r\nimport { ReferentialCounterpartiesComponent } from './components/referential-counterparties/referential-counterparties.component';\r\nimport { ReferentialCounterpartyTabComponent } from './components/referential-counterparty-tab/referential-counterparty-tab.component';\r\nimport { AssignMasterdataDialogBoxComponent } from './components/referential-master-data-component/assign-masterdata-dialog-box/assign-masterdata-dialog-box.component';\r\nimport { ReferentialMasterDataComponentComponent } from './components/referential-master-data-component/referential-master-data-component.component';\r\nimport { ReferentialMasterDataMenuComponentComponent } from './components/referential-master-data-menu-component/referential-master-data-menu-component.component';\r\nimport { TradingAndExecutionComponentComponent } from './components/trading-and-execution-component/trading-and-execution-component.component';\r\nimport { ReferentialRoutingModule } from './referential.route';\r\nimport { ReferentialMasterDataTitleResolver } from './resolvers/referential-master-data-title.resolver';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        ReferentialRoutingModule,\r\n        AgGridModule.withComponents([]),\r\n        SharedModule,\r\n    ],\r\n    entryComponents: [\r\n        TaxGridActionComponent,\r\n        SelectMultiDropdownComponent,\r\n        CounterpartyApplyButtonComponent,\r\n        AssociatedCounterpartiesCompanyComponent,\r\n        AssignMasterdataDialogBoxComponent,\r\n    ],\r\n    declarations: [\r\n        ReferentialMasterDataMenuComponentComponent,\r\n        TradingAndExecutionComponentComponent,\r\n        ReferentialCounterpartiesComponent,\r\n        ReferentialCounterpartyTabComponent,\r\n        CounterpartyCaptureComponent,\r\n        CounterpartyCaptureFormMainTabComponent,\r\n        CounterpartyCaptureFormAddressTabComponent,\r\n        CounterpartyCaptureFormContactTabComponent,\r\n        CounterpartyCaptureFormBankAccountTabComponent,\r\n        CounterpartyCaptureFormTaxInfoTabComponent,\r\n        CounterpartyCaptureFormReportTabComponent,\r\n        CounterpartyAddressCardComponent,\r\n        CounterpartyAddressDetailCardComponent,\r\n        ContactCardComponent,\r\n        ContactDetailCardComponent,\r\n        CounterpartyBankAccountListComponent,\r\n        TaxGridActionComponent,\r\n        CounterpartyApplyButtonComponent,\r\n        CounterpartyBankAccountDetailsComponent,\r\n        TaxGridActionComponent,\r\n        InformationCardComponent,\r\n        MainAddressCardComponent,\r\n        ThirdSystemCodesCardComponent,\r\n        AlternateMailingCardComponent,\r\n        CustomerDefaultCardComponent,\r\n        CounterpartyHeaderComponent,\r\n        CounterpartyManagementMenuBarComponent,\r\n        AssociatedCounterpartiesCompanyComponent,\r\n        CounterpartyBankAccountDetailsComponent,\r\n        ReferentialMasterDataComponentComponent,\r\n        ReferentialBulkAmendmentComponentComponent,\r\n        CounterpartyListComponentComponent,\r\n        CounterpartyDetailComponentComponent,\r\n        CounterpartySummaryComponentComponent,\r\n        CounterpartyApplyButtonComponent,\r\n        SelectMultiDropdownComponent,\r\n        AssignMasterdataDialogBoxComponent,\r\n    ],\r\n    providers: [\r\n        { provide: MAT_DATE_LOCALE, useValue: 'en' },\r\n        { provide: DateAdapter, useClass: MomentDateAdapter },\r\n        { provide: MAT_DATE_FORMATS, useValue: ATLAS_DATE_FORMATS },\r\n        ReferentialMasterDataTitleResolver,\r\n    ],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class ReferentialModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MasterDataProps } from '../shared/entities/masterdata-props.entity';\r\nimport { PermissionLevels } from '../shared/enums/permission-level.enum';\r\nimport { CanDeactivateGuard } from '../shared/guards/can-deactivate-guard.service';\r\nimport { SecurityGuard } from '../shared/guards/security.guard';\r\nimport { CompanyDateResolver } from '../shared/resolvers/company-date.resolver';\r\nimport { FormConfigurationResolver } from '../shared/resolvers/form-configuration.resolver';\r\nimport { MasterDataResolver } from '../shared/resolvers/masterdata.resolver';\r\nimport { ReferentialBulkAmendmentComponentComponent } from './components/referential-bulk-amendment/referential-bulk-amendment-component.component';\r\nimport { CounterpartyCaptureComponent } from './components/referential-counterparties/counterparty-capture/counterparty-capture.component';\r\nimport { ReferentialCounterpartiesComponent } from './components/referential-counterparties/referential-counterparties.component';\r\nimport { ReferentialMasterDataComponentComponent } from './components/referential-master-data-component/referential-master-data-component.component';\r\nimport { ReferentialMasterDataMenuComponentComponent } from './components/referential-master-data-menu-component/referential-master-data-menu-component.component';\r\nimport { TradingAndExecutionComponentComponent } from './components/trading-and-execution-component/trading-and-execution-component.component';\r\nimport { ReferentialMasterDataTitleResolver } from './resolvers/referential-master-data-title.resolver';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ReferentialMasterDataMenuComponentComponent,\r\n        canActivate: [SecurityGuard],\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'tradeexecution',\r\n        component: TradingAndExecutionComponentComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradeexecution',\r\n            title: 'Referential',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'TradingAndExecution',\r\n                    permission: PermissionLevels.Read,\r\n                    parentLevelOne: 'Referential',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'masterdata/counterparties',\r\n        component: ReferentialCounterpartiesComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'counterparties',\r\n            title: 'Counterparties', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.AccountTypes,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.LdcRegion,\r\n\r\n            ],\r\n        },\r\n        resolve: {\r\n            formConfiguration: FormConfigurationResolver,\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'tradeexecution/counterparties/bulkamendment',\r\n        component: ReferentialBulkAmendmentComponentComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'counterparties',\r\n            title: 'Counterparties', isHomePage: true, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.AccountTypes,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.TradeStatus,\r\n                MasterDataProps.Province,\r\n                MasterDataProps.AddressTypes,\r\n                MasterDataProps.Companies,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'TradingAndExecution',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Referential',\r\n                    privilegeParentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            formConfiguration: FormConfigurationResolver,\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'counterparty/display/:counterpartyID',\r\n        component: CounterpartyCaptureComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'counterpartyDisplay',\r\n            title: 'Counterparty View',\r\n            formId: 'CounterPartyDisplay', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.AccountTypes,\r\n                MasterDataProps.AddressTypes,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.Province,\r\n                MasterDataProps.TradeStatus,\r\n                MasterDataProps.Traders,\r\n                MasterDataProps.MdmCategories,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'TradingAndExecution',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Referential',\r\n                    privilegeParentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'counterparty/edit/:counterpartyID',\r\n        component: CounterpartyCaptureComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'counterpartyDisplay',\r\n            title: 'Counterparty Edit',\r\n            formId: 'CounterPartyEdit', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.AccountTypes,\r\n                MasterDataProps.AddressTypes,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.Province,\r\n                MasterDataProps.TradeStatus,\r\n                MasterDataProps.Traders,\r\n                MasterDataProps.MdmCategories,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'TradingAndExecution',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Referential',\r\n                    privilegeParentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'counterparty/capture',\r\n        component: CounterpartyCaptureComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'counterpartyDisplay',\r\n            title: 'Counterparty Create',\r\n            formId: 'CounterPartyCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Province,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.MdmCategories,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'TradingAndExecution',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Referential',\r\n                    privilegeParentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'masterdata/:name',\r\n        component: ReferentialMasterDataComponentComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            formId: 'MasterDataCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n            overrideTitle: ReferentialMasterDataTitleResolver,\r\n        },\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class ReferentialRoutingModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { UiService } from '../../shared/services/ui.service';\r\n\r\n@Injectable()\r\nexport class ReferentialMasterDataTitleResolver implements Resolve<string> {\r\n    constructor(\r\n        protected uiService: UiService,\r\n    ) { }\r\n\r\n    resolve(route: ActivatedRouteSnapshot): Observable<string> {\r\n        return of(this.uiService.getMasterDataFriendlyName(route.params['name']));\r\n    }\r\n}\r\n","export class CounterpartyCompany {\r\n    counterpartyId: number;\r\n    companyId: number;\r\n    c2CCode: string;\r\n    main: boolean;\r\n    isDeactivated: boolean;\r\n    companyName: string;\r\n}","import { Contact } from './contact.entity';\r\nimport { CounterpartyAccountType } from './counterparty-account-type.entity';\r\nimport { CounterpartyAddress } from './counterparty-address.entity';\r\nimport { CounterpartyBankAccountDetails } from './counterparty-bank-account-details.entity';\r\nimport { CounterpartyBankAccountIntermediary } from './counterparty-bank-account-intermediary.entity';\r\nimport { CounterpartyCompany } from './counterparty-company.entity';\r\nimport { CounterpartyMdmCategory } from './counterparty-mdm-category.entity';\r\nimport { CounterpartyTax } from './counterparty-tax.entity';\r\n\r\nexport class Counterparty {\r\n    counterpartyID: number;\r\n    counterpartyCode: string;\r\n    counterpartyType: string;\r\n    description: string;\r\n    mdmId: number;\r\n    mdmCategoryCode: string;\r\n    isDeactivated: boolean;\r\n    counterpartyTradeStatusId: number;\r\n    headofFamily: number;\r\n    countryId: number;\r\n    countryName: string;\r\n    provinceId: number;\r\n    provinceName: string;\r\n    c2CCode: string;\r\n    vatRegistrationNumber: string;\r\n    fiscalRegistrationNumber: string;\r\n    createdDateTime: Date;\r\n    createdBy: string;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    contractTermId: number;\r\n    acManagerId: number;\r\n    acManagerName: string;\r\n    displayName: string;\r\n    accountRef: string;\r\n    accountTitle: string;\r\n    name: string;\r\n    accountTypeName: string;\r\n    departmentId: number;\r\n    departmentCode: string;\r\n    departmentName: string;\r\n    alternateMailingAddress1: string;\r\n    alternateMailingAddress2: string;\r\n    alternateMailingAddress3: string;\r\n    alternateMailingAddress4: string;\r\n    introductoryBrocker: string;\r\n\r\n    counterpartyAddresses: CounterpartyAddress[];\r\n    counterpartyBankAccounts: CounterpartyBankAccountDetails[];\r\n    counterpartyBankAccountIntermediaries: CounterpartyBankAccountIntermediary[];\r\n    counterpartyContacts: Contact[];\r\n    counterpartyTaxes: CounterpartyTax[];\r\n    counterpartyCompanies: CounterpartyCompany[];\r\n    associatedCompanies: CounterpartyCompany[];\r\n    counterpartyAccountTypes: CounterpartyAccountType[];\r\n    counterpartyMdmCategory: CounterpartyMdmCategory[];\r\n}\r\n","export class FieldErrors {\r\n    empty: string[];\r\n    tooLong: Array<{ name: string, maxLength: number }>;\r\n    doesNotExists: Array<{ name: string, values: any[] }>;\r\n\r\n    constructor() {\r\n        this.empty = [];\r\n        this.tooLong = [];\r\n        this.doesNotExists = [];\r\n    }\r\n\r\n    concatDistinct(fieldError: FieldErrors) {\r\n        fieldError.empty.forEach((error: string) => {\r\n            if (!this.empty.find((err: string) => err === error)) {\r\n                this.empty.push(error);\r\n            }\r\n        });\r\n        fieldError.tooLong.forEach((error: { name: string, maxLength: number }) => {\r\n            if (!this.tooLong.find((err: { name: string, maxLength: number }) => err.name === error.name)) {\r\n                this.tooLong.push(error);\r\n            }\r\n        });\r\n        fieldError.doesNotExists.forEach((error: { name: string, values: any[] }) => {\r\n            const errorsForSameField = this.doesNotExists.find((err: { name: string, values: any[] }) => err.name === error.name);\r\n            if (!errorsForSameField) {\r\n                this.doesNotExists.push(error);\r\n            } else {\r\n                error.values.forEach((value) => {\r\n                    if (errorsForSameField.values.indexOf(value) === -1) {\r\n                        errorsForSameField.values.push(value);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    toString() {\r\n        let errorMessage = '';\r\n        if (this.empty.length > 0) {\r\n            errorMessage += 'Those fields cannot be empty : ' + this.empty.join(', ') + '. ';\r\n        }\r\n        this.tooLong.forEach((error) => errorMessage += 'The ' + error.name + ' cannot be longer than '\r\n            + error.maxLength + ' characters. ');\r\n        this.doesNotExists.forEach((error) => errorMessage += '\"' + error.values.map((value) => '\"' + value + '\"').join(', ')\r\n            + '\" are not valid ' + error.name + '. ');\r\n\r\n        return errorMessage;\r\n    }\r\n}\r\n","export class FieldValidation {\r\n    required: Array<{ name: string }>;\r\n    maxLength: Array<{ name: string, maxLength: number }>;\r\n    shouldExist: Array<{ name: string, masterData: string, property?: string }>;\r\n    unique: string[];\r\n\r\n    constructor() {\r\n        this.required = [];\r\n        this.maxLength = [];\r\n        this.shouldExist = [];\r\n        this.unique = [];\r\n    }\r\n\r\n}\r\n","import { MasterDataOperationStatus } from '../enums/masterdata-operation-status.entity';\r\n\r\nexport class MasterDataDeletionResult {\r\n\r\n    id: number;\r\n    code: string;\r\n    masterDataOperationStatus: MasterDataOperationStatus;\r\n\r\n    constructor(id: number, code: string, masterDataOperationStatus: MasterDataOperationStatus) {\r\n        this.id = id;\r\n        this.code = code;\r\n        this.masterDataOperationStatus = masterDataOperationStatus;\r\n    }\r\n\r\n    public toUserFriendlyMessage(): string {\r\n        switch (this.masterDataOperationStatus) {\r\n            case MasterDataOperationStatus.Success:\r\n                return 'Masterdata has been successfully deleted.';\r\n            case MasterDataOperationStatus.ForeignKeyViolation:\r\n                return 'Masterdata cannot be deleted because it is assigned to and used in one or more companies.';\r\n            case MasterDataOperationStatus.RessourceNotFound:\r\n                return 'Masterdata could not be found.';\r\n            default:\r\n                return 'Unknown error';\r\n        }\r\n    }\r\n}\r\n","export class StatusDescriptionTypes {\r\n    titleId: number;\r\n    StatusDescription: string;\r\n\r\n    constructor(titleId: number = null, StatusDescription: string = null) {\r\n        this.titleId = titleId;\r\n        this.StatusDescription = StatusDescription;\r\n    }\r\n}","export class TitleDesignationTypes {\r\n    titleId: number;\r\n    titleDesignation: string;\r\n\r\n    constructor(titleId: number = null, titleDesignation: string = null) {\r\n        this.titleId = titleId;\r\n        this.titleDesignation = titleDesignation;\r\n    }\r\n}","export enum BankTypes {\r\n    IBAN = 1,\r\n    Other = 2,\r\n}\r\n","export enum MasterDataOperationStatus {\r\n    None = 0,\r\n    Success = 1,\r\n    UnknownError = 2,\r\n    ForeignKeyViolation = 3,\r\n    RessourceNotFound = 4,\r\n}\r\n","export enum StatusDescription {\r\n    StatusInactive = 0,\r\n    StatusActive = 1,\r\n\r\n}","export enum Status {\r\n    Activated = 1,\r\n    Deactivated = 2,\r\n}\r\n","export enum TitleDesignation {\r\n    Mr = 1,\r\n    Mrs = 2,\r\n    Ms = 3\r\n}","import { Injectable } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AgGridCheckboxComponent } from '../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridContextualSearchComponent } from '../../components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { ColumnConfigurationProperties } from '../../entities/grid-column-configuration.entity';\r\nimport { GridProperties } from '../../entities/grid-properties.entity';\r\nimport { MasterDataProps } from '../../entities/masterdata-props.entity';\r\nimport { AgGridService } from '../ag-grid.service';\r\nimport { MasterdataService } from '../http-services/masterdata.service';\r\nimport { UiService } from '../ui.service';\r\nimport { UtilService } from '../util.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class GridActionsService {\r\n    constructor(\r\n        public gridService: AgGridService,\r\n        private utilService: UtilService,\r\n        private uiService: UiService,\r\n        protected masterdataService: MasterdataService,\r\n    ) { }\r\n\r\n    getColumns(configuration: ColumnConfigurationProperties[], gridCode: string,\r\n        company: string): Observable<agGrid.ColDef[]> {\r\n\r\n        const observableBatch: Array<Observable<any>> = [];\r\n\r\n        configuration.filter((opt) => opt.gridType === 'masterdata').map((config) => {\r\n\r\n            const columnDef = this.getColDef(config);\r\n\r\n            observableBatch.push(\r\n                this.masterdataService.getFullMasterData(config.optionSet, company, false).pipe(\r\n                    map((data) => {\r\n\r\n                        const gridProps: GridProperties = this.getGridPropertyForMasterData(config.optionSet);\r\n\r\n                        columnDef.editable = config.isEditable;\r\n                        columnDef.cellRendererFramework = AgGridContextualSearchComponent;\r\n\r\n                        columnDef.cellRendererParams = {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: config.isEditable,\r\n                            },\r\n                            gridId: gridProps.gridCode,\r\n                            options: data[config.optionSet],\r\n                            isRequired: false,\r\n                            displayProperty: gridProps.display,\r\n                            valueProperty: gridProps.value,\r\n                            lightBoxTitle: 'Results for ' + config.optionSet,\r\n                            showContextualSearchIcon: true,\r\n                        };\r\n                        return columnDef;\r\n                    }),\r\n                ),\r\n            );\r\n\r\n            return observableBatch;\r\n        });\r\n\r\n        const ColDef = configuration.filter((opt) => opt.gridType !== 'masterdata').map((config) => {\r\n\r\n            const columnDef: agGrid.ColDef = this.getColDef(config);\r\n\r\n            if (config.gridType === 'numeric') {\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n\r\n            if (config.gridType === 'boolean') {\r\n                columnDef.cellRendererFramework = AgGridCheckboxComponent;\r\n                columnDef.cellRendererParams = {\r\n                    disabled: config.isEditable,\r\n                };\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = config.gridType === 'month' ? 'monthFormat' : 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n                columnDef.cellEditor = 'atlasMonthDatePicker';\r\n            }\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            columnDef.editable = config.isEditable;\r\n\r\n            return of(columnDef);\r\n        });\r\n\r\n        const completeColDef = ColDef.concat(observableBatch);\r\n\r\n        return forkJoin(completeColDef);\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        let data = '';\r\n        if (params && params.value) {\r\n            data = new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(params.value);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    isGridCheckboxEditable(params) {\r\n        return !(params.context.gridEditable);\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    getColDef(configuration: ColumnConfigurationProperties): agGrid.ColDef {\r\n        const field = this.utilService.convertToCamelCase(configuration.fieldName);\r\n        return {\r\n            colId: field,\r\n            headerName: configuration.friendlyName,\r\n            field,\r\n            width: 100,\r\n            hide: !configuration.isVisible,\r\n            rowGroup: configuration.isGroup,\r\n            enableRowGroup: configuration.isGroup,\r\n            cellClassRules: {\r\n                'ag-grid-invalid-mandatory-field': ((params) => params.data.invalid && params.data.invalid[field]),\r\n            },\r\n        };\r\n    }\r\n\r\n    getGridPropertyForMasterData(masterdataname: string): GridProperties {\r\n        let props: GridProperties;\r\n\r\n        switch (masterdataname) {\r\n\r\n            case MasterDataProps.Commodities: {\r\n                props = {\r\n                    id: 'commodityId',\r\n                    display: 'principalCommodity',\r\n                    value: 'commodityId',\r\n                    description: '',\r\n                    orderBy: 'principalCommodity',\r\n                    gridCode: 'commodityCodesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.ProfitCenters: {\r\n                props = {\r\n                    id: 'profitCenterId',\r\n                    display: 'profitCenterCode',\r\n                    value: 'profitCenterId',\r\n                    description: '',\r\n                    orderBy: 'profitCenterCode',\r\n                    gridCode: 'profitCenterMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.NominalAccounts: {\r\n                props = {\r\n                    id: 'nominalAccountId',\r\n                    display: 'mainAccountTitle',\r\n                    value: 'nominalAccountId',\r\n                    description: '',\r\n                    orderBy: 'mainAccountTitle',\r\n                    gridCode: 'nominalAccountMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.CostTypes: {\r\n                props = {\r\n                    id: 'costTypeId',\r\n                    display: 'costTypeCode',\r\n                    value: 'costTypeId',\r\n                    description: '',\r\n                    orderBy: 'costTypeCode',\r\n                    gridCode: 'costTypesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.BusinessSectors: {\r\n                props = {\r\n                    id: 'sectorId',\r\n                    display: 'sectorCode',\r\n                    value: 'sectorId',\r\n                    description: '',\r\n                    orderBy: 'sectorCode',\r\n                    gridCode: 'businessSectorsMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.PriceUnits: {\r\n                props = {\r\n                    id: 'priceUnitId',\r\n                    display: 'priceCode',\r\n                    value: 'priceUnitId',\r\n                    description: '',\r\n                    orderBy: 'priceCode',\r\n                    gridCode: 'priceCodesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.WeightUnits: {\r\n                props = {\r\n                    id: 'weightUnitId',\r\n                    display: 'weightCode',\r\n                    value: 'weightUnitId',\r\n                    description: '',\r\n                    orderBy: '',\r\n                    gridCode: 'weightCodesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.LdcRegion: {\r\n                props = {\r\n                    id: 'ldcRegionCode',\r\n                    display: 'ldcRegionCode',\r\n                    value: 'ldcRegionCode',\r\n                    description: '',\r\n                    orderBy: 'ldcRegionCode',\r\n                    gridCode: 'regionsMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.CommodityTypes: {\r\n                props = {\r\n                    id: 'commodityTypeId',\r\n                    display: 'code',\r\n                    value: '',\r\n                    description: '',\r\n                    orderBy: 'code',\r\n                    gridCode: 'commodityTypesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.Currencies: {\r\n                props = {\r\n                    id: 'currencyCode',\r\n                    display: 'currencyCode',\r\n                    value: 'currencyCode',\r\n                    description: '',\r\n                    orderBy: 'currencyCode',\r\n                    gridCode: 'currencyCodesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.Countries: {\r\n                props = {\r\n                    id: 'countryId',\r\n                    display: 'countryCode',\r\n                    value: 'countryId',\r\n                    description: '',\r\n                    orderBy: 'countryCode',\r\n                    gridCode: 'countryCodesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            case MasterDataProps.Province: {\r\n                props = {\r\n                    id: 'provinceId',\r\n                    display: '',\r\n                    value: '',\r\n                    description: '',\r\n                    orderBy: 'stateCode',\r\n                    gridCode: 'provincesMasterData',\r\n                };\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n        return props;\r\n    }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BulkEditSearchResult } from '../../dtos/bulkEdit-search-result';\r\nimport { ReferentialCounterpartiesSearchResult } from '../../dtos/referential-Counterparties-search-result';\r\nimport { HttpRequestOptions } from '../../entities/http-services/http-request-options.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class ReferentialCounterpartiesService extends HttpBaseService {\r\n    private readonly clientDetailsControllerUrl = 'clientDetails';\r\n    constructor(\r\n        http: HttpClient,\r\n        private companyManager: CompanyManagerService,\r\n    ) {\r\n        super(http);\r\n    }\r\n    search(request: ListAndSearchRequest, showDuplicateCounterpartyData: boolean): Observable<ApiPaginatedCollection<ReferentialCounterpartiesSearchResult>> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        options.headers = this.defaultHttpHeaders;\r\n        let queryParameters = new HttpParams();\r\n        queryParameters = queryParameters.set('showDuplicateCounterpartyData', showDuplicateCounterpartyData.toString());\r\n        options.params = queryParameters;\r\n        return this.post<ApiPaginatedCollection<ReferentialCounterpartiesSearchResult>>(\r\n            `${environment.reportingServiceLink}/${encodeURIComponent(String(company))}/${this.clientDetailsControllerUrl}/search`, request, options);\r\n    }\r\n\r\n    getBulkEditdata(request: ListAndSearchRequest): Observable<ApiPaginatedCollection<BulkEditSearchResult>> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n\r\n        return this.post<ApiPaginatedCollection<BulkEditSearchResult>>(\r\n            `${environment.reportingServiceLink}/${encodeURIComponent(String(company))}/${this.clientDetailsControllerUrl}/getBulkEditdata`, request);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { ReferentialCounterpartiesService } from '../http-services/referential-counterparties.service';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n@Injectable()\r\nexport class ReferentialBulkEditCounterpartiesDataLoader implements DataLoader {\r\n\r\n    constructor(private referentialCounterpartiesService: ReferentialCounterpartiesService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n\r\n        const list = this.referentialCounterpartiesService.getBulkEditdata(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { ReferentialCounterpartiesService } from '../http-services/referential-counterparties.service';\r\n@Injectable()\r\nexport class ReferentialCounterpartiesDataLoader implements DataLoader {\r\n\r\n    constructor(private referentialCounterpartiesService: ReferentialCounterpartiesService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number,\r\n        showDuplicateCounterpartyData: boolean = false): Observable<any[]> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n\r\n        const list = this.referentialCounterpartiesService.search(request, showDuplicateCounterpartyData)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BusinessSector } from '../entities/business-sector-entity';\r\nimport { ContractTerm } from '../entities/contract-term.entity';\r\nimport { FieldErrors } from '../entities/field-errors.entity';\r\nimport { MasterDataProps } from '../entities/masterdata-props.entity';\r\nimport { Menu } from '../entities/menu.entity';\r\nimport { PaymentTerm } from '../entities/payment-term.entity';\r\nimport { PeriodType } from '../entities/period-type.entity';\r\nimport { Vessel } from '../entities/vessel.entity';\r\nimport { Arbitration } from './../entities/arbitration.entity';\r\nimport { CommodityTypes } from './../entities/commodityTypes.entity';\r\nimport { CostType } from './../entities/cost-type.entity';\r\nimport { Country } from './../entities/country.entity';\r\nimport { FieldValidation } from './../entities/field-validation.entity';\r\nimport { MasterData } from './../entities/masterdata.entity';\r\nimport { Port } from './../entities/port.entity';\r\nimport { PriceUnit } from './../entities/price-unit.entity';\r\nimport { ShippingStatus } from './../entities/shipping-status.entity';\r\nimport { WeightUnit } from './../entities/weight-unit.entity';\r\nimport { nameof } from './util.service';\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class MasterdataManagementService {\r\n\r\n    constructor(private router: Router) { }\r\n\r\n    public menus: Menu[] = [\r\n        {\r\n            title: 'Global',\r\n            index: 0,\r\n            imageUrl: './assets/img/Global.png',\r\n            authorized: '',\r\n            navigateUrl: '/referential/masterdata/',\r\n            privilege: '',\r\n            childrens: [\r\n                {\r\n                    title: 'Commodity Types',\r\n                    index: 0,\r\n                    navigateUrl: MasterDataProps.CommodityTypes,\r\n                    privilege: '',\r\n                    gridCode: 'commodityTypesMasterData',\r\n                    isLocal: false,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Country Codes',\r\n                    index: 1,\r\n                    navigateUrl: MasterDataProps.Countries,\r\n                    privilege: '',\r\n                    gridCode: 'countryCodesMasterData',\r\n                    isLocal: false,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Currency Codes',\r\n                    index: 2,\r\n                    navigateUrl: MasterDataProps.Currencies,\r\n                    privilege: '',\r\n                    gridCode: 'currencyCodesMasterData',\r\n                    isLocal: false,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Provinces',\r\n                    index: 3,\r\n                    navigateUrl: MasterDataProps.Province,\r\n                    privilege: '',\r\n                    gridCode: 'provincesMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Regions',\r\n                    index: 4,\r\n                    navigateUrl: MasterDataProps.LdcRegion,\r\n                    privilege: '',\r\n                    gridCode: 'regionsMasterData',\r\n                    isLocal: false,\r\n                    isGlobal: true,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            title: 'Trading & Execution',\r\n            index: 1,\r\n            imageUrl: './assets/img/TradingExecution.png',\r\n            authorized: '',\r\n            navigateUrl: '/referential/masterdata/',\r\n            privilege: '',\r\n            childrens: [\r\n                {\r\n                    title: 'Arbitration Codes',\r\n                    index: 0,\r\n                    navigateUrl: MasterDataProps.Arbitrations,\r\n                    privilege: '',\r\n                    gridCode: 'arbitrationCodeMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Business Sector',\r\n                    index: 1,\r\n                    navigateUrl: MasterDataProps.BusinessSectors,\r\n                    privilege: '',\r\n                    gridCode: 'businessSectorsMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Commodity Codes',\r\n                    index: 2,\r\n                    navigateUrl: MasterDataProps.Commodities,\r\n                    privilege: '',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Contract Terms',\r\n                    index: 3,\r\n                    navigateUrl: MasterDataProps.ContractTerms,\r\n                    privilege: '',\r\n                    gridCode: 'contractTermsMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Counterparties',\r\n                    index: 4,\r\n                    navigateUrl: MasterDataProps.Counterparties,\r\n                    privilege: '',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'FX Deal Type',\r\n                    index: 5,\r\n                    navigateUrl: MasterDataProps.FxDealType,\r\n                    privilege: '',\r\n                    gridCode: 'fxTradeTypeMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Payment Terms',\r\n                    index: 6,\r\n                    navigateUrl: MasterDataProps.PaymentTerms,\r\n                    privilege: '',\r\n                    gridCode: 'paymentTermsMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Period Types',\r\n                    index: 7,\r\n                    navigateUrl: MasterDataProps.PeriodTypes,\r\n                    privilege: '',\r\n                    gridCode: 'periodTypeMasterData',\r\n                    isLocal: false,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Port Codes',\r\n                    index: 8,\r\n                    navigateUrl: MasterDataProps.Ports,\r\n                    privilege: '',\r\n                    gridCode: 'portCodeMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Price Codes',\r\n                    index: 9,\r\n                    navigateUrl: MasterDataProps.PriceUnits,\r\n                    privilege: '',\r\n                    gridCode: 'priceCodesMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Shipping Types',\r\n                    index: 10,\r\n                    navigateUrl: MasterDataProps.ShippingTypes,\r\n                    privilege: '',\r\n                    gridCode: 'shippingStatusMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Transport Types',\r\n                    index: 11,\r\n                    navigateUrl: MasterDataProps.TransportTypes,\r\n                    privilege: '',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                    gridCode: 'transportTypesMasterData',\r\n                },\r\n                {\r\n                    title: 'Vessel Information',\r\n                    index: 12,\r\n                    navigateUrl: MasterDataProps.Vessels,\r\n                    privilege: '',\r\n                    gridCode: 'vesselMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Weight Codes',\r\n                    index: 13,\r\n                    navigateUrl: MasterDataProps.WeightUnits,\r\n                    privilege: '',\r\n                    gridCode: 'weightCodesMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            title: 'Finance',\r\n            index: 2,\r\n            imageUrl: './assets/img/Business.png',\r\n            authorized: '',\r\n            navigateUrl: '/referential/masterdata/',\r\n            privilege: '',\r\n            childrens: [\r\n                {\r\n                    title: 'Cost Types',\r\n                    index: 0,\r\n                    navigateUrl: MasterDataProps.CostTypes,\r\n                    privilege: '',\r\n                    gridCode: 'costTypesMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Departments',\r\n                    index: 1,\r\n                    navigateUrl: MasterDataProps.Departments,\r\n                    privilege: '',\r\n                    gridCode: 'departmentMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: false,\r\n                },\r\n                {\r\n                    title: 'Nominal Account Ledger',\r\n                    index: 2,\r\n                    navigateUrl: MasterDataProps.NominalAccounts,\r\n                    privilege: '',\r\n                    gridCode: 'nominalAccountMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Profit Centers',\r\n                    index: 3,\r\n                    navigateUrl: MasterDataProps.ProfitCenters,\r\n                    privilege: '',\r\n                    gridCode: 'profitCenterMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n                {\r\n                    title: 'Tax Codes',\r\n                    index: 4,\r\n                    navigateUrl: MasterDataProps.TaxCode,\r\n                    privilege: '',\r\n                    gridCode: 'taxCodesMasterData',\r\n                    isLocal: true,\r\n                    isGlobal: true,\r\n                },\r\n            ],\r\n        },\r\n    ];\r\n\r\n    private searchGridName(targets: Menu[], matchNavigateUrl: string): string {\r\n        const selected = targets.find((target) => target.navigateUrl === matchNavigateUrl);\r\n        if (selected) {\r\n            return selected.gridCode;\r\n        } else {\r\n            for (const target of targets) {\r\n                if (target.childrens) {\r\n                    const gridCode = this.searchGridName(target.childrens, matchNavigateUrl);\r\n                    if (gridCode) {\r\n                        return gridCode;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private isLocal(targets: Menu[], masterdata: string): boolean {\r\n        for (const target of targets) {\r\n            if (target.childrens) {\r\n                for (const child of target.childrens) {\r\n                    if (child.navigateUrl === masterdata) {\r\n                        return child.isLocal;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private isGlobal(targets: Menu[], masterdata: string): boolean {\r\n        for (const target of targets) {\r\n            if (target.childrens) {\r\n                for (const child of target.childrens) {\r\n                    if (child.navigateUrl === masterdata) {\r\n                        return child.isGlobal;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getGridName(navigateUrl: string): string {\r\n        return this.searchGridName(this.menus, navigateUrl);\r\n    }\r\n\r\n    isLocalLevel(navigateUrl: string): boolean {\r\n        return this.isLocal(this.menus, navigateUrl);\r\n    }\r\n\r\n    isGlobalLevel(navigateUrl: string): boolean {\r\n        return this.isGlobal(this.menus, navigateUrl);\r\n    }\r\n\r\n    getValidationForMasterData(masterDataName: string) {\r\n        const validation = new FieldValidation();\r\n        switch (masterDataName) {\r\n            case MasterDataProps.CommodityTypes:\r\n                validation.required = [\r\n                    { name: nameof<CommodityTypes>('code') },\r\n                    { name: nameof<CommodityTypes>('description') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<CommodityTypes>('code'), maxLength: 10 },\r\n                    { name: nameof<CommodityTypes>('description'), maxLength: 50 }];\r\n                // The below line is here as exemple but should not be applied\r\n                // validation.shouldExist = [{ name: 'code', masterData: MasterDataProps.Commodities, property: 'commodityCode' }];\r\n                validation.unique = [nameof<CommodityTypes>('code')];\r\n                break;\r\n            case MasterDataProps.Countries:\r\n                validation.required = [\r\n                    { name: nameof<Country>('countryCode') },\r\n                    { name: nameof<Country>('description') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<Country>('countryCode'), maxLength: 3 },\r\n                    { name: nameof<Country>('description'), maxLength: 50 }];\r\n                // Other max-length to add\r\n                validation.unique = [nameof<Country>('countryCode')];\r\n                break;\r\n            case MasterDataProps.ContractTerms:\r\n                validation.required = [\r\n                    { name: nameof<ContractTerm>('contractTermCode') },\r\n                    { name: nameof<ContractTerm>('description') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<ContractTerm>('contractTermCode'), maxLength: 10 },\r\n                    { name: nameof<ContractTerm>('description'), maxLength: 50 }];\r\n                validation.unique = [nameof<ContractTerm>('contractTermCode')];\r\n                break;\r\n            case MasterDataProps.PaymentTerms:\r\n                validation.required = [\r\n                    { name: nameof<PaymentTerm>('paymentTermCode') },\r\n                    { name: nameof<PaymentTerm>('creditHow') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<PaymentTerm>('paymentTermCode'), maxLength: 8 },\r\n                    { name: nameof<PaymentTerm>('creditHow'), maxLength: 1 }];\r\n                validation.unique = [nameof<PaymentTerm>('paymentTermCode')];\r\n                break;\r\n            case MasterDataProps.BusinessSectors:\r\n                validation.required = [\r\n                    { name: nameof<BusinessSector>('sectorCode') },\r\n                    { name: nameof<BusinessSector>('description') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<BusinessSector>('sectorCode'), maxLength: 4 },\r\n                    { name: nameof<BusinessSector>('description'), maxLength: 60 }];\r\n                validation.unique = [nameof<BusinessSector>('sectorCode')];\r\n                break;\r\n            case MasterDataProps.Vessels:\r\n                validation.required = [\r\n                    { name: nameof<Vessel>('vesselName') },\r\n                    { name: nameof<Vessel>('description') },\r\n                    { name: nameof<Vessel>('imo') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<Vessel>('vesselName'), maxLength: 30 },\r\n                    { name: nameof<Vessel>('description'), maxLength: 50 },\r\n                    { name: nameof<Vessel>('imo'), maxLength: 7 }];\r\n                validation.unique = [nameof<Vessel>('vesselName')];\r\n                break;\r\n            case MasterDataProps.PriceUnits:\r\n                validation.required = [\r\n                    { name: nameof<PriceUnit>('priceCode') },\r\n                    { name: nameof<PriceUnit>('description') },\r\n                    { name: nameof<PriceUnit>('conversionFactor') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<PriceUnit>('priceCode'), maxLength: 6 },\r\n                    { name: nameof<PriceUnit>('mdmId'), maxLength: 5 },\r\n                    { name: nameof<PriceUnit>('description'), maxLength: 50 },\r\n                    { name: nameof<PriceUnit>('conversionFactor'), maxLength: 13 },\r\n                    { name: nameof<PriceUnit>('weightCode'), maxLength: 6 }];\r\n                validation.unique = [nameof<PriceUnit>('priceCode'), nameof<PriceUnit>('mdmId')];\r\n                break;\r\n            case MasterDataProps.ShippingStatus:\r\n                validation.required = [\r\n                    { name: nameof<ShippingStatus>('shippingStatusCode') },\r\n                    { name: nameof<ShippingStatus>('description') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<ShippingStatus>('shippingStatusCode'), maxLength: 2 },\r\n                    { name: nameof<ShippingStatus>('description'), maxLength: 50 }];\r\n                // Other max-length to add\r\n                validation.unique = [nameof<ShippingStatus>('shippingStatusCode')];\r\n                break;\r\n            case MasterDataProps.WeightUnits:\r\n                validation.required = [\r\n                    { name: nameof<WeightUnit>('weightCode') },\r\n                    { name: nameof<WeightUnit>('description') },\r\n                    { name: nameof<WeightUnit>('conversionFactor') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<WeightUnit>('weightCode'), maxLength: 6 },\r\n                    { name: nameof<WeightUnit>('description'), maxLength: 50 },\r\n                    { name: nameof<WeightUnit>('conversionFactor'), maxLength: 13 }];\r\n                // Other max-length to add\r\n                validation.unique = [nameof<WeightUnit>('weightCode')];\r\n                break;\r\n            case MasterDataProps.CostTypes:\r\n                validation.required = [\r\n                    { name: nameof<CostType>('costTypeCode') },\r\n                    { name: nameof<CostType>('name') },\r\n                    // { name: nameof<CostType>('nominalAccountCode') },\r\n                    { name: nameof<CostType>('otherAcc') },\r\n                    { name: nameof<CostType>('accrue') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<CostType>('costTypeCode'), maxLength: 10 },\r\n                    { name: nameof<CostType>('name'), maxLength: 40 },\r\n                    { name: nameof<CostType>('nominalAccountCode'), maxLength: 10 },\r\n                    { name: nameof<CostType>('altCode'), maxLength: 10 },\r\n                    { name: nameof<CostType>('accrue'), maxLength: 30 },\r\n                    { name: nameof<CostType>('sectionCode'), maxLength: 5 },\r\n                    { name: nameof<CostType>('interfaceCode'), maxLength: 30 },\r\n                    { name: nameof<CostType>('objectCode'), maxLength: 5 }];\r\n                // Other max-length to add\r\n                validation.unique = [nameof<CostType>('costTypeCode')];\r\n                break;\r\n            case MasterDataProps.Ports:\r\n                validation.required = [\r\n                    { name: nameof<Port>('portCode') },\r\n                    { name: nameof<Port>('description') },\r\n                    { name: nameof<Port>('countryId') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<Port>('mDMId'), maxLength: 10 },\r\n                    { name: nameof<Port>('portCode'), maxLength: 10 },\r\n                    { name: nameof<Port>('description'), maxLength: 60 },\r\n                    { name: nameof<Port>('countryId'), maxLength: 3 },\r\n                    { name: nameof<Port>('type'), maxLength: 5 },\r\n                    { name: nameof<Port>('provinceId'), maxLength: 2 }];\r\n                // Other max-length to add\r\n                validation.unique = [nameof<Port>('portCode')];\r\n                break;\r\n            case MasterDataProps.Arbitrations:\r\n                validation.required = [\r\n                    { name: nameof<Arbitration>('arbitrationCode') },\r\n                    { name: nameof<Arbitration>('description') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<Arbitration>('arbitrationCode'), maxLength: 8 },\r\n                    { name: nameof<Arbitration>('description'), maxLength: 50 }];\r\n                // Other max-length to add\r\n                validation.unique = [nameof<Arbitration>('arbitrationCode')];\r\n                break;\r\n            case MasterDataProps.PeriodTypes:\r\n                validation.required = [\r\n                    { name: nameof<PeriodType>('periodTypeCode') },\r\n                    { name: nameof<PeriodType>('description') }];\r\n                validation.maxLength = [\r\n                    { name: nameof<PeriodType>('periodTypeCode'), maxLength: 1 },\r\n                    { name: nameof<PeriodType>('description'), maxLength: 50 }];\r\n                // Other max-length to add\r\n                validation.unique = [nameof<PeriodType>('periodTypeCode')];\r\n                break;\r\n        }\r\n        return validation;\r\n    }\r\n\r\n    getRowValidationErrors(fieldValidations: FieldValidation, row: any, masterData: MasterData): FieldErrors {\r\n        const errors = new FieldErrors();\r\n\r\n        // Required fields\r\n        const fieldsRequiredAndEmpty = this.getFieldsRequiredAndEmpty(row, fieldValidations.required);\r\n        if (fieldsRequiredAndEmpty) {\r\n            errors.empty = fieldsRequiredAndEmpty;\r\n        }\r\n\r\n        // maxLength\r\n        const fieldsTooLong = this.getFieldsTooLong(row, fieldValidations.maxLength);\r\n        if (fieldsTooLong) {\r\n            errors.tooLong = fieldsTooLong;\r\n        }\r\n\r\n        // in dropdown list\r\n        fieldValidations.shouldExist.forEach((shouldExist) => {\r\n            const value = row[shouldExist.name];\r\n            if (!masterData[shouldExist.masterData]\r\n                .find((masterdataList) =>\r\n                    (shouldExist.property ? masterdataList[shouldExist.property] : masterdataList) === value)) {\r\n                // Does not exists\r\n                const errorsForSameField = errors.doesNotExists\r\n                    .find((err: { name: string, values: any[] }) => err.name === shouldExist.name);\r\n                if (!errorsForSameField) {\r\n                    errors.doesNotExists.push({ name: shouldExist.name, values: [value] });\r\n                } else {\r\n                    if (errorsForSameField.values.indexOf(value) === -1) {\r\n                        errorsForSameField.values.push(value);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return errors;\r\n    }\r\n\r\n    getUnicityValidationErrors(list: any[], unique: string[]): Array<{ name: string, values: any[] }> {\r\n        const duplicate = [];\r\n        list.forEach((item) => {\r\n            unique.forEach((uniqueField) => {\r\n                const uniqueFieldValue = item[uniqueField];\r\n                if (uniqueFieldValue &&\r\n                    list.filter((itemInFilter) => itemInFilter[uniqueField])\r\n                        .filter((itemInFilter) => itemInFilter[uniqueField].toLowerCase() === item[uniqueField].toLowerCase()).length > 1) {\r\n                    const errorsForSameField = duplicate.find((duplicateError) => duplicateError.name === uniqueField);\r\n                    if (errorsForSameField) {\r\n                        if (errorsForSameField.values.indexOf(item[uniqueField]) === -1) {\r\n                            errorsForSameField.values.push(item[uniqueField]);\r\n                        }\r\n                    } else {\r\n                        duplicate.push({ name: uniqueField, values: [item[uniqueField]] });\r\n                    }\r\n                    if (!item['invalid']) {\r\n                        item['invalid'] = {};\r\n                    }\r\n                    item['invalid'][uniqueField] = true;\r\n                }\r\n            });\r\n\r\n        });\r\n        return duplicate;\r\n\r\n    }\r\n\r\n    getFieldsRequiredAndEmpty(object, properties: Array<{ name: string }>): string[] {\r\n        const fieldInError = [];\r\n        properties.forEach((property) => {\r\n            if (!object[property.name] || object[property.name].toString().trim().length === 0) {\r\n                fieldInError.push(property.name);\r\n                if (!object['invalid']) {\r\n                    object['invalid'] = {};\r\n                }\r\n                object['invalid'][property.name] = true;\r\n            }\r\n        });\r\n        if (fieldInError.length > 0) {\r\n            return fieldInError;\r\n        }\r\n    }\r\n\r\n    getFieldsTooLong(object, properties: Array<{ name: string, maxLength: number }>): Array<{ name: string, maxLength: number }> {\r\n        const fieldInError = [];\r\n        properties.forEach((property) => {\r\n            if (object[property.name] && object[property.name].length > property.maxLength) {\r\n                fieldInError.push(property);\r\n                if (!object['invalid']) {\r\n                    object['invalid'] = {};\r\n                }\r\n                object['invalid'][property.name] = true;\r\n            }\r\n        });\r\n        if (fieldInError.length > 0) {\r\n            return fieldInError;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}