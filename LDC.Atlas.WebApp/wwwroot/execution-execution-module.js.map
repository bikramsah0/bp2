{"version":3,"sources":["webpack:///./Client/app/execution/document/contract-advice-generation/contract-advice-generation.component.html","webpack:///./Client/app/execution/document/contract-advice-generation/contract-advice-generation.component.scss","webpack:///./Client/app/execution/document/contract-advice-generation/contract-advice-generation.component.ts","webpack:///./Client/app/execution/document/contract-advice-generation/form-components/selection-form/selection-form.component.html","webpack:///./Client/app/execution/document/contract-advice-generation/form-components/selection-form/selection-form.component.scss","webpack:///./Client/app/execution/document/contract-advice-generation/form-components/selection-form/selection-form.component.ts","webpack:///./Client/app/execution/document/dialog-boxes/document-upload-dialog-box/document-upload-dialog-box.component.html","webpack:///./Client/app/execution/document/dialog-boxes/document-upload-dialog-box/document-upload-dialog-box.component.scss","webpack:///./Client/app/execution/document/dialog-boxes/document-upload-dialog-box/document-upload-dialog-box.component.ts","webpack:///./Client/app/execution/document/list/card/document-list-card.component.html","webpack:///./Client/app/execution/document/list/card/document-list-card.component.scss","webpack:///./Client/app/execution/document/list/card/document-list-card.component.ts","webpack:///./Client/app/execution/document/list/document-list.component.html","webpack:///./Client/app/execution/document/list/document-list.component.scss","webpack:///./Client/app/execution/document/list/document-list.component.ts","webpack:///./Client/app/execution/execution-allocation/execution-allocation.component.css","webpack:///./Client/app/execution/execution-allocation/execution-allocation.component.html","webpack:///./Client/app/execution/execution-allocation/execution-allocation.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/additional-costs/additional-cost-list-display-view.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/additional-costs/additional-costs.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/additional-costs/additional-costs.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/additional-costs/additional-costs.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/additional-details/additional-details.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/additional-details/additional-details.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/additional-details/additional-details.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/bank-information/bank-information.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/bank-information/bank-information.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/bank-information/bank-information.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/cash-details.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/cash-details.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/cash-details.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/counterparty-card/counterparty-card.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/counterparty-card/counterparty-card.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/counterparty-card/counterparty-card.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/currency-information-card/currency-information-card.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/currency-information-card/currency-information-card.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/currency-information-card/currency-information-card.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/document-information/document-information.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/document-information/document-information.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/document-information/document-information.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/template-selection-card/payment-order-template-selection-card.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/template-selection-card/payment-order-template-selection-card.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-details/template-selection-card/payment-order-template-selection-card.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-dialog-component/cash-warning-dialog-component/cash-warning-dialog-component.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-dialog-component/cash-warning-dialog-component/cash-warning-dialog-component.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-dialog-component/cash-warning-dialog-component/cash-warning-dialog-component.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/cash-selection.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/cash-selection.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/cash-selection.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-different-client/payment-different-client.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-different-client/payment-different-client.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-different-client/payment-different-client.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-different-currency/payment-different-currency.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-different-currency/payment-different-currency.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-different-currency/payment-different-currency.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-full-transaction/payment-full-transaction.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-full-transaction/payment-full-transaction.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/payment-full-transaction/payment-full-transaction.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/receipt-different-currency/receipt-different-currency.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/receipt-different-currency/receipt-different-currency.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/receipt-different-currency/receipt-different-currency.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/receipt-full-transaction/receipt-full-transaction.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/receipt-full-transaction/receipt-full-transaction.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/receipt-full-transaction/receipt-full-transaction.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/simple-cash-payment/simple-cash-payment.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/simple-cash-payment/simple-cash-payment.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/simple-cash-payment/simple-cash-payment.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/simple-cash-receipt/simple-cash-receipt.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/simple-cash-receipt/simple-cash-receipt.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-selection/simple-cash-receipt/simple-cash-receipt.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-summary/cash-summary.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-summary/cash-summary.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-summary/cash-summary.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-summary/invoice-grid-for-summary/invoice-grid-for-summary.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-summary/invoice-grid-for-summary/invoice-grid-for-summary.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/cash-summary/invoice-grid-for-summary/invoice-grid-for-summary.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/execution-cash-create.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/execution-cash-create.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/execution-cash-create.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/pick-transaction/invoice-matching/invoice-matching.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/pick-transaction/invoice-matching/invoice-matching.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/pick-transaction/invoice-matching/invoice-matching.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-create/pick-transaction/pick-transaction.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-create/pick-transaction/pick-transaction.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-create/pick-transaction/pick-transaction.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-payment-list-page/execution-cash-payment-list-page.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-payment-list-page/execution-cash-payment-list-page.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-payment-list-page/execution-cash-payment-list-page.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash-receipt-list-page/execution-cash-receipt-list-page.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash-receipt-list-page/execution-cash-receipt-list-page.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash-receipt-list-page/execution-cash-receipt-list-page.component.ts","webpack:///./Client/app/execution/execution-cash/execution-cash.component.html","webpack:///./Client/app/execution/execution-cash/execution-cash.component.scss","webpack:///./Client/app/execution/execution-cash/execution-cash.component.ts","webpack:///./Client/app/execution/execution-charter/ag-grid-charterstatus-for-charter-bulk-closure/ag-grid-charterstatus-for-charter-bulk-closure.component.html","webpack:///./Client/app/execution/execution-charter/ag-grid-charterstatus-for-charter-bulk-closure/ag-grid-charterstatus-for-charter-bulk-closure.component.scss","webpack:///./Client/app/execution/execution-charter/ag-grid-charterstatus-for-charter-bulk-closure/ag-grid-charterstatus-for-charter-bulk-closure.component.ts","webpack:///./Client/app/execution/execution-charter/ag-grid-hyperlink-for-charter-bulk-closure/ag-grid-hyperlink-for-charter-bulk-closure.component.html","webpack:///./Client/app/execution/execution-charter/ag-grid-hyperlink-for-charter-bulk-closure/ag-grid-hyperlink-for-charter-bulk-closure.component.scss","webpack:///./Client/app/execution/execution-charter/ag-grid-hyperlink-for-charter-bulk-closure/ag-grid-hyperlink-for-charter-bulk-closure.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/purchase-allocation-component/purchase-allocation-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/purchase-allocation-component/purchase-allocation-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/purchase-allocation-component/purchase-allocation-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/quantity-allocation-component/quantity-allocation-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/quantity-allocation-component/quantity-allocation-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/quantity-allocation-component/quantity-allocation-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/sale-allocation-component/sale-allocation-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/sale-allocation-component/sale-allocation-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/allocation-form-components/sale-allocation-component/sale-allocation-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/contract-deallocation-dialog-component/contract-deallocation-dialog-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/contract-deallocation-dialog-component/contract-deallocation-dialog-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/contract-deallocation-dialog-component/contract-deallocation-dialog-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/deallocation-form-component/deallocation-component/deallocation-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/deallocation-form-component/deallocation-component/deallocation-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/deallocation-form-component/deallocation-component/deallocation-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/execution-charter-allocation-deallocation.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/execution-charter-allocation-deallocation.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-allocation-deallocation/execution-charter-allocation-deallocation.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-assignment/execution-charter-assignment.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-assignment/execution-charter-assignment.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-assignment/execution-charter-assignment.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/additional-information-form-component/additional-information-form-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/additional-information-form-component/additional-information-form-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/additional-information-form-component/additional-information-form-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/assign-section-dialog/assign-section-dialog.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/assign-section-dialog/assign-section-dialog.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/assign-section-dialog/assign-section-dialog.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/assigned-contract-list-form-component/assigned-contract-list-form-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/assigned-contract-list-form-component/assigned-contract-list-form-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/assigned-contract-list-form-component/assigned-contract-list-form-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-menu-bar-component/charter-menu-bar-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-menu-bar-component/charter-menu-bar-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-menu-bar-component/charter-menu-bar-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-pnl-report/charter-pnl-report.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-pnl-report/charter-pnl-report.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-pnl-report/charter-pnl-report.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-report/charter-report.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-report/charter-report.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/charter-report/charter-report.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/deassign-section-dialog/deassign-section-dialog.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/deassign-section-dialog/deassign-section-dialog.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/deassign-section-dialog/deassign-section-dialog.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/main-information-form-component/main-information-form-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/main-information-form-component/main-information-form-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/main-information-form-component/main-information-form-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/memo-form-component/memo-form-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/memo-form-component/memo-form-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/memo-form-component/memo-form-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/reassign-contract-ag-grid/reassign-contract-ag-grid.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/reassign-contract-ag-grid/reassign-contract-ag-grid.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/reassign-contract-ag-grid/reassign-contract-ag-grid.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/reassign-section-dialog/reassign-section-dialog.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/reassign-section-dialog/reassign-section-dialog.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/reassign-section-dialog/reassign-section-dialog.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/shipment-form-component/shipment-form-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/shipment-form-component/shipment-form-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/shipment-form-component/shipment-form-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/total-card-component/total-card-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/total-card-component/total-card-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/total-card-component/total-card-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/warning-component/warning-component.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/warning-component/warning-component.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/components/warning-component/warning-component.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/execution-charter-creation-page.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/execution-charter-creation-page.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-creation-page/execution-charter-creation-page.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-details/execution-charter-details.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-details/execution-charter-details.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-details/execution-charter-details.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-edit-page/execution-charter-edit-page.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-edit-page/execution-charter-edit-page.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-edit-page/execution-charter-edit-page.component.ts","webpack:///./Client/app/execution/execution-charter/execution-charter-list-page/execution-charter-list-page.component.html","webpack:///./Client/app/execution/execution-charter/execution-charter-list-page/execution-charter-list-page.component.scss","webpack:///./Client/app/execution/execution-charter/execution-charter-list-page/execution-charter-list-page.component.ts","webpack:///./Client/app/execution/execution-charter/group-amendments/charter-bulk-closure/charter-bulk-closure.component.html","webpack:///./Client/app/execution/execution-charter/group-amendments/charter-bulk-closure/charter-bulk-closure.component.scss","webpack:///./Client/app/execution/execution-charter/group-amendments/charter-bulk-closure/charter-bulk-closure.component.ts","webpack:///./Client/app/execution/execution-charter/group-amendments/execution-charter-group-amendments.component.html","webpack:///./Client/app/execution/execution-charter/group-amendments/execution-charter-group-amendments.component.scss","webpack:///./Client/app/execution/execution-charter/group-amendments/execution-charter-group-amendments.component.ts","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-bulk-closure-matrix/charter-bulk-closure-matrix.component.html","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-bulk-closure-matrix/charter-bulk-closure-matrix.component.scss","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-bulk-closure-matrix/charter-bulk-closure-matrix.component.ts","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-bulk-closure-matrix/charter-matrix-data.ts","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-bulk-closure-summary/charter-bulk-closure-summary.component.html","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-bulk-closure-summary/charter-bulk-closure-summary.component.scss","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-bulk-closure-summary/charter-bulk-closure-summary.component.ts","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-selection-bulk-closure/charter-selection-bulk-closure.component.html","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-selection-bulk-closure/charter-selection-bulk-closure.component.scss","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/charter-selection-bulk-closure/charter-selection-bulk-closure.component.ts","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/execution-charter-bulk-closure-function.component.html","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/execution-charter-bulk-closure-function.component.scss","webpack:///./Client/app/execution/execution-charter/group-function/bulk-closure-function/execution-charter-bulk-closure-function.component.ts","webpack:///./Client/app/execution/execution-charter/group-function/execution-charter-group-function.component.html","webpack:///./Client/app/execution/execution-charter/group-function/execution-charter-group-function.component.scss","webpack:///./Client/app/execution/execution-charter/group-function/execution-charter-group-function.component.ts","webpack:///./Client/app/execution/execution-invoicing-create/components/cost-form-component/cost-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing-create/components/cost-form-component/cost-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing-create/components/cost-form-component/cost-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing-create/components/purchase-goods-form-component/purchase-goods-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing-create/components/purchase-goods-form-component/purchase-goods-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing-create/components/purchase-goods-form-component/purchase-goods-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing-create/components/quantity-invoice-form-component/quantity-invoice-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing-create/components/quantity-invoice-form-component/quantity-invoice-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing-create/components/quantity-invoice-form-component/quantity-invoice-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing-create/components/reversal-form-component/reversal-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing-create/components/reversal-form-component/reversal-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing-create/components/reversal-form-component/reversal-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing-create/components/sales-goods-form-component/sales-goods-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing-create/components/sales-goods-form-component/sales-goods-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing-create/components/sales-goods-form-component/sales-goods-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing-create/components/washout-form-component/washout-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing-create/components/washout-form-component/washout-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing-create/components/washout-form-component/washout-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing-create/execution-invoicing-create.component.html","webpack:///./Client/app/execution/execution-invoicing-create/execution-invoicing-create.component.scss","webpack:///./Client/app/execution/execution-invoicing-create/execution-invoicing-create.component.ts","webpack:///./Client/app/execution/execution-invoicing-home/execution-invoicing-home.component.html","webpack:///./Client/app/execution/execution-invoicing-home/execution-invoicing-home.component.scss","webpack:///./Client/app/execution/execution-invoicing-home/execution-invoicing-home.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/commercial.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/commercial.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/commercial.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/commercial-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/commercial-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/commercial-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/contract-selection-form-component/contract-selection-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/contract-selection-form-component/contract-selection-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/contract-selection-form-component/contract-selection-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/invoice-selection-form-component/invoice-selection-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/invoice-selection-form-component/invoice-selection-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/invoice-selection-form-component/invoice-selection-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/pricing-options/pricing-options.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/pricing-options/pricing-options.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/commercial-selection/components/pricing-options/pricing-options.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/summary/commercial-summary.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/summary/commercial-summary.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/summary/commercial-summary.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/commercial-working-page.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/commercial-working-page.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/commercial-working-page.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost-tax/add-cost-tax.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost-tax/add-cost-tax.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost-tax/add-cost-tax.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost-total/add-cost-total.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost-total/add-cost-total.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost-total/add-cost-total.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost/add-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost/add-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/add-cost/add-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/payments-component/payments-component.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/payments-component/payments-component.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/payments-component/payments-component.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/selection-form-component/selection-form-component.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/selection-form-component/selection-form-component.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/selection-form-component/selection-form-component.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/taxes-component/taxes-component.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/taxes-component/taxes-component.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/taxes-component/taxes-component.component.ts","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/value-of-goods-component/value-of-goods-component.component.html","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/value-of-goods-component/value-of-goods-component.component.scss","webpack:///./Client/app/execution/execution-invoicing/commercial/components/working-page/components/value-of-goods-component/value-of-goods-component.component.ts","webpack:///./Client/app/execution/execution-invoicing/components/document-template/document-template.component.html","webpack:///./Client/app/execution/execution-invoicing/components/document-template/document-template.component.scss","webpack:///./Client/app/execution/execution-invoicing/components/document-template/document-template.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/contract-search/contract-search.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/contract-search/contract-search.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/contract-search/contract-search.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/cost-invoicee-options/cost-invoicee-options.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/cost-invoicee-options/cost-invoicee-options.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/cost-invoicee-options/cost-invoicee-options.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/invoice-selection/invoice-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/invoice-selection/invoice-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/components/invoice-selection/invoice-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/cost-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/cost-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-selection/cost-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/document-template/cost-document-template.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/document-template/cost-document-template.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/document-template/cost-document-template.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/payments/cost-payments.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/payments/cost-payments.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/payments/cost-payments.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/selected-cost/invoice-cost-selected-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/selected-cost/invoice-cost-selected-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/selected-cost/invoice-cost-selected-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/selection/cost-invoice-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/selection/cost-invoice-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/selection/cost-invoice-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/taxes/invoicing-cost-taxes.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/taxes/invoicing-cost-taxes.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/components/taxes/invoicing-cost-taxes.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/cost-working-page.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/cost-working-page.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/cost-working-page/cost-working-page.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/components/summary/cost-summary.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/components/summary/cost-summary.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/components/summary/cost-summary.component.ts","webpack:///./Client/app/execution/execution-invoicing/cost/cost.component.html","webpack:///./Client/app/execution/execution-invoicing/cost/cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/cost/cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/dialog-boxes/apportion-dialog/apportion-dialog.component.html","webpack:///./Client/app/execution/execution-invoicing/dialog-boxes/apportion-dialog/apportion-dialog.component.scss","webpack:///./Client/app/execution/execution-invoicing/dialog-boxes/apportion-dialog/apportion-dialog.component.ts","webpack:///./Client/app/execution/execution-invoicing/dialog-boxes/bank-account-dialog/bank-account-dialog.component.html","webpack:///./Client/app/execution/execution-invoicing/dialog-boxes/bank-account-dialog/bank-account-dialog.component.scss","webpack:///./Client/app/execution/execution-invoicing/dialog-boxes/bank-account-dialog/bank-account-dialog.component.ts","webpack:///./Client/app/execution/execution-invoicing/execution-invoicing.component.css","webpack:///./Client/app/execution/execution-invoicing/execution-invoicing.component.html","webpack:///./Client/app/execution/execution-invoicing/execution-invoicing.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection-cost/components/goods-cost-contracts-cost/goods-cost-contracts-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection-cost/components/goods-cost-contracts-cost/goods-cost-contracts-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection-cost/components/goods-cost-contracts-cost/goods-cost-contracts-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection-cost/goods-cost-selection-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection-cost/goods-cost-selection-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection-cost/goods-cost-selection-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-contract-search/goods-cost-contract-search.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-contract-search/goods-cost-contract-search.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-contract-search/goods-cost-contract-search.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-invoice-selection/goods-cost-invoice-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-invoice-selection/goods-cost-invoice-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-invoice-selection/goods-cost-invoice-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-pricing-options/goods-cost-pricing-options.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-pricing-options/goods-cost-pricing-options.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-pricing-options/goods-cost-pricing-options.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/goods-cost-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/goods-cost-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-selection/goods-cost-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-summary/goods-cost-summary.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-summary/goods-cost-summary.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-summary/goods-cost-summary.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-additional-cost/goods-cost-additional-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-additional-cost/goods-cost-additional-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-additional-cost/goods-cost-additional-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-details/goods-cost-details.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-details/goods-cost-details.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-details/goods-cost-details.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-payments/goods-cost-payments.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-payments/goods-cost-payments.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-payments/goods-cost-payments.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-cost/goods-cost-tax-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-cost/goods-cost-tax-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-cost/goods-cost-tax-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-goods/goods-cost-tax-goods.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-goods/goods-cost-tax-goods.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-goods/goods-cost-tax-goods.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-total/goods-cost-total.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-total/goods-cost-total.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-total/goods-cost-total.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-value-of-goods/goods-cost-value-of-goods.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-value-of-goods/goods-cost-value-of-goods.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-value-of-goods/goods-cost-value-of-goods.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/goods-cost-working-page.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/goods-cost-working-page.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/components/goods-cost-working-page/goods-cost-working-page.component.ts","webpack:///./Client/app/execution/execution-invoicing/goods-cost/goods-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/goods-cost/goods-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/goods-cost/goods-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/header/header.component.html","webpack:///./Client/app/execution/execution-invoicing/header/header.component.scss","webpack:///./Client/app/execution/execution-invoicing/header/header.component.ts","webpack:///./Client/app/execution/execution-invoicing/invoicing-base-form/document-template-base/document-template-base.component.html","webpack:///./Client/app/execution/execution-invoicing/invoicing-base-form/document-template-base/document-template-base.component.scss","webpack:///./Client/app/execution/execution-invoicing/invoicing-base-form/document-template-base/document-template-base.component.ts","webpack:///./Client/app/execution/execution-invoicing/invoicing-base-form/invoicing-base-form.component.html","webpack:///./Client/app/execution/execution-invoicing/invoicing-base-form/invoicing-base-form.component.scss","webpack:///./Client/app/execution/execution-invoicing/invoicing-base-form/invoicing-base-form.component.ts","webpack:///./Client/app/execution/execution-invoicing/invoicing-summary/invoicing-summary.component.html","webpack:///./Client/app/execution/execution-invoicing/invoicing-summary/invoicing-summary.component.scss","webpack:///./Client/app/execution/execution-invoicing/invoicing-summary/invoicing-summary.component.ts","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/document-search/document-search.component.html","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/document-search/document-search.component.scss","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/document-search/document-search.component.ts","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/document-type/document-type.component.html","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/document-type/document-type.component.scss","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/document-type/document-type.component.ts","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/reversal-document-template/reversal-document-template.component.html","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/reversal-document-template/reversal-document-template.component.scss","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/reversal-document-template/reversal-document-template.component.ts","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/reversal-invoice-selection/reversal-invoice-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/reversal-invoice-selection/reversal-invoice-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/components/reversal-invoice-selection/reversal-invoice-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/reversal-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/reversal-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-selection/reversal-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-summary/reversal-summary.component.html","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-summary/reversal-summary.component.scss","webpack:///./Client/app/execution/execution-invoicing/reversal/components/reversal-summary/reversal-summary.component.ts","webpack:///./Client/app/execution/execution-invoicing/reversal/reversal.component.html","webpack:///./Client/app/execution/execution-invoicing/reversal/reversal.component.scss","webpack:///./Client/app/execution/execution-invoicing/reversal/reversal.component.ts","webpack:///./Client/app/execution/execution-invoicing/total-amount/total-amount.component.html","webpack:///./Client/app/execution/execution-invoicing/total-amount/total-amount.component.scss","webpack:///./Client/app/execution/execution-invoicing/total-amount/total-amount.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/decimals/decimals.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/decimals/decimals.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/decimals/decimals.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/invoice-type-selection/invoice-type-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/invoice-type-selection/invoice-type-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/invoice-type-selection/invoice-type-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/washout-search/washout-search.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/washout-search/washout-search.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/components/washout-search/washout-search.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/washout-selection.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/washout-selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-selection/washout-selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-summary/washout-summary.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-summary/washout-summary.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-summary/washout-summary.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/additional-cost/additional-cost.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/additional-cost/additional-cost.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/additional-cost/additional-cost.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/invoice-document/invoice-document.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/invoice-document/invoice-document.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/invoice-document/invoice-document.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/payments/payments.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/payments/payments.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/payments/payments.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/selection/selection.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/selection/selection.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/selection/selection.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/tax-costs/tax-costs.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/tax-costs/tax-costs.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/tax-costs/tax-costs.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/tax-goods/tax-goods.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/tax-goods/tax-goods.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/tax-goods/tax-goods.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/value-of-goods/value-of-goods.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/value-of-goods/value-of-goods.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/value-of-goods/value-of-goods.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/washout-total/washout-total.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/washout-total/washout-total.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/components/washout-total/washout-total.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/washout-working-page.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/washout-working-page.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/components/washout-working-page/washout-working-page.component.ts","webpack:///./Client/app/execution/execution-invoicing/washout/washout.component.html","webpack:///./Client/app/execution/execution-invoicing/washout/washout.component.scss","webpack:///./Client/app/execution/execution-invoicing/washout/washout.component.ts","webpack:///./Client/app/execution/execution.module.ts","webpack:///./Client/app/execution/execution.route.ts","webpack:///./Client/app/home/execution-dashboard/missing-invoices-details/missing-invoices-details.component.html","webpack:///./Client/app/home/execution-dashboard/missing-invoices-details/missing-invoices-details.component.scss","webpack:///./Client/app/home/execution-dashboard/missing-invoices-details/missing-invoices-details.component.ts","webpack:///./Client/app/shared/document-template-event.entity.ts","webpack:///./Client/app/shared/entities/additional-cost.entity.ts","webpack:///./Client/app/shared/entities/assigned-section.entity.ts","webpack:///./Client/app/shared/entities/cash.entity.ts","webpack:///./Client/app/shared/entities/charter-bulk-closure.entity.ts","webpack:///./Client/app/shared/entities/document-popup-button-settings.entity.ts","webpack:///./Client/app/shared/entities/filter.entity.ts","webpack:///./Client/app/shared/enums/apportion-basis-type.enum.ts","webpack:///./Client/app/shared/enums/cash-selection-type.ts","webpack:///./Client/app/shared/enums/cash-stepper-type.enum.ts","webpack:///./Client/app/shared/enums/charter-closure-status.enum.ts","webpack:///./Client/app/shared/enums/charter-group-function-type.ts","webpack:///./Client/app/shared/enums/cost-direction-type.enum.ts","webpack:///./Client/app/shared/enums/cost-sign.enum.ts","webpack:///./Client/app/shared/enums/invoice-payment-type.ts","webpack:///./Client/app/shared/enums/pricing-options.enum.ts","webpack:///./Client/app/shared/enums/tolerance-type.enum.ts","webpack:///./Client/app/shared/models/assigned-section-display-view.ts","webpack:///./Client/app/shared/models/cash-display-view.ts","webpack:///./Client/app/shared/models/charter-display-view.ts","webpack:///./Client/app/shared/models/missing-invoices-display-view.ts","webpack:///./Client/app/shared/models/trade-partial-display-view.ts","webpack:///./Client/app/shared/services/execution/charter-manager-data-loader.ts","webpack:///./Client/app/shared/services/execution/dtos/cash-matching.ts","webpack:///./Client/app/shared/services/execution/dtos/cash-record.ts","webpack:///./Client/app/shared/services/execution/dtos/cash-setup.ts","webpack:///./Client/app/shared/services/execution/dtos/contracts-to-cost-invoice.ts","webpack:///./Client/app/shared/services/execution/dtos/contracts-to-invoice.ts","webpack:///./Client/app/shared/services/execution/dtos/contracts-to-washout-invoice.ts","webpack:///./Client/app/shared/services/execution/dtos/invoice-for-cash.ts","webpack:///./Client/app/shared/services/execution/dtos/invoice-summary-record.ts","webpack:///./Client/app/shared/services/execution/dtos/tax-record.ts","webpack:///./Client/app/shared/services/list-and-search/cashList-payment-data-loader.ts","webpack:///./Client/app/shared/services/list-and-search/cashList-receipt-data-loader.ts","webpack:///./Client/app/shared/services/list-and-search/charter-assignmentSections-data-loader.ts","webpack:///./Client/app/shared/services/list-and-search/charterList-data-loader.ts","webpack:///./Client/app/shared/services/list-and-search/trade-document-data-loader.ts","webpack:///./Client/app/shared/services/masterdata/costType-data-loader.ts"],"names":[],"mappings":"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","file":"execution-execution-module.js","sourcesContent":["module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div *ngIf=\\\"isLoading\\\">\\r\\n        <mat-expansion-panel expanded=\\\"true\\\">\\r\\n            <mat-expansion-panel-header>\\r\\n                <mat-panel-title>\\r\\n                    <h2>Loading</h2>\\r\\n                    <div class=\\\"custom-line-title\\\"></div>\\r\\n                </mat-panel-title>\\r\\n            </mat-expansion-panel-header>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"20px\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-expansion-panel>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"none\\\"\\r\\n         [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\">\\r\\n\\r\\n        <atlas-contract-advice-generation-selection-form #SelectionForm>\\r\\n        </atlas-contract-advice-generation-selection-form>\\r\\n        <atlas-document-list-card #DocumentList></atlas-document-list-card>\\r\\n        <div class=\\\"btn-container\\\">\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                    cancel\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxFlex=\\\"50\\\"\\r\\n                 fxLayoutAlign=\\\"start end \\\">\\r\\n                <mat-slide-toggle *ngIf=\\\"this.selectionForm.documentTemplateCtrl.value &&\\r\\n                this.selectionForm.documentTemplateCtrl.value.length > 0\\\"\\r\\n                                  [formControl]=\\\"previewDocumentCtrl\\\">Preview Document </mat-slide-toggle>\\r\\n                <button mat-raised-button\\r\\n                        type=\\\"submit\\\"\\r\\n                        (click)=\\\"onGenerateDocumentClicked()\\\">\\r\\n                    Generate\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { of, Subject } from 'rxjs';\r\nimport { finalize, mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { PhysicalDocumentReference } from '../../../shared/entities/document-reference.entity';\r\nimport { PhysicalDocumentTemplate } from '../../../shared/entities/document-template.entity';\r\nimport { ProblemDetail } from '../../../shared/entities/problem-detail.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { DocumentGenerationConfirmationDialogBoxComponent } from './../../../shared/components/document-generation-confirmation-dialog-box/document-generation-confirmation-dialog-box.component';\r\nimport { AtlasFormControl } from './../../../shared/entities/atlas-form-control';\r\nimport { DocumentTypes } from './../../../shared/enums/document-type.enum';\r\nimport { GenerateDocumentActions } from './../../../shared/enums/generate-document-action.enum';\r\nimport { DocumentService } from './../../../shared/services/http-services/document.service';\r\nimport { SnackbarService } from './../../../shared/services/snackbar.service';\r\nimport { DocumentListCardComponent } from './../list/card/document-list-card.component';\r\nimport { ContractAdviceGenerationSelectionFormComponent } from './form-components/selection-form/selection-form.component';\r\nimport { DocumentEntityTypes } from '../../../shared/enums/document-entity-type.enum';\r\nimport { DocumentPopupButtonSettings } from '../../../shared/entities/document-popup-button-settings.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-contract-advice-generation',\r\n    templateUrl: './contract-advice-generation.component.html',\r\n    styleUrls: ['./contract-advice-generation.component.scss'],\r\n})\r\nexport class ContractAdviceGenerationComponent implements OnInit, OnDestroy {\r\n    company: string;\r\n    isLoading = true;\r\n    recordId: number;\r\n    previewDocumentCtrl: FormControl;\r\n    destroy$ = new Subject();\r\n    sectionId: any;\r\n\r\n    @ViewChild('SelectionForm') selectionForm: ContractAdviceGenerationSelectionFormComponent;\r\n    @ViewChild('DocumentList') documentList: DocumentListCardComponent;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private documentService: DocumentService,\r\n        private snackbarService: SnackbarService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private dialog: MatDialog,\r\n        private utilService: UtilService,\r\n        private documentPopupService: DocumentPopupService,\r\n        protected router: Router,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.initView();\r\n            this.isLoading = false;\r\n        });\r\n        this.previewDocumentCtrl = new AtlasFormControl('previewDocumentCtrl', true);\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('recordId'));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    initView() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.recordId = Number(this.route.snapshot.paramMap.get('recordId'));\r\n    }\r\n\r\n    downloadDocument(response: HttpResponse<Blob>) {\r\n        const newBlob = new Blob([response.body],\r\n            { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n        const data = this.window.URL.createObjectURL(newBlob);\r\n        const link = document.createElement('a');\r\n        link.href = data;\r\n        link.download = this.utilService.getFileNameFromContentDisposition(response);\r\n        link.click();\r\n    }\r\n\r\n    onGenerateDocumentClicked() {\r\n        const templateCtrl = this.selectionForm.documentTemplateCtrl.value;\r\n        if (!templateCtrl || (templateCtrl && templateCtrl.length === 0)) {\r\n            this.snackbarService.throwErrorSnackBar('Please select a template');\r\n            return;\r\n        }\r\n        this.generateNextDocument(0);\r\n    }\r\n\r\n    generateNextDocument(index: number) {\r\n        if (this.selectionForm.documentTemplateCtrl.value.length > index) {\r\n            if (this.previewDocumentCtrl.value) {\r\n                this.generateAndOpenDocument(index, true);\r\n            } else {\r\n                this.generateAndOpenDocument(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    generateAndOpenDocument(index: number, isPreview = false) {\r\n        const template = this.selectionForm.documentTemplateCtrl.value[index] as PhysicalDocumentTemplate;\r\n        this.isLoading = true;\r\n        this.snackbarService.informationSnackBar('Generating ' + (isPreview ? 'preview' : 'final') + ' document. Please wait...');\r\n        this.documentService.generateContractAdvice(this.recordId, template.path, isPreview)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((documentReference: PhysicalDocumentReference) => {\r\n\r\n                if (!documentReference.physicalDocumentId) {\r\n                    this.snackbarService.informationSnackBar('Error generating the document');\r\n                    return;\r\n                }\r\n\r\n                this.snackbarService.informationSnackBar('Document generated successfully');\r\n                this.documentService.getGeneratedDocumentContent(documentReference.physicalDocumentId, isPreview)\r\n                    .pipe(\r\n                        takeUntil(this.destroy$),\r\n                    )\r\n                    .subscribe((response: HttpResponse<Blob>) => {\r\n                        this.downloadDocument(response);\r\n                        if (isPreview) {\r\n                            this.previewDocument(index);\r\n                        } else {\r\n                            this.generateNextDocument(index + 1);\r\n                        }\r\n                    });\r\n            });\r\n    }\r\n\r\n    previewDocument(index: number) {\r\n        const template = this.selectionForm.documentTemplateCtrl.value[index] as PhysicalDocumentTemplate;\r\n        const dialog = this.documentPopupService.showDocumentGenerationPopup(\r\n            'Contract [' + template.name + ']',\r\n            'contract advice',\r\n            new DocumentPopupButtonSettings(),\r\n            this.previewDocumentCtrl.value,\r\n            false,\r\n        );\r\n\r\n        dialog.componentInstance.documentSelected\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((file: File) => {\r\n                this.onFileSelected(dialog, template.path, file);\r\n            });\r\n\r\n        dialog.afterClosed()\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((answer) => {\r\n                this.onDialogClosed(answer, index);\r\n            });\r\n    }\r\n\r\n    onFileSelected(dialog: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>,\r\n        templatePath: string,\r\n        file: File) {\r\n        this.documentPopupService.startDialogWork(dialog, 'Uploading document...');\r\n        this.documentService.uploadDocument(\r\n            this.recordId,\r\n            DocumentTypes.ContractAdvice,\r\n            templatePath,\r\n            true,\r\n            file)\r\n            .pipe(\r\n                mergeMap((document: PhysicalDocumentReference) => {\r\n                    dialog.componentInstance.processMessage = 'Generating final document...';\r\n                    return this.documentService.assignContractAdviceToSection(\r\n                        this.recordId,\r\n                        document.physicalDocumentId,\r\n                        templatePath);\r\n                }),\r\n                mergeMap((document: PhysicalDocumentReference) => {\r\n                    dialog.componentInstance.processMessage = 'Downloading final document...';\r\n                    return this.documentService.getGeneratedDocumentContent(document.physicalDocumentId);\r\n                }),\r\n                finalize(() => {\r\n                    this.documentPopupService.finishDialogWork(dialog);\r\n                }),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(\r\n                (response: HttpResponse<Blob> | string) => {\r\n                    if (typeof response === 'string') {\r\n                        dialog.componentInstance.errorMessage = response as string;\r\n                    } else {\r\n                        this.downloadDocument(response);\r\n                        dialog.close();\r\n                    }\r\n                },\r\n                (error: HttpErrorResponse) => {\r\n                    dialog.componentInstance.errorMessage = this.documentPopupService.getErrorMessage(error, DocumentEntityTypes.Contract);\r\n                });\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        if (this.sectionId) {\r\n            this.router.navigate(['/' + this.company + '/trades/display/', this.sectionId]);\r\n        }\r\n    }\r\n\r\n    onDialogClosed(dialogAnswer: any, index: number) {\r\n        if (dialogAnswer && dialogAnswer['buttonClicked']) {\r\n            if (dialogAnswer['buttonClicked'] === GenerateDocumentActions.ConfirmDocumentGeneration) {\r\n                this.generateAndOpenDocument(index);\r\n            }\r\n        } else {\r\n            this.generateNextDocument(index + 1);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n\\t<mat-card-header>\\r\\n\\t\\t<mat-card-title>\\r\\n\\t\\t\\t<h2>Select the template</h2>\\r\\n\\t\\t</mat-card-title>\\r\\n\\t</mat-card-header>\\r\\n\\t<mat-card-content *ngIf=\\\"isLoading\\\">\\r\\n\\t\\t<div fxLayout=\\\"row\\\"\\r\\n\\t\\t     fxLayoutAlign=\\\"center center\\\"\\r\\n\\t\\t     fxLayoutWrap\\r\\n\\t\\t     fxLayoutGap=\\\"20px\\\">\\r\\n\\t\\t\\t<mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n\\t\\t</div>\\r\\n\\t</mat-card-content>\\r\\n\\t<mat-card-content [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\">\\r\\n\\t\\t<div fxLayout=\\\"row\\\"\\r\\n\\t\\t     fxLayoutAlign=\\\"space-between start\\\"\\r\\n\\t\\t     fxLayoutGap=\\\"5%\\\">\\r\\n\\t\\t\\t<div fxFlex=\\\"60%\\\">\\r\\n\\t\\t\\t\\t<atlas-select-multiple-autocomplete #selectTemplate\\r\\n\\t\\t\\t\\t                                    [objects]=\\\"documentTemplates\\\"\\r\\n\\t\\t\\t\\t                                    displayProperty=\\\"name\\\"\\r\\n\\t\\t\\t\\t                                    placeholder=\\\"Document template\\\"\\r\\n\\t\\t\\t\\t                                    [controller]=\\\"documentTemplateCtrl\\\"></atlas-select-multiple-autocomplete>\\r\\n\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { PhysicalDocumentTemplate } from '../../../../../shared/entities/document-template.entity';\r\nimport { DocumentTypes } from '../../../../../shared/enums/document-type.enum';\r\nimport { SelectMultipleAutocompleteComponent } from './../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { DocumentService } from './../../../../../shared/services/http-services/document.service';\r\n\r\n@Component({\r\n    selector: 'atlas-contract-advice-generation-selection-form',\r\n    templateUrl: './selection-form.component.html',\r\n    styleUrls: ['./selection-form.component.scss'],\r\n})\r\nexport class ContractAdviceGenerationSelectionFormComponent implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('selectTemplate') selectTemplateComponent: SelectMultipleAutocompleteComponent;\r\n\r\n    documentTemplateCtrl: FormControl = new FormControl();\r\n    documentTemplates: PhysicalDocumentTemplate[] = [];\r\n    isLoading = true;\r\n    subscription: Subscription[] = [];\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private documentService: DocumentService) { }\r\n\r\n    ngOnInit() {\r\n        this.subscription.push(this.documentService.getTemplates(DocumentTypes.ContractAdvice)\r\n            .subscribe((template) => {\r\n                this.documentTemplates = template.value;\r\n                this.initForm();\r\n                this.isLoading = false;\r\n            }));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((sub) => {\r\n            if (sub) {\r\n                sub.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n    initForm() {\r\n        this.documentTemplateCtrl.patchValue(undefined);\r\n        this.selectTemplateComponent.initSelected();\r\n        this.selectTemplateComponent.setValue();\r\n    }\r\n}\r\n","module.exports = \"<h1 mat-dialog-title>{{ dialogData.title }}</h1>\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"6px\\\"\\r\\n         *ngIf=\\\"!isWorkInProgress\\\">\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <p>{{dialogText}}</p>\\r\\n            <p class=\\\"error-message\\\">{{errorMessage}}</p>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"6px\\\"\\r\\n         *ngIf=\\\"isWorkInProgress\\\">\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            <p>{{processMessage}}</p>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<div fxLayout=\\\"column\\\">\\r\\n    <div>\\r\\n        <input class=\\\"hidden-during-loading\\\"\\r\\n               type=\\\"file\\\"\\r\\n               accept=\\\".docx\\\"\\r\\n               (change)=\\\"onFileSelected($event)\\\"\\r\\n               #fileUpload>\\r\\n    </div>\\r\\n    <!-- <mat-divider></mat-divider> commenting as per Bug 24332 -->\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between end\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">Discard\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"fileUpload.click()\\\"\\r\\n                [disabled]=\\\"isWorkInProgress\\\">Upload Document\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".mat-dialog-content {\\n  width: 500px; }\\n\\n.printing-input-container {\\n  margin-top: 2%; }\\n\\n.error-message {\\n  color: #df5a4d;\\n  font-size: 0.8em; }\\n\"","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { FormConfigurationProviderService } from './../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from './../../../../shared/services/snackbar.service';\r\nimport { UiService } from './../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-document-upload-dialog-box',\r\n    templateUrl: './document-upload-dialog-box.component.html',\r\n    styleUrls: ['./document-upload-dialog-box.component.scss'],\r\n})\r\nexport class DocumentUploadDialogBoxComponent implements OnInit {\r\n\r\n    @Output() readonly documentSelected = new EventEmitter<File>();\r\n    dialogData: {\r\n        title: string,\r\n    };\r\n\r\n    dialogText = '';\r\n    errorMessage = '';\r\n    processMessage = '';\r\n    isWorkInProgress = false;\r\n\r\n    constructor(\r\n        public thisDialogRef: MatDialogRef<DocumentUploadDialogBoxComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            title: string,\r\n        },\r\n        protected snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n    ) {\r\n        this.dialogData = data;\r\n        this.dialogText = 'Please upload your new document.';\r\n        thisDialogRef.disableClose = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onFileSelected(event) {\r\n        if (event.target.files.length === 0) {\r\n            return;\r\n        }\r\n        const file: File = event.target.files[0];\r\n        this.documentSelected.emit(file);\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n}\r\n","module.exports = \"<atlas-list-and-search [gridCode]=\\\"gridCode\\\"\\r\\n                       [company]=\\\"company\\\"\\r\\n                       [dataLoader]=\\\"dataLoader\\\"\\r\\n                       #listAndSearchComponent>\\r\\n</atlas-list-and-search>\"","module.exports = \"\"","import { HttpResponse } from '@angular/common/http';\r\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { PhysicalDocument } from '../../../../shared/entities/document-generated.entity';\r\nimport { WINDOW } from '../../../../shared/entities/window-injection-token';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { AtlasAgGridParam } from './../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { DocumentService } from './../../../../shared/services/http-services/document.service';\r\nimport { SecurityService } from './../../../../shared/services/security.service';\r\nimport { UiService } from './../../../../shared/services/ui.service';\r\nimport { ListAndSearchFilter } from './../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchComponent } from './../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { TradeDocumentDataLoader } from './../../../../shared/services/list-and-search/trade-document-data-loader';\r\n\r\n@Component({\r\n    selector: 'atlas-document-list-card',\r\n    templateUrl: './document-list-card.component.html',\r\n    styleUrls: ['./document-list-card.component.scss'],\r\n    providers: [TradeDocumentDataLoader],\r\n})\r\nexport class DocumentListCardComponent implements OnInit, OnDestroy {\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    documentMenuActions: { [key: string]: string } = {\r\n        downloadDocument: 'download',\r\n    };\r\n\r\n    documentsCreated: PhysicalDocument[] = [];\r\n    recordId: number;\r\n    gridCode = 'physicalDocumentList';\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n\r\n    documentGridContextualMenuActions: AgContextualMenuAction[];\r\n    documentGridOptions: agGrid.GridOptions = {};\r\n    documentGridCols: agGrid.ColDef[];\r\n    documentGridRows: PhysicalDocument[] = [];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    subscription: Subscription[] = [];\r\n    company: string;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private documentService: DocumentService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        private utilService: UtilService,\r\n        public dataLoader: TradeDocumentDataLoader,\r\n        @Inject(WINDOW) protected window: Window,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((sub) => {\r\n            if (sub) {\r\n                sub.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    init() {\r\n        this.documentGridContextualMenuActions = [\r\n            {\r\n                icon: '',\r\n                text: 'Download',\r\n                action: this.documentMenuActions.downloadDocument,\r\n            },\r\n        ];\r\n    }\r\n\r\n\r\n    handleAction(action: string, document: PhysicalDocument) {\r\n        switch (action) {\r\n            case this.documentMenuActions.downloadDocument:\r\n                this.subscription.push(this.documentService.getGeneratedDocumentContent(document.physicalDocumentId)\r\n                    .subscribe((response: HttpResponse<Blob>) => {\r\n                        this.openGeneratedDocument(response);\r\n                    }));\r\n                break;\r\n            default: // throw Action not recognized exception\r\n                break;\r\n        }\r\n    }\r\n\r\n    openGeneratedDocument(response: HttpResponse<Blob>) {\r\n        const newBlob = new Blob([response.body],\r\n            { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n        const data = this.window.URL.createObjectURL(newBlob);\r\n        const link = document.createElement('a');\r\n        link.href = data;\r\n        link.download = this.utilService.getFileNameFromContentDisposition(response);\r\n        link.click();\r\n    }\r\n\r\n    cancel() {\r\n        this.documentGridRows.forEach((d) => d.isSelected = false);\r\n    }\r\n\r\n    versionNumberFormatter(param) {\r\n        return param.value.toString().padStart(3, '0');\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                           [gridCode]=\\\"gridCode\\\"\\r\\n                           gridTitle=\\\"Generated documents\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [gridContextualMenuActions]=\\\"gridContextualMenuActions\\\"\\r\\n                           (menuActionClicked)=\\\"onMenuActionClicked($event)\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           waitBeforeLoadingData=true\\r\\n                           (configurationLoaded)=\\\"initAdditionnalFilters()\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { finalize, map, mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { DocumentEntityTypes } from '../../../shared/enums/document-entity-type.enum';\r\nimport { PricingMethods } from '../../../shared/enums/pricing-method.enum';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { DocumentUploadDialogBoxComponent } from '../dialog-boxes/document-upload-dialog-box/document-upload-dialog-box.component';\r\nimport { ListAndSearchComponent } from './../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AgContextualMenuAction } from './../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { Charter } from './../../../shared/entities/charter.entity';\r\nimport { PhysicalDocument } from './../../../shared/entities/document-generated.entity';\r\nimport { PhysicalDocumentReference } from './../../../shared/entities/document-reference.entity';\r\nimport { ListAndSearchFilter } from './../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { Section } from './../../../shared/entities/section.entity';\r\nimport { ListAndSearchFilterType } from './../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { DocumentService } from './../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from './../../../shared/services/http-services/execution.service';\r\nimport { TradingService } from './../../../shared/services/http-services/trading.service';\r\nimport { DocumentDataLoader } from './../../../shared/services/list-and-search/document-data-loader';\r\nimport { SecurityService } from './../../../shared/services/security.service';\r\nimport { SnackbarService } from './../../../shared/services/snackbar.service';\r\nimport { TitleService } from './../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-document-generation-document-list',\r\n    templateUrl: './document-list.component.html',\r\n    styleUrls: ['./document-list.component.scss'],\r\n    providers: [DocumentDataLoader],\r\n})\r\nexport class DocumentListComponent implements OnInit, OnDestroy {\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    gridCode: string = 'DocumentListAndSearchGrid';\r\n    company: string;\r\n    isLoading = true;\r\n    destroy$ = new Subject();\r\n\r\n    menuActions: { [key: string]: string } = {\r\n        download: 'download',\r\n        edit: 'edit',\r\n    };\r\n    gridContextualMenuActions: AgContextualMenuAction[];\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n\r\n    constructor(\r\n        private securityService: SecurityService,\r\n        private snackbarService: SnackbarService,\r\n        private documentService: DocumentService,\r\n        private route: ActivatedRoute,\r\n        private dialog: MatDialog,\r\n        public dataLoader: DocumentDataLoader,\r\n        @Inject(WINDOW) private window: Window,\r\n        private utilService: UtilService,\r\n        private tradingService: TradingService,\r\n        private executionService: ExecutionService,\r\n        private documentPopupService: DocumentPopupService,\r\n        private titleService: TitleService,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.init();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    init() {\r\n        this.initMenuAction();\r\n    }\r\n\r\n    initMenuAction() {\r\n        this.gridContextualMenuActions = [\r\n            {\r\n                icon: 'arrow_downward',\r\n                text: 'Download',\r\n                action: this.menuActions.download,\r\n            },\r\n            {\r\n                icon: 'edit',\r\n                text: 'Edit',\r\n                action: this.menuActions.edit,\r\n            },\r\n        ];\r\n        if (this.listAndSearchComponent) {\r\n            this.listAndSearchComponent.gridContextualMenuActions = this.gridContextualMenuActions;\r\n            this.listAndSearchComponent.addMenuAction();\r\n        }\r\n    }\r\n\r\n    initAdditionnalFilters() {\r\n        const entity = this.route.snapshot.paramMap.get('entity');\r\n        const recordId = this.route.snapshot.paramMap.get('recordId');\r\n        let getRecord: Observable<string>;\r\n\r\n        if (!entity || !recordId) {\r\n            this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n            this.listAndSearchComponent.loadData();\r\n            return;\r\n        }\r\n\r\n        let field;\r\n        switch (entity) {\r\n            case 'section':\r\n                field = this.listAndSearchComponent.columnConfiguration\r\n                    .find((column) => column.fieldName === 'Contract');\r\n                getRecord = this.tradingService.getSection(Number(recordId), PricingMethods.Priced).pipe(\r\n                    takeUntil(this.destroy$),\r\n                    map((section: Section) => {\r\n                        return section.contractLabel;\r\n                    }));\r\n                break;\r\n            case 'charter':\r\n                field = this.listAndSearchComponent.columnConfiguration\r\n                    .find((column) => column.fieldName === 'Charter');\r\n                getRecord = this.executionService.getCharterById(Number(recordId)).pipe(\r\n                    takeUntil(this.destroy$),\r\n                    map((charter: Charter) => {\r\n                        return charter.charterCode;\r\n                    }),\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (!field || !this.listAndSearchComponent) {\r\n            this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n            this.listAndSearchComponent.loadData();\r\n            return;\r\n        }\r\n\r\n        getRecord.subscribe((record) => {\r\n            if (!record) {\r\n                this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n                this.listAndSearchComponent.loadData();\r\n                return;\r\n            }\r\n\r\n            const filter = new ListAndSearchFilter();\r\n            filter.fieldId = field.fieldId;\r\n            filter.fieldName = field.fieldName;\r\n            filter.predicate = {\r\n                filterType: ListAndSearchFilterType.Text,\r\n                operator: 'eq',\r\n                value1: record,\r\n            };\r\n            filter.isActive = true;\r\n            this.additionalFilters = [filter];\r\n            this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n            this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n            this.listAndSearchComponent.loadData(true);\r\n        });\r\n    }\r\n\r\n    onMenuActionClicked(data) {\r\n        const action = data.action;\r\n        const document: PhysicalDocument = data.rowData;\r\n        switch (action) {\r\n            case this.menuActions.download:\r\n                this.documentService.getGeneratedDocumentContent(document.physicalDocumentId)\r\n                    .pipe(\r\n                        takeUntil(this.destroy$),\r\n                    )\r\n                    .subscribe((response: HttpResponse<Blob>) => {\r\n                        this.downloadDocument(response);\r\n                    });\r\n                break;\r\n            case this.menuActions.edit:\r\n                this.editDocument(document);\r\n                break;\r\n            default: // throw Action not recognized exception\r\n                break;\r\n        }\r\n    }\r\n\r\n    downloadDocument(response: HttpResponse<Blob>) {\r\n        const newBlob = new Blob([response.body],\r\n            { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n        const data = this.window.URL.createObjectURL(newBlob);\r\n        const link = document.createElement('a');\r\n        link.href = data;\r\n        link.download = this.utilService.getFileNameFromContentDisposition(response);\r\n        link.click();\r\n    }\r\n\r\n    editDocument(document: PhysicalDocument) {\r\n        const dialog = this.dialog.open(DocumentUploadDialogBoxComponent, {\r\n            data: {\r\n                title: 'Edit Document',\r\n            },\r\n        });\r\n        dialog.componentInstance.isWorkInProgress = true;\r\n        dialog.componentInstance.processMessage = 'Downloading document...';\r\n        this.documentService.getGeneratedDocumentContent(document.physicalDocumentId)\r\n            .pipe(\r\n                finalize(() => {\r\n                    dialog.componentInstance.processMessage = '';\r\n                    dialog.componentInstance.isWorkInProgress = false;\r\n                }),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((response: HttpResponse<Blob>) => {\r\n                this.downloadDocument(response);\r\n            });\r\n\r\n        dialog.componentInstance.documentSelected\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((file: File) => {\r\n                this.onFileSelected(dialog, document, file);\r\n            });\r\n\r\n        dialog.afterClosed()\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((answer) => {\r\n            });\r\n    }\r\n\r\n    onFileSelected(dialog: MatDialogRef<DocumentUploadDialogBoxComponent>,\r\n        originalDocument: PhysicalDocument,\r\n        file: File) {\r\n        dialog.componentInstance.isWorkInProgress = true;\r\n        dialog.componentInstance.processMessage = 'Uploading document...';\r\n        this.documentService.uploadDocument(\r\n            originalDocument.recordId,\r\n            originalDocument.physicalDocumentType,\r\n            originalDocument.documentTemplate,\r\n            true,\r\n            file)\r\n            .pipe(\r\n                mergeMap((documentReference: PhysicalDocumentReference) => {\r\n                    dialog.componentInstance.processMessage = 'Updating document...';\r\n                    return this.documentService.updateDocument(originalDocument, documentReference.physicalDocumentId);\r\n                }),\r\n                finalize(() => {\r\n                    dialog.componentInstance.processMessage = '';\r\n                    dialog.componentInstance.isWorkInProgress = false;\r\n                }),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(\r\n                (documentReference: PhysicalDocumentReference) => {\r\n                    dialog.close();\r\n                    this.snackbarService.informationSnackBar('Document has been successfully updated.');\r\n                    this.listAndSearchComponent.loadData();\r\n                },\r\n                (error: HttpErrorResponse) => {\r\n                    dialog.componentInstance.errorMessage = this.documentPopupService.getErrorMessage(error, DocumentEntityTypes.Unknown);\r\n                });\r\n    }\r\n}\r\n","module.exports = \".mat-button-toggle {\\r\\n\\ttext-align: center;\\r\\n\\tmin-width: 88px;\\r\\n}\\r\\n\\r\\n.highlight {\\r\\n\\tbackground: #A7C5E2;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-expansion-panel expanded=\\\"true\\\">\\r\\n        <mat-expansion-panel-header>\\r\\n            <mat-panel-title>\\r\\n                <h2>Search contract</h2>\\r\\n                <div class=\\\"custom-line-title\\\"></div>\\r\\n            </mat-panel-title>\\r\\n        </mat-expansion-panel-header>\\r\\n        <form ng-submit=\\\"onSearchTrade()\\\"\\r\\n              fxLayout=\\\"row\\\"\\r\\n              fxLayoutAlign=\\\"space-between center\\\"\\r\\n              fxLayoutWrap>\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxLayout.xs=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"none left\\\"\\r\\n                 fxLayoutGap=\\\"20px\\\">\\r\\n                <div fxFlex=\\\"20%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input [(ngModel)]=\\\"model.searchContractReference\\\"\\r\\n                               required\\r\\n                               matInput\\r\\n                               placeholder=\\\"Search contract to allocate\\\"\\r\\n                               [formControl]=\\\"searchContractReferenceCtrl\\\">\\r\\n                        <mat-error *ngIf=\\\"searchContractReferenceCtrl.hasError('required')\\\">\\r\\n                            Contract is <strong>required</strong>\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"25%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <button mat-icon-button\\r\\n                            (click)=\\\"onSearchTrade()\\\">\\r\\n                        <mat-icon aria-label=\\\"Search\\\">search</mat-icon>\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </form>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             fxLayoutWrap>\\r\\n            <!-- Contract date -->\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxFlex.xs=\\\"100%\\\"\\r\\n                 fxFlex.sm=\\\"100%\\\">\\r\\n                <mat-table #table\\r\\n                           [dataSource]=\\\"dataSource\\\"\\r\\n                           matSort>\\r\\n\\r\\n                    <ng-container matColumnDef=\\\"contractLabel\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header> Reference </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"> {{row.contractLabel}} </mat-cell>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <ng-container matColumnDef=\\\"type\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header> Type </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"> {{row.type}} </mat-cell>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <ng-container matColumnDef=\\\"status\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header\\r\\n                                         fxFlex\\r\\n                                         fxShow=\\\"false\\\"\\r\\n                                         fxShow.gt-sm> Status </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"\\r\\n                                  [style.color]=\\\"row.color\\\"\\r\\n                                  fxFlex\\r\\n                                  fxShow=\\\"false\\\"\\r\\n                                  fxShow.gt-sm> {{row.status}} </mat-cell>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <ng-container matColumnDef=\\\"commodityCode\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header\\r\\n                                         fxFlex\\r\\n                                         fxShow=\\\"false\\\"\\r\\n                                         fxShow.gt-sm> Commodity Code </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"\\r\\n                                  [style.color]=\\\"row.color\\\"\\r\\n                                  fxFlex\\r\\n                                  fxShow=\\\"false\\\"\\r\\n                                  fxShow.gt-sm> {{row.commodityCode}} </mat-cell>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <ng-container matColumnDef=\\\"quantity\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header\\r\\n                                         fxFlex\\r\\n                                         fxShow=\\\"false\\\"\\r\\n                                         fxShow.gt-sm> Quantity </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"\\r\\n                                  [style.color]=\\\"row.color\\\"\\r\\n                                  fxFlex\\r\\n                                  fxShow=\\\"false\\\"\\r\\n                                  fxShow.gt-sm> {{row.quantity}} {{row.quantityUnit}}</mat-cell>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <ng-container matColumnDef=\\\"lastModifiedDate\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header> Last amendment Date </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"\\r\\n                                  [style.color]=\\\"row.color\\\">\\r\\n                            <atr-date-label [date]=\\\"row.lastModifiedDate\\\"></atr-date-label>\\r\\n                        </mat-cell>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"lastModifiedBy\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header> Last amendment User </mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"\\r\\n                                  [style.color]=\\\"row.color\\\"> {{row.lastModifiedBy}} </mat-cell>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"selection\\\">\\r\\n                        <mat-header-cell *matHeaderCellDef\\r\\n                                         mat-sort-header\\r\\n                                         fxFlex=\\\"4%\\\"></mat-header-cell>\\r\\n                        <mat-cell *matCellDef=\\\"let row\\\"\\r\\n                                  fxFlex=\\\"4%\\\">\\r\\n                            <mat-checkbox (click)=\\\"doNothing()\\\"\\r\\n                                          [checked]=\\\"selectionManager.isSelected(row)\\\"></mat-checkbox>\\r\\n                        </mat-cell>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n                    <mat-row (click)=\\\"onRowClicked(row)\\\"\\r\\n                             *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\r\\n                </mat-table>\\r\\n                <mat-paginator #paginator\\r\\n                               [pageIndex]=\\\"0\\\"\\r\\n                               [pageSize]=\\\"10\\\"\\r\\n                               [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\">\\r\\n                </mat-paginator>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div>\\r\\n            <div class=\\\"custom-line-footer\\\"></div>\\r\\n\\r\\n        </div>\\r\\n    </mat-expansion-panel>\\r\\n</div>\\r\\n\"","import { SelectionModel } from '@angular/cdk/collections';\r\nimport { Component, OnInit, ViewChild, HostListener } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { TradeAllocation } from '../../shared/entities/trade-allocation.entity';\r\nimport { PricingMethods } from '../../shared/enums/pricing-method.enum';\r\nimport { TradePartialDisplayView } from '../../shared/models/trade-partial-display-view';\r\nimport { ExecutionService } from '../../shared/services/http-services/execution.service';\r\nimport { TradingService } from '../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../shared/services/security.service';\r\nimport { SnackbarService } from '../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atr-execution-allocation',\r\n    templateUrl: './execution-allocation.component.html',\r\n    styleUrls: ['./execution-allocation.component.css'],\r\n})\r\nexport class ExecutionAllocationComponent implements OnInit {\r\n    company: string;\r\n\r\n    model: TradeAllocation = {} as any;\r\n    searchContractReferenceCtrl: FormControl;\r\n    tradeRecords: TradePartialDisplayView[];\r\n    displayedColumns = ['contractLabel', 'type', 'status', 'commodityCode', 'quantity', 'lastModifiedDate', 'lastModifiedBy', 'selection'];\r\n    dataSource: MatTableDataSource<TradePartialDisplayView>;\r\n    selectedRowReference: number;\r\n    originalsectionId: number;\r\n    allocatedTo: string;\r\n    trade: any;\r\n    pricingMethod: PricingMethods;\r\n    selectionManager = new SelectionModel<TradePartialDisplayView>(true, []);\r\n\r\n    @ViewChild(MatPaginator) paginator: MatPaginator;\r\n    @ViewChild(MatSort) sort: MatSort;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private executionService: ExecutionService,\r\n        private tradingService: TradingService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private snackbarService: SnackbarService) {\r\n        this.searchContractReferenceCtrl = new FormControl({ value: '' }, [Validators.required]);\r\n        this.originalsectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.pricingMethod = PricingMethods[this.route.snapshot.paramMap.get('pricingMethod')];\r\n    }\r\n\r\n    onSearchTrade() {\r\n        this.executionService.findContractToAllocate(this.originalsectionId, this.model.searchContractReference, this.pricingMethod).pipe(\r\n            map((data) => {\r\n                this.tradeRecords = data.value.map((trade) => {\r\n                    return new TradePartialDisplayView(trade);\r\n                });\r\n\r\n                this.dataSource = new MatTableDataSource(this.tradeRecords);\r\n                this.dataSource.paginator = this.paginator;\r\n                this.dataSource.sort = this.sort;\r\n\r\n                if (this.tradeRecords == null || this.tradeRecords.length === 0) {\r\n                    this.snackbarService.informationSnackBar('No matching contracts found');\r\n                }\r\n            }))\r\n            .subscribe();\r\n    }\r\n\r\n    onRowClicked(row: any) {\r\n        if (this.selectionManager.isSelected(row)) {\r\n            this.selectedRowReference = null;\r\n            this.allocatedTo = null;\r\n        } else {\r\n            this.selectionManager.clear();\r\n            this.selectedRowReference = row.sectionId;\r\n            this.allocatedTo = row.contractLabel;\r\n        }\r\n        this.selectionManager.toggle(row);\r\n    }\r\n\r\n    doNothing(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getTrade(tradeId: number) {\r\n        this.tradingService.getSection(tradeId, this.pricingMethod).pipe(\r\n            map((trade) => {\r\n                this.trade = trade;\r\n            }))\r\n            .subscribe();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.route.params.subscribe((params) => {\r\n                this.getTrade(Number(params['sectionId']));\r\n                this.company = this.route.snapshot.paramMap.get('company');\r\n            });\r\n        });\r\n\r\n        this.model.searchContractReference = '';\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification($event: any) {\r\n        if (this.searchContractReferenceCtrl.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n}\r\n","import { AdditionalCost } from '../../../../../shared/entities/additional-cost.entity';\r\nimport { CostDirection } from '../../../../../shared/entities/cost-direction.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../../shared/entities/nominal-account.entity';\r\n\r\nexport class AdditionalCostListDisplayView {\r\n    cashAdditionalCostId: number;\r\n    costDirection: string;\r\n    costType: string;\r\n    nominalAccountCode: string;\r\n    accountLineType: string;\r\n    currencyCode: string;\r\n    amount: number;\r\n    narrative: string;\r\n    isDirty: boolean;\r\n    accountCode: string;\r\n    counterpartyCode: string;\r\n    clientAccount: number;\r\n    customerVendor: string;\r\n    costTypeCode: string;\r\n    nominalAccountNumber: string;\r\n    clientAccountMandatory: boolean;\r\n\r\n    constructor(additionalCost?: AdditionalCost, masterdata?: MasterData, costDirections?: CostDirection[]) {\r\n        if (additionalCost) {\r\n            this.cashAdditionalCostId = additionalCost.cashAdditionalCostId;\r\n            this.costDirection = this.getCostDirectionCodeFromId(additionalCost.costDirectionId, costDirections);\r\n            this.costTypeCode = additionalCost.costTypeCode;\r\n            this.accountCode = additionalCost.accountCode;\r\n            this.nominalAccountNumber = additionalCost.accountCode;\r\n            this.accountLineType = additionalCost.accountLineType;\r\n            this.currencyCode = additionalCost.currencyCode;\r\n            this.amount = additionalCost.amount;\r\n            this.narrative = additionalCost.narrative;\r\n            this.accountLineType = additionalCost.accountLineType;\r\n            this.counterpartyCode = this.getCounterpartyDetail(additionalCost.clientAccount, masterdata.counterparties, true);\r\n            this.customerVendor = this.getCustomerVendorFromNominalAccountDetail(additionalCost.accountCode, masterdata);\r\n            this.clientAccountMandatory = this.getclientAccountMandatoryFromNominalAccountDetail(additionalCost.accountCode, masterdata);\r\n        }\r\n    }\r\n\r\n    getCostDirectionCodeFromId(id, costDirections: CostDirection[]): string {\r\n        const costDirectionCode = costDirections.filter(\r\n            (e) => e.costDirectionId === id)[0].costDirection;\r\n        return costDirectionCode;\r\n    }\r\n\r\n    getAdditionalCost(masterdata, costDirections: CostDirection[]): AdditionalCost {\r\n        const additionalCost = new AdditionalCost();\r\n\r\n        additionalCost.cashAdditionalCostId = this.cashAdditionalCostId;\r\n        additionalCost.costDirectionId = this.getCostDirectionIdFromCode(this.costDirection, costDirections);\r\n        additionalCost.costTypeCode = this.costTypeCode;\r\n        additionalCost.accountLineType = this.accountLineType;\r\n        additionalCost.currencyCode = this.currencyCode;\r\n        additionalCost.amount = this.amount;\r\n        additionalCost.narrative = this.narrative;\r\n        additionalCost.accountId =\r\n            this.getNominalOrClientAccountIdFromCode(this.accountCode, masterdata.nominalAccounts, masterdata.counterparties);\r\n        additionalCost.accountCode = this.accountCode;\r\n        additionalCost.clientAccount = this.getCounterpartyDetail(this.counterpartyCode, masterdata.counterparties, false);\r\n        additionalCost.customerVendor = this.customerVendor;\r\n        additionalCost.clientAccountMandatory = this.clientAccountMandatory;\r\n        return additionalCost;\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string, costDirections: CostDirection[]): number {\r\n        const costDirectionId = costDirections.filter(\r\n            (e) => e.costDirection === code)[0].costDirectionId;\r\n        return costDirectionId;\r\n    }\r\n\r\n    getNominalOrClientAccountIdFromCode(code: string, nominalAccounts: NominalAccount[], counterparties: Counterparty[]): number {\r\n        let nominalOrClientAccountId: number = 0;\r\n\r\n        const filteredNominalAccount = nominalAccounts.filter(\r\n            (e) => e.accountNumber === code);\r\n\r\n        const filteredCounterParty = counterparties.filter(\r\n            (e) => e.counterpartyCode === code);\r\n\r\n        if (filteredNominalAccount.length > 0) {\r\n            nominalOrClientAccountId = filteredNominalAccount[0].nominalAccountId;\r\n        } else if (filteredCounterParty.length > 0) {\r\n            nominalOrClientAccountId = filteredCounterParty[0].counterpartyID;\r\n        }\r\n\r\n        return nominalOrClientAccountId;\r\n    }\r\n\r\n    getCounterpartyDetail(value: any, counterparties: Counterparty[], getCodeFromId: boolean): any {\r\n\r\n        const filteredCounterParty = counterparties.filter(\r\n            (e) => getCodeFromId === true ? e.counterpartyID === value : e.counterpartyCode === value);\r\n\r\n        if (filteredCounterParty.length > 0) {\r\n            return getCodeFromId === true ? filteredCounterParty[0].counterpartyCode : filteredCounterParty[0].counterpartyID;\r\n        }\r\n    }\r\n    getCustomerVendorFromNominalAccountDetail(nominalCode: string, masterdata: MasterData) {\r\n\r\n        const nominalAccount = masterdata.nominalAccounts.find(\r\n            (item) => item.accountNumber === nominalCode ,\r\n        );\r\n        return nominalAccount ? nominalAccount.customerVendor : '';\r\n    }\r\n    getclientAccountMandatoryFromNominalAccountDetail(nominalCode: string, masterdata: MasterData) {\r\n\r\n        const nominalAccount = masterdata.nominalAccounts.find(\r\n            (item) => item.accountNumber === nominalCode ,\r\n        );\r\n        return (nominalAccount && nominalAccount.clientAccountMandatory === 1) ? true : false;\r\n    }\r\n}\r\n","module.exports = \"<mat-accordion *ngIf=\\\"showGrid\\\"\\r\\n               class=\\\"cash-accordion\\\">\\r\\n    <mat-expansion-panel [expanded]=\\\"isPanelExpanded\\\">\\r\\n        <mat-expansion-panel-header [collapsedHeight]=\\\"'35px'\\\"\\r\\n                                    [expandedHeight]=\\\"'35px'\\\"\\r\\n                                    class=\\\"expansion-header\\\">\\r\\n            <mat-panel-title>\\r\\n                Additional Costs\\r\\n            </mat-panel-title>\\r\\n        </mat-expansion-panel-header>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             class=\\\"add-line-container\\\">\\r\\n            <div>\\r\\n                <div *ngIf=\\\"isAddorEdit\\\"\\r\\n                     fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\"\\r\\n                     fxLayoutGap=\\\"10px\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start start\\\">\\r\\n                        <h6 class=\\\"no-margin\\\">Add new lines:</h6>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start start\\\"\\r\\n                         fxFlex=\\\"4\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   [formControl]=\\\"addNewLineCtrl\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start start\\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onProceedButtonClicked()\\\">PROCEED</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\">\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"additionalCostsGridOptions && additionalCostsGridOptions.columnDefs\\\"\\r\\n                                                [gridOptions]=\\\"additionalCostsGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"gridCode\\\"\\r\\n                                                [sharingEnabled]=\\\"false\\\"\\r\\n                                                [savingEnabled]=\\\"false\\\"\\r\\n                                                [hasColumnHandling]=\\\"false\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n                <atlas-grid-enlargement *ngIf=\\\"additionalCostsGridOptions && additionalCostsGridOptions.columnDefs\\\"\\r\\n                                        [gridOptions]=\\\"additionalCostsGridOptions \\\"\\r\\n                                        [userPreferencesParameters]=\\\"gridPreferencesParameters\\\"\\r\\n                                        (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                        #gridZoom>\\r\\n                </atlas-grid-enlargement>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div ag-grid=\\\"additionalCostsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"additionalCostsGridRows\\\"\\r\\n                             [columnDefs]=\\\"additionalCostsGridCols\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             domLayout=autoHeight\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             enableFilter\\r\\n                             [singleClickEdit]=true\\r\\n                             [gridOptions]=\\\"additionalCostsGridOptions\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n\\r\\n\\r\\n    </mat-expansion-panel>\\r\\n</mat-accordion>\"","module.exports = \".expansion-header {\\n  padding: 10px; }\\n\\n.additional-cost-float-right {\\n  float: right; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, HostListener, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AdditionalCost } from '../../../../../shared/entities/additional-cost.entity';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CostDirection } from '../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../../shared/entities/nominal-account.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { CommonMethods } from '../../../../services/execution-cash-common-methods';\r\nimport { AdditionalCostListDisplayView } from './additional-cost-list-display-view';\r\n\r\n@Component({\r\n    selector: 'atlas-additional-costs',\r\n    templateUrl: './additional-costs.component.html',\r\n    styleUrls: ['./additional-costs.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class AdditionalCostsFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly proceedClickedCashReceipt = new EventEmitter<any>();\r\n    @Output() readonly calculateBalanceOnCostAmountEnter = new EventEmitter<any>();\r\n    @Output() readonly calculateCashAmountWithoutCost = new EventEmitter<any>();\r\n\r\n    additionalCostsGridContextualMenuActions: AgContextualMenuAction[];\r\n    addNewLineCtrl = new AtlasFormControl('');\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    additionalCostsGridOptions: agGrid.GridOptions = {};\r\n    additionalCostsGridCols: agGrid.ColDef[];\r\n    masterdata: MasterData;\r\n    costDirections: CostDirection[];\r\n    additionalCostsGridRows: AdditionalCost[] = [];\r\n    costListAfterDeletion = new Array<AdditionalCost>();\r\n    additionalCostsOrg = new Array<AdditionalCost>();\r\n    nominalAccClientAcc = new Array<string>();\r\n    isNominalAccount: boolean;\r\n    isBankAccount: boolean;\r\n    isClientAccount: boolean;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    mask = CustomNumberMask(12, 10, false);\r\n    cashCurrency: string;\r\n    company: string;\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    isAddorEdit = true;\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    cashTypeId: number;\r\n    selectionValue: number;\r\n    isPanelExpanded = false;\r\n    cashTransactionId: number;\r\n    userActiveDirectoryName: string;\r\n    showGrid = true;\r\n    counterpartyList = new Array<string>();\r\n    isClientAccountRequired: boolean;\r\n    isCounterpartyRequired: boolean;\r\n\r\n    additionalCostsGridRowsInEditMode: AdditionalCostListDisplayView[] = [];\r\n    isEditMode: boolean;\r\n    nominalAccountList: NominalAccount[];\r\n\r\n    gridCode: string = 'additionalCosts';\r\n    gridPreferencesParameters: UserGridPreferencesParameters;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        private uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        private route: ActivatedRoute,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        protected companyManager: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n    }\r\n\r\n    additionalCostsMenuActions: { [key: string]: string } = {\r\n        deleteUser: 'delete',\r\n    };\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.init();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.nominalAccountList = this.masterdata.nominalAccounts;\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: CostDirections[CostDirections.Payable],\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: CostDirections[CostDirections.Receivable],\r\n            },\r\n        ];\r\n        this.masterdata.nominalAccounts.forEach((element) => {\r\n            this.nominalAccClientAcc.push(element.accountNumber);\r\n        });\r\n\r\n        this.masterdata.counterparties.forEach((element) => {\r\n            this.counterpartyList.push(element.counterpartyCode);\r\n        });\r\n\r\n        this.initAdditionalCostsGridColumns();\r\n        this.isClientAccountRequired = false;\r\n        this.isCounterpartyRequired = false;\r\n    }\r\n\r\n    init() {\r\n        this.additionalCostsGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.additionalCostsMenuActions.deleteCost,\r\n                disabled: this.isDeleteDisabledWithPrivileges,\r\n            },\r\n        ];\r\n\r\n        this.gridPreferencesParameters = {\r\n            company: this.company,\r\n            gridId: this.gridCode,\r\n            gridOptions: null,\r\n            savingEnabled: false,\r\n            sharingEnabled: false,\r\n            showExport: true,\r\n            hasColumnHandling: false,\r\n        };\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.addNewLineCtrl.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    isDeleteDisabledWithPrivileges(params) {\r\n        let deleteDisable = true;\r\n        if (params.context.actionContext.gridEditable) {\r\n            deleteDisable = false;\r\n        }\r\n        return deleteDisable;\r\n    }\r\n\r\n    currencySelected(currency: any) {\r\n        this.cashCurrency = currency;\r\n    }\r\n    onGridReady(params) {\r\n        this.additionalCostsGridOptions.columnDefs = this.additionalCostsGridCols;\r\n        this.gridApi = this.additionalCostsGridOptions.api;\r\n        this.gridColumnApi = this.additionalCostsGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.additionalCostsGridOptions);\r\n\r\n        // bind the additonal cost rows while editing.\r\n        if (this.additionalCostsGridRowsInEditMode && this.additionalCostsGridRowsInEditMode.length > 0\r\n            && this.isEditMode && this.gridApi) {\r\n            this.gridApi.setRowData([]);\r\n            this.gridApi.updateRowData({ add: this.additionalCostsGridRowsInEditMode });\r\n        }\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    onProceedButtonClicked() {\r\n        const lines = this.addNewLineCtrl.value;\r\n        if (this.cashTypeId === CashType.CashReceipt && !lines &&\r\n            (this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction\r\n                || this.selectionValue === CashSelectionType.ReceiptDifferentCurrency)) {\r\n            this.proceedClickedCashReceipt.emit();\r\n        } else {\r\n            for (let count = 1; count <= lines; count++) {\r\n                const newItem = this.createNewRowData();\r\n                const res = this.gridApi.updateRowData({ add: [newItem] });\r\n            }\r\n            this.addNewLineCtrl.setValue('');\r\n        }\r\n    }\r\n    createNewRowData() {\r\n        const newCostRow = new AdditionalCostListDisplayView();\r\n        newCostRow.isDirty = true;\r\n        newCostRow.costDirection = 'Payable';\r\n        newCostRow.currencyCode = this.cashCurrency;\r\n        return newCostRow;\r\n    }\r\n    initAdditionalCostsGridColumns() {\r\n        this.additionalCostsGridOptions = {\r\n            context: this.gridContext,\r\n            stopEditingWhenGridLosesFocus: true,\r\n        };\r\n        this.additionalCostsGridCols = [\r\n            {\r\n                colId: 'costDirection',\r\n                headerName: 'Pay/rec*',\r\n                field: 'costDirection',\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.node.data['amount']) {\r\n                        this.updateBalance();\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Cost Type*',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    options: this.masterdata.costTypes,\r\n                    valueProperty: 'costTypeCode',\r\n                    codeProperty: 'costTypeCode',\r\n                    displayProperty: 'name',\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    const filteredCostType = this.masterdata.costTypes.find(\r\n                        (e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n                    if (filteredCostType) {\r\n                        const nominalAccount = filteredCostType.nominalAccountCode;\r\n                        params.node.setDataValue('accountCode', nominalAccount);\r\n                        params.node.setDataValue('nominalAccountNumber', nominalAccount);\r\n                    }\r\n\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Nom. Account*',\r\n                field: 'nominalAccountNumber',\r\n                colId: 'nominalAccountNumber',\r\n                type: 'numericColumn',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                        },\r\n                        options: this.nominalAccountList = (params.data.costTypeCode && !params.data.nominalAccountNumber) ? this.masterdata.nominalAccounts.filter\r\n                            ((e) => e.accountType !== 'P') : this.masterdata.nominalAccounts,\r\n                        valueProperty: 'accountNumber',\r\n                        codeProperty: 'accountNumber',\r\n                        displayProperty: 'detailedDescription',\r\n                        isRequired: true,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    const filteredNominalAccount = this.nominalAccountList.find(\r\n                        (e) => e.accountNumber === params.data.nominalAccountNumber);\r\n\r\n                    if (filteredNominalAccount) {\r\n                        this.isBankAccount = filteredNominalAccount.bankAccount;\r\n\r\n                        params.node.setDataValue('customerVendor', filteredNominalAccount.customerVendor);\r\n                        params.node.setDataValue('accountCode', filteredNominalAccount.accountNumber);\r\n                        params.node.setDataValue('accountLineType', 'L');\r\n\r\n                        this.isCounterpartyRequired = (filteredNominalAccount.clientAccountMandatory === 1) ? true : false;\r\n                        params.node.setDataValue('clientAccountMandatory', this.isCounterpartyRequired);\r\n\r\n                        if (this.isCounterpartyRequired) {\r\n                            params.node.setDataValue('accountLineType', null);\r\n                        }\r\n                        if (this.isBankAccount) {\r\n                            params.node.setDataValue('accountLineType', 'B');\r\n                        }\r\n                    }\r\n                    if (this.gridApi && filteredNominalAccount) {\r\n                        this.gridApi.refreshCells({\r\n                            rowNodes: [params.node],\r\n                            force: true,\r\n                        });\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Client Account*',\r\n                field: 'counterpartyCode',\r\n                colId: 'counterpartyCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n\r\n                    options: this.masterdata.counterparties,\r\n                    valueProperty: 'counterpartyCode',\r\n                    codeProperty: 'counterpartyCode',\r\n                    displayProperty: 'description',\r\n                    isRequired: (params) => {\r\n                        return this.isCounterpartyRequired ? true : false;\r\n                    },\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                colId: 'accountLineType',\r\n                headerName: 'Account Line Type*',\r\n                field: 'accountLineType',\r\n                editable: true,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: (params) => {\r\n                    const filteredNominalAccount = this.masterdata.nominalAccounts.filter(\r\n                        (e) => e.accountNumber === params.data.nominalAccountNumber);\r\n\r\n                    let accountLineTypeList = [];\r\n\r\n                    if (filteredNominalAccount.length > 0 && filteredNominalAccount[0].bankAccount) {\r\n                        accountLineTypeList = ['B'];\r\n                    } else if (filteredNominalAccount.length > 0) {\r\n                        accountLineTypeList = !filteredNominalAccount[0].clientAccountMandatory ? ['L']\r\n                            : ['C', 'V'];\r\n                    }\r\n                    return {\r\n                        values: accountLineTypeList,\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Currency*',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                        },\r\n                        options: this.masterdata.currencies,\r\n                        valueProperty: 'currencyCode',\r\n                        codeProperty: 'currencyCode',\r\n                        displayProperty: 'description',\r\n                        isRequired: true,\r\n                        filterContextualSearchFunction: this.filterCurrency.bind(this),\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                colId: 'amount',\r\n                headerName: 'Amount*',\r\n                type: 'numericColumn',\r\n                field: 'amount',\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'atlasNumeric',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: true,\r\n\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.newValue !== 0) {\r\n                        this.updateBalance();\r\n                    } else {\r\n                        params.node.setDataValue('amount', '');\r\n                    }\r\n                },\r\n            },\r\n\r\n            {\r\n                colId: 'narrative',\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                editable: this.isGridEditable,\r\n            },\r\n            {\r\n                headerName: 'CustomerVendor',\r\n                field: 'customerVendor',\r\n                colId: 'customerVendor',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'clientAccountMandatory',\r\n                field: 'clientAccountMandatory',\r\n                colId: 'clientAccountMandatory',\r\n                hide: true,\r\n            },\r\n            {\r\n                colId: 'contextualMenu',\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.additionalCostsGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    updateBalance() {\r\n        this.calculateBalanceOnCostAmountEnter.emit();\r\n    }\r\n\r\n    onCostTypeSelect(params) {\r\n        const filteredCostType = params.colDef.cellEditorParams.context.costTypes.filter(\r\n            (e) => e.costTypeCode === params.data.costType);\r\n\r\n        if (filteredCostType.length > 0) {\r\n            const nominalAccount = filteredCostType[0].nominalAccountCode;\r\n\r\n            params.node.setDataValue('accountCode', nominalAccount);\r\n        }\r\n    }\r\n\r\n    onAccountSelect(params) {\r\n        const filteredNominalAccount = params.colDef.cellEditorParams.context.nominalAccounts.filter(\r\n            (e) => e.accountNumber === params.data.accountCode);\r\n\r\n        this.isNominalAccount = filteredNominalAccount.length > 0;\r\n\r\n        this.isBankAccount = filteredNominalAccount.length > 0 && filteredNominalAccount[0].bankAccount;\r\n        if (filteredNominalAccount.length > 0) {\r\n            params.node.setDataValue('customerVendor', filteredNominalAccount[0].customerVendor);\r\n\r\n        }\r\n        if (this.isNominalAccount) {\r\n            params.node.setDataValue('accountLineType', 'L');\r\n        } else if (this.isBankAccount) {\r\n            params.node.setDataValue('accountLineType', 'B');\r\n        }\r\n\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (params.colDef.headerName === 'Pay/rec') {\r\n            if (params.data.costDirectionId === 1 && !(params.value)) {\r\n                params.value = 'Payable';\r\n            } else if (params.data.costDirectionId === 2 && !(params.value)) {\r\n                params.value = 'Receivable';\r\n            }\r\n        }\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n        }\r\n        if (params.colDef.headerName === 'Amount*') {\r\n            if (params.value) {\r\n                params.value = params.valueFormatted;\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    isClientRequiredCell(params) {\r\n        return (params.data.customerVendor === 'V' || params.data.customerVendor === 'C') ? true : false;\r\n    }\r\n\r\n    populateEntity(entity: any) {\r\n        const cashRecord = entity as CashRecord;\r\n        cashRecord.additionalCostDetails = this.getGridData();\r\n        return cashRecord;\r\n    }\r\n\r\n    isAdditionalCostValid(): boolean {\r\n        let isValid = true;\r\n        this.isClientAccountRequired = false;\r\n        if (this.gridColumnApi) {\r\n            const isAccountLineTypeVisible = this.gridColumnApi.getColumn('accountLineType').isVisible();\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (rowData.data.isDirty) {\r\n                    rowData.data.accountCode = rowData.data.nominalAccountNumber;\r\n\r\n                    const hasCustomerVendorValueForNominalAccount = (rowData.data.customerVendor\r\n                        && (rowData.data.customerVendor === 'V' || rowData.data.customerVendor === 'C')) ? true : false;\r\n                    const clientAccountMandatory = rowData.data.clientAccountMandatory;\r\n                    if (clientAccountMandatory) {\r\n                        if (!(rowData.data.costDirection && rowData.data.costTypeCode && rowData.data.accountCode\r\n                            && rowData.data.counterpartyCode && (isAccountLineTypeVisible ? rowData.data.accountLineType : true)\r\n                            && rowData.data.currencyCode && rowData.data.amount)) {\r\n                            this.isClientAccountRequired = true;\r\n                            isValid = false;\r\n                        }\r\n                    } else {\r\n                        if (!(rowData.data.costDirection && rowData.data.costTypeCode && rowData.data.accountCode\r\n                            && (isAccountLineTypeVisible ? rowData.data.accountLineType : true)\r\n                            && rowData.data.currencyCode && rowData.data.amount)) {\r\n                            isValid = false;\r\n                        }\r\n\r\n                    }\r\n                    if (rowData.data.currencyCode !== this.cashCurrency) {\r\n                        isValid = false;\r\n                        rowData.data.currencyCode = null;\r\n                        this.gridApi.updateRowData({ update: [rowData.data] });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    getGridData(): AdditionalCost[] {\r\n        const costs = new Array<AdditionalCost>();\r\n        const masterdata = this.masterdata;\r\n        const costDirections = this.costDirections;\r\n        if (this.gridApi) {\r\n            this.gridApi.forEachNode((rowData) => {\r\n                costs.push(rowData.data.getAdditionalCost(masterdata, costDirections));\r\n            });\r\n        }\r\n        return costs;\r\n    }\r\n\r\n    handleAction(action: string, cost: AdditionalCostListDisplayView) {\r\n        switch (action) {\r\n            case this.additionalCostsMenuActions.deleteCost:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Cost Deletion',\r\n                        text: 'Are you sure you want to delete this cost?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.gridApi.updateRowData({ remove: [cost] });\r\n                        this.calculateBalanceOnCostAmountEnter.emit();\r\n                    }\r\n                });\r\n                this.subscriptions.push(confirmationSubscription);\r\n                break;\r\n            default: this.assertUnreachable(action);\r\n        }\r\n    }\r\n\r\n    assertUnreachable(x): never {\r\n        throw new Error('Unknown action');\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.column.colId === 'amount' && params.value === 0) {\r\n            params.value = '';\r\n        }\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n        }\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        if (entity.additionalCostDetails && entity.additionalCostDetails.length > 0) {\r\n            this.selectionValue = entity.cashTypeId;\r\n            this.gridContext.gridEditable = isEdit ? true : false;\r\n            if (!isEdit) {\r\n                this.isAddorEdit = isEdit;\r\n            }\r\n            entity.additionalCostDetails.forEach((element) => {\r\n                if (element.accountId && !element.accountCode && this.masterdata.nominalAccounts) {\r\n                    const nominalAccountObject = this.masterdata.nominalAccounts.find((account) => account.nominalAccountId === element.accountId);\r\n                    if (nominalAccountObject) {\r\n                        element.accountCode = nominalAccountObject.accountNumber;\r\n                    }\r\n\r\n                }\r\n                const displayCostRow = new AdditionalCostListDisplayView(element, this.masterdata, this.costDirections);\r\n                this.additionalCostsGridRowsInEditMode.push(displayCostRow);\r\n\r\n                if (this.gridApi) {\r\n                    this.gridApi.updateRowData({ add: [displayCostRow] });\r\n                }\r\n            });\r\n\r\n            if (entity.cashTypeId === CashSelectionType.SimpleCashReceipt ||\r\n                entity.cashTypeId === CashSelectionType.SimpleCashPayment) {\r\n                this.calculateCashAmountWithoutCost.emit();\r\n            }\r\n        } else {\r\n            this.showGrid = isEdit ? true : false;\r\n        }\r\n        // bind curency value to cashCurrency property.\r\n        this.cashCurrency = entity.currencyCode;\r\n\r\n        this.isPanelExpanded = isEdit ? true : false;\r\n        this.isEditMode = isEdit;\r\n        return entity;\r\n    }\r\n    isGridEditable(params) {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    bindSelectedTransactionValue(value: number) {\r\n        this.cashTransactionId = value;\r\n        return value;\r\n    }\r\n\r\n    clearAdditonalCostGrid() {\r\n        if (this.gridApi) {\r\n            this.gridApi.setRowData([]);\r\n            this.addNewLineCtrl.reset();\r\n        }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param && param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value);\r\n        }\r\n    }\r\n\r\n    filterCurrency(value: any, options: any[], rowData: any): any[] {\r\n        let currencyList = [];\r\n        currencyList = options;\r\n        if (this.cashCurrency) {\r\n            currencyList = this.masterdata.currencies.filter((currency) =>\r\n                currency.currencyCode === this.cashCurrency);\r\n        }\r\n        options = currencyList;\r\n        return options;\r\n    }\r\n}\r\n","module.exports = \"<mat-accordion class=\\\"cash-accordion\\\">\\r\\n    <mat-expansion-panel [expanded]=\\\"isPanelExpanded\\\">\\r\\n        <mat-expansion-panel-header [collapsedHeight]=\\\"'35px'\\\"\\r\\n                                    [expandedHeight]=\\\"'35px'\\\">\\r\\n            <mat-panel-title>\\r\\n                Additional Details\\r\\n            </mat-panel-title>\\r\\n        </mat-expansion-panel-header>\\r\\n        <atlas-form-input [isEditable]=\\\"narrativeCtrl.enabled\\\"\\r\\n                          [fieldControl]=\\\"narrativeCtrl\\\"\\r\\n                          label=\\\"Narrative\\\"\\r\\n                          [errorMap]=\\\"narrativeErrorMap\\\">\\r\\n        </atlas-form-input>\\r\\n    </mat-expansion-panel>\\r\\n</mat-accordion>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-additional-details',\r\n    templateUrl: './additional-details.component.html',\r\n    styleUrls: ['./additional-details.component.scss'],\r\n})\r\nexport class AdditionalDetailsFormComponent extends BaseFormComponent implements OnInit {\r\n    narrativeCtrl = new AtlasFormControl('Narrative');\r\n    model: CashRecord;\r\n    cashTransactionId: number;\r\n    isPanelExpanded = true;\r\n    isCashTypeIsPayment: boolean;\r\n    cashTypeId: number;\r\n    CashType: CashType;\r\n    narrativeErrorMap: Map<string, string> = new Map();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.narrativeErrorMap\r\n            .set('required', 'Required *')\r\n            .set('maxlength', '  Additional Details should be at most 130 Characters long');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n        this.isCashTypeIsPayment = this.cashTypeId === CashType.CashPayment ? true : false;\r\n\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n    }\r\n    setValidators() {\r\n        if (this.isCashTypeIsPayment) {\r\n            this.narrativeCtrl.setValidators(\r\n                Validators.compose([Validators.maxLength(130), Validators.required]),\r\n            );\r\n        } else {\r\n            this.narrativeCtrl.setValidators(\r\n                Validators.compose([Validators.maxLength(130)]),\r\n            );\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            narrativeCtrl: this.narrativeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    populateEntity(entity: any): any {\r\n        const additionalDetails = entity as CashRecord;\r\n        additionalDetails.narrative = this.narrativeCtrl.value;\r\n        return additionalDetails;\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        this.narrativeCtrl.setValue(entity.narrative);\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        }\r\n        this.isPanelExpanded = isEdit ? true : false;\r\n        return entity;\r\n\r\n    }\r\n\r\n    setNarrative(narrative: string) {\r\n        this.narrativeCtrl.setValue(narrative);\r\n    }\r\n    bindSelectedTransactionValue(value: number) {\r\n        this.cashTransactionId = value;\r\n        return value;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-accordion class=\\\"price-accordion\\\">\\r\\n        <mat-expansion-panel [expanded]=\\\"true\\\">\\r\\n            <mat-expansion-panel-header [collapsedHeight]=\\\"'25px'\\\"\\r\\n                                        [expandedHeight]=\\\"'25px'\\\">\\r\\n                <mat-panel-title>Client Bank Account Details</mat-panel-title>\\r\\n            </mat-expansion-panel-header>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank Country\\\"\\r\\n                               [formControl]=\\\"bankCountryCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Quantity Codes'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank City\\\"\\r\\n                               [formControl]=\\\"bankCityCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Bank City'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank Swift Code\\\"\\r\\n                               [formControl]=\\\"bankSwiftCodeCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Bank Swift Code'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"NCC\\\"\\r\\n                               [formControl]=\\\"nccCtrl\\\"\\r\\n                               [matTooltip]=\\\"'NCC'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"NCS\\\"\\r\\n                               [formControl]=\\\"ncsCtrl\\\"\\r\\n                               [matTooltip]=\\\"'NCS'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank Branch\\\"\\r\\n                               [formControl]=\\\"bankBranchCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Bank Branch'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank ZIP Code\\\"\\r\\n                               [formControl]=\\\"bankZIPCodeCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Bank ZIP Code'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank Account Description\\\"\\r\\n                               [formControl]=\\\"bankAccountDescriptionCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Bank Account Description'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Account No\\\"\\r\\n                               [formControl]=\\\"accountNoCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Account No'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Account Currency\\\"\\r\\n                               [formControl]=\\\"accountCurrencyCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Account Currency'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"External Reference\\\"\\r\\n                               [formControl]=\\\"externalReferenceCtrl\\\"\\r\\n                               [matTooltip]=\\\"'External Reference'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank Type\\\"\\r\\n                               [formControl]=\\\"bankTypeCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Bank Type'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div fxFlex=\\\"30%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Bank Account Status\\\"\\r\\n                               [formControl]=\\\"bankAccountStatusCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Bank Account Status'\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-expansion-panel>\\r\\n    </mat-accordion>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CounterpartyBankAccounts } from '../../../../../shared/entities/counterparty-bankaccounts.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-bank-information',\r\n    templateUrl: './bank-information.component.html',\r\n    styleUrls: ['./bank-information.component.scss'],\r\n})\r\nexport class BankInformationComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    masterData: MasterData;\r\n    bankCountryCtrl = new AtlasFormControl('BankAccount');\r\n    bankCityCtrl = new AtlasFormControl('BankCity');\r\n    bankSwiftCodeCtrl = new AtlasFormControl('BankSwiftCode');\r\n    nccCtrl = new AtlasFormControl('NCC');\r\n    ncsCtrl = new AtlasFormControl('NCS');\r\n    bankBranchCtrl = new AtlasFormControl('BankBranch');\r\n    bankZIPCodeCtrl = new AtlasFormControl('BankZIPCode');\r\n    bankAccountDescriptionCtrl = new AtlasFormControl('BankAccountDescription');\r\n    accountNoCtrl = new AtlasFormControl('AccountNo');\r\n    accountCurrencyCtrl = new AtlasFormControl('AccountCurrency');\r\n    externalReferenceCtrl = new AtlasFormControl('ExternalReference');\r\n    bankTypeCtrl = new AtlasFormControl('BankType');\r\n    bankAccountStatusCtrl = new AtlasFormControl('BankAccount');\r\n\r\n    filteredCounterPartyBankAccounts: CounterpartyBankAccounts[];\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected masterdataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n\r\n        this.formGroup = this.formBuilder.group({\r\n            bankCountryCtrl: this.bankCountryCtrl,\r\n            bankCityCtrl: this.bankCityCtrl,\r\n            bankSwiftCodeCtrl: this.bankSwiftCodeCtrl,\r\n            nccCtrl: this.nccCtrl,\r\n            ncsCtrl: this.ncsCtrl,\r\n            bankBranchCtrl: this.bankBranchCtrl,\r\n            bankZIPCodeCtrl: this.bankZIPCodeCtrl,\r\n            bankAccountDescriptionCtrl: this.bankAccountDescriptionCtrl,\r\n            accountNoCtrl: this.accountNoCtrl,\r\n            accountCurrencyCtrl: this.accountCurrencyCtrl,\r\n            externalReferenceCtrl: this.externalReferenceCtrl,\r\n            bankTypeCtrl: this.bankTypeCtrl,\r\n            bankAccountStatusCtrl: this.bankAccountStatusCtrl,\r\n        });\r\n    }\r\n\r\n    setClientBankInformation(clientBankId: number, counterpartyId: number, currencyCode: string) {\r\n        if (counterpartyId && currencyCode) {\r\n            this.resetClientBankInformation();\r\n            this.masterdataService.getCounterPartyBankAccounts(counterpartyId, currencyCode)\r\n                .subscribe((data) => {\r\n                    if (data.value && data.value.length > 0) {\r\n\r\n                        const bankDetails = data.value.find((e) => e.bankAccountId === Number(clientBankId));\r\n                        if (bankDetails) {\r\n                            const bankCountry = this.masterData.countries.find((e) => e.countryId === bankDetails.bankCountryKey);\r\n\r\n                            const bankType = this.masterData.bankTypes.find((e) => e.enumEntityId === bankDetails.bankTypeID);\r\n\r\n                            const bankAccountStatus = this.masterData.bankAccountStatuses.find((e) => e.enumEntityId === bankDetails.bankAccountStatusID);\r\n\r\n                            this.bankCountryCtrl.patchValue(bankCountry && bankCountry.description);\r\n                            this.bankCityCtrl.patchValue(bankDetails.bankCity);\r\n                            this.bankSwiftCodeCtrl.patchValue(bankDetails.bankSwiftCode);\r\n                            this.nccCtrl.patchValue(bankDetails.nCC);\r\n                            this.bankBranchCtrl.patchValue(bankDetails.bankBranch);\r\n                            this.bankZIPCodeCtrl.patchValue(bankDetails.bankZIPCode);\r\n                            this.bankAccountDescriptionCtrl.patchValue(bankDetails.bankAccountDesc);\r\n                            this.accountNoCtrl.patchValue(bankDetails.accountNo);\r\n                            this.accountCurrencyCtrl.patchValue(bankDetails.accountCCY);\r\n                            this.externalReferenceCtrl.patchValue(bankDetails.externalReference);\r\n                            this.bankTypeCtrl.patchValue(bankType && bankType.enumEntityValue);\r\n                            this.bankAccountStatusCtrl.patchValue(bankAccountStatus && bankAccountStatus.enumEntityValue);\r\n                            this.formGroup.disable();\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    resetClientBankInformation() {\r\n        this.formGroup.reset();\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"space-between stretch\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxFlex=\\\"49\\\">\\r\\n        <atlas-document-information #documentInformationFormComponent\\r\\n                                    (currencySelected)=\\\"currencySelected($event)\\\"\\r\\n                                    (currencySearchValue)=\\\"onCurrencySearchValuesEntered($event)\\\"\\r\\n                                    (currencyChangeValue)=\\\"onCurrencyChange($event)\\\"\\r\\n                                    (departmentSearchValue)=\\\"onDepartmentSearchvalueEntered($event)\\\"\\r\\n                                    (amountSearchValue)=\\\"onAmountSearchValueEntered($event)\\\">\\r\\n        </atlas-document-information>\\r\\n        <atlas-payment-order-template-selection-card *ngIf=\\\"!isEdit\\\"\\r\\n                                                     (templateSelected)=\\\"onTemplateSelected($event)\\\"\\r\\n                                                     #templateSelectionComponent\\r\\n                                                     fxFlex>\\r\\n        </atlas-payment-order-template-selection-card>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start stretch\\\"\\r\\n         fxFlex=\\\"49\\\">\\r\\n        <atlas-counterparty-card [ngClass]=\\\"{'counterparty-card':!isDifferentCurrencyOptionSelected() && cashTypeId !== CashType.CashPayment}\\\"\\r\\n                                 #counterpartyFormComponent\\r\\n                                 (counterpartySearchValues)=\\\"onCounterpartySearchValuesEntered($event)\\\"\\r\\n                                 (setClientBankInformation)=\\\"onSetClientBankInformation()\\\">\\r\\n        </atlas-counterparty-card>\\r\\n\\r\\n        <atlas-bank-information #bankInformationComponent\\r\\n                                *ngIf=\\\"cashTypeId==CashType.CashPayment\\\">\\r\\n        </atlas-bank-information>\\r\\n\\r\\n        <atlas-currency-information-card [ngClass]=\\\"{'hidden-during-loading':!isDifferentCurrencyOptionSelected()}\\\"\\r\\n                                         #currencyFormComponent\\r\\n                                         (roeTypeSelected)=\\\"onRoeTypeChanged($event)\\\"\\r\\n                                         (fxRateEntered)=\\\"onFxRateValueChanged($event)\\\"\\r\\n                                         (bankCurrencySelected)=\\\"onBankCurrencyEntered($event)\\\"\\r\\n                                         (amountSearchValue)=\\\"onAmountSearchValueEntered($event)\\\">\\r\\n        </atlas-currency-information-card>\\r\\n    </div>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start left\\\">\\r\\n    <atlas-additional-details #additionalDetailsFormComponent></atlas-additional-details>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start left\\\"\\r\\n     class=\\\"cost-style\\\">\\r\\n    <atlas-additional-costs (currencySelected)=\\\"currencySelected($event)\\\"\\r\\n                            (calculateCashAmountWithoutCost)=\\\"onEditCalculateCashAmountWithoutCost()\\\"\\r\\n                            (calculateBalanceOnCostAmountEnter)=\\\"calculateBalanceOnCostAmountEnter()\\\"\\r\\n                            #additionalCostsFormComponent></atlas-additional-costs>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\">\\r\\n        <mat-slide-toggle [formControl]=\\\"urgentPaymentCtrl\\\"\\r\\n                          *ngIf=\\\"cashTypeId === CashType.CashPayment\\\">Urgent Payment</mat-slide-toggle>\\r\\n        <mat-slide-toggle [formControl]=\\\"authorizePostingCtrl\\\"\\r\\n                          [checked]=\\\"isAuthorizePosting\\\"\\r\\n                          (change)=\\\"onAuthorizePostingChanged($event)\\\">\\r\\n            Authorize for posting\\r\\n        </mat-slide-toggle>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\">\\r\\n        <mat-slide-toggle [ngClass]=\\\"{'hidden-during-loading':hideTransmitTreasury}\\\"\\r\\n                          [disabled]=\\\"cashTypeId==CashType.CashReceipt\\\"\\r\\n                          [formControl]=\\\"transmitTreasuryCtrl\\\"\\r\\n                          [checked]=\\\"isTransmitTreasury\\\"\\r\\n                          (change)=\\\"onTransmitTreasuryChanged($event)\\\">\\r\\n            Transmit to treasury System\\r\\n            <mat-hint *ngIf=\\\"warning\\\">\\r\\n                Unable to post\\r\\n            </mat-hint>\\r\\n            <mat-hint *ngIf=\\\"message\\\">\\r\\n                Cash will be autoposted\\r\\n            </mat-hint>\\r\\n        </mat-slide-toggle>\\r\\n        <mat-slide-toggle *ngIf=\\\"hasTemplate && !isEdit\\\"\\r\\n                          [formControl]=\\\"previewDocumentCtrl\\\"\\r\\n                          (change)=\\\"onPreviewToggleSelected()\\\">Preview Document</mat-slide-toggle>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".cost-style {\\n  padding: 10px 0px; }\\n\\n.hidden-during-loading {\\n  display: none; }\\n\\n:host ::ng-deep .counterparty-card {\\n  height: 74% !important; }\\n\\n:host ::ng-deep .counterparty-card .mat-card {\\n    height: inherit; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { isGreatherThanZero, isPositive } from '../../../../shared/directives/number-validators.directive';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { Currency } from '../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../shared/enums/cash-type.enum';\r\nimport { InterfaceType } from '../../../../shared/enums/interface-type.enum';\r\nimport { CashRecord } from '../../../../shared/services/execution/dtos/cash-record';\r\nimport { CashSetup } from '../../../../shared/services/execution/dtos/cash-setup';\r\nimport { InvoiceForCashMatching } from '../../../../shared/services/execution/dtos/invoice-for-cash';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { AdditionalCostsFormComponent } from './additional-costs/additional-costs.component';\r\nimport { AdditionalDetailsFormComponent } from './additional-details/additional-details.component';\r\nimport { CounterpartyFormComponent } from './counterparty-card/counterparty-card.component';\r\nimport { CurrencyInformationCardComponent } from './currency-information-card/currency-information-card.component';\r\nimport { DocumentInformationFormComponent } from './document-information/document-information.component';\r\nimport { PaymentOrderTemplateSelectionCardComponent } from './template-selection-card/payment-order-template-selection-card.component';\r\n\r\n@Component({\r\n    selector: 'atlas-cash-details-form-component',\r\n    templateUrl: './cash-details.component.html',\r\n    styleUrls: ['./cash-details.component.scss'],\r\n})\r\nexport class CashDetailsFormComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    private templateSelectionComponent: PaymentOrderTemplateSelectionCardComponent;\r\n    @Output() readonly counterpartySearchValues = new EventEmitter<any>();\r\n    @Output() readonly departmentSearchValue = new EventEmitter<any>();\r\n    @Output() readonly currencySearchValue = new EventEmitter<any>();\r\n    @Output() readonly amountSearchValue = new EventEmitter<any>();\r\n    @Output() readonly currencyCardInitialValues = new EventEmitter<any>();\r\n    @Output() readonly currencyCardFinalRowType = new EventEmitter<any>();\r\n    @Output() readonly fxRateValueCalculated = new EventEmitter<any>();\r\n    @Output() readonly previewToggleSelected = new EventEmitter<boolean>();\r\n    @Output() readonly templateSelected = new EventEmitter<boolean>();\r\n    @Output() readonly calculateTotalBalanceOnCostAmountEnter = new EventEmitter<any>();\r\n    @Output() readonly calculateCashAmountWithoutCost = new EventEmitter<any>();\r\n    @ViewChild('counterpartyFormComponent') counterpartyFormComponent: CounterpartyFormComponent;\r\n    @ViewChild('additionalDetailsFormComponent') additionalDetailsFormComponent: AdditionalDetailsFormComponent;\r\n    @ViewChild('documentInformationFormComponent') documentInformationFormComponent: DocumentInformationFormComponent;\r\n    @ViewChild('additionalCostsFormComponent') additionalCostsFormComponent: AdditionalCostsFormComponent;\r\n    @ViewChild('currencyFormComponent') currencyFormComponent: CurrencyInformationCardComponent;\r\n    @ViewChild('templateSelectionComponent') set templateSelectionCard(templateSelectionCard: PaymentOrderTemplateSelectionCardComponent) {\r\n        this.templateSelectionComponent = templateSelectionCard;\r\n        if (this.formComponents.indexOf(templateSelectionCard) === -1) {\r\n            this.formComponents.push(this.templateSelectionComponent);\r\n        }\r\n    }\r\n    formComponents: BaseFormComponent[] = [];\r\n    masterData: MasterData;\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    selectionValue: number;\r\n    createCashFormGroup: FormGroup;\r\n    createCashCurrencyFormGroup: FormGroup;\r\n    counterpartyValue: string;\r\n    clientNameValue: string;\r\n    currencyvalue: string;\r\n    departmentValue: number;\r\n    amountValue: number;\r\n    currencyRoeType: string;\r\n    initialFxRateValue: number;\r\n    finalFxRateValue: number;\r\n    bankCurrencyValue: string;\r\n    initialRoeTypeValue: string;\r\n    finalRoeTypeValue: string;\r\n    currencyChangeStatus: boolean;\r\n    urgentPaymentCtrl = new AtlasFormControl('UrgentPayment');\r\n    authorizePostingCtrl = new AtlasFormControl('AuthorizeForPosting');\r\n    transmitTreasuryCtrl = new AtlasFormControl('TransmitToTreasury');\r\n    previewDocumentCtrl = new AtlasFormControl('PreviewDocumentCtrl');\r\n    message: true;\r\n    cashSetupModel: CashSetup = new CashSetup();\r\n    private cashDetailsDefaultSubscription: Subscription;\r\n    warning: true;\r\n    isAuthorizePosting: boolean;\r\n    isTransmitTreasury: boolean;\r\n    hasTemplate = false;\r\n    isEdit: boolean;\r\n    isSave: boolean = false;\r\n\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    hideTransmitTreasury: boolean = false;\r\n    isTraxInterfaceEnabled: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected executionService: ExecutionService,\r\n        protected lockService: LockService,\r\n        protected dialog: MatDialog,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n\r\n        this.createCashFormGroup = this.formBuilder.group({\r\n            counterpartyFormComponent: this.counterpartyFormComponent.getFormGroup(),\r\n            additionalDetailsFormComponent: this.additionalDetailsFormComponent.getFormGroup(),\r\n            documentInformationFormComponent: this.documentInformationFormComponent.getFormGroup(),\r\n        });\r\n        this.createCashCurrencyFormGroup = this.formBuilder.group({\r\n            currencyFormComponent: this.currencyFormComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.documentInformationFormComponent,\r\n            this.counterpartyFormComponent,\r\n            this.additionalDetailsFormComponent,\r\n            this.additionalCostsFormComponent,\r\n            this.currencyFormComponent);\r\n\r\n        if (this.route.snapshot.url.length > 0 && this.route.snapshot.url[1].path.toString() === 'new') {\r\n            this.subscriptions.push(this.executionService.getInterfaceSetupDetails(InterfaceType.PaymentRequestInterface)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.isTraxInterfaceEnabled = data.isActive;\r\n                        if (data.isActive) {\r\n                            this.isTransmitTreasury = true;\r\n                            if (this.cashTypeId === CashType.CashReceipt) {\r\n                                this.isTransmitTreasury = false;\r\n                                this.transmitTreasuryCtrl.setValue(this.isTransmitTreasury);\r\n                                this.counterpartyFormComponent.clientBankCtrl.clearValidators();\r\n                                this.counterpartyFormComponent.showHintForClientBank = false;\r\n                                this.isAuthorizePosting = true;\r\n                            } else {\r\n                                this.transmitTreasuryCtrl.setValue(this.isTransmitTreasury);\r\n                                this.counterpartyFormComponent.clientBankCtrl.setValidators(Validators.compose([Validators.required]));\r\n                                this.counterpartyFormComponent.showHintForClientBank = true;\r\n                                this.isAuthorizePosting = false;\r\n                            }\r\n                            this.authorizePostingCtrl.setValue(this.isAuthorizePosting);\r\n                        } else {\r\n                            this.isAuthorizePosting = true;\r\n                            this.authorizePostingCtrl.setValue(this.isAuthorizePosting);\r\n                            this.transmitTreasuryCtrl.disable();\r\n                            this.counterpartyFormComponent.clientBankCtrl.clearValidators();\r\n                            this.counterpartyFormComponent.clientBankCtrl.setValidators(null);\r\n                        }\r\n                        this.counterpartyFormComponent.clientBankCtrl.updateValueAndValidity();\r\n                    }\r\n\r\n                    // hide TransmitTreasury when cash type is CI;\r\n\r\n                    this.hideTransmitTreasury = this.cashTypeId === CashType.CashReceipt ? true : !this.isTraxInterfaceEnabled;\r\n                }));\r\n        }\r\n\r\n        this.getValueToControl();\r\n        this.urgentPaymentCtrl.setValue(false);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.cashDetailsDefaultSubscription) {\r\n            this.cashDetailsDefaultSubscription.unsubscribe();\r\n        }\r\n        this.stopLockRefresh();\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n\r\n    getValueToControl() {\r\n        if (this.cashTypeId === CashType.CashPayment) {\r\n            if (this.authorizePostingCtrl.value === 0 && this.transmitTreasuryCtrl.value === 0) {\r\n                this.warning = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    onCounterpartySearchValuesEntered(model: any) {\r\n        this.counterpartyValue = model.counterparty;\r\n        this.clientNameValue = model.clientName;\r\n        this.counterpartySearchValues.emit({\r\n            counterparty: this.counterpartyValue,\r\n            clientName: this.clientNameValue,\r\n        });\r\n    }\r\n\r\n    calculateBalanceOnCostAmountEnter() {\r\n        this.calculateTotalBalanceOnCostAmountEnter.emit();\r\n    }\r\n\r\n    onCurrencySearchValuesEntered(model: any) {\r\n        if (model) {\r\n            this.currencyvalue = model.currency;\r\n            this.counterpartyFormComponent.cashCurrency = model.currency;\r\n            this.currencyFormComponent.currencyValue = this.currencyvalue;\r\n            this.currencyRoeType = model.currencyRoeType;\r\n            this.currencyFormComponent.currencyRoeType = this.currencyRoeType;\r\n            this.currencySearchValue.emit({ currency: this.currencyvalue });\r\n            this.counterpartyFormComponent.currencyValue = this.currencyvalue;\r\n        }\r\n    }\r\n\r\n    onCurrencyChange(model: any) {\r\n        this.currencyChangeStatus = model.currencyStatus;\r\n        this.currencyFormComponent.currencyChangeStatus = this.currencyChangeStatus;\r\n        this.currencyFormComponent.bankCurrencyCtrl.reset();\r\n        this.currencyFormComponent.fxRateCtrl.reset();\r\n        this.counterpartyFormComponent.clientBankCtrl.patchValue(null);\r\n        if (this.counterpartyFormComponent.bankInformationComponent) {\r\n            this.counterpartyFormComponent.bankInformationComponent.resetClientBankInformation();\r\n        }\r\n        const currency = (this.selectionValue === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.selectionValue === CashSelectionType.ReceiptDifferentCurrency)\r\n            ? model.paymentCurrency : model.currency;\r\n\r\n        this.getClientBankDetails(currency);\r\n\r\n    }\r\n\r\n    onDepartmentSearchvalueEntered(model: any) {\r\n        this.departmentValue = model.department;\r\n        this.departmentSearchValue.emit({ department: this.departmentValue });\r\n    }\r\n\r\n    onAmountSearchValueEntered(model: any) {\r\n        this.amountValue = model.amount;\r\n        this.amountSearchValue.emit({ amount: this.amountValue });\r\n        this.calculateDocAmountForCashReceiptDiffCurrency();\r\n    }\r\n\r\n    calculateDocAmountForCashReceiptDiffCurrency() {\r\n        if (this.cashTypeId === CashType.CashReceipt\r\n            && (this.selectionValue === CashSelectionType.PaymentDifferentCurrency ||\r\n                this.selectionValue === CashSelectionType.ReceiptDifferentCurrency)) {\r\n            if (this.amountValue && this.currencyFormComponent.fxRateCtrl.value\r\n                && this.currencyFormComponent.fxRateCtrl.value !== 0\r\n                && this.currencyFormComponent.divideMultiplyCtrl.value) {\r\n                if (this.currencyFormComponent.divideMultiplyCtrl.value === 'D') {\r\n                    this.documentInformationFormComponent.setDocAmountForCashReceiptDiffCurrency(\r\n                        this.amountValue * this.currencyFormComponent.fxRateCtrl.value);\r\n                } else if (this.currencyFormComponent.divideMultiplyCtrl.value === 'M') {\r\n                    this.documentInformationFormComponent.setDocAmountForCashReceiptDiffCurrency(\r\n                        this.amountValue / this.currencyFormComponent.fxRateCtrl.value);\r\n                }\r\n            } else {\r\n                this.documentInformationFormComponent.setDocAmountForCashReceiptDiffCurrency(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    onBankCurrencyEntered(model: any) {\r\n        this.initialFxRateValue = model.initialFxRate;\r\n        this.bankCurrencyValue = model.bankCurrency;\r\n        this.initialRoeTypeValue = model.initialRoeType;\r\n        this.currencyCardInitialValues.emit({\r\n            bankCurrency: this.bankCurrencyValue,\r\n            initialFxRate: this.initialFxRateValue,\r\n            initialRoeType: this.initialRoeTypeValue,\r\n        });\r\n        this.getClientBankDetails(this.bankCurrencyValue);\r\n\r\n        this.calculateDocAmountForCashReceiptDiffCurrency();\r\n    }\r\n\r\n    onRoeTypeChanged(model: any) {\r\n        this.finalRoeTypeValue = model.finalRoeType;\r\n        this.currencyCardFinalRowType.emit({\r\n            finalRoeType: this.finalRoeTypeValue,\r\n        });\r\n    }\r\n\r\n    onFxRateValueChanged(model: any) {\r\n        this.finalFxRateValue = model.finalFxRate;\r\n        this.fxRateValueCalculated.emit({ finalFxRate: this.finalFxRateValue });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            authorizePostingCtrl: this.authorizePostingCtrl,\r\n            transmitTreasuryCtrl: this.transmitTreasuryCtrl,\r\n            urgentPaymentCtrl: this.urgentPaymentCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(model: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            if (comp) { comp.populateEntity(model); }\r\n        });\r\n        model.authorizedForPosting = this.authorizePostingCtrl.value === '' ? false : this.authorizePostingCtrl.value;\r\n        model.toTransmitToTreasury = this.transmitTreasuryCtrl.value === '' ? false : this.transmitTreasuryCtrl.value;\r\n        model.urgentPayment = this.urgentPaymentCtrl.value;\r\n        return model;\r\n\r\n    }\r\n\r\n    currencySelected(currency: any) {\r\n        this.additionalCostsFormComponent.cashCurrency = currency;\r\n        this.currencySearchValue.emit({ currencyvalue: currency });\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean) {\r\n        this.isEdit = isEdit;\r\n        if (isEdit) {\r\n            this.lockService.lockCashDocument(\r\n                entity.cashId, LockFunctionalContext.CashDocumentEdition).pipe(takeUntil(this.destroy$)).subscribe(\r\n                    (lockData) => {\r\n                        this.startLockRefresh(entity.cashId, entity.documentReference);\r\n                    },\r\n                    (err) => {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: err.error.detail,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/cash']);\r\n                    });\r\n\r\n            this.formComponents.forEach((comp) => {\r\n                if (comp) { comp.initForm(entity, isEdit); }\r\n            });\r\n            this.authorizePostingCtrl.setValue(entity.authorizedForPosting);\r\n            this.transmitTreasuryCtrl.setValue(entity.toTransmitToTreasury);\r\n            this.isAuthorizePosting = entity.authorizedForPosting;\r\n            this.isTransmitTreasury = entity.toTransmitToTreasury;\r\n            this.urgentPaymentCtrl.setValue(entity.urgentPayment);\r\n        }\r\n        if (entity.cashTypeId === CashSelectionType.SimpleCashPayment ||\r\n            entity.cashTypeId === CashSelectionType.SimpleCashReceipt) {\r\n            if (this.additionalCostsFormComponent.gridColumnApi) {\r\n                this.additionalCostsFormComponent.gridColumnApi.setColumnVisible('accountLineType', false);\r\n            }\r\n            this.additionalCostsFormComponent.showGrid = true;\r\n        } else { this.additionalCostsFormComponent.showGrid = false; }\r\n        this.selectionValue = entity.cashTypeId;\r\n    }\r\n\r\n    setNarrative(narrative: string) {\r\n        this.additionalDetailsFormComponent.setNarrative(narrative);\r\n    }\r\n\r\n    isPickTransaction() {\r\n        if (this.selectionValue === 1 || this.selectionValue === 5) {\r\n            this.additionalCostsFormComponent.showGrid = true;\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isDifferentCurrencyOptionSelected(): boolean {\r\n        if (this.selectionValue === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    bindSelectedValue(value: number) {\r\n        if (value !== 0) {\r\n            this.selectionValue = value;\r\n            this.documentInformationFormComponent.cashTransactionId = value;\r\n            this.counterpartyFormComponent.cashTransactionId = value;\r\n            this.currencyFormComponent.cashTransactionId = value;\r\n\r\n            if (this.templateSelectionComponent) {\r\n                this.templateSelectionComponent.SetCashType(this.selectionValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    onAuthorizePostingChanged(value: MatSlideToggleChange) {\r\n        if (this.cashTypeId === CashType.CashPayment) {\r\n            this.isAuthorizePosting = value.checked;\r\n\r\n        }\r\n    }\r\n\r\n    onTransmitTreasuryChanged(value: MatSlideToggleChange) {\r\n        this.isTransmitTreasury = value.checked;\r\n        if (this.isTransmitTreasury) {\r\n            this.counterpartyFormComponent.clientBankCtrl.setValidators(Validators.compose([Validators.required]));\r\n            this.counterpartyFormComponent.showHintForClientBank = true;\r\n        } else {\r\n            this.counterpartyFormComponent.clientBankCtrl.clearValidators();\r\n            this.counterpartyFormComponent.showHintForClientBank = false;\r\n        }\r\n        this.counterpartyFormComponent.clientBankCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    onTemplateSelected(hasTemplate) {\r\n        this.hasTemplate = hasTemplate;\r\n        this.previewDocumentCtrl.setValue(this.hasTemplate);\r\n        this.templateSelected.emit(hasTemplate);\r\n        this.onPreviewToggleSelected();\r\n    }\r\n\r\n    onPreviewToggleSelected() {\r\n        this.previewToggleSelected.emit(this.previewDocumentCtrl.value);\r\n    }\r\n\r\n    // update validator for controls based on value\r\n    updateValidatorForAmount() {\r\n        if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            this.createCashFormGroup.controls.\r\n                documentInformationFormComponent.get('amountCtrl').clearValidators();\r\n        } else {\r\n            this.createCashFormGroup.controls.\r\n                documentInformationFormComponent.get('amountCtrl').setValidators(\r\n                    Validators.compose([isPositive(), Validators.required, isGreatherThanZero()]));\r\n        }\r\n        this.createCashFormGroup.controls.\r\n            documentInformationFormComponent.get('amountCtrl').updateValueAndValidity();\r\n    }\r\n\r\n    startLockRefresh(cashId: number, documentReference: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Cash Document';\r\n        resourceInformation.resourceId = cashId;\r\n        resourceInformation.resourceCode = documentReference;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    onSetClientBankInformation() {\r\n        const counterpartyId = this.counterpartyFormComponent.counterpartyId;\r\n        const currency = (this.documentInformationFormComponent.currencyCtrl.value as Currency).currencyCode;\r\n        if (this.counterpartyFormComponent.bankInformationComponent) {\r\n            this.counterpartyFormComponent.bankInformationComponent.setClientBankInformation(null, counterpartyId, currency);\r\n        }\r\n    }\r\n\r\n    onEditCalculateCashAmountWithoutCost() {\r\n        this.calculateCashAmountWithoutCost.emit();\r\n    }\r\n\r\n    getClientBankDetails(currency: string) {\r\n        if (this.counterpartyFormComponent.bankInformationComponent) {\r\n            this.counterpartyFormComponent.bankInformationComponent.resetClientBankInformation();\r\n        }\r\n        this.counterpartyFormComponent.filteredCounterPartyBankAccounts = [];\r\n        const counterpartyDetail = this.counterpartyFormComponent.counterpartyCtrl.value;\r\n        const counterparty = this.counterpartyFormComponent.masterData.counterparties.filter(\r\n            (item) => item.counterpartyCode === counterpartyDetail.counterpartyCode,\r\n        );\r\n        if (counterparty.length > 0) {\r\n            const counterpartyId = counterparty[0].counterpartyID;\r\n            this.counterpartyFormComponent.getCounterpartyBankAccounts(\r\n                counterpartyId, currency, null, false);\r\n        }\r\n    }\r\n\r\n    getInvoiceSearchValues(): InvoiceForCashMatching {\r\n        const searchValues: InvoiceForCashMatching = new InvoiceForCashMatching();\r\n        searchValues.currency = (this.documentInformationFormComponent.currencyCtrl.value as Currency).currencyCode;\r\n        searchValues.departmentCode = (this.documentInformationFormComponent.departmentCodeCtrl.value as Department).departmentCode;\r\n        searchValues.amount = this.documentInformationFormComponent.amountCtrl.value;\r\n        searchValues.counterpartyreference = (this.counterpartyFormComponent.counterpartyCtrl.value as Counterparty).counterpartyCode;\r\n        return searchValues;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            Counterparty Information\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"40%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"counterpartyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                         label=\\\"Counterparty\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"onCounterpartyIdSelected($event)\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     fxFlex=\\\"100%\\\"\\r\\n                     [class.isEmpty]=\\\"!payerCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"payerCtrl.isRequired\\\">\\r\\n                    <mat-form-field *ngIf=\\\"cashTypeId==CashType.CashPayment\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Payee\\\"\\r\\n                               [formControl]=\\\"payeeCtrl\\\"\\r\\n                               label=\\\"Payee\\\"\\r\\n                               matTooltip=\\\"Payee\\\"\\r\\n                               [required]=\\\"payeeCtrl.isRequired\\\"\\r\\n                               autocomplete=\\\"off\\\">\\r\\n                        <mat-error *ngIf=\\\"payeeCtrl.hasError('required')\\\">\\r\\n                            Required *\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"payeeCtrl.isRequired\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n\\r\\n                    <mat-form-field fxFlex=\\\"100%\\\"\\r\\n                                    *ngIf=\\\"cashTypeId==CashType.CashReceipt\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Payer\\\"\\r\\n                               [formControl]=\\\"payerCtrl\\\"\\r\\n                               label=\\\"payer\\\"\\r\\n                               matTooltip=\\\"payer\\\"\\r\\n                               [required]=\\\"payerCtrl.isRequired\\\"\\r\\n                               autocomplete=\\\"off\\\">\\r\\n                        <mat-error *ngIf=\\\"payerCtrl.hasError('required')\\\">\\r\\n                            Required *\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"payerCtrl.isRequired\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div>\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     [class.isEmpty]=\\\"!clientBankCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"clientBankCtrl.isRequired\\\">\\r\\n                    <mat-form-field>\\r\\n                        <!--The Bank Account is hardcoded as per the suggestion given by sergio due to\\r\\n    dependency with counterparty and currency a new PBI will be there to handle this.-->\\r\\n\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Client Bank\\\"\\r\\n                               [matAutocomplete]=\\\"clientBank\\\"\\r\\n                               [formControl]=\\\"clientBankCtrl\\\"\\r\\n                               matTooltip=\\\"Client Bank\\\"\\r\\n                               [required]=\\\"clientBankCtrl.isRequired\\\"\\r\\n                               (blur)=\\\"onClientBankRemoval()\\\">\\r\\n                        <mat-autocomplete #clientBank=\\\"matAutocomplete\\\"\\r\\n                                          [panelWidth]=\\\"panelSize\\\"\\r\\n                                          (optionSelected)=\\\"onclientBankSelected($event.option.value)\\\">\\r\\n                            <mat-option *ngFor=\\\"let clientBanks of filteredCounterPartyBankAccounts\\\"\\r\\n                                        [value]=\\\"clientBanks.bankAccountId\\\">\\r\\n                                {{clientBanks.accountNo}} |\\r\\n                                {{clientBanks.bankName}}\\r\\n                            </mat-option>\\r\\n                        </mat-autocomplete>\\r\\n                        <mat-error *ngIf=\\\"showHintForClientBank && cashTypeId==CashType.CashPayment\\\">\\r\\n                            Client Bank Account is required\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"clientBankCtrl.hasError('inDropdownList')\\\">\\r\\n                            Value not in list\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"showHintForClientBank && !showHintForNoClientBankAccount\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                        <mat-hint *ngIf=\\\"showHintForNoClientBankAccount\\\"\\r\\n                                  class=\\\"warning-message\\\">\\r\\n                            No Client Bank for selected conterparty & currency OR Client Bank is deactivated\\r\\n                        </mat-hint>\\r\\n\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".warning-message {\\n  color: #df5a4d !important; }\\n\\n.mat-form-field {\\n  margin-bottom: 16px; }\\n\\n:host ::ng-deep div.mat-expansion-panel-body label {\\n  font-weight: 400; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { BankAccount } from '../../../../../shared/entities/bank-account.entity';\r\nimport { CounterpartyBankAccounts } from '../../../../../shared/entities/counterparty-bankaccounts.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../../shared/entities/nominal-account.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { CashSetup } from '../../../../../shared/services/execution/dtos/cash-setup';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { CommonMethods } from '../../../../services/execution-cash-common-methods';\r\nimport { BankInformationComponent } from '../bank-information/bank-information.component';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-card',\r\n    templateUrl: './counterparty-card.component.html',\r\n    styleUrls: ['./counterparty-card.component.scss'],\r\n})\r\nexport class CounterpartyFormComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly counterpartySearchValues = new EventEmitter<any>();\r\n    @Output() readonly setClientBankInformation = new EventEmitter<any>();\r\n    @ViewChild('bankInformationComponent') bankInformationComponent: BankInformationComponent;\r\n    counterpartyCtrl = new AtlasFormControl('Counterparty');\r\n    payerCtrl = new AtlasFormControl('Payer');\r\n    clientBankCtrl = new AtlasFormControl('clientAccount');\r\n    payeeCtrl = new AtlasFormControl('Payee');\r\n    private nominalAccountDefaultSubscription: Subscription;\r\n\r\n    filteredCounterPartyList: Counterparty[];\r\n    filteredNominalAccountList: NominalAccount[];\r\n    counterpartyValue: string;\r\n    clientNameValue: string;\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Counterparties,\r\n        MasterDataProps.NominalAccounts,\r\n    ];\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashSetupModel: CashSetup = new CashSetup();\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n\r\n    model: CashRecord;\r\n    bankList: BankAccount[];\r\n    filteredbankAccountList: BankAccount[];\r\n    cashTransactionId: number;\r\n    currencyValue: string;\r\n    filteredCounterPartyBankAccounts: CounterpartyBankAccounts[];\r\n    counterPartyBankAccountsList: CounterpartyBankAccounts[];\r\n    counterpartyId: number;\r\n    searchedCounterpartyCode: string;\r\n    isEditable: boolean = false;\r\n    cashCurrency: string;\r\n    paymentCounterpartyCode: string;\r\n    clientBankAccountNo: number;\r\n    showHintForClientBank: boolean;\r\n    savedCounterPartyBankAccounts: CounterpartyBankAccounts[];\r\n    showHintForNoClientBankAccount: boolean;\r\n    paymentCurrency: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected executionService: ExecutionService,\r\n        private snackbarService: SnackbarService,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filterCounterparties();\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.showHintForNoClientBankAccount = false;\r\n        this.counterPartyBankAccountsList = [];\r\n        this.clientBankCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyBankAccounts = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.counterPartyBankAccountsList,\r\n                ['accountNo', 'bankName'],\r\n                'bankAccountId',\r\n            );\r\n        });\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.nominalAccountDefaultSubscription) {\r\n            this.nominalAccountDefaultSubscription.unsubscribe();\r\n        }\r\n    }\r\n    setValidators() {\r\n        this.counterpartyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.counterparties,\r\n                    nameof<Counterparty>('counterpartyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n        this.payerCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.payeeCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.clientBankCtrl.setValidators([\r\n            Validators.compose([Validators.required]),\r\n        ]);\r\n    }\r\n\r\n    setBankAccountValidator() {\r\n        this.clientBankCtrl.clearValidators();\r\n        this.clientBankCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.counterPartyBankAccountsList,\r\n                    nameof<CounterpartyBankAccounts>('bankAccountId'),\r\n                ),\r\n                Validators.required,\r\n            ]));\r\n    }\r\n\r\n    bindCounterpartyValues() {\r\n\r\n        // check if transaction selected is for diff counterparty(diff client)\r\n        if (this.cashTransactionId === CashSelectionType.PaymentDifferentClient) {\r\n            // filter the counterparty except selected in last step.\r\n            this.filterCounterparties();\r\n        } else {\r\n\r\n            if (this.counterpartyValue) {\r\n                const counterparty = this.masterData.counterparties.filter(\r\n                    (item) => item.counterpartyCode === this.counterpartyValue,\r\n                );\r\n                if (counterparty.length > 0) {\r\n                    this.counterpartyCtrl.patchValue(counterparty[0]);\r\n                }\r\n            }\r\n            this.formGroup.patchValue({ payeeCtrl: this.clientNameValue });\r\n            this.counterpartyCtrl.disable();\r\n            this.payeeCtrl.disable();\r\n        }\r\n\r\n    }\r\n\r\n    onCounterpartyIdSelected(value: Counterparty) {\r\n        this.clientBankCtrl.patchValue(null);\r\n        if (this.bankInformationComponent) {\r\n            this.bankInformationComponent.resetClientBankInformation();\r\n        }\r\n        const counterparty = this.masterData.counterparties.find(\r\n            (item) => item.counterpartyCode === value.counterpartyCode,\r\n        );\r\n        if (counterparty) {\r\n            this.counterpartyId = counterparty.counterpartyID;\r\n            this.payeeCtrl.patchValue(counterparty.description);\r\n            this.payerCtrl.patchValue(counterparty.description);\r\n        }\r\n        this.counterpartyValue = this.counterpartyCtrl.value;\r\n        this.clientNameValue = this.payerCtrl.value;\r\n        this.counterpartySearchValues.emit({\r\n            counterparty: this.counterpartyValue,\r\n            clientName: this.clientNameValue,\r\n        });\r\n\r\n        // in cash by Diff ccy , client bank details need to be fetch based on counterparty\r\n        // and payment currency code\r\n        // else on cash currency code.\r\n\r\n        let nominalBankAccountCode: number = null;\r\n\r\n        if (this.model && this.model.nominalBankAccountCode) {\r\n            nominalBankAccountCode = this.model.nominalBankAccountCode;\r\n        }\r\n\r\n        if (this.cashTransactionId === CashSelectionType.ReceiptDifferentCurrency\r\n        ) {\r\n            if (this.paymentCurrency) {\r\n                this.getCounterpartyBankAccounts(this.counterpartyId, this.paymentCurrency, nominalBankAccountCode, false);\r\n            }\r\n        }\r\n        else {\r\n            this.getCounterpartyBankAccounts(this.counterpartyId, this.currencyValue, nominalBankAccountCode, false);\r\n        }\r\n    }\r\n\r\n    onNominalAccountSelected(accountNumber: string) {\r\n        const selectedNominalAccount = this.masterData.nominalAccounts.filter(\r\n            (nominalAccounts) => nominalAccounts.accountNumber === accountNumber,\r\n        );\r\n        if (selectedNominalAccount.length > 0) {\r\n            this.payerCtrl.patchValue(selectedNominalAccount[0].shortDescription,\r\n            );\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            counterpartyCtrl: this.counterpartyCtrl,\r\n            payerCtrl: this.payerCtrl,\r\n            clientBankCtrl: this.clientBankCtrl,\r\n            payeeCtrl: this.payeeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const cash = entity as CashRecord;\r\n\r\n        if (this.cashTransactionId === CashSelectionType.PaymentDifferentClient) {\r\n            const commonMethod = new CommonMethods();\r\n\r\n            cash.counterpartyCode = this.searchedCounterpartyCode;\r\n            if (this.counterpartyCtrl.value) {\r\n                cash.paymentCounterPartyCode = (this.counterpartyCtrl.value as Counterparty).counterpartyCode;\r\n            }\r\n            cash.matchingCounterpartyId =\r\n                commonMethod.getCounterpartyIdBasedOnCodeFromMasterData(this.searchedCounterpartyCode, this.masterData);\r\n            cash.paymentCounterPartyId =\r\n                commonMethod.getCounterpartyIdBasedOnCodeFromMasterData(cash.paymentCounterPartyCode, this.masterData);\r\n\r\n        } else {\r\n            if (this.counterpartyCtrl.value) {\r\n                cash.counterpartyCode = (this.counterpartyCtrl.value as Counterparty).counterpartyCode;\r\n            }\r\n        }\r\n        cash.payer = this.payerCtrl.value;\r\n        if (this.clientBankCtrl.value) {\r\n            cash.nominalBankAccountCode = this.clientBankCtrl.value;\r\n        }\r\n        cash.payee = this.payeeCtrl.value;\r\n\r\n        return cash;\r\n    }\r\n\r\n    getCounterpartyCode() {\r\n        if (this.counterpartyCtrl.value) {\r\n            const value = this.counterpartyCtrl.value as Counterparty;\r\n            return value.counterpartyCode;\r\n        }\r\n    }\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        this.model = entity;\r\n        this.cashTransactionId = this.model.cashTypeId;\r\n\r\n        let counterpartyCode = this.model.counterpartyCode;\r\n        if (this.model.paymentCounterPartyCode != null) {\r\n            // If the payment counterparty code is set, then this is the one to use for payment selection\r\n            // This situation occures only in \"diff client\" (otherwise, paymentCounterpartyCode is null)\r\n            counterpartyCode = this.model.paymentCounterPartyCode;\r\n        }\r\n        if (counterpartyCode != null) {\r\n            this.paymentCounterpartyCode = counterpartyCode;\r\n            const counterparty = this.masterData.counterparties.filter(\r\n                (item) => item.counterpartyCode === counterpartyCode,\r\n            );\r\n            if (counterparty.length > 0) {\r\n                this.counterpartyCtrl.patchValue(counterparty[0]);\r\n                this.counterpartyId = counterparty[0].counterpartyID;\r\n                this.onCounterpartyIdSelected(counterparty[0]);\r\n            }\r\n            this.payeeCtrl.patchValue(this.model.ownerName);\r\n\r\n        }\r\n\r\n        if (this.model) {\r\n\r\n            if (this.model.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n                this.model.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n                this.currencyValue = this.model.matchingCurrency;\r\n                this.paymentCurrency = this.model.currencyCode;\r\n            } else {\r\n                this.currencyValue = this.model.currencyCode;\r\n\r\n            }\r\n        }\r\n\r\n        if (this.model.nominalAccountCode) {\r\n            const nominalAccount = this.masterData.nominalAccounts.filter(\r\n                (item) => item.accountNumber === this.model.nominalAccountCode,\r\n            );\r\n\r\n            // bind nominal bank account code depending\r\n            if (this.model.nominalBankAccountCode) {\r\n\r\n                this.getCounterpartyBankAccounts(this.counterpartyId,\r\n                                                 this.model.currencyCode, this.model.nominalBankAccountCode, true);\r\n            }\r\n\r\n            this.payerCtrl.patchValue(this.model.ownerName);\r\n        }\r\n        if (this.model.nominalBankAccountCode) {\r\n            this.clientBankCtrl.patchValue(this.model.nominalBankAccountCode);\r\n            this.onClientBankEntered(this.model.nominalBankAccountCode, this.counterpartyId, this.model.currencyCode);\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        }\r\n        this.isEditable = isEdit;\r\n        return entity;\r\n    }\r\n\r\n    // this method is to bind counterparty list to dropdown ,\r\n    // 1. bind all counterparty for all kind of transaction except \"for picking by tr diff client\".\r\n    // 2. bind all counterparty except the counterparty selected in \"pick transaction\" step for \"for picking by tr diff client\".\r\n    filterCounterparties() {\r\n        this.searchedCounterpartyCode = this.counterpartyValue;\r\n        let counterpartyList: Counterparty[] = [];\r\n        if (this.cashTransactionId === CashSelectionType.PaymentDifferentClient) {\r\n            this.filteredCounterPartyList = this.masterData.counterparties.filter(\r\n                (item) => item.counterpartyCode !== this.counterpartyValue,\r\n            );\r\n        } else {\r\n            this.filteredCounterPartyList = this.masterData.counterparties;\r\n        }\r\n        counterpartyList = this.filteredCounterPartyList;\r\n        this.counterpartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                counterpartyList,\r\n                ['counterpartyCode', 'description'],\r\n            );\r\n            if (this.counterpartyCtrl.valid) {\r\n                this.onCounterpartyIdSelected(this.counterpartyCtrl.value);\r\n            }\r\n        });\r\n        // in Edit mode , bind the payable counterparty details\r\n\r\n        if (this.isEditable) {\r\n            const counterparty = counterpartyList.find((e) =>\r\n                e.counterpartyCode === this.paymentCounterpartyCode);\r\n\r\n            if (counterparty) {\r\n                this.onCounterpartyIdSelected(counterparty);\r\n            }\r\n        }\r\n    }\r\n    getCounterpartyBankAccounts(counterpartyId: number, currencyCode: string, nominalAccountId: number, isViewEdit: boolean) {\r\n        if (counterpartyId && currencyCode) {\r\n\r\n            this.masterdataService.getCounterPartyBankAccounts(counterpartyId, currencyCode)\r\n                .subscribe((data) => {\r\n                    if (data.value.length > 0) {\r\n                        this.counterPartyBankAccountsList = data.value;\r\n                        this.setBankAccountValidator();\r\n                        this.filteredCounterPartyBankAccounts =\r\n                            data.value.sort\r\n                                ((a, b) => (a.bankName > b.bankName) ? 1 : -1);\r\n                        this.savedCounterPartyBankAccounts = this.filteredCounterPartyBankAccounts;\r\n                        // bind values in view/edit mode\r\n                        if (this.model && this.model.nominalAccountCode) {\r\n                            const clientBankAccount = this.filteredCounterPartyBankAccounts\r\n                                .find((item) => item.bankAccountId === Number(nominalAccountId));\r\n                            if (clientBankAccount) {\r\n                                this.clientBankCtrl.patchValue(clientBankAccount.bankAccountId);\r\n                            }\r\n                            this.onClientBankEntered(nominalAccountId, counterpartyId, currencyCode);\r\n                        } else if (this.filteredCounterPartyBankAccounts && this.filteredCounterPartyBankAccounts.length > 0) {\r\n                            let defaultBankAccount;\r\n                            this.filteredCounterPartyBankAccounts.forEach((bankAccount) => {\r\n                                if (!defaultBankAccount && bankAccount.isBankAccountDefault) {\r\n                                    defaultBankAccount = bankAccount;\r\n                                }\r\n                            });\r\n                            if (defaultBankAccount) {\r\n                                this.clientBankCtrl.patchValue(defaultBankAccount.bankAccountId);\r\n                            }\r\n                            if (data.value && data.value.length > 0 && defaultBankAccount) {\r\n                                this.onClientBankEntered(data.value[0].bankAccountId, counterpartyId, currencyCode);\r\n                            }\r\n\r\n                        }\r\n                        this.showHintForNoClientBankAccount = false;\r\n                    } else {\r\n                        this.clientBankCtrl.patchValue(null);\r\n                        if (this.bankInformationComponent) {\r\n                            this.bankInformationComponent.resetClientBankInformation();\r\n                        }\r\n                        this.filteredCounterPartyBankAccounts = [];\r\n                        this.savedCounterPartyBankAccounts = [];\r\n                        this.showHintForNoClientBankAccount = true;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onclientBankSelected(value: number) {\r\n        if (this.savedCounterPartyBankAccounts) {\r\n            const clientBank = this.savedCounterPartyBankAccounts.find((a) =>\r\n                a.bankAccountId === value);\r\n\r\n            if (clientBank) {\r\n                this.onClientBankEntered(value, this.counterpartyId, this.currencyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    displayClientBank(value: any) {\r\n        if (this.savedCounterPartyBankAccounts && value) {\r\n            let clientBank;\r\n            if (typeof value === 'number') {\r\n                clientBank = this.savedCounterPartyBankAccounts.find((a) =>\r\n                    a.bankAccountId === value);\r\n            } else if (typeof value === 'string') {\r\n                if (value.indexOf('|') >= 0) {\r\n                    value = value.split('|')[0].trim();\r\n                    clientBank = this.savedCounterPartyBankAccounts.find((a) =>\r\n                        a.accountNo === value);\r\n                }\r\n            }\r\n\r\n            if (clientBank) {\r\n                return (clientBank.accountNo + ' | ' + clientBank.bankName);\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    onClientBankEntered(clientBankId: number, counterpartyId: number, currencyCode: string) {\r\n        if (!counterpartyId && !currencyCode) {\r\n            this.setClientBankInformation.emit();\r\n        } else {\r\n            if (this.bankInformationComponent) {\r\n                this.bankInformationComponent.setClientBankInformation(clientBankId, counterpartyId, currencyCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    onClientBankRemoval() {\r\n        if (!this.clientBankCtrl.value) {\r\n            if (this.bankInformationComponent) {\r\n                this.bankInformationComponent.resetClientBankInformation();\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Currency Information</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n            <atlas-dropdown-select fxFlex=\\\"30%\\\"\\r\\n                                   label=\\\"Bank Currency\\\"\\r\\n                                   [isEditable]=\\\"bankCurrencyCtrl.enabled\\\"\\r\\n                                   [fieldControl]=\\\"bankCurrencyCtrl\\\"\\r\\n                                   [options]=\\\"filteredCurrencyList\\\"\\r\\n                                   displayProperty=\\\"currencyCode\\\"\\r\\n                                   [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                   [errorMap]=\\\"bankCurrencyErrorMap\\\"\\r\\n                                   (optionSelected)=\\\"onBankCurrencyEntered($event)\\\"\\r\\n                                   isAutocompleteActivated=\\\"true\\\">\\r\\n            </atlas-dropdown-select>\\r\\n\\r\\n\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              label=\\\"FX Rate\\\"\\r\\n                              [fieldControl]=\\\"fxRateCtrl\\\"\\r\\n                              [isEditable]=\\\"fxRateCtrl.enabled\\\"\\r\\n                              (blur)=\\\"onFxRateEntered($event)\\\"\\r\\n                              [errorMap]=\\\"fxRateErrorMap\\\">\\r\\n            </atlas-form-input>\\r\\n\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              label=\\\"Amount\\\"\\r\\n                              [fieldControl]=\\\"amountCtrl\\\"\\r\\n                              [isEditable]=\\\"amountCtrl.enabled\\\"\\r\\n                              [textMask]=\\\"{mask:mask}\\\"\\r\\n                              (input)=\\\"onAmountValueEntered($event)\\\"\\r\\n                              [errorMap]=\\\"amountErrorMap\\\">\\r\\n            </atlas-form-input>\\r\\n\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-radio-group [formControl]=\\\"divideMultiplyCtrl\\\"\\r\\n                             (change)=\\\"onDivideMultiplyToggleChanges($event)\\\"\\r\\n                             [disabled]=\\\"true\\\">\\r\\n                <mat-radio-button value=\\\"D\\\"\\r\\n                                  [checked]=\\\"onDivideOptionSelected()\\\">Divide</mat-radio-button>\\r\\n                <mat-radio-button value=\\\"M\\\"\\r\\n                                  [checked]=\\\"onMultiplyOptionSelected()\\\">Multiply</mat-radio-button>\\r\\n            </mat-radio-group>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { isGreatherThanZero, isPositive } from '../../../../../shared/directives/number-validators.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { ConvertToNumber, CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { CashMatching } from '../../../../../shared/services/execution/dtos/cash-matching';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { CommonMethods } from '../../../../services/execution-cash-common-methods';\r\n\r\n@Component({\r\n    selector: 'atlas-currency-information-card',\r\n    templateUrl: './currency-information-card.component.html',\r\n    styleUrls: ['./currency-information-card.component.scss'],\r\n})\r\nexport class CurrencyInformationCardComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly roeTypeSelected = new EventEmitter<any>();\r\n    @Output() readonly fxRateEntered = new EventEmitter<any>();\r\n    @Output() readonly bankCurrencySelected = new EventEmitter<any>();\r\n    @Output() readonly amountSearchValue = new EventEmitter<any>();\r\n    bankCurrencyCtrl = new AtlasFormControl('Currency');\r\n    fxRateCtrl = new AtlasFormControl('FXRate');\r\n    divideMultiplyCtrl = new AtlasFormControl('Divide');\r\n    multiplyCtrl = new AtlasFormControl('Multiply');\r\n    amountCtrl = new AtlasFormControl('Amount');\r\n    fxRateValue: number;\r\n    bankCurrencyValue: string;\r\n    currencyChangeStatus: boolean;\r\n    filteredCurrencyList: Currency[];\r\n    masterData: MasterData;\r\n    cashTypeId: number;\r\n    company: string;\r\n    isFxRateValid: boolean = false;\r\n    currencyValue: string;\r\n    currencyRoeType: string;\r\n    finalFxRate: number;\r\n    roeType: string;\r\n    tolarence: number;\r\n    cashSelectionModel: CashMatching;\r\n    actualFxrateValue: number;\r\n    cashTransactionId: number;\r\n    currencyFrom: string;\r\n    currencyTo: string;\r\n\r\n    mask = CustomNumberMask(12, 10, false);\r\n    amount: number;\r\n    isEditable: boolean;\r\n\r\n    bankCurrencyErrorMap: Map<string, string> = new Map();\r\n    fxRateErrorMap: Map<string, string> = new Map();\r\n    amountErrorMap: Map<string, string> = new Map();\r\n    commonMethods: any;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        private snackbarService: SnackbarService,\r\n        private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n        this.bankCurrencyErrorMap.set('required', ' Required *');\r\n        this.fxRateErrorMap.set('required', ' Required *');\r\n        this.amountErrorMap.set('required', ' Required *')\r\n            .set('isPositiveError', 'Amount must be positive')\r\n            .set('isGreatherThanZeroError', 'Amount must be greater than zero');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.filterBankCurrencies();\r\n        this.isEditable = false;\r\n        this.commonMethods = new CommonMethods();\r\n    }\r\n\r\n    filterBankCurrencies() {\r\n        let bankCurrencyList: Currency[] = [];\r\n\r\n        if (this.currencyValue) {\r\n            this.filteredCurrencyList = this.masterData.currencies.filter(\r\n                (item) => item.currencyCode !== this.currencyValue,\r\n            );\r\n        } else {\r\n            this.filteredCurrencyList = this.masterData.currencies;\r\n        }\r\n\r\n        bankCurrencyList = this.filteredCurrencyList;\r\n        this.bankCurrencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                bankCurrencyList,\r\n                ['currencyCode', 'description'],\r\n            );\r\n            if (this.bankCurrencyCtrl.valid) {\r\n                this.onBankCurrencyEntered(this.bankCurrencyCtrl.value);\r\n            }\r\n        });\r\n    }\r\n    onBankCurrencyEntered(bankCurrency: Currency) {\r\n        this.bankCurrencyValue = bankCurrency.currencyCode;\r\n\r\n        if (this.currencyValue === bankCurrency.currencyCode) {\r\n            this.snackbarService.throwErrorSnackBar('Both the currencies cannot be USD');\r\n            this.bankCurrencyCtrl.reset();\r\n            this.fxRateCtrl.reset();\r\n        } else if (this.currencyValue !== 'USD' && bankCurrency.currencyCode !== 'USD') {\r\n            this.snackbarService.throwErrorSnackBar('One of the currency Must be USD');\r\n            this.bankCurrencyCtrl.reset();\r\n        } else {\r\n            this.currencyFrom = this.currencyValue;\r\n            this.currencyTo = (this.bankCurrencyCtrl.value as Currency).currencyCode;\r\n\r\n            if (!this.isEditable) {\r\n                this.executionService.getForeignExchangeRateByCurrency(this.currencyFrom, this.currencyTo).subscribe((data) => {\r\n                    if (data) {\r\n                        this.cashSelectionModel = data;\r\n\r\n                        this.fxRateCtrl.setValue(this.cashSelectionModel.rate);\r\n                        this.divideMultiplyCtrl.patchValue(this.cashSelectionModel.roeType);\r\n                        this.roeType = this.cashSelectionModel.roeType;\r\n                        this.actualFxrateValue = ConvertToNumber(this.fxRateCtrl.value);\r\n                        this.tolarence = this.fxRateCtrl.value * 0.1;\r\n                        this.bankCurrencySelected.emit({\r\n                            bankCurrency: this.bankCurrencyValue,\r\n                            initialFxRate: this.actualFxrateValue,\r\n                            initialRoeType: this.roeType,\r\n                        });\r\n                        this.isFxRateValid = ConvertToNumber(this.amountCtrl.value) > 0 ? true : false;\r\n                    } else {\r\n                        this.fxRateCtrl.reset();\r\n                        this.divideMultiplyCtrl.reset();\r\n                        this.amountCtrl.reset();\r\n                        this.snackbarService.throwErrorSnackBar('FX Rate details not available for these currencies.');\r\n                    }\r\n                });\r\n            }\r\n            // in edit mode, once all model data is binde to controls , than user can select different currency\r\n            // this can be done by changing flag value to false; which enable new service call for different ccy to select.\r\n            this.isEditable = false;\r\n        }\r\n    }\r\n\r\n    onDivideMultiplyToggleChanges(type) {\r\n        if (this.roeType === 'D') {\r\n            this.roeType = 'M';\r\n            this.roeTypeSelected.emit({ finalRoeType: this.roeType });\r\n        } else if (this.roeType === 'M') {\r\n            this.roeType = 'D';\r\n            this.roeTypeSelected.emit({ finalRoeType: this.roeType });\r\n        }\r\n    }\r\n    setValidators() {\r\n        this.bankCurrencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.fxRateCtrl.setValidators(\r\n            Validators.compose([Validators.required]));\r\n\r\n        this.amountCtrl.setValidators(\r\n            Validators.compose([isPositive(), Validators.required, isGreatherThanZero()]),\r\n        );\r\n    }\r\n    bindCurrencyValues() {\r\n        const currency = this.masterData.currencies.filter(\r\n            (item) => item.currencyCode === this.bankCurrencyValue,\r\n        );\r\n        this.formGroup.patchValue({\r\n            bankCurrencyCtrl: currency[0],\r\n            fxRateCtrl: this.fxRateValue,\r\n            amountCtrl: this.commonMethods.getFormattedNumberValue(this.amount),\r\n        });\r\n        this.bankCurrencyCtrl.disable();\r\n        this.fxRateCtrl.disable();\r\n        this.divideMultiplyCtrl.disable();\r\n        this.amountCtrl.disable();\r\n    }\r\n    onDivideOptionSelected() {\r\n        if (this.roeType === 'D') {\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    onMultiplyOptionSelected() {\r\n        if (this.roeType === 'M') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    onFxRateEntered(event) {\r\n        const tolerance = (this.actualFxrateValue * 0.1);\r\n        const minFxRate = this.actualFxrateValue - tolerance;\r\n        const maxFxRate = this.actualFxrateValue + tolerance;\r\n        const updatedFxRate = this.fxRateCtrl.value;\r\n        this.isFxRateValid = (this.fxRateCtrl.value !== '' && this.fxRateCtrl.value > 0)\r\n            ? true : false;\r\n\r\n        if ((updatedFxRate > maxFxRate) || (updatedFxRate < minFxRate)) {\r\n            this.isFxRateValid = false;\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'FX Rate difference should be within 10% threshold.',\r\n            );\r\n        } else {\r\n            this.isFxRateValid = true;\r\n        }\r\n        this.finalFxRate = this.fxRateCtrl.value;\r\n        this.fxRateEntered.emit({ finalFxRate: this.finalFxRate });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            bankCurrencyCtrl: this.bankCurrencyCtrl,\r\n            fxRateCtrl: this.fxRateCtrl,\r\n            divideMultiplyCtrl: this.divideMultiplyCtrl,\r\n            amountCtrl: this.amountCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: CashRecord): CashRecord {\r\n        if (entity.childCashTypeId === CashSelectionType.ReceiptDifferentCurrency\r\n            || entity.childCashTypeId === CashSelectionType.PaymentDifferentCurrency) {\r\n            entity.currencyCode = (this.bankCurrencyCtrl.value as Currency).currencyCode;\r\n            entity.matchingRate = this.fxRateCtrl.value;\r\n            entity.matchingRateType = this.divideMultiplyCtrl.value;\r\n            entity.amount = this.amountCtrl.value;\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        if (entity.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n            entity.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n            this.currencyValue = entity.matchingCurrency;\r\n            this.filterBankCurrencies();\r\n            this.bankCurrencyCtrl.patchValue(entity.currencyCode);\r\n            this.fxRateCtrl.patchValue(entity.matchingRate);\r\n            this.divideMultiplyCtrl.patchValue(entity.matchingRateType);\r\n            this.amountCtrl.patchValue(this.commonMethods.getFormattedNumberValue(entity.amount));\r\n            this.bankCurrencySelected.emit({\r\n                bankCurrency: entity.currencyCode,\r\n                initialFxRate: entity.matchingRate,\r\n                initialRoeType: entity.matchingRateType,\r\n            });\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        }\r\n        // this is used to avoid service call while in display/edit mode\r\n        this.isEditable = true;\r\n        return entity;\r\n    }\r\n\r\n    onAmountValueEntered(amount) {\r\n        if (this.amountCtrl.value) {\r\n            this.amount = ConvertToNumber(this.amountCtrl.value);\r\n            if (this.amount === 0) {\r\n                this.amountCtrl.patchValue('');\r\n            }\r\n            this.isFxRateValid = this.amount > 0 ? true : false;\r\n            this.amountSearchValue.emit({ amount: this.amount });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card fxFlex=\\\"100\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Document Information</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n                <atlas-date-picker fxFlex=\\\"40%\\\"\\r\\n                                   [errorMap]=\\\"docDateErrorMap\\\"\\r\\n                                   label=\\\"Document date\\\"\\r\\n                                   [fieldControl]=\\\"docDateCtrl\\\"\\r\\n                                   [isEditable]=\\\"docDateCtrl.enabled\\\">\\r\\n                </atlas-date-picker>\\r\\n\\r\\n                <atlas-date-picker fxFlex=\\\"40%\\\"\\r\\n                                   [errorMap]=\\\"valueDateErrorMap\\\"\\r\\n                                   label=\\\"Value date\\\"\\r\\n                                   [fieldControl]=\\\"valueDateCtrl\\\"\\r\\n                                   [isEditable]=\\\"valueDateCtrl.enabled\\\"></atlas-date-picker>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <atlas-dropdown-select fxFlex=\\\"40%\\\"\\r\\n                                       [isEditable]=\\\"currencyCtrl.enabled\\\"\\r\\n                                       label=\\\"Currency\\\"\\r\\n                                       [fieldControl]=\\\"currencyCtrl\\\"\\r\\n                                       [options]=\\\"filteredCurrencyList\\\"\\r\\n                                       displayProperty=\\\"currencyCode\\\"\\r\\n                                       [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\"\\r\\n                                       (optionSelected)=\\\"onCurrencyValueEntered($event)\\\"\\r\\n                                       [errorMap]=\\\"currencyErrorMap\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <atlas-form-input *ngIf=\\\"isDiffCurrency\\\"\\r\\n                                  fxFlex=\\\"40%\\\"\\r\\n                                  [fieldControl]=\\\"amountOriginalCurrencyCtrl\\\"\\r\\n                                  label=\\\"Amount\\\"\\r\\n                                  [textMask]=\\\"{mask:mask}\\\"\\r\\n                                  [errorMap]=\\\"amountErrorMap\\\">\\r\\n                </atlas-form-input>\\r\\n                <atlas-form-input *ngIf=\\\"!isDiffCurrency\\\"\\r\\n                                  fxFlex=\\\"40%\\\"\\r\\n                                  [isEditable]=\\\"amountCtrl.enabled\\\"\\r\\n                                  [fieldControl]=\\\"amountCtrl\\\"\\r\\n                                  label=\\\"Amount\\\"\\r\\n                                  [textMask]=\\\"{mask:mask}\\\"\\r\\n                                  [errorMap]=\\\"amountErrorMap\\\"\\r\\n                                  (blur)=\\\"onAmountValueEntered()\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"40%\\\"\\r\\n                                       [isEditable]=\\\"nominalAccountCtrl.enabled\\\"\\r\\n                                       label=\\\"Nom. Account\\\"\\r\\n                                       [fieldControl]=\\\"nominalAccountCtrl\\\"\\r\\n                                       [options]=\\\"filteredNominalAccountList\\\"\\r\\n                                       displayProperty=\\\"accountNumber\\\"\\r\\n                                       [selectProperties]=\\\"['nominalAccountNumberFormated', 'detailedDescription']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\"\\r\\n                                       [errorMap]=\\\"nomAccountErrorMap\\\"\\r\\n                                       (optionSelected)=\\\"getDescriptionOfAccount($event)\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n\\r\\n                <atlas-form-input fxFlex=\\\"40%\\\"\\r\\n                                  [isEditable]=\\\"accountDescriptionCtrl.enabled\\\"\\r\\n                                  [fieldControl]=\\\"accountDescriptionCtrl\\\"\\r\\n                                  label=\\\"Bank Account description\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"40%\\\"\\r\\n                                       [isEditable]=\\\"departmentCodeCtrl.enabled\\\"\\r\\n                                       label=\\\"Department\\\"\\r\\n                                       [fieldControl]=\\\"departmentCodeCtrl\\\"\\r\\n                                       [options]=\\\"filteredDepartments\\\"\\r\\n                                       displayProperty=\\\"departmentCode\\\"\\r\\n                                       [selectProperties]=\\\"['departmentCode', 'description']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\"\\r\\n                                       [errorMap]=\\\"departementErrorMap\\\"\\r\\n                                       (optionSelected)=\\\"onDepartmentValueEntered($event)\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <atlas-form-input fxFlex=\\\"40%\\\"\\r\\n                                  [isEditable]=\\\"docRefCtrl.enabled\\\"\\r\\n                                  [fieldControl]=\\\"docRefCtrl\\\"\\r\\n                                  label=\\\"2nd Document Reference\\\"\\r\\n                                  [errorMap]=\\\"docRefErrorMap\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"40%\\\"\\r\\n                                       [isEditable]=\\\"costTypeCtrl.enabled\\\"\\r\\n                                       label=\\\"Cost Type\\\"\\r\\n                                       [fieldControl]=\\\"costTypeCtrl\\\"\\r\\n                                       [options]=\\\"filteredCostTypes\\\"\\r\\n                                       displayProperty=\\\"costTypeCode\\\"\\r\\n                                       [selectProperties]=\\\"['costTypeCode', 'name']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\"\\r\\n                                       [errorMap]=\\\"costTypeErrorMap\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <div fxFlex=\\\"45%\\\"\\r\\n                     class=\\\"custom-form\\\">\\r\\n                    <atlas-masterdata-user-preferences-input fxFlex=\\\"90%\\\"\\r\\n                                                             [isEditable]=\\\"charterCtrl.enabled\\\"\\r\\n                                                             [fieldControl]=\\\"charterCtrl\\\"\\r\\n                                                             [options]=\\\"filteredCharters\\\"\\r\\n                                                             label=\\\"Charters\\\"\\r\\n                                                             displayProperty=\\\"charterCode\\\"\\r\\n                                                             [selectProperties]=\\\"['charterCode','description']\\\"\\r\\n                                                             [errorMap]=\\\"charterErrorMap\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for charters\\\"\\r\\n                                                             gridId=\\\"charterGrid\\\"\\r\\n                                                             (optionSelected)=\\\"onCharterSelected($event)\\\">\\r\\n\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \":host ::ng-deep .mat-form-field-infix {\\n  margin-top: 10px; }\\n\"","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { isGreatherThanZero, isPositive } from '../../../../../shared/directives/number-validators.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { BankAccount } from '../../../../../shared/entities/bank-account.entity';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { CostType } from '../../../../../shared/entities/cost-type.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../../shared/entities/nominal-account.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { CharterDisplayView } from '../../../../../shared/models/charter-display-view';\r\nimport { ConvertToNumber, CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { CharterDataLoader } from '../../../../../shared/services/execution/charter-data-loader';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { CashSetup } from '../../../../../shared/services/execution/dtos/cash-setup';\r\nimport { InvoiceForCashMatching } from '../../../../../shared/services/execution/dtos/invoice-for-cash';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { isGreaterThanNinetyDays } from '../../../../../shared/validators/date-validators.validator';\r\nimport { dateAfter } from '../../../../../trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-date-validator.validator';\r\nimport { CommonMethods } from '../../../../services/execution-cash-common-methods';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-document-information',\r\n    templateUrl: './document-information.component.html',\r\n    styleUrls: ['./document-information.component.scss'],\r\n    providers: [CharterDataLoader],\r\n})\r\nexport class DocumentInformationFormComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Input() isSummary = false;\r\n    @Output() readonly currencySelected = new EventEmitter<any>();\r\n    @Output() readonly currencySearchValue = new EventEmitter<any>();\r\n    @Output() readonly departmentSearchValue = new EventEmitter<any>();\r\n    @Output() readonly amountSearchValue = new EventEmitter<any>();\r\n    @Output() readonly currencyChangeValue = new EventEmitter<any>();\r\n    currencyCtrl = new AtlasFormControl('Currency');\r\n    amountCtrl = new AtlasFormControl('Amount');\r\n    amountOriginalCurrencyCtrl = new AtlasFormControl('AmountOriginalCurrency');\r\n    departmentCodeCtrl = new AtlasFormControl('Department');\r\n    docRefCtrl = new AtlasFormControl('DocumentReference');\r\n    bankCtrl = new AtlasFormControl('Bank');\r\n    docDateCtrl = new AtlasFormControl('DocumentDate');\r\n    valueDateCtrl = new AtlasFormControl('ValueDate');\r\n    costTypeCtrl = new AtlasFormControl('costType');\r\n    charterCtrl = new AtlasFormControl('charter');\r\n    nominalAccountCtrl = new AtlasFormControl('NominalAccount');\r\n    accountDescriptionCtrl = new AtlasFormControl('AccountDescription');\r\n    filteredNominalAccountList: NominalAccount[];\r\n    nominalAccountListWithOnlyBankAccount: NominalAccount[];\r\n    filteredCurrencyList: Currency[];\r\n    filteredDepartments: Department[];\r\n    filteredCostTypes: CostType[];\r\n    company: string;\r\n    charters: Charter[];\r\n    filteredCharters: Charter[];\r\n    cashSetupModel: CashSetup = new CashSetup();\r\n    currencyValue: string;\r\n    currencyRoeType: string;\r\n    departmentValue: number;\r\n    amountValue: number;\r\n    amountOriginalCurrency: number;\r\n    cashAmountValue: number;\r\n    cashTypeId: number;\r\n    private documentInfoDefaultSubscription: Subscription;\r\n    documentMatchingModel: InvoiceForCashMatching;\r\n    numberOfDays: number;\r\n    selectionValue: number;\r\n    currencyChangeStatus: boolean;\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Currencies,\r\n        MasterDataProps.Departments,\r\n        MasterDataProps.CostTypes,\r\n    ];\r\n    mask = CustomNumberMask(12, 10, false);\r\n\r\n    model: CashRecord;\r\n\r\n    filteredbankAccountList: BankAccount[];\r\n    cashTransactionId: number;\r\n    isDiffCurrency: boolean = false;\r\n    filteredCharterList: Charter[];\r\n    charterErrorMap: Map<string, string> = new Map();\r\n    docDateErrorMap: Map<string, string> = new Map();\r\n    valueDateErrorMap: Map<string, string> = new Map();\r\n    amountErrorMap: Map<string, string> = new Map();\r\n    nomAccountErrorMap: Map<string, string> = new Map();\r\n    docRefErrorMap: Map<string, string> = new Map();\r\n    currencyErrorMap: Map<string, string> = new Map();\r\n    departementErrorMap: Map<string, string> = new Map();\r\n    costTypeErrorMap: Map<string, string> = new Map();\r\n    paymentCurrency: string;\r\n    commonMethods: any;\r\n    isEdit: boolean = false;\r\n\r\n    // Enums used in html\r\n    CashType = CashType;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected executionService: ExecutionService,\r\n        protected companyManager: CompanyManagerService,\r\n        public charterDataLoader: CharterDataLoader,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n        this.docDateErrorMap\r\n            .set('required', 'Required *');\r\n        this.valueDateErrorMap\r\n            .set('required', 'Required *')\r\n            .set('isBeforeDate', 'Cannot be before Document date')\r\n            .set('isGreaterThanNinetyDays', ' Value Date should not be more than 90 days from Document date');\r\n        this.amountErrorMap\r\n            .set('required', 'Required *')\r\n            .set('isPositiveError', 'Amount must be positive')\r\n            .set('isGreatherThanZeroError', 'Amount must be greater than zero');\r\n        this.nomAccountErrorMap\r\n            .set('required', 'Required *');\r\n        this.docRefErrorMap\r\n            .set('maxlength', ' 2nd Document Reference should be at most 20 Characters long');\r\n        this.currencyErrorMap\r\n            .set('required', 'Required *')\r\n            .set('inDropdownList', ' Value not in list');\r\n        this.departementErrorMap\r\n            .set('required', 'Required *')\r\n            .set('inDropdownList', ' Value not in list');\r\n        this.costTypeErrorMap\r\n            .set('required', 'Required *')\r\n            .set('inDropdownList', ' Value not in list');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isDiffCurrency = false;\r\n        this.amountOriginalCurrencyCtrl.disable();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredDepartments = this.masterData.departments;\r\n        this.departmentCodeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartments = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.departments,\r\n                ['departmentCode', 'description'],\r\n            );\r\n        });\r\n\r\n        const selectedCostTypes = this.masterData.costTypes.filter(\r\n            (costTypes) => costTypes.isACashCost === true,\r\n        );\r\n        this.filteredCostTypes = selectedCostTypes;\r\n        this.costTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCostTypes = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.costTypes.filter(\r\n                    (costTypes) => costTypes.isACashCost === true,\r\n                ),\r\n                ['costTypeCode', 'name'],\r\n            );\r\n        });\r\n        this.populateCharterList();\r\n        if (this.route.snapshot.url.length > 1 &&\r\n            (this.route.snapshot.url[1].path.toString() !== 'edit'\r\n                && this.route.snapshot.url[1].path.toString() !== 'display')) {\r\n            this.documentInfoDefaultSubscription = this.executionService.getCashSetupDetails()\r\n                .subscribe((data: CashSetup) => {\r\n                    if (data) {\r\n                        this.cashSetupModel = data;\r\n                        const selectedCurrency = this.masterData.currencies.filter(\r\n                            (currency) => currency.currencyCode === this.cashSetupModel.currencyCode,\r\n                        );\r\n                        if (selectedCurrency.length > 0) {\r\n                            this.currencyRoeType = selectedCurrency[0].roeType;\r\n                            this.currencyCtrl.patchValue(selectedCurrency[0].currencyCode);\r\n\r\n                            this.currencySelected.emit(selectedCurrency[0].currencyCode);\r\n                            this.currencySearchValue.emit({\r\n                                currency: selectedCurrency[0].currencyCode,\r\n                                currencyRoeType: this.currencyRoeType,\r\n                            });\r\n                        }\r\n\r\n                        const selectedCostType = selectedCostTypes.filter(\r\n                            (costType) => costType.costTypeCode === ((this.cashTypeId === CashType.CashPayment) ?\r\n                                this.cashSetupModel.paymentCostTypeCode : this.cashSetupModel.receiptCostTypeCode),\r\n                        );\r\n                        this.costTypeCtrl.patchValue(selectedCostType[0].costTypeCode);\r\n\r\n                        const nominalAccount = this.masterData.nominalAccounts.filter(\r\n                            (e) => e.nominalAccountId === this.cashSetupModel.nominalAccountId && e.bankAccount === true);\r\n\r\n                        if (nominalAccount.length > 0) {\r\n                            this.nominalAccountCtrl.patchValue(nominalAccount[0].nominalAccountNumberFormated);\r\n                            this.accountDescriptionCtrl.patchValue(nominalAccount[0].detailedDescription);\r\n                        }\r\n                    }\r\n                });\r\n            this.isEdit = true;\r\n        }\r\n        this.nominalAccountListWithOnlyBankAccount = this.masterData.nominalAccounts.filter((a) => a.bankAccount === true);\r\n        this.filteredNominalAccountList = this.nominalAccountListWithOnlyBankAccount;\r\n        this.nominalAccountCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredNominalAccountList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.nominalAccountListWithOnlyBankAccount,\r\n                ['accountNumber', 'nominalAccountNumberFormated', 'detailedDescription'],\r\n            );\r\n        });\r\n\r\n        this.docDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.commonMethods = new CommonMethods();\r\n        this.bindConfiguration();\r\n    }\r\n\r\n    bindDocumentValues() {\r\n        const selectedCurrency = this.masterData.currencies.filter(\r\n            (currency) => currency.currencyCode === this.currencyValue,\r\n        );\r\n        this.formGroup.patchValue({\r\n            currencyCtrl: (selectedCurrency.length > 0) ? selectedCurrency[0].currencyCode : null,\r\n            amountCtrl: this.commonMethods.getFormattedNumberValue(this.amountValue),\r\n        });\r\n        // This control is not part of the formControl, it's only informative\r\n        this.amountOriginalCurrencyCtrl.patchValue(this.commonMethods.getFormattedNumberValue(this.amountOriginalCurrency));\r\n        this.currencyCtrl.disable();\r\n        this.amountCtrl.disable();\r\n    }\r\n\r\n    filterCurrencies() {\r\n        let currencyList: Currency[] = [];\r\n        this.filteredCurrencyList = this.masterData.currencies;\r\n        currencyList = this.filteredCurrencyList;\r\n        this.currencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                currencyList,\r\n                ['currencyCode', 'description'],\r\n            );\r\n        });\r\n    }\r\n\r\n    setValidators() {\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.departmentCodeCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.departmentCodeCtrl.setValidators(Validators.compose([Validators.required]));\r\n\r\n        this.charterCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.charters,\r\n                    nameof<CharterDisplayView>('charterCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.costTypeCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.costTypes,\r\n                    nameof<CostType>('costTypeCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.nominalAccountCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.nominalAccountListWithOnlyBankAccount,\r\n                    nameof<NominalAccount>('nominalAccountNumberFormated'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.costTypeCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.amountCtrl.setValidators(\r\n            Validators.compose([isPositive(), Validators.required, isGreatherThanZero()]),\r\n        );\r\n\r\n        this.docRefCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(20)]),\r\n        );\r\n\r\n        this.docDateCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.valueDateCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.nominalAccountCtrl.setValidators(\r\n            Validators.compose([Validators.required]));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.documentInfoDefaultSubscription) {\r\n            this.documentInfoDefaultSubscription.unsubscribe();\r\n        }\r\n    }\r\n    onCurrencyValueEntered(selectedCurrency: Currency) {\r\n        this.currencySearchValue.emit({\r\n            currency: selectedCurrency.currencyCode,\r\n            currencyRoeType: selectedCurrency.roeType,\r\n        });\r\n        this.currencyChangeStatus = true;\r\n        this.currencyChangeValue.emit({\r\n            currencyStatus: this.currencyChangeStatus,\r\n            currency: selectedCurrency.currencyCode,\r\n        });\r\n    }\r\n\r\n    onAmountValueEntered() {\r\n        this.amountValue = ConvertToNumber(this.amountCtrl.value);\r\n        this.cashAmountValue = ConvertToNumber(this.amountCtrl.value);\r\n\r\n        if (this.amountValue === 0) {\r\n            this.amountCtrl.patchValue('');\r\n        }\r\n        this.amountSearchValue.emit({ amount: this.amountValue });\r\n    }\r\n\r\n    onDepartmentValueEntered(departmentValue) {\r\n        this.departmentValue = this.departmentCodeCtrl.value;\r\n        this.departmentSearchValue.emit({ department: this.departmentValue });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group(\r\n            {\r\n                currencyCtrl: this.currencyCtrl,\r\n                amountCtrl: this.amountCtrl,\r\n                departmentCodeCtrl: this.departmentCodeCtrl,\r\n                bankCtrl: this.bankCtrl,\r\n                docRefCtrl: this.docRefCtrl,\r\n                docDateCtrl: this.docDateCtrl,\r\n                valueDateCtrl: this.valueDateCtrl,\r\n                charterCtrl: this.charterCtrl,\r\n                costTypeCtrl: this.costTypeCtrl,\r\n                nominalAccountCtrl: this.nominalAccountCtrl,\r\n                accountDescriptionCtrl: this.accountDescriptionCtrl,\r\n            },\r\n            {\r\n                validator: Validators.compose([\r\n                    dateAfter('valueDateCtrl', 'docDateCtrl'),\r\n                    isGreaterThanNinetyDays('docDateCtrl', 'valueDateCtrl'),\r\n                ]),\r\n            },\r\n        );\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const docInformation = entity as CashRecord;\r\n        if (docInformation.childCashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n            docInformation.childCashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n            docInformation.matchingCurrency = this.currencyCtrl.value;\r\n        } else {\r\n            docInformation.currencyCode = this.currencyCtrl.value;\r\n        }\r\n\r\n        docInformation.amount = this.amountCtrl.value;\r\n        const department = this.getDepartmentDetail(this.masterData, (this.departmentCodeCtrl.value as Department).departmentId, true);\r\n\r\n        if (department && department.length > 0) {\r\n            docInformation.departmentId = department[0].departmentId;\r\n        }\r\n        docInformation.counterpartyDocumentReference = this.docRefCtrl.value;\r\n        docInformation.clientBankAccount = this.bankCtrl.value;\r\n        docInformation.documentDate = this.docDateCtrl.value;\r\n        docInformation.valueDate = this.valueDateCtrl.value;\r\n        docInformation.charterId = this.getCharterId(this.charterCtrl.value);\r\n        docInformation.costTypeCode = this.costTypeCtrl.value;\r\n        docInformation.charterReference = (this.charterCtrl.value as Charter).charterCode;\r\n        docInformation.bankAccountCode = this.bankCtrl.value;\r\n        const nominalDetail = this.getNominalAccountDetails(this.nominalAccountCtrl.value, false);\r\n        if (nominalDetail) {\r\n            docInformation.nominalAccountCode = nominalDetail.accountNumber;\r\n        }\r\n        return docInformation;\r\n    }\r\n\r\n    getCharterId(value: Charter) {\r\n        const commonMethod = new CommonMethods();\r\n        if (value) {\r\n            if (this.charters && this.charters.length > 0) {\r\n                return commonMethod.getCharterIdFromCharterList(value.charterCode, this.charters);\r\n            } else {\r\n                this.charterDataLoader.getData().subscribe((charter) => {\r\n                    this.charters = charter;\r\n                    return commonMethod.getCharterIdFromCharterList(value.charterCode, this.charters);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        this.model = entity;\r\n        this.cashTransactionId = entity.cashTypeId;\r\n        this.filterCurrencies();\r\n        this.isEdit = isEdit;\r\n        if (this.model.valueDate) {\r\n            this.valueDateCtrl.setValue(this.model.valueDate);\r\n        }\r\n        if (this.model.documentDate) {\r\n            this.docDateCtrl.setValue(this.model.documentDate);\r\n        }\r\n        this.amountCtrl.setValue(this.commonMethods.getFormattedNumberValue(this.model.amount));\r\n        this.amountOriginalCurrencyCtrl.patchValue(this.commonMethods.getFormattedNumberValue(this.model.matchingAmount));\r\n\r\n        this.cashAmountValue = this.amountCtrl.value;\r\n\r\n        let selectedCurrency: Currency;\r\n        if (this.model.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.model.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n            selectedCurrency = this.masterData.currencies.find(\r\n                (currency) => currency.currencyCode === this.model.matchingCurrency);\r\n        } else {\r\n            selectedCurrency = this.masterData.currencies.find(\r\n                (currency) => currency.currencyCode === this.model.currencyCode);\r\n        }\r\n\r\n        this.currencyCtrl.setValue(selectedCurrency.currencyCode);\r\n        this.bankCtrl.patchValue(this.model.bankAccountCode);\r\n        const department = this.getDepartmentDetail(this.masterData, this.model.departmentId, true);\r\n\r\n        if (department && department.length > 0) {\r\n            this.departmentCodeCtrl.patchValue(department[0].departmentCode);\r\n        }\r\n\r\n        this.docRefCtrl.setValue(this.model.counterpartyDocumentReference);\r\n        if (this.model.charterId) {\r\n            if (!this.charters) {\r\n                this.charterDataLoader.getData().subscribe((charter) => {\r\n                    this.charters = charter;\r\n                    if (this.charters) {\r\n                        this.populateCharter(this.model.charterId);\r\n                    }\r\n                });\r\n            } else {\r\n                this.populateCharter(this.model.charterId);\r\n            }\r\n        }\r\n        if (this.model.nominalAccountCode) {\r\n            const nominalCode = this.getNominalAccountDetails(this.model.nominalAccountCode, true);\r\n            if (nominalCode) {\r\n                this.nominalAccountCtrl.patchValue(nominalCode.nominalAccountNumberFormated);\r\n                this.accountDescriptionCtrl.patchValue(nominalCode.detailedDescription);\r\n            }\r\n        }\r\n\r\n        let costType: CostType;\r\n        if (this.model.costTypeCode) {\r\n            costType = this.masterData.costTypes.find(\r\n                (cost) => cost.costTypeCode === this.model.costTypeCode);\r\n        }\r\n        this.costTypeCtrl.setValue(costType);\r\n\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        }\r\n        // hide amount field for receipt diff ccy\r\n        this.isDiffCurrency = (this.model.cashTypeId === CashSelectionType.ReceiptDifferentCurrency\r\n            || this.model.cashTypeId === CashSelectionType.PaymentDifferentCurrency)\r\n            ? true : false;\r\n\r\n        return entity;\r\n    }\r\n\r\n    populateCharter(charterId: number) {\r\n        const filteredCharters = this.charters.filter((item) => item.charterId === charterId);\r\n        if (filteredCharters.length > 0) {\r\n            this.charterCtrl.patchValue(\r\n                filteredCharters[0]);\r\n        }\r\n    }\r\n\r\n    bindSelectedTransactionValue(value: number) {\r\n        this.cashTransactionId = value;\r\n        return value;\r\n    }\r\n\r\n    getDepartmentDetail(masterData: MasterData, value: any, filterOnId: boolean) {\r\n        const department = masterData.departments.filter((item) =>\r\n            filterOnId ? item.departmentId === value : item.departmentCode === value);\r\n\r\n        if (department.length > 0) {\r\n            return department;\r\n        }\r\n    }\r\n\r\n    getNominalAccountDetails(code: any, fetchFromAccountCode: boolean): NominalAccount {\r\n        if (code) {\r\n            const nominalCode = this.nominalAccountListWithOnlyBankAccount.find(\r\n                (e) =>\r\n                    (fetchFromAccountCode ? e.accountNumber === code\r\n\r\n                        : e.nominalAccountNumberFormated === code.toString()),\r\n            );\r\n            if (nominalCode) {\r\n                return nominalCode;\r\n            }\r\n        }\r\n    }\r\n\r\n    onDepartmentCodeSelected(departmentCode: string) {\r\n        const selectedDepartments = this.masterData.departments.filter(\r\n            (department) => department.departmentCode === departmentCode,\r\n        );\r\n        if (selectedDepartments.length > 0) {\r\n            this.departmentValue = selectedDepartments[0].departmentId;\r\n        }\r\n    }\r\n    getDescriptionOfAccount(value: NominalAccount) {\r\n        const accountDetails = this.masterData.nominalAccounts.find(\r\n            (item) => item.accountNumber === value.accountNumber,\r\n        );\r\n        if (accountDetails) {\r\n            this.nominalAccountCtrl.patchValue(accountDetails.nominalAccountNumberFormated);\r\n            this.accountDescriptionCtrl.patchValue(accountDetails.detailedDescription);\r\n        }\r\n    }\r\n\r\n    onCharterSelected(charter: Charter) {\r\n    }\r\n\r\n    // populate charterlist to charter contexual search\r\n    populateCharterList() {\r\n\r\n        if (this.filteredCharters && this.filteredCharters.length > 0) {\r\n            this.bindCharterControl();\r\n        } else {\r\n            this.charterDataLoader.getData().subscribe((charter) => {\r\n                this.charters = charter.sort\r\n                    ((a, b) => (a.charterCode > b.charterCode) ? 1 : -1);\r\n                this.filteredCharters = this.charters;\r\n                this.bindCharterControl();\r\n            });\r\n        }\r\n    }\r\n\r\n    bindCharterControl() {\r\n        this.charterCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.charters,\r\n                ['charterCode', 'description'],\r\n            );\r\n        });\r\n        if (this.charterCtrl.valid) {\r\n            this.onCharterSelected(\r\n                this.charterCtrl.value,\r\n            );\r\n        }\r\n        this.setValidators();\r\n    }\r\n\r\n    // Emit the selected currency in pick trxn screen for cash Payment.\r\n    // to filter client bank account based on selected currecny and counterparty.\r\n    // in counterprty information component\r\n    currencyValueChangeInPickTransactionScreen() {\r\n        this.currencyChangeStatus = true;\r\n        this.currencyChangeValue.emit({\r\n            currencyStatus: this.currencyChangeStatus,\r\n            currency: this.currencyValue,\r\n            paymentCurrency: this.paymentCurrency,\r\n        });\r\n    }\r\n\r\n    bindDepartmentControl(departmentId: number) {\r\n        const department = this.getDepartmentDetail(this.masterData, departmentId, true);\r\n\r\n        if (department && department.length > 0) {\r\n            this.departmentCodeCtrl.patchValue(department[0]);\r\n        }\r\n    }\r\n\r\n    setDocAmountForCashReceiptDiffCurrency(amount) {\r\n        this.amountOriginalCurrency = amount;\r\n        this.amountOriginalCurrencyCtrl.patchValue(this.commonMethods.getFormattedNumberValue(this.amountOriginalCurrency));\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Payment Order Document</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-select placeholder=\\\"Template\\\"\\r\\n                            [formControl]=\\\"templatesCtrl\\\"\\r\\n                            (selectionChange)=\\\"onTemplateSelected()\\\"\\r\\n                            matTooltip=\\\"Template\\\">\\r\\n                    <mat-option></mat-option>\\r\\n                    <mat-option *ngFor=\\\"let template of filteredTemplates\\\"\\r\\n                                [value]=\\\"template\\\">\\r\\n                        {{template.name}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n                <mat-hint>Select a template if you want to generate a physical document</mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { BaseFormComponent } from './../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from './../../../../../shared/entities/atlas-form-control';\r\nimport { PhysicalDocumentTemplate } from './../../../../../shared/entities/document-template.entity';\r\nimport { DocumentTypes } from './../../../../../shared/enums/document-type.enum';\r\nimport { FormConfigurationProviderService } from './../../../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from './../../../../../shared/services/http-services/document.service';\r\nimport { UtilService } from './../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-payment-order-template-selection-card',\r\n    templateUrl: './payment-order-template-selection-card.component.html',\r\n    styleUrls: ['./payment-order-template-selection-card.component.scss'],\r\n})\r\nexport class PaymentOrderTemplateSelectionCardComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    templatesCtrl = new AtlasFormControl('templateCtrl');\r\n\r\n    filteredTemplates: PhysicalDocumentTemplate[] = [];\r\n\r\n    @Output() readonly templateSelected = new EventEmitter<boolean>();\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected documentService: DocumentService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    mapCashDocumentType(cashSelectionType: CashSelectionType): DocumentTypes {\r\n        switch (cashSelectionType) {\r\n            case CashSelectionType.SimpleCashPayment:\r\n            case CashSelectionType.SimpleCashReceipt:\r\n                return DocumentTypes.CashSimpleCash;\r\n            case CashSelectionType.PaymentDifferentClient:\r\n                return DocumentTypes.CashDifferentClient;\r\n            case CashSelectionType.PaymentDifferentCurrency:\r\n            case CashSelectionType.ReceiptDifferentCurrency:\r\n                return DocumentTypes.CashDifferentCurrency;\r\n            case CashSelectionType.PaymentFullPartialTransaction:\r\n            case CashSelectionType.ReceiptFullPartialTransaction:\r\n                return DocumentTypes.CashPickByTransaction;\r\n            default:\r\n                console.error('Invalid cash selection type: %s', cashSelectionType);\r\n                break;\r\n        }\r\n    }\r\n\r\n    SetCashType(cashTypeId: number): any {\r\n        const documentType = this.mapCashDocumentType(cashTypeId);\r\n        this.subscriptions.push(this.documentService.getTemplates(documentType).subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n            this.templatesCtrl.valueChanges.subscribe((input) => {\r\n                this.filteredTemplates =\r\n                    this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.filteredTemplates,\r\n                        ['documentTemplateId', 'name']);\r\n            });\r\n        }));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceTemplatesCtrl: this.templatesCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onTemplateSelected() {\r\n        this.templateSelected.emit(this.templatesCtrl.value ? true : false);\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        entity.template = this.templatesCtrl.value ? (this.templatesCtrl.value as PhysicalDocumentTemplate).path : null;\r\n        return entity;\r\n    }\r\n\r\n}\r\n","module.exports = \"<h1 mat-dialog-title\\r\\n    style=\\\"text-transform: uppercase;\\\">{{dialogData.title}}</h1>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <p>{{dialogData.text}}</p>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between end\\\">\\r\\n    <button mat-button\\r\\n            (click)=\\\"onCloseCancel()\\\">DISCARD</button>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onCloseEdit()\\\">EDIT CASH</button>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onCloseConfirm()\\\">SAVE ANYWAY</button>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionCashCreateComponent } from '../../execution-cash-create.component';\r\n\r\n@Component({\r\n    selector: 'atlas-cash-warning-dialog-component',\r\n    templateUrl: './cash-warning-dialog-component.component.html',\r\n    styleUrls: ['./cash-warning-dialog-component.component.scss']\r\n})\r\nexport class CashWarningDialogComponentComponent extends BaseFormComponent implements OnInit {\r\n\r\n    dialogData: {\r\n        title: string,\r\n        text: string,\r\n        okButton: string,\r\n        cancelButton: string;\r\n        editButton: string;\r\n    };\r\n    constructor(protected formBuilder: FormBuilder,\r\n        public thisDialogRef: MatDialogRef<ExecutionCashCreateComponent>,\r\n        protected dialog: MatDialog,\r\n        @Inject(MAT_DIALOG_DATA) public data:\r\n            {\r\n                title: string,\r\n                text: string,\r\n                okButton: string,\r\n                cancelButton: string;\r\n                editButton: string;\r\n            },\r\n\r\n\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n\r\n\r\n    }\r\n    ngOnInit() {\r\n    }\r\n\r\n    onCloseConfirm() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n    onCloseCancel() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n    onCloseEdit() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"cashTypeId==CashType.CashPayment\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Cash Payments</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"50\\\">\\r\\n            <atlas-simple-cash-payment *ifAuthorized=\\\"'Cash.CashPayment.CPSIMPLE',company:this.company\\\"\\r\\n                                       #simpleCashPayment\\r\\n                                       (simpleCashPaymentOptionChecked)=\\\"onSimpleCashPaymentOptionChecked($event)\\\">\\r\\n            </atlas-simple-cash-payment>\\r\\n            <atlas-payment-full-transaction *ifAuthorized=\\\"'Cash.CashPayment.CPPICKTX',company:this.company\\\"\\r\\n                                            #paymentFullTransaction\\r\\n                                            (paymentFullTransactionOptionChecked)=\\\"onPaymentFullTransactionOptionChecked($event)\\\">\\r\\n            </atlas-payment-full-transaction>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start right\\\"\\r\\n             fxFlex=\\\"50\\\">\\r\\n            <atlas-payment-different-client *ifAuthorized=\\\"'Cash.CashPayment.CPDIFFCLI',company:this.company\\\"\\r\\n                                            #paymentDifferentClient\\r\\n                                            (paymentDifferentClientOptionChecked)=\\\"onPaymentDifferentClientOptionChecked($event)\\\">\\r\\n            </atlas-payment-different-client>\\r\\n            <atlas-payment-different-currency *ifAuthorized=\\\"'Cash.CashPayment.CPDIFFCCY',company:this.company\\\"\\r\\n                                              #paymentDifferentCurrency\\r\\n                                              (paymentDifferentCurrencyOptionChecked)=\\\"onPaymentDifferentCurrencyOptionChecked($event)\\\">\\r\\n            </atlas-payment-different-currency>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<mat-card *ngIf=\\\"cashTypeId==CashType.CashReceipt\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Cash Receipts</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"50\\\">\\r\\n            <atlas-simple-cash-receipt *ifAuthorized=\\\"'Cash.CashReceipt.CRSIMPLE',company:this.company\\\"\\r\\n                                       #simpleCashReceipt\\r\\n                                       (simpleCashReceiptOptionChecked)=\\\"onSimpleCashReceiptOptionChecked($event)\\\">\\r\\n            </atlas-simple-cash-receipt>\\r\\n            <atlas-receipt-full-transaction *ifAuthorized=\\\"'Cash.CashReceipt.CRPICKTX',company:this.company\\\"\\r\\n                                            #receiptFullTransaction\\r\\n                                            (receiptFullTransactionOptionChecked)=\\\"onReceiptFullTransactionOptionChecked($event)\\\">\\r\\n            </atlas-receipt-full-transaction>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start right\\\"\\r\\n             fxFlex=\\\"50\\\">\\r\\n            <atlas-receipt-different-currency *ifAuthorized=\\\"'Cash.CashReceipt.CRDIFFCCY',company:this.company\\\"\\r\\n                                              #receiptDifferentCurrency\\r\\n                                              (receiptDifferentCurrencyOptionChecked)=\\\"onReceiptDifferentCurrencyOptionChecked($event)\\\">\\r\\n            </atlas-receipt-different-currency>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CashTypes } from '../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../shared/enums/cash-type.enum';\r\nimport { CashRecord } from '../../../../shared/services/execution/dtos/cash-record';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { PaymentDifferentClientComponent } from './payment-different-client/payment-different-client.component';\r\nimport { PaymentDifferentCurrencyComponent } from './payment-different-currency/payment-different-currency.component';\r\nimport { PaymentFullTransactionComponent } from './payment-full-transaction/payment-full-transaction.component';\r\nimport { ReceiptDifferentCurrencyComponent } from './receipt-different-currency/receipt-different-currency.component';\r\nimport { ReceiptFullTransactionComponent } from './receipt-full-transaction/receipt-full-transaction.component';\r\nimport { SimpleCashPaymentComponent } from './simple-cash-payment/simple-cash-payment.component';\r\nimport { SimpleCashReceiptComponent } from './simple-cash-receipt/simple-cash-receipt.component';\r\n\r\n@Component({\r\n    selector: 'atlas-cash-selection-form-component',\r\n    templateUrl: './cash-selection.component.html',\r\n    styleUrls: ['./cash-selection.component.scss'],\r\n})\r\nexport class CashSelectionFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly checkBoxValueChange = new EventEmitter<boolean>();\r\n    @Output() readonly cashOptionSelected = new EventEmitter<any>();\r\n    @ViewChild('simpleCashPayment') simpleCashPayment: SimpleCashPaymentComponent;\r\n    @ViewChild('paymentFullTransaction') paymentFullTransaction: PaymentFullTransactionComponent;\r\n    @ViewChild('paymentDifferentClient') paymentDifferentClient: PaymentDifferentClientComponent;\r\n    @ViewChild('paymentDifferentCurrency') paymentDifferentCurrency: PaymentDifferentCurrencyComponent;\r\n    @ViewChild('simpleCashReceipt') simpleCashReceipt: SimpleCashReceiptComponent;\r\n    @ViewChild('receiptFullTransaction') receiptFullTransaction: ReceiptFullTransactionComponent;\r\n    @ViewChild('receiptDifferentCurrency') receiptDifferentCurrency: ReceiptDifferentCurrencyComponent;\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    cashSelectionOption: number;\r\n    company: string;\r\n    cashListTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n    cashTypes: CashTypes;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    onChange(value) {\r\n        this.checkBoxValueChange.emit(!value.checked);\r\n    }\r\n    onSimpleCashPaymentOptionChecked(cashType) {\r\n        this.cashSelectionOption = cashType.simpleCashPaymentOption;\r\n        this.cashOptionSelected.emit({ option: this.cashSelectionOption, checked: cashType.checked });\r\n        if (cashType.checked) {\r\n            if (this.paymentDifferentClient) {\r\n                this.paymentDifferentClient.paymentDifferentClientDisable();\r\n            }\r\n            if (this.paymentDifferentCurrency) {\r\n                this.paymentDifferentCurrency.paymentDifferentCurrencyDisable();\r\n            }\r\n            if (this.paymentFullTransaction) {\r\n                this.paymentFullTransaction.paymentFullTransactionDisable();\r\n            }\r\n        } else {\r\n            if (this.paymentDifferentClient) {\r\n                this.paymentDifferentClient.paymentDifferentClientEnable();\r\n            }\r\n            if (this.paymentDifferentCurrency) {\r\n                this.paymentDifferentCurrency.paymentDifferentCurrencyEnable();\r\n            }\r\n            if (this.paymentFullTransaction) {\r\n                this.paymentFullTransaction.paymentFullTransactionEnable();\r\n            }\r\n        }\r\n    }\r\n    onPaymentFullTransactionOptionChecked(cashType) {\r\n        this.cashSelectionOption = cashType.paymentFullTransactionOption;\r\n        this.cashOptionSelected.emit({ option: this.cashSelectionOption, checked: cashType.checked });\r\n        if (cashType.checked) {\r\n            if (this.paymentDifferentClient) {\r\n                this.paymentDifferentClient.paymentDifferentClientDisable();\r\n            }\r\n            if (this.paymentDifferentCurrency) {\r\n                this.paymentDifferentCurrency.paymentDifferentCurrencyDisable();\r\n            }\r\n            if (this.simpleCashPayment) {\r\n                this.simpleCashPayment.simpleCashPaymentDisable();\r\n            }\r\n        } else {\r\n            if (this.paymentDifferentClient) {\r\n                this.paymentDifferentClient.paymentDifferentClientEnable();\r\n            }\r\n            if (this.paymentDifferentCurrency) {\r\n                this.paymentDifferentCurrency.paymentDifferentCurrencyEnable();\r\n            }\r\n            if (this.simpleCashPayment) {\r\n                this.simpleCashPayment.simpleCashPaymentEnable();\r\n            }\r\n        }\r\n    }\r\n    onPaymentDifferentClientOptionChecked(cashType) {\r\n        this.cashSelectionOption = cashType.paymentDifferentClientOption;\r\n        this.cashOptionSelected.emit({ option: this.cashSelectionOption, checked: cashType.checked });\r\n        if (cashType.checked) {\r\n            if (this.simpleCashPayment) {\r\n                this.simpleCashPayment.simpleCashPaymentDisable();\r\n            }\r\n            if (this.paymentDifferentCurrency) {\r\n                this.paymentDifferentCurrency.paymentDifferentCurrencyDisable();\r\n            }\r\n            if (this.paymentFullTransaction) {\r\n                this.paymentFullTransaction.paymentFullTransactionDisable();\r\n            }\r\n        } else {\r\n            if (this.simpleCashPayment) {\r\n                this.simpleCashPayment.simpleCashPaymentEnable();\r\n            }\r\n            if (this.paymentDifferentCurrency) {\r\n                this.paymentDifferentCurrency.paymentDifferentCurrencyEnable();\r\n            }\r\n            if (this.paymentFullTransaction) {\r\n                this.paymentFullTransaction.paymentFullTransactionEnable();\r\n            }\r\n        }\r\n    }\r\n    onPaymentDifferentCurrencyOptionChecked(cashType) {\r\n        this.cashSelectionOption = cashType.paymentDifferentCurrencyOption;\r\n        this.cashOptionSelected.emit({ option: this.cashSelectionOption, checked: cashType.checked });\r\n        if (cashType.checked) {\r\n            if (this.simpleCashPayment) {\r\n                this.simpleCashPayment.simpleCashPaymentDisable();\r\n            }\r\n            if (this.paymentDifferentClient) {\r\n                this.paymentDifferentClient.paymentDifferentClientDisable();\r\n            }\r\n            if (this.paymentFullTransaction) {\r\n                this.paymentFullTransaction.paymentFullTransactionDisable();\r\n            }\r\n\r\n        } else {\r\n            if (this.simpleCashPayment) {\r\n                this.simpleCashPayment.simpleCashPaymentEnable();\r\n            }\r\n            if (this.paymentDifferentClient) {\r\n                this.paymentDifferentClient.paymentDifferentClientEnable();\r\n            }\r\n            if (this.paymentFullTransaction) {\r\n                this.paymentFullTransaction.paymentFullTransactionEnable();\r\n            }\r\n        }\r\n    }\r\n    onSimpleCashReceiptOptionChecked(cashType) {\r\n        this.cashSelectionOption = cashType.simpleCashReceiptOption;\r\n        this.cashOptionSelected.emit({ option: this.cashSelectionOption, checked: cashType.checked });\r\n        if (cashType.checked) {\r\n            if (this.receiptDifferentCurrency) {\r\n                this.receiptDifferentCurrency.receiptDifferentCurrencyDisable();\r\n            }\r\n            if (this.receiptFullTransaction) {\r\n                this.receiptFullTransaction.receiptFullTransactionDisable();\r\n            }\r\n        } else {\r\n            if (this.receiptDifferentCurrency) {\r\n                this.receiptDifferentCurrency.receiptDifferentCurrencyEnable();\r\n            }\r\n            if (this.receiptFullTransaction) {\r\n                this.receiptFullTransaction.receiptFullTransactionEnable();\r\n            }\r\n        }\r\n    }\r\n    onReceiptFullTransactionOptionChecked(cashType) {\r\n        this.cashSelectionOption = cashType.receiptFullTransactionOption;\r\n        this.cashOptionSelected.emit({ option: this.cashSelectionOption, checked: cashType.checked });\r\n        if (cashType.checked) {\r\n            if (this.receiptDifferentCurrency) {\r\n                this.receiptDifferentCurrency.receiptDifferentCurrencyDisable();\r\n            }\r\n            if (this.simpleCashReceipt) {\r\n                this.simpleCashReceipt.simpleCashReceiptDisable();\r\n            }\r\n        } else {\r\n            if (this.receiptDifferentCurrency) {\r\n                this.receiptDifferentCurrency.receiptDifferentCurrencyEnable();\r\n            }\r\n            if (this.simpleCashReceipt) {\r\n                this.simpleCashReceipt.simpleCashReceiptEnable();\r\n            }\r\n        }\r\n    }\r\n    onReceiptDifferentCurrencyOptionChecked(cashType) {\r\n        this.cashSelectionOption = cashType.receiptDifferentCurrencyOption;\r\n        this.cashOptionSelected.emit({ option: this.cashSelectionOption, checked: cashType.checked });\r\n        if (cashType.checked) {\r\n            if (this.receiptFullTransaction) {\r\n                this.receiptFullTransaction.receiptFullTransactionDisable();\r\n            }\r\n            if (this.simpleCashReceipt) {\r\n                this.simpleCashReceipt.simpleCashReceiptDisable();\r\n            }\r\n        } else {\r\n            if (this.receiptFullTransaction) {\r\n                this.receiptFullTransaction.receiptFullTransactionEnable();\r\n            }\r\n            if (this.simpleCashReceipt) {\r\n                this.simpleCashReceipt.simpleCashReceiptEnable();\r\n            }\r\n        }\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n\r\n        return entity;\r\n    }\r\n\r\n    bindSelectedCashTypeSelection(value: number, costDirectId: number) {\r\n\r\n        if (value) {\r\n            const selectedCashType = Number(value);\r\n            const cashTypeList = costDirectId === CashType.CashPayment ?\r\n                this.simpleCashPayment.getCashTypes()\r\n                : this.simpleCashReceipt.getCashTypes();\r\n            this.cashTypes = cashTypeList.find((item) => item.cashTypeId === selectedCashType);\r\n\r\n            switch (selectedCashType) {\r\n                case CashSelectionType.SimpleCashPayment: {\r\n                    this.simpleCashPayment.onChange(null, true, this.cashTypes);\r\n                    break;\r\n                }\r\n                case CashSelectionType.SimpleCashReceipt: {\r\n                    this.simpleCashReceipt.onChange(null, true, this.cashTypes);\r\n                    break;\r\n                }\r\n                case CashSelectionType.PaymentDifferentClient: {\r\n                    this.paymentDifferentClient.onChange(null, true, this.cashTypes);\r\n                    break;\r\n                }\r\n                case CashSelectionType.PaymentDifferentCurrency: {\r\n                    this.paymentDifferentCurrency.onChange(null, true, this.cashTypes);\r\n                    break;\r\n                }\r\n                case CashSelectionType.PaymentFullPartialTransaction: {\r\n                    this.paymentFullTransaction.onChange(null, true, this.cashTypes);\r\n                    break;\r\n                }\r\n                case CashSelectionType.ReceiptDifferentCurrency: {\r\n                    this.receiptDifferentCurrency.onChange(null, true, this.cashTypes);\r\n                    break;\r\n                }\r\n                case CashSelectionType.ReceiptFullPartialTransaction: {\r\n                    this.receiptFullTransaction.onChange(null, true, this.cashTypes);\r\n                    break;\r\n                }\r\n                default: {\r\n                    // statements;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let cashType of cashTypes\\\">\\r\\n    <mat-checkbox #paymentDifferentClientTypeCtrl\\r\\n                  [formControl]=\\\"paymentDifferentClientCtrl\\\"\\r\\n                  [checked]=\\\"checked\\\"\\r\\n                  [value]=\\\"cashType.cashTypeId\\\"\\r\\n                  (change)=\\\"onChange($event,paymentDifferentClientTypeCtrl.checked,cashType)\\\">{{cashType.description}}\\r\\n    </mat-checkbox>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-payment-different-client',\r\n    templateUrl: './payment-different-client.component.html',\r\n    styleUrls: ['./payment-different-client.component.scss'],\r\n})\r\nexport class PaymentDifferentClientComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly paymentDifferentClientOptionChecked = new EventEmitter<any>();\r\n\r\n    paymentDifferentClientCtrl = new AtlasFormControl('PaymentDifferentClient');\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n\r\n    checked: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private masterDataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cashTypes = this.masterData.cashTypes.filter(\r\n            (cashtype) => cashtype.cashTypeId === CashSelectionType.PaymentDifferentClient);\r\n        this.checked = false;\r\n    }\r\n    onChange($event, value, cashTypes) {\r\n        this.checked = Boolean(value);\r\n        this.paymentDifferentClientOptionChecked.emit({\r\n            paymentDifferentClientOption: Number(cashTypes.cashTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            paymentDifferentClientCtrl: this.paymentDifferentClientCtrl,\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    paymentDifferentClientDisable() {\r\n        this.paymentDifferentClientCtrl.disable();\r\n    }\r\n    paymentDifferentClientEnable() {\r\n        this.paymentDifferentClientCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let cashType of cashTypes\\\">\\r\\n    <mat-checkbox #paymentDifferentCurrencyTypeCtrl\\r\\n                  [formControl]=\\\"paymentDifferentCurrencyCtrl\\\"\\r\\n                  [checked]=\\\"checked\\\"\\r\\n                  [value]=\\\"cashType.cashTypeId\\\"\\r\\n                  (change)=\\\"onChange($event,paymentDifferentCurrencyTypeCtrl.checked,cashType)\\\">{{cashType.description}}\\r\\n    </mat-checkbox>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-payment-different-currency',\r\n    templateUrl: './payment-different-currency.component.html',\r\n    styleUrls: ['./payment-different-currency.component.scss'],\r\n})\r\nexport class PaymentDifferentCurrencyComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly paymentDifferentCurrencyOptionChecked = new EventEmitter<any>();\r\n\r\n    paymentDifferentCurrencyCtrl = new AtlasFormControl('PaymentDifferentCurrency');\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n    checked: boolean;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private masterDataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cashTypes = this.masterData.cashTypes.filter(\r\n            (cashtype) => cashtype.cashTypeId === CashSelectionType.PaymentDifferentCurrency);\r\n        this.checked = false;\r\n    }\r\n    onChange($event, value, cashTypes) {\r\n        this.checked = Boolean(value);\r\n        this.paymentDifferentCurrencyOptionChecked.emit({\r\n            paymentDifferentCurrencyOption: Number(cashTypes.cashTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            paymentDifferentCurrencyCtrl: this.paymentDifferentCurrencyCtrl,\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    paymentDifferentCurrencyDisable() {\r\n        this.paymentDifferentCurrencyCtrl.disable();\r\n    }\r\n    paymentDifferentCurrencyEnable() {\r\n        this.paymentDifferentCurrencyCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let cashType of cashTypes\\\">\\r\\n    <mat-checkbox #paymentFullTransactionTypeCtrl\\r\\n                  [formControl]=\\\"paymentFullTransactionCtrl\\\"\\r\\n                  [checked]=\\\"cashType.checked\\\"\\r\\n                  [value]=\\\"cashType.cashTypeId\\\"\\r\\n                  (change)=\\\"onChange($event,paymentFullTransactionTypeCtrl.checked,cashType)\\\">{{cashType.description}}\\r\\n    </mat-checkbox>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-payment-full-transaction',\r\n    templateUrl: './payment-full-transaction.component.html',\r\n    styleUrls: ['./payment-full-transaction.component.scss'],\r\n})\r\nexport class PaymentFullTransactionComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly paymentFullTransactionOptionChecked = new EventEmitter<any>();\r\n\r\n    paymentFullTransactionCtrl = new AtlasFormControl('PickTransactionFullPayment');\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n    checked: boolean;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private masterDataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cashTypes = this.masterData.cashTypes.filter(\r\n            (cashtype) => cashtype.cashTypeId === CashSelectionType.PaymentFullPartialTransaction);\r\n        this.checked = false;\r\n    }\r\n    onChange($event, value, cashTypes) {\r\n        this.checked = Boolean(value);\r\n        this.paymentFullTransactionOptionChecked.emit({\r\n            paymentFullTransactionOption: Number(cashTypes.cashTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            paymentFullTransactionCtrl: this.paymentFullTransactionCtrl,\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    paymentFullTransactionDisable() {\r\n        this.paymentFullTransactionCtrl.disable();\r\n    }\r\n    paymentFullTransactionEnable() {\r\n        this.paymentFullTransactionCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let cashType of cashTypes\\\">\\r\\n    <mat-checkbox #receiptDifferentCurrencyTypeCtrl\\r\\n                  [formControl]=\\\"receiptDifferentCurrencyCtrl\\\"\\r\\n                  [checked]=\\\"checked\\\"\\r\\n                  [value]=\\\"cashType.cashTypeId\\\"\\r\\n                  (change)=\\\"onChange($event,receiptDifferentCurrencyTypeCtrl.checked,cashType)\\\">{{cashType.description}}\\r\\n    </mat-checkbox>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-receipt-different-currency',\r\n    templateUrl: './receipt-different-currency.component.html',\r\n    styleUrls: ['./receipt-different-currency.component.scss'],\r\n})\r\nexport class ReceiptDifferentCurrencyComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly receiptDifferentCurrencyOptionChecked = new EventEmitter<any>();\r\n\r\n    receiptDifferentCurrencyCtrl = new AtlasFormControl('ReceiptDifferentCurrency');\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n    checked: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private masterDataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cashTypes = this.masterData.cashTypes.filter(\r\n            (cashtype) => cashtype.cashTypeId === CashSelectionType.ReceiptDifferentCurrency);\r\n        this.checked = false;\r\n    }\r\n    onChange($event, value, cashTypes) {\r\n        this.checked = Boolean(value);\r\n        this.receiptDifferentCurrencyOptionChecked.emit({\r\n            receiptDifferentCurrencyOption: Number(cashTypes.cashTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            receiptDifferentCurrencyCtrl: this.receiptDifferentCurrencyCtrl,\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    receiptDifferentCurrencyDisable() {\r\n        this.receiptDifferentCurrencyCtrl.disable();\r\n    }\r\n    receiptDifferentCurrencyEnable() {\r\n        this.receiptDifferentCurrencyCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let cashType of cashTypes\\\">\\r\\n    <mat-checkbox #receiptFullTransactionTypeCtrl\\r\\n                  [formControl]=\\\"receiptFullTransactionCtrl\\\"\\r\\n                  [checked]=\\\"checked\\\"\\r\\n                  [value]=\\\"cashType.cashTypeId\\\"\\r\\n                  (change)=\\\"onChange($event,receiptFullTransactionTypeCtrl.checked,cashType)\\\">{{cashType.description}}\\r\\n    </mat-checkbox>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-receipt-full-transaction',\r\n    templateUrl: './receipt-full-transaction.component.html',\r\n    styleUrls: ['./receipt-full-transaction.component.scss'],\r\n})\r\nexport class ReceiptFullTransactionComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly receiptFullTransactionOptionChecked = new EventEmitter<any>();\r\n\r\n    receiptFullTransactionCtrl = new AtlasFormControl('ReceiptFullTransaction');\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n    checked: boolean;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private masterDataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cashTypes = this.masterData.cashTypes.filter(\r\n            (cashtype) => cashtype.cashTypeId === CashSelectionType.ReceiptFullPartialTransaction);\r\n        this.checked = false;\r\n    }\r\n    onChange($event, value, cashTypes) {\r\n        this.checked = Boolean(value);\r\n        this.receiptFullTransactionOptionChecked.emit({\r\n            receiptFullTransactionOption: Number(cashTypes.cashTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            receiptFullTransactionCtrl: this.receiptFullTransactionCtrl,\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    receiptFullTransactionDisable() {\r\n        this.receiptFullTransactionCtrl.disable();\r\n    }\r\n    receiptFullTransactionEnable() {\r\n        this.receiptFullTransactionCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let cashType of cashTypes\\\">\\r\\n    <mat-checkbox #simplePaymentTypeCtrl\\r\\n                  [formControl]=\\\"simplePaymentCtrl\\\"\\r\\n                  [checked]=\\\"checked\\\"\\r\\n                  [value]=\\\"cashType.cashTypeId\\\"\\r\\n                  (change)=\\\"onChange($event,simplePaymentTypeCtrl.checked,cashType)\\\">{{cashType.description}}\\r\\n    </mat-checkbox>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-simple-cash-payment',\r\n    templateUrl: './simple-cash-payment.component.html',\r\n    styleUrls: ['./simple-cash-payment.component.scss'],\r\n})\r\nexport class SimpleCashPaymentComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly simpleCashPaymentOptionChecked = new EventEmitter<any>();\r\n\r\n    simplePaymentCtrl = new AtlasFormControl('SimpleCashPayment');\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n    checked: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private masterDataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n        \r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cashTypes = this.masterData.cashTypes.filter(\r\n            (cashtype) => cashtype.cashTypeId === CashSelectionType.SimpleCashPayment);\r\n            this.checked = false;\r\n    }\r\n    onChange($event, value, cashTypes) {\r\n        this.checked = Boolean(value);\r\n        this.simpleCashPaymentOptionChecked.emit({\r\n            simpleCashPaymentOption: Number(cashTypes.cashTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            simplePaymentCtrl: this.simplePaymentCtrl,\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    simpleCashPaymentDisable() {\r\n        this.simplePaymentCtrl.disable();\r\n    }\r\n    simpleCashPaymentEnable() {\r\n        this.simplePaymentCtrl.enable();\r\n    }\r\n\r\n    getCashTypes() {\r\n        return this.masterData.cashTypes;\r\n    }\r\n}\r\n","module.exports = \"<div *ngFor=\\\"let cashType of cashTypes\\\">\\r\\n    <mat-checkbox #simpleCashReceiptTypeCtrl\\r\\n                  [formControl]=\\\"simpleCashReceiptCtrl\\\"\\r\\n                  [checked]=\\\"checked\\\"\\r\\n                  [value]=\\\"cashType.cashTypeId\\\"\\r\\n                  (change)=\\\"onChange($event,simpleCashReceiptTypeCtrl.checked,cashType)\\\">{{cashType.description}}\\r\\n    </mat-checkbox>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-simple-cash-receipt',\r\n    templateUrl: './simple-cash-receipt.component.html',\r\n    styleUrls: ['./simple-cash-receipt.component.scss'],\r\n})\r\nexport class SimpleCashReceiptComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly simpleCashReceiptOptionChecked = new EventEmitter<any>();\r\n\r\n    simpleCashReceiptCtrl = new AtlasFormControl('SimpleCashreceipt');\r\n\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    company: string;\r\n    cashTypes: CashTypes[];\r\n    masterData: MasterData = new MasterData();\r\n    checked: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private masterDataService: MasterdataService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cashTypes = this.masterData.cashTypes.filter(\r\n            (cashtype) => cashtype.cashTypeId === CashSelectionType.SimpleCashReceipt);\r\n        this.checked = false;\r\n    }\r\n    onChange($event, value, cashTypes) {\r\n        this.checked = Boolean(value);\r\n        this.simpleCashReceiptOptionChecked.emit({\r\n            simpleCashReceiptOption: Number(cashTypes.cashTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            simpleCashReceiptCtrl: this.simpleCashReceiptCtrl,\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    simpleCashReceiptDisable() {\r\n        this.simpleCashReceiptCtrl.disable();\r\n    }\r\n    simpleCashReceiptEnable() {\r\n        this.simpleCashReceiptCtrl.enable();\r\n    }\r\n    getCashTypes() {\r\n        return this.masterData.cashTypes;\r\n    }\r\n\r\n}\r\n","module.exports = \"<ng-template #headerContent>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"1%\\\"\\r\\n         class=\\\"bottom-marge\\\">\\r\\n        <mat-card-title>\\r\\n            Cash {{docReference}}\\r\\n        </mat-card-title>\\r\\n        <mat-chip-list class=\\\"chip-list\\\">\\r\\n            <mat-chip *ngIf=\\\"showTraxStatus\\\"\\r\\n                      selected\\r\\n                      disabled\\r\\n                      matTooltip=\\\"Trax Status\\\"\\r\\n                      [ngClass]=\\\"isTraxStatusSuccess == true ? 'mat-approved': 'mat-error'\\\">\\r\\n                {{traxStatus}}\\r\\n            </mat-chip>\\r\\n            <mat-chip *ngIf=\\\"showPostingStatus\\\"\\r\\n                      selected\\r\\n                      disabled\\r\\n                      matTooltip=\\\"Posting Status\\\"\\r\\n                      [ngClass]=\\\"isPostingStatusSuccess == true ? 'mat-approved': 'mat-error'\\\">\\r\\n                {{postingStatus}}\\r\\n            </mat-chip>\\r\\n            <mat-chip *ngIf=\\\"showAccInterfaceStatus\\\"\\r\\n                      selected\\r\\n                      disabled\\r\\n                      matTooltip=\\\"Accounting Interface Status\\\"\\r\\n                      [ngClass]=\\\"isAccInterfaceStatusSuccess == 'true' ? 'mat-approved': 'mat-error'\\\">\\r\\n                {{accInterfaceStatus}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"1%\\\">\\r\\n\\r\\n        <atlas-date-picker fxFlex=\\\"15%\\\"\\r\\n                           [fieldControl]=\\\"creationDateCtrl\\\"\\r\\n                           label=\\\"Created On\\\">\\r\\n        </atlas-date-picker>\\r\\n\\r\\n        <atlas-form-input fxFlex=\\\"15%\\\"\\r\\n                          [fieldControl]=\\\"createdByCtrl\\\"\\r\\n                          label=\\\"By\\\">\\r\\n        </atlas-form-input>\\r\\n    </div>\\r\\n</ng-template>\\r\\n\\r\\n<mat-card *ngIf=\\\"isCreationMode\\\"\\r\\n          class=\\\"card-header-luke\\\">\\r\\n    <ng-container *ngTemplateOutlet=\\\"headerContent\\\"></ng-container>\\r\\n</mat-card>\\r\\n\\r\\n<header *ngIf=\\\"!isCreationMode\\\"\\r\\n        class=\\\"header-background mat-elevation-z2\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"headerContent\\\"></ng-container>\\r\\n    </div>\\r\\n</header>\\r\\n\\r\\n<atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                              [fabType]=\\\"fabType\\\"\\r\\n                              [fabActions]=\\\"fabMenuActions\\\"\\r\\n                              [isParentLoaded]=\\\"!isLoading\\\"\\r\\n                              (fabActionClicked)=\\\"onFabActionClicked($event)\\\"\\r\\n                              *ngIf=\\\"!isCreationMode\\\">\\r\\n</atlas-floating-action-button>\\r\\n<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoading\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n\\r\\n    <!--these css classes  \\\"warning-banner-card\\\" is already defined in common style class.-->\\r\\n    <div class=\\\"warning-banner-card\\\"\\r\\n         *ngIf=\\\"errorMessage\\\">\\r\\n        <mat-card class=\\\"cash-warning-card\\\">\\r\\n            <div class=\\\"warning-circle-icon\\\">\\r\\n                <mat-icon>warning_outline</mat-icon>\\r\\n            </div>\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h4 class=\\\"no-margin\\\">Warning</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-subtitle>\\r\\n                    {{errorMessage}}\\r\\n                </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-around start\\\"\\r\\n         fxLayoutGap=\\\"20px\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"50\\\">\\r\\n            <atlas-document-information #documentInformationFormComponent\\r\\n                                        [isSummary]='true'></atlas-document-information>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start right\\\"\\r\\n             fxFlex=\\\"50\\\">\\r\\n            <atlas-counterparty-card #counterpartyFormComponent></atlas-counterparty-card>\\r\\n\\r\\n            <atlas-currency-information-card [ngClass]=\\\"{'hidden-during-loading':isDifferentCurrencyoptionSelected()}\\\"\\r\\n                                             #currencyFormComponent></atlas-currency-information-card>\\r\\n\\r\\n            <atlas-bank-information #bankInformationComponent\\r\\n                                    *ngIf=\\\"cashTypeId==CashType.CashPayment\\\">\\r\\n            </atlas-bank-information>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start left\\\">\\r\\n        <atlas-additional-details #additionalDetailsFormComponent></atlas-additional-details>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start left\\\"\\r\\n         class=\\\"cost-style\\\">\\r\\n        <atlas-additional-costs #additionalCostsFormComponent></atlas-additional-costs>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start left\\\">\\r\\n        <atlas-invoice-grid-for-summary #invoiceGridForSummaryComponent></atlas-invoice-grid-for-summary>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row \\\"\\r\\n         fxLayoutAlign=\\\"right\\\">\\r\\n        <mat-slide-toggle [formControl]=\\\"urgentPaymentSummaryCtrl\\\"\\r\\n                          *ngIf=\\\"cashTypeId == CashType.CashPayment\\\"\\r\\n                          [checked]=\\\"disabled\\\">Urgent Payment</mat-slide-toggle>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <mat-slide-toggle [disabled]=\\\"true\\\"\\r\\n                              [formControl]=\\\"authorizePostingCtrl\\\">\\r\\n                Authorize for posting\\r\\n            </mat-slide-toggle>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <mat-slide-toggle *ngIf=\\\"cashTypeId == CashType.CashPayment\\\"\\r\\n                              [disabled]=\\\"true\\\"\\r\\n                              [formControl]=\\\"transmitTreasuryCtrl\\\">\\r\\n                Transmit to treasury System\\r\\n            </mat-slide-toggle>\\r\\n        </div>\\r\\n\\r\\n        <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n        </atlas-lock-interval>\\r\\n    </div>\\r\\n\"","module.exports = \".menu-bar {\\n  margin-bottom: 30px; }\\n\\n.menu-bar-action-icon {\\n  cursor: pointer;\\n  background-color: #81cf5c;\\n  border-radius: 50%;\\n  width: 40px;\\n  height: 40px;\\n  text-align: center; }\\n\\n.white-icon {\\n  color: white;\\n  height: 24px;\\n  width: 24px;\\n  padding: 7px; }\\n\\n.cost-style {\\n  padding: 10px 0px; }\\n\\n.main-container {\\n  margin-top: 8px; }\\n\\nmat-card.cash-warning-card.mat-card {\\n  padding: 0 !important;\\n  min-height: 75px;\\n  display: flex;\\n  align-items: center; }\\n\\nmat-card.cash-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n\\nmat-card.cash-warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n\\nmat-card.cash-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n\\nheader .mat-card-title {\\n  font-size: 16px;\\n  margin-bottom: 0px; }\\n\\n.header-background {\\n  min-height: 94px !important; }\\n\\n.header-content {\\n  padding: 16px 30px 0px !important; }\\n\\n.bottom-marge {\\n  margin-bottom: 6px; }\\n\"","import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { FloatingActionButtonActions } from '../../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { CashSelectionType } from '../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../shared/enums/cash-type.enum';\r\nimport { InterfaceStatus } from '../../../../shared/enums/interface-status.enum';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { PostingStatus } from '../../../../shared/enums/posting-status.enum';\r\nimport { CashMatching } from '../../../../shared/services/execution/dtos/cash-matching';\r\nimport { CashRecord } from '../../../../shared/services/execution/dtos/cash-record';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { ExecutionActionsService } from '../../../services/execution-actions.service';\r\nimport { AdditionalCostsFormComponent } from '../cash-details/additional-costs/additional-costs.component';\r\nimport { AdditionalDetailsFormComponent } from '../cash-details/additional-details/additional-details.component';\r\nimport { CounterpartyFormComponent } from '../cash-details/counterparty-card/counterparty-card.component';\r\nimport { CurrencyInformationCardComponent } from '../cash-details/currency-information-card/currency-information-card.component';\r\nimport { DocumentInformationFormComponent } from '../cash-details/document-information/document-information.component';\r\nimport { InvoiceGridForSummaryComponent } from './invoice-grid-for-summary/invoice-grid-for-summary.component';\r\n\r\n@Component({\r\n    selector: 'atlas-cash-summary-form-component',\r\n    templateUrl: './cash-summary.component.html',\r\n    styleUrls: ['./cash-summary.component.scss'],\r\n})\r\nexport class CashSummaryFormComponent extends BaseFormComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    @ViewChild('counterpartyFormComponent') counterpartyFormComponent: CounterpartyFormComponent;\r\n    @ViewChild('additionalDetailsFormComponent') additionalDetailsFormComponent: AdditionalDetailsFormComponent;\r\n    @ViewChild('documentInformationFormComponent') documentInformationFormComponent: DocumentInformationFormComponent;\r\n    @ViewChild('invoiceGridForSummaryComponent') invoiceGridForSummaryComponent: InvoiceGridForSummaryComponent;\r\n    @ViewChild('additionalCostsFormComponent') additionalCostsFormComponent: AdditionalCostsFormComponent;\r\n    @ViewChild('currencyFormComponent') currencyFormComponent: CurrencyInformationCardComponent;\r\n\r\n    @Input() isCreationMode: boolean = false;\r\n\r\n    cashSummaryFormGroup: FormGroup;\r\n    urgentPaymentSummaryCtrl = new AtlasFormControl('UrgentPaymentSummary');\r\n    model: CashRecord;\r\n    private formComponents: BaseFormComponent[] = [];\r\n    docReference: string;\r\n    invoices: CashMatching[];\r\n    cashId: number;\r\n    subscriptions: Subscription[] = [];\r\n    isEdit = false;\r\n    disabled: boolean;\r\n    CashType = CashType;\r\n    cashTypeId: number;\r\n    showCurrencyComponent = false;\r\n    hasCPTraxEditPrivilege: boolean = false;\r\n    company: string;\r\n    cashTypeIdPrivilege: number;\r\n    canEdit = false;\r\n    canCreate = false;\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    traxStatusCtrl = new AtlasFormControl('TraxStatus');\r\n    interfaceStatusCtrl = new AtlasFormControl('InterfaceStatus');\r\n    postingStatusCtrl = new AtlasFormControl('PostingStatus');\r\n    transmitTreasuryCtrl = new AtlasFormControl('TransmitTreasury');\r\n    authorizePostingCtrl = new AtlasFormControl('AuthorizePosting');\r\n    creationDateCtrl = new AtlasFormControl('creationDate');\r\n    createdByCtrl = new AtlasFormControl('createdBy');\r\n    isLoading = false;\r\n    isCashReceipt = false;\r\n\r\n    // properties for displaying cash details in header section\r\n    showTraxStatus = false;\r\n    showPostingStatus = false;\r\n    showAccInterfaceStatus = false;\r\n    isTraxStatusSuccess: boolean;\r\n    isPostingStatusSuccess: boolean;\r\n    isAccInterfaceStatusSuccess: boolean;\r\n    traxStatus: string;\r\n    postingStatus: string;\r\n    accInterfaceStatus: string;\r\n    errorMessage: string;\r\n\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        protected securityService: SecurityService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected executionActionsService: ExecutionActionsService,\r\n        protected lockService: LockService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n        this.cashTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('cashTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isTraxStatusSuccess = false;\r\n        this.isPostingStatusSuccess = false;\r\n        this.isAccInterfaceStatusSuccess = false;\r\n    }\r\n\r\n    // tslint:disable-next-line:use-life-cycle-interface\r\n    ngAfterViewInit() {\r\n\r\n        this.cashSummaryFormGroup = this.formBuilder.group({\r\n            counterpartyFormComponent: this.counterpartyFormComponent.getFormGroup(),\r\n            additionalDetailsFormComponent: this.additionalDetailsFormComponent.getFormGroup(),\r\n            documentInformationFormComponent: this.documentInformationFormComponent.getFormGroup(),\r\n            additionalCostsFormComponent: this.additionalCostsFormComponent.getFormGroup(),\r\n            invoiceGridForSummaryComponent: this.invoiceGridForSummaryComponent.getFormGroup(),\r\n            currencyFormComponent: this.currencyFormComponent.getFormGroup(),\r\n        });\r\n        this.cashSummaryFormGroup.disable();\r\n        this.urgentPaymentSummaryCtrl.disable();\r\n        this.createdByCtrl.disable();\r\n        this.creationDateCtrl.disable();\r\n\r\n        this.formComponents.push(\r\n            this.counterpartyFormComponent,\r\n            this.documentInformationFormComponent,\r\n            this.additionalDetailsFormComponent,\r\n            this.additionalCostsFormComponent,\r\n            this.invoiceGridForSummaryComponent,\r\n            this.currencyFormComponent,\r\n        );\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.hasCPTraxEditPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CPTraxEdit');\r\n        });\r\n\r\n        this.cashId = Number(this.route.snapshot.paramMap.get('cashId'));\r\n        if (this.cashId !== 0 && this.route.snapshot.url.length > 0\r\n            && this.route.snapshot.url[1].path.toString() === 'display') {\r\n            this.populateCashDetails();\r\n        }\r\n    }\r\n\r\n    populateCashRecord(record) {\r\n        this.model = record;\r\n        this.isLoading = true;\r\n        this.docReference = this.model.documentReference;\r\n        this.titleService.setTitle(this.docReference + ' - Cash View');\r\n        if (this.model.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.model.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n            this.docReference = this.docReference + ' / ' + this.model.matchedDocumentReference;\r\n        }\r\n\r\n        this.formComponents.forEach((comp) => {\r\n            comp.initForm(this.model, false);\r\n        });\r\n        this.setAccountingLineTypeColumnVisibility();\r\n        this.hideAmountInDifferentCurrencyColumn(this.model.childCashTypeId, this.model.currencyCode);\r\n        this.disabled = this.model.urgentPayment;\r\n        this.isLoading = false;\r\n        this.authorizePostingCtrl.setValue(this.model.authorizedForPosting);\r\n        this.transmitTreasuryCtrl.setValue(this.model.toTransmitToTreasury);\r\n        this.urgentPaymentSummaryCtrl.setValue(this.model.urgentPayment);\r\n        this.createdByCtrl.setValue(this.model.createdBy);\r\n        this.creationDateCtrl.setValue(this.model.documentDate);\r\n        this.bindDocumentStatusDetail(this.model);\r\n    }\r\n\r\n    populateCashDetails() {\r\n        this.isLoading = true;\r\n        this.subscriptions.push(this.executionService.getCashByCashId(this.cashId)\r\n            .subscribe((data) => {\r\n                this.model = data;\r\n                this.interfaceStatusCtrl.setValue(this.getInterfaceStatus(this.model.interfaceStatus));\r\n                this.traxStatusCtrl.setValue(this.getTraxStatus(this.model.traxStatus));\r\n                this.postingStatusCtrl.setValue(this.getPostingStatus(this.model.status));\r\n                this.authorizePostingCtrl.setValue(this.model.authorizedForPosting);\r\n                this.transmitTreasuryCtrl.setValue(this.model.toTransmitToTreasury);\r\n                this.createdByCtrl.setValue(this.model.createdBy);\r\n                this.creationDateCtrl.setValue(this.model.documentDate);\r\n                this.urgentPaymentSummaryCtrl.setValue(this.model.urgentPayment);\r\n                this.cashTypeIdPrivilege = data.cashTypeId;\r\n                if (this.cashTypeIdPrivilege) {\r\n                    this.isAuthorized();\r\n                }\r\n                this.docReference = data.documentReference;\r\n                this.titleService.setTitle(this.docReference + ' - Cash View');\r\n                if (data.matchedDocumentReference) {\r\n                    this.docReference = this.docReference + ' / ' + data.matchedDocumentReference;\r\n                }\r\n                this.formComponents.forEach((comp) => {\r\n                    comp.initForm(data, this.isEdit);\r\n                });\r\n                this.setAccountingLineTypeColumnVisibility();\r\n                this.additionalCostsFormComponent.isPanelExpanded = false;\r\n                this.additionalDetailsFormComponent.isPanelExpanded = false;\r\n                this.hideAmountInDifferentCurrencyColumn(this.model.cashTypeId, this.model.currencyCode);\r\n                this.isLoading = false;\r\n                this.initFABActions();\r\n                this.bindDocumentStatusDetail(this.model);\r\n            }));\r\n    }\r\n\r\n    populateInvoiceGrid(record) {\r\n        this.populateInvoiceRecordFromGrid(record, this.invoices);\r\n    }\r\n\r\n    populateInvoiceRecordFromGrid(summaryRecord, invoices) {\r\n        if (summaryRecord) {\r\n            this.invoiceGridForSummaryComponent.invoicesToBeSelectedForSummary(invoices, summaryRecord);\r\n        } else { this.invoiceGridForSummaryComponent.showGrid = false; }\r\n\r\n    }\r\n\r\n    invoiceForSummaryStep(invoices: CashMatching[]) {\r\n        this.invoices = invoices;\r\n    }\r\n    onEditClicked() {\r\n        this.lockService.isLockedCashDocument(this.model.cashId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.executionActionsService.editCashSubject.next(this.model);\r\n            }\r\n        });\r\n    }\r\n    onNewCashButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/execution/cash/new/' + encodeURIComponent(this.cashTypeId.toString())]);\r\n    }\r\n\r\n    onDeleteClicked() {\r\n\r\n        this.lockService.isLockedCashDocument(this.model.cashId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.startLockRefresh(this.model.cashId, this.model.documentReference);\r\n                this.lockService.lockCashDocument(this.model.cashId, LockFunctionalContext.CashDocumentDeletion)\r\n                    .pipe(takeUntil(this.destroy$)).subscribe((lockState) => {\r\n\r\n                        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Cash Deletion',\r\n                                text: 'Deleting a cash is permanent. Do you wish to proceed?',\r\n                                okButton: 'Delete anyway',\r\n                                cancelButton: 'Cancel',\r\n                            },\r\n                        });\r\n                        confirmDialog.afterClosed().subscribe((answer) => {\r\n                            this.stopLockRefresh();\r\n                            if (answer) {\r\n                                this.executionService.deleteCash(this.model.cashId).subscribe(() => {\r\n                                    this.snackbarService.informationSnackBar('Cash deleted successfully');\r\n                                    this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/cash']);\r\n                                });\r\n                            } else {\r\n                                this.snackbarService.throwErrorSnackBar('You cannot delete this cash');\r\n                            }\r\n                            this.lockService.unlockCashDocument(this.model.cashId, LockFunctionalContext.CashDocumentDeletion)\r\n                                .pipe(takeUntil(this.destroy$)).subscribe();\r\n                        });\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    isDifferentCurrencyoptionSelected() {\r\n        if (this.model) {\r\n            return (this.model.cashTypeId === CashSelectionType.PaymentDifferentCurrency\r\n                || this.model.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) ? false : true;\r\n        }\r\n    }\r\n\r\n    setAccountingLineTypeColumnVisibility() {\r\n        if (this.model.cashTypeId === CashSelectionType.SimpleCashPayment\r\n            || this.model.cashTypeId === CashSelectionType.SimpleCashReceipt) {\r\n            if (this.additionalCostsFormComponent.gridColumnApi) {\r\n                this.additionalCostsFormComponent.gridColumnApi.setColumnVisible('accountLineType', false);\r\n            }\r\n        }\r\n    }\r\n\r\n    hideAmountInDifferentCurrencyColumn(id: number, currency: string) {\r\n        if (id === CashSelectionType.PaymentDifferentCurrency\r\n            || id === CashSelectionType.ReceiptDifferentCurrency) {\r\n            if (this.invoiceGridForSummaryComponent.gridColumnApi) {\r\n                this.invoiceGridForSummaryComponent.gridColumnApi.setColumnVisible('amountPaidInDiffCcy', true);\r\n                // Add cash currency to the header like  \"Amount Paid In Diff Ccy (AED)\"\r\n                this.invoiceGridForSummaryComponent.invoiceSummaryGridOptions.api.getColumnDef('amountPaidInDiffCcy').headerName\r\n                    = 'Amount Paid in Diff CCY ( ' + currency + ' )';\r\n            }\r\n        }\r\n    }\r\n\r\n    isAuthorized() {\r\n        if (this.model.status === PostingStatus.Posted) {\r\n            this.canEdit = false;\r\n        } else {\r\n            this.securityService.isSecurityReady().subscribe(() => {\r\n                this.canEdit = false;\r\n                this.canCreate = false;\r\n\r\n                let privilegeNameLevel2 = '';\r\n                let privilegeNameLevel3 = '';\r\n                switch (this.cashTypeIdPrivilege) {\r\n                    case 1:\r\n                        privilegeNameLevel2 = 'CashPayment';\r\n                        privilegeNameLevel3 = 'CPSIMPLE';\r\n                        break;\r\n                    case 2:\r\n                        privilegeNameLevel2 = 'CashPayment';\r\n                        privilegeNameLevel3 = 'CPPICKTX';\r\n                        break;\r\n                    case 3:\r\n                        privilegeNameLevel2 = 'CashPayment';\r\n                        privilegeNameLevel3 = 'CPDIFFCCY';\r\n                        break;\r\n                    case 4:\r\n                        privilegeNameLevel2 = 'CashPayment';\r\n                        privilegeNameLevel3 = 'CPDIFFCLI';\r\n                        break;\r\n                    case 5:\r\n                        privilegeNameLevel2 = 'CashReceipt';\r\n                        privilegeNameLevel3 = 'CRSIMPLE';\r\n                        this.isCashReceipt = true;\r\n                        break;\r\n                    case 6:\r\n                        privilegeNameLevel2 = 'CashReceipt';\r\n                        privilegeNameLevel3 = 'CRPICKTX';\r\n                        this.isCashReceipt = true;\r\n                        break;\r\n                    case 7:\r\n                        privilegeNameLevel2 = 'CashReceipt';\r\n                        privilegeNameLevel3 = 'CRDIFFCCY';\r\n                        this.isCashReceipt = true;\r\n                        break;\r\n                }\r\n\r\n                if (this.authorizationService.isPrivilegeAllowed(this.company, 'Cash') &&\r\n                    this.authorizationService.isPrivilegeAllowed(this.company, privilegeNameLevel2, PermissionLevels.ReadWrite) &&\r\n                    this.authorizationService.isPrivilegeAllowed(this.company, privilegeNameLevel3)) {\r\n\r\n                    this.canCreate = true;\r\n                    if (this.isCashReceipt) {\r\n                        if (this.model.status === PostingStatus.MappingError || this.model.status === PostingStatus.Incomplete) {\r\n                            this.canEdit = true;\r\n                        }\r\n                    } else {\r\n                        // For cash payment, check trax\r\n                        let traxReadOnly = true;\r\n\r\n                        // If it's an error, it has not been transmitted to the bank, so you can modify; otherwise it's read-only\r\n                        if (!this.model.traxStatus\r\n                            || this.model.traxStatus === InterfaceStatus.ReadyToTransmit\r\n                            || this.model.traxStatus === InterfaceStatus.TransmitError\r\n                            || this.model.traxStatus === InterfaceStatus.Error\r\n                            || this.model.traxStatus === InterfaceStatus.Rejected) {\r\n                            traxReadOnly = false;\r\n                        }\r\n\r\n                        if (!traxReadOnly || this.hasCPTraxEditPrivilege) {\r\n                            this.canEdit = true;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    startLockRefresh(cashId: number, documentReference: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Cash Document';\r\n        resourceInformation.resourceId = cashId;\r\n        resourceInformation.resourceCode = documentReference;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n    getInterfaceStatus(interfaceStatus: number) {\r\n        switch (interfaceStatus) {\r\n            case InterfaceStatus.ReadyToTransmit:\r\n                this.isAccInterfaceStatusSuccess = true;\r\n                return 'Ready To Transmit';\r\n                break;\r\n            case InterfaceStatus.StandBy:\r\n                this.isAccInterfaceStatusSuccess = true;\r\n                return 'Stand By';\r\n                break;\r\n            case InterfaceStatus.TransmitError:\r\n                this.isAccInterfaceStatusSuccess = false;\r\n                return 'Transmit Error';\r\n                break;\r\n            case InterfaceStatus.Interfaced:\r\n                this.isAccInterfaceStatusSuccess = true;\r\n                return 'Interfaced';\r\n                break;\r\n            case InterfaceStatus.Error:\r\n                this.isAccInterfaceStatusSuccess = false;\r\n                return 'Error';\r\n                break;\r\n            case InterfaceStatus.Rejected:\r\n                this.isAccInterfaceStatusSuccess = false;\r\n                return 'Rejected';\r\n                break;\r\n            case InterfaceStatus.Signed:\r\n                this.isAccInterfaceStatusSuccess = true;\r\n                return 'Signed';\r\n                break;\r\n            case InterfaceStatus.NotPosted:\r\n                this.isAccInterfaceStatusSuccess = false;\r\n                return 'NotPosted';\r\n                break;\r\n            default:\r\n                return InterfaceStatus[interfaceStatus];\r\n                break;\r\n        }\r\n    }\r\n    getTraxStatus(traxStatus: number) {\r\n        switch (traxStatus) {\r\n            case InterfaceStatus.ReadyToTransmit:\r\n                this.isTraxStatusSuccess = true;\r\n                return 'Ready To Transmit';\r\n                break;\r\n            case InterfaceStatus.StandBy:\r\n                this.isTraxStatusSuccess = true;\r\n                return 'Stand By';\r\n                break;\r\n            case InterfaceStatus.TransmitError:\r\n                this.isTraxStatusSuccess = false;\r\n                return 'Transmit Error';\r\n                break;\r\n            case InterfaceStatus.Interfaced:\r\n                this.isTraxStatusSuccess = true;\r\n                return 'Interfaced';\r\n                break;\r\n            case InterfaceStatus.Error:\r\n                this.isTraxStatusSuccess = false;\r\n                return 'Error';\r\n                break;\r\n            case InterfaceStatus.Rejected:\r\n                this.isTraxStatusSuccess = false;\r\n                return 'Rejected';\r\n                break;\r\n            case InterfaceStatus.Signed:\r\n                this.isTraxStatusSuccess = true;\r\n                return 'Signed';\r\n                break;\r\n            default:\r\n                return InterfaceStatus[traxStatus];\r\n                break;\r\n        }\r\n    }\r\n    getPostingStatus(status: number) {\r\n        switch (status) {\r\n            case PostingStatus.Authorized:\r\n                this.isPostingStatusSuccess = true;\r\n                return 'Authorized';\r\n                break;\r\n            case PostingStatus.Deleted:\r\n                this.isPostingStatusSuccess = true;\r\n                return 'Deleted';\r\n                break;\r\n            case PostingStatus.Held:\r\n                this.isPostingStatusSuccess = false;\r\n                return 'Held';\r\n                break;\r\n            case PostingStatus.Incomplete:\r\n                this.isPostingStatusSuccess = true;\r\n                return 'Incomplete';\r\n                break;\r\n            case PostingStatus.MappingError:\r\n                this.isPostingStatusSuccess = false;\r\n                return 'MappingError';\r\n                break;\r\n            case PostingStatus.Posted:\r\n                this.isPostingStatusSuccess = true;\r\n                return 'Posted';\r\n                break;\r\n            default:\r\n                return PostingStatus[status];\r\n                break;\r\n        }\r\n    }\r\n\r\n    bindDocumentStatusDetail(model: CashRecord) {\r\n        // bind status details\r\n\r\n        this.traxStatus = this.getTraxStatus(model.traxStatus);\r\n        this.accInterfaceStatus = this.getInterfaceStatus(model.interfaceStatus);\r\n        this.postingStatus = this.getPostingStatus(model.status);\r\n\r\n        this.showTraxStatus = this.traxStatus ? true : false;\r\n        this.showAccInterfaceStatus = this.accInterfaceStatus ? true : false;\r\n        this.showPostingStatus = this.postingStatus ? true : false;\r\n\r\n        this.errorMessage = model.interfaceErrorMessage ?\r\n            model.interfaceErrorMessage : model.postingErrorMessage;\r\n    }\r\n\r\n    initFABActions() {\r\n        this.fabTitle = 'Cash Mini FAB';\r\n        this.fabType = FABType.MiniFAB;\r\n\r\n        const actionNewCash: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'New',\r\n            action: 'newCash',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n        const actionEditCash: FloatingActionButtonActions = {\r\n            icon: 'edit',\r\n            text: 'Edit',\r\n            action: 'editCash',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n        const actionDeleteCash: FloatingActionButtonActions = {\r\n            icon: 'delete',\r\n            text: 'Delete',\r\n            action: 'deleteCash',\r\n            disabled: false,\r\n            index: 2,\r\n        };\r\n\r\n        if (this.canCreate) {\r\n            this.fabMenuActions.push(actionNewCash);\r\n            if(this.canEdit){\r\n                this.fabMenuActions.push(actionEditCash);\r\n                this.fabMenuActions.push(actionDeleteCash);\r\n            }\r\n        }\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'newCash': {\r\n                this.onNewCashButtonClicked();\r\n                break;\r\n            }\r\n            case 'editCash': {\r\n                this.onEditClicked();\r\n                break;\r\n            }\r\n            case 'deleteCash': {\r\n                this.onDeleteClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"showGrid\\\"\\r\\n          fxFlex=100%\\r\\n          style=\\\"padding:20px;\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Documents paid</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <atlas-grid-enlargement *ngIf=\\\"invoiceSummaryGridOptions\\\"\\r\\n                                [gridOptions]=\\\"invoiceSummaryGridOptions\\\"\\r\\n                                [userPreferencesParameters]=\\\"gridPreferences\\\">\\r\\n        </atlas-grid-enlargement>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div ag-grid=\\\"invoiceSummaryGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [columnDefs]=\\\"invoiceSummaryGridColumns\\\"\\r\\n                         [rowData]=\\\"invoiceSummaryGridRows\\\"\\r\\n                         [gridOptions]=\\\"invoiceSummaryGridOptions\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         [singleClickEdit]=\\\"true\\\"\\r\\n                         [suppressRowClickSelection]=\\\"true\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { CharterDisplayView } from '../../../../../shared/models/charter-display-view';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { CashMatching } from '../../../../../shared/services/execution/dtos/cash-matching';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { CashSummaryGrid } from '../../../../../shared/services/execution/dtos/cash-summary-grid-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { CommonMethods } from '../../../../services/execution-cash-common-methods';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-grid-for-summary',\r\n    templateUrl: './invoice-grid-for-summary.component.html',\r\n    styleUrls: ['./invoice-grid-for-summary.component.scss'],\r\n})\r\nexport class InvoiceGridForSummaryComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n\r\n    company: string;\r\n    cashOption: boolean;\r\n    cashTypeId: number;\r\n    invoiceSummaryGridOptions: agGrid.GridOptions = {};\r\n    invoiceSummaryGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    invoiceSummaryGridRows: CashMatching[];\r\n    cashSummaryvalues: CashSummaryGrid[];\r\n    isGroupingEnabled: boolean = false;\r\n    gridApi: agGrid.GridApi;\r\n    documentTypePI: string = 'PI';\r\n    documentTypeSI: string = 'SI';\r\n    showGrid = true;\r\n    charters: CharterDisplayView[];\r\n    masterData: MasterData;\r\n\r\n    gridPreferences: UserGridPreferencesParameters;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private formatDate: FormatDatePipe,\r\n        protected uiService: UiService,\r\n        private executionService: ExecutionService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.cashTypeId = Number(this.route.snapshot.paramMap.get('cashTypeId'));\r\n        this.cashOption = (this.cashTypeId === CashType.CashPayment ? true : false);\r\n        this.initializeGridColumns();\r\n\r\n\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n    onGridReady(params) {\r\n        params.columnApi.autoSizeColumns();\r\n        params.columnDefs = this.invoiceSummaryGridColumns;\r\n        this.invoiceSummaryGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n\r\n        this.gridPreferences = null;\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.invoiceSummaryGridColumns = [\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                pinned: 'left',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Secondary Document Reference',\r\n                field: 'secondaryDocumentReference',\r\n                colId: 'secondaryDocumentReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Document Date',\r\n                field: 'documentDate',\r\n                colId: 'documentDate',\r\n                hide: false,\r\n                valueFormatter: this.dateFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Value Date',\r\n                field: 'valueDate',\r\n                colId: 'valueDate',\r\n                hide: false,\r\n                valueFormatter: this.dateFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'External Reference',\r\n                field: 'externalReference',\r\n                colId: 'externalReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charterCode',\r\n                colId: 'charterCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Invoice Type',\r\n                field: 'documentType',\r\n                colId: 'documentType',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                type: 'numericColumn',\r\n                colId: 'amount',\r\n                hide: this.cashOption === false,\r\n                valueGetter: this.getAmountValue,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                type: 'numericColumn',\r\n                colId: 'amount',\r\n                valueGetter: this.getAmountValueForReceipts,\r\n                hide: this.cashOption === true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n            },\r\n            {\r\n                headerName: 'Amount Paid',\r\n                field: 'amountToBePaid',\r\n                type: 'numericColumn',\r\n                colId: 'amountToBePaid',\r\n                hide: false,\r\n                pinned: 'right',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Amount Paid in Diff CCY',\r\n                field: 'amountPaidInDiffCcy',\r\n                colId: 'amountPaidInDiffCcy',\r\n                hide: true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n            },\r\n        ];\r\n    }\r\n    getAmountValueForReceipts(params) {\r\n        const commonMethods = new CommonMethods();\r\n        return params.data.amount *\r\n            commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                (params.data.documentType, CashType.CashReceipt, params.data, true);\r\n    }\r\n\r\n    getAmountValue(params) {\r\n        const commonMethods = new CommonMethods();\r\n        return params.data.amount *\r\n            commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                (params.data.documentType, CashType.CashPayment, params.data, true);\r\n    }\r\n    invoicesToBeSelected(invoices: CashMatching[]) {\r\n        if (invoices.length > 0) {\r\n            this.initializeGridColumns();\r\n            const commonMethod = new CommonMethods();\r\n            // fetch charter details\r\n            this.executionService.getCharters()\r\n                .subscribe((charterdata) => {\r\n                    if (charterdata.value) {\r\n                        this.charters = charterdata.value.map((charter) =>\r\n                            new CharterDisplayView(charter));\r\n                        invoices.forEach((item) => {\r\n                            item.charterCode = commonMethod.getCharterReferenceBasedOnIdFromCharterList(item.charterId, this.charters);\r\n                        });\r\n                    }\r\n                });\r\n            invoices.forEach((item) => {\r\n                item.departmentCode = commonMethod.getDepartmentCodeDescriptionBasedOnIdFromMasterData\r\n                    (item.departmentId, this.masterData);\r\n            });\r\n            this.invoiceSummaryGridRows = invoices;\r\n\r\n        }\r\n    }\r\n    dateFormatter(param) {\r\n        if (param.value) { return this.formatDate.transform(param.value); }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value);\r\n        }\r\n    }\r\n    invoicesToBeSelectedForSummary(invoices: CashMatching[], summaryRecord: CashSummaryGrid[]) {\r\n        this.invoiceSummaryGridRows = this.getInvoicesForSummary(summaryRecord);\r\n        this.initializeGridColumnsFromSummary();\r\n    }\r\n    getInvoicesForSummary(summaryRecord) {\r\n        const invoices: CashMatching[] = [];\r\n        if (summaryRecord) {\r\n            const invoice = new CashMatching();\r\n            invoice.documentReference = summaryRecord.documentReference;\r\n            invoice.secondaryDocumentReference = summaryRecord.secondaryDocumentReference;\r\n            invoice.documentDate = summaryRecord.documentDate;\r\n            invoice.valueDate = summaryRecord.valueDate;\r\n            invoice.documentNarrativeCode = summaryRecord.documentNarrativeCode;\r\n            invoice.amount = summaryRecord.amount;\r\n            invoice.amountToBePaid = summaryRecord.amountToBePaid;\r\n            invoice.departmentId = summaryRecord.departmentId;\r\n            invoice.currencyCode = summaryRecord.currencyCode;\r\n            invoice.documentType = summaryRecord.documentType;\r\n            invoices.push(invoice);\r\n        }\r\n        return invoices;\r\n    }\r\n    initializeGridColumnsFromSummary() {\r\n        this.invoiceSummaryGridColumns = [\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Secondary Document Reference',\r\n                field: 'secondaryDocumentReference',\r\n                colId: 'secondaryDocumentReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Document Date',\r\n                field: 'documentDate',\r\n                colId: 'documentDate',\r\n                hide: false,\r\n                valueFormatter: this.dateFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Value Date',\r\n                field: 'valueDate',\r\n                colId: 'valueDate',\r\n                hide: false,\r\n                valueFormatter: this.dateFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'External Reference',\r\n                field: 'externalReference',\r\n                colId: 'externalReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charterCode',\r\n                colId: 'charterCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Invoice Type',\r\n                field: 'documentType',\r\n                colId: 'documentType',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                colId: 'amount',\r\n                hide: false,\r\n                valueGetter: this.getAmountValue,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n            },\r\n            {\r\n                headerName: 'Amount Paid',\r\n                field: 'amountToBePaid',\r\n                colId: 'amountToBePaid',\r\n                hide: false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        if (!entity.documentMatchings ||\r\n            (entity.documentMatchings && entity.documentMatchings.length === 0)) {\r\n            this.showGrid = false;\r\n        } else {\r\n            if (entity.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n                entity.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n                this.invoicesToBeSelected(this.calculateAmountToBePaidinDifferenceCurrency(entity));\r\n            } else {\r\n                this.invoicesToBeSelected(entity.documentMatchings);\r\n            }\r\n        }\r\n        return entity;\r\n\r\n    }\r\n\r\n    calculateAmountToBePaidinDifferenceCurrency(values: CashRecord) {\r\n\r\n        if (values.documentMatchings && values.documentMatchings.length > 0) {\r\n            values.documentMatchings.forEach((item) => item.amountPaidInDiffCcy =\r\n                values.matchingRateType === 'M'\r\n                    ? item.amountToBePaid * values.matchingRate\r\n                    : item.amountToBePaid / values.matchingRate);\r\n        }\r\n        return values.documentMatchings;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     *ngIf=\\\"cashTypeId==cashType.CashPayment\\\">\\r\\n    <mat-horizontal-stepper [linear]\\r\\n                            (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                            #stepper>\\r\\n        <ng-template matStepperIcon=\\\"edit\\\">\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </ng-template>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Cash Type</ng-template>\\r\\n            <atlas-cash-selection-form-component #selectionFormComponent\\r\\n                                                 (checkBoxValueChange)=\\\"onCheckBoxValueChange($event)\\\"\\r\\n                                                 (cashOptionSelected)=\\\"onCashOptionSelected($event)\\\">\\r\\n            </atlas-cash-selection-form-component>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClickedForCashSelectionType()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                </div>\\r\\n\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\"\\r\\n                     matTooltip=\\\"Select the Cash Type\\\"\\r\\n                     [matTooltipDisabled]=\\\"!isDisabled\\\">\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"onPaymentNextButtonClicked()\\\"\\r\\n                            [disabled]=\\\"isDisabled\\\">\\r\\n                        NEXT\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n        <div *ngIf=\\\"!isSimpleCashSelected\\\">\\r\\n            <mat-step [completed]=\\\"isCompleted\\\">\\r\\n                <ng-template matStepLabel>Pick Transaction</ng-template>\\r\\n                <atlas-pick-transaction #pickTransactionComponent\\r\\n                                        (setNarrative)=\\\"onSetNarrative($event)\\\"\\r\\n                                        (totalBalanceCalculated)=\\\"onTotalBalanceCalculated($event)\\\"\\r\\n                                        (cashDetailsDefaultValues)=\\\"onInvoiceSearchValuesEntered($event)\\\"\\r\\n                                        (invoicesSelected)=\\\"onInvoicesSelected($event)\\\"\\r\\n                                        (calculateTotalBalanceOnCostAmountEnter)=\\\"calculateTotalBalanceOnCostAmountEnter()\\\"\\r\\n                                        (AmountEnterOrInvoiceSelection)=\\\"onAmountEnterOrInvoiceSelection()\\\">\\r\\n                </atlas-pick-transaction>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onPreviousButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isPreviousButtonDisabled\\\">\\r\\n                                PREVIOUS\\r\\n                            </button>\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onMatchSelectedButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isDisabled\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </div>\\r\\n        <mat-step [completed]=\\\"isCompleted\\\">\\r\\n            <form [formGroup] =\\\"cashFormGroup\\\">\\r\\n                <ng-template matStepLabel>Details</ng-template>\\r\\n                <atlas-cash-details-form-component #cashDetailsFormComponent\\r\\n                                                   (currencySearchValue)=\\\"onCurrencySearchValueEntered($event)\\\"\\r\\n                                                   (previewToggleSelected)=\\\"onPreviewToggleSelected($event)\\\"\\r\\n                                                   (templateSelected)=\\\"onTemplateSelected($event)\\\"\\r\\n                                                   (calculateTotalBalanceOnCostAmountEnter)=\\\"calculateTotalBalanceOnCostAmountEnterInCashDetails($event)\\\"\\r\\n                                                   (amountSearchValue)=\\\"onAmountSearchValueEntered($event)\\\"\\r\\n                                                   (calculateCashAmountWithoutCost)=\\\"onEditCalculateCashAmountWithoutCost($event)\\\">\\r\\n                </atlas-cash-details-form-component>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onPreviousButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"saveInProgress\\\">\\r\\n                                PREVIOUS\\r\\n                            </button>\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onCreateButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"saveInProgress\\\">\\r\\n                                {{ hasPreviewDocument ? 'Preview and save' : 'Save' }}\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                </form>\\r\\n        </mat-step>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Summary</ng-template>\\r\\n            <atlas-cash-summary-form-component #cashSummaryFormComponent\\r\\n                                               [isCreationMode]=\\\"isCreation\\\">\\r\\n            </atlas-cash-summary-form-component>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onNewTransactionClicked()\\\">\\r\\n                            NEW TRANSACTION\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onNewDocumentClicked()\\\">\\r\\n                            NEW DOCUMENT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n    </mat-horizontal-stepper>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div class=\\\"main-container\\\"\\r\\n     *ngIf=\\\"cashTypeId==cashType.CashReceipt\\\">\\r\\n    <mat-horizontal-stepper [linear]\\r\\n                            (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                            #stepper>\\r\\n        <ng-template matStepperIcon=\\\"edit\\\">\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </ng-template>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Cash Type</ng-template>\\r\\n            <atlas-cash-selection-form-component #selectionFormComponent\\r\\n                                                 (checkBoxValueChange)=\\\"onCheckBoxValueChange($event)\\\"\\r\\n                                                 (cashOptionSelected)=\\\"onCashOptionSelected($event)\\\">\\r\\n            </atlas-cash-selection-form-component>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClickedForCashSelectionType()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\"\\r\\n                     matTooltip=\\\"Select the Cash Type\\\"\\r\\n                     [matTooltipDisabled]=\\\"!isDisabled\\\">\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"onNextReceiptButtonClicked()\\\"\\r\\n                            [disabled]=\\\"isDisabled\\\">\\r\\n                        NEXT\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n        <mat-step [completed]=\\\"isCompleted\\\">\\r\\n            <form [formGroup]=\\\"cashFormGroup\\\">\\r\\n                <ng-template matStepLabel>Details</ng-template>\\r\\n                <atlas-cash-details-form-component #cashDetailsFormComponent\\r\\n                                                   (counterpartySearchValues)=\\\"onCounterpartySearchValueEntered($event)\\\"\\r\\n                                                   (currencySearchValue)=\\\"onCurrencySearchValueEntered($event)\\\"\\r\\n                                                   (departmentSearchValue)=\\\"onDepartmentSearchValueEntered($event)\\\"\\r\\n                                                   (amountSearchValue)=\\\"onAmountSearchValueEntered($event)\\\"\\r\\n                                                   (currencyCardInitialValues)=\\\"onCurrencyCardValuesEntered($event)\\\"\\r\\n                                                   (currencyCardFinalRowType)=\\\"onFinalRoeTypeEntered($event)\\\"\\r\\n                                                   (fxRateValueCalculated)=\\\"onFinalFxRateValueEntered($event)\\\"\\r\\n                                                   (calculateTotalBalanceOnCostAmountEnter)=\\\"calculateTotalBalanceOnCostAmountEnterInCashDetails($event)\\\"\\r\\n                                                   (templateSelected)=\\\"onTemplateSelected($event)\\\"\\r\\n                                                   (previewToggleSelected)=\\\"onPreviewToggleSelected($event)\\\"\\r\\n                                                   (calculateCashAmountWithoutCost)=\\\"onEditCalculateCashAmountWithoutCost($event)\\\">\\r\\n                </atlas-cash-details-form-component>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onPreviousButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isPreviousButtonDisabled\\\">\\r\\n                                PREVIOUS\\r\\n                            </button>\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onNextButtonClicked()\\\"\\r\\n                                    [hidden]=\\\"selectionValue == cashSelectionType.SimpleCashReceipt\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                            <button mat-raised-button\\r\\n                                    *ngIf=\\\"selectionValue == cashSelectionType.SimpleCashReceipt\\\"\\r\\n                                    (click)=\\\"onCreateButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"saveInProgress\\\">\\r\\n                                {{ hasPreviewDocument ? 'Preview and save' : 'Save' }}\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </form>\\r\\n        </mat-step>\\r\\n        <mat-step [completed]=\\\"isCompleted\\\">\\r\\n            <ng-template matStepLabel>Pick Transaction</ng-template>\\r\\n            <atlas-pick-transaction (proceedClickedCashReceipt)=\\\"onProceedClickedCashReceipt()\\\"\\r\\n                                    (invoicesSelected)=\\\"onInvoicesSelected($event)\\\"\\r\\n                                    (totalAmountCalculated)=\\\"onTotalAmountCalculated($event)\\\"\\r\\n                                    (calculateTotalBalanceOnCostAmountEnter)=\\\"calculateTotalBalanceOnCostAmountEnter($event)\\\"\\r\\n                                    (AmountEnterOrInvoiceSelection)=\\\"onAmountEnterOrInvoiceSelection()\\\"\\r\\n                                    #pickTransactionComponent></atlas-pick-transaction>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start \\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onPreviousButtonClicked()\\\"\\r\\n                                [disabled]=\\\"saveInProgress\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onCreateReceiptButtonClicked()\\\"\\r\\n                                [disabled]=\\\"saveInProgress\\\">\\r\\n                            {{ hasPreviewDocument ? 'Preview and save' : 'Save' }}\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Summary</ng-template>\\r\\n            <atlas-cash-summary-form-component #cashSummaryFormComponent\\r\\n                                               [isCreationMode]=\\\"isCreation\\\">\\r\\n            </atlas-cash-summary-form-component>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onNewTransactionClicked()\\\">\\r\\n                            NEW TRANSACTION </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onNewDocumentClicked()\\\">\\r\\n                            NEW DOCUMENT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n    </mat-horizontal-stepper>\\r\\n</div>\\r\\n\"","module.exports = \".mat-stepper-horizontal {\\n  background-color: transparent; }\\n\"","import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { AfterViewInit, ChangeDetectorRef, Component, HostListener, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { combineLatest, of, Subscription, throwError } from 'rxjs';\r\nimport { catchError, finalize, mergeMap } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { DocumentGenerationConfirmationDialogBoxComponent } from '../../../shared/components/document-generation-confirmation-dialog-box/document-generation-confirmation-dialog-box.component';\r\nimport { AdditionalCost } from '../../../shared/entities/additional-cost.entity';\r\nimport { Company } from '../../../shared/entities/company.entity';\r\nimport { Currency } from '../../../shared/entities/currency.entity';\r\nimport { DocumentPopupButtonSettings } from '../../../shared/entities/document-popup-button-settings.entity';\r\nimport { PhysicalDocumentReference } from '../../../shared/entities/document-reference.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { CashSelectionType } from '../../../shared/enums/cash-selection-type';\r\nimport { CashStepperType } from '../../../shared/enums/cash-stepper-type.enum';\r\nimport { CashType } from '../../../shared/enums/cash-type.enum';\r\nimport { CostDirections } from '../../../shared/enums/cost-direction.enum';\r\nimport { DocumentEntityTypes } from '../../../shared/enums/document-entity-type.enum';\r\nimport { DocumentTypes } from '../../../shared/enums/document-type.enum';\r\nimport { GenerateDocumentActions } from '../../../shared/enums/generate-document-action.enum';\r\nimport { ConvertToNumber } from '../../../shared/numberMask';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { CashMatching } from '../../../shared/services/execution/dtos/cash-matching';\r\nimport { CashRecord } from '../../../shared/services/execution/dtos/cash-record';\r\nimport { CashSummaryGrid } from '../../../shared/services/execution/dtos/cash-summary-grid-record';\r\nimport { InvoiceForCashMatching } from '../../../shared/services/execution/dtos/invoice-for-cash';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { ForeignExchangeService } from '../../../shared/services/http-services/foreign-exchange.service';\r\nimport { PreaccountingService } from '../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { CommonMethods } from '../../services/execution-cash-common-methods';\r\nimport { AdditionalCostListDisplayView } from './cash-details/additional-costs/additional-cost-list-display-view';\r\nimport { CashDetailsFormComponent } from './cash-details/cash-details.component';\r\nimport { CashWarningDialogComponentComponent } from './cash-dialog-component/cash-warning-dialog-component/cash-warning-dialog-component.component';\r\nimport { CashSelectionFormComponent } from './cash-selection/cash-selection.component';\r\nimport { CashSummaryFormComponent } from './cash-summary/cash-summary.component';\r\nimport { PickTransactionComponent } from './pick-transaction/pick-transaction.component';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-cash-create',\r\n    templateUrl: './execution-cash-create.component.html',\r\n    styleUrls: ['./execution-cash-create.component.scss'],\r\n})\r\nexport class ExecutionCashCreateComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    private readonly postingWarning = 'Neither the \"Authorize for Posting\" nor \"Transmit to Treasury System\" toggle buttons are enabled.';\r\n    private formComponents: BaseFormComponent[] = [];\r\n    private saveCashSubscription: Subscription;\r\n    private readonly popupButtonSettings: DocumentPopupButtonSettings = {\r\n        createButtonText: 'Create Payment Order without modification',\r\n        uploadButtonText: 'Upload and create payment order',\r\n        createButtonTooltip: 'Generate the cash from Atlas',\r\n        uploadButtonTooltip: 'Create a cash from the file you edited and saved from your computer',\r\n    };\r\n    currentStep: number = 0;\r\n    isValid: boolean = false;\r\n    cashFormGroup: FormGroup;\r\n    company: string;\r\n    isDisabled = true;\r\n    masterdata: MasterData;\r\n    costCurrency: string;\r\n    fxRateValue: number;\r\n    roeTypeValue: string;\r\n    balance: number;\r\n    selectionValue: number;\r\n    invoiceRecord: CashSummaryGrid[];\r\n    index: number;\r\n    initialFxRateValue: number;\r\n    finalFxRateValue: number;\r\n    initialRoeType: string;\r\n    isFxRateValid: boolean;\r\n    finalRoeType: string;\r\n    bankCurrency: string;\r\n    totalAmount: number;\r\n    model: CashRecord;\r\n    invoiceForCashMatchingModel: InvoiceForCashMatching;\r\n    totalbalance: number;\r\n    documentTypePI: string = 'PI';\r\n    documentTypeSI: string = 'SI';\r\n    isDialogClosed: boolean;\r\n    cashSteps: { [key: string]: number } = {\r\n        cashCreationStep: 0,\r\n        pickTransactionStep: 1,\r\n        cashDetailsStep: 2,\r\n        cashSummaryStep: 3,\r\n    };\r\n    cashTypeId: number;\r\n    cashSelectionId: number;\r\n    saveInProgress: boolean;\r\n    cashType = CashType;\r\n    cashSelectionType = CashSelectionType;\r\n    transactionDocumentId: number;\r\n    matchingChashId: number;\r\n    mappingFields = new Array();\r\n    isNewDoc: boolean = false;\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('selectionFormComponent') selectionFormComponent: CashSelectionFormComponent;\r\n    @ViewChild('cashDetailsFormComponent') cashDetailsFormComponent: CashDetailsFormComponent;\r\n    @ViewChild('cashSummaryFormComponent') cashSummaryFormComponent: CashSummaryFormComponent;\r\n    @ViewChild('pickTransactionComponent') pickTransactionComponent: PickTransactionComponent;\r\n\r\n    cashId: number;\r\n    subscriptions: Subscription[] = [];\r\n    isEdit: boolean;\r\n    documentReferenceNumber: string;\r\n    hasPreviewDocument = false;\r\n    hasTemplate = false;\r\n    isCreation: boolean = true;\r\n\r\n    companyConfiguration: Company;\r\n    cashCurrencyRoeType: string;\r\n    cashCurrencyRate: number;\r\n\r\n    functionalStatutoryCurrencyRoeType: string = 'M';\r\n    functionalStatutoryCurrenyRate: number = 1;\r\n\r\n    isPreviousButtonDisabled: boolean;\r\n    matchedDocumentReference: string;\r\n    isSave: boolean = false;\r\n    costDirectionId: number;\r\n    previousCashDetails: InvoiceForCashMatching;\r\n    isCompleted: boolean = false;\r\n    isSimpleCashSelected: boolean = false;\r\n    pickTransactionComponentInitial: any;\r\n    private readonly postingWarningForReceipts = '\"Authorise for Posting\" toggle button is not ticked';\r\n    private readonly postingWarningTitle = 'Warning Message';\r\n    private readonly postingWarningTitleForReceipts = 'Cash without authorization';\r\n    private readonly postingWarningWhenBothbuttonEnabled = 'Both the \"Authorize for Posting\" and \"Transmit to Treasury System\" toggle buttons can not be enabled.';\r\n\r\n    constructor(\r\n        private companyManager: CompanyManagerService,\r\n        private cdr: ChangeDetectorRef,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected formBuilder: FormBuilder,\r\n        private executionService: ExecutionService,\r\n        private snackbarService: SnackbarService,\r\n        private preAccountingService: PreaccountingService,\r\n        protected dialog: MatDialog,\r\n        private utilService: UtilService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private documentService: DocumentService,\r\n        private documentPopupService: DocumentPopupService,\r\n        private foreignExchangeService: ForeignExchangeService,\r\n        private titleService: TitleService,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.cashTypeId = Number(this.route.snapshot.paramMap.get('cashTypeId'));\r\n        this.costDirectionId = this.cashTypeId;\r\n        this.cashId = Number(this.route.snapshot.paramMap.get('cashId'));\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.titleService.setTitle('Cash Creation');\r\n        this.cashFormGroup = this.formBuilder.group({\r\n            dummyFormControl: new FormControl(),\r\n        });\r\n        this.isPreviousButtonDisabled = false;\r\n        this.getFxrateForFunctionalToStatutoryCurrencyConversion();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        if (this.route.snapshot.url.length > 0 && this.route.snapshot.url[1].path.toString() === 'edit') {\r\n            this.isEdit = true;\r\n            this.populateCashDetails();\r\n        }\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.isNewDoc = (params['isNewDoc']);\r\n            this.selectionValue = params['selectedCashTypeId'];\r\n        });\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.cashFormGroup = this.formBuilder.group({\r\n            selectionFormComponent: this.selectionFormComponent.getFormGroup(),\r\n            cashDetailsFormComponent: this.cashDetailsFormComponent.getFormGroup(),\r\n            pickTransactionComponent: this.pickTransactionComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.selectionFormComponent,\r\n            this.cashDetailsFormComponent,\r\n            this.pickTransactionComponent);\r\n\r\n        if (this.isNewDoc) {\r\n            this.bindSelectedCashTypeForNewDocument();\r\n        }\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    canDeactivate() {\r\n        this.assignPickTransactionIfNull();\r\n        if ((this.cashDetailsFormComponent.createCashCurrencyFormGroup.dirty\r\n            || this.cashDetailsFormComponent.createCashFormGroup.dirty\r\n            || this.pickTransactionComponent.pickTransactionFormGroup.dirty) && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if ((this.cashDetailsFormComponent.createCashCurrencyFormGroup.dirty\r\n            || this.cashDetailsFormComponent.createCashFormGroup.dirty\r\n            || this.pickTransactionComponent.pickTransactionFormGroup.dirty) && this.isSave === false) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    assignPickTransactionIfNull() {\r\n        if (!this.pickTransactionComponent) {\r\n            this.pickTransactionComponent = this.pickTransactionComponentInitial;\r\n        }\r\n    }\r\n\r\n    onCreateButtonClicked() {\r\n        this.isSave = true;\r\n        this.isCompleted = true;\r\n        // Call service to create cash.\r\n        if (this.isCashFormValid()\r\n            && this.cashDetailsFormComponent.additionalCostsFormComponent.isAdditionalCostValid()) {\r\n            if (this.hasTemplate && this.hasPreviewDocument) {\r\n                this.createOrUpdateCash(true);\r\n            } else {\r\n                this.createOrUpdateCash();\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n        }\r\n    }\r\n\r\n    createOrUpdateCash(isDraft = false) {\r\n        const cashRecord = this.generateCashRecord();\r\n        if (this.isPostingAndTraxChecked(cashRecord)) {\r\n            this.snackbarService.throwErrorSnackBar(this.postingWarningWhenBothbuttonEnabled);\r\n            return;\r\n        } else if (this.isPostingChecked(cashRecord) && !isDraft) {\r\n            const dialog = this.showPostingWarning();\r\n            dialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.cashId ? this.updateCash(cashRecord) : this.createCash(cashRecord, isDraft);\r\n                }\r\n            });\r\n        } else {\r\n            this.cashId ? this.updateCash(cashRecord) : this.createCash(cashRecord, isDraft);\r\n        }\r\n    }\r\n\r\n    showPostingWarning(): MatDialogRef<CashWarningDialogComponentComponent> {\r\n        const dialog = this.dialog.open(CashWarningDialogComponentComponent, {\r\n            data: {\r\n                title: this.postingWarningTitle,\r\n                text: this.cashTypeId === this.cashType.CashPayment ? this.postingWarning : this.postingWarningForReceipts,\r\n                okButton: 'Save Anyway',\r\n                cancelButton: 'Discard',\r\n                editButton: 'Edit Cash',\r\n            },\r\n        });\r\n\r\n        return dialog;\r\n    }\r\n\r\n    isPostingChecked(cashRecord: CashRecord): boolean {\r\n        return (cashRecord.authorizedForPosting === false &&\r\n            (cashRecord.toTransmitToTreasury === undefined || cashRecord.toTransmitToTreasury === false));\r\n    }\r\n\r\n    isPostingAndTraxChecked(cashRecord: CashRecord): boolean {\r\n        return (cashRecord.authorizedForPosting === true && cashRecord.toTransmitToTreasury === true);\r\n    }\r\n\r\n    createCash(cashRecord: CashRecord, isDraft = false) {\r\n        this.saveInProgress = true;\r\n        let dialog: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>;\r\n        const messageGenerating = 'Generating payment order' + (isDraft ? ' preview' : '') + '... Please wait.';\r\n        if (isDraft) {\r\n            dialog = this.documentPopupService.showDocumentGenerationPopup('Payment order', 'payment order', this.popupButtonSettings);\r\n            if (this.isPostingChecked(cashRecord)) {\r\n                dialog.componentInstance.bannerDescription = this.postingWarning;\r\n            }\r\n            this.documentPopupService.startDialogWork(dialog, messageGenerating);\r\n        } else {\r\n            this.snackbarService.informationSnackBar(messageGenerating);\r\n        }\r\n        cashRecord.isDraft = isDraft;\r\n        this.executionService.createCash(cashRecord)\r\n            .pipe(\r\n                mergeMap((cash: CashRecord) => {\r\n                    const messageGenerated = (cash.physicalDocumentId ? 'Document' : 'Cash') + ' generated successfully';\r\n                    if (dialog) {\r\n                        dialog.componentInstance.processMessage = messageGenerated;\r\n                    } else {\r\n                        this.snackbarService.informationSnackBar(messageGenerated);\r\n                    }\r\n                    return combineLatest(\r\n                        (cash.physicalDocumentId) ?\r\n                            this.documentService.getGeneratedDocumentContent(cash.physicalDocumentId, isDraft)\r\n                            : of(null),\r\n                        of(cash));\r\n                }),\r\n                catchError((error) => {\r\n                    if (dialog) {\r\n                        dialog.close();\r\n                    }\r\n\r\n                    return throwError(error);\r\n                }),\r\n                finalize(() => {\r\n                    this.saveInProgress = false;\r\n                    this.documentPopupService.finishDialogWork(dialog);\r\n                }),\r\n            )\r\n            .subscribe(([response, cash]) => {\r\n                cash.documentMatchings = cashRecord.documentMatchings;\r\n                if (!isDraft) {\r\n                    this.afterCreateCash(cash);\r\n                } else {\r\n                    this.handleDialogEvents(cash, dialog);\r\n                }\r\n                if (response) {\r\n                    this.downloadFile(response);\r\n                }\r\n            });\r\n    }\r\n\r\n    downloadFile(response: HttpResponse<Blob>) {\r\n        const newBlob = new Blob(\r\n            [response.body],\r\n            { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n        const data = this.window.URL.createObjectURL(newBlob);\r\n        const link = document.createElement('a');\r\n        link.href = data;\r\n        link.download = this.utilService.getFileNameFromContentDisposition(response);\r\n        link.click();\r\n    }\r\n\r\n    handleDialogEvents(cashRecord: CashRecord,\r\n        dialog: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>) {\r\n\r\n        this.subscriptions.push(dialog.componentInstance.documentSelected\r\n            .subscribe((file: File) => {\r\n                this.onFileSelected(dialog, cashRecord, file);\r\n            }));\r\n\r\n        this.subscriptions.push(dialog.afterClosed()\r\n            .subscribe((answer) => {\r\n                this.onDialogClosed(answer);\r\n            }));\r\n    }\r\n\r\n    onFileSelected(dialog: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>,\r\n        cashRecord: CashRecord,\r\n        file: File) {\r\n        this.documentPopupService.startDialogWork(dialog, 'Uploading document...');\r\n        const documentType = this.mapCashSelectionTypeToPhysicalDocumentType(cashRecord.childCashTypeId);\r\n        this.subscriptions.push(this.documentService.uploadDocument(\r\n            cashRecord.cashId,\r\n            documentType,\r\n            cashRecord.template,\r\n            true,\r\n            file)\r\n            .pipe(\r\n                mergeMap((document: PhysicalDocumentReference) => {\r\n                    dialog.componentInstance.processMessage = 'Generating final document...';\r\n                    const finalCash = this.generateCashRecord();\r\n                    finalCash.physicalDocumentId = document.physicalDocumentId;\r\n                    return this.executionService.createCash(finalCash);\r\n                }),\r\n                mergeMap((cash: CashRecord) => {\r\n                    dialog.componentInstance.processMessage = 'Downloading final document...';\r\n                    return combineLatest(this.documentService.getGeneratedDocumentContent(cash.physicalDocumentId), of(cash));\r\n                }),\r\n                finalize(() => {\r\n                    this.documentPopupService.finishDialogWork(dialog);\r\n                }),\r\n            ).subscribe(\r\n                ([response, cash]) => {\r\n                    cash.documentMatchings = cashRecord.documentMatchings;\r\n                    this.downloadFile(response);\r\n                    this.afterCreateCash(cash);\r\n                    dialog.close();\r\n                },\r\n                (error: HttpErrorResponse) => {\r\n                    dialog.componentInstance.errorMessage = this.documentPopupService.getErrorMessage(error, DocumentEntityTypes.Cash);\r\n                },\r\n            ));\r\n    }\r\n\r\n    mapCashSelectionTypeToPhysicalDocumentType(cashSelectionType: CashSelectionType): DocumentTypes {\r\n        switch (cashSelectionType) {\r\n            case CashSelectionType.SimpleCashPayment:\r\n            case CashSelectionType.SimpleCashReceipt:\r\n                return DocumentTypes.CashSimpleCash;\r\n            case CashSelectionType.PaymentFullPartialTransaction:\r\n            case CashSelectionType.ReceiptFullPartialTransaction:\r\n                return DocumentTypes.CashPickByTransaction;\r\n            case CashSelectionType.PaymentDifferentCurrency:\r\n            case CashSelectionType.ReceiptDifferentCurrency:\r\n                return DocumentTypes.CashDifferentCurrency;\r\n            case CashSelectionType.PaymentDifferentClient:\r\n                return DocumentTypes.CashDifferentClient;\r\n            default:\r\n                console.error('Invalid cash selection type: %s', cashSelectionType);\r\n        }\r\n    }\r\n\r\n    onDialogClosed(dialogAnswer: any) {\r\n        if (dialogAnswer && dialogAnswer['buttonClicked']) {\r\n            if (dialogAnswer['buttonClicked'] === GenerateDocumentActions.ConfirmDocumentGeneration) {\r\n                const cashRecord = this.generateCashRecord();\r\n                this.createCash(cashRecord);\r\n            }\r\n        }\r\n    }\r\n\r\n    generateCashRecord(): CashRecord {\r\n        let cashRecord = new CashRecord();\r\n        cashRecord.cashTypeId = this.cashTypeId;\r\n        cashRecord.costDirectionId = this.cashTypeId;\r\n        cashRecord.childCashTypeId = this.selectionValue;\r\n        this.assignPickTransactionIfNull();\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        cashRecord = this.getCreateCashInfo(cashRecord);\r\n        cashRecord.ownerName = (this.cashTypeId === CashType.CashPayment ?\r\n            cashRecord.payee : cashRecord.payer);\r\n        cashRecord.nominalAccountCode = cashRecord.nominalAccountCode ? cashRecord.nominalAccountCode.toString() : '';\r\n        // if cash is by diff ccy , assign cash ammount to MatchingAmount\r\n        if (this.selectionValue === CashSelectionType.PaymentDifferentCurrency) {\r\n            // Consider ex  With diff ccy USD=>EUR\r\n            // amount will be in EUR\r\n            // MatchedAmount will be in USD\r\n\r\n            cashRecord.matchingAmount = cashRecord.amount;\r\n            // To convert from EUR to USD we need to do opposite action for RateType\r\n            // If matchingRateType === 'D' than we need to multiplt rate*matchedamount and visa varsa\r\n            cashRecord.amount = cashRecord.matchingRateType === 'D' ?\r\n                ConvertToNumber(cashRecord.amount) * cashRecord.matchingRate\r\n                : ConvertToNumber(cashRecord.amount) / cashRecord.matchingRate;\r\n\r\n            // As per TDD in CashPayments , additionalcost amount need to be deducted with total amount\r\n            if (cashRecord.additionalCostDetails && cashRecord.additionalCostDetails.length > 0) {\r\n                let totalAdditonalCostAmount = cashRecord.additionalCostDetails\r\n                    .map((c) => c.amount)\r\n                    .reduce((sum, current) => sum + current);\r\n                cashRecord.matchingAmount -= totalAdditonalCostAmount;\r\n                totalAdditonalCostAmount = cashRecord.matchingRateType === 'D' ?\r\n                    ConvertToNumber(totalAdditonalCostAmount) * cashRecord.matchingRate\r\n                    : ConvertToNumber(totalAdditonalCostAmount) / cashRecord.matchingRate;\r\n                cashRecord.amount -= totalAdditonalCostAmount;\r\n\r\n            }\r\n\r\n        } else if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            cashRecord.matchingAmount = cashRecord.amount;\r\n            // convert payment currency amount to matchec ccy amount\r\n            const matchedAmount = cashRecord.matchingRateType === 'D' ?\r\n                ConvertToNumber(cashRecord.amount) * cashRecord.matchingRate\r\n                : ConvertToNumber(cashRecord.amount) / cashRecord.matchingRate;\r\n            cashRecord.amount = ConvertToNumber(matchedAmount);\r\n        }\r\n\r\n        return cashRecord;\r\n    }\r\n\r\n    updateCash(cashRecord: CashRecord) {\r\n        // Call service to update cash.\r\n        this.saveInProgress = true;\r\n        cashRecord.cashId = this.cashId;\r\n        cashRecord.transactionDocumentId = this.transactionDocumentId;\r\n        cashRecord.documentReference = this.documentReferenceNumber;\r\n        cashRecord.matchedDocumentReference = this.matchedDocumentReference;\r\n        cashRecord.matchingCashId = this.matchingChashId; // for different CCY\r\n        this.saveCashSubscription = this.executionService.updateCash(cashRecord)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.snackbarService.informationAndCopySnackBar(\r\n                        'Cash with document reference : ' + this.documentReferenceNumber + ' is updated', this.documentReferenceNumber);\r\n                    cashRecord.cashTypeId = this.selectionValue;\r\n                    this.cashSummaryFormComponent.populateCashRecord(cashRecord);\r\n                    if (this.selectionValue === CashSelectionType.SimpleCashReceipt) {\r\n                        this.stepper.selectedIndex = CashStepperType.ReceiptSummary;\r\n                    } else {\r\n                        this.stepper.next();\r\n                    }\r\n                },\r\n                (error) => {\r\n                    this.saveInProgress = false;\r\n                    this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                },\r\n                () => {\r\n                    this.saveInProgress = false;\r\n                });\r\n    }\r\n\r\n    afterCreateCash(localCashRecord: CashRecord) {\r\n        let cashIdToLoad = localCashRecord.cashId;\r\n        // In case of diff ccy, we load the payment cash\r\n        if (this.selectionValue === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            cashIdToLoad = localCashRecord.paymentCashId;\r\n        }\r\n        this.subscriptions.push(this.executionService.getCashByCashId(cashIdToLoad)\r\n            .subscribe((cashRecord) => {\r\n                cashRecord.costAlternativeCode = localCashRecord.costAlternativeCode;\r\n                cashRecord.departmentAlternativeCode = localCashRecord.departmentAlternativeCode;\r\n                cashRecord.c2CCode = localCashRecord.c2CCode;\r\n                cashRecord.nominalAlternativeAccount = localCashRecord.nominalAlternativeAccount;\r\n                cashRecord.taxInterfaceCode = localCashRecord.taxInterfaceCode;\r\n\r\n                if ((cashRecord.costAlternativeCode && cashRecord.departmentAlternativeCode && cashRecord.nominalAlternativeAccount\r\n                    && cashRecord.c2CCode) || !cashRecord.authorizedForPosting) {\r\n                    if (cashRecord.matchedDocumentReference !== null) {\r\n                        this.snackbarService.informationAndCopySnackBar(\r\n                            'Cash created with document reference: '\r\n                            + cashRecord.documentReference + '/' + cashRecord.matchedDocumentReference,\r\n                            cashRecord.documentReference + '/' + cashRecord.matchedDocumentReference);\r\n\r\n                    } else {\r\n                        this.snackbarService.informationAndCopySnackBar(\r\n                            'Cash created with document reference: ' + cashRecord.documentReference, cashRecord.documentReference);\r\n                    }\r\n                } else {\r\n                    if (!cashRecord.costAlternativeCode) {\r\n                        this.mappingFields.push('\"Cost Alternative Code\"');\r\n                    }\r\n                    if (!cashRecord.departmentAlternativeCode) {\r\n                        this.mappingFields.push('\"Department Alternative Code\"');\r\n                    }\r\n                    if (!cashRecord.nominalAlternativeAccount) {\r\n                        this.mappingFields.push('\"Nominal Account\"');\r\n                    }\r\n                    // tax code implementation is not there currently\r\n                    // if (!cashRecord.taxInterfaceCode) {\r\n                    //     this.mappingFields.push('\"Tax Code\"');\r\n                    // }\r\n                    if (!cashRecord.c2CCode) {\r\n                        this.mappingFields.push('\"C2C code\"');\r\n                    }\r\n                    const mappingErrorFields = this.mappingFields.join(', ');\r\n                    const message = 'The document ' + cashRecord.documentReference +\r\n                        ' will not be sent to the accounting interface because the accounting interface code for ' + mappingErrorFields\r\n                        + ' is/are not filled in. Please contact the accountant';\r\n                    this.snackbarService.informationAndCopySnackBar(message, message);\r\n                }\r\n\r\n                this.cashSummaryFormComponent.populateCashRecord(cashRecord);\r\n                if (this.selectionValue === CashSelectionType.SimpleCashReceipt) {\r\n                    this.stepper.selectedIndex = CashStepperType.ReceiptSummary;\r\n                } else {\r\n                    this.stepper.next();\r\n                }\r\n            }));\r\n    }\r\n\r\n    isCashFormValid(): boolean {\r\n        if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency\r\n            || this.selectionValue === CashSelectionType.PaymentDifferentCurrency) {\r\n            if (this.cashDetailsFormComponent.createCashFormGroup.valid) {\r\n                return true;\r\n            }\r\n        } else {\r\n\r\n            if (this.cashDetailsFormComponent.createCashFormGroup.valid) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    onNewDocumentClicked() {\r\n        this.isSave = true;\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/cash/new/' + encodeURIComponent(this.cashTypeId.toString())],\r\n            {\r\n                queryParams: {\r\n                    selectedCashTypeId: this.selectionValue,\r\n                    isNewDoc: true,\r\n                },\r\n            });\r\n    }\r\n    onNewTransactionClicked() {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/execution/cash/new/' + encodeURIComponent(this.cashTypeId.toString())]);\r\n    }\r\n\r\n    onInvoicesSelected(invoicesSelected: boolean) {\r\n        this.isValid = invoicesSelected;\r\n        this.isDisabled = !this.isValid;\r\n\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        this.calculateBalanceWithCost(invoices);\r\n    }\r\n    getCreateCashInfo(cashRecord?: CashRecord): CashRecord {\r\n        let cash: CashRecord = new CashRecord();\r\n\r\n        if (cashRecord) {\r\n            cash = cashRecord;\r\n        }\r\n        this.formComponents.forEach((comp) => {\r\n            cash = comp.populateEntity(cash);\r\n        });\r\n\r\n        // add functionalcurrencycode and statutorycurrencycode based on company configration.\r\n        cash.functionalCurrencyCode = this.companyConfiguration.functionalCurrencyCode;\r\n        cash.statutoryCurrencyCode = this.companyConfiguration.statutoryCurrencyCode;\r\n        cash.functionalToStatutoryCurrencyRoeType = this.functionalStatutoryCurrencyRoeType;\r\n        cash.functionalToStatutoryCurrenyRate = this.functionalStatutoryCurrenyRate;\r\n\r\n        return cash;\r\n    }\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/cash']);\r\n            }\r\n        });\r\n    }\r\n    onDiscardButtonClickedForCashSelectionType() {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/cash']);\r\n\r\n    }\r\n    onPreviousButtonClicked() {\r\n        this.isSave = true;\r\n        this.isCompleted = false;\r\n        this.isDisabled = false;\r\n        if (this.selectionValue === CashSelectionType.SimpleCashPayment) {\r\n            this.stepper.selectedIndex = CashStepperType.PaymentCashType;\r\n        } else if (this.selectionValue === CashSelectionType.SimpleCashReceipt) {\r\n            this.stepper.selectedIndex = CashStepperType.ReceiptCashType;\r\n        } else {\r\n            this.stepper.previous();\r\n        }\r\n    }\r\n    onCheckBoxValueChange(value) {\r\n        this.isDisabled = value;\r\n    }\r\n    onCashOptionSelected(option) {\r\n        this.selectionValue = option.option;\r\n        this.isDisabled = !option.checked;\r\n    }\r\n\r\n    onPaymentNextButtonClicked() {\r\n        // clear grid data\r\n        this.cashDetailsFormComponent.bindSelectedValue(this.selectionValue);\r\n        this.cashDetailsFormComponent.documentInformationFormComponent.filterCurrencies();\r\n        this.pickTransactionComponent.clearControls();\r\n        this.pickTransactionComponent.bindSelectedValue(this.selectionValue);\r\n        this.pickTransactionComponent.invoiceMatchingComponent.filterCurrencies();\r\n        this.pickTransactionComponent.invoiceMatchingComponent.selectedValue = this.selectionValue;\r\n        this.pickTransactionComponent.invoiceMatchingComponent.setSearchFieldsSize();\r\n        if (this.selectionValue === CashSelectionType.SimpleCashPayment) {\r\n            this.pickTransactionComponentInitial = this.pickTransactionComponent;\r\n            this.isSimpleCashSelected = true;\r\n            this.stepper.next();\r\n        } else {\r\n            this.isSimpleCashSelected = false;\r\n            this.stepper.next();\r\n        }\r\n        this.cashDetailsFormComponent.bindSelectedValue(this.selectionValue);\r\n        if (this.selectionValue === CashSelectionType.SimpleCashPayment) {\r\n            if (this.cashDetailsFormComponent.additionalCostsFormComponent.gridColumnApi) {\r\n                this.cashDetailsFormComponent.additionalCostsFormComponent.gridColumnApi.setColumnVisible('accountLineType', false);\r\n            }\r\n        }\r\n        if (this.selectionValue === CashSelectionType.PaymentDifferentCurrency) {\r\n            if (this.pickTransactionComponent.invoiceMatchingComponent.gridColumnApi) {\r\n                this.pickTransactionComponent.invoiceMatchingComponent.gridColumnApi.setColumnVisible('amountPaidInDiffCcy', true);\r\n            }\r\n\r\n        }\r\n    }\r\n    onNextReceiptButtonClicked() {\r\n        if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency ||\r\n            this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction) {\r\n            this.cashDetailsFormComponent.additionalCostsFormComponent.showGrid = false;\r\n            this.pickTransactionComponent.additionalCostsPickTransactionComponent.showGrid = true;\r\n        } else {\r\n            this.cashDetailsFormComponent.additionalCostsFormComponent.showGrid = true;\r\n            this.pickTransactionComponent.additionalCostsPickTransactionComponent.showGrid = false;\r\n        }\r\n        this.cashDetailsFormComponent.bindSelectedValue(this.selectionValue);\r\n        this.cashDetailsFormComponent.documentInformationFormComponent.filterCurrencies();\r\n        if (this.selectionValue === CashSelectionType.SimpleCashReceipt) {\r\n            if (this.cashDetailsFormComponent.additionalCostsFormComponent.gridColumnApi) {\r\n                this.cashDetailsFormComponent.additionalCostsFormComponent.gridColumnApi.setColumnVisible('accountLineType', false);\r\n            }\r\n        }\r\n        if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.isDiffCurrency = true;\r\n            this.cashDetailsFormComponent.updateValidatorForAmount();\r\n        } else {\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.isDiffCurrency = false;\r\n            this.cashDetailsFormComponent.updateValidatorForAmount();\r\n        }\r\n\r\n        this.pickTransactionComponent.additionalCostsPickTransactionComponent.selectionValue = this.selectionValue;\r\n        this.pickTransactionComponent.invoiceMatchingComponent.setSearchFieldsSize();\r\n\r\n        this.stepper.next();\r\n    }\r\n    validateFxRate(): boolean {\r\n        return this.selectionValue === CashSelectionType.ReceiptDifferentCurrency\r\n            ? this.cashDetailsFormComponent.currencyFormComponent.isFxRateValid ? true : false\r\n            : true;\r\n    }\r\n    onNextButtonClicked() {\r\n        this.isSave = true;\r\n        this.isCompleted = true;\r\n        const currentDetails: InvoiceForCashMatching = this.cashDetailsFormComponent.getInvoiceSearchValues();\r\n        const isDetailsChanged = this.isDetailsChanged(currentDetails);\r\n        this.saveCurrentDetails(isDetailsChanged, currentDetails);\r\n        const isSearchRequired = this.pickTransactionComponent.invoiceMatchingComponent.isSearchRequired();\r\n\r\n        if (this.isCashFormValid()\r\n            && this.validateFxRate()) {\r\n            if ((isDetailsChanged || isSearchRequired)) {\r\n                this.pickTransactionComponent.invoiceMatchingComponent.bindCurrencyValue(\r\n                    this.cashDetailsFormComponent.documentInformationFormComponent.currencyCtrl.value);\r\n\r\n                this.pickTransactionComponent.bindSelectedValue(this.selectionValue);\r\n                this.pickTransactionComponent.invoiceMatchingComponent.selectedValue = this.selectionValue;\r\n                this.pickTransactionComponent.invoiceMatchingComponent.cashTypeId = this.cashTypeId;\r\n                this.pickTransactionComponent.invoiceMatchingComponent.setSearchFieldsSize();\r\n\r\n                const isDifferentCurrency = this.selectionValue === CashSelectionType.ReceiptDifferentCurrency\r\n                    ? true : false;\r\n                if (this.pickTransactionComponent.invoiceMatchingComponent.gridColumnApi) {\r\n                    this.pickTransactionComponent.invoiceMatchingComponent.gridColumnApi\r\n                        .setColumnVisible('amountPaidInDiffCcy', isDifferentCurrency);\r\n                }\r\n\r\n                if (this.selectionValue === CashSelectionType.SimpleCashReceipt) {\r\n                    this.stepper.selectedIndex = CashStepperType.ReceiptSummary;\r\n                } else {\r\n                    this.stepper.next();\r\n                }\r\n\r\n                // check whther the previously selected counterparty , currency and amount are assigned .\r\n\r\n                const previousCounterpartyCode = this.pickTransactionComponent.invoiceMatchingComponent.previousCounterpartyCode;\r\n                const previousCurrencyCode = this.pickTransactionComponent.invoiceMatchingComponent.previousCurrencyCode;\r\n                let previousPaymentCurrency = null;\r\n                let previousFxRateValue = null;\r\n                if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                    previousPaymentCurrency = this.pickTransactionComponent.invoiceMatchingComponent.previousPaymentCurrency;\r\n                    previousFxRateValue = this.pickTransactionComponent.invoiceMatchingComponent.previousFxRateValue;\r\n\r\n                }\r\n\r\n                if (previousCounterpartyCode || previousCurrencyCode ||\r\n                    previousPaymentCurrency || previousFxRateValue) {\r\n                    // if matching  conditions are modified\r\n                    if (previousCounterpartyCode !==\r\n                        this.pickTransactionComponent.invoiceMatchingComponent.counterpartyCtrl.value\r\n                        || previousCurrencyCode !==\r\n                        this.pickTransactionComponent.invoiceMatchingComponent.currencyCtrl.value\r\n                        ||\r\n                        ((this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) && (\r\n                            previousPaymentCurrency !==\r\n                            this.pickTransactionComponent.invoiceMatchingComponent.bankCurrencyCtrl.value\r\n                            || previousFxRateValue !==\r\n                            this.pickTransactionComponent.invoiceMatchingComponent.fxRateCtrl.value\r\n                        ))\r\n                    ) {\r\n\r\n                        if (!this.isEdit) {\r\n                            this.pickTransactionComponent.clearAdditonalCostGrid();\r\n                        }\r\n                        // than clear previous selection\r\n                        this.pickTransactionComponent.invoiceMatchingComponent.isInvoiceSelected = false;\r\n                        this.pickTransactionComponent.invoiceMatchingComponent.onSearchButtonClicked();\r\n\r\n                    }\r\n                } else {\r\n                    this.pickTransactionComponent.invoiceMatchingComponent.isInvoiceSelected = false;\r\n                    this.pickTransactionComponent.invoiceMatchingComponent.onSearchButtonClicked();\r\n                }\r\n\r\n                // if amount is changes than re calculate the amount based on invoices selected.\r\n                const previousAmount = this.pickTransactionComponent.invoiceMatchingComponent.previousAmount;\r\n                if (previousAmount) {\r\n\r\n                    if (previousAmount !== this.pickTransactionComponent.invoiceMatchingComponent.totalAmount) {\r\n                        this.pickTransactionComponent.invoiceMatchingComponent.\r\n                            reCalculateTotalAmountBasedonUpdatedAmountValue();\r\n                    }\r\n                }\r\n\r\n                // bind currency component from document information card to invoicemarkingcard.\r\n\r\n                this.cashDetailsFormComponent.bindSelectedValue(this.selectionValue);\r\n            } else {\r\n                if (this.selectionValue === CashSelectionType.SimpleCashReceipt) {\r\n                    this.stepper.selectedIndex = CashStepperType.ReceiptSummary;\r\n                } else {\r\n                    this.stepper.next();\r\n                }\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n        }\r\n    }\r\n\r\n    // Cash Payment\r\n    onMatchSelectedButtonClicked() {\r\n        this.isSave = true;\r\n        this.isCompleted = true;\r\n        this.pickTransactionComponent.invoiceMatchingComponent.selectedValue = this.selectionValue;\r\n        if (this.isValid) {\r\n            if (this.isValidInvoiceList()) {\r\n                if (this.pickTransactionComponent.additionalCostsPickTransactionComponent.isAdditionalCostValid()) {\r\n                    this.InvoicesSelected();\r\n                    const departmentId = this.getDepartmentIdFromSelectedInvoices();\r\n                    if (this.totalbalance['balance']['value'] < 0) {\r\n                        this.cashDetailsFormComponent.currencyFormComponent.amount = -(this.totalbalance['balance']['value']);\r\n                        this.cashDetailsFormComponent.documentInformationFormComponent.bindDocumentValues();\r\n                        this.cashDetailsFormComponent.counterpartyFormComponent.bindCounterpartyValues();\r\n                        this.cashDetailsFormComponent.currencyFormComponent.bindCurrencyValues();\r\n                        this.cashDetailsFormComponent.additionalCostsFormComponent.showGrid = false;\r\n                        this.cashDetailsFormComponent.documentInformationFormComponent.bindDepartmentControl(departmentId);\r\n                        if (this.selectionValue === CashSelectionType.PaymentDifferentCurrency) {\r\n                            this.cashDetailsFormComponent.documentInformationFormComponent.isDiffCurrency = true;\r\n                            this.cashDetailsFormComponent.updateValidatorForAmount();\r\n                        } else {\r\n                            this.cashDetailsFormComponent.documentInformationFormComponent.isDiffCurrency = false;\r\n                            this.cashDetailsFormComponent.updateValidatorForAmount();\r\n                        }\r\n\r\n                        this.stepper.next();\r\n                    } else {\r\n                        this.snackbarService.throwErrorSnackBar(\r\n                            'Balance must be less than Zero',\r\n                        );\r\n                    }\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Cost is invalid. Please resolve the errors.',\r\n                    );\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Selected invoice has invalid values. Please resolve the errors.',\r\n                );\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Select an invoice To match',\r\n            );\r\n        }\r\n\r\n        this.pickTransactionComponent.invoiceMatchingComponent.getSelectedInvoices();\r\n    }\r\n\r\n    onCreateReceiptButtonClicked() {\r\n        this.isSave = true;\r\n        this.isCompleted = true;\r\n        if (this.isValid) {\r\n            if (this.isValidInvoiceList()) {\r\n                if (this.pickTransactionComponent.additionalCostsPickTransactionComponent.isAdditionalCostValid()) {\r\n                    if (this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction\r\n                        || this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n                        // this.calculateBalanceWithCost(invoices);\r\n                    }\r\n                    if (this.totalAmount && this.totalAmount['amount']['value'] === 0) {\r\n                        this.onCreateButtonClicked();\r\n                    } else {\r\n                        this.snackbarService.throwErrorSnackBar(\r\n                            'Balance must be equal to Zero',\r\n                        );\r\n                    }\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Cost is invalid. Please resolve the errors.',\r\n                    );\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Selected invoice has invalid values. Please resolve the errors.',\r\n                );\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Select an invoice To match',\r\n            );\r\n        }\r\n    }\r\n\r\n    onSetNarrative(narrative: string) {\r\n        this.cashDetailsFormComponent.additionalDetailsFormComponent.setNarrative(narrative);\r\n    }\r\n\r\n    calculateTotalBalanceOnCostAmountEnter() {\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        this.calculateBalanceWithCost(invoices);\r\n    }\r\n\r\n    calculateTotalBalanceOnCostAmountEnterInCashDetails() {\r\n        // -- JEL - UAT 18774: Issue is we are using the same events and same variables for multiple processes and multiple components.\r\n        // this makes it so the same code is executed where it pobably shouldn't (different screens using the same code)\r\n        // To fix this issue, we are creating a seperate function for this card and for our case, we are not executing the code\r\n        if (this.selectionValue !== CashSelectionType.SimpleCashReceipt && this.selectionValue !== CashSelectionType.SimpleCashPayment) {\r\n            const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n            this.calculateBalanceWithCost(invoices);\r\n        }\r\n    }\r\n\r\n    calculateAmountWithCostSimpleCPCI() {\r\n        let totalCostAmount = 0;\r\n        const costs = this.cashDetailsFormComponent.additionalCostsFormComponent.getGridData() as AdditionalCost[];\r\n        if (costs.length > 0) {\r\n            if (this.selectionValue === CashSelectionType.SimpleCashReceipt ||\r\n                this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction ||\r\n                this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                totalCostAmount = costs.map((c) => (c.amount ? c.amount : 0) *\r\n                    (c.costDirectionId === CostDirections.Payable ? -1 : 1)).reduce((sum, current) => sum + current);\r\n            } else {\r\n                totalCostAmount = costs.map((c) => (c.amount ? c.amount : 0) *\r\n                    (c.costDirectionId === CostDirections.Payable ? 1 : -1)).reduce((sum, current) => sum + current);\r\n            }\r\n        }\r\n\r\n        if (this.cashDetailsFormComponent.documentInformationFormComponent.cashAmountValue) {\r\n            const amountWithCost = ConvertToNumber(this.cashDetailsFormComponent.documentInformationFormComponent.cashAmountValue)\r\n                + totalCostAmount;\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.amountCtrl.patchValue(amountWithCost);\r\n        }\r\n    }\r\n\r\n    calculateBalanceWithCost(invoices: CashMatching[]) {\r\n        const commonMethods = new CommonMethods();\r\n        if (this.selectionValue === CashSelectionType.SimpleCashReceipt || this.selectionValue === CashSelectionType.SimpleCashPayment) {\r\n            this.calculateAmountWithCostSimpleCPCI();\r\n        }\r\n\r\n        let totalCostAmount = 0;\r\n        const costs = this.pickTransactionComponent.additionalCostsPickTransactionComponent.getGridData() as AdditionalCost[];\r\n        if (costs.length > 0) {\r\n            totalCostAmount = costs.map(\r\n                (c) =>\r\n                    (c.amount ? c.amount : 0) *\r\n                    ((c.costDirectionId === CostDirections.Payable && this.cashTypeId === CashType.CashPayment)\r\n                        || ((c.costDirectionId === CostDirections.Receivable && this.cashTypeId === CashType.CashReceipt)) ? -1 : 1),\r\n            )\r\n                .reduce((sum, current) => sum + current);\r\n        }\r\n        if (this.cashTypeId === CashType.CashReceipt) {\r\n            if (this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction) {\r\n\r\n                this.balance = this.pickTransactionComponent.invoiceMatchingComponent.totalAmount\r\n                    + ((invoices && invoices.length > 0) ?\r\n                        invoices.map((a) => (a.amountToBePaid ? a.amountToBePaid : 0)\r\n                            * (commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                                (a.documentType, this.costDirectionId, a, false))).\r\n                            reduce((sum, current) => sum + current)\r\n                        : 0)\r\n                    + totalCostAmount;\r\n            } else if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                this.balance = ConvertToNumber(this.pickTransactionComponent.invoiceMatchingComponent.totalAmount)\r\n                    + ((invoices && invoices.length > 0) ?\r\n                        invoices.map((a) => a.amountPaidInDiffCcy\r\n                            * (commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                                (a.documentType, this.costDirectionId, a, false)))\r\n                            .reduce((sum, current) => sum + current) : 0)\r\n                    + totalCostAmount;\r\n            }\r\n\r\n            this.pickTransactionComponent.invoiceMatchingComponent.invoiceAmount =\r\n                ConvertToNumber(this.balance ? this.balance.toFixed(2) : this.balance);\r\n\r\n            this.pickTransactionComponent.invoiceMatchingComponent.formattedInvoiceAmount = this.balance;\r\n\r\n            if (this.totalAmount) {\r\n                this.totalAmount['amount']['value'] = ConvertToNumber(this.balance.toFixed(2));\r\n            }\r\n        } else {\r\n            if (this.selectionValue === CashSelectionType.PaymentFullPartialTransaction\r\n                || this.selectionValue === CashSelectionType.PaymentDifferentClient) {\r\n\r\n                this.balance = ((invoices && invoices.length > 0) ? invoices.map((a) => (a.amountToBePaid ? a.amountToBePaid : 0) *\r\n                    (commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                        (a.documentType, this.costDirectionId, a, false)))\r\n                    .reduce((sum, current) => sum + current) : 0)\r\n                    + totalCostAmount;\r\n            } else if (this.selectionValue === CashSelectionType.PaymentDifferentCurrency) {\r\n                this.balance = ((invoices && invoices.length > 0) ? invoices.map((a) => a.amountPaidInDiffCcy *\r\n                    (commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                        (a.documentType, this.costDirectionId, a, false)))\r\n                    .reduce((sum, current) => sum + current) : 0)\r\n                    + totalCostAmount;\r\n            }\r\n            const balanceWithDecimalValue = this.balance ? ConvertToNumber(this.balance.toFixed(2)) : this.balance;\r\n\r\n            if (this.totalbalance) {\r\n                this.totalbalance['balance'].value = balanceWithDecimalValue;\r\n            }\r\n\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.amountValue =\r\n                Math.abs(balanceWithDecimalValue);\r\n            this.cashDetailsFormComponent\r\n                .documentInformationFormComponent.amountOriginalCurrency = this.getAmountToBePaidInOriginalCurrency();\r\n            this.pickTransactionComponent.invoiceMatchingComponent.totalBalance = balanceWithDecimalValue;\r\n            if (balanceWithDecimalValue) {\r\n                this.pickTransactionComponent.invoiceMatchingComponent.formattedBalance =\r\n                    balanceWithDecimalValue.toLocaleString(undefined, {\r\n                        minimumFractionDigits: 2,\r\n                        maximumFractionDigits: 2,\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    getAmountToBePaidInOriginalCurrency(): number {\r\n        const originalAmounts = this.getSelectedInvoiceFromPickTransactionInvoiceList().map((invoice) => invoice.amountToBePaid);\r\n        let totalOriginalAmount = 0;\r\n        originalAmounts.filter((amount) => typeof (amount) === 'number') // remove null amounts\r\n            .forEach((amount) => totalOriginalAmount += amount);\r\n        return totalOriginalAmount;\r\n    }\r\n\r\n    onProceedClickedCashReceipt() {\r\n        this.insertCostToAdjustBalance();\r\n    }\r\n\r\n    insertCostToAdjustBalance() {\r\n        this.costCurrency = (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency ||\r\n            this.selectionValue === CashSelectionType.PaymentDifferentCurrency) ?\r\n            this.pickTransactionComponent.additionalCostsPickTransactionComponent.cashCurrency\r\n            : this.pickTransactionComponent.invoiceMatchingComponent.currencyValue;\r\n\r\n        // this.costCurrency = this.pickTransactionComponent.invoiceMatchingComponent.currencyValue;\r\n\r\n        const fxRate = this.costCurrency === 'USD' ?\r\n            1 : (this.masterdata.fxRates.filter((e) => e.currencyCode === this.costCurrency)[0].rate\r\n                ? this.masterdata.fxRates.filter((e) => e.currencyCode === this.costCurrency)[0].rate\r\n                : 1);\r\n        const totalBalance = this.pickTransactionComponent.invoiceMatchingComponent.invoiceAmount;\r\n        let multiplyDivide: string;\r\n        if (this.cashSelectionId === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.cashSelectionId === CashSelectionType.ReceiptDifferentCurrency) {\r\n            const matchingCurrency = this.pickTransactionComponent.invoiceMatchingComponent.bankCurrencyValue;\r\n            multiplyDivide = this.masterdata.currencies.filter((e) => e.currencyCode === matchingCurrency)[0].roeType;\r\n        } else {\r\n            multiplyDivide = this.masterdata.currencies.filter((e) => e.currencyCode === this.costCurrency)[0].roeType;\r\n        }\r\n        const totalBalanceInUSD = (multiplyDivide === 'M') ? totalBalance * Number(fxRate) : (totalBalance / Number(fxRate));\r\n        if (this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction\r\n            || this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            if (totalBalanceInUSD !== 0 && totalBalanceInUSD < 100 && totalBalanceInUSD > -100) {\r\n                const newCostRow = new AdditionalCostListDisplayView();\r\n                newCostRow.isDirty = true;\r\n                newCostRow.costDirection = this.pickTransactionComponent.invoiceMatchingComponent.invoiceAmount > 0\r\n                    ? 'Receivable' : 'Payable';\r\n                const costType = this.masterdata.costTypes.find((e) => e.costTypeCode === 'BANKOTH');\r\n                if (costType) {\r\n                    newCostRow.costTypeCode = this.masterdata.costTypes.filter((e) => e.costTypeCode === 'BANKOTH')[0].costTypeCode;\r\n                    newCostRow.accountCode = costType.nominalAccountCode;\r\n                    newCostRow.nominalAccountNumber = costType.nominalAccountCode;\r\n                    newCostRow.accountLineType = costType.nominalAccountCode ? 'L' : 'B';\r\n                }\r\n                newCostRow.currencyCode = this.costCurrency;\r\n                newCostRow.amount = Math.abs(this.pickTransactionComponent.invoiceMatchingComponent.invoiceAmount);\r\n\r\n                if (this.pickTransactionComponent.additionalCostsPickTransactionComponent.gridApi) {\r\n                    const res = this.pickTransactionComponent.additionalCostsPickTransactionComponent\r\n                        .gridApi.updateRowData({ add: [newCostRow] });\r\n                    // re-calculate the total balance here.\r\n                    const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n                    this.calculateBalanceWithCost(invoices);\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Cannot book the cash receipt, Total Balance left is greater than USD 100.',\r\n                );\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    InvoicesSelected() {\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        // this.calculateBalanceWithCost(invoices);\r\n        if (invoices) {\r\n            this.cashSummaryFormComponent.invoiceGridForSummaryComponent.invoicesToBeSelected(invoices);\r\n        }\r\n        this.cashSummaryFormComponent.invoiceForSummaryStep(invoices);\r\n    }\r\n    onTotalBalanceCalculated(balance) {\r\n        this.totalbalance = balance;\r\n\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        this.calculateBalanceWithCost(invoices);\r\n\r\n        this.cashDetailsFormComponent.documentInformationFormComponent.amountValue = -(this.totalbalance['balance']['value']);\r\n        this.cashDetailsFormComponent\r\n            .documentInformationFormComponent.amountOriginalCurrency = this.getAmountToBePaidInOriginalCurrency();\r\n    }\r\n    onTotalAmountCalculated(amount) {\r\n        this.totalAmount = amount;\r\n\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        this.calculateBalanceWithCost(invoices);\r\n    }\r\n    onInvoiceSearchValuesEntered(model: any) {\r\n        if (model) {\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.currencyValue = model.currency;\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.departmentValue = model.department;\r\n            // in case of diff ccy option, bank informations need to be fetch based on counterparty and payment currency value.\r\n\r\n            if (this.selectionValue === this.cashSelectionType.PaymentDifferentCurrency ||\r\n                this.selectionValue === this.cashSelectionType.ReceiptDifferentCurrency) {\r\n                this.cashDetailsFormComponent.counterpartyFormComponent.currencyValue = model.bankCurrency;\r\n                this.cashDetailsFormComponent.documentInformationFormComponent.paymentCurrency = model.bankCurrency;\r\n            } else {\r\n                this.cashDetailsFormComponent.counterpartyFormComponent.currencyValue = model.currency;\r\n            }\r\n\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.\r\n                currencyValueChangeInPickTransactionScreen();\r\n            this.cashDetailsFormComponent.counterpartyFormComponent.counterpartyValue = model.counterparty;\r\n            this.cashDetailsFormComponent.counterpartyFormComponent.clientNameValue = model.clientName;\r\n            this.cashDetailsFormComponent.currencyFormComponent.fxRateValue = model.fxRate;\r\n            this.cashDetailsFormComponent.currencyFormComponent.currencyValue = model.currency;\r\n            this.cashDetailsFormComponent.currencyFormComponent.bankCurrencyValue = model.bankCurrency;\r\n            this.cashDetailsFormComponent.currencyFormComponent.roeType = model.roeType;\r\n            this.cashDetailsFormComponent.currencyFormComponent.bindCurrencyValues();\r\n        }\r\n    }\r\n    onCounterpartySearchValueEntered(model: any) {\r\n        this.pickTransactionComponent.invoiceMatchingComponent.counterpartyValue = model.counterparty.counterpartyCode;\r\n        this.pickTransactionComponent.invoiceMatchingComponent.clientNameValue = model.clientName;\r\n        this.pickTransactionComponent.invoiceMatchingComponent.bindCounterpartyValues();\r\n    }\r\n    onCurrencySearchValueEntered(model: any) {\r\n        if (model) {\r\n            this.pickTransactionComponent.invoiceMatchingComponent.currencyValue = model.currency;\r\n            this.pickTransactionComponent.additionalCostsPickTransactionComponent.cashCurrency = model.currency;\r\n            this.cashDetailsFormComponent.additionalCostsFormComponent.currencySelected(model.currency);\r\n            if (this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction) {\r\n                this.pickTransactionComponent.invoiceMatchingComponent.bindCurrencyValue(model.currency);\r\n            }\r\n\r\n            if (this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                this.cashDetailsFormComponent.currencyFormComponent.filterBankCurrencies();\r\n            }\r\n        }\r\n    }\r\n    onDepartmentSearchValueEntered(model: any) {\r\n        this.pickTransactionComponent.invoiceMatchingComponent.departmentId = model.department;\r\n\r\n    }\r\n    onAmountSearchValueEntered(model: any) {\r\n        if (model) {\r\n            this.assignPickTransactionIfNull();\r\n            this.pickTransactionComponent.invoiceMatchingComponent.totalAmount = model.amount;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.invoiceAmount = model.amount;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.formattedInvoiceAmount = model.amount;\r\n\r\n            // MDU: removal of the call to this.calculateAmountWithCostSimpleCPCI() for simple cash\r\n            // (receivable or payable) as it caused the amount to be always incremented with the costs\r\n            // in edition, when entering / leaving the amount field\r\n            // See bug 19484, commeent by Mathilde\r\n        }\r\n    }\r\n    onCurrencyCardValuesEntered(model: any) {\r\n        if (model) {\r\n            this.initialFxRateValue = model.initialFxRate;\r\n            this.initialRoeType = model.initialRoeType;\r\n            this.bankCurrency = model.bankCurrency;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.fxRateValue = this.initialFxRateValue;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.roeType = this.initialRoeType;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.bankCurrencyValue = this.bankCurrency;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.bindCurrencyCardValues();\r\n            this.pickTransactionComponent.additionalCostsPickTransactionComponent.cashCurrency = this.bankCurrency;\r\n            this.cashDetailsFormComponent.counterpartyFormComponent.paymentCurrency = model.bankCurrency;\r\n        }\r\n    }\r\n    onFinalRoeTypeEntered(model: any) {\r\n        if (model) {\r\n            this.finalRoeType = model.finalRoeType;\r\n            this.roeTypeValue = this.finalRoeType ? this.finalRoeType : this.initialRoeType;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.roeType = this.roeTypeValue;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.divideMultiplyCtrl.setValue(this.roeTypeValue);\r\n        }\r\n    }\r\n    onFinalFxRateValueEntered(model: any) {\r\n        if (model) {\r\n            this.finalFxRateValue = ConvertToNumber(model.finalFxRate);\r\n            this.fxRateValue = (this.finalFxRateValue) ? this.finalFxRateValue : this.initialFxRateValue;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.fxRateValue = this.fxRateValue;\r\n            this.pickTransactionComponent.invoiceMatchingComponent.bindCurrencyCardValues();\r\n        }\r\n    }\r\n\r\n    onPreviewToggleSelected(hasPreviewDocument) {\r\n        this.hasPreviewDocument = hasPreviewDocument;\r\n    }\r\n\r\n    onTemplateSelected(hasTemplate) {\r\n        this.hasTemplate = hasTemplate;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.saveCashSubscription) {\r\n            this.saveCashSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    populateCashDetails() {\r\n        this.subscriptions.push(this.executionService.getCashByCashId(this.cashId)\r\n            .subscribe((data) => {\r\n                this.isPreviousButtonDisabled = true;\r\n                this.model = data;\r\n                this.documentReferenceNumber = this.model.documentReference;\r\n                this.matchedDocumentReference = this.model.matchedDocumentReference;\r\n                this.transactionDocumentId = this.model.transactionDocumentId;\r\n                this.matchingChashId = this.model.matchingCashId;\r\n                this.selectionValue = this.model.cashTypeId;\r\n                this.formComponents.forEach((comp) => {\r\n                    comp.initForm(data, this.isEdit);\r\n                });\r\n\r\n                if (this.model.cashTypeId === CashSelectionType.SimpleCashPayment) {\r\n                    this.pickTransactionComponentInitial = this.pickTransactionComponent;\r\n                    this.isSimpleCashSelected = true;\r\n                    this.stepper.next();\r\n                } else if (this.model.cashTypeId === CashSelectionType.SimpleCashReceipt) {\r\n                    this.stepper.selectedIndex = CashStepperType.ReceiptDetails;\r\n                } else {\r\n                    this.stepper.selectedIndex = CashStepperType.PaymentPickTransaction;\r\n                }\r\n\r\n                if (this.model.costDirectionId === CashType.CashPayment) {\r\n                    this.pickTransactionComponent.invoiceMatchingComponent.filterCurrencies();\r\n                }\r\n                if (this.model.cashTypeId === CashSelectionType.PaymentDifferentCurrency\r\n                    || this.model.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n                    if (this.pickTransactionComponent.invoiceMatchingComponent.gridColumnApi) {\r\n                        this.pickTransactionComponent.invoiceMatchingComponent.gridColumnApi.setColumnVisible('amountPaidInDiffCcy', true);\r\n                    }\r\n                    this.cashDetailsFormComponent.documentInformationFormComponent.isDiffCurrency = true;\r\n                    this.cashDetailsFormComponent.updateValidatorForAmount();\r\n                } else {\r\n                    this.cashDetailsFormComponent.documentInformationFormComponent.isDiffCurrency = false;\r\n                    this.cashDetailsFormComponent.updateValidatorForAmount();\r\n                }\r\n            }));\r\n    }\r\n\r\n    // get fx rate for functionalCUrrency => statutorycurrency\r\n    getFxrateForFunctionalToStatutoryCurrencyConversion() {\r\n\r\n        if (this.companyConfiguration.statutoryCurrencyCode !== this.companyConfiguration.functionalCurrencyCode) {\r\n            this.foreignExchangeService.getForeignExchangeRate(\r\n                this.companyManager.getCurrentCompanyDate().toDate(),\r\n                this.companyConfiguration.statutoryCurrencyCode)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.functionalStatutoryCurrenyRate = ConvertToNumber(data.rate);\r\n                        this.functionalStatutoryCurrencyRoeType = data.currencyRoeType;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    onAmountEnterOrInvoiceSelection() {\r\n\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        this.calculateBalanceWithCost(invoices);\r\n    }\r\n\r\n    isValidInvoiceList(): boolean {\r\n        let isInvoiceListValid = true;\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n        // this.pickTransactionComponent.invoiceMatchingComponent\r\n        //     .selectedInvoiceToMatch as CashMatching[];\r\n        if (invoices && invoices.length > 0) {\r\n            invoices.forEach((item) => {\r\n                if (!Number(item.amountToBePaid)) {\r\n                    isInvoiceListValid = false;\r\n                }\r\n            });\r\n        }\r\n        return isInvoiceListValid;\r\n    }\r\n\r\n    bindSelectedCashTypeForNewDocument() {\r\n        // based on selected value(Cash Type), route to respective cash selectionpage and select the cash option\r\n        // move to next step.\r\n\r\n        this.selectionFormComponent.bindSelectedCashTypeSelection(this.selectionValue, this.costDirectionId);\r\n        if (this.costDirectionId === CashType.CashPayment) {\r\n            this.onPaymentNextButtonClicked();\r\n        } else {\r\n            this.onNextReceiptButtonClicked();\r\n        }\r\n    }\r\n    onCloseButtonClicked() {\r\n        this.isDialogClosed = false;\r\n    }\r\n\r\n    getSelectedInvoiceFromPickTransactionInvoiceList() {\r\n\r\n        const selectedRows: any[] = [];\r\n        if (this.pickTransactionComponent.invoiceMatchingComponent.gridApi) {\r\n            this.pickTransactionComponent.invoiceMatchingComponent.gridApi.forEachNode((item) => {\r\n                if (item.data.isChecked === true) {\r\n                    selectedRows.push(item.data);\r\n                }\r\n            });\r\n\r\n        }\r\n        return selectedRows;\r\n    }\r\n\r\n    getformatedNumberWith2DecimalPoint(value: number) {\r\n        if (value) {\r\n            const floatValue = Math.round(value * 100) / 100;\r\n            return value ? parseFloat(floatValue.toString()).toFixed(2) : value;\r\n        }\r\n    }\r\n\r\n    onEditCalculateCashAmountWithoutCost() {\r\n        let totalCostAmount = 0;\r\n        const costs = this.cashDetailsFormComponent.additionalCostsFormComponent.getGridData() as AdditionalCost[];\r\n        if (costs.length > 0) {\r\n            if (this.selectionValue === CashSelectionType.SimpleCashReceipt ||\r\n                this.selectionValue === CashSelectionType.ReceiptFullPartialTransaction ||\r\n                this.selectionValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                totalCostAmount = costs.map((c) => (c.amount ? c.amount : 0) *\r\n                    (c.costDirectionId === CostDirections.Payable ? -1 : 1)).reduce((sum, current) => sum + current);\r\n            } else {\r\n                totalCostAmount = costs.map((c) => (c.amount ? c.amount : 0) *\r\n                    (c.costDirectionId === CostDirections.Payable ? 1 : -1)).reduce((sum, current) => sum + current);\r\n            }\r\n        }\r\n\r\n        this.cashDetailsFormComponent.documentInformationFormComponent.cashAmountValue =\r\n            this.cashDetailsFormComponent.documentInformationFormComponent.cashAmountValue - totalCostAmount;\r\n    }\r\n\r\n    // This method is used to get the departmentId from selected documents.\r\n    // If invoices are only in 1 dept, then defaulted to the dept. If multiple depts.,\r\n    // then take the dept with maximum value. It can overwritten by the users in the next screen.\r\n\r\n    getDepartmentIdFromSelectedInvoices() {\r\n        let departmentId;\r\n        const invoices = this.getSelectedInvoiceFromPickTransactionInvoiceList();\r\n\r\n        if (invoices && invoices.length > 0) {\r\n\r\n            if (invoices.length === 1) {\r\n                departmentId = invoices[0].departmentId;\r\n            } else {\r\n                // logic implemented:\r\n                // Choose the department linked to the document which has the\r\n                // maximum absolute amount(amount selected by the user to be paid in the invoice selection page).\r\n                // If two or more invoices has the same amount. Then department which has the document\r\n                // posted recently has to be set as default.\r\n                let maxInvoiceAmount = 0;\r\n                let maxPostedDate: Date;\r\n                let defaultDeptId = 0;\r\n                invoices.forEach((invoice) => {\r\n                    if (invoice.amountToBePaid > maxInvoiceAmount) {\r\n                        maxInvoiceAmount = invoice.amountToBePaid;\r\n                        defaultDeptId = invoice.departmentId;\r\n                        maxPostedDate = invoice.postedDate;\r\n                    } else if (invoice.amountToBePaid === maxInvoiceAmount) {\r\n                        if (invoice.postedDate > maxPostedDate) {\r\n                            defaultDeptId = invoice.departmentId;\r\n                            maxPostedDate = invoice.postedDate;\r\n                        }\r\n                    }\r\n                });\r\n                departmentId = defaultDeptId;\r\n            }\r\n        }\r\n        return departmentId;\r\n    }\r\n\r\n    private isDetailsChanged(currentDetails: InvoiceForCashMatching): boolean {\r\n        if (!this.previousCashDetails) {\r\n            return true;\r\n        }\r\n\r\n        if (this.previousCashDetails.amount === currentDetails.amount\r\n            && this.previousCashDetails.currency === currentDetails.currency\r\n            && this.previousCashDetails.departmentCode === currentDetails.departmentCode\r\n            && this.previousCashDetails.counterpartyreference === currentDetails.counterpartyreference) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private saveCurrentDetails(isDetailsChanged: boolean, currentDetails: any) {\r\n        if (isDetailsChanged) {\r\n            this.previousCashDetails = currentDetails;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <form [formGroup]=\\\"searchForm\\\">\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                Entries to Cash Matching\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"8px\\\">\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"9%\\\"\\r\\n                                       label=\\\"Cli. Reference\\\"\\r\\n                                       [isEditable]=\\\"counterpartyCtrl.enabled\\\"\\r\\n                                       [fieldControl]=\\\"counterpartyCtrl\\\"\\r\\n                                       [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                       displayProperty=\\\"counterpartyCode\\\"\\r\\n                                       [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                       [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                       (optionSelected)=\\\"onCounterpartySelected($event)\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <atlas-form-input fxFlex={{clientNameWidth}}\\r\\n                                  label=\\\"Client Name\\\"\\r\\n                                  [fieldControl]=\\\"clientNameCtrl\\\"\\r\\n                                  [isEditable]=\\\"clientNameCtrl.enabled\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"7%\\\"\\r\\n                                       label=\\\"Department\\\"\\r\\n                                       [isEditable]=\\\"departmentsCtrl.enabled\\\"\\r\\n                                       [fieldControl]=\\\"departmentsCtrl\\\"\\r\\n                                       [options]=\\\"filteredDepartments\\\"\\r\\n                                       displayProperty=\\\"departmentCode\\\"\\r\\n                                       [selectProperties]=\\\"['departmentCode', 'description']\\\"\\r\\n                                       (optionSelected)=\\\"onDepartmentCodeSelected($event)\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"6%\\\"\\r\\n                                       label=\\\"Currency\\\"\\r\\n                                       [isEditable]=\\\"currencyCtrl.enabled\\\"\\r\\n                                       [fieldControl]=\\\"currencyCtrl\\\"\\r\\n                                       [options]=\\\"filteredCurrencyList\\\"\\r\\n                                       displayProperty=\\\"currencyCode\\\"\\r\\n                                       [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                       [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                       (optionSelected)=\\\"onCurrencyOptionSelected($event)\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <atlas-form-input fxFlex={{secDocReferenceWidth}}\\r\\n                                  label=\\\"Second Document Reference\\\"\\r\\n                                  [fieldControl]=\\\"secDocReferenceCtrl\\\"\\r\\n                                  [isEditable]=\\\"secDocReferenceCtrl.enabled\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"13%\\\"\\r\\n                                       label=\\\"DocumentReference\\\"\\r\\n                                       [isEditable]=\\\"docReferenceCtrl.enabled\\\"\\r\\n                                       [fieldControl]=\\\"docReferenceCtrl\\\"\\r\\n                                       [options]=\\\"filteredDocReferenceList\\\"\\r\\n                                       displayProperty=\\\"invoiceDocumentReference\\\"\\r\\n                                       [selectProperties]=\\\"['invoiceDocumentReference']\\\"\\r\\n                                       [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                       (optionSelected)=\\\"onDocumentReferenceSelected($event)\\\"\\r\\n                                       (blur)=\\\"onDocumentReferenceSelection()\\\"\\r\\n                                       (keydown.enter)=\\\"onKeydown($event)\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <atlas-dropdown-select fxFlex=\\\"9%\\\"\\r\\n                                       *ngIf=\\\"selectedValue==cashSelectionType.PaymentDifferentCurrency || selectedValue==cashSelectionType.ReceiptDifferentCurrency\\\"\\r\\n                                       label=\\\"Bank Currency\\\"\\r\\n                                       [isEditable]=\\\"bankCurrencyCtrl.enabled\\\"\\r\\n                                       [fieldControl]=\\\"bankCurrencyCtrl\\\"\\r\\n                                       [options]=\\\"filteredBankCurrencylist\\\"\\r\\n                                       displayProperty=\\\"currencyCode\\\"\\r\\n                                       [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                       [errorMap]=\\\"bankCurrencyErrorMap\\\"\\r\\n                                       (optionSelected)=\\\"onBankCurrencyEntered($event)\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n\\r\\n                <atlas-form-input fxFlex=\\\"6%\\\"\\r\\n                                  *ngIf=\\\"selectedValue==cashSelectionType.PaymentDifferentCurrency || selectedValue==cashSelectionType.ReceiptDifferentCurrency\\\"\\r\\n                                  label=\\\"FX Rate\\\"\\r\\n                                  [fieldControl]=\\\"fxRateCtrl\\\"\\r\\n                                  [isEditable]=\\\"fxRateCtrl.enabled\\\"\\r\\n                                  (change)=\\\"onFXRateValueChanged($event)\\\"\\r\\n                                  [errorMap]=\\\"fxRateErrorMap\\\">\\r\\n                </atlas-form-input>\\r\\n\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     *ngIf=\\\"selectedValue==cashSelectionType.PaymentDifferentCurrency || selectedValue==cashSelectionType.ReceiptDifferentCurrency\\\">\\r\\n                    <mat-radio-group class=\\\"currency-radio-group\\\"\\r\\n                                     [formControl]=\\\"divideMultiplyCtrl\\\"\\r\\n                                     (change)=\\\"onDivideMultiplyToggleChanges($event)\\\"\\r\\n                                     [disabled]=\\\"true\\\">\\r\\n                        <mat-radio-button value=\\\"D\\\">Divide</mat-radio-button>\\r\\n                        <mat-radio-button value=\\\"M\\\">Multiply</mat-radio-button>\\r\\n                    </mat-radio-group>\\r\\n                </div>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button mat-icon-button\\r\\n                        (click)=\\\"onSearchButtonClicked()\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\">search</mat-icon>\\r\\n                </button>\\r\\n\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </form>\\r\\n</mat-card>\\r\\n<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between\\\">\\r\\n        <mat-card-title>\\r\\n            Documents found\\r\\n        </mat-card-title>\\r\\n        <atlas-grid-enlargement *ngIf=\\\"invoiceMatchingGridOptions && invoiceMatchingGridOptions.columnDefs\\\"\\r\\n                                [gridOptions]=\\\"invoiceMatchingGridOptions\\\"\\r\\n                                (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                                #gridZoom>\\r\\n        </atlas-grid-enlargement>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"invoiceMatchingGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"invoiceMatchingGridColumns\\\"\\r\\n                             [rowData]=\\\"invoiceMatchingGridRows\\\"\\r\\n                             [gridOptions]=\\\"invoiceMatchingGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (firstDataRendered)=\\\"autosizeColumns()\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\"\\r\\n         *ngIf=\\\"selectedValue == cashSelectionType.ReceiptFullPartialTransaction || selectedValue == cashSelectionType.ReceiptDifferentCurrency\\\">\\r\\n        <mat-card-subtitle class=\\\"total-figure\\\">Balance : <span\\r\\n                  class=\\\"total-figure-value\\\">{{invoiceAmount | number : '1.2-2' }}\\r\\n            </span></mat-card-subtitle>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\"\\r\\n         *ngIf=\\\"selectedValue == cashSelectionType.PaymentFullPartialTransaction || selectedValue == cashSelectionType.PaymentDifferentCurrency \\r\\n             || selectedValue == cashSelectionType.PaymentDifferentClient\\\">\\r\\n        <mat-card-subtitle class=\\\"total-figure\\\">Amount to be Paid : <span\\r\\n                  class=\\\"total-figure-value\\\">{{totalBalance  | number : '1.2-2' }}\\r\\n            </span></mat-card-subtitle>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoading\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n</mat-card>\\r\\n\"","module.exports = \".currency-radio-group {\\n  display: inline-flex;\\n  flex-direction: column; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CashTypes } from '../../../../../shared/entities/cash-type.entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CashSelectionType } from '../../../../../shared/enums/cash-selection-type';\r\nimport { CashType } from '../../../../../shared/enums/cash-type.enum';\r\nimport { TransactionDocument } from '../../../../../shared/enums/transaction-document.enum';\r\nimport { CharterDisplayView } from '../../../../../shared/models/charter-display-view';\r\nimport { ConvertToNumber, CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { CashMatching } from '../../../../../shared/services/execution/dtos/cash-matching';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { CashSummaryGrid } from '../../../../../shared/services/execution/dtos/cash-summary-grid-record';\r\nimport { InvoiceForCashMatching } from '../../../../../shared/services/execution/dtos/invoice-for-cash';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { ForeignExchangeService } from '../../../../../shared/services/http-services/foreign-exchange.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { CommonMethods } from '../../../../services/execution-cash-common-methods';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-matching',\r\n    templateUrl: './invoice-matching.component.html',\r\n    styleUrls: ['./invoice-matching.component.scss'],\r\n})\r\nexport class InvoiceMatchingComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly totalBalanceValue = new EventEmitter<any>();\r\n    @Output() readonly invoiceSearchValues = new EventEmitter<any>();\r\n    @Output() readonly selectedInvoiceReferences = new EventEmitter<any>();\r\n    @Output() readonly invoiceSelected = new EventEmitter<boolean>();\r\n    @Output() readonly setNarrative = new EventEmitter<any>();\r\n    @Output() readonly invoiceAmountValue = new EventEmitter<any>();\r\n    @Output() readonly currencySelected = new EventEmitter<any>();\r\n    @Output() readonly AmountEnterOrInvoiceSelection = new EventEmitter<any>();\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    counterpartyCtrl = new AtlasFormControl('Counterparty');\r\n    clientNameCtrl = new AtlasFormControl('Payer');\r\n    currencyCtrl = new AtlasFormControl('Currency');\r\n    departmentsCtrl = new AtlasFormControl('Departments');\r\n    docReferenceCtrl = new AtlasFormControl('DocumentReference');\r\n    secDocReferenceCtrl = new AtlasFormControl('SecondDocumentReference');\r\n    bankCurrencyCtrl = new AtlasFormControl('BankCurrency');\r\n    fxRateCtrl = new AtlasFormControl('FXRate');\r\n    divideMultiplyCtrl = new AtlasFormControl('DivideMultiply');\r\n    company: string;\r\n    filteredCounterPartyList: Counterparty[];\r\n    filteredCurrencyList: Currency[];\r\n    filteredBankCurrencylist: Currency[];\r\n    filteredDepartments: Department[];\r\n    filteredCashTypes: CashTypes[];\r\n    filteredDocReferenceList: InvoiceForCashMatching[];\r\n    documentReferenceList: InvoiceForCashMatching[] = [];\r\n    searchForm: FormGroup;\r\n    cashMatchingModel: CashMatching = new CashMatching();\r\n    invoiceMatchingGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    invoiceMatchingGridColumns: agGrid.ColDef[];\r\n    invoiceMatchingGridRows: CashMatching[];\r\n    counterpartyValue: string;\r\n    roeType: string;\r\n    currencyFrom: string;\r\n    currencyTo: string;\r\n    fxRateValue: number;\r\n    bankCurrencyValue: string;\r\n    documentTypePI: string = 'PI';\r\n    documentTypeSI: string = 'SI';\r\n    departmentValue: number;\r\n    isFxRateValid: boolean = true;\r\n    invoiceAmount: number;\r\n    clientNameValue: string;\r\n    currencyValue: string;\r\n    isInvoiceSelected: boolean;\r\n    selectedInvoices: CashMatching[];\r\n    totalBalance: number = 0;\r\n    docReferenceValue: string;\r\n    cashMatching: CashMatching[];\r\n    selectedInvoiceToMatch: CashSummaryGrid[];\r\n    dataLength: number = 0;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    cashSelectionModel: CashMatching;\r\n    filteredClientRefCurrency: CashMatching;\r\n    model: InvoiceForCashMatching;\r\n    selectedValue: number;\r\n    cashTypeId: number;\r\n    cashTransactionId: number;\r\n    totalAmount: number;\r\n    tolarence: number;\r\n    currencyRoeType: string;\r\n    maxFxRateValue: number;\r\n    minFxRateValue: number;\r\n    actualFxrateValue: number;\r\n    cashOption: boolean;\r\n    hasMaximumTolarence = false;\r\n    hasMinimumTolarence = false;\r\n    cashSelectionType = CashSelectionType;\r\n    cashType = CashType;\r\n    invoiceForCashMatchingModel: InvoiceForCashMatching = new InvoiceForCashMatching();\r\n    private getInvoiceForMatchSubscription: Subscription;\r\n    private getInvoiceByDocumentReferenceSubscription: Subscription;\r\n    masterData: MasterData;\r\n    gridContext = {\r\n        component: this,\r\n    };\r\n    isEdit = false;\r\n    matchFlagId: number;\r\n    departmentId: string;\r\n    cashAmount: number;\r\n    charters: CharterDisplayView[];\r\n    cashCurrencyCode: string;\r\n    cashCurrencyRoeType: string;\r\n    cashCurrencyRate: number;\r\n    companyConfiguration: Company;\r\n    isFXratesAvailableForCashCurrency: boolean;\r\n    isValidFxRateForFunctionalStatutoruCurrency: boolean;\r\n    isValueBindedFromCurrencyComponent: boolean;\r\n\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    formattedBalance: any;\r\n    formattedInvoiceAmount: any;\r\n\r\n    // These properties are added to retain invoice selection in cash receipt .\r\n    // when user selects invoices in step 3 and clicks on \"previous\" button that comes\r\n    // to step 2 i.e. cash details page and again when user clicks on next button\r\n    // without changing ant values the previously selected invoices should be\r\n    // retained. If user changes Counterparty and currency than invoice selection should\r\n    // get cleared.\r\n    previousCounterpartyCode: string;\r\n    previousCurrencyCode: string;  // this also matching currency in case of cash by different currency\r\n    previousAmount: number;\r\n    isAmountValueIsChanged: boolean;\r\n    previousPaymentCurrency: string;\r\n    previousFxRateValue: number;\r\n    clientNameWidth: string;\r\n    secDocReferenceWidth: string;\r\n    formInvalidMessage = 'Form is invalid. Please resolve the errors.';\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map();\r\n    currencyErrorMap: Map<string, string> = new Map();\r\n    bankCurrencyErrorMap: Map<string, string> = new Map();\r\n    fxRateErrorMap: Map<string, string> = new Map();\r\n    isSearchApplied = false;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        private executionService: ExecutionService,\r\n        private snackbarService: SnackbarService,\r\n        protected uiService: UiService,\r\n        private formatDate: FormatDatePipe,\r\n        private route: ActivatedRoute,\r\n        private preAccountingService: PreaccountingService,\r\n        private companyManager: CompanyManagerService,\r\n        private foreignExchangeService: ForeignExchangeService,\r\n        public gridService: AgGridService,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.searchForm = this.formBuilder.group({\r\n            counterpartyCtrl: ['', Validators.required],\r\n            currencyCtrl: ['', Validators.required],\r\n            bankCurrencyCtrl: ['', Validators.required],\r\n            fxRateCtrl: ['', Validators.required],\r\n        });\r\n        this.counterpartyErrorMap.set('required', ' Required *');\r\n        this.currencyErrorMap.set('required', ' Required *');\r\n        this.bankCurrencyErrorMap.set('required', ' Required *');\r\n        this.fxRateErrorMap.set('required', ' Required *');\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.cashTypeId = Number(this.route.snapshot.paramMap.get('cashTypeId'));\r\n        this.cashOption = (this.cashTypeId === CashType.CashPayment ? true : false);\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.filteredCounterPartyList = this.masterData.counterparties;\r\n        this.counterpartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.counterparties,\r\n                ['counterpartyCode', 'description'],\r\n            );\r\n            if (this.counterpartyCtrl.valid) {\r\n                this.onClientReferenceChange();\r\n            } else {\r\n                if (this.counterpartyCtrl.value) {\r\n                    // this.counterpartyCtrl.reset();\r\n                }\r\n            }\r\n        });\r\n        this.filteredDepartments = this.masterData.departments;\r\n        this.departmentsCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartments = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.departments,\r\n                ['departmentCode', 'description'],\r\n            );\r\n            if (this.departmentsCtrl.valid) {\r\n                this.onDepartmentChange();\r\n            } else {\r\n                this.docReferenceCtrl.reset();\r\n            }\r\n        });\r\n        this.executionService.getDocumentReferenceList()\r\n            .subscribe((data) => {\r\n                data.value.forEach((item) => this.documentReferenceList.push(this.populateInvoices(item)));\r\n                this.filteredDocReferenceList = this.documentReferenceList;\r\n            });\r\n        this.docReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDocReferenceList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.documentReferenceList, ['invoiceDocumentReference'],\r\n            );\r\n        });\r\n        this.filterBankCurrencies();\r\n        this.initializeGridColumns();\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.isValueBindedFromCurrencyComponent = false;\r\n    }\r\n\r\n    onClientReferenceChange() {\r\n        if (this.filteredClientRefCurrency) {\r\n            const documentRefrence = this.filteredClientRefCurrency.documentReference;\r\n            const counterpartyCode = this.masterData.counterparties.find((a) =>\r\n                a.counterpartyID === this.filteredClientRefCurrency.counterPartyId).counterpartyCode;\r\n\r\n            if (this.counterpartyCtrl.value && (this.counterpartyCtrl.value as Counterparty).counterpartyCode !== counterpartyCode) {\r\n                this.docReferenceCtrl.reset();\r\n            }\r\n        }\r\n    }\r\n\r\n    onDepartmentChange() {\r\n        if (this.filteredClientRefCurrency) {\r\n            const documentRefrence = this.filteredClientRefCurrency.documentReference;\r\n            const department = this.masterData.departments.find((a) =>\r\n                a.departmentId === this.filteredClientRefCurrency.departmentId);\r\n\r\n            if (department && this.departmentsCtrl.value &&\r\n                (this.departmentsCtrl.value as Department).departmentCode !== department.departmentCode) {\r\n                this.docReferenceCtrl.reset();\r\n            }\r\n        }\r\n    }\r\n\r\n    onCurrencyChange() {\r\n        if (this.filteredClientRefCurrency) {\r\n            const documentRefrence = this.filteredClientRefCurrency.documentReference;\r\n            const currency = this.filteredClientRefCurrency.currencyCode;\r\n\r\n            if (this.currencyCtrl.value && (this.currencyCtrl.value as Currency).currencyCode !== currency) {\r\n                this.docReferenceCtrl.reset();\r\n            }\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.invoiceMatchingGridOptions.columnDefs = this.invoiceMatchingGridColumns;\r\n        this.gridApi = this.invoiceMatchingGridOptions.api;\r\n        this.gridColumnApi = this.invoiceMatchingGridOptions.columnApi;\r\n\r\n        this.autosizeColumns();\r\n\r\n        this.gridApi.showNoRowsOverlay();\r\n        if (this.gridColumnApi) {\r\n            if (this.selectedValue === CashSelectionType.ReceiptDifferentCurrency\r\n                || this.selectedValue === CashSelectionType.PaymentDifferentCurrency) {\r\n                this.gridColumnApi.setColumnVisible('amountPaidInDiffCcy', true);\r\n            } else {\r\n                this.gridColumnApi.setColumnVisible('amountPaidInDiffCcy', false);\r\n            }\r\n        }\r\n        this.gridService.sizeColumns(params);\r\n    }\r\n\r\n    autosizeColumns() {\r\n        if (this.invoiceMatchingGridOptions) {\r\n            this.gridService.sizeColumns(this.invoiceMatchingGridOptions);\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.counterpartyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.counterparties,\r\n                    nameof<Counterparty>('counterpartyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n        this.bankCurrencyCtrl.setValidators(Validators.compose\r\n            ([Validators.required]),\r\n        );\r\n        this.fxRateCtrl.setValidators(Validators.compose\r\n            ([Validators.required]),\r\n        );\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n\r\n        this.departmentsCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.docReferenceCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.documentReferenceList,\r\n                    nameof<InvoiceForCashMatching>('invoiceDocumentReference'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n    }\r\n\r\n    onFXRateValueChanged(fxRateInput) {\r\n        const result = this.calculateFxrateTolarenceValue();\r\n        if (!result) {\r\n            this.isFxRateValid = false;\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'FX Rate difference should be within 10% threshold.',\r\n            );\r\n        } else {\r\n            this.isFxRateValid = true;\r\n        }\r\n    }\r\n    onSearchButtonClicked() {\r\n        this.clearInvoiceSelection();\r\n        // get the fxrate for the selected currency for conversion to fucntionalcurrency and statutorycurrency\r\n\r\n        // validate controls before making service call.\r\n        // if search by Document reference\r\n        if (this.docReferenceCtrl.value && !this.docReferenceCtrl.valid\r\n            && this.cashTypeId === CashType.CashPayment) {\r\n            this.snackbarService.throwErrorSnackBar(this.formInvalidMessage);\r\n            return;\r\n        } else { // if search by counterparty,currency and department\r\n            if ((!this.counterpartyCtrl.valid || !this.currencyCtrl.valid ||\r\n                (this.departmentsCtrl.value && !this.departmentsCtrl.valid))\r\n                && this.cashTypeId === CashType.CashPayment) {\r\n                this.snackbarService.throwErrorSnackBar(this.formInvalidMessage);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if ((this.currencyCtrl.value as Currency).currencyCode !== this.companyConfiguration.functionalCurrencyCode) {\r\n            // If functional currency is USD and Cash Currency is AED than fetch fxrates.\r\n            this.foreignExchangeService.getForeignExchangeRate(this.companyConfiguration.companyDate.toDate(), (this.currencyCtrl.value as Currency).currencyCode)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.isValidFxRateForFunctionalStatutoruCurrency = true;\r\n                        this.cashCurrencyRate = ConvertToNumber(data.rate);\r\n                        this.cashCurrencyRoeType = data.currencyRoeType;\r\n                        this.cashCurrencyCode = (this.currencyCtrl.value as Currency).currencyCode;\r\n                    } else {\r\n                        this.isValidFxRateForFunctionalStatutoruCurrency = false;\r\n                        this.isLoading = false;\r\n                        this.snackbarService.throwErrorSnackBar('FXrates are not avialable for the selected Currency');\r\n                        return;\r\n                    }\r\n                });\r\n        } else {\r\n            this.isValidFxRateForFunctionalStatutoruCurrency = true;\r\n            this.cashCurrencyRate = 1;\r\n            this.cashCurrencyRoeType = 'M';\r\n            this.cashCurrencyCode = (this.currencyCtrl.value as Currency).currencyCode;\r\n        }\r\n\r\n        // incase of different ccy , check whether the fx rates are avialable or not.\r\n\r\n        // This is only for cash receipts.\r\n        // assign the counterparty , currency and amount to properties which is used to\r\n        // maintain/ clear the invoice selection while going to previous screen and coming back\r\n        this.previousCounterpartyCode = (this.counterpartyCtrl.value as Counterparty).counterpartyCode;\r\n        this.previousCurrencyCode = (this.currencyCtrl.value as Currency).currencyCode;\r\n        this.previousAmount = this.totalAmount;\r\n\r\n        if ((this.selectedValue === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) && !this.isFXratesAvailableForCashCurrency) {\r\n            this.snackbarService.throwErrorSnackBar('Selected currency doesnot have Valid Fxrate details');\r\n            return;\r\n        }\r\n        // emit select currency for additional cost component\r\n        // if its diff ccy then emit the payable currency\r\n\r\n        if (this.selectedValue === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            this.currencySelected.emit((this.bankCurrencyCtrl.value as Currency).currencyCode);\r\n            this.previousPaymentCurrency = (this.bankCurrencyCtrl.value as Currency).currencyCode;\r\n            this.previousFxRateValue = this.fxRateCtrl.value;\r\n\r\n            // validate whether both currency are USD or atleast one currency should be USD\r\n            if ((this.currencyCtrl.value as Currency).currencyCode === (this.bankCurrencyCtrl.value as Currency).currencyCode) {\r\n                this.snackbarService.throwErrorSnackBar('Both the currencies cannot be same');\r\n                this.bankCurrencyCtrl.reset();\r\n                this.fxRateCtrl.reset();\r\n                return;\r\n            } else if ((this.currencyCtrl.value as Currency).currencyCode !== 'USD' && (this.bankCurrencyCtrl.value as Currency).currencyCode !== 'USD') {\r\n                this.snackbarService.throwErrorSnackBar('One of the currency Must be USD');\r\n                this.bankCurrencyCtrl.reset();\r\n                this.fxRateCtrl.reset();\r\n                return;\r\n            }\r\n\r\n            const result = this.calculateFxrateTolarenceValue();\r\n            if (!result) {\r\n                this.isFxRateValid = false;\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'FX Rate difference should be within 10% threshold.',\r\n                );\r\n                return;\r\n            } else {\r\n                this.isFxRateValid = true;\r\n            }\r\n\r\n        } else {\r\n            this.currencySelected.emit((this.currencyCtrl.value as Currency).currencyCode);\r\n        }\r\n\r\n        this.isLoading = true;\r\n        if (this.selectedValue === CashSelectionType.PaymentFullPartialTransaction\r\n            || this.selectedValue === CashSelectionType.PaymentDifferentClient) {\r\n            if (this.counterpartyCtrl.valid && this.currencyCtrl.valid) {\r\n                if (!this.isInvoiceSelected) {\r\n                    this.currencyValue = (this.currencyCtrl.value as Currency).currencyCode;\r\n                    this.clientNameValue = this.clientNameCtrl.value;\r\n                    this.docReferenceValue = this.docReferenceCtrl.value ?\r\n                        (this.docReferenceCtrl.value as InvoiceForCashMatching).invoiceDocumentReference : null;\r\n                    this.invoiceSearchValues.emit({\r\n                        counterparty: this.counterpartyValue,\r\n                        department: this.departmentsCtrl.value !== null ?\r\n                            (this.departmentsCtrl.value as Department).departmentCode : this.departmentsCtrl.value,\r\n                        currency: this.currencyValue,\r\n                        clientName: this.clientNameValue,\r\n                    });\r\n\r\n                    this.getInvoiceToMatch();\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Cannot Search when invoice is selected',\r\n                    );\r\n                    this.isLoading = false;\r\n                }\r\n            }\r\n        } else if (this.selectedValue === CashSelectionType.ReceiptFullPartialTransaction\r\n            || this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            if (!this.isInvoiceSelected) {\r\n                this.currencyValue = (this.currencyCtrl.value as Currency).currencyCode;\r\n                this.clientNameValue = this.clientNameCtrl.value;\r\n                this.docReferenceValue = this.docReferenceCtrl.value ?\r\n                    (this.docReferenceCtrl.value as InvoiceForCashMatching).invoiceDocumentReference : null;\r\n                if (this.totalAmount) {\r\n                    this.invoiceAmount = ConvertToNumber(this.totalAmount);\r\n                }\r\n                this.getInvoiceToMatch();\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Cannot Search when invoice is selected',\r\n                );\r\n                this.isLoading = false;\r\n            }\r\n        } else if (this.selectedValue === CashSelectionType.PaymentDifferentCurrency) {\r\n            if ((this.currencyCtrl.value as Currency).currencyCode !== (this.bankCurrencyCtrl.value as Currency).currencyCode) {\r\n                if (this.counterpartyCtrl.valid && this.currencyCtrl.valid && this.bankCurrencyCtrl.valid\r\n                    && this.isFxRateValid) {\r\n                    if (!this.isInvoiceSelected) {\r\n                        this.counterpartyValue = (this.counterpartyCtrl.value as Counterparty).counterpartyCode;\r\n                        this.currencyValue = (this.currencyCtrl.value as Currency).currencyCode;\r\n                        this.clientNameValue = this.clientNameCtrl.value;\r\n                        this.docReferenceValue = this.docReferenceCtrl.value ?\r\n                            (this.docReferenceCtrl.value as InvoiceForCashMatching).invoiceDocumentReference : null;\r\n                        this.invoiceSearchValues.emit({\r\n                            counterparty: this.counterpartyValue,\r\n                            department: this.departmentsCtrl.value !== null ?\r\n                                (this.departmentsCtrl.value as Department).departmentCode : this.departmentsCtrl.value,\r\n                            currency: this.currencyValue,\r\n                            clientName: this.clientNameValue,\r\n                            bankCurrency: (this.bankCurrencyCtrl.value as Currency).currencyCode,\r\n                            fxRate: this.fxRateCtrl.value,\r\n                            roeType: this.roeType,\r\n                        });\r\n                        this.getInvoiceToMatch();\r\n                    } else {\r\n                        this.snackbarService.throwErrorSnackBar(\r\n                            'Cannot Search when invoice is selected',\r\n                        );\r\n                        this.isLoading = false;\r\n                    }\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'only one currency can be USD',\r\n                );\r\n            }\r\n        }\r\n        this.isSearchApplied = true;\r\n    }\r\n    getInvoiceToMatch() {\r\n        const counterparty = this.getCounterpartyDetails(this.masterData, (this.counterpartyCtrl.value as Counterparty).counterpartyCode, false);\r\n        let counterPartyId: number;\r\n        if (counterparty && counterparty.length > 0) {\r\n            counterPartyId = counterparty[0].counterpartyID;\r\n        }\r\n        if (!this.departmentsCtrl.value) {\r\n            this.departmentValue = null;\r\n        }\r\n\r\n        this.getInvoiceForMatchSubscription = this.executionService\r\n            .getInvoiceToMatch(counterPartyId.toString(),\r\n                this.departmentValue, (this.currencyCtrl.value as Currency).currencyCode,\r\n                this.isEdit, this.matchFlagId,\r\n                this.docReferenceValue)\r\n            .subscribe((data) => {\r\n                if (data && data.value.length > 0) {\r\n                    this.cashMatching = this.populateData(data.value);\r\n                    this.initializeGridColumns();\r\n                    this.invoiceMatchingGridRows = this.cashMatching;\r\n                    this.isLoading = false;\r\n                    this.dataLength = this.invoiceMatchingGridRows.length;\r\n                    this.gridApi.setRowData(this.invoiceMatchingGridRows);\r\n                    const selectedRows: any[] = [];\r\n                    this.invoiceMatchingGridRows.forEach((item) => {\r\n                        // in Edit mode , bind ischecked=true for prematched documents\r\n                        if (item.amountToBePaid && item.amountToBePaid !== 0) {\r\n                            item.isChecked = true;\r\n                        }\r\n\r\n                        if (item.isChecked === true) {\r\n                            // check for diff ccy\r\n                            if (this.selectedValue === CashSelectionType.PaymentDifferentCurrency\r\n                                || this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                                if (this.roeType) {\r\n                                    item.amountPaidInDiffCcy =\r\n                                        this.roeType === 'M' ? item.amount * this.fxRateCtrl.value :\r\n                                            item.amount / this.fxRateCtrl.value;\r\n                                }\r\n                            }\r\n                            selectedRows.push(item);\r\n                        }\r\n                    });\r\n                    this.calculateAmountOrBalanceForInvoiceSelected(selectedRows);\r\n                    this.selectedInvoiceToMatch = selectedRows;\r\n                    this.isInvoiceSelected = selectedRows.length > 0;\r\n                    this.AmountEnterOrInvoiceSelection.emit();\r\n                    this.invoiceSelected.emit(this.isInvoiceSelected);\r\n\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar('No records are available for this search criteria.');\r\n                    this.isLoading = false;\r\n                }\r\n            });\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.getInvoiceForMatchSubscription) {\r\n            this.getInvoiceForMatchSubscription.unsubscribe();\r\n        }\r\n        if (this.getInvoiceByDocumentReferenceSubscription) {\r\n            this.getInvoiceByDocumentReferenceSubscription.unsubscribe();\r\n        }\r\n    }\r\n    getInvoiceByDocumentReference() {\r\n        this.getInvoiceByDocumentReferenceSubscription = this.executionService.getInvoiceToMatchByDocumentReference(this.docReferenceValue)\r\n            .subscribe((data) => {\r\n                if (data && data.value.length > 0) {\r\n                    this.cashMatching = this.populateData(data.value);\r\n                    this.initializeGridColumns();\r\n                    this.invoiceMatchingGridRows = this.cashMatching;\r\n                    this.dataLength = this.invoiceMatchingGridRows.length;\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar('No records are available for this search criteria.');\r\n                }\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n    initializeGridColumns() {\r\n        this.invoiceMatchingGridColumns = [\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: false,\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'TransactionDocumentId',\r\n                field: 'transactionDocumentId',\r\n                colId: 'transactionDocumentId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Transaction Direction ID',\r\n                field: 'transactionDirectionID',\r\n                colId: 'transactionDirectionID',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'DepartmentId',\r\n                field: 'departmentId',\r\n                colId: 'departmentId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Secondary Document Reference',\r\n                field: 'secondaryDocumentReference',\r\n                colId: 'secondaryDocumentReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Document Date',\r\n                field: 'documentDate',\r\n                colId: 'documentDate',\r\n                hide: false,\r\n                valueFormatter: this.dateFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Value Date',\r\n                field: 'valueDate',\r\n                colId: 'valueDate',\r\n                hide: false,\r\n                valueFormatter: this.dateFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'External Reference',\r\n                field: 'externalReference',\r\n                colId: 'externalReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charterCode',\r\n                colId: 'charterCode',\r\n                hide: false,\r\n            }, {\r\n                headerName: 'Invoice Type',\r\n                field: 'documentType',\r\n                colId: 'documentType',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Account Line Type Id',\r\n                field: 'accountLineTypeId',\r\n                colId: 'accountLineTypeId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Transaction Direction ID',\r\n                field: 'transactionDirectionId',\r\n                colId: 'transactionDirectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                type: 'numericColumn',\r\n                colId: 'amount',\r\n                valueGetter: this.getAmountValue,\r\n                hide: this.cashOption === false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                type: 'numericColumn',\r\n                colId: 'amount',\r\n                valueGetter: this.getAmountValueForReceipts,\r\n                hide: this.cashOption === true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n            },\r\n            {\r\n                headerName: 'Amount To Be Paid',\r\n                field: 'amountToBePaid',\r\n                type: 'numericColumn',\r\n                colId: 'amountToBePaid',\r\n                editable: this.isAmountToBePaidEditable.bind(this),\r\n                onCellValueChanged: this.onAmountToBePaidChange.bind(this),\r\n                hide: false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: 'Amount Paid(different CCY)',\r\n                field: 'amountPaidInDiffCcy',\r\n                type: 'numericColumn',\r\n                hide: true,\r\n                colId: 'amountPaidInDiffCcy',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                pinned: 'right',\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                pinned: 'right',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: '',\r\n                field: 'isChecked',\r\n                colId: 'isChecked',\r\n                width: 40,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'right',\r\n                checkboxSelection: true,\r\n                headerCheckboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Invoice GLDate',\r\n                field: 'invoiceGLDate',\r\n                colId: 'invoiceGLDate',\r\n                valueFormatter: this.dateFormatter.bind(this),\r\n                hide: true,\r\n            },\r\n        ];\r\n    }\r\n\r\n    filterCurrencies() {\r\n        let currencyList: Currency[] = [];\r\n        this.filteredCurrencyList = this.masterData.currencies;\r\n        currencyList = this.filteredCurrencyList;\r\n        this.currencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                currencyList,\r\n                ['currencyCode', 'description'],\r\n            );\r\n            if (this.currencyCtrl.valid) {\r\n                this.onCurrencyChange();\r\n            } else {\r\n                this.docReferenceCtrl.reset();\r\n            }\r\n        });\r\n    }\r\n    filterBankCurrencies() {\r\n        let bankCurrencyList: Currency[] = [];\r\n        if (this.currencyCtrl.valid && this.currencyCtrl.value) {\r\n            this.filteredBankCurrencylist = this.masterData.currencies.filter(\r\n                (item) => item.currencyCode !== this.currencyCtrl.value,\r\n            );\r\n        } else {\r\n            this.filteredBankCurrencylist = this.masterData.currencies;\r\n        }\r\n        bankCurrencyList = this.filteredBankCurrencylist;\r\n        this.bankCurrencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredBankCurrencylist = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                bankCurrencyList,\r\n                ['currencyCode', 'description'],\r\n            );\r\n            if (this.bankCurrencyCtrl.valid) {\r\n                this.onCurrencyChange();\r\n            } else {\r\n                this.docReferenceCtrl.reset();\r\n            }\r\n        });\r\n    }\r\n    isAmountToBePaidEditable(params) {\r\n        if ((this.selectedValue === CashSelectionType.ReceiptFullPartialTransaction)\r\n            || (this.selectedValue === CashSelectionType.PaymentFullPartialTransaction)\r\n            || (this.selectedValue === CashSelectionType.PaymentDifferentClient)) {\r\n            return params.node.selected ? true : false;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onAmountToBePaidChange(params) {\r\n        const list: any[] = [];\r\n        let amountPrev: number = 0;\r\n        // check for zero and -Ve numbers\r\n\r\n        if (params.data.amountToBePaid < 0) {\r\n            const amount = params.data.amount;\r\n            params.node.setDataValue('amountToBePaid', amount);\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Amount to be paid can not be negative or zero.',\r\n            );\r\n\r\n        } else if (params.data.amountToBePaid > Math.abs(params.data.amount)) {\r\n            params.node.setDataValue('amountToBePaid', '');\r\n            params.node.setSelected(false);\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Amount to be paid must be less than or equal to absolute value of Amount.',\r\n            );\r\n        } else if (ConvertToNumber(params.data.amountToBePaid) < Math.abs(params.data.amount)) {\r\n            const selectedRows: any[] = [];\r\n\r\n            if (this.gridApi) {\r\n                this.gridApi.forEachNode((item) => {\r\n                    if (item.data.isChecked === true) {\r\n                        selectedRows.push(item.data);\r\n                    }\r\n                });\r\n            }\r\n\r\n            selectedRows.forEach(\r\n                (selectedInvoiceRow) => {\r\n                    const amountToBePaid = selectedInvoiceRow.amountToBePaid ? selectedInvoiceRow.amountToBePaid : 0;\r\n\r\n                    if (this.selectedValue === CashSelectionType.PaymentFullPartialTransaction\r\n                        || this.selectedValue === CashSelectionType.PaymentDifferentClient) {\r\n\r\n                        if (this.isDocumentTypePurchaseInvoiceOrCreditNote(selectedInvoiceRow.documentType)) {\r\n                            this.totalBalance = this.totalBalance\r\n                                - ConvertToNumber(amountToBePaid);\r\n                        } else if (this.isDocumentTypeSalesInvoiceOrDebitNote(selectedInvoiceRow.documentType)) {\r\n                            this.totalBalance = this.totalBalance\r\n                                + ConvertToNumber(amountToBePaid);\r\n                        } else {\r\n                            // 20190506 - JEL - We are in JL  : Quickfix\r\n                            if (amountToBePaid !== 0) {\r\n                                this.totalBalance = this.totalBalance\r\n                                    + ConvertToNumber(amountToBePaid) * Math.sign(selectedInvoiceRow.amount);\r\n                            }\r\n                        }\r\n\r\n                        this.totalBalanceValue.emit({ value: this.totalBalance });\r\n\r\n                    } else if (this.selectedValue === CashSelectionType.ReceiptFullPartialTransaction) {\r\n                        amountPrev = this.totalAmount;\r\n\r\n                        if (this.isDocumentTypePurchaseInvoiceOrCreditNote(selectedInvoiceRow.documentType)) {\r\n                            list.push(ConvertToNumber(amountToBePaid));\r\n                        } else if (this.isDocumentTypeSalesInvoiceOrDebitNote(selectedInvoiceRow.documentType)) {\r\n                            amountPrev = this.totalAmount;\r\n                            list.push(-ConvertToNumber(amountToBePaid));\r\n                        } else {\r\n                            // 20190506 - JEL - We are in JL  : Quickfix\r\n                            // should take opposite sign of JL, but as the subsequent operation is substraction (-), it is already taken\r\n                            if (amountToBePaid !== 0) {\r\n                                list.push(+ ConvertToNumber(amountToBePaid) * Math.sign(selectedInvoiceRow.amount) * -1);\r\n                            }\r\n                        }\r\n                    } else if (this.selectedValue === CashSelectionType.PaymentDifferentCurrency) {\r\n                        // We do nothing here, see invoice-matching.component.ts --> calculateBalanceWithCost() where the calculation is completed\r\n\r\n                    } else if (this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                        amountPrev = this.totalAmount;\r\n\r\n                        if (this.isDocumentTypePurchaseInvoiceOrCreditNote(selectedInvoiceRow.documentType)) {\r\n                            list.push(ConvertToNumber(selectedInvoiceRow.amountPaidInDiffCcy));\r\n                        } else if (this.isDocumentTypeSalesInvoiceOrDebitNote(selectedInvoiceRow.documentType)) {\r\n                            amountPrev = this.totalAmount;\r\n                            list.push(-ConvertToNumber(selectedInvoiceRow.amountPaidInDiffCcy));\r\n                        }\r\n                    }\r\n                });\r\n            if (this.selectedValue === CashSelectionType.ReceiptFullPartialTransaction) {\r\n\r\n                this.invoiceAmount = (list && list.length > 0) ?\r\n                    amountPrev + list.map((a) => a).reduce((sum, current) => sum + current)\r\n                    : this.totalAmount;\r\n\r\n                this.invoiceAmountValue.emit({ value: this.invoiceAmount });\r\n            }\r\n        }\r\n        // params.context.component.AmountEnterOrInvoiceSelection.emit();\r\n    }\r\n\r\n    getSelectedInvoices() {\r\n\r\n        const selectedGridRows: any[] = [];\r\n        if (this.gridApi) {\r\n            this.gridApi.forEachNode((item) => {\r\n                if (item.data.isChecked === true) {\r\n                    selectedGridRows.push(item.data);\r\n                }\r\n            },\r\n            );\r\n\r\n            let invoiceStringBuilder: string = '';\r\n            selectedGridRows.forEach(\r\n                (selectedInvoiceRow) => {\r\n                    invoiceStringBuilder += selectedInvoiceRow.externalReference + ' //';\r\n                });\r\n            invoiceStringBuilder = invoiceStringBuilder.slice(0, -3);\r\n            this.setNarrative.emit(invoiceStringBuilder);\r\n        }\r\n    }\r\n\r\n    invoiceForSearch() {\r\n        if (this.invoiceForCashMatchingModel) {\r\n            this.currencyCtrl.patchValue(this.invoiceForCashMatchingModel.currency);\r\n            this.departmentsCtrl.patchValue(this.invoiceForCashMatchingModel.departmentCode);\r\n        }\r\n    }\r\n    bindCounterpartyValues() {\r\n        const selectedCounterparty = this.masterData.counterparties.filter(\r\n            (counterparty) => counterparty.counterpartyCode === this.counterpartyValue,\r\n        );\r\n        this.counterpartyCtrl.patchValue(selectedCounterparty[0]);\r\n        this.clientNameCtrl.patchValue(this.clientNameValue);\r\n        this.counterpartyCtrl.disable();\r\n        this.clientNameCtrl.disable();\r\n    }\r\n    bindCurrencyCardValues() {\r\n        const selectedCurrency = this.masterData.currencies.filter(\r\n            (currency) => currency.currencyCode === this.bankCurrencyValue,\r\n        );\r\n        this.bankCurrencyCtrl.patchValue(selectedCurrency[0]);\r\n        this.fxRateCtrl.patchValue(this.fxRateValue);\r\n        this.bankCurrencyCtrl.disable();\r\n        this.fxRateCtrl.disable();\r\n        this.divideMultiplyCtrl.patchValue(this.roeType);\r\n        this.divideMultiplyCtrl.disable();\r\n        this.isFXratesAvailableForCashCurrency = true;\r\n        this.isValueBindedFromCurrencyComponent = true;\r\n    }\r\n    bindCurrencyValue(currencyValue) {\r\n        const selectedCurrency = this.masterData.currencies.filter(\r\n            (currency) => currency.currencyCode === currencyValue,\r\n        );\r\n        this.currencyCtrl.patchValue(selectedCurrency[0]);\r\n        this.currencyCtrl.disable();\r\n    }\r\n    bindDepartmentValue() {\r\n        const selectedDepartment = this.masterData.departments.filter(\r\n            (department) => department.departmentId.toString() === this.departmentId,\r\n        );\r\n        this.departmentsCtrl.patchValue(selectedDepartment[0]);\r\n        this.departmentsCtrl.disable();\r\n        const selectedDepartments = this.departmentsCtrl;\r\n        if (selectedDepartments) {\r\n            this.departmentValue = selectedDepartments.value;\r\n        }\r\n    }\r\n    getAmountValue(params) {\r\n        const commonMethods = new CommonMethods();\r\n        return params.data.amount *\r\n            commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                (params.data.documentType, CashType.CashPayment, params.data, true);\r\n    }\r\n    getAmountValueForReceipts(params) {\r\n        const commonMethods = new CommonMethods();\r\n        return params.data.amount *\r\n            commonMethods.getSignedValueForDocumentAmountBasedOnDocumentTypeAndCostDirection\r\n                (params.data.documentType, CashType.CashReceipt, params.data, true);\r\n    }\r\n    dateFormatter(param) {\r\n        if (param.value) { return this.formatDate.transform(param.value); }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value);\r\n        }\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        event.data.isChecked = event.node.selected;\r\n        if (event.node.selected) {\r\n            if (event.data.amountToBePaid === 0) {\r\n                event.node.setDataValue('amountToBePaid', Math.abs(event.data.amount));\r\n            } else {\r\n                event.node.setDataValue('amountToBePaid', event.data.amountToBePaid);\r\n\r\n            }\r\n        } else {\r\n            event.node.setDataValue('amountToBePaid', 0);\r\n        }\r\n        if (this.selectedValue === CashSelectionType.PaymentDifferentCurrency\r\n            || this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            if (event.node.selected) {\r\n                if (this.roeType === 'D') {\r\n                    event.data.amountPaidInDiffCcy =\r\n                        (event.data.amountToBePaid / ConvertToNumber(this.fxRateCtrl.value)).toFixed(2);\r\n                } else if (this.roeType === 'M') {\r\n                    event.data.amountPaidInDiffCcy =\r\n                        (event.data.amountToBePaid * ConvertToNumber(this.fxRateCtrl.value)).toFixed(2);\r\n                }\r\n                event.node.setDataValue('amountPaidInDiffCcy', event.data.amountPaidInDiffCcy);\r\n            } else {\r\n                event.node.setDataValue('amountPaidInDiffCcy', '');\r\n            }\r\n        }\r\n        this.totalBalance = 0;\r\n        this.formattedBalance = 0;\r\n\r\n        if (this.selectedValue === CashSelectionType.ReceiptFullPartialTransaction\r\n            || this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            this.invoiceAmount = ConvertToNumber(this.totalAmount.toFixed(2));\r\n        }\r\n\r\n        const selectedRows: any[] = [];\r\n        if (this.gridApi) {\r\n            this.gridApi.forEachNode((item) => {\r\n                if (item.data.isChecked === true) {\r\n                    selectedRows.push(item.data);\r\n                }\r\n            });\r\n        }\r\n        if (this.calculateAmountOrBalanceForInvoiceSelected) {\r\n            this.calculateAmountOrBalanceForInvoiceSelected(selectedRows);\r\n        }\r\n        this.isInvoiceSelected = selectedRows.length > 0;\r\n        this.invoiceSelected.emit(this.isInvoiceSelected);\r\n        this.selectedInvoiceToMatch = selectedRows;\r\n        // this.AmountEnterOrInvoiceSelection.emit();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const cashRecord = entity as CashRecord;\r\n        cashRecord.matchFlagId = this.matchFlagId;\r\n\r\n        const selectedRows: any[] = [];\r\n\r\n        this.gridApi.forEachNode((item) => {\r\n            if (item.data.isChecked === true) {\r\n                selectedRows.push(item.data);\r\n            }\r\n        },\r\n        );\r\n        cashRecord.documentMatchings = selectedRows;\r\n        this.selectedInvoiceToMatch = selectedRows;\r\n\r\n        // NOTE: As currently we have fxrates convertion for only USD=>other ccy (i.e. EUR or AED)\r\n\r\n        if (this.selectedValue === CashSelectionType.PaymentDifferentCurrency ||\r\n            this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n            cashRecord.currencyCode = (this.bankCurrencyCtrl.value as Currency).currencyCode;\r\n            cashRecord.matchingRate = this.fxRateCtrl.value;\r\n            cashRecord.matchingRateType = this.roeType;\r\n\r\n            cashRecord.cashCurrencyRate = this.fxRateCtrl.value;\r\n            cashRecord.cashCurrencyRoeType = this.roeType;\r\n            cashRecord.cashCurrencyCode = (this.bankCurrencyCtrl.value as Currency).currencyCode;\r\n        } else {\r\n            cashRecord.cashCurrencyRate = this.cashCurrencyRate;\r\n            cashRecord.cashCurrencyRoeType = this.cashCurrencyRoeType === 'M' ? 'D' : 'M';\r\n            cashRecord.cashCurrencyCode = this.cashCurrencyCode;\r\n        }\r\n        return cashRecord;\r\n    }\r\n    onCounterpartySelected(counterpartySelected: Counterparty) {\r\n        if (counterpartySelected) {\r\n            this.clientNameCtrl.patchValue(\r\n                counterpartySelected.description,\r\n            );\r\n            this.counterpartyValue = counterpartySelected.counterpartyCode;\r\n        }\r\n        this.clientNameCtrl.disable();\r\n    }\r\n\r\n    onDocumentReferenceSelection() {\r\n        this.setDetailsOndocumentReferenceSelection();\r\n    }\r\n\r\n    onKeydown(event) {\r\n        this.setDetailsOndocumentReferenceSelection();\r\n    }\r\n\r\n    setDetailsOndocumentReferenceSelection() {\r\n        this.clearInvoiceSelection();\r\n\r\n        if (!this.docReferenceCtrl.valid) {\r\n            return;\r\n        }\r\n\r\n        this.isLoading = true;\r\n        const documentReference = (this.docReferenceCtrl.value as InvoiceForCashMatching).invoiceDocumentReference;\r\n        if (documentReference) {\r\n            this.getInvoiceByDocumentReferenceSubscription = this.executionService.getInvoiceToMatchByDocumentReference(documentReference)\r\n                .subscribe((data) => {\r\n                    if (data && data.value.length > 0) {\r\n                        this.cashSelectionModel = data.value[0];\r\n                        this.filteredClientRefCurrency = data.value[0];\r\n                        this.bindDropdownListsFromEntity(\r\n                            this.cashSelectionModel.counterPartyId,\r\n                            this.cashSelectionModel.currencyCode,\r\n                            this.cashSelectionModel.departmentId);\r\n                        this.onSearchButtonClicked();\r\n                    }\r\n                    this.isLoading = false;\r\n                });\r\n        } else {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    onDocumentReferenceSelected(documentReference: string) {\r\n        this.setDetailsOndocumentReferenceSelection();\r\n    }\r\n    onBankCurrencyEntered(bankCurrency: Currency) {\r\n        this.currencyFrom = (this.currencyCtrl.value as Currency).currencyCode;\r\n        this.currencyTo = bankCurrency.currencyCode;\r\n        if (!this.isValueBindedFromCurrencyComponent) {\r\n            this.isLoading = true;\r\n            this.executionService.getForeignExchangeRateByCurrency(this.currencyFrom, this.currencyTo).subscribe((data) => {\r\n                if (data) {\r\n                    this.cashSelectionModel = data;\r\n\r\n                    this.fxRateCtrl.setValue(this.cashSelectionModel.rate);\r\n                    this.actualFxrateValue = ConvertToNumber(this.fxRateCtrl.value);\r\n                    this.tolarence = this.fxRateCtrl.value * 0.1;\r\n                    this.divideMultiplyCtrl.patchValue(this.cashSelectionModel.roeType);\r\n                    this.roeType = this.cashSelectionModel.roeType;\r\n                    this.isFXratesAvailableForCashCurrency = true;\r\n                } else {\r\n\r\n                    this.fxRateCtrl.reset();\r\n                    this.divideMultiplyCtrl.reset();\r\n                    this.snackbarService.throwErrorSnackBar('FX Rate details not available for these currencies.');\r\n                    this.isFXratesAvailableForCashCurrency = false;\r\n                }\r\n                this.isLoading = false;\r\n\r\n            });\r\n        }\r\n    }\r\n    onCurrencyOptionSelected(currencyValue: Currency) {\r\n        this.clearInvoiceSelection();\r\n        this.currencyRoeType = currencyValue.roeType;\r\n        this.fxRateCtrl.reset();\r\n        this.bankCurrencyCtrl.reset();\r\n        this.currencySelected.emit(currencyValue.currencyCode);\r\n        // bind bank currency except selected matching currency\r\n        this.filterBankCurrencies();\r\n\r\n    }\r\n    onDivideOptionSelected() {\r\n        if (this.roeType === 'D') {\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n    onMultiplyOptionSelected() {\r\n        if (this.roeType === 'M') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    onDivideMultiplyToggleChanges(type) {\r\n\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            counterpartyCtrl: this.counterpartyCtrl,\r\n            clientNameCtrl: this.clientNameCtrl,\r\n            currencyCtrl: this.currencyCtrl,\r\n            departmentCodeCtrl: this.departmentsCtrl,\r\n            docReferenceCtrl: this.docReferenceCtrl,\r\n            secDocReferenceCtrl: this.secDocReferenceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    populateInvoices(value: any) {\r\n        const invoicesForMatching = new InvoiceForCashMatching();\r\n        invoicesForMatching.invoiceDocumentReference = value.invoiceDocumentReference;\r\n        return invoicesForMatching;\r\n    }\r\n    bindDropdownListsFromEntity(\r\n        counterpartyId: number, currencyCode: string, departmentId: number) {\r\n        if (counterpartyId) {\r\n            const counterparty = this.masterData.counterparties.filter(\r\n                (item) => item.counterpartyID === counterpartyId,\r\n            );\r\n            if (counterparty.length > 0) {\r\n                this.counterpartyCtrl.setValue(counterparty[0]);\r\n                this.clientNameCtrl.setValue(counterparty[0].description);\r\n                this.counterpartyValue = counterparty[0].counterpartyCode;\r\n            }\r\n        }\r\n\r\n        if (currencyCode) {\r\n            const currency = this.masterData.currencies.filter(\r\n                (item) => item.currencyCode === currencyCode,\r\n            );\r\n            this.currencyCtrl.setValue(currency[0]);\r\n            this.currencyValue = currencyCode;\r\n            this.currencySelected.emit(this.currencyValue);\r\n            this.filterBankCurrencies();\r\n        }\r\n\r\n        if (departmentId) {\r\n            const department = this.masterData.departments.filter(\r\n                (item) => item.departmentId === departmentId,\r\n            );\r\n            if (department.length > 0) {\r\n                this.departmentsCtrl.setValue(department[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    populateData(values: CashMatching[]) {\r\n        if (values && values.length > 0) {\r\n\r\n            values.forEach((item) => {\r\n                item.paymentTermCode = this.getPaymentTermCode(item);\r\n                item.departmentCode = this.bindDepartmentDetails(item.departmentId);\r\n            });\r\n\r\n            // fetch charter details\r\n            this.executionService.getCharters()\r\n                .subscribe((charterdata) => {\r\n                    if (charterdata.value) {\r\n                        this.charters = charterdata.value.map((charter) =>\r\n                            new CharterDisplayView(charter));\r\n                        values.forEach((item) => {\r\n                            item.charterCode = this.getCharterReference(item);\r\n                        });\r\n                    }\r\n                });\r\n\r\n        }\r\n        return values;\r\n    }\r\n\r\n    getCharterReference(entity: CashMatching) {\r\n        if (entity.charterId && this.charters && this.charters.length > 0) {\r\n            const filteredCharter = this.charters.filter((item) => item.charterId === entity.charterId);\r\n            if (filteredCharter.length > 0) {\r\n                return filteredCharter[0].charterCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    getPaymentTermCode(entity: CashMatching): string {\r\n        if (entity && entity.paymentTermId) {\r\n            const paymentTerm = this.masterData.paymentTerms.filter(\r\n                (item) => item.paymentTermsId === entity.paymentTermId,\r\n            );\r\n            entity.paymentTermCode = paymentTerm.length > 0 ? paymentTerm[0].paymentTermCode : '';\r\n        }\r\n        return entity.paymentTermCode;\r\n    }\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        if (entity.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n            entity.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n            this.bindDropdownListsFromEntity(\r\n                entity.counterPartyId, entity.matchingCurrency, entity.departmentId);\r\n        } else {\r\n            this.bindDropdownListsFromEntity(\r\n                entity.counterPartyId, entity.currencyCode, entity.departmentId);\r\n        }\r\n\r\n        if (entity.documentMatchings && entity.documentMatchings.length > 0) {\r\n            this.selectedValue = entity.cashTypeId;\r\n            this.isEdit = isEdit ? true : false;\r\n            this.matchFlagId = entity.matchFlagId;\r\n\r\n            // if the cashtype is for diff CCY\r\n            if (entity.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n                entity.cashTypeId === CashSelectionType.ReceiptDifferentCurrency) {\r\n\r\n                this.bankCurrencyCtrl.patchValue(entity.currencyCode);\r\n                this.fxRateCtrl.patchValue(entity.matchingRate);\r\n                this.divideMultiplyCtrl.patchValue(entity.matchingRateType);\r\n                this.roeType = entity.matchingRateType;\r\n                // assign total amount value\r\n                this.totalAmount = entity.amount;\r\n                this.isFXratesAvailableForCashCurrency = true;\r\n                this.currencySelected.emit(entity.currencyCode);\r\n            } else if (entity.cashTypeId === CashSelectionType.ReceiptFullPartialTransaction) {\r\n                this.totalAmount = entity.amount;\r\n                this.currencySelected.emit((this.currencyCtrl.value as Currency).currencyCode);\r\n            }\r\n            this.onSearchButtonClicked();\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    getCounterpartyDetails(masterData: MasterData, value: any, isFilterBasedOnCounterpartyId: boolean) {\r\n        const counterparty = masterData.counterparties.filter((item) =>\r\n            isFilterBasedOnCounterpartyId ?\r\n                item.counterpartyID === value\r\n                : item.counterpartyCode === value);\r\n\r\n        if (counterparty.length > 0) {\r\n            return counterparty;\r\n        }\r\n    }\r\n\r\n    onDepartmentCodeSelected(departmentCode: string) {\r\n        this.clearInvoiceSelection();\r\n\r\n        const selectedDepartments = this.masterData.departments.find(\r\n            (department) => department.departmentCode === departmentCode,\r\n        );\r\n        this.departmentValue = (selectedDepartments) ?\r\n            selectedDepartments.departmentId : this.departmentValue = null;\r\n    }\r\n\r\n    getDepartment(departmentCode: string, departmentId: number) {\r\n        const department = this.masterData.departments.filter(\r\n            (item) => (departmentCode && departmentCode !== null) ? item.departmentCode === departmentCode :\r\n                item.departmentId === departmentId,\r\n        );\r\n        if (department.length > 0) {\r\n            return department;\r\n        }\r\n    }\r\n\r\n    bindDepartmentDetails(departmentId: number) {\r\n        const department = this.getDepartment(null, departmentId);\r\n\r\n        return (department && department.length > 0) ? department[0].departmentCode + ' | ' + department[0].description : null;\r\n\r\n    }\r\n\r\n    clearDropdownControls() {\r\n        this.counterpartyCtrl.reset();\r\n        this.departmentsCtrl.reset();\r\n        this.currencyCtrl.reset();\r\n        this.clientNameCtrl.reset();\r\n    }\r\n\r\n    // clear invoice list if any searchable control values changes\r\n    clearInvoiceSelection() {\r\n        this.clearInvoiceGrid();\r\n        if (this.cashTypeId === CashType.CashPayment) {\r\n            this.totalAmount = 0;\r\n            this.totalBalance = 0;\r\n        }\r\n    }\r\n\r\n    clearAllControls() {\r\n        this.clearDropdownControls();\r\n        this.clearInvoiceSelection();\r\n        this.docReferenceCtrl.reset();\r\n        this.secDocReferenceCtrl.reset();\r\n        this.bankCurrencyCtrl.reset();\r\n        this.fxRateCtrl.reset();\r\n        this.divideMultiplyCtrl.reset();\r\n    }\r\n\r\n    calculateFxrateTolarenceValue(): boolean {\r\n\r\n        const modifiedFxRate = this.fxRateCtrl.value;\r\n        this.maxFxRateValue = this.actualFxrateValue * 1.1;\r\n        this.minFxRateValue = this.actualFxrateValue * 0.9;\r\n        if ((modifiedFxRate > this.maxFxRateValue) || (modifiedFxRate < this.minFxRateValue)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isDocumentTypePurchaseInvoiceOrCreditNote(documentType: string): boolean {\r\n        if (documentType) {\r\n            return documentType === TransactionDocument.PurchaseInvoice ||\r\n                documentType === TransactionDocument.CreditNote\r\n                ? true : false;\r\n        }\r\n    }\r\n\r\n    isDocumentTypeSalesInvoiceOrDebitNote(documentType: string): boolean {\r\n        if (documentType) {\r\n            return documentType === TransactionDocument.SalesInvoice ||\r\n                documentType === TransactionDocument.DebitNote\r\n                ? true : false;\r\n        }\r\n    }\r\n\r\n    // this method is used to calculate totalamount or totalbalance when invoices are selected.\r\n    calculateAmountOrBalanceForInvoiceSelected(selectedRows: any[]) {\r\n        if (selectedRows && selectedRows.length > 0) {\r\n            selectedRows.forEach(\r\n                (selectedInvoiceRow) => {\r\n                    const amountToBePaid = selectedInvoiceRow.amountToBePaid ? selectedInvoiceRow.amountToBePaid : 0;\r\n                    if (this.selectedValue === CashSelectionType.PaymentFullPartialTransaction\r\n                        || this.selectedValue === CashSelectionType.PaymentDifferentClient) {\r\n                        if (this.isDocumentTypePurchaseInvoiceOrCreditNote(selectedInvoiceRow.documentType)) {\r\n                            this.totalBalance -= amountToBePaid;\r\n                        } else if (this.isDocumentTypeSalesInvoiceOrDebitNote(selectedInvoiceRow.documentType)) {\r\n                            this.totalBalance += amountToBePaid;\r\n                        } else {\r\n                            // 20190506 - JEL - We are in JL  : Quickfix\r\n                            if (amountToBePaid !== 0) {\r\n                                this.totalBalance = this.totalBalance\r\n                                    + ConvertToNumber(amountToBePaid) * Math.sign(selectedInvoiceRow.amount);\r\n                            }\r\n                        }\r\n                    } else if (this.selectedValue === CashSelectionType.ReceiptFullPartialTransaction) {\r\n                        if (this.isDocumentTypePurchaseInvoiceOrCreditNote(selectedInvoiceRow.documentType)) {\r\n                            this.invoiceAmount += ConvertToNumber(amountToBePaid);\r\n                        } else if (this.isDocumentTypeSalesInvoiceOrDebitNote(selectedInvoiceRow.documentType)) {\r\n                            this.invoiceAmount -= ConvertToNumber(amountToBePaid);\r\n                        } else {\r\n                            // 20190506 - JEL - We are in JL  : Quickfix\r\n                            if (amountToBePaid !== 0) {\r\n                                this.invoiceAmount = this.invoiceAmount\r\n                                    + ConvertToNumber(amountToBePaid) * Math.sign(selectedInvoiceRow.amount) * -1;\r\n                            }\r\n                        }\r\n                    } else if (this.selectedValue === CashSelectionType.PaymentDifferentCurrency) {\r\n                        if (this.isDocumentTypePurchaseInvoiceOrCreditNote(selectedInvoiceRow.documentType)) {\r\n                            this.totalBalance -= ConvertToNumber(selectedInvoiceRow.amountPaidInDiffCcy);\r\n                        } else if (this.isDocumentTypeSalesInvoiceOrDebitNote(selectedInvoiceRow.documentType)) {\r\n                            this.totalBalance += selectedInvoiceRow.amountPaidInDiffCcy;\r\n                        }\r\n                    } else if (this.selectedValue === CashSelectionType.ReceiptDifferentCurrency) {\r\n                        if (this.isDocumentTypePurchaseInvoiceOrCreditNote(selectedInvoiceRow.documentType)) {\r\n                            this.invoiceAmount += ConvertToNumber(selectedInvoiceRow.amountPaidInDiffCcy);\r\n                        } else if (this.isDocumentTypeSalesInvoiceOrDebitNote(selectedInvoiceRow.documentType)) {\r\n                            this.invoiceAmount -= ConvertToNumber(selectedInvoiceRow.amountPaidInDiffCcy);\r\n                        }\r\n                    }\r\n\r\n                });\r\n            this.totalBalance = ConvertToNumber(Number(this.totalBalance).toFixed(2));\r\n            this.invoiceAmount = ConvertToNumber(Number(this.invoiceAmount).toFixed(2));\r\n\r\n            this.totalBalanceValue.emit({ value: this.totalBalance });\r\n            this.invoiceAmountValue.emit({ value: this.invoiceAmount });\r\n        }\r\n    }\r\n\r\n    clearInvoiceGrid() {\r\n        this.invoiceSelected.emit(false);\r\n        this.isInvoiceSelected = false;\r\n        if (this.gridApi) {\r\n            this.gridApi.setRowData([]);\r\n        }\r\n    }\r\n\r\n    // when amount is changed in details page after invoice selection\r\n    reCalculateTotalAmountBasedonUpdatedAmountValue() {\r\n        this.AmountEnterOrInvoiceSelection.emit();\r\n    }\r\n\r\n    setSearchFieldsSize() {\r\n        if (this.selectedValue === CashSelectionType.ReceiptDifferentCurrency\r\n            || this.selectedValue === CashSelectionType.PaymentDifferentCurrency) {\r\n            this.clientNameWidth = '25%';\r\n            this.secDocReferenceWidth = '14%';\r\n        } else {\r\n            this.clientNameWidth = '30%';\r\n            this.secDocReferenceWidth = '18%';\r\n        }\r\n    }\r\n\r\n    isSearchRequired(): boolean {\r\n        return (!this.isSearchApplied\r\n            || !this.selectedInvoiceToMatch\r\n            || (this.selectedInvoiceToMatch && this.selectedInvoiceToMatch.length === 0));\r\n    }\r\n}\r\n","module.exports = \"<atlas-invoice-matching #invoiceMatchingComponent\\r\\n                        (setNarrative)=\\\"onSetNarrative($event)\\\"\\r\\n                        (totalBalanceValue)=\\\"onTotalBalanceValueCalculated($event)\\\"\\r\\n                        (invoiceSearchValues)=\\\"onInvoiceSearchValueEntered($event)\\\"\\r\\n                        (invoiceSelected)=\\\"onInvoiceSelected($event)\\\"\\r\\n                        (currencySelected)=\\\"currencySelected($event)\\\"\\r\\n                        (invoiceAmountValue)=\\\"onInvoiceAmountEntered($event)\\\"\\r\\n                        (AmountEnterOrInvoiceSelection)=\\\"OnAmountEnterOrInvoiceSelection()\\\">\\r\\n</atlas-invoice-matching>\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start left\\\">\\r\\n    <atlas-additional-costs (proceedClickedCashReceipt)=\\\"onProceedClickedCashReceipt()\\\"\\r\\n                            (calculateBalanceOnCostAmountEnter)=\\\"calculateBalanceOnCostAmountEnter()\\\"\\r\\n                            #additionalCostsFormComponent></atlas-additional-costs>\\r\\n</div>\"","module.exports = \"\"","import { AfterViewInit, Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CashSelectionType } from '../../../../shared/enums/cash-selection-type';\r\nimport { CashRecord } from '../../../../shared/services/execution/dtos/cash-record';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { AdditionalCostsFormComponent } from '../cash-details/additional-costs/additional-costs.component';\r\nimport { InvoiceMatchingComponent } from './invoice-matching/invoice-matching.component';\r\n\r\n@Component({\r\n    selector: 'atlas-pick-transaction',\r\n    templateUrl: './pick-transaction.component.html',\r\n    styleUrls: ['./pick-transaction.component.scss'],\r\n})\r\nexport class PickTransactionComponent extends BaseFormComponent implements OnInit, AfterViewInit {\r\n    @Output() readonly totalBalanceCalculated = new EventEmitter<any>();\r\n    @Output() readonly cashDetailsDefaultValues = new EventEmitter<any>();\r\n    @Output() readonly invoicesSelected = new EventEmitter<boolean>();\r\n    @Output() readonly setNarrative = new EventEmitter<any>();\r\n    @Output() readonly proceedClickedCashReceipt = new EventEmitter<any>();\r\n    @Output() readonly totalAmountCalculated = new EventEmitter<any>();\r\n    @ViewChild('invoiceMatchingComponent') invoiceMatchingComponent: InvoiceMatchingComponent;\r\n    @ViewChild('additionalCostsFormComponent') additionalCostsPickTransactionComponent: AdditionalCostsFormComponent;\r\n    @Output() readonly calculateTotalBalanceOnCostAmountEnter = new EventEmitter<any>();\r\n    @Output() readonly AmountEnterOrInvoiceSelection = new EventEmitter<any>();\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    totalBalance: number;\r\n    totalAmount: number;\r\n    counterpartyValue: string;\r\n    departmentValue: number;\r\n    currencyValue: string;\r\n    clientNameValue: string;\r\n    pickTransactionFormGroup: FormGroup;\r\n    selectionValue: number;\r\n    fxRateValue: number;\r\n    bankCurrencyValue: string;\r\n    roeTypeValue: string;\r\n    isSave: boolean = false;\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.pickTransactionFormGroup = this.formBuilder.group({\r\n            counterpartyFormComponent: this.invoiceMatchingComponent.getFormGroup(),\r\n            additionalCostsFormComponent: this.additionalCostsPickTransactionComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.invoiceMatchingComponent, this.additionalCostsPickTransactionComponent);\r\n    }\r\n\r\n    currencySelected(currency) {\r\n        this.additionalCostsPickTransactionComponent.cashCurrency = currency;\r\n    }\r\n    onProceedClickedCashReceipt() {\r\n        this.proceedClickedCashReceipt.emit();\r\n    }\r\n    onSetNarrative(narrative: string) {\r\n        this.setNarrative.emit(narrative);\r\n    }\r\n    onTotalBalanceValueCalculated(value) {\r\n        this.totalBalance = value;\r\n        this.totalBalanceCalculated.emit({ balance: this.totalBalance });\r\n    }\r\n    onInvoiceAmountEntered(value) {\r\n        this.totalAmount = value;\r\n        this.totalAmountCalculated.emit({ amount: this.totalAmount });\r\n    }\r\n    onInvoiceSelected(invoicesSelected: boolean) {\r\n        this.invoicesSelected.emit(invoicesSelected);\r\n\r\n    }\r\n    onInvoiceSearchValueEntered(model: any) {\r\n        if (model) {\r\n            this.counterpartyValue = model.counterparty;\r\n            this.departmentValue = model.department;\r\n            this.currencyValue = model.currency;\r\n            this.clientNameValue = model.clientName;\r\n            this.fxRateValue = model.fxRate;\r\n            this.bankCurrencyValue = model.bankCurrency;\r\n            this.roeTypeValue = model.roeType;\r\n            this.cashDetailsDefaultValues.emit({\r\n                counterparty: this.counterpartyValue,\r\n                department: this.departmentValue,\r\n                currency: this.currencyValue,\r\n                clientName: this.clientNameValue,\r\n                fxRate: this.fxRateValue,\r\n                bankCurrency: this.bankCurrencyValue,\r\n                roeType: this.roeTypeValue,\r\n            });\r\n        }\r\n    }\r\n    bindSelectedValue(value: number) {\r\n        if (value !== 0) {\r\n            this.selectionValue = value;\r\n            this.invoiceMatchingComponent.cashTransactionId = value;\r\n        }\r\n    }\r\n\r\n    populateEntity(model: CashRecord): any {\r\n        if (model.childCashTypeId !== CashSelectionType.SimpleCashPayment &&\r\n            model.childCashTypeId !== CashSelectionType.SimpleCashReceipt) {\r\n\r\n            this.formComponents.forEach((comp) => {\r\n                comp.populateEntity(model);\r\n            });\r\n        }\r\n        return model;\r\n    }\r\n\r\n    initForm(entity: CashRecord, isEdit: boolean): any {\r\n        this.formComponents.forEach((comp) => {\r\n            if (comp) { comp.initForm(entity, isEdit); }\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    calculateBalanceOnCostAmountEnter() {\r\n        this.calculateTotalBalanceOnCostAmountEnter.emit();\r\n    }\r\n\r\n    clearControls() {\r\n        this.invoiceMatchingComponent.clearAllControls();\r\n        this.additionalCostsPickTransactionComponent.clearAdditonalCostGrid();\r\n    }\r\n\r\n    OnAmountEnterOrInvoiceSelection() {\r\n        this.AmountEnterOrInvoiceSelection.emit();\r\n    }\r\n\r\n    clearAdditonalCostGrid() {\r\n        this.additionalCostsPickTransactionComponent.clearAdditonalCostGrid();\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <form class=\\\"large-form\\\"\\r\\n                  fxFlex=\\\"100%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input specialIsAlphaNumeric\\r\\n                           matInput\\r\\n                           placeholder=\\\"Search document reference\\\"\\r\\n                           (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                           [formControl]=\\\"searchedValueCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n            </form>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\"\\r\\n                    id=\\\"search-button\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-list-and-search class=\\\"default-height\\\" [gridCode]=\\\"gridCode\\\"\\r\\n                           gridTitle=\\\"Cash List\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           waitBeforeLoadingData=true\\r\\n                           (configurationLoaded)=\\\"initAdditionnalFilters()\\\"\\r\\n                           (rowClicked)=\\\"onCashClicked($event)\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n    <mat-card *ngIf=\\\"isLoading\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".search button {\\n  position: absolute;\\n  right: 0; }\\n\\n:host ::ng-deep.ag-menu {\\n  overflow-y: hidden !important; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, Inject, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { ColumnState } from 'ag-grid-community/dist/lib/columnController/columnController';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ListAndSearchComponent } from '../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AtlasAgGridParam } from '../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { CashSummary } from '../../../shared/entities/cash.entity';\r\nimport { ListAndSearchFilter } from '../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterDataProps } from '../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { CashSelectionType } from '../../../shared/enums/cash-selection-type';\r\nimport { ListAndSearchFilterType } from '../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { CashDisplayView } from '../../../shared/models/cash-display-view';\r\nimport { CharterDisplayView } from '../../../shared/models/charter-display-view';\r\nimport { FormatDatePipe } from '../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { CashListPaymentDataLoader } from '../../../shared/services/list-and-search/cashList-payment-data-loader';\r\nimport { UiService } from '../../../shared/services/ui.service';\r\nimport { ExecutionActionsService } from '../../services/execution-actions.service';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-cash-payment-list-page',\r\n    templateUrl: './execution-cash-payment-list-page.component.html',\r\n    styleUrls: ['./execution-cash-payment-list-page.component.scss'],\r\n    providers: [DatePipe, CashListPaymentDataLoader],\r\n})\r\nexport class ExecutionCashPaymentListPageComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    cashGridCols: agGrid.ColDef[];\r\n    searchedValueCtrl = new AtlasFormControl('searchedValue');\r\n    dataLength = 0;\r\n    isLoading: boolean;\r\n    cashGridRows: CashDisplayView[] = [];\r\n    cashTypeId: number;\r\n    savedColumnStates: ColumnState[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    userActiveDirectoryName: string;\r\n    checkExportedFormat: boolean = false;\r\n    company: string;\r\n    formatType: string = 'en-US';\r\n    excelStyles: any;\r\n    cashGridOptions: agGrid.GridOptions = {\r\n        enableSorting: true,\r\n        enableFilter: true,\r\n        suppressColumnVirtualisation: true,\r\n        isExternalFilterPresent: () => true,\r\n        doesExternalFilterPass: this.externalFilterPass.bind(this),\r\n    };\r\n    charters: CharterDisplayView[];\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Departments,\r\n    ];\r\n    gridCode = 'cashList';\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n\r\n    cashGridColumns: agGrid.ColDef[] = [\r\n        {\r\n            headerName: 'CashId',\r\n            headerTooltip: 'CashId',\r\n            field: 'costDirectionId',\r\n            colId: 'costDirectionId',\r\n            hide: true,\r\n        },\r\n        {\r\n            headerName: 'Document reference',\r\n            headerTooltip: 'Document reference',\r\n            field: 'documentReference',\r\n            colId: 'documentReference',\r\n            headerCheckboxSelection: true,\r\n            headerCheckboxSelectionFilteredOnly: true,\r\n            checkboxSelection: true,\r\n        },\r\n        {\r\n            headerName: 'Document Type',\r\n            headerTooltip: 'Document Type',\r\n            field: 'documentType',\r\n            colId: 'documentType',\r\n        },\r\n        {\r\n            // TO DO\r\n            // this need to be discused and property will be binded later\r\n            headerName: 'Trax Status',\r\n            headerTooltip: 'Trax Status',\r\n            field: 'traxStatus',\r\n            colId: 'traxStatus',\r\n        },\r\n        {\r\n            headerName: 'Document date',\r\n            headerTooltip: 'Document date',\r\n            field: 'documentDate',\r\n            colId: 'documentDate',\r\n            valueFormatter: this.dateFormatter.bind(this),\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.documentDate);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Value date',\r\n            headerTooltip: 'Value date',\r\n            field: 'valueDate',\r\n            colId: 'valueDate',\r\n            valueFormatter: this.dateFormatter.bind(this),\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.valueDate);\r\n\r\n                if (val && val.indexOf('/') < 0) {\r\n                    return val;\r\n                }\r\n                const split = val.split('/');\r\n                return split[2] + '-' + split[1] + '-' + split[0];\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Currency',\r\n            headerTooltip: 'Currency',\r\n            field: 'currencyCode',\r\n            colId: 'currencyCode',\r\n        },\r\n        {\r\n            headerName: 'Amount',\r\n            headerTooltip: 'Amount',\r\n            field: 'amount',\r\n            type: 'numericColumn',\r\n            colId: 'amount',\r\n            valueFormatter: this.formatValue.bind(this),\r\n        },\r\n        {\r\n            headerName: 'Charter reference',\r\n            headerTooltip: 'Charter reference',\r\n            field: 'charterCode',\r\n            colId: 'charterCode',\r\n        },\r\n        {\r\n            headerName: 'Client / Nominal account',\r\n            headerTooltip: 'Client / Nominal account',\r\n            field: 'counterpartyOrNominalAccountCode',\r\n            colId: 'counterpartyOrNominalAccountCode',\r\n        },\r\n        {\r\n            headerName: 'Payee / Payer',\r\n            headerTooltip: 'Payee / Payer',\r\n            field: 'ownerName',\r\n            colId: 'ownerName',\r\n        },\r\n\r\n        {\r\n            headerName: 'Department',\r\n            headerTooltip: 'Department',\r\n            field: 'departmentDescription',\r\n            colId: 'departmentDescription',\r\n        },\r\n        {\r\n            headerName: 'Posting Status',\r\n            headerTooltip: 'Posting Status',\r\n            field: 'status',\r\n            colId: 'status',\r\n        },\r\n        {\r\n            headerName: 'Error Message',\r\n            headerTooltip: 'Error Message',\r\n            field: 'errorMessage',\r\n            colId: 'errorMessage',\r\n        },\r\n    ];\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private executionService: ExecutionService,\r\n        private uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        protected masterdataService: MasterdataService,\r\n        private formatDate: FormatDatePipe,\r\n        protected executionActionsService: ExecutionActionsService,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService,\r\n        public dataLoader: CashListPaymentDataLoader,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.company = route.snapshot.paramMap.get('company');\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    externalFilterPass(node) {\r\n        if (this.searchedValueCtrl.value) {\r\n            const documentRef = node.data.documentReference.toUpperCase();\r\n            return documentRef.toString().includes(this.searchedValueCtrl.value.toUpperCase());\r\n        } else {\r\n            return node.data.documentReference;\r\n        }\r\n    }\r\n\r\n    showOrHideColum(event, col: agGrid.ColDef) {\r\n        const cols = this.cashGridColumns.filter((colf) => colf.colId === col.colId);\r\n        if (cols.length === 1) {\r\n            cols[0].hide = !(col.hide || false);\r\n\r\n            this.gridColumnApi.setColumnVisible(col.colId, !cols[0].hide);\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onRefreshButtonClicked() {\r\n        this.gridColumnApi.resetColumnState();\r\n        this.cashGridColumns.forEach((colf) => {\r\n            colf.hide = !this.gridColumnApi.getColumn(colf.colId).isVisible();\r\n        });\r\n        this.cashGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.cashGridOptions = params;\r\n        this.cashGridOptions.columnDefs = this.cashGridColumns;\r\n        this.gridApi = this.cashGridOptions.api;\r\n        this.gridColumnApi = this.cashGridOptions.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    getCashList() {\r\n        this.initAdditionnalFilters();\r\n    }\r\n\r\n    setDepartmentDescription(masterData: MasterData, cash: CashSummary): CashSummary {\r\n        const department = masterData.departments.filter((item) =>\r\n            item.departmentId === cash.departmentId);\r\n\r\n        if (department.length > 0) {\r\n            cash.departmentDescription = department[0].departmentCode + ' | ' + department[0].description;\r\n        }\r\n        return cash;\r\n    }\r\n\r\n    dateFormatter(param) {\r\n        if (param.value) { return this.formatDate.transform(param.value); }\r\n    }\r\n\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(param.value);\r\n    }\r\n\r\n    onCashClicked(event) {\r\n        let cashView: CashDisplayView = event.data;\r\n        if ((cashView.cashTypeId === CashSelectionType.PaymentDifferentCurrency\r\n            || cashView.cashTypeId === CashSelectionType.ReceiptDifferentCurrency)\r\n            && cashView.paymentCashId) {\r\n            // In case of cash diff ccy, we can only navigate to the payment cash\r\n            const cash = new CashSummary();\r\n            cash.cashId = cashView.paymentCashId;\r\n            cash.costDirectionId = cashView.costDirectionId;\r\n            cashView = new CashDisplayView(cash);\r\n        }\r\n\r\n        this.executionActionsService.displayCashSubject.next(cashView);\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        let screenName: string;\r\n        if (this.cashTypeId === 1) {\r\n            screenName = 'Cash' + '' + 'Payment';\r\n        } else {\r\n            screenName = 'Cash' + '' + 'Receipt';\r\n        }\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'FX Rates';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n\r\n    onColumnVisibilityChanged(column: any) {\r\n        if (this.userPreferencesComponent) {\r\n            this.userPreferencesComponent.onChangeColumnVisibility(column);\r\n        }\r\n        this.cashGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onCashRowClicked(event) {\r\n\r\n        this.executionActionsService.displayCashSubject.next(event.data);\r\n    }\r\n    initAdditionnalFilters() {\r\n        this.additionalFilters = [];\r\n        if (this.listAndSearchComponent &&\r\n            this.listAndSearchComponent.columnConfiguration &&\r\n            this.listAndSearchComponent.columnConfiguration.length > 0) {\r\n\r\n            const costDirectionId = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'CostDirectionId');\r\n\r\n            const costDirectionIdfilter = new ListAndSearchFilter();\r\n            costDirectionIdfilter.fieldId = costDirectionId.fieldId;\r\n            costDirectionIdfilter.fieldName = costDirectionId.fieldName;\r\n\r\n            costDirectionIdfilter.predicate = {\r\n                filterType: ListAndSearchFilterType.Numeric,\r\n                operator: 'eq',\r\n                value1: this.cashTypeId.toString(),\r\n            };\r\n            costDirectionIdfilter.isActive = true;\r\n            this.additionalFilters.push(costDirectionIdfilter);\r\n\r\n            this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n            this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n            this.listAndSearchComponent.loadData(true);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    onSearchButtonClicked() {\r\n        this.additionalFilters = [];\r\n        const documentReferenceField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'DocumentReference');\r\n\r\n        const filter = new ListAndSearchFilter();\r\n        filter.fieldId = documentReferenceField.fieldId;\r\n        filter.fieldName = documentReferenceField.fieldName;\r\n        filter.predicate = {\r\n            filterType: ListAndSearchFilterType.Text,\r\n            operator: 'eq',\r\n            value1: this.searchedValueCtrl.value + '%',\r\n        };\r\n        filter.isActive = true;\r\n        this.additionalFilters = [filter];\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <form class=\\\"large-form\\\"\\r\\n                  fxFlex=\\\"100%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input specialIsAlphaNumeric\\r\\n                           matInput\\r\\n                           placeholder=\\\"Search document reference\\\"\\r\\n                           (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                           [formControl]=\\\"searchedValueCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n            </form>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\"\\r\\n                    id=\\\"search-button\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-list-and-search [gridCode]=\\\"gridCode\\\"\\r\\n                           gridTitle=\\\"Cash Receipt List\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           waitBeforeLoadingData=true\\r\\n                           (configurationLoaded)=\\\"initAdditionnalFilters()\\\"\\r\\n                           (rowClicked)=\\\"onCashClicked($event)\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n    <mat-card *ngIf=\\\"isLoading\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             class=\\\"loading\\\">\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, Inject, ViewChild, Input } from '@angular/core';\r\nimport { CashListReceiptDataLoader } from '../../../shared/services/list-and-search/cashList-receipt-data-loader';\r\nimport { DatePipe } from '@angular/common';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { UiService } from '../../../shared/services/ui.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { FormatDatePipe } from '../../../shared/pipes/format-date-pipe.pipe';\r\nimport { ExecutionActionsService } from '../../services/execution-actions.service';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { AgGridService } from '../../../shared/services/ag-grid.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { ListAndSearchComponent } from '../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { CashDisplayView } from '../../../shared/models/cash-display-view';\r\nimport { ColumnState } from 'ag-grid-community/dist/lib/columnController/columnController';\r\nimport { AtlasAgGridParam } from '../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CharterDisplayView } from '../../../shared/models/charter-display-view';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { ListAndSearchFilter } from '../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { CashSelectionType } from '../../../shared/enums/cash-selection-type';\r\nimport { CashSummary } from '../../../shared/entities/cash.entity';\r\nimport { ListAndSearchFilterType } from '../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { MasterDataProps } from '../../../shared/entities/masterdata-props.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-cash-receipt-list-page',\r\n    templateUrl: './execution-cash-receipt-list-page.component.html',\r\n    styleUrls: ['./execution-cash-receipt-list-page.component.scss'],\r\n    providers: [DatePipe, CashListReceiptDataLoader],\r\n})\r\nexport class ExecutionCashReceiptListPageComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    cashGridCols: agGrid.ColDef[];\r\n    searchedValueCtrl = new AtlasFormControl('searchedValue');\r\n    dataLength = 0;\r\n    cashGridRows: CashDisplayView[] = [];\r\n    cashTypeId: number;\r\n    isLoading: boolean;\r\n    savedColumnStates: ColumnState[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    userActiveDirectoryName: string;\r\n    checkExportedFormat: boolean = false;\r\n    company: string;\r\n    formatType: string = 'en-US';\r\n    excelStyles: any;\r\n    cashGridOptions: agGrid.GridOptions = {\r\n        enableSorting: true,\r\n        enableFilter: true,\r\n        suppressColumnVirtualisation: true,\r\n        isExternalFilterPresent: () => true,\r\n        doesExternalFilterPass: this.externalFilterPass.bind(this),\r\n    };\r\n    charters: CharterDisplayView[];\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Departments,\r\n    ];\r\n    gridCode = 'receiptList';\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    defaultAdditionalFilters: ListAndSearchFilter[] = [];\r\n\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private executionService: ExecutionService,\r\n        private uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        protected masterdataService: MasterdataService,\r\n        private formatDate: FormatDatePipe,\r\n        protected executionActionsService: ExecutionActionsService,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService,\r\n        public dataLoader: CashListReceiptDataLoader,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.company = route.snapshot.paramMap.get('company');\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    externalFilterPass(node) {\r\n        if (this.searchedValueCtrl.value) {\r\n            const documentRef = node.data.documentReference.toUpperCase();\r\n            return documentRef.toString().includes(this.searchedValueCtrl.value.toUpperCase());\r\n        } else {\r\n            return node.data.documentReference;\r\n        }\r\n    }\r\n\r\n    getCashList() {\r\n        this.initAdditionnalFilters();\r\n    }\r\n\r\n    onCashClicked(event) {\r\n        let cashView: CashDisplayView = event.data;\r\n        if ((cashView.cashTypeId === CashSelectionType.PaymentDifferentCurrency\r\n            || cashView.cashTypeId === CashSelectionType.ReceiptDifferentCurrency)\r\n            && cashView.paymentCashId) {\r\n            // In case of cash diff ccy, we can only navigate to the payment cash\r\n            const cash = new CashSummary();\r\n            cash.cashId = cashView.paymentCashId;\r\n            cash.costDirectionId = cashView.costDirectionId;\r\n            cashView = new CashDisplayView(cash);\r\n        }\r\n\r\n        this.executionActionsService.displayCashSubject.next(cashView);\r\n    }\r\n\r\n    onCashRowClicked(event) {\r\n        this.executionActionsService.displayCashSubject.next(event.data);\r\n    }\r\n\r\n    initAdditionnalFilters() {\r\n        this.additionalFilters = [];\r\n        if (this.listAndSearchComponent &&\r\n            this.listAndSearchComponent.columnConfiguration &&\r\n            this.listAndSearchComponent.columnConfiguration.length > 0) {\r\n\r\n            const costDirectionId = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'CostDirectionId');\r\n\r\n            const costDirectionIdfilter = new ListAndSearchFilter();\r\n            costDirectionIdfilter.fieldId = costDirectionId.fieldId;\r\n            costDirectionIdfilter.fieldName = costDirectionId.fieldName;\r\n\r\n            costDirectionIdfilter.predicate = {\r\n                filterType: ListAndSearchFilterType.Numeric,\r\n                operator: 'eq',\r\n                value1: this.cashTypeId.toString(),\r\n            };\r\n\r\n            costDirectionIdfilter.isActive = true;\r\n            this.additionalFilters.push(costDirectionIdfilter);\r\n            this.defaultAdditionalFilters = this.additionalFilters;\r\n            this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n            this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n            this.listAndSearchComponent.loadData(true);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    onSearchButtonClicked() {\r\n        this.additionalFilters = this.defaultAdditionalFilters;\r\n\r\n        const documentReferenceField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'DocumentReference');\r\n\r\n        const filter = new ListAndSearchFilter();\r\n        filter.fieldId = documentReferenceField.fieldId;\r\n        filter.fieldName = documentReferenceField.fieldName;\r\n        filter.predicate = {\r\n            filterType: ListAndSearchFilterType.Text,\r\n            operator: 'eq',\r\n            value1: this.searchedValueCtrl.value + '%',\r\n        };\r\n        filter.isActive = true;\r\n        this.additionalFilters.push(filter);\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <mat-tab-group [selectedIndex]=\\\"tabIndex\\\"\\r\\n                       (selectedIndexChange)=onSelectedIndexChanged($event)>\\r\\n            <mat-tab label=\\\"CASH PAYMENT\\\">\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"CASH RECEIPT\\\">\\r\\n            </mat-tab>\\r\\n        </mat-tab-group>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n    </div>\\r\\n</div>\\r\\n<atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                              [fabType]=\\\"fabType\\\"\\r\\n                              [fabActions]=\\\"fabMenuActions\\\"\\r\\n                              [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                              (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n</atlas-floating-action-button>\\r\\n<atlas-execution-cash-payment-list-page [hidden]=\\\"!isCashPaymentMode\\\"\\r\\n                                        #cashPaymentListComponent>\\r\\n</atlas-execution-cash-payment-list-page>\\r\\n<atlas-execution-cash-receipt-list-page [hidden]=\\\"isCashPaymentMode\\\"\\r\\n                                        #cashReceiptListComponent>\\r\\n</atlas-execution-cash-receipt-list-page>\"","module.exports = \".fab-text-button {\\n  z-index: 1;\\n  margin-right: 20%; }\\n\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../shared/components/base-form-component/base-form-component.component';\r\nimport { FABType } from '../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { FloatingActionButtonActions } from '../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { CashType } from '../../shared/enums/cash-type.enum';\r\nimport { FormConfigurationProviderService } from '../../shared/services/form-configuration-provider.service';\r\nimport { SecurityService } from '../../shared/services/security.service';\r\nimport { SnackbarService } from '../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../shared/services/title.service';\r\nimport { UtilService } from '../../shared/services/util.service';\r\nimport { ExecutionCashPaymentListPageComponent } from './execution-cash-payment-list-page/execution-cash-payment-list-page.component';\r\nimport { ExecutionCashReceiptListPageComponent } from './execution-cash-receipt-list-page/execution-cash-receipt-list-page.component';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-cash',\r\n    templateUrl: './execution-cash.component.html',\r\n    styleUrls: ['./execution-cash.component.scss'],\r\n})\r\n\r\nexport class ExecutionCashComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('cashPaymentListComponent') cashPaymentListComponent: ExecutionCashPaymentListPageComponent;\r\n    @ViewChild('cashReceiptListComponent') cashReceiptListComponent: ExecutionCashReceiptListPageComponent;\r\n\r\n    cashOption: number;\r\n    tabIndex: number;\r\n    company: string;\r\n    cpSimplePrivilege = false;\r\n    cpPickTranPrivilege = false;\r\n    cpDiffClientPrivilege = false;\r\n    cpDiffCurrencyPrivilege = false;\r\n    crSimplePrivilege = false;\r\n    crPickTranPrivilege = false;\r\n    crDiffCurrencyPrivilege = false;\r\n    isCashPaymentMode = true;\r\n\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoaded: boolean = false;\r\n    actionCreateCash: FloatingActionButtonActions = {\r\n        icon: 'add',\r\n        text: 'Create Cash',\r\n        action: 'createCash',\r\n        disabled: false,\r\n        index: 0,\r\n    };\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public utilService: UtilService,\r\n        protected snackbarService: SnackbarService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    onCreateCashButtonClicked(cashOption) {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/execution/cash/new/' + encodeURIComponent(cashOption)]);\r\n    }\r\n\r\n    onSelectedIndexChanged = (tabChangeEvent: number): void => {\r\n        this.setCashType(tabChangeEvent);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.tabIndex = 0;\r\n        this.setCashType(this.tabIndex);\r\n\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if ((this.authorizationService.isPrivilegeAllowed(this.company, 'Cash') && this.authorizationService.isPrivilegeAllowed(this.company, 'CashPayment'))) {\r\n                this.cpSimplePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CPSIMPLE');\r\n                this.cpPickTranPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CPPICKTX');\r\n                this.cpDiffClientPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CPDIFFCLI');\r\n                this.cpDiffCurrencyPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CPDIFFCCY');\r\n            }\r\n            if ((this.authorizationService.isPrivilegeAllowed(this.company, 'Cash') && this.authorizationService.isPrivilegeAllowed(this.company, 'CashReceipt'))) {\r\n                this.crSimplePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CRSIMPLE');\r\n                this.crPickTranPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CRPICKTX');\r\n                this.crDiffCurrencyPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CRDIFFCCY');\r\n            }\r\n        });\r\n        this.updateFAB();\r\n\r\n    }\r\n\r\n    updateFAB() {\r\n        this.initFABActions();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    setCashType(tabIndex: number) {\r\n        if (tabIndex === 0) {\r\n            this.isCashPaymentMode = true;\r\n            this.cashOption = CashType.CashPayment;\r\n            this.cashPaymentListComponent.cashTypeId = this.cashOption;\r\n            this.cashPaymentListComponent.getCashList();\r\n            this.setTitle();\r\n        } else if (tabIndex === 1) {\r\n            this.isCashPaymentMode = false;\r\n            this.cashOption = CashType.CashReceipt;\r\n            this.cashReceiptListComponent.cashTypeId = this.cashOption;\r\n            this.cashReceiptListComponent.getCashList();\r\n            this.setTitle();\r\n        }\r\n        this.updateFAB();\r\n    }\r\n\r\n    setTitle() {\r\n        if (this.cashOption === CashType.CashPayment) {\r\n            this.titleService.setTitle('Cash Payments');\r\n        } else if (this.cashOption === CashType.CashReceipt) {\r\n            this.titleService.setTitle('Cash Receipts');\r\n        }\r\n    }\r\n\r\n    initFABActions() {\r\n        this.fabTitle = 'Create Cash Single Extended FAB';\r\n        this.fabType = FABType.ExtendedSingleButton;\r\n\r\n        this.fabMenuActions = [];\r\n\r\n        if (this.cashOption === CashType.CashPayment) {\r\n            if (this.cpSimplePrivilege || this.cpPickTranPrivilege || this.cpDiffClientPrivilege || this.cpDiffCurrencyPrivilege) {\r\n                this.fabMenuActions.push(this.actionCreateCash);\r\n            }\r\n        }\r\n        if (this.cashOption === CashType.CashReceipt) {\r\n            if (this.crSimplePrivilege || this.crPickTranPrivilege || this.crDiffCurrencyPrivilege) {\r\n                this.fabMenuActions.push(this.actionCreateCash);\r\n            }\r\n        }\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        this.onCreateCashButtonClicked(this.cashOption);\r\n    }\r\n\r\n}\r\n","module.exports = \"<i *ngIf=\\\"!disabled\\\"\\r\\n   class=\\\"material-icons\\\">{{this.icon}}</i>\\r\\n\\r\\n<a class=\\\"margin-left-i-5\\\"\\r\\n   [ngClass]=\\\"classApplied\\\"\\r\\n   *ngIf=\\\"!disabled\\\">{{this.params.value}}</a>\"","module.exports = \".contract-reference-link {\\n  color: #0000EE;\\n  text-decoration: underline;\\n  cursor: pointer; }\\n\\n.disable-url-click-green {\\n  color: green; }\\n\\n.disable-url-click-orange {\\n  color: orange; }\\n\\n.disable-url-click-red {\\n  color: red; }\\n\\n.icon-click-green {\\n  color: green !important; }\\n\\n.icon-click-orange {\\n  color: orange !important; }\\n\\n.icon-click-red {\\n  color: red !important; }\\n\\n.margin-left-i-5 {\\n  margin-left: 5px; }\\n\"","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\n\r\n@Component({\r\n    selector: 'atlas-ag-grid-charterstatus-for-charter-bulk-closure',\r\n    templateUrl: './ag-grid-charterstatus-for-charter-bulk-closure.component.html',\r\n    styleUrls: ['./ag-grid-charterstatus-for-charter-bulk-closure.component.scss'],\r\n})\r\n\r\nexport class AgGridCharterStatusForCharterBulkClosureComponent implements ICellRendererAngularComp {\r\n    public params: any;\r\n    public classApplied: string = 'contract-reference-link';\r\n    public icon: any;\r\n    public classAppliedIcon: string\r\n    public disabled: boolean = false;\r\n    constructor() {\r\n    }\r\n\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        if (this.params.data.sectionId) {\r\n            this.disabled = true;\r\n        }\r\n        else {\r\n            if (this.params.data.category === 'green') {\r\n                this.classApplied = 'disable-url-click-green';\r\n                this.classAppliedIcon = 'icon-click-green';\r\n                this.icon = 'check_circle'\r\n            }\r\n            else if (this.params.data.category === 'orange') {\r\n                this.classApplied = 'disable-url-click-orange';\r\n                this.classAppliedIcon = 'icon-click-orange';\r\n                this.icon = 'warning'\r\n            }\r\n            else if (this.params.data.category === 'red') {\r\n                this.classApplied = 'disable-url-click-red';\r\n                this.classAppliedIcon = 'icon-click-red';\r\n                this.icon = 'remove_circle'\r\n            }\r\n        }\r\n    }\r\n\r\n    refresh(): boolean {\r\n        return false;\r\n    }\r\n}\r\n","module.exports = \"<div *ngIf=\\\"ispopUpcellRendererLoaded()\\\"\\r\\n     class=\\\"chart-status-div\\\">\\r\\n    <span>{{data}}</span>\\r\\n    <mat-icon matSuffix\\r\\n              (click)=\\\"onExploreClicked($event)\\\">launch</mat-icon>\\r\\n</div>\"","module.exports = \"::ng-deep .chart-status-div {\\n  line-height: 25px;\\n  color: #9d5e5e; }\\n\\n::ng-deep mat-icon {\\n  float: right;\\n  padding-top: 2%; }\\n\"","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\n\r\n@Component({\r\n    selector: 'atlas-ag-grid-hyperlink-for-charter-bulk-closure',\r\n    templateUrl: './ag-grid-hyperlink-for-charter-bulk-closure.component.html',\r\n    styleUrls: ['./ag-grid-hyperlink-for-charter-bulk-closure.component.scss']\r\n})\r\nexport class AgGridHyperlinkForCharterBulkClosureComponent implements ICellRendererAngularComp {\r\n\r\n    data: any;\r\n    params: any;\r\n\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.data = params.value;\r\n    }\r\n\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n\r\n    onExploreClicked() {\r\n        let link: string;\r\n\r\n        if (this.params.data) {\r\n            if (this.params.data.message === 'Cargo Accrual' || this.params.data.message === 'Invoices not cash matched'\r\n                || this.params.data.message === 'Invoices not posted') {\r\n                link = `${this.params.context.componentParent.companyManager.getCurrentCompanyId()}/trades/display/${this.params.data.sectionId}/5`;\r\n                window.open(link, '_blank');\r\n            }\r\n            if (this.params.data.message === 'Cost Accrual') {\r\n                link = `${this.params.context.componentParent.companyManager.getCurrentCompanyId()}/trades/display/${this.params.data.sectionId}/1`;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ispopUpcellRendererLoaded() {\r\n        if (this.params.data.sectionId) {\r\n            if (this.params.data.category !== 'green' && this.data !== undefined && this.data !== '') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between left\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"20px\\\">\\r\\n        <span class=\\\"fill-space\\\">\\r\\n            <h3>Possible Purchase Allocations</h3>\\r\\n        </span>\\r\\n        <mat-menu class=\\\"no-overflow\\\"\\r\\n                  #menu=\\\"matMenu\\\">\\r\\n\\r\\n            <div *ngFor=\\\"let col of purchaseAllocationGridCols\\\">\\r\\n                <mat-checkbox [checked]=\\\"!col.hide\\\">{{col.headerName}}</mat-checkbox>\\r\\n            </div>\\r\\n\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"purchaseAllocationGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n         style=\\\"width: 100%; height: 100%\\\">\\r\\n        <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [gridOptions]=\\\"purchaseAllocationGridOptions\\\"\\r\\n                         [rowData]=\\\"purchaseAllocationGridRows\\\"\\r\\n                         [columnDefs]=\\\"purchaseAllocationGridCols\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [suppressRowClickSelection]=\\\"true\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         (rowSelected)=\\\"onRowSelected($event)\\\"\\r\\n                         domLayout=autoHeight\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { ShippingType } from '../../../../../shared/enums/shipping-type-enum';\r\nimport { AllocatedTradeDisplayView } from '../../../../../shared/models/allocated-trade-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { AllocateSectionCommand } from '../../../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-purchase-allocation-component',\r\n    templateUrl: './purchase-allocation-component.component.html',\r\n    styleUrls: ['./purchase-allocation-component.component.scss'],\r\n})\r\nexport class PurchaseAllocationComponentComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly purchaseRowSelected = new EventEmitter();\r\n    @Output() readonly isPurchaseRowDataUpdated = new EventEmitter();\r\n    @Output() readonly onPurchaseRowSelectedChange = new EventEmitter<any>();\r\n    @Output() readonly purchaseRowUnChecked = new EventEmitter<any>();\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    purchaseAllocationGridCols: agGrid.ColDef[];\r\n    purchaseAllocationGridOptions: agGrid.GridOptions = {};\r\n    purchaseAllocationGridRows: AllocatedTradeDisplayView[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    charterId: number;\r\n    getPossibleAllocationForPurchase: Subscription;\r\n    formatType: string = 'en-US';\r\n\r\n    constructor(protected uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.charterId = Number(this.route.snapshot.paramMap.get('charterId'));\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.initAllocationGridCols();\r\n        this.getPurchaseTradesForAllocation();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.gridApi.onFilterChanged();\r\n    }\r\n\r\n    initAllocationGridCols() {\r\n        this.purchaseAllocationGridOptions = {\r\n            enableSorting: true,\r\n            enableFilter: true,\r\n            rowDeselection: false,\r\n        };\r\n        this.purchaseAllocationGridCols = [\r\n            {\r\n                colId: 'sectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                colId: 'type',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Reference',\r\n                headerTooltip: 'Reference',\r\n                field: 'contractLabel',\r\n                filter: 'agTextColumnFilter',\r\n                colId: 'contractLabel',\r\n                headerCheckboxSelection: false,\r\n                headerCheckboxSelectionFilteredOnly: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Department ',\r\n                headerTooltip: 'Department ',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                headerTooltip: 'Quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                colId: 'quantity',\r\n                valueFormatter: this.formatValue.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cmy1',\r\n                headerTooltip: 'Cmy1',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n            },\r\n            {\r\n                headerName: 'Cmy2',\r\n                headerTooltip: 'Cmy2',\r\n                field: 'commodityOrigin',\r\n                colId: 'commodityOrigin',\r\n            },\r\n            {\r\n                headerName: 'Cmy3',\r\n                headerTooltip: 'Cmy3',\r\n                field: 'commodityGrade',\r\n                colId: 'commodityGrade',\r\n            },\r\n            {\r\n                headerName: 'Cmy4',\r\n                headerTooltip: 'Cmy4',\r\n                field: 'commodityLvl4',\r\n                colId: 'commodityLvl4',\r\n            },\r\n            {\r\n                headerName: 'Cmy5',\r\n                headerTooltip: 'Cmy5',\r\n                field: 'commodityLvl5',\r\n                colId: 'commodityLvl5',\r\n            },\r\n        ];\r\n\r\n    }\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(param.value);\r\n    }\r\n    getPurchaseTradesForAllocation() {\r\n        this.getPossibleAllocationForPurchase = this.executionService.GetPossibleAllocationByCharterAsync(this.charterId)\r\n            .subscribe((data) => {\r\n                this.isPurchaseRowDataUpdated.emit({ salesDataUpdated: false, purchaseDataUpdated: true });\r\n                this.purchaseAllocationGridRows = data.value.map((allocatedTrade) => {\r\n                    return new AllocatedTradeDisplayView(allocatedTrade);\r\n                });\r\n                this.purchaseAllocationGridRows = this.purchaseAllocationGridRows.filter((contract) =>\r\n                    contract.type === ContractTypes.Purchase.toString(),\r\n                );\r\n                this.initAllocationGridCols();\r\n            });\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.getPossibleAllocationForPurchase) {\r\n            this.getPossibleAllocationForPurchase.unsubscribe();\r\n        }\r\n    }\r\n    onRowSelected(event) {\r\n        if (event.node.selected === true) {\r\n            this.purchaseRowSelected.emit();\r\n        } else {\r\n            this.purchaseRowUnChecked.emit();\r\n        }\r\n        this.onPurchaseRowSelectedChange.emit(event);\r\n    }\r\n    getSelectedRow() {\r\n        return this.gridApi.getSelectedRows()[0];\r\n    }\r\n    populateEntity(command: any) {\r\n        const allocateSection = command as AllocateSectionCommand;\r\n        const selectedRow = this.gridApi.getSelectedRows()[0];\r\n        if (selectedRow) {\r\n            allocateSection.sourceQuantity = selectedRow.quantity;\r\n            allocateSection.sectionReference = selectedRow.contractLabel;\r\n            allocateSection.sectionId = selectedRow.sectionId;\r\n            allocateSection.shippingType = ShippingType.PurchaseToSale;\r\n        }\r\n        return allocateSection;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         fxFlex=\\\"70\\\">\\r\\n        <h3>Allocation</h3>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\"\\r\\n             fxFlex=\\\"100\\\">\\r\\n            <mat-form-field fxFlex=\\\"50\\\">\\r\\n                <input matInput\\r\\n                       [textMask]=\\\"{mask:mask}\\\"\\r\\n                       [formControl]=\\\"quantityCtrl\\\"\\r\\n                       (blur)=\\\"checkQuantityValue()\\\"\\r\\n                       placeholder=\\\"Quantity to allocate\\\"\\r\\n                       [required]=\\\"quantityCtrl.isRequired\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"quantityCtrl.hasError('required')\\\">\\r\\n                    Quantity to allocate is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"quantityCtrl.hasError('isPositiveError')\\\">\\r\\n                    Quantity to allocate must be positive.\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"quantityCtrl.hasError('max')\\\">\\r\\n                    Cannot be greater than quantity available.\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"quantityCtrl.hasError('min')\\\">\\r\\n                    Quantity cannot be zero.\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"50\\\">\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"quantityCodeCtrl\\\"\\r\\n                       placeholder=\\\"Quantity Code\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { ChangeDetectorRef, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, Validators } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { isPositive } from '../../../../../shared/directives/number-validators.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { AllocatedTradeDisplayView } from '../../../../../shared/models/allocated-trade-display-view';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AllocateSectionCommand } from '../../../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-quantity-allocation-component',\r\n    templateUrl: './quantity-allocation-component.component.html',\r\n    styleUrls: ['./quantity-allocation-component.component.scss'],\r\n})\r\nexport class QuantityAllocationComponentComponent extends BaseFormComponent implements OnInit {\r\n\r\n    quantityCtrl = new AtlasFormControl('Quantity');\r\n    quantityCodeCtrl = new AtlasFormControl('QuantityCode');\r\n    @Output() readonly isQuantityFormInvalid = new EventEmitter();\r\n    mask = CustomNumberMask(12, 10, true);\r\n    quantityAvaliable: number = 0;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private cdr: ChangeDetectorRef,\r\n        protected utilService: UtilService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setValidators();\r\n        this.cdr.detectChanges();\r\n    }\r\n    setValidators() {\r\n\r\n        this.quantityCtrl.setValidators(\r\n            Validators.compose([isPositive()\r\n                , Validators.required, Validators.min(0.0000000001),\r\n            (control: AbstractControl) => Validators.max(Number(this.quantityAvaliable) > 0 ? Number(this.quantityAvaliable) : null)]),\r\n        );\r\n    }\r\n    updateQuantityData(contracts: AllocatedTradeDisplayView[]) {\r\n        if (contracts && contracts.length === 2) {\r\n            this.quantityAvaliable = Number(contracts[0].quantity) <= Number(contracts[1].quantity) ?\r\n                Number(contracts[0].quantity) :\r\n                Number(contracts[1].quantity);\r\n            this.quantityCtrl.setValue(this.quantityAvaliable.toFixed(3));\r\n            if (contracts[0].weightCode === contracts[1].weightCode) {\r\n                this.quantityCodeCtrl.setValue(contracts[0].weightCode);\r\n            } else {\r\n                this.quantityCodeCtrl.setValue('');\r\n            }\r\n        } else {\r\n            this.quantityAvaliable = 0;\r\n            this.quantityCtrl.setValue('');\r\n            this.quantityCodeCtrl.setValue('');\r\n        }\r\n        this.setValidators();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            quantityCtrl: this.quantityCtrl,\r\n            quantityCodeCtrl: this.quantityCodeCtrl,\r\n        },\r\n        );\r\n        return super.getFormGroup();\r\n    }\r\n    populateEntity(command: any) {\r\n        const allocateSection = command as AllocateSectionCommand;\r\n        allocateSection.quantity = this.quantityCtrl.value ? Number(this.quantityCtrl.value.toString().replace(/,/g, '')) : null;\r\n        return allocateSection;\r\n    }\r\n\r\n    resetQuantity() {\r\n        this.quantityCtrl.setValue('');\r\n        this.quantityCodeCtrl.setValue('');\r\n    }\r\n\r\n    checkQuantityValue() {\r\n        if (this.quantityCtrl.value) {\r\n            const formattedNumber = Number(this.quantityCtrl.value.toString().replace(/,/g, ''));\r\n            if (formattedNumber > this.quantityAvaliable) {\r\n                this.quantityCtrl.setErrors({ max: true });\r\n            }\r\n        }\r\n        if (!this.formGroup.valid) {\r\n            this.isQuantityFormInvalid.emit(true);\r\n        } else {\r\n            this.isQuantityFormInvalid.emit(false);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between left\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"20px\\\">\\r\\n        <span class=\\\"fill-space\\\">\\r\\n            <h3>Possible Sale Allocations</h3>\\r\\n        </span>\\r\\n        <div>\\r\\n            <mat-menu class=\\\"no-overflow\\\"\\r\\n                      #menu=\\\"matMenu\\\">\\r\\n\\r\\n                <div *ngFor=\\\"let col of saleAllocationGridCols\\\">\\r\\n                    <mat-checkbox [checked]=\\\"!col.hide\\\">{{col.headerName}}</mat-checkbox>\\r\\n                </div>\\r\\n\\r\\n            </mat-menu>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"saleAllocationGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n         style=\\\"width: 100%; height: 100%\\\">\\r\\n        <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [gridOptions]=\\\"saleAllocationGridOptions\\\"\\r\\n                         [rowData]=\\\"saleAllocationGridRows\\\"\\r\\n                         [columnDefs]=\\\"saleAllocationGridCols\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [suppressRowClickSelection]=\\\"true\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         (rowSelected)=\\\"onRowSelected($event)\\\"\\r\\n                         domLayout=autoHeight\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { AllocatedTradeDisplayView } from '../../../../../shared/models/allocated-trade-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { AllocateSectionCommand } from '../../../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-sale-allocation-component',\r\n    templateUrl: './sale-allocation-component.component.html',\r\n    styleUrls: ['./sale-allocation-component.component.scss'],\r\n})\r\nexport class SaleAllocationComponentComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly saleRowSelected = new EventEmitter();\r\n    @Output() readonly saleRowUnChecked = new EventEmitter();\r\n    @Output() readonly onSaleRowSelectedChange = new EventEmitter<any>();\r\n    @Output() readonly isSaleRowDataUpdated = new EventEmitter();\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    saleAllocationGridCols: agGrid.ColDef[];\r\n    saleAllocationGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    saleAllocationGridRows: AllocatedTradeDisplayView[];\r\n    charterId: number;\r\n    getPossibleAllocationForSale: Subscription;\r\n    formatType: string = 'en-US';\r\n\r\n    constructor(protected uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        public gridService: AgGridService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.charterId = Number(this.route.snapshot.paramMap.get('charterId'));\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.initAllocationGridCols();\r\n        this.getSaleTradesForAllocation();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.gridApi.onFilterChanged();\r\n    }\r\n\r\n    initAllocationGridCols() {\r\n        this.saleAllocationGridOptions = {\r\n            enableSorting: true,\r\n            enableFilter: true,\r\n            rowDeselection: false,\r\n        };\r\n        this.saleAllocationGridCols = [\r\n            {\r\n                colId: 'sectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                colId: 'type',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Reference',\r\n                headerTooltip: 'Reference',\r\n                field: 'contractLabel',\r\n                filter: 'agTextColumnFilter',\r\n                colId: 'contractLabel',\r\n                headerCheckboxSelection: false,\r\n                headerCheckboxSelectionFilteredOnly: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Department ',\r\n                headerTooltip: 'Department ',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                headerTooltip: 'Quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                colId: 'quantity',\r\n                valueFormatter: this.formatValue.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cmy1',\r\n                headerTooltip: 'Cmy1',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n            },\r\n            {\r\n                headerName: 'Cmy2',\r\n                headerTooltip: 'Cmy2',\r\n                field: 'commodityOrigin',\r\n                colId: 'commodityOrigin',\r\n            },\r\n            {\r\n                headerName: 'Cmy3',\r\n                headerTooltip: 'Cmy3',\r\n                field: 'commodityGrade',\r\n                colId: 'commodityGrade',\r\n            },\r\n            {\r\n                headerName: 'Cmy4',\r\n                headerTooltip: 'Cmy4',\r\n                field: 'commodityLvl4',\r\n                colId: 'commodityLvl4',\r\n            },\r\n            {\r\n                headerName: 'Cmy5',\r\n                headerTooltip: 'Cmy5',\r\n                field: 'commodityLvl5',\r\n                colId: 'commodityLvl5',\r\n            },\r\n        ];\r\n\r\n    }\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(param.value);\r\n    }\r\n    getSaleTradesForAllocation() {\r\n        this.getPossibleAllocationForSale = this.executionService.GetPossibleAllocationByCharterAsync(this.charterId)\r\n            .subscribe((data) => {\r\n                this.isSaleRowDataUpdated.emit({ salesDataUpdated: true, purchaseDataUpdated: false });\r\n                this.saleAllocationGridRows = data.value.map((allocatedTrade) => {\r\n                    return new AllocatedTradeDisplayView(allocatedTrade);\r\n                });\r\n                this.saleAllocationGridRows = this.saleAllocationGridRows.filter((contract) =>\r\n                    contract.type === ContractTypes.Sale.toString(),\r\n                );\r\n                this.initAllocationGridCols();\r\n            });\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.getPossibleAllocationForSale) {\r\n            this.getPossibleAllocationForSale.unsubscribe();\r\n        }\r\n    }\r\n    onRowSelected(event) {\r\n        if (event.node.selected === true) {\r\n            this.saleRowSelected.emit();\r\n        } else {\r\n            this.saleRowUnChecked.emit();\r\n        }\r\n        this.onSaleRowSelectedChange.emit(event);\r\n    }\r\n    getSelectedRow() {\r\n        return this.gridApi.getSelectedRows()[0];\r\n    }\r\n    populateEntity(command: any) {\r\n        const allocateSection = command as AllocateSectionCommand;\r\n        const selectedRow = this.gridApi.getSelectedRows()[0];\r\n        if (selectedRow) {\r\n            allocateSection.allocatedSectionId = selectedRow.sectionId;\r\n            allocateSection.targetQuantity = selectedRow.quantity;\r\n            allocateSection.allocatedSectionReference = selectedRow.contractLabel;\r\n        }\r\n        return allocateSection;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h2 mat-dialog-title>\\r\\n        You are about to deallocate your trade. Do you wish to re-instate pre-allocation traffic details ?\\r\\n    </h2>\\r\\n    <mat-dialog-actions>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCancelButtonClicked()\\\">\\r\\n            Cancel\\r\\n        </button>\\r\\n        <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\\r\\n        <button mat-button\\r\\n                (click)=\\\"onYesButtonClicked()\\\">\\r\\n            Yes\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onNoButtonClicked()\\\">\\r\\n            No\\r\\n        </button>\\r\\n    </mat-dialog-actions>\\r\\n</div>\\r\\n\"","module.exports = \".mat-dialog-actions {\\n  margin: 0 !important; }\\n\\nbutton.mat-button {\\n  margin: 0px 8px !important; }\\n\"","import { Component } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-contract-deallocation-dialog-component',\r\n    templateUrl: './contract-deallocation-dialog-component.component.html',\r\n    styleUrls: ['./contract-deallocation-dialog-component.component.scss'],\r\n})\r\nexport class ContractDeallocationDialogComponent {\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<ContractDeallocationDialogComponent>) { }\r\n\r\n    onCancelButtonClicked() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    onYesButtonClicked() {\r\n        this.dialogRef.close(true);\r\n    }\r\n\r\n    onNoButtonClicked() {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between left\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h3 class=\\\"atlas-grid-card-title\\\">Possible Deallocation</h3>\\r\\n        <span class=\\\"fill-space\\\"> </span>\\r\\n        <div>\\r\\n            <mat-menu class=\\\"no-overflow\\\"\\r\\n                      #menu=\\\"matMenu\\\">\\r\\n\\r\\n                <div *ngFor=\\\"let col of deallocationGridCols\\\">\\r\\n                    <mat-checkbox [checked]=\\\"!col.hide\\\">{{col.headerName}}</mat-checkbox>\\r\\n                </div>\\r\\n            </mat-menu>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div>\\r\\n        <h5 class=\\\"no-margin\\\">Only trades that are allocated & have no BL date are available for deallocation</h5>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"deallocationGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n         style=\\\"width: 100%; height: 100%\\\">\\r\\n        <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [gridOptions]=\\\"deallocationGridOptions\\\"\\r\\n                         [rowData]=\\\"deallocationGridRows\\\"\\r\\n                         [columnDefs]=\\\"deallocationGridCols\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [suppressRowClickSelection]=\\\"true\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         (rowSelected)=\\\"onRowSelected($event)\\\"\\r\\n                         (selectionChanged)=\\\"onSelectionChanged($event)\\\"\\r\\n                         rowSelection='multiple'\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AllocatedTradeDisplayView } from '../../../../../shared/models/allocated-trade-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-deallocation-component',\r\n    templateUrl: './deallocation-component.component.html',\r\n    styleUrls: ['./deallocation-component.component.scss'],\r\n})\r\nexport class DeallocationComponentComponent implements OnInit, OnDestroy {\r\n    @Output() readonly deallocationRowSelected = new EventEmitter();\r\n    @Output() readonly onDeallocationRowSelected = new EventEmitter<any>();\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    deallocationGridCols: agGrid.ColDef[];\r\n    deallocationGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    deallocationGridRows: AllocatedTradeDisplayView[];\r\n    charterId: number;\r\n    getPossibleDeallocationSubscription: Subscription;\r\n    formatType: string = 'en-US';\r\n\r\n    constructor(protected uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        public gridService: AgGridService,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.charterId = Number(this.route.snapshot.paramMap.get('charterId'));\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.initAllocationGridCols();\r\n        this.getcontractsForDeallocation();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.gridApi.onFilterChanged();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    initAllocationGridCols() {\r\n        this.deallocationGridCols = [\r\n            {\r\n                colId: 'sectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                colId: 'allocatedSectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                colId: 'type',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Reference',\r\n                headerTooltip: 'Reference',\r\n                field: 'contractLabel',\r\n                filter: 'agTextColumnFilter',\r\n                colId: 'contractLabel',\r\n                headerCheckboxSelection: false,\r\n                headerCheckboxSelectionFilteredOnly: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Department ',\r\n                headerTooltip: 'Department ',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                headerTooltip: 'Quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                colId: 'quantity',\r\n                valueFormatter: this.formatValue.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cmy1',\r\n                headerTooltip: 'Cmy1',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n            },\r\n            {\r\n                headerName: 'Cmy2',\r\n                headerTooltip: 'Cmy2',\r\n                field: 'commodityOrigin',\r\n                colId: 'commodityOrigin',\r\n            },\r\n            {\r\n                headerName: 'Cmy3',\r\n                headerTooltip: 'Cmy3',\r\n                field: 'commodityGrade',\r\n                colId: 'commodityGrade',\r\n            },\r\n            {\r\n                headerName: 'Cmy4',\r\n                headerTooltip: 'Cmy4',\r\n                field: 'commodityLvl4',\r\n                colId: 'commodityLvl4',\r\n            },\r\n            {\r\n                headerName: 'Cmy5',\r\n                headerTooltip: 'Cmy5',\r\n                field: 'commodityLvl5',\r\n                colId: 'commodityLvl5',\r\n            },\r\n        ];\r\n\r\n    }\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(param.value);\r\n    }\r\n    getcontractsForDeallocation() {\r\n        this.getPossibleDeallocationSubscription = this.executionService.GetPossibleDeallocationByCharterAsync(this.charterId)\r\n            .subscribe((data) => {\r\n                this.deallocationGridRows = data.value.map((allocatedTrade) => {\r\n                    return new AllocatedTradeDisplayView(allocatedTrade);\r\n                });\r\n                this.initAllocationGridCols();\r\n            });\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.getPossibleDeallocationSubscription) {\r\n            this.getPossibleDeallocationSubscription.unsubscribe();\r\n        }\r\n    }\r\n    getSelectedRow() {\r\n        return this.gridApi.getSelectedRows();\r\n    }\r\n    refreshDeallocationData() {\r\n        this.gridApi.redrawRows();\r\n    }\r\n    onRowSelected(event) {\r\n        if (event.node.selected === true) {\r\n            let contractCount = 0;\r\n            const numberOfRowsSelected = this.gridApi.getSelectedRows().length;\r\n            if (numberOfRowsSelected < 2) {\r\n                this.deallocationGridOptions.api.forEachNode((contract) => {\r\n                    if (event.node.data.sectionId === contract.data.allocatedSectionId) {\r\n                        contract.setSelected(true);\r\n                        contractCount = contractCount + 1;\r\n                    }\r\n                });\r\n            }\r\n            if ((numberOfRowsSelected === 1 && contractCount === 0) || numberOfRowsSelected > 2) {\r\n                this.deallocationGridOptions.api.deselectAll();\r\n            }\r\n            this.deallocationRowSelected.emit();\r\n        }\r\n        if (!event.node.selected) {\r\n            this.deallocationGridOptions.api.deselectAll();\r\n        }\r\n        this.onDeallocationRowSelected.emit(event);\r\n    }\r\n    onSelectionChanged(event) {\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"allocationCharterFormGroup\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxFlex=\\\"49\\\">\\r\\n                <atlas-purchase-allocation-component #purchaseAllocationComponent\\r\\n                                                     (purchaseRowSelected)=\\\"validateContract()\\\"\\r\\n                                                     (purchaseRowUnChecked)=\\\"validateContract()\\\"\\r\\n                                                     (onPurchaseRowSelectedChange)=\\\"purchaseRowSelectedChange($event)\\\"\\r\\n                                                     (isPurchaseRowDataUpdated)=\\\"rowDataUpdated($event)\\\">\\r\\n                </atlas-purchase-allocation-component>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"49\\\">\\r\\n                <atlas-sale-allocation-component #saleAllocationComponent\\r\\n                                                 (saleRowSelected)=\\\"validateContract()\\\"\\r\\n                                                 (saleRowUnChecked)=\\\"validateContract()\\\"\\r\\n                                                 (onSaleRowSelectedChange)=\\\"saleRowSelectedChange($event)\\\"\\r\\n                                                 (isSaleRowDataUpdated)=\\\"rowDataUpdated($event)\\\">\\r\\n                </atlas-sale-allocation-component>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoadingassign\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxFlex=\\\"98.5\\\">\\r\\n                <atlas-quantity-allocation-component #quantityAllocationComponent\\r\\n                                                     (isQuantityFormInvalid)=\\\"disableAllocationButton($event)\\\">\\r\\n                </atlas-quantity-allocation-component>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\"\\r\\n             class=\\\"button-details\\\"\\r\\n             [ngClass]=\\\"{'hidden-during-loading':isLoadingassign}\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\">\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onAllocateButtonClicked()\\\"\\r\\n                        [disabled]=\\\"isDisabled\\\"\\r\\n                        mat-button>\\r\\n                    ALLOCATE\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-around start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxFlex=\\\"98.5\\\">\\r\\n            <atlas-deallocation-component #deallocationComponent\\r\\n                                          (deallocationRowSelected)=\\\"validateDeallocationContract()\\\"\\r\\n                                          (onDeallocationRowSelected)=\\\"deallocationRowSelectedChange($event)\\\">\\r\\n            </atlas-deallocation-component>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"btn-container\\\">\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start start\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start end\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onDeallocateButtonClicked()\\\"\\r\\n                    [disabled]=\\\"isDeallocationDisabled\\\">\\r\\n                Deallocate\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\"","module.exports = \"\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { SectionTraffic } from '../../../../app/shared/entities/section-traffic.entity';\r\nimport { SplitType } from '../../../../app/shared/enums/split-type.enum';\r\nimport { SnackbarService } from '../../../../app/shared/services/snackbar.service';\r\nimport { AllocationMessage } from '../../../../app/trading/entities/allocation-message';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { WarningMessageTypes } from '../../../shared/enums/warning-message-type.enum';\r\nimport { AllocatedTradeDisplayView } from '../../../shared/models/allocated-trade-display-view';\r\nimport { AllocateSectionCommand } from '../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { TradingService } from '../../../shared/services/http-services/trading.service';\r\nimport { SplitCreationResult } from '../../../shared/services/trading/dtos/section';\r\nimport { GetWarningMessages } from '../../../shared/validators/warning-messages-validator.validator';\r\nimport { PurchaseAllocationComponentComponent } from './allocation-form-components/purchase-allocation-component/purchase-allocation-component.component';\r\nimport { QuantityAllocationComponentComponent } from './allocation-form-components/quantity-allocation-component/quantity-allocation-component.component';\r\nimport { SaleAllocationComponentComponent } from './allocation-form-components/sale-allocation-component/sale-allocation-component.component';\r\nimport { ContractDeallocationDialogComponent } from './contract-deallocation-dialog-component/contract-deallocation-dialog-component.component';\r\nimport { DeallocationComponentComponent } from './deallocation-form-component/deallocation-component/deallocation-component.component';\r\nimport { LockService } from '../../../shared/services/http-services/lock.service';\r\nimport { IsLocked } from '../../../shared/entities/is-locked.entity';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { LockFunctionalContext } from '../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../shared/entities/lock-resource-information.entity';\r\nimport { ContractTypes } from '../../../shared/enums/contract-type.enum';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { ContractInvoiceType } from '../../../shared/enums/contract-invoice-type.enum';\r\nimport { AllocationSetUp } from '../../../shared/entities/allocation-set-up-entity';\r\nimport { ConfigurationService } from '../../../shared/services/http-services/configuration.service';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-allocation-deallocation',\r\n    templateUrl: './execution-charter-allocation-deallocation.component.html',\r\n    styleUrls: ['./execution-charter-allocation-deallocation.component.scss'],\r\n})\r\nexport class ExecutionCharterAllocationDeallocationComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('purchaseAllocationComponent') purchaseAllocationComponent: PurchaseAllocationComponentComponent;\r\n    @ViewChild('saleAllocationComponent') saleAllocationComponent: SaleAllocationComponentComponent;\r\n    @ViewChild('quantityAllocationComponent') quantityAllocationComponent: QuantityAllocationComponentComponent;\r\n    @ViewChild('deallocationComponent') deallocationComponent: DeallocationComponentComponent;\r\n\r\n    allocationMessage: AllocationMessage[] = [];\r\n    contracts: AllocatedTradeDisplayView[] = [];\r\n    allocationCharterFormGroup: FormGroup;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    isDisabled: boolean = true;\r\n    isSave: boolean = false;\r\n    message: string;\r\n    errorCount: number = 0;\r\n    allocateSectionSubscription: Subscription;\r\n    splitResult: SplitCreationResult[];\r\n    isDeallocationDisabled: boolean = true;\r\n    charterId: number;\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    isLoadingassign: boolean = false;\r\n    isSaleDataUpdated: boolean = false;\r\n    isPurchaseDataUpdated: boolean = false;\r\n    isTradesAvailableForWashout: boolean = false;\r\n    allocationSetUpData: AllocationSetUp[] = [];\r\n    company: string;\r\n\r\n\r\n    constructor(private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n        protected router: Router,\r\n        protected tradingService: TradingService,\r\n        public dialog: MatDialog,\r\n        protected lockService: LockService,\r\n        private titleService: TitleService,\r\n        protected configurationService: ConfigurationService, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.charterId = Number(this.route.snapshot.paramMap.get('charterId'));\r\n        this.allocationCharterFormGroup = this.formBuilder.group({\r\n            quantityGroup: this.quantityAllocationComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.purchaseAllocationComponent,\r\n            this.saleAllocationComponent,\r\n            this.quantityAllocationComponent,\r\n        );\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());\r\n        this.titleService.setTitle('Trade Allocation/Deallocation')\r\n        this.getAllocationSetUpData(this.company);\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.allocationCharterFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm(\"Leave an unsave form? \\nYour changes won't be applied!\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    allocationSuccessful() {\r\n        this.quantityAllocationComponent.formGroup.reset();\r\n    }\r\n\r\n    onAllocateButtonClicked() {\r\n        this.isLoadingassign = true;\r\n        this.isSaleDataUpdated = false;\r\n        this.isPurchaseDataUpdated = false;\r\n        this.isDisabled = true;\r\n        this.isSave = true;\r\n        if (this.allocationCharterFormGroup.valid) {\r\n\r\n            const allocationDetails = this.getAllocationDetails() as AllocateSectionCommand;\r\n            this.checkWashoutContract(this.contracts);\r\n            if (this.isTradesAvailableForWashout) {\r\n                const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Washout Contract',\r\n                        text: 'Do you want to mark this contract as washout ?',\r\n                        okButton: 'Yes',\r\n                        cancelButton: 'No',\r\n                    },\r\n                });\r\n                confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        allocationDetails.contractInvoiceTypeId = ContractInvoiceType.Washout;\r\n                        this.onAllocation(allocationDetails);\r\n                    }\r\n                    else {\r\n                        this.onAllocation(allocationDetails);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.onAllocation(allocationDetails);\r\n            }\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate([this.route.snapshot.paramMap.get('company') +\r\n                    '/execution/charter/details', this.charterId]);\r\n            }\r\n        });\r\n    }\r\n\r\n    onDeallocateButtonClicked() {\r\n        this.isDeallocationDisabled = true;\r\n        this.isSave = true;\r\n        const contract = this.deallocationComponent.getSelectedRow()[0];\r\n        if (contract) {\r\n            this.openDeallocationDialog(contract.sectionId);\r\n        }\r\n    }\r\n    openDeallocationDialog(sectionId: number): void {\r\n        const dialogRef = this.dialog.open(ContractDeallocationDialogComponent, {\r\n            disableClose: true,\r\n            width: '250px',\r\n            panelClass: 'trade-approval-dialog-class',\r\n            backdropClass: 'trade-approval-dialog-background-class',\r\n        });\r\n\r\n        this.subscriptions.push(dialogRef.afterClosed().subscribe((result: boolean) => {\r\n            if (result !== undefined) {\r\n                this.subscriptions.push(this.executionService.deallocateContract(sectionId, result)\r\n                    .subscribe((ok) => {\r\n                        if (ok) {\r\n                            this.snackbarService.throwErrorSnackBar(\r\n                                'Trade has been successfully de-allocated',\r\n                            );\r\n                            this.updateContractData();\r\n                            let selectedContracts = this.deallocationComponent.getSelectedRow();\r\n                            this.cleanAllocationSelectedContracts();\r\n                            this.refeshResourceInformation();\r\n                            selectedContracts.forEach((selectedContract) => {\r\n                                this.subscriptions.push(this.lockService.unlockContract(selectedContract.sectionId, LockFunctionalContext.Deallocation).subscribe());\r\n                            })\r\n                        }\r\n                    }));\r\n            } else {\r\n                this.isDeallocationDisabled = false;\r\n            }\r\n        }));\r\n    }\r\n\r\n    validateContract() {\r\n        this.errorCount = 0;\r\n        const purchaseContract = this.purchaseAllocationComponent.getSelectedRow();\r\n        const saleContract = this.saleAllocationComponent.getSelectedRow();\r\n        if (purchaseContract && saleContract) {\r\n            this.message = '';\r\n            this.allocationMessage = [];\r\n            this.contracts = [];\r\n            this.contracts.push(purchaseContract);\r\n            this.contracts.push(saleContract);\r\n            this.quantityAllocationComponent.updateQuantityData(this.contracts);\r\n            if (purchaseContract.departmentCode !== saleContract.departmentCode) {\r\n                this.message = 'Department,';\r\n                this.errorCount = this.errorCount + 1;\r\n            }\r\n            if (purchaseContract.weightCode !== saleContract.weightCode) {\r\n                this.message = this.message + 'Quantity Code';\r\n                this.errorCount = this.errorCount + 1;\r\n            }\r\n            if (this.message.length > 0) {\r\n                this.message = this.message + ' ' + 'must be the same to perform allocation.';\r\n            }\r\n            this.allocateSectionSubscription =\r\n                this.executionService.getWarningMessages(purchaseContract.sectionId, saleContract.sectionId)\r\n                    .subscribe((data) => {\r\n                        if (data.value.length > 1) {\r\n                            this.allocationMessage = GetWarningMessages(data.value, this.allocationSetUpData);\r\n                        }\r\n                        if (this.allocationMessage.length > 0) {\r\n                            this.allocationMessage.forEach((item) => {\r\n                                if (item.errorTypeId === WarningMessageTypes.Restricted) {\r\n                                    this.errorCount = this.errorCount + 1;\r\n                                    this.message = this.message + ', ' + item.message;\r\n                                }\r\n                                if (item.errorTypeId === WarningMessageTypes.Warning) {\r\n                                    this.message = this.message + ', ' + item.message;\r\n                                }\r\n                            });\r\n                        }\r\n                        this.displayErrorMessages();\r\n                    });\r\n        } else {\r\n            this.contracts = [];\r\n            this.quantityAllocationComponent.updateQuantityData(this.contracts);\r\n            this.isDisabled = true;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.allocateSectionSubscription) {\r\n            this.allocateSectionSubscription.unsubscribe();\r\n        }\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription: Subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n\r\n    displayErrorMessages() {\r\n        if (this.message.length > 0) {\r\n            this.message = this.message.replace(/^,|,$/g, '');\r\n            this.snackbarService.throwErrorSnackBar(\r\n                this.message,\r\n            );\r\n        }\r\n        this.isDisabled = this.errorCount > 0 ? true : false;\r\n    }\r\n\r\n    getAllocationDetails() {\r\n        let allocationDetails = new AllocateSectionCommand();\r\n        this.formComponents.forEach((comp) => {\r\n            allocationDetails = comp.populateEntity(allocationDetails);\r\n        });\r\n        return allocationDetails;\r\n    }\r\n\r\n    allocateTrade(allocationDetails: AllocateSectionCommand) {\r\n        this.subscriptions.push(this.executionService\r\n            .allocate(allocationDetails)\r\n            .subscribe((data) => {\r\n                const message = 'the trade' + ' ' + allocationDetails.sectionReference + ' ' +\r\n                    ' has been properly allocated to ' + ' ' +\r\n                    allocationDetails.allocatedSectionReference + ' ' + ' with the number ' + ' ' + data;\r\n                this.snackbarService.informationAndCopySnackBar(message, message);\r\n                this.updateContractData();\r\n                this.cleanAllocationSelectedContracts();\r\n                this.refeshResourceInformation();\r\n                this.subscriptions.push(this.lockService.unlockContract(allocationDetails.sectionId, LockFunctionalContext.Deallocation).subscribe());\r\n                this.subscriptions.push(this.lockService.unlockContract(allocationDetails.allocatedSectionId, LockFunctionalContext.Deallocation).subscribe());\r\n                this.allocationSuccessful();\r\n            }));\r\n    }\r\n\r\n    createSplitAndAllocate(sectionIds: number[], allocationDetails: AllocateSectionCommand) {\r\n        const splitResult: SplitCreationResult[] = [];\r\n        const splitIds: number[] = [];\r\n        this.allocateSectionSubscription = this.tradingService\r\n            .createSplitForContract(sectionIds, allocationDetails.quantity)\r\n            .subscribe(((data) => {\r\n                this.splitResult = data as SplitCreationResult[];\r\n                if (this.splitResult.length > 0 && allocationDetails.splitType === SplitType.SourceSplit) {\r\n                    allocationDetails.sectionId = this.splitResult[0].sectionId;\r\n                    allocationDetails.sectionReference = this.splitResult[0].contractLabel;\r\n                    splitIds.push(allocationDetails.sectionId);\r\n                } else if (this.splitResult.length > 0 && allocationDetails.splitType === SplitType.TargetSplit) {\r\n                    allocationDetails.allocatedSectionId = this.splitResult[0].sectionId;\r\n                    allocationDetails.allocatedSectionReference = this.splitResult[0].contractLabel;\r\n                    splitIds.push(allocationDetails.allocatedSectionId);\r\n                } else {\r\n                    if (this.splitResult.length > 1) {\r\n                        allocationDetails.sectionId = this.splitResult[0].sectionId;\r\n                        allocationDetails.allocatedSectionId = this.splitResult[1].sectionId;\r\n                        allocationDetails.sectionReference = this.splitResult[0].contractLabel;\r\n                        allocationDetails.allocatedSectionReference = this.splitResult[1].contractLabel;\r\n                        splitIds.push(allocationDetails.sectionId);\r\n                        splitIds.push(allocationDetails.allocatedSectionId);\r\n                    }\r\n                }\r\n                this.assignSplitToCharter(splitIds, allocationDetails);\r\n            }),\r\n            );\r\n    }\r\n    \r\n    assignSplitToCharter(splitIds: number[], allocationDetails: AllocateSectionCommand) {\r\n        if (splitIds.length >= 1) {\r\n            const sectionTrafficList = [];\r\n            splitIds.forEach((splitId) => {\r\n                sectionTrafficList.push(this.executionService.GetSectionTrafficDetails(splitId).toPromise());\r\n            });\r\n            Promise.all(sectionTrafficList).then((result) => {\r\n                this.executionService.assignSectionsToCharter(this.charterId, result).subscribe(((data) => {\r\n                    this.allocateTrade(allocationDetails);\r\n                }));\r\n            });\r\n        } else {\r\n            this.allocationSuccessful();\r\n        }\r\n    }\r\n\r\n    validateDeallocationContract() {\r\n        const contracts = this.deallocationComponent.getSelectedRow();\r\n        this.isDeallocationDisabled = contracts.length > 2 ? true : false;\r\n    }\r\n\r\n    updateContractData() {\r\n        this.purchaseAllocationComponent.getPurchaseTradesForAllocation();\r\n        this.saleAllocationComponent.getSaleTradesForAllocation();\r\n        this.deallocationComponent.getcontractsForDeallocation();\r\n        this.refeshResourceInformation();\r\n    }\r\n\r\n    purchaseRowSelectedChange(event) {\r\n        this.grantLock(Number(event.data.sectionId), event.node, ContractTypes.Purchase);\r\n    }\r\n\r\n    saleRowSelectedChange(event) {\r\n        this.grantLock(Number(event.data.sectionId), event.node, ContractTypes.Sale);\r\n    }\r\n\r\n    rowDataUpdated(event) {\r\n        if (event.salesDataUpdated) {\r\n            this.isSaleDataUpdated = true;\r\n        }\r\n        if (event.purchaseDataUpdated) {\r\n            this.isPurchaseDataUpdated = true;\r\n        }\r\n        if (this.isSaleDataUpdated && this.isPurchaseDataUpdated) {\r\n            this.isLoadingassign = false;\r\n\r\n        }\r\n\r\n    }\r\n    deallocationRowSelectedChange(event) {\r\n        this.grantLock(Number(event.data.sectionId), event.node, null);\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode, contractType: ContractTypes) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        if (contractType === null) {\r\n                            this.deallocationComponent.gridApi.deselectNode(node);\r\n                        }\r\n                        else if (contractType === ContractTypes.Purchase) {\r\n                            this.purchaseAllocationComponent.gridApi.deselectNode(node);\r\n                        }\r\n                        else if (contractType === ContractTypes.Sale) {\r\n                            this.saleAllocationComponent.gridApi.deselectNode(node);\r\n                        }\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        let lockFunctionalContext = LockFunctionalContext.BulkAllocation;\r\n                        if (contractType === null) {\r\n                            lockFunctionalContext = LockFunctionalContext.BulkDeallocation;\r\n                        }\r\n                        this.subscriptions.push(this.lockService.lockContract(sectionId, lockFunctionalContext).subscribe((lockState) => {\r\n                            this.refeshResourceInformation();\r\n                            this.locking = this.locking.filter((id) => id !== sectionId);\r\n                        }));\r\n\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                let lockFunctionalContext = LockFunctionalContext.BulkAllocation;\r\n                if (contractType === null) {\r\n                    lockFunctionalContext = LockFunctionalContext.BulkDeallocation;\r\n                }\r\n                this.subscriptions.push(this.lockService.unlockContract(sectionId, lockFunctionalContext).subscribe(() => {\r\n                    node.setRowSelectable(true);\r\n                    this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    cleanAllocationSelectedContracts() {\r\n\r\n        this.purchaseAllocationComponent.gridApi.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                this.purchaseAllocationComponent.gridApi.deselectNode(node);\r\n            }\r\n        });\r\n        this.saleAllocationComponent.gridApi.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                this.saleAllocationComponent.gridApi.deselectNode(node);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.purchaseAllocationComponent.gridApi.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n        this.saleAllocationComponent.gridApi.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n        this.deallocationComponent.gridApi.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n    disableAllocationButton(value) {\r\n        this.isDisabled = (value) ? true : false;\r\n    }\r\n    checkWashoutContract(contract: AllocatedTradeDisplayView[]) {\r\n\r\n        if (contract[0].counterparty === contract[1].counterparty && contract[0].currencyCode === contract[1].currencyCode) {\r\n            this.isTradesAvailableForWashout = true;\r\n        }\r\n        else {\r\n            this.isTradesAvailableForWashout = false;\r\n        }\r\n    }\r\n    onAllocation(allocationDetails: AllocateSectionCommand) {\r\n        if ((allocationDetails.quantity === allocationDetails.sourceQuantity) &&\r\n            (allocationDetails.quantity === allocationDetails.targetQuantity)) {\r\n            this.allocateTrade(allocationDetails);\r\n        } else {\r\n            const sectionIds: number[] = [];\r\n            allocationDetails.splitType = (allocationDetails.sourceQuantity > allocationDetails.quantity) &&\r\n                (allocationDetails.targetQuantity === allocationDetails.quantity) ? SplitType.SourceSplit :\r\n                (allocationDetails.sourceQuantity === allocationDetails.quantity) &&\r\n                    (allocationDetails.targetQuantity > allocationDetails.quantity) ? SplitType.TargetSplit : SplitType.Both;\r\n            switch (allocationDetails.splitType) {\r\n                case SplitType.SourceSplit:\r\n                    sectionIds.push(allocationDetails.sectionId);\r\n                    this.createSplitAndAllocate(sectionIds, allocationDetails);\r\n                    break;\r\n                case SplitType.TargetSplit:\r\n                    sectionIds.push(allocationDetails.allocatedSectionId);\r\n                    this.createSplitAndAllocate(sectionIds, allocationDetails);\r\n                    break;\r\n                case SplitType.Both:\r\n                    sectionIds.push(allocationDetails.sectionId);\r\n                    sectionIds.push(allocationDetails.allocatedSectionId);\r\n                    this.createSplitAndAllocate(sectionIds, allocationDetails);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // this method will fetch allocationsetupdata for a company\r\n    getAllocationSetUpData(company: string) {\r\n        this.configurationService.getAllocationSetUpByCompany(company)\r\n            .subscribe((data) => {\r\n                if (data && data.length > 0) {\r\n                    this.allocationSetUpData = data;\r\n                }\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<header class=\\\"header-background\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <h2>Main Information</h2>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <mat-chip-list>\\r\\n                <mat-chip selected\\r\\n                          disabled=true>\\r\\n                    Charter Reference : {{charterReference}}\\r\\n                </mat-chip>\\r\\n                <mat-chip *ngIf=\\\"charterDescription\\\"\\r\\n                          selected\\r\\n                          disabled=true>\\r\\n                    Charter Description : {{charterDescription}}\\r\\n                </mat-chip>\\r\\n                <mat-chip *ngIf=\\\"charterManager\\\"\\r\\n                          selected\\r\\n                          disabled=true>\\r\\n                    Charter Manager : {{charterManager}}\\r\\n                </mat-chip>\\r\\n                <mat-chip *ngIf=\\\"vessel\\\"\\r\\n                          selected\\r\\n                          disabled=true>\\r\\n                    Vessel : {{vessel}}\\r\\n                </mat-chip>\\r\\n                <mat-chip selected\\r\\n                          disabled=true>\\r\\n                    KPI Transport Type : {{transportType}}\\r\\n                </mat-chip>\\r\\n            </mat-chip-list>\\r\\n        </div>\\r\\n    </div>\\r\\n</header>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       fxFlex=\\\"30%\\\"\\r\\n                       [formControl]=\\\"searchContractReferenceCtrl\\\"\\r\\n                       placeholder=\\\"Contract N°\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #message>\\r\\n            </mat-form-field>\\r\\n            <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                     [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                     label=\\\"Counter Party\\\"\\r\\n                                                     (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                                     displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                     [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                     gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                     [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       fxFlex=\\\"30%\\\"\\r\\n                       [formControl]=\\\"commodity1Ctrl\\\"\\r\\n                       placeholder=\\\"Commodity1\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #message>\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n    <atlas-list-and-search class=\\\"charter-trade-assign-height\\\"\\r\\n                           [gridCode]=\\\"gridCode\\\"\\r\\n                           [gridTitle]=\\\"'Charter Assignment Sections'\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           (rowSelected)=\\\"rowSelected($event)\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [dataVersionId]=\\\"dataVersionId\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n\\r\\n\\r\\n    <mat-card class=\\\"mat-elevation-z1 padding-small atr-ag-grid\\\">\\r\\n        <div fxFlex=\\\"100\\\">\\r\\n            <div fxLayout=\\\"row\\\">\\r\\n                <mat-card-title>Selected Contract</mat-card-title>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"charterGridOptionsAss\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"assignedContractGridRows\\\"\\r\\n                                 [columnDefs]=\\\"assignedContractGridColumns\\\"\\r\\n                                 (gridReady)=\\\"onGridReadyAssign($event)\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"false\\\"\\r\\n                                 [animateRows]=\\\"true\\\"\\r\\n                                 [suppressDragLeaveHidesColumns]=\\\"true\\\"\\r\\n                                 rowSelection='multiple'\\r\\n                                 [rowStyle]=\\\"rowStyle\\\"\\r\\n                                 (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [groupUseEntireRow]=\\\"true\\\"\\r\\n                                 [suppressRowClickSelection]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoadingassign\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                                  [fabType]=\\\"fabType\\\"\\r\\n                                  [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                  [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                                  (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n    </atlas-floating-action-button>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\\r\\n\"","module.exports = \":host ::ng-deep.ag-layout-auto-height.ag-body-container {\\n  min-height: 100px !important; }\\n\\n.atr-ag-grid {\\n  height: 100%; }\\n\\n::ng-deep.mat-form-field-appearance-legacy .mat-form-field-infix {\\n  padding-top: 13px !important; }\\n\\n.search-bar {\\n  margin-bottom: 16px; }\\n\\n.mat-card-title {\\n  margin-bottom: 0px; }\\n\\n:host ::ng-deep atlas-list-and-search.charter-trade-assign-height {\\n  height: calc(100vh - 56px - 236px - 130px - 40px - 256px); }\\n\\n:host ::ng-deep atlas-list-and-search.charter-trade-assign-height .list-and-search-grid-card {\\n    height: inherit;\\n    min-height: 230px;\\n    max-height: calc(100vh - 120px); }\\n\\n:host ::ng-deep atlas-list-and-search.charter-trade-assign-height .list-and-search-grid-card .ag-grid-div-container {\\n      height: calc(100% - 60px);\\n      width: 100%; }\\n\"","\r\nimport { Component, HostListener, Inject, OnDestroy, OnInit, Optional, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DATE_LOCALE, MatDialog } from '@angular/material';\r\nimport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MatMomentDateAdapterOptions } from '@angular/material-moment-adapter';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { concatMap, finalize, map, takeUntil } from 'rxjs/operators';\r\nimport { AgGridCopyIconComponent } from '../../../shared/components/ag-grid-copy-icon/ag-grid-copy-icon.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { ListAndSearchComponent } from '../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AllocationSetUp } from '../../../shared/entities/allocation-set-up-entity';\r\nimport { AtlasAgGridParam } from '../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../shared/entities/charter.entity';\r\nimport { Counterparty } from '../../../shared/entities/counterparty.entity';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { IsLocked } from '../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { LockFunctionalContext } from '../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../shared/entities/lock-resource-information.entity';\r\nimport { SectionTraffic } from '../../../shared/entities/section-traffic.entity';\r\nimport { UserGridPreferencesParameters } from '../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { ContractStatus } from '../../../shared/enums/contract-status.enum';\r\nimport { ContractTypes } from '../../../shared/enums/contract-type.enum';\r\nimport { ListAndSearchFilterType } from '../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { WarningMessageTypes } from '../../../shared/enums/warning-message-type.enum';\r\nimport { AssignedSectionView } from '../../../shared/models/assigned-section-display-view';\r\nimport { AgGridService } from '../../../shared/services/ag-grid.service';\r\nimport { GridConfigurationProviderService } from '../../../shared/services/grid-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../shared/services/http-services/configuration.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../shared/services/http-services/lock.service';\r\nimport { UserIdentityService } from '../../../shared/services/http-services/user-identity.service';\r\nimport { CharterAssignmentSectionsDataLoader } from '../../../shared/services/list-and-search/charter-assignmentSections-data-loader';\r\nimport { CounterPartyDataLoader } from '../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { SplitCreateAndAllocateService } from '../../../shared/services/split-create-and-allocate.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { GetWarningMessages } from '../../../shared/validators/warning-messages-validator.validator';\r\nimport { AllocationMessage } from '../../../trading/entities/allocation-message';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-assignment',\r\n    templateUrl: './execution-charter-assignment.component.html',\r\n    styleUrls: ['./execution-charter-assignment.component.scss'],\r\n    providers: [CharterAssignmentSectionsDataLoader, CounterPartyDataLoader],\r\n})\r\nexport class ExecutionCharterAssignmentComponent implements OnInit, OnDestroy {\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    private locale: string;\r\n    private useUtc: boolean;\r\n    gridApiSelected: agGrid.GridApi;\r\n    gridColumnApiSelected: agGrid.ColumnApi;\r\n\r\n    gridApiAssignedSection: agGrid.GridApi;\r\n    gridColumnApiAssignedSection: agGrid.ColumnApi;\r\n\r\n    selectedContractGridRows: AssignedSectionView[];\r\n    selectedContractGridColumns: agGrid.ColDef[];\r\n\r\n    assignedContractGridRows: AssignedSectionView[] = [];\r\n    assignedContractGridColumns: agGrid.ColDef[];\r\n\r\n    tempContractGridRows: AssignedSectionView[];\r\n\r\n    selectedContractGridRowsAfterSearch: AssignedSectionView[];\r\n    getAllocationWarningMessagesSubscription: Subscription[] = [];\r\n    contractType: string;\r\n    allocateToContractType: number;\r\n    allocationMessage: AllocationMessage[] = [];\r\n    isRevert = false;\r\n    rowStyle: any;\r\n    quantityColumn: string = 'quantity';\r\n    company: string;\r\n    charterId: number;\r\n    charter = new Charter();\r\n    formatType: string = 'en-US';\r\n    searchForm: FormGroup;\r\n    isLoading: boolean;\r\n    isSave: boolean = false;\r\n    isLoadingAssigned: boolean = true;\r\n    hasSearched: boolean;\r\n    searchTerm: string;\r\n    charterReference: string;\r\n    charterManager: string;\r\n    charterDescription: string;\r\n    vessel: string;\r\n    transportType: string;\r\n    masterdata: any;\r\n    tooltipMessageOnQuantity: string;\r\n    dataLength: number = 0;\r\n    foundContractTitle: string;\r\n    gridContext: ExecutionCharterAssignmentComponent;\r\n\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    isLoadingassign = false;\r\n    sectionsGridOptions: agGrid.GridOptions = {};\r\n    hasGridSharing: boolean = false;\r\n    componentId: string = 'charterSectionToAssign';\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n\r\n    isLoaded: boolean = false;\r\n\r\n    defaultColumnDisplay = {\r\n        checkboxSelection: true,\r\n        contractLabel: true,\r\n        commodityPart1: true,\r\n        commodityPart2: true,\r\n        commodityPart3: true,\r\n        quantity: true,\r\n        quantityUnit: true,\r\n        shipmentPeriod: true,\r\n        department: true,\r\n        counterparty: true,\r\n    };\r\n\r\n    isPopupRequired: boolean = false;\r\n    isWashoutRequired: boolean = false;\r\n\r\n    allocationSetUpData: AllocationSetUp[] = [];\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    dataVersionId: number;\r\n    gridCode: string = 'charterSectionToAssign';\r\n    searchContractReferenceCtrl = new AtlasFormControl('searchContractReferenceCtrl');\r\n    filteredCounterPartyList: Counterparty[];\r\n    counterPartyCtrl = new AtlasFormControl('CounterParty');\r\n    commodity1Ctrl = new AtlasFormControl('commodity1Ctrl');\r\n\r\n    contractSearchGridPreferences: UserGridPreferencesParameters;\r\n\r\n\r\n    constructor(\r\n        @Optional() @Inject(MAT_DATE_LOCALE)\r\n        private dateLocale: string,\r\n        @Optional() @Inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS)\r\n        private options: MatMomentDateAdapterOptions,\r\n        private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        private formBuilder: FormBuilder,\r\n        private userIdentityService: UserIdentityService,\r\n        private snackbarService: SnackbarService,\r\n        private createSplitService: SplitCreateAndAllocateService,\r\n        protected router: Router,\r\n        protected lockService: LockService,\r\n        protected dialog: MatDialog,\r\n        private titleService: TitleService,\r\n        private securityService: SecurityService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n        protected configurationService: ConfigurationService,\r\n        public dataLoader: CharterAssignmentSectionsDataLoader,\r\n        protected utilService: UtilService,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n    ) {\r\n        this.locale = dateLocale || moment.locale();\r\n        this.useUtc = this.options && this.options.useUtc;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.charterId = Number(this.route.snapshot.paramMap.get('charterId'));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.gridContext = this;\r\n        this.getCharter(this.charterId);\r\n        this.onInitView();\r\n        this.tempContractGridRows = [];\r\n        this.initializeAssignmentGridColumns();\r\n        this.initFavouriteColumns();\r\n        this.securityService.isSecurityReady().pipe(\r\n            concatMap(() => {\r\n                return this.gridConfigurationProvider.getConfiguration(this.company, this.componentId);\r\n            }),\r\n        ).subscribe((configuration) => {\r\n\r\n            this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n        });\r\n\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe();\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.getAllocationSetUpData(this.company);\r\n        this.initFABActions();\r\n        this.isLoaded = true;\r\n\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onQuickSearchButtonClicked();\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.searchForm.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    getCharter(charterId: number) {\r\n        this.executionService.getCharterById(charterId).pipe(\r\n            map((charter: Charter) => {\r\n                this.charter = charter;\r\n                this.charterReference = charter.charterCode;\r\n                this.charterDescription = charter.description;\r\n                this.updateCharterManager(charter.charterManagerId);\r\n                if (charter.vesselCode) {\r\n                    const vesselDetails = this.masterdata.vessels.find((x) => x.vesselName === charter.vesselCode);\r\n                    if (vesselDetails) {\r\n                        this.vessel = vesselDetails.description;\r\n                    }\r\n                }\r\n\r\n                if (charter.transportTypeCode) {\r\n                    const transportType = this.masterdata.transportTypes.find((x) =>\r\n                        x.transportTypeCode === charter.transportTypeCode);\r\n                    if (transportType) {\r\n                        this.transportType = transportType.description;\r\n                    }\r\n\r\n                }\r\n                this.titleService.setTitle(this.charterReference + ' - Trade Assignment');\r\n\r\n            }))\r\n            .subscribe();\r\n    }\r\n\r\n    updateCharterManager(userId: number) {\r\n        if (userId) {\r\n            this.userIdentityService.getAllUsers().subscribe((data) => {\r\n                this.charterManager = data.value.find((user) => user.userId === userId).displayName;\r\n            });\r\n        }\r\n    }\r\n\r\n    onInitView() {\r\n        this.isLoading = this.hasSearched = true;\r\n        this.executionService.getSectionsToBeAssignToCharter().pipe(\r\n            map((data) => {\r\n                this.selectedContractGridRowsAfterSearch = this.selectedContractGridRows = data.value.map((section) => {\r\n                    section.counterparty = (section.contractType === ContractTypes.Purchase ? section.sellerCode : section.buyerCode);\r\n\r\n                    return new AssignedSectionView(section);\r\n                });\r\n\r\n                this.dataLength = this.selectedContractGridRows.length;\r\n                this.foundContractTitle = 'Contract Found';\r\n                if (this.dataLength > 1) {\r\n                    this.foundContractTitle = 'Contracts Found';\r\n                }\r\n            }),\r\n            finalize(() => {\r\n                this.isLoadingAssigned = false;\r\n            }))\r\n            .subscribe();\r\n    }\r\n\r\n    onSearchTrade() {\r\n        this.selectedContractGridRows = [];\r\n        this.searchTerm = this.searchForm.get('searchContractReferenceCtrl').value;\r\n        if (!this.searchTerm) {\r\n            this.executionService.getSectionsToBeAssignToCharter().pipe(\r\n                map((data) => {\r\n                    this.selectedContractGridRows = data.value.map((section) => {\r\n                        section.counterparty = (section.contractType === ContractTypes.Purchase ? section.sellerCode : section.buyerCode);\r\n\r\n                        return new AssignedSectionView(section);\r\n                    });\r\n\r\n                    this.dataLength = this.selectedContractGridRows.length;\r\n                    this.foundContractTitle = 'Contract Found';\r\n                    if (this.dataLength > 1) {\r\n                        this.foundContractTitle = 'Contracts Found';\r\n                    }\r\n                }),\r\n                finalize(() => {\r\n                    this.isLoadingAssigned = false;\r\n                }))\r\n                .subscribe();\r\n        }\r\n        this.isLoading = this.hasSearched = true;\r\n\r\n        this.executionService.getSectionsToBeAssignToCharter(this.searchTerm).pipe(\r\n            map((data) => {\r\n                this.tempContractGridRows = data.value.map((section) => {\r\n                    section.counterparty = (section.contractType === ContractTypes.Purchase ? section.sellerCode : section.buyerCode);\r\n                    return new AssignedSectionView(section);\r\n                });\r\n                this.dataLength = this.tempContractGridRows.length;\r\n                this.addNewRowInGrid();\r\n                this.checkSearchedAllocatedContracts();\r\n                this.foundContractTitle = 'Contract Found';\r\n                if (this.dataLength > 1) {\r\n                    this.foundContractTitle = 'Contracts Found';\r\n                }\r\n            }),\r\n            finalize(() => {\r\n                this.isLoadingAssigned = false;\r\n                // this.removeAndAddRow();\r\n            }))\r\n            .subscribe();\r\n    }\r\n\r\n    removeAndAddRow() {\r\n        const selectedRows = this.gridApiSelected.getSelectedRows();\r\n        if (selectedRows.length === 0) {\r\n            this.selectedContractGridRows = this.tempContractGridRows;\r\n        } else if (this.selectedContractGridRows.length === 0) {\r\n            this.selectedContractGridRows = this.tempContractGridRows;\r\n        } else if (this.selectedContractGridRows.length > 0) {\r\n\r\n            const uncheckedContract = this.selectedContractGridRows.filter((item) => selectedRows.indexOf(item) < 0);\r\n            uncheckedContract.forEach((contract) => {\r\n                const eventIndex = this.selectedContractGridRows.indexOf(contract);\r\n                this.selectedContractGridRows.splice(eventIndex, 1);\r\n                this.gridApiSelected.updateRowData({ remove: [contract] });\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    addNewRowInGrid() {\r\n        if (this.tempContractGridRows.length > 0) {\r\n            this.tempContractGridRows.forEach((contract) => {\r\n                if (this.selectedContractGridRows.filter((item) => item.contractLabel === contract.contractLabel).length === 0) {\r\n                    this.selectedContractGridRows.push(contract);\r\n                    this.gridApiSelected.updateRowData({ add: [contract] });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    checkAndUnCheckSelectContracts(contractLabel: string, isChecked: boolean) {\r\n        this.gridApiSelected.forEachNode((node) => {\r\n            if (node.data.contractLabel === contractLabel) {\r\n                if (node.isSelected() && !isChecked) {\r\n                    node.setSelected(isChecked);\r\n                } else if (!node.isSelected() && isChecked) {\r\n                    node.setSelected(isChecked);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    removeSectionFromSelectedList(data: AssignedSectionView) {\r\n        const eventIndex = this.assignedContractGridRows.indexOf(data);\r\n        this.assignedContractGridRows.splice(eventIndex, 1);\r\n        this.gridApiAssignedSection.updateRowData({ remove: [data] });\r\n    }\r\n\r\n    addSectionFromAssignedList(data: AssignedSectionView) {\r\n        let allocatedSection: AssignedSectionView;\r\n\r\n        allocatedSection = this.selectedContractGridRowsAfterSearch.find((item) =>\r\n            item.allocatedTo && item.sectionId.toString() === data.allocatedTo);\r\n\r\n        if (allocatedSection && allocatedSection.allocatedTo) {\r\n            data.allocatedTo = allocatedSection.contractLabel;\r\n        }\r\n\r\n        const sectionFound: AssignedSectionView = this.assignedContractGridRows.find((item) => item.contractLabel === data.contractLabel);\r\n        if (!sectionFound) {\r\n            this.assignedContractGridRows.push(data);\r\n            this.gridApiAssignedSection.updateRowData({ add: [data] });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.getAllocationWarningMessagesSubscription) {\r\n            this.getAllocationWarningMessagesSubscription.forEach((subscription) => subscription.unsubscribe());\r\n        }\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n\r\n    rowSelected(event) {\r\n        let allocatedSection: AssignedSectionView;\r\n        let copiedSection: AssignedSectionView;\r\n\r\n        if (this.assignedContractGridRows.filter((item) => item.contractLabel === event.data.contractLabel).length > 0 && !event.node.isSelected()) {\r\n            copiedSection = this.assignedContractGridRows.find((item) => item.contractLabel === event.data.contractLabel);\r\n            allocatedSection = this.assignedContractGridRows.find((item) => item.contractLabel === event.data.allocatedTo);\r\n            copiedSection.editableAllocatedTo = true;\r\n\r\n            this.removeSectionFromSelectedList(copiedSection);\r\n            if (this.searchTerm && allocatedSection) {\r\n                this.removeSectionFromSelectedList(allocatedSection);\r\n            }\r\n            if (allocatedSection) {\r\n                allocatedSection.editableAllocatedTo = true;\r\n                this.listAndSearchComponent.checkAndUnCheckSelectContracts(allocatedSection.contractLabel, false);\r\n            }\r\n\r\n            if (!this.unlocking.includes(event.data.sectionId)) {\r\n                this.unlocking.push(event.data.sectionId);\r\n                this.refeshResourceInformation();\r\n                this.lockService.unlockContract(event.data.sectionId, LockFunctionalContext.TradeAssignment)\r\n                    .pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n                        this.unlocking = this.unlocking.filter((id) => id !== event.data.sectionId);\r\n                    });\r\n            }\r\n\r\n        } else if (event.node.isSelected()) {\r\n\r\n            this.lockService.isLockedContract(event.data.sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                if (lock.isLocked) {\r\n                    this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Lock',\r\n                            text: lock.message,\r\n                            okButton: 'Got it',\r\n                        },\r\n                    });\r\n                    this.gridApiSelected.deselectNode(event.node);\r\n                    this.locking = this.locking.filter((id) => id !== event.data.sectionId);\r\n                } else {\r\n                    this.lockService.lockContract(event.data.sectionId, LockFunctionalContext.TradeAssignment)\r\n                        .pipe(takeUntil(this.destroy$)).subscribe((lockState) => {\r\n                            copiedSection = { ...event.data };\r\n                            allocatedSection = this.selectedContractGridRowsAfterSearch\r\n                                .find((item) => item.contractLabel === event.data.allocatedTo);\r\n                            if (allocatedSection) {\r\n                                copiedSection.quantity = (event.data.quantity < allocatedSection.quantity) ?\r\n                                    event.data.quantity : allocatedSection.quantity;\r\n                                copiedSection.originalQuantity = copiedSection.quantity;\r\n                                copiedSection.editableAllocatedTo = false;\r\n                                this.listAndSearchComponent.checkAndUnCheckSelectContracts(allocatedSection.contractLabel, true);\r\n                            } else {\r\n                                copiedSection.originalQuantity = copiedSection.quantity;\r\n                                copiedSection.editableAllocatedTo = true;\r\n                            }\r\n                            this.addSectionFromAssignedList(copiedSection);\r\n                            if (this.searchTerm && allocatedSection) {\r\n                                this.addSectionFromAssignedList(allocatedSection);\r\n                            }\r\n                            this.refeshResourceInformation();\r\n                            this.locking = this.locking.filter((id) => id !== event.data.sectionId);\r\n                        });\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        if (this.gridApiSelected) {\r\n            this.gridApiSelected.forEachNode((node) => {\r\n                if (node.isSelected()) {\r\n                    const resourceInformation = new LockResourceInformation();\r\n                    resourceInformation.resourceType = 'Contract';\r\n                    resourceInformation.resourceId = node.data.sectionId;\r\n                    resourceInformation.resourceCode = node.data.contractReference;\r\n                    this.resourcesInformation.push(resourceInformation);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onAssignButtonClick() {\r\n\r\n        const inValidSections: AssignedSectionView[] = this.assignedContractGridRows\r\n            .filter((section: AssignedSectionView) => section.isValid === false || section.isValidAllocatedTo === false);\r\n\r\n        if (inValidSections.length === 0) {\r\n            const assignSectionList: AssignedSectionView[] = [];\r\n\r\n            const modifiedSections: AssignedSectionView[] = this.assignedContractGridRows\r\n                .filter((section) => section.isTouched === true);\r\n\r\n            if (modifiedSections.length > 0) {\r\n\r\n                if (modifiedSections.some((x) => x.isWashout === true)) {\r\n                    this.isPopupRequired = true;\r\n                    this.washoutConfirmationPopup();\r\n                } else {\r\n                    this.isWashoutRequired = false;\r\n                    this.assignTrade();\r\n                }\r\n            } else {\r\n                this.isWashoutRequired = false;\r\n                this.assignTrade();\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');\r\n            this.isLoadingassign = false;\r\n        }\r\n    }\r\n\r\n    assignTrade() {\r\n        this.isLoadingassign = true;\r\n        this.isSave = true;\r\n        let sectionList: AssignedSectionView[];\r\n        const inValidSections: AssignedSectionView[] = this.assignedContractGridRows\r\n            .filter((section: AssignedSectionView) => section.isValid === false || section.isValidAllocatedTo === false);\r\n\r\n        if (inValidSections.length === 0) {\r\n            const assignCharterPromise = [];\r\n            const assignSectionList: AssignedSectionView[] = [];\r\n\r\n            const modifiedSections: AssignedSectionView[] = this.assignedContractGridRows\r\n                .filter((section) => section.isTouched === true);\r\n            if (modifiedSections.length > 0) {\r\n                modifiedSections.forEach((section) => {\r\n                    section.vessel = this.charter.vesselCode;\r\n                    const allocatedSection = modifiedSections.find((element) => element.contractLabel === section.allocatedTo);\r\n                    if (allocatedSection) {\r\n                        section.quantity = section.quantity < allocatedSection.quantity ? section.quantity : allocatedSection.quantity;\r\n                        if (!assignSectionList.includes(allocatedSection)) {\r\n                            assignSectionList.push(section);\r\n                        }\r\n                    } else {\r\n\r\n                        const allocationFound: AssignedSectionView = this.assignedContractGridRows\r\n                            .find((element) => element.contractLabel === section.allocatedTo);\r\n                        if (allocationFound) {\r\n                            this.assignedContractGridRows.find((element) => element.contractLabel === section.allocatedTo).isTouched = true;\r\n                        }\r\n                        assignSectionList.push(section);\r\n                    }\r\n                });\r\n\r\n                assignCharterPromise.push(this.createSplitService.createSplitOfAssignedSections(assignSectionList, this.charterId, this.isWashoutRequired));\r\n            }\r\n\r\n            sectionList = this.assignedContractGridRows.filter((section) =>\r\n                !section.charterRef && !section.isTouched);\r\n\r\n            const sectionTrafficList: SectionTraffic[] = [];\r\n            if (sectionList.length > 0) {\r\n                sectionList.forEach((element) => {\r\n\r\n                    const sectionTrafiic: SectionTraffic = new SectionTraffic();\r\n\r\n                    sectionTrafiic.sectionId = Number(element.sectionId);\r\n                    sectionTrafiic.blDate = (element.blDate) ?\r\n                        (this.useUtc) ?\r\n                            moment.utc(element.blDate).locale(this.locale).toDate() :\r\n                            moment(element.blDate).locale(this.locale).toDate()\r\n                        : null;\r\n                    sectionTrafiic.blReference = element.blRef;\r\n                    sectionTrafiic.vesselCode = this.charter.vesselCode;\r\n                    sectionTrafiic.portDestination = element.portDestination;\r\n                    sectionTrafiic.portOrigin = element.portOrigin;\r\n                    sectionTrafiic.marketSector = element.marketSector;\r\n                    sectionTrafficList.push(sectionTrafiic);\r\n\r\n                });\r\n            }\r\n\r\n            if (sectionList.length > 0) {\r\n                assignCharterPromise.push(this.executionService.assignSectionsToCharter(this.charterId, sectionTrafficList).toPromise());\r\n            }\r\n            Promise.all(assignCharterPromise).then(() => {\r\n                if (this.createSplitService.messageOnAllocation !== '') {\r\n                    this.snackbarService.informationAndCopySnackBar(this.createSplitService.messageOnAllocation + 'and Selected contract(s) has been assigned to charter' + this.charter.charterCode, this.createSplitService.referenceGroupNumber);\r\n                    this.createSplitService.messageOnAllocation = '';\r\n                } else {\r\n                    this.snackbarService.informationAndCopySnackBar('Selected contract(s) has been assigned to charter ' + this.charter.charterCode, this.charter.charterCode);\r\n                }\r\n\r\n                this.router.navigate(['/' + this.company\r\n                    + '/execution/charter/details/', this.charterId]);\r\n            });\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');\r\n            this.isLoadingassign = false;\r\n        }\r\n    }\r\n\r\n    onRefreshButtonClick() {\r\n        if (this.isRevert) {\r\n            this.selectedContractGridColumns.forEach((col: agGrid.ColDef) => {\r\n                col.hide = !this.defaultColumnDisplay[col.colId];\r\n                this.gridColumnApiSelected.setColumnVisible(col.colId, !col.hide);\r\n                this.gridColumnApiSelected.moveColumns([col.colId], this.selectedContractGridColumns.length - 1);\r\n            });\r\n        }\r\n    }\r\n\r\n    onGridReadySelected(params) {\r\n        this.sectionsGridOptions.columnDefs = this.selectedContractGridColumns;\r\n        this.gridApiSelected = this.sectionsGridOptions.api;\r\n        this.gridColumnApiSelected = this.sectionsGridOptions.columnApi;\r\n\r\n        this.gridService.sizeColumns(this.sectionsGridOptions);\r\n    }\r\n\r\n    onGridReadyAssign(params) {\r\n        this.gridApiAssignedSection = params.api;\r\n        this.gridColumnApiAssignedSection = params.columnApi;\r\n        window.onresize = () => {\r\n            this.gridColumnApiAssignedSection.autoSizeAllColumns();\r\n        };\r\n        this.gridApiAssignedSection.sizeColumnsToFit();\r\n    }\r\n\r\n    onAddOrDeleteColumn(event) {\r\n        const cols = this.selectedContractGridColumns.filter((col) => col.colId === event.column.colId);\r\n        if (cols.length !== 1) { return; }\r\n        cols[0].hide = !event.visible;\r\n    }\r\n\r\n    deleteAssignment(section: AssignedSectionView) {\r\n        // Remove selected section from Assigned table\r\n        const index = this.assignedContractGridRows.indexOf(section, 0);\r\n        if (index > -1) {\r\n            this.assignedContractGridRows.splice(index, 1);\r\n        }\r\n    }\r\n    showOrHideColum(event, col: agGrid.ColDef) {\r\n        this.gridColumnApiSelected.setColumnVisible(col.colId, (col.hide || false));\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n    showOrHideColum1(event, col: agGrid.ColDef) {\r\n        this.gridColumnApiAssignedSection.setColumnVisible(col.colId, (col.hide || false));\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    initFavouriteColumns() {\r\n        for (const key in this.defaultColumnDisplay) {\r\n            this.defaultColumnDisplay[key] = false;\r\n        }\r\n        \r\n        this.initializeSelectedGridColumns();\r\n        this.contractSearchGridPreferences = {\r\n            showExport: false,\r\n            company: this.company,\r\n            gridId: this.componentId,\r\n            gridOptions: this.sectionsGridOptions,\r\n            sharingEnabled: this.hasGridSharing,\r\n        };\r\n    }\r\n\r\n    onCellValueChanged(event) {\r\n        const columnChanged: string = event.colDef.field;\r\n\r\n        if ((event.colDef) && columnChanged === this.quantityColumn) {\r\n            const newValue: number = Number(event.newValue);\r\n            const oldValue: number = event.data.originalQuantity;\r\n            event.data.isTouched = newValue !== oldValue ? true : false;\r\n\r\n            if (!event.data.quantityStyleChangeForQuantity) {\r\n                const contractLabel: string = event.data.contractLabel.toUpperCase();\r\n                const allocatedContract: AssignedSectionView = this.assignedContractGridRows.find((row) =>\r\n                    row.allocatedTo === contractLabel);\r\n                if (allocatedContract) {\r\n                    if (Number(event.data.quantity) < Number(allocatedContract.originalQuantity)) {\r\n                        allocatedContract.quantity = event.data.quantity;\r\n                        allocatedContract.highLightRow = true;\r\n                        event.data.highLightRow = false;\r\n                    } else {\r\n                        event.data.quantity = allocatedContract.quantity;\r\n                        event.data.highLightRow = false;\r\n                    }\r\n\r\n                    this.gridApiAssignedSection.updateRowData({ update: [allocatedContract] });\r\n                    this.gridApiAssignedSection.updateRowData({ update: [event.data] });\r\n                }\r\n            } else {\r\n                event.data.highLightRow = false;\r\n            }\r\n        }\r\n\r\n        if (columnChanged === 'allocatedTo') {\r\n            const allocatedToNewValue: string = event.newValue;\r\n            const allocatedToOldValue: string = event.oldValue;\r\n            if (!event.data.quantityStyleChangeForAllocatedTo) {\r\n                if (allocatedToNewValue) {\r\n                    const allocatedContract: AssignedSectionView = this.assignedContractGridRows.find((row) =>\r\n                        row.contractLabel.toUpperCase() === allocatedToNewValue.toUpperCase());\r\n                    if (allocatedContract) {\r\n                        if (!allocatedContract.automatedChanged) {\r\n                            if (Number(event.data.quantity) < Number(allocatedContract.originalQuantity)) {\r\n                                allocatedContract.quantity = event.data.quantity;\r\n                                allocatedContract.highLightRow = true;\r\n                            } else if (Number(event.data.quantity) > Number(allocatedContract.originalQuantity)) {\r\n                                event.data.quantity = allocatedContract.quantity;\r\n                                event.data.highLightRow = true;\r\n                            }\r\n\r\n                            allocatedContract.allocatedTo = event.data.contractLabel;\r\n                            allocatedContract.allocatedSectionId = event.data.sectionId;\r\n                            event.data.allocatedSectionId = allocatedContract.sectionId;\r\n                            event.data.automatedChanged = true;\r\n                            event.data.isTouched = true;\r\n                            allocatedContract.isTouched = true;\r\n                            if (event.data.currency === allocatedContract.currency && event.data.counterparty === allocatedContract.counterparty) {\r\n                                allocatedContract.isWashout = true;\r\n                                event.data.isWashout = true;\r\n                            }\r\n                            this.gridApiAssignedSection.updateRowData({ update: [allocatedContract] });\r\n                        }\r\n                        allocatedContract.automatedChanged = false;\r\n                    }\r\n                } else {\r\n                    const allocatedContract: AssignedSectionView = this.assignedContractGridRows.find((row) =>\r\n                        row.contractLabel && allocatedToOldValue && row.contractLabel.toUpperCase() === allocatedToOldValue.toUpperCase());\r\n                    if (allocatedContract) {\r\n                        if (!allocatedContract.automatedChanged) {\r\n                            allocatedContract.allocatedTo = '';\r\n                            allocatedContract.quantity = allocatedContract.originalQuantity;\r\n                            event.data.quantity = event.data.originalQuantity;\r\n                            allocatedContract.highLightRow = false;\r\n                            event.data.highLightRow = false;\r\n                            event.data.automatedChanged = true;\r\n                            event.data.isTouched = false;\r\n                            allocatedContract.isTouched = false;\r\n                            this.gridApiAssignedSection.updateRowData({ update: [allocatedContract] });\r\n                        }\r\n                        allocatedContract.automatedChanged = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    initializeSelectedGridColumns() {\r\n        this.selectedContractGridColumns = [\r\n            {\r\n                headerName: 'Contract reference',\r\n                colId: 'contractLabel',\r\n                field: 'contractLabel',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Commodity part 1',\r\n                colId: 'commodityId',\r\n                field: 'commodityId',\r\n                valueFormatter: this.commodityPart1Formatter.bind(this),\r\n\r\n            },\r\n            {\r\n                headerName: 'Commodity part 2',\r\n                colId: 'commodityOrigin',\r\n                field: 'commodityId',\r\n                valueFormatter: this.commodityPart2Formatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Commodity part 3',\r\n                colId: 'commodityGrade',\r\n                field: 'commodityId',\r\n                valueFormatter: this.commodityPart3Formatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.formatValue.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Weight code',\r\n                colId: 'weightUnitId',\r\n                field: 'weightUnitId',\r\n                valueFormatter: this.weightCodeDescriptionFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Shipment period',\r\n                colId: 'shipmentPeriod',\r\n                field: 'shipmentPeriod',\r\n            },\r\n            {\r\n                headerName: 'Dept',\r\n                colId: 'departmentId',\r\n                field: 'departmentId',\r\n                valueFormatter: this.departmentDescriptionFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Counterparty',\r\n                colId: 'counterparty',\r\n                field: 'counterparty',\r\n            },\r\n            {\r\n                headerName: 'Allocated contract',\r\n                colId: 'allocatedTo',\r\n                field: 'allocatedTo',\r\n                valueFormatter: this.allocatedContractFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Approval Status',\r\n                colId: 'contractStatusCode',\r\n                field: 'contractStatusCode',\r\n                valueFormatter: this.contractStatusFormatter.bind(this),\r\n            },\r\n        ];\r\n\r\n        this.rowStyle = { 'border-bottom': '1px solid #e0e0e0 !important' };\r\n    }\r\n\r\n    commodityPart1Formatter(params) {\r\n        if (params.value) {\r\n            const commodity = params.context.masterdata.commodities.find((x) => x.commodityId === Number(params.value));\r\n            return commodity ? commodity.commodityCode : '';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    commodityPart2Formatter(params) {\r\n        if (params.value) {\r\n            const commodity = params.context.masterdata.commodities.find((x) => x.commodityId === Number(params.value));\r\n            return commodity ? commodity.commodityOrigin : '';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    commodityPart3Formatter(params) {\r\n        if (params.value) {\r\n            const commodity = params.context.masterdata.commodities.find((x) => x.commodityId === Number(params.value));\r\n            return commodity ? commodity.commodityGrade : '';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    departmentDescriptionFormatter(params) {\r\n        if (params.value) {\r\n            const department = params.context.masterdata.departments.find((x) => x.departmentId === Number(params.value));\r\n            return department ? department.description : '';\r\n        } else if (params.data.departmentDescription) {\r\n            return params.data.departmentDescription;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    weightCodeDescriptionFormatter(params) {\r\n        if (params.value) {\r\n            const weightUnits = params.context.masterdata.weightUnits.find((x) => x.weightUnitId === Number(params.value));\r\n            return weightUnits ? weightUnits.weightCode : '';\r\n        } else if (params.data.weightCode) {\r\n            return params.data.weightCode;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    contractTypeFormatter(params) {\r\n        return (Number(params.value) === ContractTypes.Purchase ? 'Purchase' : 'Sales');\r\n    }\r\n\r\n    contractStatusFormatter(params) {\r\n        return ContractStatus[params.value].toString();\r\n    }\r\n\r\n    allocatedContractFormatter(params) {\r\n        if (params.value) {\r\n            let allocatedSection: AssignedSectionView;\r\n            if (this.selectedContractGridRowsAfterSearch) {\r\n                allocatedSection = this.selectedContractGridRowsAfterSearch.find((item) =>\r\n                    item.allocatedTo && item.sectionId.toString() === params.value);\r\n                if (allocatedSection) {\r\n                    return allocatedSection.contractLabel;\r\n                }\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    validateAllocatedTo(params): string {\r\n        let toolTipMessage: string = '';\r\n        params.data.quantityStyleChangeForAllocatedTo = false;\r\n        params.data.isValidAllocatedTo = true;\r\n        if (params.value) {\r\n            const allocatedContract: AssignedSectionView = this.assignedContractGridRows.find((row) =>\r\n                row.contractLabel && params.value.toUpperCase() === row.contractLabel.toUpperCase());\r\n            params.data.isValidAllocatedTo = false;\r\n            if (allocatedContract) {\r\n                // Check both contract should different\r\n                if ((params.data.contractType === ContractTypes.Purchase && allocatedContract.contractType === ContractTypes.Sale) ||\r\n                    (params.data.contractType === ContractTypes.Sale && allocatedContract.contractType === ContractTypes.Purchase)) {\r\n\r\n                    const filterSection: AssignedSectionView[] = this.assignedContractGridRows.filter((row) =>\r\n                        row.allocatedTo && params.value.toUpperCase() === row.allocatedTo.toUpperCase());\r\n\r\n                    // Check if there is already assigned Contract in bottom list\r\n                    if (filterSection.length < 2) {\r\n                        // Check if Department is same of both contract\r\n                        if (allocatedContract.departmentId === params.data.departmentId) {\r\n                            // Check for allocation Message\r\n                            this.getAllocationWarningMessagesSubscription.\r\n                                push(this.executionService.getWarningMessages(params.data.sectionId, allocatedContract.sectionId)\r\n                                    .subscribe((data) => {\r\n\r\n                                        this.allocationMessage = GetWarningMessages(data.value, this.allocationSetUpData);\r\n                                        params.data.isValidAllocatedTo = true;\r\n                                        toolTipMessage = null;\r\n                                        if (this.allocationMessage.length > 0) {\r\n                                            this.allocationMessage.forEach((element) => {\r\n                                                if (element.errorTypeId === WarningMessageTypes.Restricted) {\r\n                                                    toolTipMessage = 'Contracts cannot be allocated because the fields '\r\n                                                        + this.allocationMessage.forEach((item) => item.message)\r\n                                                        + ' are not matching';\r\n                                                    params.data.quantityStyleChangeForAllocatedTo = true;\r\n                                                    params.data.isValidAllocatedTo = false;\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    }));\r\n                        } else {\r\n                            toolTipMessage = 'To allocate contracts from different departments please use trade group allocation';\r\n                            params.data.quantityStyleChangeForAllocatedTo = true;\r\n                        }\r\n                    } else {\r\n                        toolTipMessage = 'This contract reference is already used in allocated contract column';\r\n                        params.data.quantityStyleChangeForAllocatedTo = true;\r\n                    }\r\n                } else {\r\n                    toolTipMessage = 'This contract reference does not correspond to the correct contract type';\r\n                    params.data.quantityStyleChangeForAllocatedTo = true;\r\n                }\r\n            } else {\r\n                toolTipMessage = 'Only selected contracts can be allocated together';\r\n                params.data.quantityStyleChangeForAllocatedTo = true;\r\n            }\r\n        }\r\n        return toolTipMessage;\r\n    }\r\n\r\n    initializeAssignmentGridColumns() {\r\n        this.assignedContractGridColumns = [\r\n            {\r\n                headerName: 'Contract Type',\r\n                colId: 'contractType',\r\n                field: 'contractType',\r\n                hide: true,\r\n                suppressToolPanel: true,\r\n                valueFormatter: this.contractTypeFormatter,\r\n            },\r\n            {\r\n                headerName: 'Contract reference',\r\n                checkboxSelection: true,\r\n                field: 'contractLabel',\r\n                suppressToolPanel: true,\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                editable: true,\r\n                suppressToolPanel: true,\r\n                type: 'numericColumn',\r\n                valueFormatter: this.formatValue.bind(this),\r\n                cellClassRules: {\r\n                    'ag-grid-invalid-mandatory-field': ((params) => params.data.quantityStyleChangeForQuantity),\r\n                    'ag-grid-valid-mandatory-field': ((params) => !params.data.quantityStyleChangeForQuantity),\r\n                    'ag-grid-bold-quantity-field': ((params) => params.data.highLightRow),\r\n\r\n                },\r\n                tooltip: (params) => {\r\n                    return this.validateQuantity(params);\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Weight code',\r\n                colId: 'weightUnitId',\r\n                field: 'weightUnitId',\r\n                suppressToolPanel: true,\r\n                valueFormatter: this.weightCodeDescriptionFormatter,\r\n            },\r\n            {\r\n                headerName: 'Dept',\r\n                colId: 'departmentId',\r\n                suppressToolPanel: true,\r\n                field: 'departmentId',\r\n                valueFormatter: this.departmentDescriptionFormatter,\r\n            },\r\n            {\r\n                headerName: 'Allocated contract',\r\n                colId: 'allocatedTo',\r\n                field: 'allocatedTo',\r\n                tooltip: this.validateAllocatedTo.bind(this),\r\n                editable: this.checkEditableForAllocatedContract.bind(this),\r\n                valueFormatter: this.allocatedContractFormatter.bind(this),\r\n                cellClassRules: {\r\n                    'ag-grid-invalid-mandatory-field': ((params) => params.data.quantityStyleChangeForAllocatedTo),\r\n                    'ag-grid-valid-mandatory-field': ((params) => !params.data.quantityStyleChangeForAllocatedTo),\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: 'Approval Status',\r\n                colId: 'contractStatusCode',\r\n                field: 'contractStatusCode',\r\n                suppressToolPanel: true,\r\n                valueFormatter: this.contractStatusFormatter,\r\n            },\r\n            {\r\n                headerName: '',\r\n                field: 'contractLabel',\r\n                suppressToolPanel: true,\r\n                cellRendererFramework: AgGridCopyIconComponent,\r\n            },\r\n        ];\r\n\r\n    }\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(param.value);\r\n    }\r\n    validateQuantity(params): string {\r\n        params.data.quantityStyleChangeForQuantity = false;\r\n\r\n        if (params.data.allocatedTo) {\r\n            let allocatedSection: AssignedSectionView;\r\n            let smallestQuantity: number;\r\n            allocatedSection = this.assignedContractGridRows.find((item) => item.contractLabel === params.data.allocatedTo);\r\n            if (allocatedSection && allocatedSection.isTouched) {\r\n                smallestQuantity = (params.data.quantity > allocatedSection.originalQuantity) ?\r\n                    allocatedSection.originalQuantity : params.data.quantity;\r\n                if (Number(params.value) <= 0 || params.value > smallestQuantity) {\r\n                    params.data.quantityStyleChangeForQuantity = true;\r\n                    params.data.isValid = false;\r\n                    this.tooltipMessageOnQuantity = 'Quantity should be greater than zero and less than or equal to ' + smallestQuantity;\r\n                } else {\r\n                    params.data.isValid = true;\r\n                }\r\n            }\r\n        } else {\r\n\r\n            this.tooltipMessageOnQuantity = null;\r\n            params.data.quantityStyleChangeForQuantity = false;\r\n            if ((Number(params.value) === 0 ||\r\n                Number(params.value) < 0) && !params.data.charterRef) {\r\n                this.tooltipMessageOnQuantity = 'Quantity can not be zero';\r\n                params.data.quantityStyleChangeForQuantity = true;\r\n                params.data.isValid = false;\r\n            } else if (params.data.originalQuantity < Number(params.value)) {\r\n                params.data.quantityStyleChangeForQuantity = true;\r\n                params.data.isValid = false;\r\n                this.tooltipMessageOnQuantity = 'Quantity can not be greater than the original quantity';\r\n            } else {\r\n                params.data.isValid = true;\r\n            }\r\n\r\n        }\r\n\r\n        return this.tooltipMessageOnQuantity;\r\n\r\n    }\r\n\r\n    checkEditableForAllocatedContract(params): boolean {\r\n        const rowData: AssignedSectionView = params.data;\r\n        return rowData.editableAllocatedTo;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.company\r\n                    + '/execution/charter/details/', this.charterId]);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkSearchedAllocatedContracts() {\r\n\r\n        this.gridApiSelected.forEachNode((node) => {\r\n            if (node.data && node.data.contractLabel && this.assignedContractGridRows) {\r\n                const contractLabel = node.data.contractLabel;\r\n                const contractFound = this.assignedContractGridRows.find((contract) => contract.contractLabel === contractLabel);\r\n                if (contractFound) {\r\n                    node.setSelected(true);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    washoutConfirmationPopup() {\r\n        if (this.isPopupRequired) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Washout Contract',\r\n                    text: 'Do you want contract(s) to mark as washout?',\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.isWashoutRequired = true;\r\n                    this.assignTrade();\r\n                } else {\r\n                    this.isWashoutRequired = false;\r\n                    this.assignTrade();\r\n                }\r\n            });\r\n\r\n        } else {\r\n            return this.isWashoutRequired;\r\n        }\r\n    }\r\n\r\n    // this method will fetch allocationsetupdata for a company\r\n    getAllocationSetUpData(company: string) {\r\n        this.configurationService.getAllocationSetUpByCompany(company)\r\n            .subscribe((data) => {\r\n                if (data && data.length > 0) {\r\n                    this.allocationSetUpData = data;\r\n                }\r\n            });\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        this.additionalFilters = [];\r\n        let searchCounterParty: string;\r\n        if (this.counterPartyCtrl.value) {\r\n            searchCounterParty = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n            if (!searchCounterParty) {\r\n                searchCounterParty = this.counterPartyCtrl.value;\r\n            }\r\n        }\r\n        const contractLabelField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'ContractLabel');\r\n        const counterpartyCodeField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'Counterparty');\r\n        const commodityField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'PrincipalCommodity');\r\n        if (!this.listAndSearchComponent) {\r\n            return;\r\n        } else {\r\n            if (this.searchContractReferenceCtrl.value && contractLabelField) {\r\n                const filter = new ListAndSearchFilter();\r\n                filter.fieldId = contractLabelField.fieldId;\r\n                filter.fieldName = contractLabelField.fieldName;\r\n                filter.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.searchContractReferenceCtrl.value + '%',\r\n                };\r\n                filter.isActive = true;\r\n                this.additionalFilters.push(filter);\r\n            }\r\n            if (this.counterPartyCtrl.value && counterpartyCodeField) {\r\n                const filterCounterParty = new ListAndSearchFilter();\r\n                filterCounterParty.fieldId = counterpartyCodeField.fieldId;\r\n                filterCounterParty.fieldName = counterpartyCodeField.fieldName;\r\n                filterCounterParty.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: searchCounterParty + '%',\r\n                };\r\n                filterCounterParty.isActive = true;\r\n                this.additionalFilters.push(filterCounterParty);\r\n            }\r\n            if (this.commodity1Ctrl.value && commodityField) {\r\n                const filterCommodity = new ListAndSearchFilter();\r\n                filterCommodity.fieldId = commodityField.fieldId;\r\n                filterCommodity.fieldName = commodityField.fieldName;\r\n                filterCommodity.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.commodity1Ctrl.value + '%',\r\n                };\r\n                filterCommodity.isActive = true;\r\n                this.additionalFilters.push(filterCommodity);\r\n            }\r\n        }\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n    // For FAB\r\n    initFABActions() {\r\n        this.fabTitle = 'Assignment FAB mini';\r\n        this.fabType = FABType.MiniFAB;\r\n        const actionItemSave: FloatingActionButtonActions = {\r\n            icon: 'check_circle',\r\n            text: 'Assign',\r\n            action: 'assign',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n        const actionItemCancel: FloatingActionButtonActions = {\r\n            icon: 'keyboard_backspace',\r\n            text: 'Discard',\r\n            action: 'discard',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n        this.fabMenuActions.push(actionItemSave);\r\n        this.fabMenuActions.push(actionItemCancel);\r\n    }\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'assign': {\r\n                this.onAssignButtonClick();\r\n                break;\r\n            }\r\n            case 'discard': {\r\n                this.onDiscardButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Additional Information</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterDeptCntrl\\\"\\r\\n                                                     [options]=\\\"filteredDepartments\\\"\\r\\n                                                     label=\\\"Department\\\"\\r\\n                                                     displayProperty=\\\"departmentCode\\\"\\r\\n                                                     [errorMap]=\\\"departmentErrorMap\\\"\\r\\n                                                     [selectProperties]=\\\"['departmentCode','description']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Department\\\"\\r\\n                                                     gridId=\\\"departmentsGrid\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterQuantityCntrl\\\"\\r\\n                                                     [options]=\\\"filteredQuantities\\\"\\r\\n                                                     label=\\\"Quantity for Reporting\\\"\\r\\n                                                     displayProperty=\\\"weightCode\\\"\\r\\n                                                     [selectProperties]=\\\"['weightCode','description']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Quantity\\\"\\r\\n                                                     gridId=\\\"weightUnitsGrid\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n            <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterCurrencyCntrl\\\"\\r\\n                                                     [options]=\\\"filteredCurrencies\\\"\\r\\n                                                     label=\\\"Currency for Reporting\\\"\\r\\n                                                     displayProperty=\\\"currencyCode\\\"\\r\\n                                                     [selectProperties]=\\\"['currencyCode','description']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Currency\\\"\\r\\n                                                     gridId=\\\"currenciesGrid\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".contextual-search-for-control {\\n  width: 40%; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-additional-information-form-component',\r\n    templateUrl: './additional-information-form-component.component.html',\r\n    styleUrls: ['./additional-information-form-component.component.scss'],\r\n})\r\nexport class AdditionalInformationFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Input() isCreateOrEdit: boolean = true;\r\n\r\n    charterDeptCntrl = new AtlasFormControl('charterDeptCntrl');\r\n    charterQuantityCntrl = new AtlasFormControl('charterQuantityCntrl');\r\n    charterCurrencyCntrl = new AtlasFormControl('charterCurrencyCntrl');\r\n\r\n    filteredCurrencies: Currency[];\r\n    filteredDepartments: Department[];\r\n    filteredQuantities: WeightUnit[];\r\n    masterdata: any;\r\n    showErrorIcon: boolean;\r\n    isFormControlRequired: Map<string, boolean> = new Map<string, boolean>();\r\n    currencyCodeControl: Currency;\r\n    departmentControl: Department;\r\n    quantityControl: WeightUnit;\r\n    defaultQuantity: string = 'MT';\r\n    defaultCurrency: string = 'USD';\r\n    defaultCurrencyCntrl: Currency;\r\n    defaultQuantityCntrl: WeightUnit;\r\n    departmentErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');\r\n\r\n    constructor(protected formbuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n\r\n        this.filteredCurrencies = this.masterdata.currencies;\r\n        this.charterCurrencyCntrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencies =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.currencies,\r\n                    ['currencyCode', 'description']);\r\n        });\r\n\r\n        this.filteredDepartments = this.masterdata.departments;\r\n        this.charterDeptCntrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartments =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.departments,\r\n                    ['departmentCode', 'description']);\r\n        });\r\n        this.filteredQuantities = this.masterdata.weightUnits;\r\n        this.charterQuantityCntrl.valueChanges.subscribe((input) => {\r\n            this.filteredQuantities =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.weightUnits,\r\n                    ['weightCode', 'description']);\r\n        });\r\n\r\n        if (!this.currencyCodeControl) {\r\n            this.defaultCurrencyCntrl = this.masterdata.currencies.find((currency) =>\r\n                currency.currencyCode === this.defaultCurrency);\r\n            this.charterCurrencyCntrl.patchValue(this.defaultCurrencyCntrl);\r\n        }\r\n\r\n        if (!this.quantityControl) {\r\n            this.defaultQuantityCntrl = this.masterdata.weightUnits.find((weight) =>\r\n                weight.weightCode === this.defaultQuantity);\r\n            this.charterQuantityCntrl.patchValue(this.defaultQuantityCntrl);\r\n        }\r\n\r\n        if (this.isCreateOrEdit) {\r\n            this.enableControl();\r\n            this.setValidators();\r\n        } else {\r\n            this.disbaleControl();\r\n\r\n        }\r\n    }\r\n\r\n    disbaleControl() {\r\n        this.charterDeptCntrl.disable();\r\n        this.charterCurrencyCntrl.disable();\r\n        this.charterQuantityCntrl.disable();\r\n    }\r\n\r\n    enableControl() {\r\n        this.charterDeptCntrl.enable();\r\n        this.charterCurrencyCntrl.enable();\r\n        this.charterQuantityCntrl.enable();\r\n    }\r\n\r\n    clearValueOfControl() {\r\n        this.charterDeptCntrl.patchValue('');\r\n        this.charterQuantityCntrl.patchValue('');\r\n        this.charterCurrencyCntrl.patchValue('');\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean = false) {\r\n        this.assignValues(entity, isEdit);\r\n        this.charterCurrencyCntrl.patchValue(this.currencyCodeControl);\r\n        this.charterQuantityCntrl.patchValue(this.quantityControl);\r\n        this.charterDeptCntrl.patchValue(this.departmentControl);\r\n    }\r\n\r\n    assignValues(entity: Charter, isEdit: boolean = false) {\r\n        const charter = entity as Charter;\r\n        this.currencyCodeControl = this.masterdata.currencies.find((currenctCode) => currenctCode.currencyCode === charter.currency);\r\n        this.departmentControl = this.masterdata.departments.find((department) => department.departmentId === charter.departmentId);\r\n        this.quantityControl = this.masterdata.weightUnits.find((quantity) => quantity.weightUnitId === charter.weightUnitId);\r\n    }\r\n\r\n    setValidators() {\r\n        this.charterDeptCntrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.charterCurrencyCntrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.charterCurrencyCntrl.setValidators(Validators.compose([Validators.required]));\r\n\r\n        this.charterQuantityCntrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.weightUnits,\r\n                    nameof<WeightUnit>('weightCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.charterQuantityCntrl.setValidators(Validators.compose([Validators.required]));\r\n\r\n        this.isFormControlRequired[\r\n            'charterCurrencyCntrl'\r\n        ] = this.utilService.isRequired(this.charterCurrencyCntrl);\r\n        this.isFormControlRequired[\r\n            'charterQuantityCntrl'\r\n        ] = this.utilService.isRequired(this.charterQuantityCntrl);\r\n\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formbuilder.group({\r\n            charterDeptCntrl: this.charterDeptCntrl,\r\n            charterQuantityCntrl: this.charterQuantityCntrl,\r\n            charterCurrencyCntrl: this.charterCurrencyCntrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    findDepartmentByCode(departmentCode: string): Department {\r\n        return this.masterdata.departments.find((x) => x.departmentCode === departmentCode);\r\n    }\r\n\r\n    findWeightByCode(weightCode: string): WeightUnit {\r\n        return this.masterdata.weightUnits.find((x) => x.weightCode === weightCode);\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as Charter;\r\n        const currency: Currency = this.charterCurrencyCntrl.value;\r\n        section.currency = currency ? currency.currencyCode : '';\r\n\r\n        if (this.charterQuantityCntrl.value && this.charterQuantityCntrl.value !== '') {\r\n            const weightCode: WeightUnit = this.findWeightByCode(this.charterQuantityCntrl.value.weightCode);\r\n            section.weightUnitId = weightCode ? weightCode.weightUnitId : null;\r\n        }\r\n\r\n        if (this.charterDeptCntrl.value && this.charterDeptCntrl.value !== '') {\r\n            const department: Department = this.findDepartmentByCode(\r\n                this.charterDeptCntrl.value.departmentCode,\r\n            );\r\n            section.departmentId = department ? department.departmentId : null;\r\n        }\r\n        return section;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"section-light-box\\\">\\r\\n    <h1 mat-dialog-title>Edit Assigned Sections</h1>\\r\\n    <div mat-dialog-content>\\r\\n        <div ag-grid=\\\"sectionsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material atr-grid\\\"\\r\\n                             [rowData]=\\\"model.assignedSections\\\"\\r\\n                             [columnDefs]=\\\"sectionGridCols\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             rowMultiSelectWithClick=\\\"true\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [singleClickEdit]=true\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCancelButtonClick()\\\">Cancel</button>\\r\\n        <button mat-raised-button\\r\\n                (click)=\\\"onEditButtonClick()\\\">Edit</button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"::ng-deep.ag-layout-auto-height.ag-body-container {\\n  min-height: 300px !important; }\\n\\n.section-light-box {\\n  width: 1200px;\\n  height: 700px; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgGridAutocompleteComponent } from '../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { CellEditorDatePickerComponent } from '../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component';\r\nimport { CellEditorSelectComponent } from '../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { Port } from '../../../../../shared/entities/port.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-assign-section-dialog',\r\n    templateUrl: './assign-section-dialog.component.html',\r\n    styleUrls: ['./assign-section-dialog.component.scss'],\r\n})\r\nexport class AssignSectionDialogComponent implements OnInit {\r\n    model: Charter;\r\n    sectionGridCols: agGrid.ColDef[];\r\n    masterdata: any;\r\n    filteredLocations: Port[];\r\n    sectionsAssigned: AssignedSection[];\r\n    listOfMasterData = [\r\n        MasterDataProps.Ports,\r\n    ];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    gridComponents = {\r\n        atrDate: CellEditorDatePickerComponent,\r\n        atrSelect: CellEditorSelectComponent,\r\n    };\r\n    sectionsGridOptions: agGrid.GridOptions = {};\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private masterDataService: MasterdataService, private route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected uiService: UiService,\r\n        public thisDialogRef: MatDialogRef<AssignSectionDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        public gridService: AgGridService) {\r\n        this.model = data.result;\r\n        this.filteredLocations = data.masterdata.ports;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initContractGridColumns();\r\n    }\r\n\r\n    initContractGridColumns() {\r\n        this.sectionGridCols = [\r\n            {\r\n                headerName: 'Contract ref',\r\n                field: 'contractLabel',\r\n            },\r\n            {\r\n                headerName: 'Counterparty',\r\n                field: 'counterparty',\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Vessel',\r\n                field: 'vessel',\r\n            },\r\n            {\r\n                headerName: 'Group Number',\r\n                field: 'groupNumber',\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Loading location',\r\n                field: 'portOrigin',\r\n                colId: 'portOrigin',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    editable: true,\r\n                    options: this.filteredLocations,\r\n                    valueProperty: 'portCode',\r\n                    codeProperty: 'portCode',\r\n                    displayProperty: 'portCode',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Discharge location',\r\n                field: 'portDestination',\r\n                colId: 'portDestination',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    editable: true,\r\n                    options: this.filteredLocations,\r\n                    valueProperty: 'portCode',\r\n                    codeProperty: 'portCode',\r\n                    displayProperty: 'portCode',\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Charter B/L date',\r\n                field: 'blDate',\r\n                cellEditor: 'atrDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditorParams: {\r\n                    maxDate: this.companyManager.getCurrentCompanyDate()\r\n                },\r\n                editable: true,\r\n                onCellValueChanged: this.ammendAllocatedContract.bind(this),\r\n            },\r\n            {\r\n                headerName: 'BL Ref',\r\n                field: 'blRef',\r\n                editable: true,\r\n            },\r\n        ];\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onEditButtonClick() {\r\n        this.thisDialogRef.close(this.model);\r\n    }\r\n\r\n    onCancelButtonClick() {\r\n        this.thisDialogRef.close(null);\r\n    }\r\n\r\n    ammendAllocatedContract(params) {\r\n        if (params) {\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (params.data.contractLabel === rowData.data.allocatedTo) {\r\n                    rowData.data.blDate = params.data.blDate;\r\n                }\r\n            });\r\n            this.gridApi.setRowData(this.model.assignedSections);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-sidenav-container>\\r\\n    <mat-sidenav class=\\\"side-nav-reassignscreen\\\"\\r\\n                 position=\\\"end\\\"\\r\\n                 mode=\\\"over\\\"\\r\\n                 [(opened)]=\\\"sideReassignNavOpened\\\">\\r\\n        <div class=\\\"atr-sidenav-margin\\\">\\r\\n            <h2>Edit Reassigned Sections</h2>\\r\\n            <atlas-reassign-contract-ag-grid #atlasNewReassign\\r\\n                                             (sideReassignValueNavOpened)=\\\"closeReassignSideNav($event)\\\">\\r\\n            </atlas-reassign-contract-ag-grid>\\r\\n        </div>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n        <mat-card [hidden]=\\\"hasEmptyState\\\">\\r\\n            <mat-card-header>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\"\\r\\n                     fxFlex>\\r\\n                    <mat-card-title>Assigned Section</mat-card-title>\\r\\n                    <span class=\\\"fill-space\\\"></span>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onUpdateCostsButtonClicked()\\\">\\r\\n                        <span>UPDATE COSTS</span>\\r\\n                    </button>\\r\\n                    <button mat-button\\r\\n                            *ifAuthorized=\\\"'Charters.ChartersView',company:this.company\\\"\\r\\n                            [disabled]=\\\"!isEdit\\\"\\r\\n                            (click)=\\\"onActionButtonClicked()\\\">\\r\\n                        <span>DEASSIGN</span>\\r\\n                    </button>\\r\\n                    <button mat-button\\r\\n                            *ifAuthorized=\\\"'Charters.ChartersView',company:this.company\\\"\\r\\n                            [disabled]=\\\"!isEdit\\\"\\r\\n                            (click)=\\\" onReassignSideNavOpenClicked()\\\">\\r\\n                        <span>REASSIGN</span>\\r\\n                    </button>\\r\\n                    <atlas-ag-grid-user-preferences *ngIf=\\\"charterGridOptions && charterGridOptions.columnDefs\\\"\\r\\n                                                    [gridOptions]=\\\"charterGridOptions\\\"\\r\\n                                                    [company]=\\\"company\\\"\\r\\n                                                    [gridId]=\\\"componentId\\\"\\r\\n                                                    [showExport]=\\\"true\\\"\\r\\n                                                    [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                                    #userPreferences>\\r\\n                    </atlas-ag-grid-user-preferences>\\r\\n                    <atlas-grid-enlargement *ngIf=\\\"charterGridOptions && charterGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"charterGridOptions\\\"\\r\\n                                            [userPreferencesParameters]=\\\"gridPreferences\\\"\\r\\n                                            [hasRangeSelectionOption]=\\\"true\\\"\\r\\n                                            [summableColumns]=\\\"allowedColumnsforQuickSum\\\"\\r\\n                                            [additionnalActions]=\\\"gridZoomAdditionalActions\\\"\\r\\n                                            (additionalActionTriggered)=\\\"handleGridZoomAction($event)\\\"\\r\\n                                            (rowSelected)=\\\"onRowSelected($event)\\\"\\r\\n                                            #gridZoom>\\r\\n                    </atlas-grid-enlargement>\\r\\n                </div>\\r\\n            </mat-card-header>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 class=\\\"quick-sum-div-height\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleQuickSum()\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                    <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                        <span class=\\\"quick-sum-span\\\"\\r\\n                              *ngIf=\\\"column.sum!==0 && quickSumModeActivated\\\">{{column.name}}:{{column.sum}}</span>\\r\\n                    </div>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                            class=\\\"mat-button-user-margin\\\"\\r\\n                            *ngIf=\\\"quickSumModeActivated\\\">\\r\\n                        Clear Selection\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"charterGridOptions\\\"\\r\\n                 class=\\\"atr-ag-grid\\\"\\r\\n                 [ngClass]='classApplied'>\\r\\n                <ag-grid-angular class=\\\"ag-theme-material atr-ag-grid\\\"\\r\\n                                 [rowData]=\\\"sectionsAssigned\\\"\\r\\n                                 [columnDefs]=\\\"columnDefs\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (columnVisible)=\\\"onAddOrDeleteColumn($event)\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [gridOptions]='charterGridOptions'\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"false\\\"\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [rowSelection]=\\\"rowSelection\\\"\\r\\n                                 [rowStyle]=\\\"rowStyle\\\"\\r\\n                                 [enableRangeSelection]=\\\"true\\\"\\r\\n                                 (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                                 (rowSelected)=\\\"onRowSelected($event)\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoadingAssigned\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n        <atlas-empty-state *ngIf=\\\"hasEmptyState\\\"\\r\\n                           title=\\\"No Assignments\\\"\\r\\n                           [message]=\\\"assignmentEmptyMessage\\\"></atlas-empty-state>\\r\\n        <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n        </atlas-lock-interval>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\\r\\n\"","module.exports = \".h2-title {\\n  padding-left: 10px; }\\n\\n.atr-ag-grid {\\n  height: 100%; }\\n\\n.ag-theme-material .ag-header-select-all {\\n  width: 100% !important;\\n  text-align: center !important; }\\n\\n.atr-grid-left-margin {\\n  left: 20px; }\\n\\n:host ::ng-deep.ag-layout-auto-height.ag-body-container {\\n  min-height: 300px !important; }\\n\\n.quick-sum-span {\\n  font: 400 14px/20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  margin-right: 4px; }\\n\\nbutton.mat-button-user-margin.mat-button.ng-star-inserted {\\n  margin: 0px !important;\\n  line-height: 0px !important; }\\n\\n.mat-card-header button.mat-button {\\n  margin: 0 8px !important; }\\n\\n.quick-sum-div-height {\\n  height: 25px !important; }\\n\\n.side-nav-reassignscreen {\\n  width: 1200px;\\n  height: calc(100vh - 53px);\\n  top: 56px;\\n  z-index: 10px; }\\n\\n.atr-sidenav-margin {\\n  margin: 16px; }\\n\\n.isLoading {\\n  width: 0;\\n  height: 0; }\\n\\nh2 {\\n  margin-top: 20px !important; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { concatMap, map, takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridHyperlinkComponent } from '../../../../../shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { GridEnlargementComponent } from '../../../../../shared/components/grid-enlargement/grid-enlargement.component';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../shared/entities/lock-resource-information.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { ContractStatus } from '../../../../../shared/enums/contract-status.enum';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { PermissionLevels } from '../../../../../shared/enums/permission-level.enum';\r\nimport { PricingMethods } from '../../../../../shared/enums/pricing-method.enum';\r\nimport { AssignedSectionView } from '../../../../../shared/models/assigned-section-display-view';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { CommonMethods } from '../../../../services/execution-cash-common-methods';\r\nimport { DeassignSectionDialogComponent } from '../deassign-section-dialog/deassign-section-dialog.component';\r\nimport { ReassignContractAgGridComponent } from '../reassign-contract-ag-grid/reassign-contract-ag-grid.component';\r\nimport { AgGridUserPreferencesComponent } from './../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { User } from './../../../../../shared/entities/user.entity';\r\nimport { GroupFunctionTypes } from './../../../../../shared/enums/group-function-type';\r\nimport { CharterDisplayView } from './../../../../../shared/models/charter-display-view';\r\nimport { GridConfigurationProviderService } from './../../../../../shared/services/grid-configuration-provider.service';\r\nimport { SecurityService } from './../../../../../shared/services/security.service';\r\n\r\n@Component({\r\n    selector: 'atlas-assigned-contract-list-form-component',\r\n    templateUrl: './assigned-contract-list-form-component.component.html',\r\n    styleUrls: ['./assigned-contract-list-form-component.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class AssignedContractListFormComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('gridZoom') gridEnlargementComponent: GridEnlargementComponent;\r\n\r\n    charterId: number;\r\n    columnDefs: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    rowStyle: any;\r\n    savingInProgress = false;\r\n    sectionsAssigned: AssignedSectionView[];\r\n    fullyInvoiceContract: AssignedSectionView[];\r\n    isLoadingAssigned = true;\r\n    dataLength = 0;\r\n    rowSelection: string;\r\n    masterdata: any = [];\r\n    gridContext: AssignedContractListFormComponent;\r\n    sectionsAssignedGridContextualMenuActions: AgContextualMenuAction[];\r\n    sectionsAssignedMenuActions: { [key: string]: string } = {\r\n        deleteAssignedContract: 'delete',\r\n        reassignedContract: 'reassign',\r\n    };\r\n    model: Charter;\r\n    isEdit: boolean = true;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    company: string;\r\n    userActiveDirectoryName: string;\r\n    checkExportedFormat: boolean = false;\r\n    excelStyles: any;\r\n    hasEmptyState: boolean = true;\r\n    @Output() isContractAssigned = new EventEmitter<any>();\r\n    @Output() readonly isReassignedButtonClicked = new EventEmitter();\r\n    @ViewChild('atlasNewReassign') atlasNewReassign: ReassignContractAgGridComponent;\r\n    bulkActionTypeId: GroupFunctionTypes;\r\n    chartersList: CharterDisplayView[] = [];\r\n\r\n    assignDeassignPrivilege: UserCompanyPrivilegeDto = {\r\n        privilegeName: 'ChartersView',\r\n        profileId: null,\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Charters',\r\n        privilegeParentLevelTwo: 'ChartersView',\r\n    };\r\n\r\n    defaultColumnDisplay = {\r\n        checkboxSelection: true,\r\n        contractLabel: true,\r\n        counterparty: true,\r\n        quantity: true,\r\n        departmentCode: true,\r\n        commodity1: true,\r\n        blDate: true,\r\n        allocatedTo: true,\r\n        invoiceRef: true,\r\n    };\r\n\r\n    allowedColumnsforQuickSum: string[];\r\n\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    componentId: string = 'charterAssignedSectionsList';\r\n    hasGridSharing: boolean = false;\r\n    charterGridOptions: agGrid.GridOptions = {};\r\n\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    assignmentEmptyMessage: string = 'No contract has been assigned yet';\r\n    sideReassignNavOpened: boolean;\r\n    assignOrDeassignPrivilege: boolean;\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridPreferences: UserGridPreferencesParameters;\r\n    gridZoomAdditionalActions = [];\r\n\r\n    editingCharter: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'ChartersView',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Charters',\r\n        privilegeParentLevelTwo: null,\r\n    };\r\n\r\n    constructor(\r\n        private companyManager: CompanyManagerService,\r\n        private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        protected router: Router,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private snackbarService: SnackbarService,\r\n        private authorizationService: AuthorizationService,\r\n        protected dialog: MatDialog,\r\n        private datePipe: DatePipe,\r\n        private formatDate: FormatDatePipe,\r\n        private uiService: UiService,\r\n        protected lockService: LockService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        const currentUser: User = this.authorizationService.getCurrentUser();\r\n        this.userActiveDirectoryName = currentUser ? currentUser.samAccountName : '';\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.charterId = this.route.snapshot.params['charterId'];\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.gridContext = this;\r\n        this.classApplied = this.defaultClass;\r\n        this.atlasNewReassign.charterId = this.charterId;\r\n        this.init();\r\n        this.initFavouriteColumns();\r\n\r\n        this.securityService.isSecurityReady().pipe(\r\n            concatMap(() => {\r\n                return this.gridConfigurationProvider.getConfiguration(this.company, this.componentId);\r\n            }),\r\n        ).subscribe((configuration) => {\r\n\r\n            this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            this.gridPreferences = {\r\n                company: this.company,\r\n                gridId: this.componentId,\r\n                gridOptions: this.charterGridOptions,\r\n                sharingEnabled: this.hasGridSharing,\r\n                showExport: true,\r\n            };\r\n            this.findAssignedContractsToCharter();\r\n        });\r\n\r\n    }\r\n\r\n    toggleQuickSum() {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = !this.quickSumModeActivated;\r\n        this.quickSumModeActivated ? this.classApplied = this.cellSelectionClass : this.classApplied = this.defaultClass;\r\n        this.selectedColumnsArray = [];\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.gridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n\r\n    closeReassignSideNav(value) {\r\n        this.sideReassignNavOpened = false;\r\n        this.isReassignedButtonClicked.emit(false);\r\n        if (value) {\r\n            this.findAssignedContractsToCharter();\r\n            this.router.navigate(['/' + this.route.snapshot.paramMap.get('company') + '/execution/charter/details', this.charterId]);\r\n        }\r\n\r\n    }\r\n    onRangeSelectionChanged(event) {\r\n\r\n        this.selectedColumnsArray = [];\r\n        const rangeSelections = this.gridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        const firstRange = rangeSelections[0];\r\n        const startRow = Math.min(firstRange.start.rowIndex, firstRange.end.rowIndex);\r\n        const endRow = Math.max(firstRange.start.rowIndex, firstRange.end.rowIndex);\r\n        const api = this.gridApi;\r\n        let sum = 0;\r\n        const selectedColumnsArray = this.selectedColumnsArray;\r\n        const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n        firstRange.columns.forEach((column) => {\r\n            sum = 0;\r\n            if (allowedColumnsforQuickSum.includes(column.getColDef().colId)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = api.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = api.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n\r\n                selectedColumnsArray.push({ name: column.getColDef().headerName, sum });\r\n            }\r\n        });\r\n        this.selectedColumnsArray = selectedColumnsArray;\r\n    }\r\n\r\n    onRowSelected(event) {\r\n        if (event.data.allocatedTo) {\r\n            let allocatedSection: AssignedSectionView;\r\n            allocatedSection = this.sectionsAssigned.find((item: AssignedSectionView) =>\r\n                item.contractLabel === event.data.allocatedTo);\r\n            if (allocatedSection) {\r\n                event.data.isChecked = !event.data.isChecked;\r\n                this.gridApi.forEachNode((node) => {\r\n                    if (node.data.contractLabel === allocatedSection.contractLabel) {\r\n                        if (node.isSelected() && !event.data.isChecked) {\r\n                            node.setSelected(event.data.isChecked);\r\n                        } else if (!node.isSelected() && event.data.isChecked) {\r\n                            node.setSelected(event.data.isChecked);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (this.isEdit) {\r\n            if (event.node.isSelected()) {\r\n\r\n                this.lockService.isLockedContract(event.data.sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.gridApi.deselectNode(event.node);\r\n                        this.locking = this.locking.filter((id) => id !== event.data.sectionId);\r\n                    } else {\r\n                        this.lockService.lockContract(event.data.sectionId, LockFunctionalContext.TradeDeassignment)\r\n                            .pipe(takeUntil(this.destroy$))\r\n                            .subscribe((lockState) => {\r\n                                this.refeshResourceInformation();\r\n                                this.locking = this.locking.filter((id) => id !== event.data.sectionId);\r\n                            });\r\n\r\n                    }\r\n                });\r\n            } else {\r\n                if (!this.unlocking.includes(event.data.sectionId)) {\r\n                    this.unlocking.push(event.data.sectionId);\r\n                    this.refeshResourceInformation();\r\n                    this.lockService.unlockContract(event.data.sectionId, LockFunctionalContext.TradeDeassignment)\r\n                        .pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n                            this.unlocking = this.unlocking.filter((id) => id !== event.data.sectionId);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.gridApi.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    init() {\r\n        this.allowedColumnsforQuickSum = ['quantity', 'price'];\r\n        this.sectionsAssignedGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Deassign',\r\n                action: this.sectionsAssignedMenuActions.deleteAssignedContract,\r\n                disabled: this.isDisabled,\r\n            },\r\n            {\r\n                icon: 'refresh',\r\n                text: 'Reassign',\r\n                action: this.sectionsAssignedMenuActions.reassignedContract,\r\n            },\r\n        ];\r\n        this.initGridZoom();\r\n    }\r\n\r\n    isDisabled(params) {\r\n        let deassignDisable = true;\r\n        if (params.context.actionContext.isEdit) {\r\n            deassignDisable = false;\r\n        }\r\n        return deassignDisable;\r\n    }\r\n\r\n    getSelectedRow() {\r\n        let assignedSections: AssignedSectionView[];\r\n        let allocatedSection: AssignedSectionView;\r\n        assignedSections = this.gridApi.getSelectedRows();\r\n\r\n        assignedSections.forEach((element: AssignedSectionView) => {\r\n            if (element.contractType === ContractTypes.Sale && element.invoicingStatus === InvoicingStatus.Finalized) {\r\n                element.reasonForDeassignment = 'Sales contract is 100% invoiced and cannot be de-assigned';\r\n                element.isSaleFullyInvoiced = true;\r\n\r\n            } else if (element.contractType === ContractTypes.Purchase && element.allocatedTo) {\r\n                allocatedSection = this.sectionsAssigned.find((item: AssignedSectionView) => item.contractLabel === element.allocatedTo);\r\n                if (allocatedSection.invoicingStatus === InvoicingStatus.Finalized) {\r\n                    element.reasonForDeassignment =\r\n                        'Purchase contract allocated to a Sales Contract which is 100% invoiced and cannot be de-assigned';\r\n                    element.isSaleFullyInvoiced = true;\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        assignedSections.forEach((element: AssignedSectionView) => {\r\n            if (element.allocatedTo) {\r\n                allocatedSection = this.sectionsAssigned.find((item: AssignedSectionView) =>\r\n                    item.contractLabel === element.allocatedTo && element.isSaleFullyInvoiced === false);\r\n                if (allocatedSection) {\r\n                    if (!assignedSections.includes(allocatedSection)) {\r\n                        assignedSections.push(allocatedSection);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.model.assignedSections = assignedSections.filter((section: AssignedSectionView) =>\r\n            section.isSaleFullyInvoiced === false);\r\n        this.fullyInvoiceContract = assignedSections.filter((section: AssignedSectionView) =>\r\n            section.isSaleFullyInvoiced === true || section.reasonForDeassignment !== '');\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean = false) {\r\n        this.model = entity as Charter;\r\n        this.isEdit = isEdit;\r\n        if (isEdit) {\r\n            this.isEdit = this.checkIfUserHasRequiredPrivileges(this.assignDeassignPrivilege);\r\n        }\r\n        this.initializeGridColumns();\r\n        this.initGridZoom();\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeParentLevelTwo,\r\n                userCompanyPrivilege.privilegeParentLevelOne);\r\n            if (userPermissionLevel < userCompanyPrivilege.permission) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    findAssignedContractsToCharter() {\r\n        this.isLoadingAssigned = true;\r\n        this.locking = [];\r\n        this.resourcesInformation.forEach((resourceInformation) => {\r\n            if (!this.unlocking.includes(resourceInformation.resourceId)) {\r\n                this.unlocking.push(resourceInformation.resourceId);\r\n                this.refeshResourceInformation();\r\n                this.lockService.unlockContract(resourceInformation.resourceId, LockFunctionalContext.TradeDeassignment)\r\n                    .pipe(takeUntil(this.destroy$))\r\n                    .subscribe(() => {\r\n                        this.unlocking = this.unlocking.filter((id) => id !== resourceInformation.resourceId);\r\n                    });\r\n            }\r\n        });\r\n        this.unlocking = [];\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n\r\n        this.executionService.getSectionsAssignedToCharter(this.charterId).pipe(\r\n            map((data) => {\r\n                this.sectionsAssigned = data.value.map((section) => {\r\n                    section.counterparty = (section.contractType === ContractTypes.Purchase ? section.sellerCode : section.buyerCode);\r\n                    return new AssignedSectionView(section);\r\n                });\r\n                this.initializeGridColumns();\r\n                this.dataLength = this.sectionsAssigned.length;\r\n                if (this.dataLength > 0) {\r\n                    this.isContractAssigned.emit(true);\r\n                    this.hasEmptyState = false;\r\n                }\r\n                this.isLoadingAssigned = false;\r\n            }))\r\n            .subscribe();\r\n\r\n    }\r\n\r\n    hyperlinkClicked(rowSelected: AssignedSectionView, event) {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/display', rowSelected.sectionId]);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = this.charterGridOptions.api;\r\n        this.charterGridOptions.columnDefs = this.columnDefs;\r\n\r\n        this.gridColumnApi = this.charterGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.charterGridOptions);\r\n    }\r\n\r\n    onAddOrDeleteColumn(event) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(event);\r\n    }\r\n\r\n    showOrHideColum(event, col: agGrid.ColDef) {\r\n        this.gridColumnApi.setColumnVisible(col.colId, (col.hide || false));\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    initFavouriteColumns() {\r\n        for (const key in this.defaultColumnDisplay) {\r\n            this.defaultColumnDisplay[key] = false;\r\n        }\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    commodityDescriptionFormatter(params) {\r\n        const commodity = params.context.masterdata.commodities.find((com) => com.commodityId === params.value);\r\n        return commodity ? commodity.commodityCode : '';\r\n    }\r\n\r\n    departmentDescriptionFormatter(params) {\r\n        const department = params.context.masterdata.departments.find((dept) => dept.departmentId === params.value);\r\n        return department ? department.departmentCode : '';\r\n    }\r\n\r\n    paymentTermCodeFormatter(params) {\r\n        const paymentTerm = params.context.masterdata.paymentTerms.find((payment) => payment.paymentTermsCode === params.value);\r\n        return paymentTerm ? paymentTerm.paymentTermsDescription : '';\r\n    }\r\n\r\n    contractStatusFormatter(params) {\r\n        if (params.value === ContractStatus.Unapproved || params.value === ContractStatus.Invoiced\r\n            || params.value === ContractStatus.Approved) {\r\n            return ContractStatus[params.value] ? ContractStatus[params.value].toString() : '';\r\n        }\r\n    }\r\n\r\n    pricingMethodIdFormatter(params) {\r\n        if (params.value === PricingMethods.FnO || params.value === PricingMethods.Priced) {\r\n            return PricingMethods[params.value] ? PricingMethods[params.value].toString() : '';\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: '',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                headerCheckboxSelectionFilteredOnly: true,\r\n                lockPosition: true,\r\n                hide: !this.isEdit,\r\n                width: 80,\r\n                maxWidth: 80,\r\n            },\r\n            {\r\n                headerName: 'Contract Label',\r\n                colId: 'contractLabel',\r\n                field: 'contractLabel',\r\n                cellRendererFramework: AgGridHyperlinkComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: 'Counter Party',\r\n                colId: 'counterparty',\r\n                field: 'counterparty',\r\n\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                colId: 'departmentCode',\r\n                field: 'departmentCode',\r\n            },\r\n            {\r\n                headerName: 'BL date',\r\n                colId: 'blDate',\r\n                field: 'blDate',\r\n                cellClass: 'dateFormat',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n            },\r\n            {\r\n                headerName: 'Allocation',\r\n                colId: 'allocatedTo',\r\n                field: 'allocatedTo',\r\n            },\r\n            {\r\n                headerName: 'Invoice Ref',\r\n                colId: 'invoiceRef',\r\n                field: 'invoiceRef',\r\n            },\r\n            {\r\n                headerName: 'Contract Date',\r\n                colId: 'contractDate',\r\n                field: 'contractDate',\r\n                hide: !this.defaultColumnDisplay['contractDate'],\r\n                cellClass: 'dateFormat',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n            },\r\n            {\r\n                headerName: 'Pricing Method',\r\n                colId: 'pricingMethodId',\r\n                field: 'pricingMethodId',\r\n                hide: !this.defaultColumnDisplay['pricingMethodId'],\r\n                valueFormatter: this.pricingMethodIdFormatter,\r\n            },\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'contractStatusCode',\r\n                field: 'contractStatusCode',\r\n                hide: !this.defaultColumnDisplay['ContractStatusCode'],\r\n                valueFormatter: this.contractStatusFormatter,\r\n            },\r\n            {\r\n                headerName: 'Last Amendment',\r\n                colId: 'modifiedDateTime',\r\n                field: 'modifiedDateTime',\r\n                hide: !this.defaultColumnDisplay['modifiedDateTime'],\r\n                cellClass: 'dateFormat',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n            },\r\n            {\r\n                headerName: 'Amendment by',\r\n                colId: 'modifiedBy',\r\n                field: 'modifiedBy',\r\n                hide: !this.defaultColumnDisplay['modifiedBy'],\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                colId: 'price',\r\n                field: 'price',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                hide: !this.defaultColumnDisplay['price'],\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                colId: 'currency',\r\n                field: 'currency',\r\n                type: 'numericColumn',\r\n                hide: !this.defaultColumnDisplay['currency'],\r\n            },\r\n            {\r\n                headerName: 'Payment Terms',\r\n                colId: 'paymentTermCode',\r\n                field: 'paymentTermCode',\r\n                hide: !this.defaultColumnDisplay['paymentTermCode'],\r\n                valueFormatter: this.paymentTermCodeFormatter,\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                colId: 'charterRef',\r\n                field: 'charterRef',\r\n                hide: !this.defaultColumnDisplay['charterRef'],\r\n            },\r\n            {\r\n                headerName: 'Allocation Date',\r\n                colId: 'allocatedDateTime',\r\n                field: 'allocatedDateTime',\r\n                hide: !this.defaultColumnDisplay['allocatedDateTime'],\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'Amended By',\r\n                colId: 'amendedBy',\r\n                field: 'amendedBy',\r\n                hide: !this.defaultColumnDisplay['amendedBy'],\r\n            },\r\n            {\r\n                headerName: 'Amended On',\r\n                colId: 'amendedOn',\r\n                field: 'amendedOn',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                hide: !this.defaultColumnDisplay['amendedOn'],\r\n            },\r\n            {\r\n                headerName: 'Arbitration Code',\r\n                colId: 'arbitrationCode',\r\n                field: 'arbitrationCode',\r\n                hide: !this.defaultColumnDisplay['arbitrationCode'],\r\n            },\r\n            {\r\n                headerName: 'Arbitration Description',\r\n                colId: 'arbitrationDescription',\r\n                field: 'arbitrationDescription',\r\n                hide: !this.defaultColumnDisplay['arbitrationDescription'],\r\n            },\r\n            {\r\n                headerName: 'Buyer',\r\n                colId: 'buyerCode',\r\n                field: 'buyerCode',\r\n                hide: !this.defaultColumnDisplay['buyerCode'],\r\n            },\r\n            {\r\n                headerName: 'Buyer Description',\r\n                colId: 'buyerDescription',\r\n                field: 'buyerDescription',\r\n                hide: !this.defaultColumnDisplay['buyerDescription'],\r\n            },\r\n            {\r\n                headerName: 'Cmy1',\r\n                colId: 'commodity1',\r\n                field: 'commodity1',\r\n            },\r\n            {\r\n                headerName: 'Cmy2',\r\n                colId: 'commodity2',\r\n                field: 'commodity2',\r\n                hide: !this.defaultColumnDisplay['commodity2'],\r\n            },\r\n            {\r\n                headerName: 'Cmy3',\r\n                colId: 'commodity3',\r\n                field: 'commodity3',\r\n                hide: !this.defaultColumnDisplay['commodity3'],\r\n            },\r\n            {\r\n                headerName: 'Cmy4',\r\n                colId: 'commodity4',\r\n                field: 'commodity4',\r\n                hide: !this.defaultColumnDisplay['commodity4'],\r\n            },\r\n            {\r\n                headerName: 'Cmy5',\r\n                colId: 'commodity5',\r\n                field: 'commodity5',\r\n                hide: !this.defaultColumnDisplay['commodity5'],\r\n            },\r\n            {\r\n                headerName: 'Commodity Description',\r\n                colId: 'commodityDescription',\r\n                field: 'commodityDescription',\r\n                hide: !this.defaultColumnDisplay['commodityDescription'],\r\n            },\r\n            {\r\n                headerName: 'Company',\r\n                colId: 'companyId',\r\n                field: 'companyId',\r\n                hide: !this.defaultColumnDisplay['pricingMethodId'],\r\n            },\r\n            {\r\n                headerName: 'Contract Issued On',\r\n                colId: 'contractIssuedOn',\r\n                field: 'contractIssuedOn',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                hide: !this.defaultColumnDisplay['contractIssuedOn'],\r\n            },\r\n            {\r\n                headerName: 'Contracted Quantity',\r\n                colId: 'contractQuantity',\r\n                field: 'contractQuantity',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                hide: !this.defaultColumnDisplay['contractQuantity'],\r\n            },\r\n            {\r\n                headerName: 'Contract Term',\r\n                colId: 'contractTermCode',\r\n                field: 'contractTermCode',\r\n                hide: !this.defaultColumnDisplay['contractTermCode'],\r\n            },\r\n            {\r\n                headerName: 'Contract Term Description',\r\n                colId: 'contractTermDescription',\r\n                field: 'contractTermDescription',\r\n                hide: !this.defaultColumnDisplay['contractTermDescription'],\r\n            },\r\n            {\r\n                headerName: 'Contract Term Port Code',\r\n                colId: 'contractTermLocationPortCode',\r\n                field: 'contractTermLocationPortCode',\r\n                hide: !this.defaultColumnDisplay['contractTermLocationPortCode'],\r\n            },\r\n            {\r\n                headerName: 'Contract Term Port Description',\r\n                colId: 'contractTermLocationDescription',\r\n                field: 'contractTermLocationDescription',\r\n                hide: !this.defaultColumnDisplay['contractTermLocationDescription'],\r\n            },\r\n            {\r\n                headerName: 'Created Date Time',\r\n                colId: 'createdDateTime',\r\n                field: 'createdDateTime',\r\n                cellClass: 'dateFormat',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                hide: !this.defaultColumnDisplay['createdDateTime'],\r\n            },\r\n            {\r\n                headerName: 'Contract Type',\r\n                colId: 'displayContractType',\r\n                field: 'displayContractType',\r\n                hide: !this.defaultColumnDisplay['displayContractType'],\r\n            },\r\n            {\r\n                headerName: 'Contract Value',\r\n                colId: 'contractValue',\r\n                field: 'contractValue',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                hide: !this.defaultColumnDisplay['contractValue'],\r\n            },\r\n            {\r\n                headerName: 'Counterparty Ref',\r\n                colId: 'counterpartyRef',\r\n                field: 'counterpartyRef',\r\n                hide: !this.defaultColumnDisplay['counterpartyRef'],\r\n            },\r\n            {\r\n                headerName: 'Created By',\r\n                colId: 'createdBy',\r\n                field: 'createdBy',\r\n                hide: !this.defaultColumnDisplay['createdBy'],\r\n            },\r\n            {\r\n                headerName: 'Crop Year',\r\n                colId: 'cropYear',\r\n                field: 'cropYear',\r\n                hide: !this.defaultColumnDisplay['cropYear'],\r\n            },\r\n            {\r\n                headerName: 'Currency Description',\r\n                colId: 'currencyDescription',\r\n                field: 'currencyDescription',\r\n                hide: !this.defaultColumnDisplay['currencyDescription'],\r\n            },\r\n            {\r\n                headerName: 'Delivery Period Start',\r\n                colId: 'deliveryPeriodStart',\r\n                field: 'deliveryPeriodStart',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                hide: !this.defaultColumnDisplay['deliveryPeriodStart'],\r\n            },\r\n            {\r\n                headerName: 'Delivery Period End',\r\n                colId: 'deliveryPeriodEnd',\r\n                field: 'deliveryPeriodEnd',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                hide: !this.defaultColumnDisplay['deliveryPeriodEnd'],\r\n            },\r\n            {\r\n                headerName: 'Department Description',\r\n                colId: 'departmentDescription',\r\n                field: 'departmentDescription',\r\n                hide: !this.defaultColumnDisplay['pricingMethodId'],\r\n            },\r\n            {\r\n                headerName: 'Grouping Number',\r\n                colId: 'groupingNumber',\r\n                field: 'groupingNumber',\r\n                hide: !this.defaultColumnDisplay['groupingNumber'],\r\n            },\r\n            {\r\n                headerName: 'Original Quantity',\r\n                colId: 'originalQuantity',\r\n                field: 'originalQuantity',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                hide: !this.defaultColumnDisplay['originalQuantity'],\r\n            },\r\n            {\r\n                headerName: 'Invoice Value',\r\n                colId: 'invoiceValue',\r\n                field: 'invoiceValue',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                hide: !this.defaultColumnDisplay['invoiceValue'],\r\n            },\r\n            {\r\n                headerName: 'Invoicing Status',\r\n                colId: 'displayInvoicingStatus',\r\n                field: 'displayInvoicingStatus',\r\n                hide: !this.defaultColumnDisplay['displayInvoicingStatus'],\r\n            },\r\n            {\r\n                headerName: 'Main Invoice Reference',\r\n                colId: 'mainInvoiceReference',\r\n                field: 'mainInvoiceReference',\r\n                hide: !this.defaultColumnDisplay['mainInvoiceReference'],\r\n            },\r\n            {\r\n                headerName: 'Main Invoice Date',\r\n                colId: 'mainInvoiceDate',\r\n                field: 'mainInvoiceDate',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                hide: !this.defaultColumnDisplay['mainInvoiceDate'],\r\n            },\r\n            {\r\n                headerName: 'Memo',\r\n                colId: 'memo',\r\n                field: 'memo',\r\n                hide: !this.defaultColumnDisplay['memo'],\r\n            },\r\n            {\r\n                headerName: 'Other Reference',\r\n                colId: 'otherReference',\r\n                field: 'otherReference',\r\n                hide: !this.defaultColumnDisplay['otherReference'],\r\n            },\r\n            {\r\n                headerName: 'Parent',\r\n                colId: 'parentContractLabel',\r\n                field: 'parentContractLabel',\r\n                hide: !this.defaultColumnDisplay['parentContractLabel'],\r\n            },\r\n            {\r\n                headerName: 'Payment Date',\r\n                colId: 'paymentDate',\r\n                field: 'paymentDate',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                hide: !this.defaultColumnDisplay['paymentDate'],\r\n            },\r\n            {\r\n                headerName: 'Payment Term Description',\r\n                colId: 'paymentTermDescription',\r\n                field: 'paymentTermDescription',\r\n                hide: !this.defaultColumnDisplay['paymentTermDescription'],\r\n            },\r\n            {\r\n                headerName: 'Percentage Invoiced',\r\n                colId: 'percentageInvoiced',\r\n                field: 'percentageInvoiced',\r\n                hide: !this.defaultColumnDisplay['percentageInvoiced'],\r\n            },\r\n            {\r\n                headerName: 'Period Type',\r\n                colId: 'periodType',\r\n                field: 'periodType',\r\n                hide: !this.defaultColumnDisplay['periodType'],\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                colId: 'physicalContractCode',\r\n                field: 'physicalContractCode',\r\n                hide: !this.defaultColumnDisplay['physicalContractCode'],\r\n            },\r\n            {\r\n                headerName: 'Port Of Origin',\r\n                colId: 'portOfOrigin',\r\n                field: 'portOfOrigin',\r\n                hide: !this.defaultColumnDisplay['portOfOrigin'],\r\n            },\r\n            {\r\n                headerName: 'Port Of Origin Description',\r\n                colId: 'portOfOriginDescription',\r\n                field: 'portOfOriginDescription',\r\n                hide: !this.defaultColumnDisplay['portOfOriginDescription'],\r\n            },\r\n            {\r\n                headerName: 'Port Of Destination',\r\n                colId: 'portOfDestination',\r\n                field: 'portOfDestination',\r\n                hide: !this.defaultColumnDisplay['portOfDestination'],\r\n            },\r\n            {\r\n                headerName: 'Port Of Destination Description',\r\n                colId: 'portOfDestinationDescription',\r\n                field: 'portOfDestinationDescription',\r\n                hide: !this.defaultColumnDisplay['portOfDestinationDescription'],\r\n            },\r\n            {\r\n                headerName: 'Position Month',\r\n                colId: 'positionMonth',\r\n                field: 'positionMonth',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                hide: !this.defaultColumnDisplay['positionMonth'],\r\n            },\r\n            {\r\n                headerName: 'Position Type',\r\n                colId: 'positionType',\r\n                field: 'positionType',\r\n                hide: !this.defaultColumnDisplay['positionType'],\r\n            },\r\n            {\r\n                headerName: 'Price Unit Code',\r\n                colId: 'priceCode',\r\n                field: 'priceCode',\r\n                hide: !this.defaultColumnDisplay['priceCode'],\r\n            },\r\n            {\r\n                headerName: 'Price Unit Description',\r\n                colId: 'priceUnitDescription',\r\n                field: 'priceUnitDescription',\r\n                hide: !this.defaultColumnDisplay['priceUnitDescription'],\r\n            },\r\n            {\r\n                headerName: 'Quantity Code Invoiced',\r\n                colId: 'quantityCodeInvoiced',\r\n                field: 'quantityCodeInvoiced',\r\n                hide: !this.defaultColumnDisplay['quantityCodeInvoiced'],\r\n            },\r\n            {\r\n                headerName: 'Quantity Invoiced',\r\n                colId: 'quantityInvoiced',\r\n                field: 'quantityInvoiced',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                hide: !this.defaultColumnDisplay['quantityInvoiced'],\r\n            },\r\n            {\r\n                headerName: 'Seller',\r\n                colId: 'sellerCode',\r\n                field: 'sellerCode',\r\n                hide: !this.defaultColumnDisplay['sellerCode'],\r\n            },\r\n            {\r\n                headerName: 'Seller Description',\r\n                colId: 'sellerDescription',\r\n                field: 'sellerDescription',\r\n                hide: !this.defaultColumnDisplay['sellerDescription'],\r\n            },\r\n            {\r\n                headerName: 'Trader',\r\n                colId: 'traderDisplayName',\r\n                field: 'traderDisplayName',\r\n                hide: !this.defaultColumnDisplay['pricingMethodId'],\r\n            },\r\n            {\r\n                headerName: 'Vessel Name',\r\n                colId: 'vesselName',\r\n                field: 'vesselName',\r\n                hide: !this.defaultColumnDisplay['vesselName'],\r\n            },\r\n\r\n            {\r\n                headerName: 'Quantity Code',\r\n                colId: 'weightUnitCode',\r\n                field: 'weightUnitCode',\r\n                hide: !this.defaultColumnDisplay['weightUnitCode'],\r\n            },\r\n            {\r\n                headerName: 'Quantity Code Description',\r\n                colId: 'weightUnitDescription',\r\n                field: 'weightUnitDescription',\r\n                hide: !this.defaultColumnDisplay['weightUnitDescription'],\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.sectionsAssignedGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 80,\r\n            },\r\n        ];\r\n\r\n        this.rowSelection = 'multiple';\r\n        this.rowStyle = { 'border-bottom': '1px solid #e0e0e0 !important' };\r\n    }\r\n\r\n    onActionButtonClicked() {\r\n        this.getSelectedRow();\r\n        this.removeContractFromSection();\r\n    }\r\n\r\n    removeContractFromSection() {\r\n        if (this.model.assignedSections.length > 0 || this.fullyInvoiceContract.length > 0) {\r\n            const result = this.model;\r\n            const deAssignSectionDialog = this.dialog.open(DeassignSectionDialogComponent, {\r\n                data: { result, masterdata: this.masterdata, fullyInvoiceContract: this.fullyInvoiceContract },\r\n            });\r\n            deAssignSectionDialog.afterClosed().subscribe((charters: Charter) => {\r\n                this.findAssignedContractsToCharter();\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('No Contract Selected.');\r\n        }\r\n\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const charter = entity as Charter;\r\n        charter.assignedSections = this.gridApi ? this.gridApi.getSelectedRows() : [];\r\n        charter.assignedSections.forEach((section) => {\r\n            section.vessel = charter.vesselCode;\r\n            section.portOrigin = charter.loadingLocationCode;\r\n            section.portDestination = charter.dischargeLocationCode;\r\n            const sectionAllocated = charter.assignedSections\r\n                .find((assignedSection) => section.allocatedTo === assignedSection.contractLabel);\r\n            if (!this.isSectionInvoicedOrUnallocatedSale(section)) {\r\n                section.blDate = charter.blDate;\r\n                if (sectionAllocated && !this.isSectionInvoicedOrUnallocatedSale(sectionAllocated)) {\r\n                    sectionAllocated.blDate = charter.blDate;\r\n                }\r\n            }\r\n            section.blRef = charter.blRef;\r\n        });\r\n        return charter;\r\n    }\r\n\r\n    isSectionInvoicedOrUnallocatedSale(section): boolean {\r\n        if (section.invoiceRef && section.invoiceRef !== '') {\r\n            return true;\r\n        }\r\n        // Sale not allocated will not be updated\r\n        if (section.contractType === ContractTypes.Sale && section.allocatedTo === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    handleAction(action: string, rowSelected: AssignedSectionView) {\r\n        let allocatedSection: AssignedSectionView;\r\n        const assignedSections: AssignedSectionView[] = [];\r\n\r\n        this.model.assignedSections = [];\r\n        switch (action) {\r\n\r\n            case this.sectionsAssignedMenuActions.deleteAssignedContract:\r\n\r\n                if (rowSelected.contractType === ContractTypes.Sale && rowSelected.invoicingStatus === InvoicingStatus.Finalized) {\r\n                    rowSelected.reasonForDeassignment = 'Sales contract is 100% invoiced and cannot be de-assigned';\r\n                    rowSelected.isSaleFullyInvoiced = true;\r\n\r\n                }\r\n\r\n                if (rowSelected.contractType === ContractTypes.Purchase && rowSelected.allocatedTo) {\r\n                    allocatedSection = this.sectionsAssigned.find((item) =>\r\n                        item.contractLabel === rowSelected.allocatedTo);\r\n                    if (allocatedSection.invoicingStatus === InvoicingStatus.Finalized) {\r\n                        rowSelected.reasonForDeassignment =\r\n                            'Purchase contract allocated to a Sales Contract which is 100% invoiced and cannot be de-assigned';\r\n                        rowSelected.isSaleFullyInvoiced = true;\r\n                    }\r\n                }\r\n\r\n                assignedSections.push(rowSelected);\r\n\r\n                if (rowSelected.allocatedTo && rowSelected.isSaleFullyInvoiced === false) {\r\n                    allocatedSection = this.sectionsAssigned.find((item) =>\r\n                        item.contractLabel === rowSelected.allocatedTo && item.isSaleFullyInvoiced === false);\r\n                    if (allocatedSection) {\r\n                        assignedSections.push(allocatedSection);\r\n                    }\r\n                }\r\n\r\n                this.model.assignedSections = assignedSections.filter((section: AssignedSectionView) =>\r\n                    section.isSaleFullyInvoiced === false);\r\n                this.fullyInvoiceContract = assignedSections.filter((section: AssignedSectionView) =>\r\n                    section.isSaleFullyInvoiced === true || section.reasonForDeassignment !== '');\r\n\r\n                this.removeContractFromSection();\r\n\r\n                break;\r\n            case this.sectionsAssignedMenuActions.reassignedContract:\r\n                if (this.isEdit) {\r\n                    if (rowSelected.sectionId) {\r\n                        this.lockContracts(rowSelected.sectionId);\r\n                        if (rowSelected.allocatedToSectionId) {\r\n                            this.lockContracts(rowSelected.allocatedToSectionId);\r\n                        }\r\n                    } else {\r\n                        this.sideReassignNavOpened = true;\r\n                        if (!this.unlocking.includes(rowSelected.sectionId)) {\r\n                            this.unlocking.push(rowSelected.sectionId);\r\n                            this.refeshResourceInformation();\r\n                            this.lockService.unlockContract(rowSelected.sectionId, LockFunctionalContext.TradeReassignment)\r\n                                .pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n                                    this.unlocking = this.unlocking.filter((id) => id !== rowSelected.sectionId);\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n                this.sideReassignNavOpened = true;\r\n                assignedSections.push(rowSelected);\r\n                if (rowSelected.allocatedTo && rowSelected.isSaleFullyInvoiced === false) {\r\n                    allocatedSection = this.sectionsAssigned.find((item) =>\r\n                        item.contractLabel === rowSelected.allocatedTo && item.isSaleFullyInvoiced === false);\r\n                    if (allocatedSection) {\r\n                        assignedSections.push(allocatedSection);\r\n                    }\r\n                }\r\n\r\n                this.model.assignedSections = assignedSections;\r\n\r\n                this.atlasNewReassign.reassignCharterGridRows(this.model);\r\n                break;\r\n            default:  // throw Action not recognized exception\r\n                break;\r\n        }\r\n    }\r\n\r\n    goToChartersDetails(charterId: number) {\r\n        this.router.navigate([this.route.snapshot.paramMap.get('company') +\r\n            '/execution/charter/details', charterId, { warning: false }]);\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param && param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            if (param.colDef.colId.toLowerCase() === 'quantity' ||\r\n                param.colDef.colId.toLowerCase() === 'contractquantity' || param.colDef.colId.toLowerCase() === 'originalquantity'\r\n                || param.colDef.colId.toLowerCase() === 'quantityinvoiced') {\r\n                return commonMethods.getFormattedNumberValue(param.value, 3);\r\n            } else {\r\n                return commonMethods.getFormattedNumberValue(param.value, 2);\r\n            }\r\n        }\r\n    }\r\n\r\n    initGridZoom() {\r\n        this.gridZoomAdditionalActions = [];\r\n        \r\n        const addCostPrivilegeLevel =\r\n            this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                this.editingCharter.privilegeName,\r\n                this.editingCharter.privilegeParentLevelOne,\r\n                this.editingCharter.privilegeParentLevelTwo);\r\n\r\n        const hasAddCostPrivilege = addCostPrivilegeLevel >= PermissionLevels.ReadWrite;\r\n\r\n        this.gridZoomAdditionalActions.push({\r\n            action: 'updateCost',\r\n            text: 'Update Cost',\r\n            disabled: false,\r\n        });\r\n        if (hasAddCostPrivilege) {\r\n            this.gridZoomAdditionalActions.push({\r\n                action: 'deassign',\r\n                text: 'Deassign',\r\n                disabled: !this.isEdit,\r\n            }, {\r\n                action: 'reassign',\r\n                text: 'Reassign',\r\n                disabled: !this.isEdit,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleGridZoomAction(action: string) {\r\n        switch (action) {\r\n            case 'deassign':\r\n                this.gridEnlargementComponent.mapSelectedRowInGridOptions(this.charterGridOptions);\r\n                this.onActionButtonClicked();\r\n                break;\r\n            case 'reassign':\r\n                this.gridEnlargementComponent.mapSelectedRowInGridOptions(this.charterGridOptions);\r\n                this.onReassignSideNavOpenClicked();\r\n                break;\r\n            case 'updateCost':\r\n                this.gridEnlargementComponent.mapSelectedRowInGridOptions(this.charterGridOptions);\r\n                this.onUpdateCostsButtonClicked();\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    onReassignSideNavOpenClicked() {\r\n        this.isReassignedButtonClicked.emit(true);\r\n        this.reassignContractFromSection();\r\n    }\r\n\r\n    getAllSelectedRows() {\r\n        let assignedSections: AssignedSectionView[];\r\n        assignedSections = this.gridApi.getSelectedRows();\r\n        this.model.assignedSections = assignedSections;\r\n    }\r\n\r\n    reassignContractFromSection() {\r\n        this.getAllSelectedRows();\r\n        if (this.model.assignedSections.length > 0 || this.fullyInvoiceContract.length > 0) {\r\n            this.sideReassignNavOpened = true;\r\n            this.atlasNewReassign.reassignCharterGridRows(this.model);\r\n        } else {\r\n            this.snackbarService.informationSnackBar('No Contract Selected.');\r\n            this.sideReassignNavOpened = false;\r\n        }\r\n    }\r\n\r\n    lockContracts(sectionId: number) {\r\n        this.sideReassignNavOpened = false;\r\n        this.lockService.isLockedContract(sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.sideReassignNavOpened = false;\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n                this.locking = this.locking.filter((id) => id !== sectionId);\r\n\r\n            } else {\r\n                this.lockService.lockContract(sectionId, LockFunctionalContext.TradeReassignment)\r\n                    .pipe(takeUntil(this.destroy$))\r\n                    .subscribe((lockState) => {\r\n                        this.refeshResourceInformation();\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    onUpdateCostsButtonClicked() {\r\n        this.bulkActionTypeId = GroupFunctionTypes.Costs;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/trades/bulkActions/costs/' + encodeURIComponent(String(this.bulkActionTypeId)) +\r\n            '/' + encodeURIComponent(String(this.charterId))]);\r\n    }\r\n}\r\n","module.exports = \"<mat-toolbar class=\\\"menu-bar\\\">\\r\\n    <div class=\\\"toolbar-div\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxFlex=\\\"30\\\">\\r\\n            <button mat-button\\r\\n                    class=\\\"menu-bar-button\\\"\\r\\n                    *ifAuthorized=\\\"'Charters.ChartersView',company:this.company\\\"\\r\\n                    (click)='onAssignButtonClicked()'\\r\\n                    [disabled]=\\\"menuDisable\\\">Assign </button>\\r\\n            <button mat-button\\r\\n                    class=\\\"menu-bar-button\\\"\\r\\n                    *ifAuthorized=\\\"'Charters.ChartersView',company:this.company\\\"\\r\\n                    (click)='onCopyButtonClicked()'\\r\\n                    [disabled]=\\\"menuDisable\\\">Image </button>\\r\\n            <button mat-button\\r\\n                    class=\\\"menu-bar-button\\\"\\r\\n                    *ngIf=\\\"charterStatus !== 'Open'\\\"\\r\\n                    (click)='onOpenButtonClicked()'\\r\\n                    [disabled]=\\\"menuDisable\\\">Open </button>\\r\\n            <button mat-button\\r\\n                    class=\\\"menu-bar-button\\\"\\r\\n                    *ngIf=\\\"charterStatus === 'Open' && tradeClosePrivilege\\\"\\r\\n                    (click)='onCloseButtonClicked()'\\r\\n                    [disabled]=\\\"menuDisable\\\">Close </button>\\r\\n            <button mat-button\\r\\n                    class=\\\"menu-bar-button\\\"\\r\\n                    *ifAuthorized=\\\"'Charters.ChartersView',company:this.company\\\"\\r\\n                    (click)='onDeleteButtonClicked()'>Delete\\r\\n            </button>\\r\\n            <button mat-button\\r\\n                    class=\\\"menu-bar-button\\\"\\r\\n                    (click)='allocateDeallocate()'>Allocate/Deallocate\\r\\n            </button>\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"reports\\\"\\r\\n                    class=\\\"menu-bar-button\\\">Reports\\r\\n            </button>\\r\\n            <mat-menu #reports=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        (click)='onViewPnLButtonClicked()'>View P&L</button>\\r\\n                <button mat-menu-item\\r\\n                        (click)='onViewCharterReportButtonClicked()'>Charter Report</button>\\r\\n                <span *ngFor=\\\"let item of filteredTemplates\\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"OnReportClick(item)\\\">\\r\\n                        {{item.name}}\\r\\n                    </button>\\r\\n                </span>\\r\\n            </mat-menu>\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Documents',company:this.company\\\"\\r\\n                    [matMenuTriggerFor]=\\\"documents\\\"\\r\\n                    class=\\\"menu-bar-button\\\"\\r\\n                    [disabled]=\\\"menuDisable\\\">Documents\\r\\n            </button>\\r\\n            <mat-menu #documents=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onSeeDocumentButtonClicked()\\\">See Documents</button>\\r\\n            </mat-menu>\\r\\n        </div>\\r\\n\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n    </div>\\r\\n</mat-toolbar>\\r\\n\"","module.exports = \".menu-bar-action-icon {\\n  cursor: pointer;\\n  background-color: #81cf5c;\\n  border-radius: 50%;\\n  width: 40px;\\n  height: 40px;\\n  text-align: center; }\\n\\nmat-toolbar {\\n  height: 40px !important;\\n  background-color: white !important; }\\n\\n.white-icon {\\n  color: white;\\n  height: 24px;\\n  width: 24px;\\n  vertical-align: bottom; }\\n\"","import { Location } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { CharterPnlReportComponent } from '../../../../../execution/execution-charter/execution-charter-creation-page/components/charter-pnl-report/charter-pnl-report.component';\r\nimport { CharterReportComponent } from '../../../../../execution/execution-charter/execution-charter-creation-page/components/charter-report/charter-report.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { CharterStatus } from '../../../../../shared/enums/charter-status.enum';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { DocumentService } from '../../../../../shared/services/http-services/document.service';\r\nimport { PhysicalDocumentTemplate } from '../../../../../shared/entities/document-template.entity';\r\nimport { GenericReportViewerComponent } from '../../../../../shared/components/generic-report-viewer/generic-report-viewer.component';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-menu-bar-component',\r\n    templateUrl: './charter-menu-bar-component.component.html',\r\n    styleUrls: ['./charter-menu-bar-component.component.scss'],\r\n})\r\nexport class CharterMenuBarComponent implements OnInit, OnDestroy {\r\n    @Input() menuDisable: boolean = undefined;\r\n    @Output() readonly charterSaveAction = new EventEmitter<void>();\r\n    destroy$ = new Subject();\r\n\r\n    charterId: number;\r\n    sectionsAssigned: AssignedSection[];\r\n    company: string;\r\n    charterStatus: string;\r\n    public closeCharterSubject = new Subject();\r\n    public openCharterSubject = new Subject();\r\n    tradeClosePrivilege: boolean = false;\r\n    filteredTemplates: PhysicalDocumentTemplate[] = new Array<PhysicalDocumentTemplate>();\r\n\r\n    constructor(private router: Router,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private executionService: ExecutionService,\r\n        private snackbarService: SnackbarService,\r\n        protected location: Location,\r\n        protected lockService: LockService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected documentService: DocumentService,\r\n        protected securityService: SecurityService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.charterId = this.route.snapshot.params['charterId'];\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'Physicals')) {\r\n                this.tradeClosePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CloseTrade');\r\n            }\r\n        });\r\n        const documentType = 76;\r\n        this.documentService.getTemplates(documentType, 'Charters').subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n        });\r\n    }\r\n\r\n    onCopyButtonClicked() {\r\n        this.router.navigate(['/' + this.company + '/execution/charter/new', this.charterId]);\r\n    }\r\n    OnReportClick(data: any) {\r\n\r\n        const openTradepnlReportDialog = this.dialog.open(GenericReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: data.name,\r\n                reportPath: data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n    onAssignButtonClicked() {\r\n        this.router.navigate(['/' + this.company + '/execution/charter/assignment', this.charterId]);\r\n\r\n    }\r\n    onDeleteButtonClicked() {\r\n\r\n        this.lockService.isLockedCharter(this.charterId).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n\r\n                this.lockService.lockCharter(this.charterId, LockFunctionalContext.CharterDeletion).pipe(\r\n                    takeUntil(this.destroy$),\r\n                )\r\n                    .subscribe(\r\n                        (data) => {\r\n                            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'Charter Deletion',\r\n                                    text: 'Deleting a charter is permanent. Do you wish to proceed?',\r\n                                    okButton: 'Delete anyway',\r\n                                    cancelButton: 'Cancel',\r\n                                },\r\n                            });\r\n                            confirmDialog.afterClosed().subscribe(\r\n                                (answer) => {\r\n                                    if (answer) {\r\n                                        this.executionService.getSectionsAssignedToCharter(this.charterId).pipe(\r\n                                            map((data) => {\r\n                                                this.sectionsAssigned = data.value;\r\n                                                if (this.sectionsAssigned && this.sectionsAssigned.length > 0) {\r\n                                                    this.snackbarService.informationSnackBar('Charter cannot be deleted as it has allocated/assigned contracts');\r\n                                                } else {\r\n                                                    this.deleteCharterPermanantly();\r\n                                                }\r\n                                            }))\r\n                                            .subscribe();\r\n                                    }\r\n                                });\r\n                        },\r\n                        (err) => {\r\n                            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'Lock',\r\n                                    text: err.error.detail,\r\n                                    okButton: 'Got it',\r\n                                },\r\n                            });\r\n                        });\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n    goToChartersList() {\r\n        this.router.navigate(['/' + this.company + '/execution/charter']);\r\n    }\r\n\r\n    onPreviousPageNavigation() {\r\n        this.location.back();\r\n    }\r\n\r\n    onSaveCharterClicked() {\r\n        this.charterSaveAction.emit();\r\n    }\r\n\r\n    allocateDeallocate() {\r\n        this.router.navigate(['/' + this.company + '/execution/charter/allocateDeallocate', this.charterId]);\r\n    }\r\n\r\n    onSeeDocumentButtonClicked() {\r\n        this.menuDisable = true;\r\n        this.router.navigate(\r\n            [this.company + '/execution/document/list/', 'charter', this.charterId],\r\n        );\r\n    }\r\n\r\n    onViewPnLButtonClicked() {\r\n        const openPnlReportDialog = this.dialog.open(CharterPnlReportComponent, {\r\n            data:\r\n            {\r\n                charterId: this.charterId,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n\r\n    onViewCharterReportButtonClicked() {\r\n        const openCharterReportDialog = this.dialog.open(CharterReportComponent, {\r\n            data:\r\n            {\r\n                charterId: this.charterId,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n    deleteCharterPermanantly() {\r\n        this.executionService.deleteCharter(this.charterId).subscribe(() => {\r\n            this.snackbarService.informationSnackBar('Charter deleted successfully');\r\n            this.goToChartersList();\r\n        });\r\n        if (!this.menuDisable) {\r\n            this.lockService.unlockCharter(\r\n                this.charterId, LockFunctionalContext.CharterDeletion)\r\n                .pipe(takeUntil(this.destroy$)).subscribe();\r\n        }\r\n    }\r\n\r\n    onOpenButtonClicked() {\r\n        this.openCharterSubject.next();\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.closeCharterSubject.next();\r\n    }\r\n\r\n    updateCharterMenu(charterStatusId: number) {\r\n        this.charterStatus = CharterStatus[charterStatusId].toString();\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h2>Charter P&L Report</h2>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<div class=\\\"report-container-full-content\\\">\\r\\n    <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                             [reportUrl]=\\\"reportPath\\\"\\r\\n                             [parameters]=\\\"parameters\\\"\\r\\n                             #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-pnl-report',\r\n    templateUrl: './charter-pnl-report.component.html',\r\n    styleUrls: ['./charter-pnl-report.component.scss'],\r\n})\r\nexport class CharterPnlReportComponent implements OnInit {\r\n\r\n    company: string;\r\n    parameters: any[] = [];\r\n    charterId: number;\r\n    dialogData: {\r\n        charterId: number;\r\n    };\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/PnL/PnL_TradeCharter';\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<CharterPnlReportComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { charterId: number },\r\n        protected companyManager: CompanyManagerService,\r\n    ) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.charterId = Number(this.dialogData.charterId);\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.GenerateReport();\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n    GenerateReport() {\r\n        this.parameters = [\r\n            { name: 'CompanyID', value: this.company },\r\n            { name: 'CharterId', value: this.charterId },\r\n        ];\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h2>Charter Report</h2>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\">\\r\\n    <mat-card class=\\\"database-selection\\\"\\r\\n              fxFlex=\\\"45\\\">\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h2>Database Selection</h2>\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content fxLayoutGap=\\\"5px\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <atlas-dropdown-select fxFlex='30%'\\r\\n                                       label=\\\"Snapshot\\\"\\r\\n                                       [fieldControl]=\\\"charterSnapshotCtrl\\\"\\r\\n                                       isEditable=true\\r\\n                                       [options]=\\\"snapshotList\\\"\\r\\n                                       displayProperty=\\\"freezeDate\\\"\\r\\n                                       [selectProperties]=\\\"['freezeDate']\\\">\\r\\n                </atlas-dropdown-select>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     class=\\\"include-closed-trades\\\">\\r\\n                    <span fxFlex='50%'></span>\\r\\n                    <span fxLayoutAlign=\\\"right center\\\">\\r\\n                        <mat-checkbox [formControl]=\\\"includeClosedTradesCtrl\\\"\\r\\n                                      (change)=\\\"onIncludeClosedTradesChanged($event)\\\">Include closed trades\\r\\n                        </mat-checkbox>\\r\\n                    </span>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"end center\\\">\\r\\n    <button mat-raised-button\\r\\n            class=\\\"generate-report-button\\\"\\r\\n            (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n</div>\\r\\n<div class=\\\"report-container\\\">\\r\\n    <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                             [reportUrl]=\\\"reportPath\\\"\\r\\n                             [parameters]=\\\"parameters\\\"\\r\\n                             #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n</div>\"","module.exports = \".report-container {\\n  height: 50%; }\\n\"","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCheckboxChange } from '@angular/material';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Freeze } from '../../../../../shared/entities/freeze.entity';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { FreezeService } from '../../../../../shared/services/http-services/freeze.service';\r\nimport { nameof } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-report',\r\n    templateUrl: './charter-report.component.html',\r\n    styleUrls: ['./charter-report.component.scss'],\r\n})\r\nexport class CharterReportComponent implements OnInit {\r\n\r\n    charterSnapshotCtrl = new FormControl();\r\n    snapshotList: FreezeDisplayView[] = [];\r\n    includeClosedTradesCtrl = new AtlasFormControl('includeClosedTradesCtrl');\r\n    currentSnapshot = new FreezeDisplayView(-1, 'CURRENT');\r\n    charterReportFormGroup: FormGroup;\r\n    company: string;\r\n    closedTrades: boolean = false;\r\n    parameters: any[] = [];\r\n    charterId: number;\r\n    dialogData: {\r\n        charterId: number;\r\n    };\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/Charter/Charter';\r\n    destroy$ = new Subject();\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<CharterReportComponent>,\r\n        private freezeService: FreezeService,\r\n        private formBuilder: FormBuilder,\r\n        @Inject(MAT_DIALOG_DATA) public data: { charterId: number },\r\n        protected companyManager: CompanyManagerService,\r\n    ) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.charterId = Number(this.dialogData.charterId);\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.loadSnapshots();\r\n    }\r\n\r\n    initializeForm() {\r\n        this.charterReportFormGroup = this.formBuilder.group({\r\n            charterSnapshotCtrl: this.charterSnapshotCtrl,\r\n            includeClosedTradesCtrl: this.includeClosedTradesCtrl,\r\n        });\r\n\r\n        this.setValidators();\r\n        return this.charterReportFormGroup;\r\n    }\r\n\r\n    setValidators() {\r\n        this.charterSnapshotCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(\r\n                this.snapshotList,\r\n                nameof<FreezeDisplayView>('dataVersionId'),\r\n            ),\r\n            Validators.required,\r\n        ]));\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate));\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.snapshotList = snapshots;\r\n            this.snapshotList.unshift(this.currentSnapshot);\r\n            if (snapshots.length > 0) {\r\n                this.charterSnapshotCtrl.setValue(snapshots[0]);\r\n            }\r\n            this.initializeForm();\r\n        });\r\n    }\r\n\r\n    onIncludeClosedTradesChanged(event: MatCheckboxChange) {\r\n        this.closedTrades = event.checked;\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        let snapshotId: number;\r\n        const snapShotvalue = this.charterSnapshotCtrl.value as FreezeDisplayView;\r\n        (snapShotvalue) ? snapshotId = snapShotvalue.dataVersionId : snapshotId = null;\r\n        const iIncludeClosedTrades = this.closedTrades ? 1 : 0;\r\n        this.parameters = [\r\n            { name: 'Company', value: this.company },\r\n            { name: 'CharterId', value: this.charterId },\r\n            { name: 'iIncludeClosedTrades', value: iIncludeClosedTrades },\r\n        ];\r\n        if (snapshotId !== -1) {\r\n            this.parameters.push({ name: 'Database', value: snapshotId });\r\n        }\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"section-light-box lightbox-width\\\">\\r\\n    <h1>De-Assignment</h1>\\r\\n    <div *ngIf=\\\"isTopCardVisible\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutGap=\\\"2%\\\"\\r\\n             fxLayoutAlign=\\\"start stretch\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxFlex=\\\"4%\\\">\\r\\n                <mat-icon class=\\\"icon-padding title-icon\\\">warning</mat-icon>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"center start\\\"\\r\\n                 fxFlex=\\\"60%\\\">\\r\\n                <h2 class=\\\"no-margin warning-title\\\"> Some contracts can't be de-assigned </h2>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"full-invoiced-contract-list\\\">\\r\\n            <p *ngFor=\\\"let assigned of fullyInvoiceContract\\\">\\r\\n                {{assigned.contractLabel}} : {{assigned.reasonForDeassignment}}\\r\\n            </p>\\r\\n        </div>\\r\\n        <mat-divider></mat-divider>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"isBottomCardVisible\\\">\\r\\n        <p>\\r\\n            The following contracts will be de-assigned. Unselect the ones for which you want to keep traffic\\r\\n            details.\\r\\n        </p>\\r\\n        <mat-chip-list multiple>\\r\\n            <mat-chip *ngFor=\\\"let assigned of model.assignedSections\\\"\\r\\n                      [selected]=\\\"assigned.removeSectionTrafficInfo\\\"\\r\\n                      (click)=\\\"onSelectedContractClicked(assigned)\\\">\\r\\n                <mat-icon>{{ assigned.removeSectionTrafficInfo ? 'check_circle' : 'panorama_fish_eye'}}</mat-icon>\\r\\n                {{assigned.contractLabel}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between end\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">discard</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDeassignButtonClicked()\\\"\\r\\n                *ngIf=\\\"isBottomCardVisible\\\">deassign contracts</button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".lightbox-width {\\n  width: 1000px; }\\n\\n.mat-divider {\\n  margin: 8px 0; }\\n\\n.icon-padding {\\n  background-color: #ec8d2d;\\n  border-radius: 50%;\\n  padding: 8px;\\n  height: 24px;\\n  width: 24px; }\\n\\n.icon-padding.mat-icon {\\n    color: white; }\\n\\n.full-invoiced-contract-list {\\n  margin: 8px 0; }\\n\\nh1 {\\n  margin-top: 0; }\\n\"","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { AssignedSectionView } from '../../../../../shared/models/assigned-section-display-view';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-deassign-section-dialog',\r\n    templateUrl: './deassign-section-dialog.component.html',\r\n    styleUrls: ['./deassign-section-dialog.component.scss'],\r\n})\r\nexport class DeassignSectionDialogComponent implements OnInit, OnDestroy {\r\n    model: Charter;\r\n\r\n    isTopCardVisible: boolean = true;\r\n    isBottomCardVisible: boolean = true;\r\n    removeSectionSubscription: Subscription;\r\n    fullyInvoiceContract: AssignedSectionView[];\r\n    destroy$ = new Subject();\r\n\r\n    constructor(private snackbarService: SnackbarService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        protected dialog: MatDialog,\r\n        protected lockService: LockService,\r\n        public thisDialogRef: MatDialogRef<DeassignSectionDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {\r\n        this.model = data.result;\r\n        this.fullyInvoiceContract = data.fullyInvoiceContract;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.fullyInvoiceContract.length > 0 ? this.isTopCardVisible = true : this.isTopCardVisible = false;\r\n        this.model.assignedSections.length > 0 ? this.isBottomCardVisible = true : this.isBottomCardVisible = false;\r\n        this.model.assignedSections.forEach((element) => {\r\n            element.removeSectionTrafficInfo = true;\r\n        });\r\n    }\r\n\r\n    onSelectedContractClicked(section: AssignedSection) {\r\n        const sectionFiltered: AssignedSection = this.model.assignedSections.find((sec) =>\r\n            sec.sectionId === section.sectionId);\r\n        if (sectionFiltered) {\r\n            this.model.assignedSections.find((sec) =>\r\n                sec.sectionId === section.sectionId).removeSectionTrafficInfo = !section.removeSectionTrafficInfo;\r\n        }\r\n    }\r\n\r\n    onDeassignButtonClicked() {\r\n\r\n        let sectionList = this.model.assignedSections.map((section) => Number(section.sectionId));\r\n\r\n        this.model.assignedSections.forEach((assignedSection) => {\r\n            const allocatedSection = this.model.assignedSections.filter((sec) => sec.allocatedTo === assignedSection.contractLabel);\r\n            this.lockService.isLockedContract(assignedSection.sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                if (lock.isLocked) {\r\n                    this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Lock',\r\n                            text: lock.message,\r\n                            okButton: 'Got it',\r\n                        },\r\n                    });\r\n                    sectionList = sectionList.filter((id) => id !== assignedSection.sectionId);\r\n                    if (allocatedSection && allocatedSection.length > 0) {\r\n                        sectionList = sectionList.filter((id) => id !== allocatedSection[0].sectionId);\r\n                    }\r\n                } else if (allocatedSection && allocatedSection.length > 0) {\r\n                    this.lockService.isLockedContract(allocatedSection[0].sectionId)\r\n                        .pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                            if (lock.isLocked) {\r\n                                this.dialog.open(ConfirmationDialogComponent, {\r\n                                    data: {\r\n                                        title: 'Lock',\r\n                                        text: lock.message,\r\n                                        okButton: 'Got it',\r\n                                    },\r\n                                });\r\n                                sectionList = sectionList.filter((id) => id !== allocatedSection[0].sectionId);\r\n                            } else {\r\n                                this.removeSectionSubscription = this.executionService\r\n                                    .removeSectionFromCharter(this.model.charterId, [assignedSection.sectionId])\r\n                                    .subscribe(() => {\r\n                                        this.executionService.updateCharter(this.model, true)\r\n                                            .subscribe(() => {\r\n                                                this.snackbarService.informationSnackBar('Section has been de-assigned.');\r\n                                                this.thisDialogRef.close(null);\r\n                                            });\r\n                                    });\r\n                            }\r\n                        });\r\n                } else {\r\n\r\n                    this.removeSectionSubscription = this.executionService\r\n                        .removeSectionFromCharter(this.model.charterId, [assignedSection.sectionId])\r\n                        .subscribe(\r\n                            () => {\r\n                                this.executionService.updateCharter(this.model, true)\r\n                                    .subscribe(\r\n                                        () => {\r\n                                            this.snackbarService.informationSnackBar('Section has been de-assigned.');\r\n                                            this.thisDialogRef.close(null);\r\n                                        },\r\n                                        (error) => {\r\n                                            console.error(error);\r\n                                            this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                                        });\r\n                            },\r\n                            (error) => {\r\n                                console.error(error);\r\n                                this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                                this.thisDialogRef.close(null);\r\n                            });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close(null);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.removeSectionSubscription) {\r\n            this.removeSectionSubscription.unsubscribe();\r\n        }\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Main Information</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content fxLayout=\\\"column\\\"\\r\\n                      fxLayoutGap=\\\"15px\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"29%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Charter Reference\\\"\\r\\n                       [formControl]=\\\"charterRefCntrl\\\"\\r\\n                       class=\\\"charter-input-fields\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-hint class=\\\"charter-required-fields\\\"\\r\\n                          *ngIf=isCreateOrEdit>Required*</mat-hint>\\r\\n                <mat-icon class=\\\"validIcon\\\"\\r\\n                          matSuffix\\r\\n                          *ngIf=\\\"charterRefCntrl.valid\\\">check_circle </mat-icon>\\r\\n                <mat-icon class=\\\"errorIcon\\\"\\r\\n                          matSuffix\\r\\n                          *ngIf=\\\"charterRefCntrl.hasError('required') && (charterRefCntrl.touched  || showErrorIcon)\\\">\\r\\n                    error\\r\\n                </mat-icon>\\r\\n                <mat-error *ngIf=\\\"charterRefCntrl.hasError('required')\\\">\\r\\n                    Required*\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"charterRefCntrl.hasError('pattern')\\\">\\r\\n                    No special character except \\\".\\\"\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"charterRefCntrl.hasError('maxlength')\\\">\\r\\n                    More than 15 char not allowed\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"59%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Charter Description\\\"\\r\\n                       [formControl]=\\\"charterDescCntrl\\\"\\r\\n                       class=\\\"charter-input-fields\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-icon class=\\\"validIcon\\\"\\r\\n                          matSuffix\\r\\n                          *ngIf=\\\"charterDescCntrl.valid && charterDescCntrl.value\\\">check_circle</mat-icon>\\r\\n                <mat-error *ngIf=\\\"charterDescCntrl.hasError('maxlength')\\\">\\r\\n                    More than 60 char not allowed\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                     class=\\\"contextual-search-for-control\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterMgrCntrl\\\"\\r\\n                                                     [options]=\\\"filteredCharterManagers\\\"\\r\\n                                                     label=\\\"Charter Manager\\\"\\r\\n                                                     displayProperty=\\\"displayName\\\"\\r\\n                                                     [selectProperties]=\\\"['userId','displayName']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Manager\\\"\\r\\n                                                     gridId=\\\"charterManagerGrid\\\"\\r\\n                                                     [dataLoader]=\\\"charterManagerDataLoader\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n            <atlas-masterdata-user-preferences-input fxFlex=\\\"60%\\\"\\r\\n                                                     class=\\\"contextual-search-for-vessel\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterVesselCtrl\\\"\\r\\n                                                     [options]=\\\"filteredVessels\\\"\\r\\n                                                     label=\\\"Vessel\\\"\\r\\n                                                     displayProperty=\\\"vesselName\\\"\\r\\n                                                     [selectProperties]=\\\"['vesselName','flag','built']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Vessel\\\"\\r\\n                                                     gridId=\\\"vesselsGrid\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                     class=\\\"contextual-search-for-control\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterTransportCntrl\\\"\\r\\n                                                     [options]=\\\"filteredTransports\\\"\\r\\n                                                     label=\\\"KPI Transport Type\\\"\\r\\n                                                     displayProperty=\\\"transportTypeCode\\\"\\r\\n                                                     [selectProperties]=\\\"['transportTypeCode']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Transport\\\"\\r\\n                                                     gridId=\\\"transportTypeGrid\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".contextual-search-for-vessel {\\n  width: 70%; }\\n\\n.contextual-search-for-control {\\n  width: 30%; }\\n\\n.charter-required-fields {\\n  color: #00a9c6; }\\n\\n.charter-input-fields {\\n  width: 80%; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { TransportType } from '../../../../../shared/entities/transport-type.entity';\r\nimport { User } from '../../../../../shared/entities/user.entity';\r\nimport { Vessel } from '../../../../../shared/entities/vessel.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { CharterManagerDataLoader } from './../../../../../shared/services/execution/charter-manager-data-loader';\r\nimport { UserIdentityService } from './../../../../../shared/services/http-services/user-identity.service';\r\nimport { SnackbarService } from './../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-main-information-form-component',\r\n    templateUrl: './main-information-form-component.component.html',\r\n    styleUrls: ['./main-information-form-component.component.scss'],\r\n    providers: [CharterManagerDataLoader],\r\n})\r\nexport class MainInformationFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Input() isCreateOrEdit: boolean = true;\r\n\r\n    isFormControlRequired: Map<string, boolean> = new Map<string, boolean>();\r\n\r\n    charterVesselCtrl = new AtlasFormControl('charterVesselCtrl');\r\n    charterRefCntrl = new AtlasFormControl('charterRefCntrl');\r\n    charterDescCntrl = new AtlasFormControl('charterDescCntrl');\r\n    charterMgrCntrl = new AtlasFormControl('charterMgrCntrl');\r\n    charterTransportCntrl = new AtlasFormControl('charterTransportCntrl');\r\n    showErrorIcon: boolean;\r\n    filteredVessels: Vessel[];\r\n    filteredTransports: TransportType[];\r\n    filteredCharterManagers: User[];\r\n    model: Charter;\r\n    charterManagerId: number;\r\n    vesselControl: Vessel;\r\n    transportControl: TransportType;\r\n    charterManagerControl: User;\r\n    masterdata: any;\r\n    charterReference: string;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected snackbarService: SnackbarService,\r\n        protected userIdentityService: UserIdentityService,\r\n        public charterManagerDataLoader: CharterManagerDataLoader,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.charterReference = this.route.snapshot.paramMap.get('ref');\r\n        this.filteredVessels = this.masterdata.vessels;\r\n        this.charterVesselCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredVessels =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.vessels,\r\n                    ['vesselName', 'flag', 'built']);\r\n        });\r\n\r\n        this.filteredTransports = this.masterdata.transportTypes;\r\n        this.charterTransportCntrl.valueChanges.subscribe((input) => {\r\n            this.filteredTransports =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.transportTypes,\r\n                    ['transportTypeCode']);\r\n        });\r\n\r\n        this.charterManagerDataLoader.getData().subscribe((charterManager) => {\r\n            this.filteredCharterManagers = charterManager;\r\n            if (this.isCreateOrEdit) {\r\n                this.setValidatorOnCharterManager();\r\n            }\r\n            if (this.charterManagerId) {\r\n                this.charterManagerControl = this.filteredCharterManagers.find((charterManagers) =>\r\n                    charterManagers.userId === this.charterManagerId);\r\n                this.charterMgrCntrl.patchValue(this.charterManagerControl);\r\n            }\r\n            this.charterMgrCntrl.valueChanges.subscribe((input) => {\r\n                this.filteredCharterManagers = this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    charterManager,\r\n                    ['userId', 'displayName'],\r\n                );\r\n            });\r\n\r\n        });\r\n\r\n        if (this.isCreateOrEdit) {\r\n            this.enableControl();\r\n            this.setValidators();\r\n            this.setCharterReference();\r\n        } else {\r\n            this.disableControl();\r\n        }\r\n    }\r\n\r\n    disableControl() {\r\n        this.charterVesselCtrl.disable();\r\n        this.charterRefCntrl.disable();\r\n        this.charterDescCntrl.disable();\r\n        this.charterMgrCntrl.disable();\r\n        this.charterTransportCntrl.disable();\r\n    }\r\n\r\n    enableControl() {\r\n        this.charterVesselCtrl.enable();\r\n        this.charterRefCntrl.enable();\r\n        this.charterDescCntrl.enable();\r\n        this.charterMgrCntrl.enable();\r\n        this.charterTransportCntrl.enable();\r\n    }\r\n\r\n    clearValueOfControl() {\r\n        this.charterVesselCtrl.patchValue('');\r\n        this.charterRefCntrl.patchValue('');\r\n        this.charterDescCntrl.patchValue('');\r\n        this.charterMgrCntrl.patchValue('');\r\n        this.charterTransportCntrl.patchValue('');\r\n    }\r\n\r\n    initForm(entity: Charter, isEdit: boolean = false) {\r\n        this.model = entity;\r\n        this.assignValues(entity, isEdit);\r\n        this.charterVesselCtrl.patchValue(this.vesselControl);\r\n        this.charterRefCntrl.patchValue(this.model.charterCode);\r\n        this.charterDescCntrl.patchValue(this.model.description);\r\n        this.charterMgrCntrl.patchValue(this.charterManagerControl ? this.charterManagerControl : '');\r\n        this.charterTransportCntrl.patchValue(this.transportControl);\r\n    }\r\n\r\n    assignValues(entity: Charter, isEdit: boolean = false) {\r\n        const charter = entity as Charter;\r\n        this.vesselControl = this.filteredVessels.find((vessel) => vessel.vesselName === charter.vesselCode);\r\n        this.charterManagerControl = this.filteredCharterManagers ?\r\n            this.filteredCharterManagers.find((charterManager) => charterManager.userId === charter.charterManagerId) : null;\r\n        this.transportControl = this.filteredTransports.find((transport) => transport.transportTypeCode === charter.transportTypeCode);\r\n        if (this.filteredCharterManagers) {\r\n            this.charterManagerControl = this.filteredCharterManagers.find((charterManager) =>\r\n                charterManager.userId === charter.charterManagerId);\r\n        } else {\r\n            this.charterManagerId = charter.charterManagerId;\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const charter = entity as Charter;\r\n\r\n        charter.vesselCode = this.charterVesselCtrl.value.vesselName;\r\n        charter.vesselId = this.charterVesselCtrl.value.vesselId;\r\n        charter.charterCode = this.charterRefCntrl.value;\r\n        const charterManager: User = this.charterMgrCntrl.value;\r\n        if (charterManager && charterManager.userId) {\r\n            charter.charterManagerId = charterManager.userId;\r\n        }\r\n        charter.description = this.charterDescCntrl.value;\r\n        const transport: TransportType = this.charterTransportCntrl.value;\r\n        charter.transportTypeCode = transport ? transport.transportTypeCode : '';\r\n\r\n        return charter;\r\n    }\r\n\r\n    setValidatorOnCharterManager() {\r\n        this.charterMgrCntrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.filteredCharterManagers,\r\n                    nameof<User>('displayName'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    setValidators() {\r\n        this.charterVesselCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.vessels,\r\n                    nameof<Vessel>('vesselName'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.charterDescCntrl.setValidators(Validators.maxLength(60));\r\n\r\n        this.charterTransportCntrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.masterdata.transportTypes,\r\n                    nameof<TransportType>('transportTypeCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.charterRefCntrl.setValidators(Validators.compose([\r\n            Validators.required,\r\n            Validators.maxLength(15),\r\n            Validators.pattern('^[a-zA-Z0-9.]*'),\r\n        ]));\r\n\r\n        this.isFormControlRequired[\r\n            'charterVesselCtrl'\r\n        ] = this.utilService.isRequired(this.charterVesselCtrl);\r\n        this.isFormControlRequired[\r\n            'charterTransportCntrl'\r\n        ] = this.utilService.isRequired(this.charterTransportCntrl);\r\n        this.isFormControlRequired[\r\n            'charterRefCntrl'\r\n        ] = this.utilService.isRequired(this.charterRefCntrl);\r\n\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n\r\n            charterVesselCtrl: this.charterVesselCtrl,\r\n            charterRefCntrl: this.charterRefCntrl,\r\n            charterDescCntrl: this.charterDescCntrl,\r\n            charterMgrCntrl: this.charterMgrCntrl,\r\n            charterTransportCntrl: this.charterTransportCntrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setCharterReference() {\r\n        if (this.charterReference != null) {\r\n            this.charterRefCntrl.patchValue(this.charterReference);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Internal Memorandum</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <mat-form-field fxFlex=\\\"100%\\\">\\r\\n            <textarea matInput\\r\\n                      rows=\\\"5\\\"\\r\\n                      maxlength=\\\"4000\\\"\\r\\n                      [formControl]=\\\"charterInternalMemorandumCntrl\\\"\\r\\n                      class=\\\"charter-input-fields\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-memo-form-component',\r\n    templateUrl: './memo-form-component.component.html',\r\n    styleUrls: ['./memo-form-component.component.scss'],\r\n})\r\nexport class MemoFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Input() isCreateOrEdit: boolean = true;\r\n\r\n    charterInternalMemorandumCntrl = new FormControl('');\r\n\r\n    constructor(protected formbuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isCreateOrEdit) {\r\n            this.enableControl();\r\n        } else {\r\n            this.disablControl();\r\n        }\r\n    }\r\n\r\n    clearValueOfControl() {\r\n        this.charterInternalMemorandumCntrl.patchValue('');\r\n    }\r\n\r\n    enableControl() {\r\n        this.charterInternalMemorandumCntrl.enable();\r\n    }\r\n\r\n    disablControl() {\r\n        this.charterInternalMemorandumCntrl.disable();\r\n    }\r\n\r\n    initForm(entity: Charter, isEdit: boolean = false) {\r\n        const model = entity;\r\n        this.charterInternalMemorandumCntrl.patchValue(model ? model.memo : '');\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formbuilder.group({\r\n            charterInternalMemorandumCntrl: this.charterInternalMemorandumCntrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: Charter): Charter {\r\n        const section = entity;\r\n        section.memo = this.charterInternalMemorandumCntrl.value;\r\n        return section;\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxFlex=\\\"50%\\\">\\r\\n        <atlas-masterdata-user-preferences-input tabindex=\\\"1\\\"\\r\\n                                                 class=\\\"contextual-search-for-control\\\"\\r\\n                                                 isEditable=\\\"true\\\"\\r\\n                                                 [fieldControl]=\\\"charterCtrl\\\"\\r\\n                                                 label=\\\"New Charter\\\"\\r\\n                                                 [options]=\\\"filteredCharters\\\"\\r\\n                                                 displayProperty=\\\"charterCode\\\"\\r\\n                                                 [selectProperties]=\\\"['charterCode','description']\\\"\\r\\n                                                 lightBoxTitle=\\\"Results for charters\\\"\\r\\n                                                 gridId=\\\"charterGrid\\\"\\r\\n                                                 [errorMap]=\\\"charterErrorMap\\\"\\r\\n                                                 (valueChange)='onCharterSelected($event)'\\r\\n                                                 (optionSelected)=\\\"onCharterSelected($event)\\\"\\r\\n                                                 isSearchBar=\\\"true\\\">\\r\\n        </atlas-masterdata-user-preferences-input>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n<div>\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div ag-grid=\\\"reassignOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width:80%; height: 80%;\\\">\\r\\n                <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"reassignContractGridRows\\\"\\r\\n                                 [columnDefs]=\\\"reassignGridCols\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 [enableColResize]=\\\"false\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                 rowSelection=\\\"multiple\\\"\\r\\n                                 [rowHeight]=32>\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\">\\r\\n            <button mat-button\\r\\n                    type=\\\"button\\\"\\r\\n                    (click)=\\\"onDiscardButtonClick()\\\">\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start end\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\">\\r\\n                <button mat-raised-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onSideNavSaveButtonClick()\\\">\\r\\n                    SAVE\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"::ng-deep .mat-form-field-suffix {\\n  z-index: 0 !important; }\\n\"","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService, nameof } from '../../../../../shared/services/util.service';\r\nimport { AssignedSectionView } from '../../../../../shared/models/assigned-section-display-view';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { CharterDisplayView } from '../../../../../shared/models/charter-display-view';\r\nimport { CharterDataLoader } from '../../../../../shared/services/execution/charter-data-loader';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { ReassignSectionDialogComponent } from '../reassign-section-dialog/reassign-section-dialog.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-reassign-contract-ag-grid',\r\n    templateUrl: './reassign-contract-ag-grid.component.html',\r\n    styleUrls: ['./reassign-contract-ag-grid.component.scss'],\r\n    providers: [CharterDataLoader],\r\n})\r\n\r\nexport class ReassignContractAgGridComponent extends BaseFormComponent implements OnInit {\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    reassignOptions: agGrid.GridOptions;\r\n    reassignGridCols: agGrid.ColDef[];\r\n    assignedContractGridColumns: agGrid.ColDef[];\r\n    reassignContractGridRows: any;\r\n    tooltipMessageOnQuantity: string;\r\n    charterCtrl = new AtlasFormControl('charter');\r\n    newCharterSelected: Charter;\r\n    masterdata: any;\r\n    charterId: number;\r\n    charter: Charter;\r\n    @Output() sideReassignValueNavOpened = new EventEmitter();\r\n    updatedata: AssignedSectionView[];\r\n    charters: Charter[];\r\n    filteredCharters: Charter[];\r\n    allCharters: Charter[];\r\n    tooltipRequiredMessage: string = 'The field should not be empty';\r\n    fullyInvoiceContract: AssignedSectionView[];\r\n    reAssignSectionSubscription: Subscription;\r\n    model: Charter;\r\n    sectionsAssigned: AssignedSectionView[];\r\n\r\n    charterErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required*')\r\n        .set('maxlength', 'More than 15 char(s) not allowed.')\r\n        .set('inDropdownList', 'Invalid entry. Charter not in the list.');\r\n\r\n    constructor(protected utilService: UtilService,\r\n        private snackbarService: SnackbarService,\r\n        private executionService: ExecutionService,\r\n        protected lockService: LockService,\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public charterDataLoader: CharterDataLoader,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initReassignCharterGridCols();\r\n        this.populateCharterList(this.charterId);\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.reassignOptions = params;\r\n        this.reassignOptions.columnDefs = this.reassignGridCols;\r\n        this.reassignOptions.columnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.reassignOptions.columnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    initReassignCharterGridCols() {\r\n        this.reassignGridCols = [\r\n            {\r\n                headerName: 'Contract Ref',\r\n                field: 'contractLabel',\r\n                colId: 'contractLabel',\r\n                minWidth: 200,\r\n                maxWidth: 180,\r\n            },\r\n            {\r\n                headerName: 'Intial Quantity',\r\n                field: 'originalQuantity',\r\n                colId: 'originalQuantity',\r\n                suppressToolPanel: false,\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Quantity to reassign',\r\n                field: 'reassignQuantity',\r\n                colId: 'reassignQuantity',\r\n                suppressToolPanel: true,\r\n                type: 'numericColumn',\r\n                editable: true,\r\n                hide: true,\r\n            },\r\n        ];\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.value > params.data.quantity) {\r\n            this.snackbarService.throwErrorSnackBar('Reassign Quantity cannot be more than Initial Quantity.');\r\n        }\r\n    }\r\n\r\n    reassignCharterGridRows(charter: Charter) {\r\n        if (charter.assignedSections) {\r\n            this.reassignContractGridRows = charter.assignedSections;\r\n            this.charter = charter;\r\n            this.reassignOptions.api.setRowData(this.reassignContractGridRows);\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.charterCtrl.patchValue('');\r\n                this.sideReassignValueNavOpened.emit(false);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    onCharterSelected(charter: Charter) {\r\n\r\n        this.charterCtrl.patchValue(charter);\r\n        this.newCharterSelected = charter;\r\n    }\r\n\r\n    populateCharterList(charterId) {\r\n\r\n        this.charterDataLoader.getData().subscribe((charters) => {\r\n            this.filteredCharters = charters.filter((charter) => charter.charterId !== Number(charterId));\r\n            this.allCharters = this.filteredCharters;\r\n            this.setValidators();\r\n        });\r\n        this.charterCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.allCharters,\r\n                ['charterCode'],\r\n            );\r\n        });\r\n    }\r\n\r\n    setValidators() {\r\n        this.charterCtrl.setValidators(Validators.compose([Validators.required, Validators.maxLength(15),\r\n        inDropdownListValidator(this.filteredCharters, nameof<Charter>('charterCode'))\r\n        ]));\r\n    }\r\n\r\n    getSelectedInvoicedRow() {\r\n        let assignedSections: AssignedSectionView[];\r\n        let allocatedSection: AssignedSectionView;\r\n        assignedSections = this.reassignContractGridRows;\r\n\r\n        assignedSections.forEach((element: AssignedSectionView) => {\r\n            if (element.contractType === ContractTypes.Sale && element.invoicingStatus === InvoicingStatus.Finalized) {\r\n                element.reasonForReassignment = 'Sales contract is 100% invoiced and cannot be reassigned';\r\n                element.isSaleFullyInvoiced = true;\r\n\r\n            }\r\n            else if (element.contractType === ContractTypes.Purchase && element.allocatedTo) {\r\n                allocatedSection = this.reassignContractGridRows.find((item: AssignedSectionView) => item.contractLabel === element.allocatedTo);\r\n                if (allocatedSection.invoicingStatus === InvoicingStatus.Finalized) {\r\n                    element.reasonForReassignment =\r\n                        'Purchase contract allocated to a Sales Contract which is 100% invoiced and cannot be reassigned';\r\n                    element.isSaleFullyInvoiced = true;\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        this.sectionsAssigned = assignedSections.filter((section: AssignedSectionView) =>\r\n            section.isSaleFullyInvoiced === false);\r\n        this.fullyInvoiceContract = assignedSections.filter((section: AssignedSectionView) =>\r\n            section.isSaleFullyInvoiced === true);\r\n    }\r\n\r\n    onSideNavSaveButtonClick() {\r\n        if (this.charterCtrl.valid) {\r\n            this.getSelectedInvoicedRow();\r\n            const result = this.sectionsAssigned;\r\n            const reAssignSectionDialog = this.dialog.open(ReassignSectionDialogComponent, {\r\n                data: { result, masterdata: this.masterdata, charter: this.charter, newCharterSelected: this.newCharterSelected, fullyInvoiceContract: this.fullyInvoiceContract },\r\n\r\n            });\r\n            reAssignSectionDialog.afterClosed().subscribe((charters: Charter) => {\r\n                if (ReassignSectionDialogComponent && result[0].isnavopen) {\r\n                    this.sideReassignValueNavOpened.emit(true);\r\n                }\r\n            });\r\n\r\n        }\r\n        else {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"section-light-box lightbox-width\\\">\\r\\n    <h1>Re-Assignment</h1>\\r\\n    <div *ngIf=\\\"isTopCardVisible\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutGap=\\\"2%\\\"\\r\\n             fxLayoutAlign=\\\"start stretch\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxFlex=\\\"4%\\\">\\r\\n                <mat-icon class=\\\"icon-padding title-icon\\\">warning</mat-icon>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"center start\\\"\\r\\n                 fxFlex=\\\"60%\\\">\\r\\n                <h2 class=\\\"no-margin warning-title\\\"> Some contracts can't be re-assigned </h2>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"full-invoiced-contract-list\\\">\\r\\n            <p *ngFor=\\\"let assigned of fullyInvoiceContract\\\">\\r\\n                {{assigned.contractLabel}} : {{assigned.reasonForReassignment}}\\r\\n            </p>\\r\\n        </div>\\r\\n        <mat-divider></mat-divider>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"isBottomCardVisible\\\">\\r\\n        <p>\\r\\n            The following contracts will be re-assigned. Unselect the ones for which you want to keep traffic\\r\\n            details.\\r\\n        </p>\\r\\n        <mat-chip-list multiple>\\r\\n            <mat-chip *ngFor=\\\"let assigned of assignedSections\\\"\\r\\n                      [selected]=\\\"assigned.removeSectionTrafficInfo\\\"\\r\\n                      (click)=\\\"onSelectedContractClicked(assigned)\\\">\\r\\n                <mat-icon>{{ assigned.removeSectionTrafficInfo ? 'check_circle' : 'panorama_fish_eye'}}</mat-icon>\\r\\n                {{assigned.contractLabel}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between end\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClick()\\\">discard</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onReassignButtonClicked()\\\"\\r\\n                *ngIf=\\\"isBottomCardVisible\\\">reassign contracts</button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".lightbox-width {\\n  width: 1000px; }\\n\\n.mat-divider {\\n  margin: 8px 0; }\\n\\n.icon-padding {\\n  background-color: #ec8d2d;\\n  border-radius: 50%;\\n  padding: 8px;\\n  height: 24px;\\n  width: 24px; }\\n\\n.icon-padding.mat-icon {\\n    color: white; }\\n\\n.full-invoiced-contract-list {\\n  margin: 8px 0; }\\n\\nh1 {\\n  margin-top: 0; }\\n\"","import { Component, OnInit, Inject, EventEmitter, Output, ViewChild } from '@angular/core';\r\nimport { AssignedSectionView } from '../../../../../shared/models/assigned-section-display-view';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { flattenStyles } from '@angular/platform-browser/src/dom/dom_renderer';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { Subscription } from 'rxjs';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { Section } from '../../../../../shared/entities/section.entity';\r\nimport { SectionTypes } from '../../../../../shared/enums/section-type.enum';\r\nimport { SplitCreateAndAllocateService } from '../../../../../shared/services/split-create-and-allocate.service';\r\nimport { TotalCardComponent } from '../total-card-component/total-card-component.component';\r\nimport { element } from '@angular/core/src/render3/instructions';\r\nimport { AssignedContractListFormComponent } from '../assigned-contract-list-form-component/assigned-contract-list-form-component.component';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'atlas-reassign-section-dialog',\r\n    templateUrl: './reassign-section-dialog.component.html',\r\n    styleUrls: ['./reassign-section-dialog.component.scss']\r\n})\r\n\r\nexport class ReassignSectionDialogComponent implements OnInit {\r\n    assignedSections: AssignedSectionView[];\r\n    assignedSectionsSplit: AssignedSectionView[] = [];\r\n    assignedSectionsFullQuantity: AssignedSectionView[] = [];\r\n    isTopCardVisible: boolean = false;\r\n    model: Charter;\r\n    isBottomCardVisible: boolean = true;\r\n    reAssignSectionSubscription: Subscription;\r\n    charterId: number;\r\n    charter: Charter;\r\n    newCharterSelected: Charter;\r\n    charterCtrl = new AtlasFormControl('charter');\r\n    sectionModel: any;\r\n    subscriptions: Subscription[] = [];\r\n    assignedContractLabels: string[] = [];\r\n    fullyInvoiceContract: AssignedSectionView[];\r\n\r\n    constructor(private snackbarService: SnackbarService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected dialog: MatDialog,\r\n        private executionService: ExecutionService,\r\n        private createSplitService: SplitCreateAndAllocateService,\r\n        protected tradingService: TradingService,\r\n        public thisDialogRef: MatDialogRef<ReassignSectionDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any) {\r\n        this.assignedSections = data.result;\r\n        this.charter = data.charter;\r\n        this.charterId = data.newCharterSelected.charterId;\r\n        this.newCharterSelected = data.newCharterSelected;\r\n        this.fullyInvoiceContract = data.fullyInvoiceContract;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.fullyInvoiceContract.length > 0 ? this.isTopCardVisible = true : this.isTopCardVisible = false;\r\n        this.assignedSections.length > 0 ? this.isBottomCardVisible = true : this.isBottomCardVisible = false;\r\n        this.assignedSections.forEach((element) => {\r\n            element.removeSectionTrafficInfo = true;\r\n        });\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.thisDialogRef.close(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSelectedContractClicked(section: AssignedSection) {\r\n        const sectionFiltered: AssignedSection = this.assignedSections.find((sec) =>\r\n            sec.sectionId === section.sectionId);\r\n        if (sectionFiltered) {\r\n            this.assignedSections.find((sec) =>\r\n                sec.sectionId === section.sectionId).removeSectionTrafficInfo = !section.removeSectionTrafficInfo;\r\n        }\r\n    }\r\n\r\n    fullyOrPartiallyReassignSections() {\r\n        if (this.assignedSectionsSplit.length > 0) {\r\n            this.createSplitService.createSplitOfAssignedSections(this.assignedSectionsSplit, this.charterId).then((data) => {\r\n                this.snackbarService.informationSnackBar('Splits have been created and reassigned to charter' + ' ' + this.newCharterSelected.charterCode);\r\n                this.thisDialogRef.close(null);\r\n            });\r\n        }\r\n        if (this.assignedSectionsFullQuantity.length > 0) {\r\n            this.fullyReassignSections();\r\n        }\r\n    }\r\n\r\n    fullyReassignSections() {\r\n        if (this.assignedSectionsFullQuantity.length > 0) {\r\n            this.charter.assignedSections = this.assignedSectionsFullQuantity;\r\n            this.reAssignSectionSubscription = this.executionService\r\n                .reAssignSectionToCharter(this.charter, this.newCharterSelected)\r\n                .subscribe((data) => {\r\n                    this.getAssignedContractLabels();\r\n                    this.thisDialogRef.close(null);\r\n                });\r\n        }\r\n    }\r\n\r\n    onReassignButtonClicked() {\r\n        this.assignedSections[0].isnavopen = true;\r\n        this.assignedSections.forEach((section) => {\r\n\r\n            if (section.reassignQuantity && section.reassignQuantity < section.quantity) {\r\n                section.quantity = Number(section.reassignQuantity);\r\n                this.assignedSectionsSplit.push(section);\r\n            }\r\n            else if (!section.reassignQuantity || section.reassignQuantity == null || section.reassignQuantity == section.quantity) {\r\n                this.assignedContractLabels.push(section.contractLabel);\r\n                this.assignedSectionsFullQuantity.push(section);\r\n            }\r\n        });\r\n        this.fullyReassignSections();\r\n    }\r\n\r\n    getAssignedContractLabels() {\r\n        let name: string = '';\r\n        this.assignedContractLabels.forEach((element) => {\r\n            name = name + element + ',';\r\n        });\r\n        this.snackbarService.informationSnackBar('Contracts' + ' ' + name + ' ' + 'have been reassigned to charter' + ' ' + this.newCharterSelected.charterCode);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Shipment</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterLoadLocationCntrl\\\"\\r\\n                                                     [options]=\\\"filteredLoadLocations\\\"\\r\\n                                                     label=\\\"Loading Location\\\"\\r\\n                                                     displayProperty=\\\"portCode\\\"\\r\\n                                                     [selectProperties]=\\\"['portCode','description','countryCode']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Port\\\"\\r\\n                                                     gridId=\\\"portsGrid\\\"\\r\\n                                                     (valueChange)='LoadingValueChanged($event)'\\r\\n                                                     (optionSelected)=\\\"onLoadingPortSelected($event)\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              [fieldControl]=\\\"charterLoadDescrCntrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Description'\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              [fieldControl]=\\\"charterLoadCntryCntrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Country'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n            <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"charterDiscLocationCntrl\\\"\\r\\n                                                     [options]=\\\"filteredDiscLocations\\\"\\r\\n                                                     label=\\\"Discharge Location\\\"\\r\\n                                                     displayProperty=\\\"portCode\\\"\\r\\n                                                     [selectProperties]=\\\"['portCode','description','countryCode']\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Port\\\"\\r\\n                                                     gridId=\\\"portsGrid\\\"\\r\\n                                                     (valueChange)='DischargeValueChanged($event)'\\r\\n                                                     (optionSelected)=\\\"onDischargePortSelected($event)\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              [fieldControl]=\\\"charterDiscDescrCntrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Description'\\\"\\r\\n                              class=\\\"charter-input-fields\\\">\\r\\n\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              [fieldControl]=\\\"charterDiscCntryCntrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Country'\\\"\\r\\n                              class=\\\"charter-input-fields\\\">\\r\\n\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       [max]=\\\"maxDate\\\"\\r\\n                       placeholder=\\\"Charter BL Date\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]=\\\"charterBLDateCntrl\\\"\\r\\n                       [matDatepicker]=\\\"charterDatePicker\\\"\\r\\n                       class=\\\"charter-input-fields\\\">\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"charterDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #charterDatePicker></mat-datepicker>\\r\\n                <mat-icon matSuffix\\r\\n                          class=\\\"validIcon\\\"\\r\\n                          *ngIf=\\\"charterBLDateCntrl.valid && (charterBLDateCntrl.value!==null)\\\">check_circle</mat-icon>\\r\\n                <mat-error *ngIf=\\\"charterBLDateCntrl.hasError('isDateValid')\\\">\\r\\n                    Cannot be After Today\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"BL Reference\\\"\\r\\n                       [formControl]=\\\"charterBLRefnCntrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       class=\\\"charter-input-fields\\\">\\r\\n                <mat-icon class=\\\"validIcon\\\"\\r\\n                          matSuffix\\r\\n                          *ngIf=\\\"charterBLRefnCntrl.valid && (charterBLRefnCntrl.value!==null && charterBLRefnCntrl.value)\\\">\\r\\n                    check_circle</mat-icon>\\r\\n                <mat-error *ngIf=\\\"charterBLRefnCntrl.hasError('maxlength')\\\">\\r\\n                    More than 20 char not allowed\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".contextual-search-for-control {\\n  width: 30%; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { Port } from '../../../../../shared/entities/port.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { nameof, UtilService } from \"../../../../../shared/services/util.service\";\r\nimport { isBeforeDate } from '../../../../../shared/validators/date-validators.validator';\r\n\r\n@Component({\r\n    selector: 'atlas-shipment-form-component',\r\n    templateUrl: './shipment-form-component.component.html',\r\n    styleUrls: ['./shipment-form-component.component.scss'],\r\n})\r\nexport class ShipmentFormComponent extends BaseFormComponent implements OnInit {\r\n    @Input() isCreateOrEdit: boolean = true;\r\n\r\n    isInputField = false;\r\n    charterLoadLocationCntrl = new AtlasFormControl('charterLoadLocationCntrl');\r\n    charterLoadDescrCntrl = new AtlasFormControl('charterLoadDescrCntrl');\r\n    charterLoadCntryCntrl = new AtlasFormControl('charterLoadCntryCntrl');\r\n    charterDiscLocationCntrl = new AtlasFormControl('charterDiscLocationCntrl');\r\n    charterDiscDescrCntrl = new AtlasFormControl('charterDiscDescrCntrl');\r\n    charterDiscCntryCntrl = new AtlasFormControl('charterDiscCntryCntrl');\r\n    charterBLDateCntrl = new FormControl();\r\n    charterBLRefnCntrl = new AtlasFormControl('charterBLRefnCntrl');\r\n\r\n    masterdata: any;\r\n    filteredDiscLocations: Port[];\r\n    filteredLoadLocations: Port[];\r\n\r\n    dischargeControl: Port;\r\n    loadingControl: Port;\r\n\r\n    maxDate = this.companyManager.getCurrentCompanyDate().toDate();\r\n    formGroup: FormGroup;\r\n    isFormControlRequired: Map<string, boolean> = new Map<string, boolean>();\r\n\r\n    constructor(public formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredLoadLocations = this.masterdata.ports;\r\n        this.charterLoadLocationCntrl.valueChanges.subscribe((input) => {\r\n            this.filteredLoadLocations =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.ports,\r\n                    ['portCode', 'description', 'countryCode']);\r\n        });\r\n\r\n        this.filteredDiscLocations = this.masterdata.ports;\r\n        this.charterDiscLocationCntrl.valueChanges.subscribe((input) => {\r\n            this.filteredDiscLocations =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.ports,\r\n                    ['portCode', 'description', 'countryCode']);\r\n        });\r\n\r\n        if (this.isCreateOrEdit) {\r\n            this.enableControl();\r\n            this.setValidators();\r\n        } else {\r\n            this.disableControl();\r\n        }\r\n\r\n    }\r\n\r\n    clearValueOfControl() {\r\n\r\n        this.charterLoadLocationCntrl.patchValue('');\r\n        this.charterLoadDescrCntrl.patchValue('');\r\n        this.charterLoadCntryCntrl.patchValue('');\r\n        this.charterDiscLocationCntrl.patchValue('');\r\n        this.charterDiscDescrCntrl.patchValue('');\r\n        this.charterDiscCntryCntrl.patchValue('');\r\n        this.charterBLDateCntrl.patchValue('');\r\n        this.charterBLRefnCntrl.patchValue('');\r\n    }\r\n\r\n    enableControl() {\r\n        this.charterLoadLocationCntrl.enable();\r\n        this.charterLoadDescrCntrl.enable();\r\n        this.charterLoadCntryCntrl.enable();\r\n        this.charterDiscLocationCntrl.enable();\r\n        this.charterDiscDescrCntrl.enable();\r\n        this.charterDiscCntryCntrl.enable();\r\n        this.charterBLDateCntrl.enable();\r\n        this.charterBLRefnCntrl.enable();\r\n    }\r\n\r\n    disableControl() {\r\n        this.charterLoadLocationCntrl.disable();\r\n        this.charterLoadDescrCntrl.disable();\r\n        this.charterLoadCntryCntrl.disable();\r\n        this.charterDiscLocationCntrl.disable();\r\n        this.charterDiscDescrCntrl.disable();\r\n        this.charterDiscCntryCntrl.disable();\r\n        this.charterBLDateCntrl.disable();\r\n        this.charterBLRefnCntrl.disable();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean = false) {\r\n        const model = entity as Charter;\r\n        this.assignValues(entity, isEdit);\r\n        this.charterLoadLocationCntrl.patchValue(this.loadingControl ? this.loadingControl : '');\r\n        this.loadLocationSelected(model.loadingLocationCode);\r\n        this.charterDiscLocationCntrl.patchValue(this.dischargeControl ? this.dischargeControl : '');\r\n        this.dischargeLocationsSelected(model.dischargeLocationCode);\r\n        this.charterBLDateCntrl.patchValue(model.blDate);\r\n        this.charterBLRefnCntrl.patchValue(model.blRef);\r\n    }\r\n\r\n    assignValues(entity: Charter, isEdit: boolean = false) {\r\n        const charter = entity as Charter;\r\n        this.loadingControl = this.filteredLoadLocations\r\n            .find((loadingLocationCode) => loadingLocationCode.portCode === charter.loadingLocationCode);\r\n        this.dischargeControl = this.filteredDiscLocations\r\n            .find(((dischargeLocationCode) => dischargeLocationCode.portCode === charter.dischargeLocationCode));\r\n    }\r\n\r\n    dischargeLocationsSelected(dischargeLocationCode: string) {\r\n        if (dischargeLocationCode !== null) {\r\n            const selectedLoc = this.masterdata.ports.find((port) => port.portCode.trim() === dischargeLocationCode.trim());\r\n            if (selectedLoc) {\r\n                this.charterDiscDescrCntrl.patchValue(selectedLoc.description);\r\n                this.charterDiscCntryCntrl.patchValue(selectedLoc.countryCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    loadLocationSelected(loadingLocationCode: string) {\r\n        if (loadingLocationCode !== null) {\r\n            const selectedLoc = this.masterdata.ports.find((port) => port.portCode.trim() === loadingLocationCode.trim());\r\n            if (selectedLoc) {\r\n                this.charterLoadCntryCntrl.patchValue(selectedLoc.countryCode);\r\n                this.charterLoadDescrCntrl.patchValue(selectedLoc.description);\r\n            }\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n\r\n        this.charterLoadLocationCntrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.ports,\r\n                    nameof<Port>('portCode'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.charterDiscLocationCntrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.ports,\r\n                    nameof<Port>('portCode'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.charterBLDateCntrl.setValidators(Validators.compose(\r\n            [isBeforeDate(this.companyManager.getCurrentCompanyDate(), true)\r\n                , Validators.maxLength(11)]));\r\n        this.charterBLRefnCntrl.setValidators(Validators.maxLength(20));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n\r\n            charterLoadLocationCntrl: this.charterLoadLocationCntrl,\r\n            charterLoadDescrCntrl: this.charterLoadDescrCntrl,\r\n            charterLoadCntryCntrl: this.charterLoadCntryCntrl,\r\n            charterDiscLocationCntrl: this.charterDiscLocationCntrl,\r\n            charterDiscDescrCntrl: this.charterDiscDescrCntrl,\r\n            charterDiscCntryCntrl: this.charterDiscCntryCntrl,\r\n            charterBLDateCntrl: this.charterBLDateCntrl,\r\n            charterBLRefnCntrl: this.charterBLRefnCntrl,\r\n\r\n        });\r\n\r\n        return super.getFormGroup();\r\n\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as Charter;\r\n\r\n        if (this.charterLoadLocationCntrl.value && this.charterLoadLocationCntrl.value.portCode !== '') {\r\n            section.loadingLocationCode = this.charterLoadLocationCntrl.value.portCode;\r\n        }\r\n        if (this.charterDiscLocationCntrl.value && this.charterDiscLocationCntrl.value.portCode !== '') {\r\n            section.dischargeLocationCode = this.charterDiscLocationCntrl.value.portCode;\r\n        }\r\n        section.blDate = this.charterBLDateCntrl.value;\r\n        section.blRef = this.charterBLRefnCntrl.value;\r\n\r\n        return section;\r\n    }\r\n\r\n    onDischargePortSelected(value: Port) {\r\n        const port = this.masterdata.ports.find(\r\n            (item) => item.portCode === value.portCode,\r\n        );\r\n        if (port) {\r\n            this.charterDiscDescrCntrl.patchValue(port.description);\r\n            this.charterDiscCntryCntrl.patchValue(port.countryCode);\r\n        }\r\n    }\r\n\r\n    onLoadingPortSelected(value: Port) {\r\n        const port = this.masterdata.ports.find(\r\n            (item) => item.portCode === value.portCode,\r\n        );\r\n        if (port) {\r\n            this.charterLoadDescrCntrl.patchValue(port.description);\r\n            this.charterLoadCntryCntrl.patchValue(port.countryCode);\r\n        }\r\n    }\r\n\r\n    LoadingValueChanged(value) {\r\n        this.charterLoadDescrCntrl.patchValue(value.description);\r\n        this.charterLoadCntryCntrl.patchValue(value.countryCode);\r\n    }\r\n\r\n    DischargeValueChanged(value) {\r\n        this.charterDiscDescrCntrl.patchValue(value.description);\r\n        this.charterDiscCntryCntrl.patchValue(value.countryCode);\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\"\\r\\n     class=\\\"total-card\\\">\\r\\n    <mat-card fxFlex=\\\"100%\\\"\\r\\n              class=\\\"charter-total\\\">\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h2>Total Card</h2>\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"1%\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"right start\\\">\\r\\n                    <h4>Purchase Total: </h4>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\">\\r\\n                    <h4>{{purchaseQuantity |number:'1.3-3'}}</h4>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"1%\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"right start\\\">\\r\\n                    <h4>Sales Total: </h4>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\">\\r\\n                    <h4>{{salesQuantity |number:'1.3-3'}}</h4>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \".total-card-text-color {\\n  color: black; }\\n\\n.total-card {\\n  height: 100%; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { map } from 'rxjs/operators';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\n\r\n@Component({\r\n    selector: 'atlas-total-card-component',\r\n    templateUrl: './total-card-component.component.html',\r\n    styleUrls: ['./total-card-component.component.scss'],\r\n})\r\nexport class TotalCardComponent extends BaseFormComponent implements OnInit {\r\n    @Input() isCreate: boolean = true;\r\n\r\n    charterPurchaseTotal: string;\r\n    charterSalesTotal: string;\r\n    charterId: number;\r\n    purchaseQuantity = 0;\r\n    salesQuantity = 0;\r\n    sectionsAssigned: AssignedSection[];\r\n    masterdata: MasterData;\r\n\r\n    constructor(protected formbuilder: FormBuilder, protected route: ActivatedRoute,\r\n        protected executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.charterId = this.route.snapshot.params['charterId'];\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formbuilder.group({\r\n            charterPurchaseTotal: this.charterPurchaseTotal,\r\n            charterSalesTotal: this.charterSalesTotal,\r\n\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    assignValueToControl(weightUnitId: number) {\r\n        const weightUnitForConversion = this.masterdata.weightUnits.find((weightUnit) => weightUnit.weightUnitId === weightUnitId);\r\n        this.executionService.getSectionsAssignedToCharter(this.charterId).pipe(\r\n            map((data) => {\r\n                this.sectionsAssigned = data.value;\r\n                this.sectionsAssigned.forEach((element) => {\r\n                    const weightCodeConversionForContract = this.masterdata.weightUnits.find((weightUnit) =>\r\n                        weightUnit.weightUnitId === element.weightUnitId);\r\n                    if (element.contractType === ContractTypes.Purchase) {\r\n                        this.purchaseQuantity += (element.quantity * weightCodeConversionForContract.conversionFactor)\r\n                            / weightUnitForConversion.conversionFactor;\r\n                    } else if (element.contractType === ContractTypes.Sale) {\r\n                        this.salesQuantity += (element.quantity * weightCodeConversionForContract.conversionFactor) /\r\n                            weightUnitForConversion.conversionFactor;\r\n                    }\r\n                });\r\n            }))\r\n            .subscribe();\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"charter-total mat-elevation-z1\\\">\\r\\n\\t<mat-card-content>\\r\\n\\t\\t<div fxLayout=\\\"row\\\"\\r\\n\\t\\t     fxLayoutGap=\\\"2%\\\"\\r\\n\\t\\t     fxLayoutAlign=\\\"start stretch\\\">\\r\\n\\t\\t\\t<div fxLayout=\\\"column\\\"\\r\\n\\t\\t\\t     fxLayoutAlign=\\\"center center\\\"\\r\\n\\t\\t\\t     fxFlex=\\\"4\\\">\\r\\n\\t\\t\\t\\t<mat-icon class=\\\"icon-padding title-icon\\\">{{icon}}</mat-icon>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div fxLayout=\\\"column\\\"\\r\\n\\t\\t\\t     fxLayoutAlign=\\\"center start\\\"\\r\\n\\t\\t\\t     fxFlex=\\\"60\\\">\\r\\n\\t\\t\\t\\t<h2 class=\\\"no-margin warning-title\\\">{{title}} </h2>\\r\\n\\t\\t\\t\\t<p class=\\\"no-margin\\\">{{message}}</p>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div *ngIf=\\\"isActionDisplayed\\\"\\r\\n\\t\\t\\t     fxLayout=\\\"row\\\"\\r\\n\\t\\t\\t     fxLayoutGap=\\\"2%\\\"\\r\\n\\t\\t\\t     fxLayoutAlign=\\\"end end\\\"\\r\\n\\t\\t\\t     fxFlex>\\r\\n\\t\\t\\t\\t<span class=\\\"fill-space\\\"></span>\\r\\n\\t\\t\\t\\t<button mat-button>Dismiss</button>\\r\\n\\t\\t\\t\\t<button mat-button>Action</button>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".mat-card {\\n  padding: 16px; }\\n\\n.warning-title {\\n  font-size: 14px; }\\n\\n.icon-padding {\\n  background-color: #ec8d2d;\\n  border-radius: 50%;\\n  padding: 8px;\\n  height: 24px;\\n  width: 24px; }\\n\\n.mat-icon {\\n  color: white; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'atlas-warning-component',\r\n    templateUrl: './warning-component.component.html',\r\n    styleUrls: ['./warning-component.component.scss'],\r\n})\r\nexport class WarningComponent implements OnInit {\r\n    @Input() icon: string;\r\n    @Input() title: string;\r\n    @Input() message: string;\r\n    @Input() isActionDisplayed: boolean = false;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"charterForm\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <main>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayout.md=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"space-around start\\\"\\r\\n                 class='charter-creation-margin'>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start left\\\"\\r\\n                     fxFlex=\\\"48\\\">\\r\\n                    <atlas-main-information-form-component #mainInfoComponent\\r\\n                                                           [isCreateOrEdit]=true>\\r\\n                    </atlas-main-information-form-component>\\r\\n                    <atlas-shipment-form-component #shipmentComponent\\r\\n                                                   [isCreateOrEdit]=true></atlas-shipment-form-component>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start right\\\"\\r\\n                     fxFlex=\\\"49\\\">\\r\\n                    <atlas-additional-information-form-component #additionalInfoComponent\\r\\n                                                                 [isCreateOrEdit]=true>\\r\\n                    </atlas-additional-information-form-component>\\r\\n                    <atlas-memo-form-component #memoComponent\\r\\n                                               [isCreateOrEdit]=true></atlas-memo-form-component>\\r\\n                </div>\\r\\n            </div>\\r\\n        </main>\\r\\n        <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                                      [fabType]=\\\"fabType\\\"\\r\\n                                      [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                      [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                                      (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n        </atlas-floating-action-button>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \".mat-table {\\n  overflow: auto; }\\n\\n.mat-card:not([class*=mat-elevation-z]) {\\n  box-shadow: none; }\\n\\n.summaryTable .mat-row:hover {\\n  background: none; }\\n\\n.mat-card:not([class*=mat-elevation-z]) {\\n  box-shadow: none; }\\n\\n.very-long-field {\\n  width: 100%; }\\n\\n.droplist ::ng-deep .mat-form-field-underline {\\n  display: none; }\\n\\n.droplist mat-select {\\n  border-width: 1px;\\n  border-style: solid;\\n  -o-border-image: initial;\\n     border-image: initial;\\n  border-radius: 1px;\\n  border-color: darkgray;\\n  text-rendering: auto;\\n  padding: 7px;\\n  padding-left: 5px; }\\n\\n.no-placeholder-animation ::ng-deep md-input-container.md-input-focused {\\n  display: none; }\\n\\n.mat-hint {\\n  color: red; }\\n\\n.padding-medium {\\n  padding: 20px 40px 20px 20px; }\\n\\n.wrap-content {\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.wrapping-div {\\n  flex: 1 1 auto; }\\n\\n.charter-creation-margin {\\n  margin-left: 24px;\\n  margin-right: 24px; }\\n\\n.circle-icon {\\n  background: #53C234;\\n  width: 32px;\\n  color: white !important;\\n  height: 32px;\\n  border-radius: 50%;\\n  text-align: center;\\n  padding: 5px;\\n  float: right;\\n  position: relative;\\n  top: -28px; }\\n\"","import { Location } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AssignedSection } from '../../../shared/entities/assigned-section.entity';\r\nimport { Charter } from '../../../shared/entities/charter.entity';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { UtilService } from './../../../shared/services/util.service';\r\nimport { AdditionalInformationFormComponent } from './components/additional-information-form-component/additional-information-form-component.component';\r\nimport { MainInformationFormComponent } from './components/main-information-form-component/main-information-form-component.component';\r\nimport { MemoFormComponent } from './components/memo-form-component/memo-form-component.component';\r\nimport { ShipmentFormComponent } from './components/shipment-form-component/shipment-form-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-creation-page',\r\n    templateUrl: './execution-charter-creation-page.component.html',\r\n    styleUrls: ['./execution-charter-creation-page.component.scss'],\r\n})\r\nexport class ExecutionCharterCreationPageComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('mainInfoComponent') mainInfoComponent: MainInformationFormComponent;\r\n    @ViewChild('additionalInfoComponent') additionalInfoComponent: AdditionalInformationFormComponent;\r\n    @ViewChild('shipmentComponent') shipmentComponent: ShipmentFormComponent;\r\n    @ViewChild('memoComponent') memoComponent: MemoFormComponent;\r\n    charterForm: FormGroup;\r\n\r\n    savingInProgress = false;\r\n    isClearClicked = false;\r\n    isSave: boolean = false;\r\n    model: Charter;\r\n    charters: Charter[];\r\n    charterId: number;\r\n    sectionModel: AssignedSection = new AssignedSection();\r\n    formComponents: BaseFormComponent[] = [];\r\n\r\n    // -- FAB Management\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        private cdr: ChangeDetectorRef,\r\n        protected formBuilder: FormBuilder,\r\n        private snackbarService: SnackbarService,\r\n        private router: Router,\r\n        private location: Location,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.titleService.setTitle('Charter Creation');\r\n\r\n        this.isClearClicked = false;\r\n\r\n        this.charterForm = this.formBuilder.group({\r\n            additionalInfoComponent: this.additionalInfoComponent.getFormGroup(),\r\n            mainInfoComponent: this.mainInfoComponent.getFormGroup(),\r\n            shipmentComponent: this.shipmentComponent.getFormGroup(),\r\n            memoComponent: this.memoComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(this.additionalInfoComponent, this.mainInfoComponent, this.memoComponent, this.shipmentComponent);\r\n        this.cdr.detectChanges();\r\n\r\n        this.charterId = Number(this.route.snapshot.paramMap.get('charterId'));\r\n        if (this.charterId > 0) {\r\n            this.getCharterDetails(this.charterId);\r\n        }\r\n\r\n        this.initFABActions();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.charterForm.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.charterForm.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    getCharterDetails(charterId: number) {\r\n        this.executionService.getCharterById(this.charterId)\r\n            .subscribe((data) => {\r\n                this.model = data;\r\n                this.model.charterCode = null;\r\n                this.formComponents.forEach((comp) => {\r\n                    comp.initForm(this.model);\r\n                });\r\n                this.snackbarService.informationSnackBar('Charter details copied successfully.');\r\n            });\r\n    }\r\n\r\n    cancelForm() {\r\n        this.isSave = true;\r\n        this.location.back();\r\n    }\r\n\r\n    submitForm() {\r\n        this.isSave = true;\r\n        this.utilService.updateFormGroupValidity(this.charterForm);\r\n        if (this.charterForm.valid) {\r\n            this.getCharterInfo();\r\n\r\n            this.executionService.findChartersByReference(this.model.charterCode)\r\n                .subscribe((data) => {\r\n                    this.charters = data.value.map((charter) => {\r\n                        return charter;\r\n                    });\r\n\r\n                    if (this.charters == null || this.charters.length === 0) {\r\n                        this.executionService.createCharter(this.model)\r\n                            .subscribe(\r\n                                (data) => {\r\n                                    this.snackbarService.informationSnackBar('Charter has been saved successfully.');\r\n                                    this.goToCharterView(data.charterId);\r\n                                },\r\n                                (error) => {\r\n                                    console.error(error);\r\n                                    this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                                },\r\n                                () => {\r\n                                    this.savingInProgress = false;\r\n                                });\r\n                    } else {\r\n                        this.snackbarService.informationSnackBar('Charter Reference already exist.');\r\n                        return;\r\n                    }\r\n\r\n                });\r\n        } else {\r\n            this.additionalInfoComponent.showErrorIcon = true;\r\n            this.mainInfoComponent.showErrorIcon = true;\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n        }\r\n    }\r\n\r\n    goToUserList() {\r\n        this.router.navigate(['/' + this.route.snapshot.paramMap.get('company') + '/execution/charter']);\r\n    }\r\n\r\n    goToCharterView(charterId: number) {\r\n        this.router.navigate(['/' + this.route.snapshot.paramMap.get('company') + '/execution/charter/details', charterId]);\r\n    }\r\n\r\n    getCharterInfo() {\r\n        this.model = new Charter();\r\n\r\n        this.formComponents.forEach((comp) => {\r\n            this.model = comp.populateEntity(this.model);\r\n        });\r\n\r\n    }\r\n\r\n    clearForm() {\r\n        this.mainInfoComponent.clearValueOfControl();\r\n        this.additionalInfoComponent.clearValueOfControl();\r\n        this.shipmentComponent.clearValueOfControl();\r\n        this.memoComponent.clearValueOfControl();\r\n    }\r\n\r\n    // For FAB\r\n    initFABActions() {\r\n        this.fabTitle = 'init FAB mini Creation';\r\n        this.fabType = FABType.MiniFAB;\r\n\r\n        const actionItemSave: FloatingActionButtonActions = {\r\n            icon: 'save',\r\n            text: 'Save',\r\n            action: 'save',\r\n            disabled: false,\r\n            index: 3,\r\n        };\r\n        const actionItemCancel: FloatingActionButtonActions = {\r\n            icon: 'keyboard_backspace',\r\n            text: 'Cancel',\r\n            action: 'cancel',\r\n            disabled: false,\r\n            index: 2,\r\n        };\r\n\r\n        this.fabMenuActions.push(actionItemSave);\r\n        this.fabMenuActions.push(actionItemCancel);\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'save': {\r\n                this.submitForm();\r\n                break;\r\n            }\r\n            case 'cancel': {\r\n                this.cancelForm();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"atr-charter-detail\\\">\\r\\n    <header class=\\\"header-background charter-detail\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <mat-card-title>Charter {{charterReference}}</mat-card-title>\\r\\n                <mat-chip-list>\\r\\n                    <mat-chip class=\\\"status-chip\\\"\\r\\n                              [ngClass]=\\\"charterStatus != 'Open' ? 'mat-error line-height-18' : 'mat-success'\\\"\\r\\n                              selected\\r\\n                              disabled>\\r\\n                        {{charterStatus}}\\r\\n                    </mat-chip>\\r\\n                </mat-chip-list>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\"\\r\\n                 class=\\\"charter-global-info\\\">\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Created By\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{createdBy}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{creationDate}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field *ngIf=\\\"modifiedBy\\\"\\r\\n                                fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Modified By\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{modifiedBy ? modifiedBy : ' '}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field *ngIf=\\\"modifiedDate\\\"\\r\\n                                fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{modifiedDate ? modifiedDate : ' '}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </header>\\r\\n\\r\\n    <atlas-charter-menu-bar-component #charterMenuBarComponent>\\r\\n    </atlas-charter-menu-bar-component>\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <main [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\">\\r\\n            <mat-tab-group class=\\\"bright-tab\\\">\\r\\n                <mat-tab label=\\\"Contracts\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"space-around\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"space-between\\\">\\r\\n                            <atlas-shipment-form-component #shipmentComponent\\r\\n                                                           [isCreateOrEdit]=false\\r\\n                                                           fxFlex=\\\"49\\\"></atlas-shipment-form-component>\\r\\n\\r\\n                            <atlas-total-card-component #totalCardComponent\\r\\n                                                        [isCreateOrEdit]=false\\r\\n                                                        fxFlex=\\\"49\\\"></atlas-total-card-component>\\r\\n                        </div>\\r\\n                        <atlas-assigned-contract-list-form-component (isContractAssigned)=\\\"onContractAssignedForCharter($event)\\\"\\r\\n                                                                     #assignSectionComponent>\\r\\n                        </atlas-assigned-contract-list-form-component>\\r\\n                    </div>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"General\\\">\\r\\n                    <div fxLayout=\\\"row wrap\\\"\\r\\n                         fxLayoutAlign=\\\"space-around start\\\">\\r\\n                        <!-- Left -->\\r\\n                        <div fxFlex=\\\"49\\\"\\r\\n                             fxFlex.lt-md=\\\"100\\\">\\r\\n                            <atlas-main-information-form-component #mainInfoComponent\\r\\n                                                                   [isCreateOrEdit]=false>\\r\\n                            </atlas-main-information-form-component>\\r\\n                        </div>\\r\\n                        <!-- Right -->\\r\\n                        <div fxFlex=\\\"49\\\"\\r\\n                             fxFlex.lt-md=\\\"100\\\">\\r\\n                            <atlas-additional-information-form-component #additionalInfoComponent\\r\\n                                                                         [isCreateOrEdit]=false>\\r\\n                            </atlas-additional-information-form-component>\\r\\n                            <atlas-memo-form-component #memoComponent\\r\\n                                                       [isCreateOrEdit]=false></atlas-memo-form-component>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-around start\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxFlex=\\\"98.5\\\">\\r\\n                            <atlas-warning-component #warningComponent\\r\\n                                                     *ngIf=\\\"warning && isContractAssignedToCharter\\\"\\r\\n                                                     title='You updated the charter without updating the assigned contracts.'\\r\\n                                                     message='To apply the modifications, you can switch to edit mode again.'\\r\\n                                                     icon='directions_boat'></atlas-warning-component>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </main>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </div>\\r\\n    <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                                  [fabType]=\\\"fabType\\\"\\r\\n                                  [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                  [isParentLoaded]=\\\"!isLoading\\\"\\r\\n                                  (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n    </atlas-floating-action-button>\\r\\n</div>\\r\\n\"","module.exports = \"label {\\n  font-weight: bold; }\\n\\n.mat-column-delete mat-icon {\\n  color: #007caa; }\\n\\natlas-shipment-form-component,\\natlas-total-card-component {\\n  width: 49%; }\\n\\n.header-background {\\n  min-height: 94px !important; }\\n\\n.header-content {\\n  padding: 16px 30px 0px !important; }\\n\\nheader .mat-card-title {\\n  font-size: 16px;\\n  margin-bottom: 0px; }\\n\\n.bottom-marge {\\n  margin-bottom: 6px; }\\n\\n.line-height-18 {\\n  line-height: 18px !important; }\\n\"","import { Location } from '@angular/common';\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AssignedSection } from '../../../shared/entities/assigned-section.entity';\r\nimport { Charter } from '../../../shared/entities/charter.entity';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { IsLocked } from '../../../shared/entities/is-locked.entity';\r\nimport { Section } from '../../../shared/entities/section.entity';\r\nimport { CharterStatus } from '../../../shared/enums/charter-status.enum';\r\nimport { ContractInvoiceType } from '../../../shared/enums/contract-invoice-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../shared/services/http-services/lock.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { AdditionalInformationFormComponent } from '../execution-charter-creation-page/components/additional-information-form-component/additional-information-form-component.component';\r\nimport { AssignedContractListFormComponent } from '../execution-charter-creation-page/components/assigned-contract-list-form-component/assigned-contract-list-form-component.component';\r\nimport { CharterMenuBarComponent } from '../execution-charter-creation-page/components/charter-menu-bar-component/charter-menu-bar-component.component';\r\nimport { MainInformationFormComponent } from '../execution-charter-creation-page/components/main-information-form-component/main-information-form-component.component';\r\nimport { MemoFormComponent } from '../execution-charter-creation-page/components/memo-form-component/memo-form-component.component';\r\nimport { ShipmentFormComponent } from '../execution-charter-creation-page/components/shipment-form-component/shipment-form-component.component';\r\nimport { TotalCardComponent } from '../execution-charter-creation-page/components/total-card-component/total-card-component.component';\r\nimport { WarningComponent } from '../execution-charter-creation-page/components/warning-component/warning-component.component';\r\nimport { CompanyManagerService } from './../../../core/services/company-manager.service';\r\nimport { InvoiceMarkingSearchResult } from './../../../shared/dtos/invoice-marking';\r\nimport { InvoicingStatus } from './../../../shared/enums/invoicing-status.enum';\r\nimport { PostingStatus } from './../../../shared/enums/posting-status.enum';\r\nimport { TradingService } from './../../../shared/services/http-services/trading.service';\r\nimport { TitleService } from './../../../shared/services/title.service';\r\nimport { CharterClosureStatus } from './../../../shared/enums/charter-closure-status.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-details',\r\n    templateUrl: './execution-charter-details.component.html',\r\n    styleUrls: ['./execution-charter-details.component.scss'],\r\n})\r\nexport class ExecutionCharterDetailsComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('mainInfoComponent') mainInfoComponent: MainInformationFormComponent;\r\n    @ViewChild('additionalInfoComponent') additionalInfoComponent: AdditionalInformationFormComponent;\r\n    @ViewChild('shipmentComponent') shipmentComponent: ShipmentFormComponent;\r\n    @ViewChild('memoComponent') memoComponent: MemoFormComponent;\r\n    @ViewChild('totalCardComponent') totalCardComponent: TotalCardComponent;\r\n    @ViewChild('assignSectionComponent') assignSectionComponent: AssignedContractListFormComponent;\r\n    @ViewChild('warningComponent') warningComponent: WarningComponent;\r\n    @ViewChild('charterMenuBarComponent') charterMenuBarComponent: CharterMenuBarComponent;\r\n    isCreate: boolean = false;\r\n    charterReference: string;\r\n    model: Charter;\r\n    isVisible: boolean;\r\n    company: string;\r\n    charterId: number;\r\n    creationDate: string;\r\n    createdBy: string;\r\n    modifiedDate: string;\r\n    modifiedBy: string;\r\n    sectionsAssigned: AssignedSection[];\r\n    warning: boolean = false;\r\n    isLoading = true;\r\n    isContractAssignedToCharter: boolean = false;\r\n    charterStatus: string;\r\n    dataVersionId: number;\r\n    childFlag: number = 0;\r\n    public response: Observable<any>;\r\n    defaultDate = 'Mon Jan 01 0001';\r\n    sectionToClose: any = new Array();\r\n    destroy$ = new Subject();\r\n\r\n    // -- FAB Management\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n\r\n    constructor(private route: ActivatedRoute, private executionService: ExecutionService, private router: Router,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog, private location: Location,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private titleService: TitleService,\r\n        protected lockService: LockService,\r\n        protected tradingService: TradingService,\r\n        protected companyManager: CompanyManagerService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.charterId = this.route.snapshot.params['charterId'];\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.executionService.getCharterById(this.charterId)\r\n            .subscribe((data) => {\r\n                this.model = data;\r\n                this.creationDate = data.creationDate.toDateString();\r\n                this.createdBy = data.createdBy;\r\n                this.modifiedDate = data.modifiedDate == null ? '' : data.modifiedDate.toDateString();\r\n                this.modifiedBy = data.modifiedBy;\r\n                this.charterReference = data.charterCode;\r\n                this.mainInfoComponent.assignValues(this.model);\r\n                this.mainInfoComponent.initForm(this.model);\r\n                this.totalCardComponent.assignValueToControl(this.model.weightUnitId);\r\n                this.additionalInfoComponent.assignValues(this.model);\r\n                this.additionalInfoComponent.initForm(this.model);\r\n\r\n                this.shipmentComponent.assignValues(this.model);\r\n                this.shipmentComponent.initForm(this.model);\r\n                this.memoComponent.initForm(this.model);\r\n                this.assignSectionComponent.initForm(this.model);\r\n                this.initFABActions();\r\n                this.isLoading = false;\r\n                this.titleService.setTitle(this.charterReference + ' - Charter View');\r\n                this.charterStatus = data.charterStatusId === CharterStatus.Open ?\r\n                    CharterStatus[CharterStatus.Open].toString() :\r\n                    CharterStatus[CharterStatus.Closed].toString();\r\n                this.updateCharterMenu(data.charterStatusId);\r\n            });\r\n\r\n        this.warning = this.route.snapshot.paramMap.get('warning') === 'true' ? true : false;\r\n\r\n        this.subscriptions.push(\r\n            this.charterMenuBarComponent.openCharterSubject.subscribe(() => {\r\n                this.onReopenCharterButtonClicked();\r\n            }),\r\n            this.charterMenuBarComponent.closeCharterSubject.subscribe(() => {\r\n                this.onCloseCharterButtonClicked();\r\n            }),\r\n        );\r\n\r\n    }\r\n\r\n    copyCharter() {\r\n        this.router.navigate(['/' + this.route.snapshot.paramMap.get('company') + '/execution/charter/new', this.charterId]);\r\n    }\r\n\r\n    editCharter() {\r\n        this.router.navigate(['/' + this.route.snapshot.paramMap.get('company') + '/execution/charter/edit', this.charterId]);\r\n    }\r\n\r\n    btnEditClick() {\r\n        this.isVisible = true;\r\n    }\r\n\r\n    btnCancelClick() {\r\n        this.location.back();\r\n\r\n    }\r\n\r\n    btnDiscardChange() {\r\n        this.isVisible = false;\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: '',\r\n                text: 'Do you want to discard the changes.',\r\n                okButton: 'Discard anyway',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n    }\r\n\r\n    deleteCharter() {\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Charter Deletion',\r\n                text: 'Deleting a charter is permanent. Do you wish to proceed?',\r\n                okButton: 'Delete anyway',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.executionService.deleteCharter(this.charterId).subscribe(() => {\r\n                    this.snackbarService.informationSnackBar('Charter deleted successfully');\r\n                    this.goToChartersList();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    goToChartersList() {\r\n        this.router.navigate(['/' + this.company + '/execution/charter']);\r\n    }\r\n\r\n    onContractAssignedForCharter(value: boolean) {\r\n        if (value === true) {\r\n            this.isContractAssignedToCharter = value;\r\n        }\r\n    }\r\n\r\n    updateCharterMenu(charterStatusId: number) {\r\n        this.charterMenuBarComponent.updateCharterMenu(charterStatusId);\r\n    }\r\n\r\n    async onCloseCharterButtonClicked() {\r\n        this.sectionToClose.length = 0;\r\n        this.sectionToClose = new Array();\r\n        const charterModelToClose: Charter = this.model;\r\n        const lockedTrades: any[] = charterModelToClose.sectionsAssigned.length > 0 ? await this.checkLockStatusForAssignedTrades(charterModelToClose.sectionsAssigned) : [];\r\n\r\n        if (lockedTrades !== null && lockedTrades.length > 0) {\r\n            let lockMessageCombined: string = '';\r\n            for (let i = 0; i < lockedTrades.length; i++) {\r\n                lockMessageCombined += lockedTrades[i].lockMessage + '<br/>';\r\n            }\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Trade(s) Locked',\r\n                    text: 'Not allowed. <br/>' + lockMessageCombined,\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else {\r\n            if (charterModelToClose.sectionsAssigned.length > 0) {\r\n                this.tradingService.\r\n                    getAssigedSectionDetailsToCloseCharter(charterModelToClose.sectionsAssigned.map((s) => s.sectionId)).subscribe((data) => {\r\n                        if (data && data.length > 0) {\r\n                            let closureValidaityStatusArray: any[] = new Array<any>();\r\n                            for (let i = 0; i < data.length; i++) {\r\n                                const validityStatus = this.checkSectionClosureValidity(data[i], data[i].invoices);\r\n                                if (validityStatus !== CharterClosureStatus.InvoiceNotFinalized\r\n                                    && validityStatus !== CharterClosureStatus.UnpostedInvoice\r\n                                    && validityStatus !== CharterClosureStatus.NoBlDateUnrelizedTrade) {\r\n                                    this.sectionToClose.push({\r\n                                        sectionId: charterModelToClose.sectionsAssigned[i].sectionId,\r\n                                        sectionCode: charterModelToClose.sectionsAssigned[i].contractLabel,\r\n                                    });\r\n                                }\r\n                                closureValidaityStatusArray.push({ status: validityStatus, contractLabel: data[i].contractSectionCode });\r\n                            }\r\n                            const closureDialog = this.displayPopUpForCharterClosure(closureValidaityStatusArray);\r\n                            const closureValidaityStatus = closureValidaityStatusArray.map(function (a) { return a.status });\r\n                            if (closureValidaityStatus.indexOf(CharterClosureStatus.InvoiceNotFinalized) === -1\r\n                                && closureValidaityStatus.indexOf(CharterClosureStatus.UnpostedInvoice) === -1\r\n                                && closureValidaityStatus.indexOf(CharterClosureStatus.NoBlDateUnrelizedTrade) === -1) {\r\n                                closureDialog.afterClosed().toPromise().then((answer) => {\r\n                                    if (answer) {\r\n                                        this.closeSections(this.sectionToClose, charterModelToClose);\r\n                                    } else {\r\n                                        this.sectionToClose.length = 0;\r\n                                        this.sectionToClose = new Array();\r\n                                    }\r\n                                });\r\n                            }\r\n                            else {\r\n                                this.sectionToClose.length = 0;\r\n                                this.sectionToClose = new Array();\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.closeCharter(charterModelToClose, this.sectionToClose);\r\n                        }\r\n                    });\r\n            }\r\n            else {\r\n                this.closeCharter(charterModelToClose, this.sectionToClose);\r\n            }\r\n        }\r\n    }\r\n\r\n    async onReopenCharterButtonClicked() {\r\n        const charterModelToClose: Charter = this.model;\r\n        const lockedTrades = await this.checkLockStatusForAssignedTrades(charterModelToClose.sectionsAssigned);\r\n        if (lockedTrades !== null && lockedTrades.length > 0) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Trade(s) Locked',\r\n                    text: 'Not allowed, ' + lockedTrades.map(function (a) { return a.lockMessage; }).toString(),\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else {\r\n            this.executionService.openCharter([charterModelToClose.charterId]).subscribe((ok) => {\r\n                if (ok) {\r\n                    if (charterModelToClose.sectionsAssigned.length > 0) {\r\n                        const sectionIdsToReopen = charterModelToClose.sectionsAssigned.map(function (a) { return a.sectionId; });\r\n                        this.tradingService.reOpenSection(sectionIdsToReopen)\r\n                            .subscribe((ok) => {\r\n                                if (ok) {\r\n                                    let title = 'Charter ' + charterModelToClose.charterCode + ' is now reopened.<br/>Trade ';\r\n                                    title += charterModelToClose.sectionsAssigned.map(function (a) { return a.contractLabel; }).toString();\r\n                                    title += charterModelToClose.sectionsAssigned.length > 1 ? ' are now reopened.' : ' is now reopened.';\r\n\r\n                                    this.dialog.open(ConfirmationDialogComponent, {\r\n                                        data: {\r\n                                            title: 'Charter Reopened',\r\n                                            text: title,\r\n                                            okButton: 'Ok',\r\n                                        },\r\n                                    }).afterClosed().subscribe((sucess) => {\r\n                                        if (sucess) {\r\n                                            this.router.navigate([this.companyManager.getCurrentCompanyId() +\r\n                                                '/execution/charter/details/' + this.charterId]);\r\n                                        }\r\n                                    })\r\n                                }\r\n                            });\r\n                    }\r\n                    else {\r\n                        let title = 'Charter ' + charterModelToClose.charterCode + ' is now reopened.';\r\n\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Success - Charter Reopened',\r\n                                text: title,\r\n                                okButton: 'Ok',\r\n                            },\r\n                        }).afterClosed().subscribe((sucess) => {\r\n                            if (sucess) {\r\n                                this.router.navigate([this.companyManager.getCurrentCompanyId() +\r\n                                    '/execution/charter/details/' + this.charterId]);\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private closeCharter(charter: Charter, sectionIToClose: any[]) {\r\n        this.executionService.closeCharter([charter.charterId])\r\n            .subscribe((ok) => {\r\n                if (ok) {\r\n                    let title = 'Charter ' + charter.charterCode + ' is now closed.';\r\n                    if (charter.sectionsAssigned.length > 0) {\r\n                        title += '<br/> Trade ';\r\n                        title += sectionIToClose.map(function (a) { return a.sectionCode; }).toString();\r\n                        title += sectionIToClose.length > 1 ? ' are now closed.' : ' is now closed.';\r\n                    }\r\n\r\n                    const closeInfoPopup = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Success - Charter Closed',\r\n                            text: title,\r\n                            okButton: 'Ok',\r\n                        },\r\n                    });\r\n                    closeInfoPopup.afterClosed().subscribe((answer) => {\r\n                        this.router.navigate([this.companyManager.getCurrentCompanyId() +\r\n                            '/execution/charter/details/' + charter.charterId]);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    private displayPopUpForCharterClosure(closureValidaityStatus: any[]): MatDialogRef<any> {\r\n        let confirmPopupData: any;\r\n        let popupText: string = '';\r\n        const blockerSections = closureValidaityStatus.filter((item) => item.status === CharterClosureStatus.NoBlDateUnrelizedTrade\r\n            || item.status === CharterClosureStatus.InvoiceNotFinalized\r\n            || item.status === CharterClosureStatus.UnpostedInvoice);\r\n\r\n        let groupStatusArray = {};\r\n\r\n        closureValidaityStatus.forEach(function (a) {\r\n            groupStatusArray[a.status] = groupStatusArray[a.status] || [];\r\n            groupStatusArray[a.status].push({ status: a.status, contractLabel: a.contractLabel });\r\n        });\r\n\r\n        if (blockerSections.length > 0) {\r\n            if (groupStatusArray[CharterClosureStatus.InvoiceNotFinalized] !== undefined\r\n                && groupStatusArray[CharterClosureStatus.InvoiceNotFinalized] !== null\r\n                && groupStatusArray[CharterClosureStatus.InvoiceNotFinalized].length > 0) {\r\n                popupText += groupStatusArray[CharterClosureStatus.InvoiceNotFinalized].map(function (x) { return x.contractLabel }).toString()\r\n                    + this.getpopupText(CharterClosureStatus.InvoiceNotFinalized)\r\n            }\r\n            if (groupStatusArray[CharterClosureStatus.UnpostedInvoice] !== undefined\r\n                && groupStatusArray[CharterClosureStatus.UnpostedInvoice] !== null\r\n                && groupStatusArray[CharterClosureStatus.UnpostedInvoice].length > 0) {\r\n                popupText += groupStatusArray[CharterClosureStatus.UnpostedInvoice].map(function (x) { return x.contractLabel }).toString()\r\n                    + this.getpopupText(CharterClosureStatus.UnpostedInvoice);\r\n            }\r\n            if (groupStatusArray[CharterClosureStatus.NoBlDateUnrelizedTrade] !== undefined\r\n                && groupStatusArray[CharterClosureStatus.NoBlDateUnrelizedTrade] !== null\r\n                && groupStatusArray[CharterClosureStatus.NoBlDateUnrelizedTrade].length > 0) {\r\n                popupText += groupStatusArray[CharterClosureStatus.NoBlDateUnrelizedTrade].map(function (x) { return x.contractLabel }).toString()\r\n                    + this.getpopupText(CharterClosureStatus.NoBlDateUnrelizedTrade)\r\n            }\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Blocking - Charter closure',\r\n                    text: popupText,\r\n                    okButton: 'Ok',\r\n                },\r\n            }\r\n        } else {\r\n            if (groupStatusArray[CharterClosureStatus.UninvoicedCosts] !== undefined\r\n                && groupStatusArray[CharterClosureStatus.UninvoicedCosts] !== null\r\n                && groupStatusArray[CharterClosureStatus.UninvoicedCosts].length > 0) {\r\n                popupText += groupStatusArray[CharterClosureStatus.UninvoicedCosts].map(function (x) { return x.contractLabel }).toString()\r\n                    + this.getpopupText(CharterClosureStatus.UninvoicedCosts)\r\n            }\r\n            if (groupStatusArray[CharterClosureStatus.UncashmatchedCosts] !== undefined\r\n                && groupStatusArray[CharterClosureStatus.UncashmatchedCosts] !== null\r\n                && groupStatusArray[CharterClosureStatus.UncashmatchedCosts].length > 0) {\r\n                popupText += groupStatusArray[CharterClosureStatus.UncashmatchedCosts].map(function (x) { return x.contractLabel }).toString()\r\n                    + this.getpopupText(CharterClosureStatus.UncashmatchedCosts)\r\n            }\r\n            if (popupText === '') {\r\n                popupText = 'Continue with closure?';\r\n            } else {\r\n                popupText = popupText + '<br/>Continue with closure?';\r\n            }\r\n\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Warning - Charter closure',\r\n                    text: popupText,\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            }\r\n        }\r\n\r\n        return this.dialog.open(ConfirmationDialogComponent, confirmPopupData);\r\n    }\r\n\r\n    private getpopupText(status: number): string {\r\n        let popupText: string = '';\r\n        switch (status) {\r\n            case CharterClosureStatus.InvoiceNotFinalized:\r\n                popupText = ' is not final invoiced.<br/>';\r\n                break;\r\n            case CharterClosureStatus.UnpostedInvoice:\r\n                popupText = ' has unposted invoices.<br/>';\r\n                break;\r\n            case CharterClosureStatus.NoBlDateUnrelizedTrade:\r\n                popupText = ' is unrealized physicals. Make the Quantity 0 or change the shipping status to close it.<br/>';\r\n                break;\r\n            case CharterClosureStatus.UninvoicedCosts:\r\n                popupText = ' has cost accrual.<br/>';\r\n                break;\r\n            case CharterClosureStatus.UncashmatchedCosts:\r\n                popupText = ' has cash unmatched Invoice(s).<br/>'\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return popupText;\r\n    }\r\n\r\n    private async checkLockStatusForAssignedTrades(sectionsAssigned: Section[]): Promise<any[]> {\r\n        const lockedTrades: any[] = new Array();\r\n        for (let i = 0; i < sectionsAssigned.length; i++) {\r\n            const val = await this.lockService.isLockedContractAsync(sectionsAssigned[i].sectionId);\r\n            if (val.isLocked) {\r\n                lockedTrades.push({\r\n                    contractLable: sectionsAssigned[i].contractLabel,\r\n                    sectionId: sectionsAssigned[i].sectionId,\r\n                    lockMessage: val.message,\r\n                });\r\n            }\r\n        }\r\n        return lockedTrades;\r\n    }\r\n\r\n    private closeSections(sectionsToClose: any[], charter: Charter) {\r\n        const sectionIdsToClose = new Array();\r\n        sectionsToClose.forEach((element) => {\r\n            sectionIdsToClose.push(element.sectionId);\r\n        });\r\n        this.subscriptions.push(this.tradingService.closeSection(sectionIdsToClose, this.childFlag, this.dataVersionId)\r\n            .subscribe((ok) => {\r\n                if (ok) {\r\n                    this.closeCharter(charter, sectionsToClose);\r\n                }\r\n            }));\r\n    }\r\n\r\n    private checkSectionClosureValidity(closeSectionModel: Section,\r\n        invoiceModel: InvoiceMarkingSearchResult[]): number {\r\n\r\n        let unpostedTradeInvoiceStatusList = invoiceModel.filter((invoice) => invoice.postingStatusId !== PostingStatus.Posted);\r\n        let cashUnMatchedInvoiceTradeList = invoiceModel.filter((invoice) => invoice.cashMatchPercentage !== 100);\r\n\r\n        const invoicePercentage = invoiceModel !== null || invoiceModel.length > 0 ? invoiceModel.reduce(function (a, b) { return a + b.invoicePercent; }, 0) : 0;\r\n        const costFilteredByInvoiceStatus = closeSectionModel.costs.filter((cost) => cost.invoiceStatus === InvoicingStatus.Uninvoiced);\r\n\r\n        if (invoiceModel.length > 0\r\n            && invoicePercentage === 100\r\n            && unpostedTradeInvoiceStatusList.length === 0\r\n            && cashUnMatchedInvoiceTradeList.length === 0\r\n            && (costFilteredByInvoiceStatus === null || costFilteredByInvoiceStatus.length === 0)) {\r\n            return CharterClosureStatus.FullyInvoiced;\r\n        }\r\n        else if (closeSectionModel.quantity === 0 || closeSectionModel.contractInvoiceTypeId === ContractInvoiceType.Cancellation) {\r\n            return CharterClosureStatus.ZeroQuantity;\r\n        }\r\n        else if (closeSectionModel.invoicingStatusId !== InvoicingStatus.Finalized) {\r\n            return CharterClosureStatus.InvoiceNotFinalized;\r\n        }\r\n        else if (unpostedTradeInvoiceStatusList.length > 0) {\r\n            return CharterClosureStatus.UnpostedInvoice;\r\n        }\r\n        else if (closeSectionModel.blDate === null ||\r\n            closeSectionModel.blDate.toDateString() === this.defaultDate) {\r\n            return CharterClosureStatus.NoBlDateUnrelizedTrade;\r\n        }\r\n        else if (costFilteredByInvoiceStatus.length > 0) {\r\n            return CharterClosureStatus.UninvoicedCosts;\r\n        }\r\n        else if (unpostedTradeInvoiceStatusList.length === 0 && cashUnMatchedInvoiceTradeList.length > 0) {\r\n            return CharterClosureStatus.UncashmatchedCosts;\r\n        }\r\n    }\r\n    onNewCharterClicked() {\r\n        this.router.navigate(['/' + this.company + '/execution/charter/new']);\r\n    }\r\n\r\n    onEditCharterClicked() {\r\n        this.lockService.isLockedCharter(this.charterId).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.router.navigate(['/' + this.company + '/execution/charter/edit', this.charterId]);\r\n            }\r\n        });\r\n    }\r\n\r\n    // For FAB\r\n    initFABActions() {\r\n        this.fabTitle = 'Charter Display FAB mini';\r\n        this.fabType = FABType.MiniFAB;\r\n\r\n        const actionItemEdit: FloatingActionButtonActions = {\r\n            icon: 'edit',\r\n            text: 'Edit Charter',\r\n            action: 'editCharter',\r\n            index: 0,\r\n            disabled: false,\r\n        };\r\n\r\n        const actionItemNew: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'New Charter',\r\n            action: 'newCharter',\r\n            index: 1,\r\n            disabled: false,\r\n        };\r\n\r\n        this.fabMenuActions.push(actionItemNew);\r\n        this.fabMenuActions.push(actionItemEdit);\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n\r\n            case 'newCharter': {\r\n                this.onNewCharterClicked();\r\n                break;\r\n            }\r\n            case 'editCharter': {\r\n                this.onEditCharterClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"charterForm\\\">\\r\\n    <header class=\\\"header-background charter-detail\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\"\\r\\n                 class=\\\"bottom-marge\\\">\\r\\n                <h2>Charter {{charterReference}}</h2>\\r\\n                <mat-chip-list>\\r\\n                    <mat-chip class=\\\"mat-success status-chip\\\"\\r\\n                              selected\\r\\n                              disabled>\\r\\n                        Open\\r\\n                    </mat-chip>\\r\\n                </mat-chip-list>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\"\\r\\n                 class=\\\"charter-global-info\\\">\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Created By\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{createdBy}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{creationDate}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Modified By\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{modifiedBy ? modifiedBy : ' '}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{modifiedDate ? modifiedDate : ' '}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </header>\\r\\n\\r\\n    <atlas-charter-menu-bar-component [menuDisable]=\\\"isEdit\\\"\\r\\n                                      (charterSaveAction)=\\\"onSaveButtonClicked()\\\"></atlas-charter-menu-bar-component>\\r\\n\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <main [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\"\\r\\n              class=\\\"cards-fxLayout\\\">\\r\\n            <mat-tab-group class=\\\"bright-tab\\\">\\r\\n                <mat-tab label=\\\"Contracts\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between\\\">\\r\\n                        <atlas-shipment-form-component #shipmentComponent\\r\\n                                                       [isCreateOrEdit]=true\\r\\n                                                       fxFlex=\\\"50\\\"></atlas-shipment-form-component>\\r\\n                        <atlas-total-card-component #totalCardComponent\\r\\n                                                    [isCreateOrEdit]=false\\r\\n                                                    fxFlex=\\\"50\\\"></atlas-total-card-component>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-around start\\\">\\r\\n                        <atlas-warning-component #warningComponent\\r\\n                                                 *ngIf=\\\"warning\\\"\\r\\n                                                 title='Select the contracts you want to update with the new charter informations.'\\r\\n                                                 message='Non selected contracts will have to be updated manually later'\\r\\n                                                 icon='swap_horiz'\\r\\n                                                 fxFlex=\\\"100\\\"></atlas-warning-component>\\r\\n                    </div>\\r\\n                    <atlas-assigned-contract-list-form-component (isReassignedButtonClicked)=\\\"onReassignedButtonClicked($event)\\\"\\r\\n                                                                 #assignedContractListFormComponent>\\r\\n                    </atlas-assigned-contract-list-form-component>\\r\\n                </mat-tab>\\r\\n                <mat-tab label=\\\"General\\\">\\r\\n                    <div fxLayout=\\\"row wrap\\\"\\r\\n                         fxLayoutAlign=\\\"space-around start\\\">\\r\\n                        <div fxFlex=\\\"50\\\"\\r\\n                             fxFlex.lt-md=\\\"100\\\">\\r\\n                            <atlas-main-information-form-component #mainInfoComponent\\r\\n                                                                   [isCreateOrEdit]=true>\\r\\n                            </atlas-main-information-form-component>\\r\\n                        </div>\\r\\n                        <!-- Right -->\\r\\n                        <div fxFlex=\\\"50\\\"\\r\\n                             fxFlex.lt-md=\\\"100\\\">\\r\\n                            <atlas-additional-information-form-component #additionalInfoComponent\\r\\n                                                                         [isCreateOrEdit]=true>\\r\\n                            </atlas-additional-information-form-component>\\r\\n                            <atlas-memo-form-component #memoComponent\\r\\n                                                       [isCreateOrEdit]=true></atlas-memo-form-component>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </main>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </div>\\r\\n    <atlas-lock-interval [resourceId]=\\\"charterId\\\"\\r\\n                         [resourceCode]=\\\"charterReference\\\"\\r\\n                         resourceType=\\\"Charter\\\"\\r\\n                         isEdit=true>\\r\\n    </atlas-lock-interval>\\r\\n</form>\\r\\n<atlas-floating-action-button *ngIf=\\\"!hideFloatingButtons\\\"\\r\\n                              [fabTitle]=\\\"fabTitle\\\"\\r\\n                              [fabType]=\\\"fabType\\\"\\r\\n                              [fabActions]=\\\"fabMenuActions\\\"\\r\\n                              [isParentLoaded]=\\\"!isLoading\\\"\\r\\n                              (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n</atlas-floating-action-button>\\r\\n\"","module.exports = \".header-background {\\n  min-height: 94px !important; }\\n\\n.header-content {\\n  padding: 16px 30px 0px !important; }\\n\"","import { Location } from '@angular/common';\r\nimport { ChangeDetectorRef, Component, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AssignedSection } from '../../../shared/entities/assigned-section.entity';\r\nimport { Charter } from '../../../shared/entities/charter.entity';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { IsLocked } from '../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../shared/entities/lock-functional-context.entity';\r\nimport { ContractTypes } from '../../../shared/enums/contract-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../shared/services/http-services/lock.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { AdditionalInformationFormComponent } from '../execution-charter-creation-page/components/additional-information-form-component/additional-information-form-component.component';\r\nimport { AssignedContractListFormComponent } from '../execution-charter-creation-page/components/assigned-contract-list-form-component/assigned-contract-list-form-component.component';\r\nimport { MainInformationFormComponent } from '../execution-charter-creation-page/components/main-information-form-component/main-information-form-component.component';\r\nimport { MemoFormComponent } from '../execution-charter-creation-page/components/memo-form-component/memo-form-component.component';\r\nimport { ShipmentFormComponent } from '../execution-charter-creation-page/components/shipment-form-component/shipment-form-component.component';\r\nimport { TotalCardComponent } from '../execution-charter-creation-page/components/total-card-component/total-card-component.component';\r\nimport { WarningComponent } from '../execution-charter-creation-page/components/warning-component/warning-component.component';\r\nimport { TitleService } from './../../../shared/services/title.service';\r\nimport { UtilService } from './../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-edit-page',\r\n    templateUrl: './execution-charter-edit-page.component.html',\r\n    styleUrls: ['./execution-charter-edit-page.component.scss'],\r\n})\r\nexport class ExecutionCharterEditPageComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('mainInfoComponent') mainInfoComponent: MainInformationFormComponent;\r\n    @ViewChild('additionalInfoComponent') additionalInfoComponent: AdditionalInformationFormComponent;\r\n    @ViewChild('shipmentComponent') shipmentComponent: ShipmentFormComponent;\r\n    @ViewChild('memoComponent') memoComponent: MemoFormComponent;\r\n    @ViewChild('totalCardComponent') totalCardComponent: TotalCardComponent;\r\n    @ViewChild('assignedContractListFormComponent') assignedContractListFormComponent: AssignedContractListFormComponent;\r\n    @ViewChild('warningComponent') warningComponent: WarningComponent;\r\n\r\n    charterForm: FormGroup;\r\n    charterReference: string;\r\n    savingInProgress = false;\r\n    isClearClicked = false;\r\n    model: Charter;\r\n    charterId: number;\r\n    creationDate: string;\r\n    createdBy: string;\r\n    modifiedDate: string;\r\n    modifiedBy: string;\r\n    masterdata: any;\r\n    sectionModel: AssignedSection = new AssignedSection();\r\n    sectionsAssigned: AssignedSection[];\r\n    formComponents: BaseFormComponent[] = [];\r\n    viewWarning: boolean = false;\r\n    warning: boolean = true;\r\n    company: string;\r\n    isEdit: boolean = true;\r\n    isSave: boolean = false;\r\n    isLoading = true;\r\n    hideFloatingButtons: boolean = false;\r\n    destroy$ = new Subject();\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n\r\n    constructor(protected route: ActivatedRoute,\r\n        protected executionService: ExecutionService,\r\n        protected cdr: ChangeDetectorRef,\r\n        protected formBuilder: FormBuilder,\r\n        protected snackbarService: SnackbarService,\r\n        protected router: Router,\r\n        protected location: Location,\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected lockService: LockService,\r\n        protected utilService: UtilService,\r\n        protected titleService: TitleService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.isClearClicked = false;\r\n        this.charterId = this.route.snapshot.params['charterId'];\r\n        const companySubscription = this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n\r\n        this.charterForm = this.formBuilder.group({\r\n            additionalInfoComponent: this.additionalInfoComponent.getFormGroup(),\r\n            mainInfoComponent: this.mainInfoComponent.getFormGroup(),\r\n            shipmentComponent: this.shipmentComponent.getFormGroup(),\r\n            memoComponent: this.memoComponent.getFormGroup(),\r\n            assignedContractListFormComponent: this.assignedContractListFormComponent.getFormGroup(),\r\n\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.additionalInfoComponent,\r\n            this.mainInfoComponent,\r\n            this.memoComponent,\r\n            this.shipmentComponent,\r\n            this.assignedContractListFormComponent,\r\n            this.totalCardComponent);\r\n        this.cdr.detectChanges();\r\n\r\n        this.subscriptions.push(this.lockService.lockCharter(this.charterId, LockFunctionalContext.CharterEdit)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.loadCharterData();\r\n                },\r\n                (err) => {\r\n                    const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Lock',\r\n                            text: err.error.detail,\r\n                            okButton: 'Got it',\r\n                        },\r\n                    });\r\n                    this.goToChartersDetails(this.charterId);\r\n                }));\r\n        this.subscriptions.push(companySubscription);\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.charterForm.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.charterForm.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    loadCharterData() {\r\n        this.subscriptions.push(this.executionService.getCharterById(this.charterId)\r\n            .subscribe((data) => {\r\n                this.model = data;\r\n                this.creationDate = data.creationDate.toDateString();\r\n                this.createdBy = data.createdBy;\r\n                this.modifiedDate = data.modifiedDate === null ? '' : data.modifiedDate.toDateString();\r\n                this.modifiedBy = data.modifiedBy;\r\n                this.charterReference = data.charterCode;\r\n                this.mainInfoComponent.assignValues(this.model);\r\n                this.mainInfoComponent.initForm(this.model);\r\n\r\n                this.additionalInfoComponent.initForm(this.model);\r\n\r\n                this.shipmentComponent.assignValues(this.model);\r\n                this.shipmentComponent.initForm(this.model);\r\n                this.memoComponent.initForm(this.model);\r\n                this.assignedContractListFormComponent.initForm(this.model, true);\r\n                this.initFABActions();\r\n                this.isLoading = false;\r\n                this.titleService.setTitle(this.charterReference + ' - Edit Charter');\r\n            }));\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.mainInfoComponent.initForm(this.model);\r\n                this.additionalInfoComponent.initForm(this.model);\r\n                this.shipmentComponent.initForm(this.model);\r\n                this.memoComponent.initForm(this.model);\r\n                this.goToChartersDetails(this.charterId);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.isSave = true;\r\n        this.utilService.updateFormGroupValidity(this.charterForm);\r\n        if (this.charterForm.valid) {\r\n            this.masterdata = this.route.snapshot.data.masterdata;\r\n            this.getCharterInfo();\r\n\r\n            this.warning = false;\r\n            // This code has been removed in bug 23126 but will be added back for UX\r\n            // if (this.model.assignedSections.length > 0 && this.model.allContractsSelected === false) {\r\n            //     const result = this.model;\r\n            // \r\n            //     const assignSectionDialog = this.dialog.open(AssignSectionDialogComponent, {\r\n            //         data: { result, masterdata: this.masterdata },\r\n            //     });\r\n            //     assignSectionDialog.afterClosed().subscribe((charters: Charter) => {\r\n            //         if (charters != null) {\r\n            //             this.validateSectionAndUpdate(charters);\r\n            //         }\r\n            //     });\r\n            // } else {\r\n\r\n            if (this.model.assignedSections.length === 0) {\r\n                this.warning = true;\r\n                this.viewWarning = true;\r\n            }\r\n            this.validateSectionAndUpdate(this.model);\r\n\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    goToChartersDetails(charterId: number) {\r\n        this.router.navigate([this.route.snapshot.paramMap.get('company') +\r\n            '/execution/charter/details', charterId, { warning: this.viewWarning }]);\r\n    }\r\n\r\n    validateSectionAndUpdate(charter: Charter) {\r\n        let assignedSections: AssignedSection[];\r\n        assignedSections = charter.assignedSections.map((o) => o);\r\n        const sectionsInvoicedOrUnallocatedSales = assignedSections.filter((section) => this.isSectionInvoicedOrUnallocatedSale(section));\r\n        if (sectionsInvoicedOrUnallocatedSales.length > 0) {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Warning',\r\n                    text: 'The BL date of invoiced contracts or unallocated sales contracts will not be updated',\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.updateCharter(charter);\r\n                }\r\n            });\r\n        } else {\r\n            this.updateCharter(charter);\r\n        }\r\n    }\r\n\r\n    isSectionInvoicedOrUnallocatedSale(section): boolean {\r\n        if (section.invoiceRef && section.invoiceRef !== '') {\r\n            return true;\r\n        }\r\n        // Sale not allocated will not be updated\r\n        if (section.contractType === ContractTypes.Sale && section.allocatedTo === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateCharter(updateCharterModel: Charter) {\r\n        updateCharterModel.charterId = this.charterId;\r\n        this.executionService.updateCharter(updateCharterModel, false)\r\n            .subscribe(\r\n                () => {\r\n                    this.snackbarService.informationSnackBar('Charter has been updated successfully.');\r\n                    this.goToChartersDetails(this.charterId);\r\n                },\r\n                (error) => {\r\n                    console.error(error);\r\n                    this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                },\r\n                () => {\r\n                    this.savingInProgress = false;\r\n                });\r\n    }\r\n\r\n    goToChartersList() {\r\n        this.router.navigate([this.route.snapshot.paramMap.get('company') + '/execution/charter']);\r\n    }\r\n\r\n    getCharterInfo() {\r\n        this.model = new Charter();\r\n        this.formComponents.forEach((comp) => {\r\n            this.model = comp.populateEntity(this.model);\r\n        });\r\n\r\n    }\r\n    onClearButtonClicked() {\r\n        this.isSave = true;\r\n        this.mainInfoComponent.clearValueOfControl();\r\n        this.additionalInfoComponent.clearValueOfControl();\r\n        this.shipmentComponent.clearValueOfControl();\r\n        this.memoComponent.clearValueOfControl();\r\n    }\r\n\r\n    deleteCharter() {\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Charter Deletion',\r\n                text: 'Deleting a charter is permanent. Do you wish to proceed?',\r\n                okButton: 'Delete anyway',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.executionService.deleteCharter(this.charterId).subscribe(() => {\r\n                    this.snackbarService.informationSnackBar('Charter deleted successfully');\r\n                    this.goToChartersList();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n\r\n    onPreviousPageNavigation() {\r\n        this.location.back();\r\n    }\r\n\r\n    onEditCharterClicked() {\r\n        this.lockService.isLockedCharter(this.charterId).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.router.navigate(['/' + this.company + '/execution/charter/edit', this.charterId]);\r\n            }\r\n        });\r\n    }\r\n\r\n    // For FAB\r\n    initFABActions() {\r\n        this.fabTitle = 'Charter Edit FAB mini';\r\n        this.fabType = FABType.MiniFAB;\r\n\r\n        const actionItemSave: FloatingActionButtonActions = {\r\n            icon: 'save',\r\n            text: 'Save',\r\n            action: 'save',\r\n            disabled: false,\r\n            index: 3,\r\n        };\r\n        const actionItemCancel: FloatingActionButtonActions = {\r\n            icon: 'keyboard_backspace',\r\n            text: 'Cancel',\r\n            action: 'cancel',\r\n            disabled: false,\r\n            index: 2,\r\n        };\r\n\r\n        this.fabMenuActions.push(actionItemSave);\r\n        this.fabMenuActions.push(actionItemCancel);\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'save': {\r\n                this.onSaveButtonClicked();\r\n                break;\r\n            }\r\n            case 'cancel': {\r\n                this.onPreviousPageNavigation();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    onReassignedButtonClicked(event) {\r\n        if (event) {\r\n            this.hideFloatingButtons = true;\r\n        } else {\r\n            this.hideFloatingButtons = false;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card class=\\\"search-card\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"searchCharterReferenceCtrl\\\"\\r\\n                       placeholder=\\\"Charter Ref\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #message>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"charterManagerCtrl\\\"\\r\\n                       placeholder=\\\"Charter Manager\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #action>\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                           [gridCode]=\\\"gridCode\\\"\\r\\n                           [gridTitle]=\\\"'Charters'\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           (rowClicked)=\\\"onCharterRowClicked($event)\\\"\\r\\n                           (quickNavigate)=\\\"onQuickNavigate($event)\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [dataVersionId]=\\\"dataVersionId\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n</div>\\r\\n<atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                              [fabType]=\\\"fabType\\\"\\r\\n                              [fabActions]=\\\"fabMenuActions\\\"\\r\\n                              [isParentLoaded]=\\\"!isLoading\\\"\\r\\n                              (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n</atlas-floating-action-button>\\r\\n\"","module.exports = \".mat-table {\\n  overflow: auto; }\\n\\n.mat-form-field-wrapper {\\n  padding-bottom: 0px;\\n  margin-top: 0px !important;\\n  margin-bottom: 0px !important; }\\n\\n.mat-form-field-flex {\\n  height: 44px !important;\\n  font-size: 14px !important;\\n  border-top-left-radius: 0px !important;\\n  border-bottom-left-radius: 0px !important; }\\n\\n.no-margin {\\n  margin: 0; }\\n\\n.mat-form-field-infix {\\n  padding-top: 5px !important; }\\n\\n.mat-error {\\n  margin-top: 15px; }\\n\\n.large-form {\\n  width: 100%;\\n  border-radius: 5px 5px;\\n  background-color: white; }\\n\\n.search-card {\\n  margin-bottom: 16px; }\\n\\n.search-bar {\\n  border-radius: 5px 5px;\\n  background-color: #FFFAFC; }\\n\\n.table-title {\\n  background-color: white; }\\n\\n.ag-header-row {\\n  border-style: none !important; }\\n\\n.loading {\\n  background-color: white;\\n  padding-top: 2%;\\n  padding-bottom: 2%; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n:host ::ng-deep.ag-menu {\\n  overflow-y: hidden !important; }\\n\\n/*/deep/.mat-form-field-appearance-outline .mat-form-field-outline{\\r\\n\\tcolor:white;\\r\\n}*/\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatPaginator, MatSort } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { ListAndSearchComponent } from '../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AtlasAgGridParam } from '../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Charter } from '../../../shared/entities/charter.entity';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { ListAndSearchFilter } from '../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterDataProps } from '../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { TransportType } from '../../../shared/entities/transport-type.entity';\r\nimport { UserGridPreferencesParameters } from '../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { CharterStatus } from '../../../shared/enums/charter-status.enum';\r\nimport { ListAndSearchFilterType } from '../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { CharterDisplayView } from '../../../shared/models/charter-display-view';\r\nimport { FormatDatePipe } from '../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../shared/services/ag-grid.service';\r\nimport { GridConfigurationProviderService } from '../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { CharterListDataLoader } from '../../../shared/services/list-and-search/charterList-data-loader';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { ExecutionActionsService } from '../../services/execution-actions.service';\r\nimport { AtlasFormControl } from './../../../shared/entities/atlas-form-control';\r\nimport { Vessel } from './../../../shared/entities/vessel.entity';\r\nimport { UiService } from './../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-list-page',\r\n    templateUrl: './execution-charter-list-page.component.html',\r\n    styleUrls: ['./execution-charter-list-page.component.scss'],\r\n    providers: [CharterListDataLoader],\r\n})\r\n\r\nexport class ExecutionCharterListPageComponent implements OnInit {\r\n\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    @ViewChild(MatPaginator) paginator: MatPaginator;\r\n    @ViewChild(MatSort) sort: MatSort;\r\n\r\n    transportTypeRecord: TransportType[];\r\n    company: string;\r\n    charterModel: Charter[];\r\n    searchForm: FormGroup;\r\n    searchCharterReferenceCtrl = new AtlasFormControl('searchCharterReferenceCtrl');\r\n    charterManagerCtrl = new AtlasFormControl('charterManagerCtrl');\r\n    charters: CharterDisplayView[];\r\n    dataLength = 0;\r\n    isLoading: boolean;\r\n    searchTerm: string;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    masterdata: MasterData;\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    dataVersionId: number;\r\n    gridCode: string = 'charterlist';\r\n\r\n    charterGridOptions: agGrid.GridOptions = {};\r\n    excelStyles: any;\r\n    charterGridColumns: agGrid.ColDef[] = [\r\n        {\r\n            headerName: 'Reference',\r\n            field: 'charterCode',\r\n            colId: 'charterCode',\r\n            hide: false,\r\n            sort: 'asc',\r\n        },\r\n        {\r\n            headerName: 'Transport Type',\r\n            field: 'transportType',\r\n            colId: 'transportType',\r\n            hide: true,\r\n        },\r\n        {\r\n            headerName: 'Vessel',\r\n            field: 'vessel',\r\n            colId: 'vessel',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Description',\r\n            field: 'description',\r\n            colId: 'description',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Charter Status',\r\n            field: 'charterStatusId',\r\n            colId: 'charterStatusId',\r\n            valueFormatter: this.charterStatusFormatter,\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Charter Manager',\r\n            field: 'charterManagerSamAccountName',\r\n            colId: 'charterManagerSamAccountName',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Dept',\r\n            colId: 'departmentId',\r\n            field: 'departmentId',\r\n            valueFormatter: this.departmentDescriptionFormatter.bind(this),\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Charter B/L Date',\r\n            field: 'blDate',\r\n            colId: 'blDate',\r\n            hide: false,\r\n            valueFormatter: (params) => {\r\n                return this.uiService.dateFormatter(params);\r\n            },\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.blDate);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Created By',\r\n            field: 'createdBy',\r\n            colId: 'createdBy',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Date Created',\r\n            field: 'creationDate',\r\n            colId: 'creationDate',\r\n            hide: false,\r\n            valueFormatter: (params) => {\r\n                return this.uiService.dateFormatter(params);\r\n            },\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.creationDate);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n    charterGridRows: CharterDisplayView[];\r\n    componentId: string = 'charterList';\r\n    hasGridSharing: boolean = false;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    masterData: MasterData = new MasterData();\r\n    listOfMasterData = [\r\n        MasterDataProps.Ports,\r\n        MasterDataProps.TransportTypes,\r\n        MasterDataProps.Vessels,\r\n    ];\r\n\r\n    gridPreferences: UserGridPreferencesParameters;\r\n\r\n    // FAB\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(public masterdataService: MasterdataService, public utilService: UtilService, private securityService: SecurityService,\r\n        private executionService: ExecutionService,\r\n        private masterDataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected dialog: MatDialog,\r\n        protected executionActionsService: ExecutionActionsService,\r\n        private formBuilder: FormBuilder,\r\n        private formatDate: FormatDatePipe,\r\n        private titleService: TitleService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private uiService: UiService,\r\n        private authorizationService: AuthorizationService,\r\n        public gridService: AgGridService,\r\n        public dataLoader: CharterListDataLoader,\r\n\r\n    ) {\r\n        this.isLoading = true;\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.checkIfUserHasRequiredPrivileges();\r\n    }\r\n\r\n    departmentDescriptionFormatter(params) {\r\n        const department = this.masterdata.departments.find((dept) => dept.departmentId === params.value);\r\n        if (params.value && department) {\r\n            return department.description;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    charterStatusFormatter(params) {\r\n        if (params.value && CharterStatus[params.value]) {\r\n            return CharterStatus[params.value].toString();\r\n        }\r\n        return '';\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.titleService.setTitle('Charters');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n        this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n\r\n        this.securityService.isSecurityReady().pipe(\r\n            concatMap(() => {\r\n                return this.gridConfigurationProvider.getConfiguration(this.company, this.componentId);\r\n            }),\r\n        ).subscribe((configuration) => {\r\n            // -- used later if this will become L&S maybe\r\n            // this.columnConfiguration = configuration.columns;\r\n            // this.configurationLoaded.emit();\r\n            // this.initColumns(this.columnConfiguration);\r\n            this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            this.gridPreferences = {\r\n                company: this.company,\r\n                gridId: this.componentId,\r\n                gridOptions: this.charterGridOptions,\r\n                sharingEnabled: this.hasGridSharing,\r\n            };\r\n            this.getAllCharters();\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n\r\n        this.gridService.sizeColumns(this.charterGridOptions);\r\n        this.charterGridOptions.columnDefs = this.charterGridColumns;\r\n        this.gridColumnApi = this.charterGridOptions.columnApi;\r\n\r\n    }\r\n\r\n    getAllCharters() {\r\n        this.masterDataService.getMasterData(this.listOfMasterData).pipe(\r\n            map((masterData: MasterData) => {\r\n                this.initView(masterData);\r\n            })).subscribe();\r\n    }\r\n\r\n    initView(masterData: MasterData) {\r\n\r\n        this.executionService.getCharters()\r\n            .subscribe((data) => {\r\n                this.charters = data.value.map((charter) => {\r\n                    return new CharterDisplayView(this.getDescriptions(masterData, charter));\r\n                });\r\n                this.charterGridRows = this.charters;\r\n                this.initFABActions();\r\n                this.isLoading = false;\r\n                this.dataLength = this.charterGridRows.length;\r\n            });\r\n\r\n    }\r\n\r\n    getDescriptions(masterData: MasterData, charter: Charter): Charter {\r\n\r\n        if (charter.transportTypeCode) {\r\n            this.transportTypeRecord = masterData.transportTypes\r\n                .filter((transport) => transport.transportTypeCode\r\n                    .toLowerCase().trim() === charter.transportTypeCode.toString()\r\n                        .toLowerCase().trim());\r\n        }\r\n\r\n        if (this.transportTypeRecord && this.transportTypeRecord.length > 0) {\r\n            charter.transportTypeCode = this.transportTypeRecord[0].description;\r\n        }\r\n\r\n        let vesselRecord: Vessel;\r\n        if (charter.vesselCode) {\r\n            vesselRecord = masterData.vessels\r\n                .find((vessel) => vessel.vesselName.toLowerCase().trim() === charter.vesselCode.toString().toLowerCase().trim());\r\n        }\r\n        if (vesselRecord) {\r\n            charter.vesselCode = vesselRecord.vesselName;\r\n        }\r\n\r\n        return charter;\r\n    }\r\n\r\n    onSearchCharters() {\r\n        this.searchTerm = this.searchForm.get('searchCharterReferenceCtrl').value;\r\n        if (!this.searchTerm) {\r\n            return;\r\n        }\r\n\r\n        this.executionService.findChartersByReference(this.searchTerm)\r\n            .subscribe((data) => {\r\n                this.charters = data.value.map((charter) => {\r\n                    return new CharterDisplayView(charter);\r\n                });\r\n                this.charterGridRows = this.charters;\r\n                this.dataLength = this.charterGridRows.length;\r\n                if (this.charters == null || this.charters.length === 0) {\r\n\r\n                    const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: this.searchTerm + '  doesn\\'t exist',\r\n                            text: '  Do you want to create a Charter with this Reference'\r\n                            ,\r\n                            okButton: 'START CREATION',\r\n                            cancelButton: 'DISCARD',\r\n                        },\r\n                    });\r\n                    confirmDialog.afterClosed().subscribe((answer) => {\r\n                        if (answer) {\r\n                            this.router.navigate(['/' + this.company + '/execution/charter/new/', { ref: this.searchTerm }]);\r\n                        }\r\n                    });\r\n\r\n                } else if (this.charters && this.charters.length === 1) {\r\n                    this.router.navigate([this.company + '/execution/charter/details', this.charters[0].charterId]);\r\n                    return;\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    onCharterRowClicked(event) {\r\n        const charterId = event.data.charterId;\r\n        this.router.navigate([this.company + '/execution/charter/details', charterId]);\r\n    }\r\n\r\n    onQuickNavigate(event) {\r\n        const charterId = event.charterId;\r\n        this.router.navigate([this.company + '/execution/charter/details', charterId]);\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n    }\r\n\r\n    // For FAB\r\n    initFABActions() {\r\n        this.fabType = FABType.ExtendedMenu;\r\n        this.fabTitle = 'Charter Actions';\r\n        const actionCreateCharter: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'Create Charter',\r\n            action: 'createCharter',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n        const actionGroupFunction: FloatingActionButtonActions = {\r\n            icon: 'gamepad',\r\n            text: 'Group Functions',\r\n            action: 'groupFunctions',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n\r\n        if (this.checkIfUserHasRequiredPrivileges()) {\r\n            this.fabMenuActions.push(actionCreateCharter);\r\n        }\r\n        this.fabMenuActions.push(actionGroupFunction);\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        if (action === 'createCharter') {\r\n            this.router.navigate([this.company + '/execution/charter/new']);\r\n        }\r\n        if (action === 'groupFunctions') {\r\n            this.executionActionsService.charterGroupFunctionsSubject.next();\r\n\r\n        }\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        this.additionalFilters = [];\r\n        const charterRefField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'CharterCode');\r\n        const charterManagerField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'CharterManagerSamAccountName');\r\n        if (!this.listAndSearchComponent) {\r\n            return;\r\n        } else {\r\n            if (this.searchCharterReferenceCtrl.value && charterRefField) {\r\n                const filterCharterReference = new ListAndSearchFilter();\r\n                filterCharterReference.fieldId = charterRefField.fieldId;\r\n                filterCharterReference.fieldName = charterRefField.fieldName;\r\n                filterCharterReference.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.searchCharterReferenceCtrl.value + '%',\r\n                };\r\n                filterCharterReference.isActive = true;\r\n                this.additionalFilters = [filterCharterReference];\r\n            }\r\n        }\r\n        if (this.charterManagerCtrl.value && charterManagerField) {\r\n            const filterCharterManager = new ListAndSearchFilter();\r\n            filterCharterManager.fieldId = charterManagerField.fieldId;\r\n            filterCharterManager.fieldName = charterManagerField.fieldName;\r\n            filterCharterManager.predicate = {\r\n                filterType: ListAndSearchFilterType.Text,\r\n                operator: 'eq',\r\n                value1: this.charterManagerCtrl.value + '%',\r\n            };\r\n            filterCharterManager.isActive = true;\r\n            this.additionalFilters.push(filterCharterManager);\r\n        }\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges() {\r\n        if (this.authorizationService.isPrivilegeAllowed(this.company, 'Charters')) {\r\n            if (this.authorizationService.isPrivilegeAllowed(\r\n                this.company, 'ChartersView', PermissionLevels.ReadWrite)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card *ifAuthorized=\\\"'Trades.Physicals.CloseTrade',company:this.company\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Bulk Closure</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let groupFunctionType of charterGroupFunctionTypeMenu\\\">\\r\\n            <mat-checkbox #charterbulkCtrl\\r\\n                          [formControl]=\\\"charterBulkClosureCtrl\\\"\\r\\n                          [value]=\\\"groupFunctionType.charterFunctionTypeCode\\\"\\r\\n                          (change)=\\\"onSelectionChange($event,charterbulkCtrl.checked, groupFunctionType)\\\">\\r\\n                {{groupFunctionType.name}}\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control'\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { CharterGroupFunctionTypes } from '../../../../shared/enums/charter-group-function-type';\r\nimport { CharterGroupSelection } from '../../../../shared/entities/charter-group-selection.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-bulk-closure',\r\n    templateUrl: './charter-bulk-closure.component.html',\r\n    styleUrls: ['./charter-bulk-closure.component.scss']\r\n})\r\nexport class CharterBulkClosureComponent extends BaseFormComponent implements OnInit {\r\n    charterBulkClosureCtrl = new AtlasFormControl('charterBulkClosure');\r\n    company: string;\r\n    charterGroupFunctionTypeMenu: CharterGroupSelection[] = [];\r\n    @Output() readonly charterBulkClosureOptionChecked = new EventEmitter<any>();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute, private formBuilder: FormBuilder) { super(formConfigurationProvider) }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.charterGroupFunctionTypeMenu = this.charterGroupFunctionTypeMenu.filter(\r\n            (functionType) => functionType.charterFunctionTypeCode === CharterGroupFunctionTypes.CharterBulkClosure);\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            charterBulkClosureCtrl: this.charterBulkClosureCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    onSelectionChange($event, value, groupFunctionType) {\r\n        this.charterBulkClosureOptionChecked.emit({\r\n            bulkClosureOption: Number(groupFunctionType.charterFunctionTypeCode),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<form>\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <div fxLayout=\\\"row wrap\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\">\\r\\n\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"48\\\">\\r\\n                <atlas-charter-bulk-closure #charterBulkClosure\\r\\n                                            (charterBulkClosureOptionChecked)=\\\"onCharterBulkClosureOptionChecked($event)\\\">\\r\\n                </atlas-charter-bulk-closure>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             class=\\\"button-details\\\">\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                        mat-button>\\r\\n                    DISCARD\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"end start \\\">\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"onNextButtonClicked(charterBulkActionTypeId)\\\"\\r\\n                            [disabled]=\\\"isDisabled\\\">\\r\\n                        NEXT\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { CharterBulkClosureComponent } from './charter-bulk-closure/charter-bulk-closure.component';\r\nimport { CharterGroupSelection } from '../../../shared/entities/charter-group-selection.entity';\r\nimport { CharterGroupFunctionTypes } from '../../../shared/enums/charter-group-function-type';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-group-amendments',\r\n    templateUrl: './execution-charter-group-amendments.component.html',\r\n    styleUrls: ['./execution-charter-group-amendments.component.scss']\r\n})\r\nexport class ExecutionCharterGroupAmendmentsComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('charterBulkClosure') charterBulkClosure: CharterBulkClosureComponent;\r\n\r\n    charterGroupFunctionTypeMenu: CharterGroupSelection[] = [];\r\n    charterGroupFunctionFieldList: CharterGroupSelection[] = [];\r\n    private formComponents: BaseFormComponent[] = [];\r\n    charterGroupFunctionFormGroup: FormGroup;\r\n    charterBulkActionTypeId: number;\r\n    isDisabled: boolean = true;\r\n    isSave: boolean = false;\r\n\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        private titleService: TitleService, protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected router: Router, protected companyManager: CompanyManagerService) {\r\n        super(formConfigurationProvider);\r\n        this.populateListofOptions();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.charterBulkClosure.charterGroupFunctionTypeMenu = this.charterGroupFunctionTypeMenu;\r\n        this.charterGroupFunctionFormGroup = this.formBuilder.group({\r\n            charterBulkClosure: this.charterBulkClosure.getFormGroup(),\r\n        })\r\n        this.titleService.setTitle('Charter Bulk Actions');\r\n        this.formComponents.push(\r\n            this.charterBulkClosure)\r\n    }\r\n    populateListofOptions() {\r\n        this.charterGroupFunctionFieldList.push({\r\n            charterbulkFunctionTypeId: 1,\r\n            name: 'Bulk Closure Charter',\r\n            charterFunctionTypeCode: CharterGroupFunctionTypes.CharterBulkClosure,\r\n        });\r\n        this.charterGroupFunctionFieldList.filter((e) => {\r\n            this.charterGroupFunctionTypeMenu.push(e);\r\n        });\r\n\r\n    }\r\n    onCharterBulkClosureOptionChecked($event) {\r\n        this.charterBulkActionTypeId = $event.bulkClosureOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n        }\r\n        else {\r\n            this.isDisabled = true;\r\n\r\n        }\r\n\r\n    }\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/charter']);\r\n    }\r\n\r\n    onNextButtonClicked(charterBulkActionTypeId) {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/execution/charter/bulkActions/' + encodeURIComponent(charterBulkActionTypeId)]);\r\n\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class='mat-checkbox-height'\\r\\n     *ngIf=\\\"isGridReady\\\">\\r\\n    <mat-checkbox [(ngModel)]=\\\"selectAllCharterToClose\\\"\\r\\n                  (change)=\\\"onSelectAllClicked($event.checked)\\\"\\r\\n                  label=\\\"Select all\\\">Tick all/ Untick all\\r\\n    </mat-checkbox>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"center center\\\"\\r\\n     fxLayoutWrap\\r\\n     *ngIf=\\\"!isGridReady\\\"\\r\\n     class=\\\"loading\\\">\\r\\n    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n</div>\\r\\n<div class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n     *ngIf=\\\"isGridReady\\\">\\r\\n    <ag-grid-angular style=\\\"width: 100%; height:450px\\\"\\r\\n                     id=\\\"myGrid\\\"\\r\\n                     class=\\\"ag-theme-material\\\"\\r\\n                     [columnDefs]=\\\"columnDefs\\\"\\r\\n                     [rowData]=\\\"rowData\\\"\\r\\n                     [getNodeChildDetails]=\\\"getNodeChildDetails\\\"\\r\\n                     [suppressRowClickSelection]=\\\"true\\\"\\r\\n                     [gridOptions]=\\\"bulkClosureGridOptions\\\"\\r\\n                     (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                     [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                     rowSelection=\\\"multiple\\\"\\r\\n                     (gridReady)=\\\"onGridReady($event)\\\">\\r\\n    </ag-grid-angular>\\r\\n</div>\"","module.exports = \"::ng-deep .ag-row-group-indent-0 {\\n  font-weight: bold; }\\n\\n::ng-deep .status-background-color {\\n  color: #635e5e !important; }\\n\\n::ng-deep .disabled-checkbox .ag-icon.ag-icon-checkbox-unchecked {\\n  background: #a5a1aa4d;\\n  border: 1px solid #8d7f7f; }\\n\\n::ng-deep .risky-for-closure {\\n  background-color: red !important; }\\n\\n::ng-deep .cat-red {\\n  background: #ffcccc;\\n  color: #ff3e3e; }\\n\\n::ng-deep .cat-grn {\\n  background: #ccefdc;\\n  color: #35bf71; }\\n\\n::ng-deep .cat-org {\\n  background: #fdefe6;\\n  color: #df9768; }\\n\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { CharterBulkClosure } from '../../../../../shared/entities/charter-bulk-closure.entity';\r\nimport { CharterMatrixData } from './charter-matrix-data';\r\nimport { AgGridHyperlinkForCharterBulkClosureComponent } from '../../../ag-grid-hyperlink-for-charter-bulk-closure/ag-grid-hyperlink-for-charter-bulk-closure.component'\r\nimport { AgGridCharterStatusForCharterBulkClosureComponent } from '../../../ag-grid-charterstatus-for-charter-bulk-closure/ag-grid-charterstatus-for-charter-bulk-closure.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { AgGridHyperlinkComponent } from '../../../../../shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component';\r\nimport { AssignedSectionToCharterBulkClosure } from '../../../../../shared/entities/assigned-section-to-charter-bulk-closure.entity';\r\nimport { SectionMatrixData } from './section-matrix-data'\r\n@Component({\r\n    selector: 'atlas-charter-bulk-closure-matrix',\r\n    templateUrl: './charter-bulk-closure-matrix.component.html',\r\n    styleUrls: ['./charter-bulk-closure-matrix.component.scss'],\r\n})\r\n\r\nexport class CharterBulkClosureMatrixComponent extends BaseFormComponent implements OnInit {\r\n    gridApi;\r\n    gridColumnApi;\r\n    gridParam;\r\n    columnDefs;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    rowData: any[] = [];\r\n    getNodeChildDetails;\r\n    tooltipMessage: string = 'Trade Status';\r\n    selectAllCharterToClose: boolean;\r\n    @Input() charterDetailsMatrix: CharterBulkClosure[];\r\n    @Input() chartersLength: number;\r\n    isGridReady: boolean = false;\r\n    bulkClosureGridOptions: agGrid.GridOptions = {};\r\n    gridContext = {\r\n        gridEditable: false,\r\n        componentParent: this,\r\n    };\r\n    @Output() readonly chartersClose = new EventEmitter<boolean>();\r\n    @Output() readonly closeCharterGridReady = new EventEmitter<boolean>();\r\n    chartersForConfirmClosure: CharterBulkClosure[];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected router: Router,\r\n        protected authorizationService: AuthorizationService,\r\n        protected tradingService: TradingService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getGridColumns();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngAfterContentChecked() {\r\n        if (this.charterDetailsMatrix.length === this.chartersLength && !this.isGridReady) {\r\n            this.initializeRows();\r\n        }\r\n    }\r\n\r\n    getGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: '',\r\n                field: \"rowHeader\",\r\n                colSpan: function (params) {\r\n                    return params.data.charterId ? 5 : 1;\r\n                },\r\n                cellClass: function (params) {\r\n                    let className: string;\r\n\r\n                    if (params.data.charterId && params.data.category === 'red') {\r\n                        className = 'disabled-checkbox cat-red';\r\n                    }\r\n                    if (params.data.charterId && params.data.category === 'green') {\r\n                        className = 'cat-grn';\r\n                    }\r\n                    if (params.data.charterId && params.data.category === 'orange') {\r\n                        className = 'cat-org';\r\n                    }\r\n                    return className;\r\n                },\r\n                cellRenderer: \"agGroupCellRenderer\",\r\n                cellRendererParams: {\r\n                    checkbox: (params) => {\r\n                        if (params.data.sectionId) {\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    },\r\n                    suppressCount: true,\r\n                    innerRendererFramework: AgGridCharterStatusForCharterBulkClosureComponent,\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: \"\",\r\n                field: \"sectionDetails\",\r\n                cellRendererFramework: AgGridHyperlinkComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Status\",\r\n                field: \"message\",\r\n                cellStyle: (params) => {\r\n                    if (params.value) {\r\n                        if (params.data.message === 'Cost Accrual' || params.data.message === 'Invoices not cash matched') {\r\n                            return { backgroundColor: 'LightSalmon', borderRadius: '2px !important;' };\r\n                        }\r\n                        if (params.data.message === 'Invoices not posted' || params.data.message === 'Cargo Accrual'\r\n                            || params.data.message === 'No BL date, Unrealized Contract' || params.data.message === 'Trade is Already Blocked') {\r\n                            return { backgroundColor: 'LightCoral', borderRadius: '2px !important;' };\r\n                        }\r\n                    }\r\n                },\r\n                cellRendererFramework: AgGridHyperlinkForCharterBulkClosureComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                },\r\n\r\n                tooltip: (params) => {\r\n                    if (params.data) {\r\n                        if (params.data.message === 'Cost accrual') {\r\n                            this.tooltipMessage = 'link to ‘cost’ tab';\r\n                        }\r\n                        else if (params.data.message === 'Invoices not cash matched') {\r\n                            this.tooltipMessage = 'link to ‘Invoice marking’ tab';\r\n                        }\r\n                        else if (params.data.message === 'Cargo Accrual') {\r\n                            this.tooltipMessage = 'link to ‘Invoice marking’ tab';\r\n                        }\r\n                        else if (params.data.message === 'Invoices not posted') {\r\n                            this.tooltipMessage = 'link to ‘Invoice marking’ tab';\r\n                        }\r\n\r\n                        return this.tooltipMessage;\r\n                    }\r\n\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Net accrual/ P&L value\",\r\n                field: \"netAccuralPnLValue\",\r\n            },\r\n            {\r\n                headerName: \"%Invoice\",\r\n                field: \"percentageInvoice\",\r\n            }\r\n        ];\r\n        this.getNodeChildDetails = function getNodeChildDetails(rowItem) {\r\n            if (rowItem.sectionsAssigned) {\r\n                return {\r\n                    group: true,\r\n                    expanded: false,\r\n                    children: rowItem.sectionsAssigned,\r\n                    key: rowItem.charterId,\r\n                    checkboxSelection: true\r\n                };\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    initializeRows() {\r\n        let treeStructuredCharter: CharterMatrixData[] = [];\r\n        this.charterDetailsMatrix.forEach((charter) => {\r\n            let charterTree: CharterMatrixData = new CharterMatrixData();\r\n            charterTree.sectionsAssigned = [];\r\n            let sectionTree: SectionMatrixData[] = [];\r\n            charterTree.charterId = charter.charterId;\r\n            charterTree.category = charter.category;\r\n            charterTree.charterCode = charter.charterCode;\r\n            charterTree.vesselName = charter.vesselName;\r\n            charterTree.description = charter.description ? charter.description : '';\r\n            if (charter.category === 'green') {\r\n                charterTree.rowHeader = `${charterTree.charterCode} - Vessel : ${charterTree.vesselName} - Department : ${charterTree.description} - Allowed for closure`;\r\n            }\r\n            if (charter.category === 'orange') {\r\n                charterTree.rowHeader = `${charterTree.charterCode} - Vessel : ${charterTree.vesselName} - Department : ${charterTree.description} - Risky for closure`;\r\n            }\r\n            if (charter.category === 'red') {\r\n                charterTree.rowHeader = `${charterTree.charterCode} - Vessel : ${charterTree.vesselName} - Department : ${charterTree.description} - Unavailable for closure`;\r\n            }\r\n            if (charter.sectionsAssigned) {\r\n                charter.sectionsAssigned.forEach((section) => {\r\n                    sectionTree.push({\r\n                        message: section.message,\r\n                        category: section.category,\r\n                        netAccuralPnLValue: this.getNetAccuralAndPnlValue(section),\r\n                        percentageInvoice: section.percentageInvoice,\r\n                        rowHeader: section.contractSectionCode,\r\n                        sectionId: section.sectionId,\r\n                        contractSectionCode: section.contractSectionCode,\r\n                        sectionDetails: section.contractSectionCode\r\n                    })\r\n                })\r\n                charterTree.sectionsAssigned = sectionTree;\r\n            }\r\n            treeStructuredCharter.push(charterTree);\r\n\r\n        });\r\n        treeStructuredCharter.sort((compareTo, compareFrom) => {\r\n            if (compareTo.category === 'green' && (compareFrom.category === 'orange' || compareFrom.category === 'red')) {\r\n                return -1;\r\n            }\r\n            else if (compareTo.category === 'orange' && compareFrom.category === 'red') {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        });\r\n        this.rowData = treeStructuredCharter;\r\n        this.bulkClosureGridOptions = {\r\n            context: this.gridContext,\r\n            rowSelection: 'multiple',\r\n        };\r\n        this.isGridReady = true;\r\n        this.autoSizeContractsGrid();\r\n        this.closeCharterGridReady.emit(true);\r\n    }\r\n\r\n    getNetAccuralAndPnlValue(section: AssignedSectionToCharterBulkClosure): string {\r\n        let result: string = '0';\r\n        if (section.netAccuralPnLValue === 0) {\r\n            if (section.costAssigned.length > 0) {\r\n                for (let i = 0; i < section.costAssigned.length; i++) {\r\n                    if (section.costAssigned[i].netAccrual !== 0 && result === '0') {\r\n                        result = section.costAssigned[i].netAccrual.toString() + ' ' + section.costAssigned[i].currencyCode;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            result = section.netAccuralPnLValue.toString() + ' ' + section.currencyCode;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.columnDefs;\r\n        this.gridParam = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.forEachNode((node) => {\r\n            if (node.data.charterId && node.data.category === 'green') {\r\n                node.setSelected(true);\r\n            }\r\n        });\r\n        setTimeout(() => {\r\n            this.gridParam.api.sizeColumnsToFit();\r\n        });\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        this.gridApi.forEachNode((node) => {\r\n            if (node.data.charterId && node.data.category === 'red') {\r\n                node.setSelected(false);\r\n                node.selectable = false;\r\n            }\r\n        });\r\n\r\n        const chartersRowsForClosure = this.gridApi.getSelectedRows();\r\n        if (chartersRowsForClosure.length > 0) {\r\n            this.chartersClose.emit(true);\r\n        }\r\n        else {\r\n            this.chartersClose.emit(false);\r\n        }\r\n        this.gridApi.refreshCells(event.data);\r\n        this.chartersForConfirmClosure = chartersRowsForClosure;\r\n        if (this.chartersForConfirmClosure.length === this.rowData.filter((c) => c.category !== 'red').length) {\r\n            this.selectAllCharterToClose = true;\r\n        }\r\n        else {\r\n            this.selectAllCharterToClose = false;\r\n        }\r\n\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (!this.gridApi) return;\r\n\r\n        setTimeout(() => {\r\n            this.gridApi.sizeColumnsToFit();\r\n            this.gridApi.onRowHeightChanged();\r\n        });\r\n    }\r\n\r\n    onSelectAllClicked(input: boolean) {\r\n        this.gridApi.forEachNode((node) => {\r\n            if (node.data.charterId && node.data.category === 'green') {\r\n                node.setSelected(input);\r\n            }\r\n        });\r\n    }\r\n\r\n    hyperlinkClicked(rowSelected: SectionMatrixData, event) {\r\n        const link = `${this.companyManager.getCurrentCompanyId()}/trades/display/${rowSelected.sectionId}`;\r\n        window.open(link, '_blank');\r\n    }\r\n}","import { SectionMatrixData } from \"./section-matrix-data\"\r\n\r\nexport class CharterMatrixData {\r\n    rowHeader: string;\r\n    sectionsAssigned: SectionMatrixData[];\r\n    charterId: number;\r\n    category: string;\r\n    vesselName: string;\r\n    description?: string;\r\n    netAccuralPnLValue: number;\r\n    charterCode: string;\r\n}","module.exports = \"<div>\\r\\n    <ag-grid-angular style=\\\"width: 100%; height:450px\\\"\\r\\n                     id=\\\"myGrid\\\"\\r\\n                     class=\\\"ag-theme-material\\\"\\r\\n                     [columnDefs]=\\\"columnDefs\\\"\\r\\n                     [rowData]=\\\"rowData\\\"\\r\\n                     [getNodeChildDetails]=\\\"getNodeChildDetails\\\"\\r\\n                     [gridOptions]=\\\"bulkClosureGridOptions\\\"\\r\\n                     (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                     [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                     [pagination]=\\\"true\\\"\\r\\n                     [paginationPageSize]=\\\"10\\\">\\r\\n    </ag-grid-angular>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { CharterBulkClosure } from '../../../../../shared/entities/charter-bulk-closure.entity';\r\nimport { CharterMatrixData } from '../charter-bulk-closure-matrix/charter-matrix-data';\r\nimport { SectionMatrixData } from '../charter-bulk-closure-matrix/section-matrix-data';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-bulk-closure-summary',\r\n    templateUrl: './charter-bulk-closure-summary.component.html',\r\n    styleUrls: ['./charter-bulk-closure-summary.component.scss']\r\n})\r\nexport class CharterBulkClosureSummaryComponent implements OnInit {\r\n\r\n    chartersForSummary: CharterBulkClosure[] = [];\r\n    columnDefs;\r\n    rowData: any[] = [];\r\n    bulkClosureGridOptions: agGrid.GridOptions = {};\r\n    gridParams;\r\n    gridContext = {\r\n        gridEditable: false,\r\n        componentParent: this,\r\n    };\r\n    getNodeChildDetails;\r\n    gridApi;\r\n    gridColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(public gridService: AgGridService, ) { }\r\n\r\n    ngOnInit() {\r\n        this.getGridColumns();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    charterForClosureSummary(charters: CharterBulkClosure[]) {\r\n        this.chartersForSummary = charters;\r\n        this.initializeGridRows();\r\n    }\r\n\r\n    getGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'Closed Charters',\r\n                field: \"rowHeader\",\r\n                cellRenderer: \"agGroupCellRenderer\",\r\n\r\n            }];\r\n        this.getNodeChildDetails = this.getNodeChildDetailsForTreeData;\r\n    }\r\n\r\n    getNodeChildDetailsForTreeData(rowItem) {\r\n        if (rowItem.sectionsAssigned) {\r\n            return {\r\n                group: true,\r\n                expanded: true,\r\n                children: rowItem.sectionsAssigned,\r\n                key: rowItem.charterId\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    initializeGridRows() {\r\n        let treeStructuredCharter: CharterMatrixData[] = [];\r\n        this.chartersForSummary.forEach((charter) => {\r\n            let charterTree: CharterMatrixData = new CharterMatrixData();\r\n            charterTree.sectionsAssigned = [];\r\n            let sectionTree: SectionMatrixData[] = [];\r\n            charterTree.charterId = charter.charterId;\r\n            charterTree.category = charter.category;\r\n            charterTree.charterCode = charter.charterCode;\r\n            charterTree.vesselName = charter.vesselName;\r\n            charterTree.rowHeader = `${charter.charterCode} - ${charter.vesselName}`;\r\n            if (charter.sectionsAssigned) {\r\n                charter.sectionsAssigned.forEach((section) => {\r\n                    sectionTree.push({\r\n                        message: '',\r\n                        category: section.category,\r\n                        netAccuralPnLValue: section.netAccuralPnLValue,\r\n                        percentageInvoice: section.percentageInvoice,\r\n                        rowHeader: section.contractSectionCode,\r\n                        sectionId: section.sectionId,\r\n                        contractSectionCode: section.contractSectionCode,\r\n                        sectionDetails: section.contractSectionCode\r\n                    })\r\n                })\r\n                charterTree.sectionsAssigned = sectionTree;\r\n            }\r\n            treeStructuredCharter.push(charterTree);\r\n\r\n        });\r\n\r\n        this.rowData = treeStructuredCharter;\r\n        this.bulkClosureGridOptions = {\r\n            context: this.gridContext,\r\n            rowHeight: 35,\r\n        };\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.columnDefs;\r\n        this.gridParams = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (!this.gridApi) return;\r\n\r\n        setTimeout(() => {\r\n            this.gridApi.sizeColumnsToFit();\r\n            this.gridApi.onRowHeightChanged();\r\n            this.gridApi.refreshCells(this.gridParams)\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <h2>Charter to close</h2>\\r\\n    <mat-card class=\\\"search-card\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <form [formGroup]=\\\"searchForm\\\"\\r\\n                  ng-submit=\\\"onSearchCharters()\\\"\\r\\n                  class=\\\"large-form\\\">\\r\\n                <mat-form-field appearance=\\\"outline\\\"\\r\\n                                id=\\\"charter-search\\\">\\r\\n                    <input required\\r\\n                           specialIsAlphaNumeric\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           matInput\\r\\n                           formControlName=\\\"searchCharterReferenceCtrl\\\"\\r\\n                           (keydown.enter)=\\\"onSearchCharters()\\\"\\r\\n                           placeholder=\\\"Charter Ref\\\" />\\r\\n                </mat-form-field>\\r\\n            </form>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onSearchCharters()\\\"\\r\\n                    class=\\\"heroGradient mat-raised-button\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"mat-elevation-z1 padding-small\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\" table-title atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Charters</h2>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"charterGridOptions && charterGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"charterGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"componentId\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div style=\\\"width: 100%; height:100%\\\">\\r\\n            <div ag-grid=\\\"charterGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height:100%\\\">\\r\\n                <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"charterGridRows\\\"\\r\\n                                 [columnDefs]=\\\"charterGridColumns\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\"\\r\\n                                 rowSelection=\\\"multiple\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".mat-table {\\n  overflow: auto; }\\n\\n.mat-form-field-wrapper {\\n  padding-bottom: 0px;\\n  margin-top: 0px !important;\\n  margin-bottom: 0px !important; }\\n\\n.mat-form-field-flex {\\n  height: 44px !important;\\n  font-size: 14px !important;\\n  border-top-left-radius: 0px !important;\\n  border-bottom-left-radius: 0px !important; }\\n\\n.no-margin {\\n  margin: 0; }\\n\\n.mat-form-field-infix {\\n  padding-top: 5px !important; }\\n\\n.mat-error {\\n  margin-top: 15px; }\\n\\n.large-form {\\n  width: 100%;\\n  border-radius: 5px 5px;\\n  background-color: white; }\\n\\n.search-card {\\n  margin-bottom: 30px; }\\n\\n.search-bar {\\n  border-radius: 5px 5px;\\n  background-color: #FFFAFC; }\\n\\n.table-title {\\n  background-color: white; }\\n\\n.ag-header-row {\\n  border-style: none !important; }\\n\\n.loading {\\n  background-color: white;\\n  padding-top: 2%;\\n  padding-bottom: 2%; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\"","import { Component, OnInit, ViewChild, Output, EventEmitter } from '@angular/core';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component'\r\nimport { MatPaginator, MatSort } from '@angular/material';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CharterDisplayView } from '../../../../../shared/models/charter-display-view';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { CharterStatus } from '../../../../../shared/enums/charter-status.enum';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { Vessel } from '../../../../../shared/entities/vessel.entity';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { TransportType } from '../../../../../shared/entities/transport-type.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-selection-bulk-closure',\r\n    templateUrl: './charter-selection-bulk-closure.component.html',\r\n    styleUrls: ['./charter-selection-bulk-closure.component.scss']\r\n})\r\nexport class CharterSelectionBulkClosureComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild(MatPaginator) paginator: MatPaginator;\r\n    @ViewChild(MatSort) sort: MatSort;\r\n    @Output() readonly charterSelected = new EventEmitter<boolean>();\r\n    searchForm: FormGroup;\r\n    searchCharterReferenceCtrl = new AtlasFormControl('searchCharterReferenceCtrl');\r\n    charterGridRows: CharterDisplayView[];\r\n    masterdata: MasterData;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    company: string;\r\n    charters: CharterDisplayView[];\r\n    dataLength = 0;\r\n    isLoading: boolean = true;\r\n    transportTypeRecord: TransportType[];\r\n    charterGridOptions: agGrid.GridOptions = {};\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    excelStyles: any;\r\n    searchTerm: string;\r\n    gridApi: agGrid.GridApi;\r\n    selectedCharterForBulkFunctions: Charter[];\r\n\r\n    charterGridColumns: agGrid.ColDef[] = [\r\n        {\r\n            headerName: '',\r\n            colId: 'selection',\r\n            headerCheckboxSelection: true,\r\n            checkboxSelection: true,\r\n            minWidth: 40,\r\n            maxWidth: 40,\r\n            pinned: 'left',\r\n        },\r\n        {\r\n            headerName: 'Reference',\r\n            field: 'charterCode',\r\n            colId: 'charterCode',\r\n            hide: false,\r\n            sort: 'asc',\r\n        },\r\n        {\r\n            headerName: 'Transport Type',\r\n            field: 'transportType',\r\n            colId: 'transportType',\r\n            hide: true,\r\n        },\r\n        {\r\n            headerName: 'Vessel',\r\n            field: 'vessel',\r\n            colId: 'vessel',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Description',\r\n            field: 'description',\r\n            colId: 'description',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Charter Status',\r\n            field: 'charterStatusId',\r\n            colId: 'charterStatusId',\r\n            valueFormatter: this.charterStatusFormatter,\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Charter Manager',\r\n            field: 'charterManagerSamAccountName',\r\n            colId: 'charterManagerSamAccountName',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Dept',\r\n            colId: 'departmentId',\r\n            field: 'departmentId',\r\n            valueFormatter: this.departmentDescriptionFormatter.bind(this),\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Charter B/L Date',\r\n            field: 'blDate',\r\n            colId: 'blDate',\r\n            hide: false,\r\n            valueFormatter: (params) => {\r\n                return this.uiService.dateFormatter(params);\r\n            },\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.blDate);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Created By',\r\n            field: 'createdBy',\r\n            colId: 'createdBy',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Date Created',\r\n            field: 'creationDate',\r\n            colId: 'creationDate',\r\n            hide: false,\r\n            valueFormatter: (params) => {\r\n                return this.uiService.dateFormatter(params);\r\n            },\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.creationDate);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n    componentId: string = 'charterList';\r\n    hasGridSharing: boolean = false;\r\n    masterDataList = [\r\n        MasterDataProps.Ports,\r\n        MasterDataProps.TransportTypes,\r\n        MasterDataProps.Vessels,\r\n    ];\r\n\r\n    departmentDescriptionFormatter(params) {\r\n        const department = this.masterdata.departments.find((dept) => dept.departmentId === params.value);\r\n        if (params.value && department) {\r\n            return department.description;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    charterStatusFormatter(params) {\r\n        if (params.value && CharterStatus[params.value]) {\r\n            return CharterStatus[params.value].toString();\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n\r\n    constructor(private formBuilder: FormBuilder, protected titleService: TitleService,\r\n        public masterdataService: MasterdataService, protected uiService: UiService,\r\n        protected route: ActivatedRoute, private formatDate: FormatDatePipe, public gridService: AgGridService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService, private securityService: SecurityService,\r\n        private executionService: ExecutionService, ) {\r\n        this.searchForm = this.formBuilder.group({\r\n            searchCharterReferenceCtrl: this.searchCharterReferenceCtrl,\r\n        });\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.titleService.setTitle('Charters');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.route.snapshot.paramMap.get('company')\r\n\r\n        this.securityService.isSecurityReady().pipe(\r\n            concatMap(() => {\r\n                return this.gridConfigurationProvider.getConfiguration(this.company, this.componentId);\r\n            }),\r\n        ).subscribe((configuration) => {\r\n            this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            this.getAllCharters();\r\n        });\r\n    }\r\n\r\n    getAllCharters() {\r\n        this.masterdataService.getMasterData(this.masterDataList).subscribe((masterData: MasterData) => {\r\n            this.initView(masterData);\r\n        });\r\n    }\r\n\r\n    onSearchCharters() {\r\n        this.searchTerm = this.searchForm.get('searchCharterReferenceCtrl').value;\r\n        if (!this.searchTerm) {\r\n            return;\r\n        }\r\n\r\n        this.executionService.findChartersByReference(this.searchTerm)\r\n            .subscribe((data) => {\r\n                this.charters = data.value.map((charter) => {\r\n                    return new CharterDisplayView(charter);\r\n                });\r\n                this.charterGridRows = this.charters.filter((charter) =>\r\n                    charter.charterStatusId !== CharterStatus.Closed\r\n                );\r\n                this.dataLength = this.charterGridRows.length;\r\n            });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.charterGridColumns;\r\n        this.charterGridOptions = params;\r\n        this.gridColumnApi = this.charterGridOptions.columnApi;\r\n        this.gridApi = this.charterGridOptions.api;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    initView(masterData: MasterData) {\r\n\r\n        this.executionService.getCharters()\r\n            .subscribe((data) => {\r\n                this.charters = data.value.map((charter) => {\r\n                    return new CharterDisplayView(this.getDescriptions(masterData, charter));\r\n                });\r\n                this.charterGridRows = this.charters.filter((charter) =>\r\n                    charter.charterStatusId !== CharterStatus.Closed\r\n                );\r\n\r\n                this.isLoading = false;\r\n                this.dataLength = this.charterGridRows.length;\r\n            });\r\n\r\n    }\r\n\r\n    getDescriptions(masterData: MasterData, charter: Charter): Charter {\r\n\r\n        if (charter.transportTypeCode) {\r\n            this.transportTypeRecord = masterData.transportTypes\r\n                .filter((transport) => transport.transportTypeCode\r\n                    .toLowerCase().trim() === charter.transportTypeCode.toString()\r\n                        .toLowerCase().trim());\r\n        }\r\n\r\n        if (this.transportTypeRecord && this.transportTypeRecord.length > 0) {\r\n            charter.transportTypeCode = this.transportTypeRecord[0].description;\r\n        }\r\n\r\n        let vesselRecord: Vessel;\r\n        if (charter.vesselCode) {\r\n            vesselRecord = masterData.vessels\r\n                .find((vessel) => vessel.vesselName.toLowerCase().trim() === charter.vesselCode.toString().toLowerCase().trim());\r\n        }\r\n\r\n        if (vesselRecord) {\r\n            charter.vesselCode = vesselRecord.vesselName;\r\n        }\r\n\r\n        return charter;\r\n    }\r\n    onSelectionChanged(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        if (selectedRows.length > 0) {\r\n            this.charterSelected.emit(true);\r\n        }\r\n        else {\r\n            this.charterSelected.emit(false);\r\n        }\r\n        this.gridApi.refreshCells(event.data);\r\n        this.selectedCharterForBulkFunctions = selectedRows;\r\n\r\n    }\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-horizontal-stepper [linear]\\r\\n                            (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                            #stepper>\\r\\n        <ng-template matStepperIcon=\\\"edit\\\">\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </ng-template>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Charters to Close</ng-template>\\r\\n            <atlas-charter-selection-bulk-closure #chartersSelected\\r\\n                                                  (charterSelected)=\\\"onCharterSelected($event)\\\">\\r\\n            </atlas-charter-selection-bulk-closure>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <button (click)=\\\"onCharterSelectionDiscardButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <button (click)=\\\"onCharterSelectionPreviousButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        PREVIOUS\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start \\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onCharterSelectionNextButtonClicked()\\\"\\r\\n                                [disabled]=\\\"isChartersNextDisabled\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Details</ng-template>\\r\\n            <atlas-charter-bulk-closure-matrix #charterBulkClosureMatrix\\r\\n                                               *ngIf=\\\"step > 1\\\"\\r\\n                                               [(charterDetailsMatrix)]=\\\"chartersForBulkClosure\\\"\\r\\n                                               (chartersClose)=\\\"onCharterClose($event)\\\"\\r\\n                                               (closeCharterGridReady)=\\\"onCharterCloseGridReady($event)\\\"\\r\\n                                               [chartersLength]=\\\"chartersLength\\\">\\r\\n            </atlas-charter-bulk-closure-matrix>\\r\\n            <br />\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 [style.display]=\\\"isCharterCloseGridReady ? 'block' : 'none'\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <button (click)=\\\"onClosureMatrixDiscardButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClosureMatrixPreviousButtonClicked()\\\">\\r\\n                        PREVIOUS\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start \\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onBulkClosureConfirmButtonClicked()\\\"\\r\\n                                [disabled]=\\\"isCharterConfirmClosureDisabled\\\">\\r\\n                            CONFIRM CHARTER CLOSURE\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Summary</ng-template>\\r\\n            <atlas-charter-bulk-closure-summary #charterBulkClosureSummary></atlas-charter-bulk-closure-summary>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start \\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onFinishButtonClicked()\\\">\\r\\n                            FINISH\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n    </mat-horizontal-stepper>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, OnDestroy, HostListener } from '@angular/core';\r\nimport { MatStepper, MatDialog } from '@angular/material'\r\nimport { Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component'\r\nimport { CharterSelectionBulkClosureComponent } from './charter-selection-bulk-closure/charter-selection-bulk-closure.component';\r\nimport { Charter } from '../../../../shared/entities/charter.entity';\r\nimport { CharterBulkClosureMatrixComponent } from './charter-bulk-closure-matrix/charter-bulk-closure-matrix.component';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { CharterBulkClosure } from '../../../../shared/entities/charter-bulk-closure.entity';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { InvoiceMarkingSearchResult } from '../../../../shared/dtos/invoice-marking';\r\nimport { PostingStatus } from '../../../../shared/enums/posting-status.enum';\r\nimport { InvoicingStatus } from '../../../../shared/enums/invoicing-status.enum';\r\nimport { ContractInvoiceType } from '../../../../shared/enums/contract-invoice-type.enum';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { CharterBulkClosureSummaryComponent } from './charter-bulk-closure-summary/charter-bulk-closure-summary.component';\r\nimport { CharterClosureStatus } from '../../../../shared/enums/charter-closure-status.enum';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity'\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-bulk-closure-function',\r\n    templateUrl: './execution-charter-bulk-closure-function.component.html',\r\n    styleUrls: ['./execution-charter-bulk-closure-function.component.scss']\r\n})\r\nexport class ExecutionCharterBulkClosureFunctionComponent implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('chartersSelected') chartersSelected: CharterSelectionBulkClosureComponent;\r\n    @ViewChild('charterBulkClosureMatrix') charterBulkClosureMatrix: CharterBulkClosureMatrixComponent;\r\n    @ViewChild('charterBulkClosureSummary') charterBulkClosureSummary: CharterBulkClosureSummaryComponent\r\n\r\n    isChartersNextDisabled: boolean = true;\r\n    isCharterConfirmClosureDisabled: boolean = true;\r\n    selectedCharterIds: number[] = [];\r\n    closureCharterIds: number[] = [];\r\n    charterBulkClosure: CharterBulkClosure[];\r\n    isLoading = false;\r\n    assigneSectionIds: number[] = [];\r\n    closureSectionIds: number[] = [];\r\n    defaultDate = 'Mon Jan 01 0001';\r\n    currentStep: number = 0;\r\n    chartersForBulkClosure: CharterBulkClosure[] = [];\r\n    chartersLength: number;\r\n    selectChartersForSummaryScreen: CharterBulkClosure[] = [];\r\n    isCharterCloseGridReady: boolean = false;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    destroy$ = new Subject();\r\n    step: number = 1;\r\n\r\n    constructor(private router: Router, private companyManager: CompanyManagerService,\r\n        protected dialog: MatDialog, protected executionService: ExecutionService, protected tradingService: TradingService,\r\n        protected lockService: LockService) { }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n    onCharterSelectionPreviousButtonClicked() {\r\n        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/execution/charter/groupfunctions']);\r\n    }\r\n\r\n    discardButtonDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                window.location.reload();\r\n            }\r\n        });\r\n    }\r\n\r\n    onCharterSelectionNextButtonClicked() {\r\n        const selectedCharters = this.chartersSelected.selectedCharterForBulkFunctions as Charter[];\r\n        this.chartersLength = selectedCharters.length;\r\n        this.selectedCharterIds = [];\r\n        this.selectedCharterIds = selectedCharters.map((element) => {\r\n            return element.charterId\r\n        });\r\n\r\n        if (this.selectedCharterIds) {\r\n            this.executionService.getAssignedSectionsForCharterList(this.selectedCharterIds)\r\n                .subscribe((data: CharterBulkClosure[]) => {\r\n                    if (data) {\r\n                        this.charterBulkClosure = data;\r\n                        this.charterBulkClosure.forEach((charter) => {\r\n                            this.checkCharterLocked(charter);\r\n                        });\r\n                        this.step = 2;\r\n                        this.stepper.next();\r\n                    }\r\n\r\n                });\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    onCharterSelectionDiscardButtonClicked() {\r\n        if (!this.isChartersNextDisabled) {\r\n            this.discardButtonDialog();\r\n\r\n        }\r\n        else {\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    onCharterSelected(charterSelected: boolean) {\r\n        if (charterSelected) {\r\n            this.isChartersNextDisabled = false\r\n        }\r\n        else {\r\n            this.isChartersNextDisabled = true;\r\n        }\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event) {\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n\r\n    checkCharterLocked(charter: CharterBulkClosure) {\r\n        this.lockService.isLockedCharter(charter.charterId).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                charter.category = 'red'\r\n                charter.message = 'Charter is Already Blocked';\r\n                this.checkTradeAvailableForClosure(charter);\r\n            }\r\n            else {\r\n                this.subscriptions.push(this.lockService.lockCharter(charter.charterId, LockFunctionalContext.CharterBulkClosure).pipe(\r\n                    takeUntil(this.destroy$),\r\n                ).subscribe(\r\n                    (data) => {\r\n                        this.checkTradeAvailableForClosure(charter);\r\n                    }\r\n                )\r\n                )\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    checkTradeAvailableForClosure(charter: CharterBulkClosure) {\r\n        let charterForClose = new CharterBulkClosure();\r\n        charterForClose.charterId = charter.charterId;\r\n        charterForClose.charterCode = charter.charterCode;\r\n        charterForClose.dataVersionId = charter.dataVersionId;\r\n        charterForClose.statusId = charter.statusId;\r\n        charterForClose.category = charter.category ? charter.category : 'green';\r\n        charterForClose.message = charter.message ? charter.message : '';\r\n        charterForClose.description = charter.description;\r\n        charterForClose.vesselName = charter.vesselName;\r\n        charterForClose.sectionsAssigned = [];\r\n        if (charter.sectionsAssigned.length > 0) {\r\n            this.tradingService.getAssigedSectionDetailsToCloseCharter(charter.sectionsAssigned.map((s) => s.sectionId))\r\n                .subscribe((data) => {\r\n                    if (data && data.length > 0) {\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            charterForClose.sectionsAssigned.push(charter.sectionsAssigned.find((x) => x.sectionId == data[i].sectionId));\r\n                            this.lockService.isLockedContract(data[i].sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n\r\n                                if (lock.isLocked) {\r\n                                    charterForClose.sectionsAssigned[i].category = 'red';\r\n                                    charterForClose.sectionsAssigned[i].message = 'Locked by ' + lock.message.split(' ')[7];\r\n                                    charterForClose.category = 'red'\r\n                                }\r\n                                else {\r\n                                    this.subscriptions.push(this.lockService.lockContract(data[i].sectionId, LockFunctionalContext.CharterBulkClosure).subscribe((res) => { }));\r\n                                    const validityStatus = this.checkSectionClosureValidity(data[i], data[i].invoices);\r\n                                    switch (validityStatus) {\r\n                                        case CharterClosureStatus.FullyInvoiced:\r\n                                        case CharterClosureStatus.CancelledShipping:\r\n                                        case CharterClosureStatus.ZeroQuantity:\r\n                                            charterForClose.sectionsAssigned[i].category = 'green';\r\n                                            break;\r\n                                        case CharterClosureStatus.UnpostedInvoice:\r\n                                            charterForClose.sectionsAssigned[i].category = 'red';\r\n                                            charterForClose.sectionsAssigned[i].message = 'Invoices not posted';\r\n                                            charterForClose.category = 'red';\r\n                                            break;\r\n                                        case CharterClosureStatus.InvoiceNotFinalized:\r\n                                            charterForClose.sectionsAssigned[i].category = 'red';\r\n                                            charterForClose.sectionsAssigned[i].message = 'Cargo Accrual';\r\n                                            charterForClose.category = 'red';\r\n                                            break;\r\n                                        case CharterClosureStatus.NoBlDateUnrelizedTrade:\r\n                                            charterForClose.sectionsAssigned[i].category = 'red';\r\n                                            charterForClose.sectionsAssigned[i].message = 'No BL date, Unrealized Contract';\r\n                                            charterForClose.category = 'red';\r\n                                            break;\r\n                                        case CharterClosureStatus.UninvoicedCosts:\r\n                                            charterForClose.sectionsAssigned[i].category = 'orange';\r\n                                            charterForClose.sectionsAssigned[i].message = 'Cost Accrual';\r\n                                            if (charterForClose.category != 'red') {\r\n                                                charterForClose.category = 'orange'\r\n                                            }\r\n                                            break;\r\n                                        case CharterClosureStatus.UncashmatchedCosts:\r\n                                            charterForClose.sectionsAssigned[i].category = 'orange';\r\n                                            charterForClose.sectionsAssigned[i].message = 'Invoices not cash matched';\r\n                                            if (charterForClose.category != 'red') {\r\n                                                charterForClose.category = 'orange';\r\n                                            }\r\n                                            break;\r\n                                    }\r\n                                }\r\n                                if (i + 1 === data.length) {\r\n                                    this.chartersForBulkClosure.push(charterForClose);\r\n\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.chartersForBulkClosure.push(charterForClose);\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            this.chartersForBulkClosure.push(charterForClose);\r\n        }\r\n    }\r\n\r\n\r\n    checkSectionClosureValidity(closeSectionModel: Section,\r\n        invoiceModel: InvoiceMarkingSearchResult[]): CharterClosureStatus {\r\n        let unpostedTradeInvoiceStatusList = invoiceModel.filter((invoice) => invoice.postingStatusId !== PostingStatus.Posted);\r\n        let cashUnMatchedInvoiceTradeList = invoiceModel.filter((invoice) => invoice.cashMatchPercentage !== 100);\r\n\r\n        const invoicePercentage = invoiceModel !== null || invoiceModel.length > 0 ? invoiceModel.reduce(function (a, b) { return a + b.invoicePercent; }, 0) : 0;\r\n        const costFilteredByInvoiceStatus = closeSectionModel.costs.filter((cost) => cost.invoiceStatus === InvoicingStatus.Uninvoiced);\r\n\r\n        if (invoiceModel.length > 0\r\n            && invoicePercentage === 100\r\n            && unpostedTradeInvoiceStatusList.length === 0\r\n            && cashUnMatchedInvoiceTradeList.length === 0\r\n            && (costFilteredByInvoiceStatus === null || costFilteredByInvoiceStatus.length === 0)) {\r\n            return CharterClosureStatus.FullyInvoiced;\r\n        }\r\n        else if (closeSectionModel.quantity === 0 || closeSectionModel.contractInvoiceTypeId === ContractInvoiceType.Cancellation) {\r\n            return CharterClosureStatus.ZeroQuantity;\r\n        }\r\n        else if (closeSectionModel.blDate === null ||\r\n            closeSectionModel.blDate.toDateString() === this.defaultDate) {\r\n            return CharterClosureStatus.NoBlDateUnrelizedTrade;\r\n        }\r\n        else if (closeSectionModel.invoicingStatusId !== InvoicingStatus.Finalized) {\r\n            return CharterClosureStatus.InvoiceNotFinalized;\r\n        }\r\n        else if (unpostedTradeInvoiceStatusList.length > 0) {\r\n            return CharterClosureStatus.UnpostedInvoice;\r\n        }\r\n        else if (costFilteredByInvoiceStatus.length > 0) {\r\n            return CharterClosureStatus.UninvoicedCosts;\r\n        }\r\n        else if (unpostedTradeInvoiceStatusList.length === 0 && cashUnMatchedInvoiceTradeList.length > 0) {\r\n            return CharterClosureStatus.UncashmatchedCosts;\r\n        }\r\n    }\r\n\r\n    onBulkClosureConfirmButtonClicked() {\r\n        this.charterClosureSelected();\r\n    }\r\n\r\n    charterClosureSelected() {\r\n        const selectedChartersForClosure = this.charterBulkClosureMatrix.chartersForConfirmClosure as CharterBulkClosure[];\r\n        this.closureCharterIds = selectedChartersForClosure.map((charter) => charter.charterId);\r\n        this.closureSectionIds = [];\r\n        selectedChartersForClosure.filter((element) => {\r\n            if (element.sectionsAssigned) {\r\n                element.sectionsAssigned.filter((section) => {\r\n                    this.closureSectionIds.push(section.sectionId);\r\n                })\r\n\r\n            }\r\n        });\r\n        if (this.closureSectionIds.length > 0) {\r\n            this.tradingService.closeSection(this.closureSectionIds).subscribe((ok) => {\r\n                if (ok) {\r\n                    this.executionService.closeCharter(this.closureCharterIds).subscribe((closedCharters: CharterBulkClosure[]) => {\r\n                        if (closedCharters) {\r\n                            this.selectChartersForSummaryScreen = closedCharters\r\n                            this.charterBulkClosureSummary.charterForClosureSummary(this.selectChartersForSummaryScreen);\r\n                            this.stepper.next();\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        else {\r\n            this.executionService.closeCharter(this.closureCharterIds).subscribe((closedCharters: CharterBulkClosure[]) => {\r\n                if (closedCharters) {\r\n                    this.selectChartersForSummaryScreen = closedCharters\r\n                    this.charterBulkClosureSummary.charterForClosureSummary(this.selectChartersForSummaryScreen);\r\n                    this.stepper.next();\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onClosureMatrixPreviousButtonClicked() {\r\n        this.stepper.previous();\r\n        this.chartersForBulkClosure = [];\r\n        this.charterBulkClosureMatrix.isGridReady = false;\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n    onClosureMatrixDiscardButtonClicked() {\r\n        if (!this.isCharterConfirmClosureDisabled) {\r\n            this.discardButtonFromDetailsStepperDialog()\r\n        }\r\n        else {\r\n            this.lockService.cleanSessionLocks().subscribe(() => {\r\n            });\r\n            this.router.navigate([this.companyManager.getCurrentCompanyId() + '/execution/charter']);\r\n\r\n        }\r\n    }\r\n\r\n    onCharterClose(charterForClosure: boolean) {\r\n        if (charterForClosure) {\r\n            this.isCharterConfirmClosureDisabled = false;\r\n        }\r\n        else {\r\n            this.isCharterConfirmClosureDisabled = true;\r\n        }\r\n    }\r\n\r\n    onCharterCloseGridReady(isCharterCloseGridReady: boolean) {\r\n        this.isCharterCloseGridReady = true;\r\n    }\r\n\r\n    onFinishButtonClicked() {\r\n        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/execution/charter']);\r\n    }\r\n\r\n    discardButtonFromDetailsStepperDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n\r\n                this.lockService.cleanSessionLocks().subscribe(() => {\r\n                });\r\n                this.router.navigate([this.companyManager.getCurrentCompanyId() + '/execution/charter']);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<div [ngSwitch]=\\\"charterBulkActionTypeId\\\">\\r\\n    <atlas-execution-charter-bulk-closure-function #charterBulkClosureFunction\\r\\n                                                   *ngSwitchCase=charterGroupFunction.CharterBulkClosure>\\r\\n    </atlas-execution-charter-bulk-closure-function>\\r\\n\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CharterGroupFunctionTypes } from '../../../shared/enums/charter-group-function-type';\r\nimport { ExecutionCharterBulkClosureFunctionComponent } from './bulk-closure-function/execution-charter-bulk-closure-function.component';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-charter-group-function',\r\n    templateUrl: './execution-charter-group-function.component.html',\r\n    styleUrls: ['./execution-charter-group-function.component.scss']\r\n})\r\nexport class ExecutionCharterGroupFunctionComponent implements OnInit {\r\n\r\n    charterBulkActionTypeId: number;\r\n    charterGroupFunction = CharterGroupFunctionTypes;\r\n    @ViewChild('charterBulkClosureFunction') charterBulkClosureFunction: ExecutionCharterBulkClosureFunctionComponent;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute, ) {\r\n        this.charterBulkActionTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('bulkActionTypeId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Additional Invoicing</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let invoicetype of invoiceTypeMenuItems\\\">\\r\\n            <mat-checkbox #costsCtrl\\r\\n                          [formControl]=\\\"costInvoiceCtrl\\\"\\r\\n                          [checked]=\\\"invoicetype.checked\\\"\\r\\n                          [value]=\\\"invoicetype.invoiceTypeId\\\"\\r\\n                          (change)=\\\"onInvoiceTypeChecked($event,costsCtrl.checked,invoicetype)\\\">{{invoicetype.name}}</mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { InvoiceType } from '../../../../shared/entities/invoice-type.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceTypes } from '../../../../shared/enums/invoice-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-form-component',\r\n    templateUrl: './cost-form-component.component.html',\r\n    styleUrls: ['./cost-form-component.component.scss'],\r\n})\r\nexport class CostFormComponentComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly costOptionChecked = new EventEmitter<any>();\r\n\r\n    costInvoiceCtrl = new AtlasFormControl('costInvoiceType');\r\n    invoiceTypeMenuItems: InvoiceType[];\r\n    masterData: MasterData;\r\n    company: string;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.invoiceTypeMenuItems = this.masterData.invoiceTypes.filter((invoicetype) => invoicetype.invoiceTypeId === InvoiceTypes.Cost);\r\n    }\r\n    onInvoiceTypeChecked($event, value, invoicetype) {\r\n        this.costOptionChecked.emit({\r\n            costOption: Number(invoicetype.invoiceTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            costInvoiceCtrl: this.costInvoiceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    costOptionDisable() {\r\n        this.costInvoiceCtrl.disable();\r\n    }\r\n    costOptionEnable() {\r\n        this.costInvoiceCtrl.enable();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Purchase of Goods</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let invoicetype of invoiceTypeMenuItems\\\">\\r\\n            <mat-checkbox #purchaseCtrl\\r\\n                          [formControl]=\\\"purchaseInvoiceCtrl\\\"\\r\\n                          [value]=\\\"invoicetype.invoiceTypeId\\\"\\r\\n                          (change)=\\\"OnChange($event,purchaseCtrl.checked,invoicetype)\\\">{{invoicetype.name}}</mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { InvoiceType } from '../../../../shared/entities/invoice-type.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from '../../../../shared/enums/contract-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\n\r\n@Component({\r\n    selector: 'atlas-purchase-goods-form-component',\r\n    templateUrl: './purchase-goods-form-component.component.html',\r\n    styleUrls: ['./purchase-goods-form-component.component.scss'],\r\n})\r\nexport class PurchaseGoodsFormComponentComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly purchaseOptionChecked = new EventEmitter<any>();\r\n    purchaseInvoiceCtrl = new AtlasFormControl('purchaseInvoiceType');\r\n    company: string;\r\n    invoiceTypeMenuItems: InvoiceType[];\r\n    masterData: MasterData = new MasterData();\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private masterDataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.invoiceTypeMenuItems = this.masterData.invoiceTypes.filter(\r\n            (contractCode) => contractCode.contractTypeCode === ContractTypes.Purchase);\r\n    }\r\n    OnChange($event, value, invoicetype) {\r\n        this.purchaseOptionChecked.emit({\r\n            purchaseOption: Number(invoicetype.invoiceTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            purchaseInvoiceCtrl: this.purchaseInvoiceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    purchaseOptionDisable() {\r\n        this.purchaseInvoiceCtrl.disable();\r\n    }\r\n    purchaseOptionEnable() {\r\n        this.purchaseInvoiceCtrl.enable();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2> Quantity to Invoice </h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div>\\r\\n            <mat-checkbox [checked]=\\\"true\\\"\\r\\n                          disabled=true>\\r\\n                <label>Contract</label>\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\n\r\n\r\n@Component({\r\n  selector: 'atlas-quantity-invoice-form-component',\r\n  templateUrl: './quantity-invoice-form-component.component.html',\r\n  styleUrls: ['./quantity-invoice-form-component.component.scss']\r\n})\r\nexport class QuantityInvoiceFormComponentComponent extends BaseFormComponent implements OnInit {\r\n\r\n\tconstructor(protected formBuilder: FormBuilder,\r\n\t\tprotected formConfigurationProvider: FormConfigurationProviderService) {\r\n\t\tsuper(formConfigurationProvider);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t}\r\n\tgetFormGroup() {\r\n\t\tthis.formGroup = this.formBuilder.group({\r\n\r\n\t\t});\r\n\t\treturn super.getFormGroup();\r\n\t}\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2> Reversal</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let invoiceType of invoiceTypeMenuItems\\\">\\r\\n            <mat-checkbox #reversalsCtrl\\r\\n                          [formControl]=\\\"reversalCtrl\\\"\\r\\n                          [checked]=\\\"invoiceType.checked\\\"\\r\\n                          [value]=\\\"invoiceType.invoiceTypeId\\\"\\r\\n                          (change)=\\\"onInvoiceTypeChecked($event,reversalsCtrl.checked,invoiceType)\\\">{{invoiceType.name}}</mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { InvoiceType } from '../../../../shared/entities/invoice-type.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceTypes } from '../../../../shared/enums/invoice-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-reversal-form-component',\r\n    templateUrl: './reversal-form-component.component.html',\r\n    styleUrls: ['./reversal-form-component.component.scss'],\r\n})\r\nexport class ReversalFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly reversalOptionChecked = new EventEmitter<any>();\r\n    reversalCtrl = new AtlasFormControl('reversalType');\r\n    invoiceTypeMenuItems: InvoiceType[];\r\n    masterData: MasterData;\r\n    company: string;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.invoiceTypeMenuItems = this.masterData.invoiceTypes\r\n            .filter((invoiceType) => invoiceType.invoiceTypeId === InvoiceTypes.Reversal);\r\n    }\r\n    onInvoiceTypeChecked($event, value, invoiceType) {\r\n        this.reversalOptionChecked.emit({\r\n            reversalOption: Number(invoiceType.invoiceTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            reversalCtrl: this.reversalCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    reversalOptionDisable() {\r\n        this.reversalCtrl.disable();\r\n    }\r\n    reversalOptionEnable() {\r\n        this.reversalCtrl.enable();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Sales of Goods</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let invoicetype of invoiceTypeMenuItems\\\">\\r\\n            <mat-checkbox #salesCtrl\\r\\n                          [formControl]=\\\"salesInvoiceCtrl\\\"\\r\\n                          [value]=\\\"invoicetype.invoiceTypeId\\\"\\r\\n                          (change)=\\\"OnChange($event,salesCtrl.checked,invoicetype)\\\">{{invoicetype.name}}</mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { InvoiceType } from '../../../../shared/entities/invoice-type.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from '../../../../shared/enums/contract-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\n\r\n@Component({\r\n    selector: 'atlas-sales-goods-form-component',\r\n    templateUrl: './sales-goods-form-component.component.html',\r\n    styleUrls: ['./sales-goods-form-component.component.scss'],\r\n})\r\nexport class SalesGoodsFormComponentComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly salesOptionChecked = new EventEmitter<any>();\r\n    salesInvoiceCtrl = new AtlasFormControl('salesInvoiceType');\r\n    company: string;\r\n    invoiceTypeMenuItems: InvoiceType[];\r\n    masterData: MasterData = new MasterData();\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private masterDataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.invoiceTypeMenuItems = this.masterData.invoiceTypes.filter(\r\n            (contractCode) => contractCode.contractTypeCode === ContractTypes.Sale);\r\n    }\r\n    OnChange($event, value, invoicetype) {\r\n        this.salesOptionChecked.emit({\r\n            saleOption: Number(invoicetype.invoiceTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            salesInvoiceCtrl: this.salesInvoiceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    salesOptionDisable() {\r\n        this.salesInvoiceCtrl.disable();\r\n    }\r\n    salesOptionEnable() {\r\n        this.salesInvoiceCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Other Settlements</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let invoiceType of invoiceTypeMenuItems\\\">\\r\\n            <mat-checkbox #washoutsCtrl\\r\\n                          [formControl]=\\\"washoutCtrl\\\"\\r\\n                          [checked]=\\\"invoiceType.checked\\\"\\r\\n                          [value]=\\\"invoiceType.invoiceTypeId\\\"\\r\\n                          (change)=\\\"onInvoiceTypeChecked($event,washoutsCtrl.checked,invoiceType)\\\">{{invoiceType.name}}</mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { InvoiceType } from '../../../../shared/entities/invoice-type.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceTypes } from '../../../../shared/enums/invoice-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-washout-form-component',\r\n    templateUrl: './washout-form-component.component.html',\r\n    styleUrls: ['./washout-form-component.component.scss'],\r\n})\r\nexport class WashoutFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly washoutOptionChecked = new EventEmitter<any>();\r\n\r\n    washoutCtrl = new AtlasFormControl('washoutType');\r\n    invoiceTypeMenuItems: InvoiceType[];\r\n    masterData: MasterData;\r\n    company: string;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.invoiceTypeMenuItems = this.masterData.invoiceTypes\r\n            .filter((invoicetype) => invoicetype.invoiceTypeId === InvoiceTypes.Washout);\r\n    }\r\n    onInvoiceTypeChecked($event, value, invoiceType) {\r\n        this.washoutOptionChecked.emit({\r\n            washoutOption: Number(invoiceType.invoiceTypeId),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            washoutCtrl: this.washoutCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    washoutOptionDisable() {\r\n        this.washoutCtrl.disable();\r\n    }\r\n    washoutOptionEnable() {\r\n        this.washoutCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<form>\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <div fxLayout=\\\"row wrap\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxFlex=\\\"32\\\">\\r\\n                <atlas-purchase-goods-form-component #purchaseGoodsComponent\\r\\n                                                     fxFlex=\\\"32\\\"\\r\\n                                                     fxFlex.lt-md=\\\"85\\\"\\r\\n                                                     (purchaseOptionChecked)=\\\"onPurchaseOptionChecked($event)\\\">\\r\\n                </atlas-purchase-goods-form-component>\\r\\n\\r\\n                <atlas-cost-form-component #costComponent\\r\\n                                           fxFlex=\\\"32\\\"\\r\\n                                           fxFlex.lt-md=\\\"85\\\"\\r\\n                                           (costOptionChecked)=\\\"onCostsOptionChecked($event)\\\">\\r\\n                </atlas-cost-form-component>\\r\\n                <atlas-reversal-form-component #reversalFormComponent\\r\\n                                               fxFlex=\\\"32\\\"\\r\\n                                               fxFlex.lt-md=\\\"85\\\"\\r\\n                                               (reversalOptionChecked)=\\\"onReversalOptionChecked($event)\\\">\\r\\n\\r\\n                </atlas-reversal-form-component>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxFlex=\\\"32\\\">\\r\\n                <atlas-sales-goods-form-component #salesGoodsComponent\\r\\n                                                  fxFlex=\\\"32\\\"\\r\\n                                                  fxFlex.lt-md=\\\"85\\\"\\r\\n                                                  (salesOptionChecked)=\\\"onSalesOptionChecked($event)\\\">\\r\\n                </atlas-sales-goods-form-component>\\r\\n                <atlas-washout-form-component #washoutFormComponent\\r\\n                                              fxFlex=\\\"32\\\"\\r\\n                                              fxFlex.lt-md=\\\"85\\\"\\r\\n                                              (washoutOptionChecked)=\\\"onWashoutsOptionChecked($event)\\\">\\r\\n                </atlas-washout-form-component>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxFlex=\\\"32\\\">\\r\\n                <atlas-quantity-invoice-form-component #quantityInvoiceComponent\\r\\n                                                       fxFlex=\\\"32\\\"\\r\\n                                                       fxFlex.lt-md=\\\"85\\\"></atlas-quantity-invoice-form-component>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"btn-container\\\">\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                    Discard\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onNextButtonClicked(invoiceOption)\\\"\\r\\n                        [disabled]=\\\"isDisabled\\\">\\r\\n                    Next\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"atlas-purchase-goods-form-component .mat-card,\\natlas-sales-goods-form-component .mat-card,\\natlas-quantity-invoice-form-component .mat-card {\\n  height: 85px; }\\n\"","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { InvoiceTypes } from '../../shared/enums/invoice-type.enum';\r\nimport { FormConfigurationProviderService } from '../../shared/services/form-configuration-provider.service';\r\nimport { TitleService } from '../../shared/services/title.service';\r\nimport { InvoiceSelectionFormComponent } from '../execution-invoicing/commercial/components/commercial-selection/components/invoice-selection-form-component/invoice-selection-form-component.component';\r\nimport { CostFormComponentComponent } from './components/cost-form-component/cost-form-component.component';\r\nimport { PurchaseGoodsFormComponentComponent } from './components/purchase-goods-form-component/purchase-goods-form-component.component';\r\nimport { QuantityInvoiceFormComponentComponent } from './components/quantity-invoice-form-component/quantity-invoice-form-component.component';\r\nimport { ReversalFormComponent } from './components/reversal-form-component/reversal-form-component.component';\r\nimport { SalesGoodsFormComponentComponent } from './components/sales-goods-form-component/sales-goods-form-component.component';\r\nimport { WashoutFormComponent } from './components/washout-form-component/washout-form-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-invoicing-create',\r\n    templateUrl: './execution-invoicing-create.component.html',\r\n    styleUrls: ['./execution-invoicing-create.component.scss'],\r\n})\r\nexport class ExecutionInvoicingCreateComponent extends BaseFormComponent implements OnInit {\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n    invoiceCreationFormGroup: FormGroup;\r\n    invoiceOption: number;\r\n    isPurchaseChecked: boolean = false;\r\n    isSalesChecked: boolean = false;\r\n    isCostChecked: boolean = false;\r\n    isSave: boolean = false;\r\n    isDisabled: boolean = true;\r\n\r\n    @ViewChild('purchaseGoodsComponent') purchaseGoodsComponent: PurchaseGoodsFormComponentComponent;\r\n    @ViewChild('quantityInvoiceComponent') quantityInvoiceComponent: QuantityInvoiceFormComponentComponent;\r\n    @ViewChild('salesGoodsComponent') salesGoodsComponent: SalesGoodsFormComponentComponent;\r\n    @ViewChild('invoiceSelectionFormComponent') invoiceSelectionFormComponent: InvoiceSelectionFormComponent;\r\n    @ViewChild('costComponent') costComponent: CostFormComponentComponent;\r\n    @ViewChild('washoutFormComponent') washoutFormComponent: WashoutFormComponent;\r\n    @ViewChild('reversalFormComponent') reversalFormComponent: ReversalFormComponent;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private router: Router,\r\n        protected dialog: MatDialog,\r\n        private companyManager: CompanyManagerService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceCreationFormGroup = this.formBuilder.group({\r\n            purchaseGoodsComponent: this.purchaseGoodsComponent.getFormGroup(),\r\n            quantityInvoiceComponent: this.quantityInvoiceComponent.getFormGroup(),\r\n            salesGoodsComponent: this.salesGoodsComponent.getFormGroup(),\r\n            costComponent: this.costComponent.getFormGroup(),\r\n            washoutFormComponent: this.washoutFormComponent.getFormGroup(),\r\n            reversalFormComponent: this.reversalFormComponent.getFormGroup(),\r\n        });\r\n        this.titleService.setTitle('New Invoice');\r\n        this.formComponents.push(\r\n            this.purchaseGoodsComponent,\r\n            this.quantityInvoiceComponent,\r\n            this.salesGoodsComponent,\r\n            this.costComponent,\r\n            this.washoutFormComponent,\r\n            this.reversalFormComponent,\r\n        );\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification($event: any) {\r\n        if (this.invoiceCreationFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.invoiceCreationFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/invoicing/home']);\r\n            }\r\n        });\r\n    }\r\n\r\n    onNextButtonClicked(invoiceOption) {\r\n            this.isSave = true;\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/' + encodeURIComponent(invoiceOption)]);\r\n    }\r\n    onPurchaseOptionChecked($event) {\r\n        this.invoiceOption = $event.purchaseOption;\r\n        this.isPurchaseChecked = false;\r\n        if ($event.checked) {\r\n            this.isPurchaseChecked = true;\r\n            if (this.isPurchaseChecked || this.isCostChecked) {\r\n                this.isDisabled = false;\r\n            }\r\n            if (this.isCostChecked) {\r\n                this.invoiceOption = InvoiceTypes.GoodsCostPurchase;\r\n            }\r\n            this.salesGoodsComponent.salesOptionDisable();\r\n            this.washoutFormComponent.washoutOptionDisable();\r\n            this.reversalFormComponent.reversalOptionDisable();\r\n\r\n        } else {\r\n            if (this.isPurchaseChecked && this.isCostChecked) {\r\n                this.isDisabled = true;\r\n            } else if (this.isPurchaseChecked || this.isCostChecked) {\r\n                this.isDisabled = false;\r\n            } else {\r\n                this.isDisabled = true;\r\n            }\r\n            this.salesGoodsComponent.salesOptionEnable();\r\n            if (!this.isCostChecked) {\r\n                this.washoutFormComponent.washoutOptionEnable();\r\n                this.reversalFormComponent.reversalOptionEnable();\r\n            }\r\n        }\r\n    }\r\n    onSalesOptionChecked($event) {\r\n        this.invoiceOption = $event.saleOption;\r\n        this.isSalesChecked = false;\r\n        if ($event.checked) {\r\n            if (this.isCostChecked) {\r\n                this.invoiceOption = InvoiceTypes.GoodsCostSales;\r\n            }\r\n            this.isSalesChecked = true;\r\n            if (this.isSalesChecked || this.isCostChecked) {\r\n                this.isDisabled = false;\r\n            }\r\n            this.purchaseGoodsComponent.purchaseOptionDisable();\r\n            this.washoutFormComponent.washoutOptionDisable();\r\n            this.reversalFormComponent.reversalOptionDisable();\r\n        } else {\r\n            if (this.isSalesChecked && this.isCostChecked) {\r\n                this.isDisabled = true;\r\n            } else if (this.isSalesChecked || this.isCostChecked) {\r\n                this.isDisabled = false;\r\n            } else {\r\n                this.isDisabled = true;\r\n            }\r\n            this.purchaseGoodsComponent.purchaseOptionEnable();\r\n            if (!this.isCostChecked) {\r\n                this.washoutFormComponent.washoutOptionEnable();\r\n                this.reversalFormComponent.reversalOptionEnable();\r\n            }\r\n        }\r\n    }\r\n    onCostsOptionChecked($event) {\r\n        this.invoiceOption = $event.costOption;\r\n        this.isCostChecked = false;\r\n        if ($event.checked) {\r\n            this.isCostChecked = true;\r\n            if (this.isPurchaseChecked || this.isCostChecked) {\r\n                this.isDisabled = false;\r\n            }\r\n            if (this.isSalesChecked) {\r\n                this.invoiceOption = InvoiceTypes.GoodsCostSales;\r\n                this.salesGoodsComponent.salesOptionEnable();\r\n            } else if (this.isPurchaseChecked) {\r\n                this.invoiceOption = InvoiceTypes.GoodsCostPurchase;\r\n                this.purchaseGoodsComponent.purchaseOptionEnable();\r\n            }\r\n            this.washoutFormComponent.washoutOptionDisable();\r\n            this.reversalFormComponent.reversalOptionDisable();\r\n        } else {\r\n            if (this.isPurchaseChecked && this.isCostChecked) {\r\n                this.isDisabled = true;\r\n            } else if (this.isPurchaseChecked || this.isCostChecked || this.isSalesChecked) {\r\n                this.isDisabled = false;\r\n            } else {\r\n                this.isDisabled = true;\r\n            }\r\n            if (this.isSalesChecked) {\r\n                this.enableSaleAndDisableOtherInvoiceOptions();\r\n            } else if (this.isPurchaseChecked) {\r\n                this.enablePurchaseAndDisableOtherInvoiceOptions();\r\n            } else {\r\n                this.enableAllInvoiceOptions();\r\n            }\r\n        }\r\n    }\r\n\r\n    enableAllInvoiceOptions() {\r\n        this.purchaseGoodsComponent.purchaseOptionEnable();\r\n        this.salesGoodsComponent.salesOptionEnable();\r\n        this.washoutFormComponent.washoutOptionEnable();\r\n        this.reversalFormComponent.reversalOptionEnable();\r\n    }\r\n\r\n    enablePurchaseAndDisableOtherInvoiceOptions() {\r\n        this.invoiceOption = InvoiceTypes.Purchase;\r\n        this.purchaseGoodsComponent.purchaseOptionEnable();\r\n        this.salesGoodsComponent.salesOptionDisable();\r\n        this.washoutFormComponent.washoutOptionDisable();\r\n        this.reversalFormComponent.reversalOptionDisable();\r\n    }\r\n\r\n    enableSaleAndDisableOtherInvoiceOptions() {\r\n        this.invoiceOption = InvoiceTypes.Sales;\r\n        this.salesGoodsComponent.salesOptionEnable();\r\n        this.purchaseGoodsComponent.purchaseOptionDisable();\r\n        this.washoutFormComponent.washoutOptionDisable();\r\n        this.reversalFormComponent.reversalOptionDisable();\r\n    }\r\n\r\n    onWashoutsOptionChecked($event) {\r\n        this.invoiceOption = $event.washoutOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.salesGoodsComponent.salesOptionDisable();\r\n            this.purchaseGoodsComponent.purchaseOptionDisable();\r\n            this.costComponent.costOptionDisable();\r\n            this.reversalFormComponent.reversalOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.salesGoodsComponent.salesOptionEnable();\r\n            this.purchaseGoodsComponent.purchaseOptionEnable();\r\n            this.costComponent.costOptionEnable();\r\n            this.reversalFormComponent.reversalOptionEnable();\r\n        }\r\n    }\r\n    onReversalOptionChecked($event) {\r\n        this.invoiceOption = $event.reversalOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.salesGoodsComponent.salesOptionDisable();\r\n            this.purchaseGoodsComponent.purchaseOptionDisable();\r\n            this.costComponent.costOptionDisable();\r\n            this.washoutFormComponent.washoutOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.salesGoodsComponent.salesOptionEnable();\r\n            this.purchaseGoodsComponent.purchaseOptionEnable();\r\n            this.costComponent.costOptionEnable();\r\n            this.washoutFormComponent.washoutOptionEnable();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                              [fabType]=\\\"fabType\\\"\\r\\n                              [fabActions]=\\\"fabMenuActions\\\"\\r\\n                              [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                              (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n</atlas-floating-action-button>\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <atlas-masterdata-user-preferences-input fxFlex=\\\"45%\\\"\\r\\n                                                     isEditable=\\\"true\\\"\\r\\n                                                     [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                     [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                     label=\\\"Counter Party\\\"\\r\\n                                                     (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                                     displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                     [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                     [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                     gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                     [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       fxFlex=\\\"45%\\\"\\r\\n                       value=\\\"\\\"\\r\\n                       [formControl]=\\\"invoiceReferenceCtrl\\\"\\r\\n                       placeholder=\\\"Invoice Reference\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #action>\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n    <atlas-list-and-search class=\\\"default-height\\\" [gridCode]=\\\"gridCode\\\"\\r\\n                           (rowClicked)=\\\"onInvoiceRowClicked($event)\\\"\\r\\n                           (quickNavigate)=\\\"onQuickNavigate($event)\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           gridTitle=\\\"Invoices\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n</div>\"","module.exports = \":host ::ng-deep.ag-menu {\\n  overflow-y: hidden !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../core/services/company-manager.service';\r\nimport { FABType } from '../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AtlasFormControl } from '../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from '../../shared/entities/counterparty.entity';\r\nimport { FloatingActionButtonActions } from '../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { InvoiceType } from '../../shared/entities/invoice-type.entity';\r\nimport { MasterData } from '../../shared/entities/masterdata.entity';\r\nimport { InvoiceDataLoader } from '../../shared/services/list-and-search/invoice-data-loader';\r\nimport { CounterPartyDataLoader } from '../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SecurityService } from '../../shared/services/security.service';\r\nimport { UtilService } from '../../shared/services/util.service';\r\nimport { ListAndSearchComponent } from './../../shared/components/list-and-search/list-and-search.component';\r\nimport { ListAndSearchFilter } from './../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { InvoiceTypes } from './../../shared/enums/invoice-type.enum';\r\nimport { ListAndSearchFilterType } from './../../shared/enums/list-and-search-filter-type.enum';\r\nimport { PermissionLevels } from './../../shared/enums/permission-level.enum';\r\nimport { InvoiceHomeSearch } from './../../shared/services/execution/dtos/invoice-home-search';\r\nimport { TitleService } from './../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-invoicing-home',\r\n    templateUrl: './execution-invoicing-home.component.html',\r\n    styleUrls: ['./execution-invoicing-home.component.scss'],\r\n    providers: [InvoiceDataLoader, CounterPartyDataLoader],\r\n})\r\nexport class ExecutionInvoicingHomeComponent implements OnInit {\r\n\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    gridCode = 'invoiceList';\r\n\r\n    invoices: InvoiceHomeSearch[];\r\n    showInvoices: boolean;\r\n    invoiceTypeMap: Map<number, string> = new Map<number, string>();\r\n    invoiceReferenceCtrl: FormControl = new FormControl();\r\n    showResults: boolean;\r\n    invoiceTypeMenuItems: InvoiceType[];\r\n    PermissionLevels = PermissionLevels;\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    filteredCounterPartyList: Counterparty[];\r\n    masterdata: MasterData = new MasterData();\r\n    counterPartyCtrl = new AtlasFormControl('CounterPartyHomeInvoice');\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Counter Party not in the list.');\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: InvoiceDataLoader,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        protected utilService: UtilService,\r\n        private authorizationService: AuthorizationService,\r\n        private titleService: TitleService) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.company = this.route.snapshot.paramMap.get('company');\r\n        });\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.initFABActions();\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onQuickSearchButtonClicked();\r\n        }\r\n    }\r\n    onNewInvoiceButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/invoicing/new']);\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        this.additionalFilters = [];\r\n        let searchCounterParty: string;\r\n        if (this.counterPartyCtrl.value) {\r\n            searchCounterParty = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n            if (!searchCounterParty) {\r\n                searchCounterParty = this.counterPartyCtrl.value;\r\n            }\r\n        }\r\n        const invoicereferenceField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'InvoiceCode');\r\n        const counterpartyCodeField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'CounterParty');\r\n        if (!this.listAndSearchComponent) {\r\n            return;\r\n        } else {\r\n            if (this.invoiceReferenceCtrl.value && invoicereferenceField) {\r\n                const filterInvoiceReference = new ListAndSearchFilter();\r\n                filterInvoiceReference.fieldId = invoicereferenceField.fieldId;\r\n                filterInvoiceReference.fieldName = invoicereferenceField.fieldName;\r\n                filterInvoiceReference.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.invoiceReferenceCtrl.value + '%',\r\n                };\r\n                filterInvoiceReference.isActive = true;\r\n                this.additionalFilters = [filterInvoiceReference];\r\n            }\r\n            if (this.counterPartyCtrl.value && counterpartyCodeField) {\r\n                const filterCounterParty = new ListAndSearchFilter();\r\n                filterCounterParty.fieldId = counterpartyCodeField.fieldId;\r\n                filterCounterParty.fieldName = counterpartyCodeField.fieldName;\r\n                filterCounterParty.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: searchCounterParty + '%',\r\n                };\r\n                filterCounterParty.isActive = true;\r\n                this.additionalFilters.push(filterCounterParty);\r\n            }\r\n        }\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n    onQuickNavigate(event) {\r\n        let invoiceOption = event.invoiceId;\r\n        const invoiceType = event.invoiceTypeId;\r\n        const originalInvoiceType = event.originalInvoiceTypeId;\r\n        const orginalInvoiceId = event.data.orginalInvoiceId;\r\n        if (originalInvoiceType && orginalInvoiceId) {\r\n            if (invoiceType === InvoiceTypes.Reversal) {\r\n                invoiceOption = orginalInvoiceId;\r\n            }\r\n        }\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/summary/' + encodeURIComponent(invoiceOption)],\r\n            {\r\n                queryParams: { invoiceType, originalInvoiceType },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    onInvoiceRowClicked(event) {\r\n        let invoiceOption = event.data.invoiceId;\r\n        const invoiceType = event.data.invoiceTypeId;\r\n        const originalInvoiceType = event.data.originalInvoiceTypeId;\r\n        const originalInvoiceId = event.data.originalInvoiceId;\r\n        if (originalInvoiceType && originalInvoiceId) {\r\n            if (invoiceType === InvoiceTypes.Reversal) {\r\n                invoiceOption = originalInvoiceId;\r\n            }\r\n        }\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/summary/' + encodeURIComponent(invoiceOption)],\r\n            {\r\n                queryParams: { invoiceType, originalInvoiceType },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    initFABActions() {\r\n        this.fabTitle = 'CREATE INVOICE';\r\n        this.fabType = FABType.ExtendedSingleButton;\r\n\r\n        const actionCreateInvoice: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'CREATE INVOICE',\r\n            action: 'createInvoice',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n\r\n        if (this.checkInvoiceCreationPrivilege()) {\r\n            this.fabMenuActions.push(actionCreateInvoice);\r\n        }\r\n\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    checkInvoiceCreationPrivilege() {\r\n        if (this.authorizationService.isPrivilegeAllowed(this.company, 'Invoices')) {\r\n            if (this.authorizationService.isPrivilegeAllowed(\r\n                this.company, 'InvoiceCreation', PermissionLevels.ReadWrite)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        this.onNewInvoiceButtonClicked();\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"commercialInvoiceFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Contract Selection Screen</ng-template>\\r\\n                <atlas-commercial-selection #commercialSelectionComponent\\r\\n                                            [companyWeightCode]=\\\"weightCode\\\"\\r\\n                                            (contractsSelected)=\\\"onContractsSelected($event)\\\"\\r\\n                                            (pricingAndDecimalOptionSelected)=\\\"onPricingAndDecimalOptionSelected($event)\\\">\\r\\n                </atlas-commercial-selection>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onMoveButtonClicked(invoicingSteps.workingStep)\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step [completed]=\\\"isCompleted\\\">\\r\\n                <ng-template matStepLabel>Invoice Working Page</ng-template>\\r\\n                <atlas-commercial-working-page #commercialWorkingPageComponent\\r\\n                                               [companyWeightCode]=\\\"weightCode\\\"\\r\\n                                               (totalCostTaxCalculated)=\\\"ontotalAmountCalculated($event)\\\"\\r\\n                                               (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\"\\r\\n                                               (templateSelected)=\\\"onDocumentTemplateSelected($event)\\\">\\r\\n                </atlas-commercial-working-page>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"end start\\\">\\r\\n                    <mat-slide-toggle [formControl]=\\\"previewDocumentCtrl\\\"\\r\\n                                      *ngIf=\\\"hasTemplate\\\">Preview Document </mat-slide-toggle>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            [disabled]=\\\"isLoading\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start end\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"end start\\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onBackButtonClicked(invoicingSteps.invoiceCreationStep)\\\"\\r\\n                                    [disabled]=\\\"isLoading\\\">\\r\\n                                BACK\\r\\n                            </button>\\r\\n                            <div\\r\\n                                 *ifAuthorized=\\\"'Invoices.InvoiceCreation', company:company, level: PermissionLevels.ReadWrite\\\">\\r\\n                                <button mat-raised-button\\r\\n                                        (click)=\\\"onOpenDialogOnPreviewOrSaveClicked()\\\"\\r\\n                                        [disabled]=\\\"isLoading\\\">\\r\\n                                    {{ previewDocumentCtrl.value ? \\\"Preview and Invoice\\\" : \\\"Create Invoice\\\" }}\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Invoice Summary Page</ng-template>\\r\\n                <atlas-commercial-summary #commercialSummaryComponent\\r\\n                                          [invoiceTaxContracts]=\\\"taxRecords\\\"\\r\\n                                          [filteredCompanyBankAccounts]=\\\"filteredCompanyBankAccounts\\\"\\r\\n                                          [isCreationMode]=\\\"isCreationMode\\\"\\r\\n                                          [invoiceCostContracts]=\\\"invoiceCostContracts\\\">\\r\\n                </atlas-commercial-summary>\\r\\n                <div class=\\\"btn-container\\\"\\r\\n                     *ngIf=\\\"!isFromGrid\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start end\\\">\\r\\n                        <span class=\\\"fill-space\\\"></span>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"newSearchButtonClicked()\\\">\\r\\n                            New Search\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"nextInvoiceButtonClicked(stepper)\\\">\\r\\n                            Next Invoice\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\"","module.exports = \".mat-column-selection {\\n  overflow: initial; }\\n\\n.mat-button-toggle {\\n  text-align: center;\\n  min-width: 88px; }\\n\\nlabel {\\n  font-size: 14px;\\n  font-family: Roboto;\\n  color: black; }\\n\\nlabel.no-data-message {\\n  font-weight: bold; }\\n\\n.highlight {\\n  background: #A7C5E2; }\\n\\n.label-search {\\n  font-size: 11px;\\n  font-family: Roboto;\\n  color: rgba(0, 0, 0, 0.54); }\\n\\n.label-summary {\\n  font-weight: bold; }\\n\\nmat-radio-button {\\n  margin: 5px; }\\n\\n.mat-stepper-horizontal {\\n  background-color: transparent; }\\n\"","import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { CompanyBankAccounts } from '../../../shared/entities/company-bankaccounts.entity';\r\nimport { Counterparty } from '../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { ContractsToCostInvoice } from '../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { ContractsToInvoice } from '../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { PreaccountingService } from '../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { BankAccountDialogComponent } from '../dialog-boxes/bank-account-dialog/bank-account-dialog.component';\r\nimport { InvoicingBaseFormComponent } from '../invoicing-base-form/invoicing-base-form.component';\r\nimport { CommercialSelectionComponent } from './components/commercial-selection/commercial-selection.component';\r\nimport { CommercialSummaryComponent } from './components/summary/commercial-summary.component';\r\nimport { CommercialWorkingPageComponent } from './components/working-page/commercial-working-page.component';\r\n\r\n@Component({\r\n    selector: 'atlas-commercial',\r\n    templateUrl: './commercial.component.html',\r\n    styleUrls: ['./commercial.component.scss'],\r\n})\r\nexport class CommercialComponent extends InvoicingBaseFormComponent implements OnInit {\r\n    @ViewChild('commercialSelectionComponent') commercialSelectionComponent: CommercialSelectionComponent;\r\n    @ViewChild('commercialWorkingPageComponent') commercialWorkingPageComponent: CommercialWorkingPageComponent;\r\n    @ViewChild('commercialSummaryComponent') commercialSummaryComponent: CommercialSummaryComponent;\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n\r\n    filteredCompanyBankAccounts: CompanyBankAccounts[] = [];\r\n    currencySelected: string;\r\n    selectedSupplier: Counterparty;\r\n    masterData: MasterData;\r\n    commercialInvoiceFormGroup: FormGroup;\r\n    taxRecords: TaxRecord[];\r\n    totalData: TaxRecord;\r\n    invoiceCostContracts: ContractsToCostInvoice[];\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    currentStep: number = 0;\r\n    invoiceLabel: string;\r\n    selectedInvoiceId: number;\r\n    PermissionLevels = PermissionLevels;\r\n    isFromGrid: boolean = false;\r\n    invoicingSteps: { [key: string]: number } = {\r\n        templateStep: -1,\r\n        invoiceCreationStep: 0,\r\n        workingStep: 1,\r\n        summaryStep: 2,\r\n    };\r\n    isValid: boolean = false;\r\n    previewDocumentCtrl = new AtlasFormControl('previewDocumentCtrl');\r\n    isCreateInvoiceButtonClicked = false;\r\n    isCreationMode: boolean = true;\r\n    isCompleted: boolean = false;\r\n    weightCode: string;\r\n    constructor(\r\n        protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        protected documentService: DocumentService,\r\n        @Inject(WINDOW) protected window: Window,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected masterdataService: MasterdataService,\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected preaccountingService: PreaccountingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected documentPopupService: DocumentPopupService) {\r\n        super(\r\n            dialog, router, companyManager, snackbarService, documentService, window, utilService,\r\n            executionService, route, formBuilder, preaccountingService, formConfigurationProvider, documentPopupService);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        const companyDetails = this.companyManager.getCurrentCompany();\r\n        this.weightCode = companyDetails.weightCode;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.commercialInvoiceFormGroup = this.formBuilder.group({\r\n            commercialSelectionComponent: this.commercialSelectionComponent.getFormGroup(),\r\n            commercialWorkingPageComponent: this.commercialWorkingPageComponent.getFormGroup(),\r\n            commercialSummaryComponent: this.commercialSummaryComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.commercialSelectionComponent,\r\n            this.commercialWorkingPageComponent,\r\n            this.commercialSummaryComponent);\r\n        this.getInvoiceSetupByCompany();\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.selectedInvoiceId = params['invoiceId'];\r\n            this.isFromGrid = params['isFromGrid'];\r\n        });\r\n        if (this.isFromGrid) {\r\n            this.launchSelectedInvoiceSummary(this.selectedInvoiceId);\r\n        }\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if ((this.commercialWorkingPageComponent.invoiceWorkingFormGroup.dirty ||\r\n            this.commercialSelectionComponent.invoiceSelectionContractFormGroup.dirty) &&\r\n            this.stepper.selectedIndex !== 2) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    launchSelectedInvoiceSummary(selectedInvoiceId: number) {\r\n        this.subscriptions.push(this.executionService.\r\n            getInvoiceById(selectedInvoiceId)\r\n            .subscribe((data) => {\r\n                this.stepper.selectedIndex = 2;\r\n                this.commercialSummaryComponent.setSummaryFieldsFromGrid(data);\r\n                this.invoiceLabel = data.invoiceCode;\r\n            }));\r\n    }\r\n\r\n    contractsSelected() {\r\n        const contracts = this.commercialSelectionComponent.\r\n            contractSelectionComponent.selectedContractsToInvoice as ContractsToInvoice[];\r\n        if (contracts) {\r\n            this.commercialWorkingPageComponent.valueOfGoodsComponent.contractToBeSelected(contracts);\r\n            this.commercialWorkingPageComponent.selectionFormComponent.contractToBeSelected(contracts);\r\n            if (!this.isCreateInvoiceButtonClicked) {\r\n                this.commercialWorkingPageComponent.paymentComponent.contractToBeSelected(contracts);\r\n            }\r\n            this.commercialSummaryComponent.contractToBeSelected(contracts);\r\n            contracts.map((contract) => {\r\n                this.currencySelected = contract ? contract.currencyCode : null;\r\n                const selectedCounterparty = contract ? contract.counterparty : null;\r\n                this.selectedSupplier = this.masterData.counterparties.find(\r\n                    (counterParty) => counterParty.counterpartyCode === selectedCounterparty);\r\n            });\r\n        }\r\n        this.getDecimalandPricingOption();\r\n    }\r\n\r\n    getInvoiceSetupByCompany() {\r\n        this.subscriptions.push(this.executionService.getInvoiceSetupByCompany()\r\n            .subscribe((data) => {\r\n                if (this.invoiceTypeId === InvoiceTypes.Sales || this.invoiceTypeId === InvoiceTypes.Purchase) {\r\n                    this.commercialWorkingPageComponent.selectionFormComponent.setDefaultAuthorizeForPosting(data.authorizedForPosting);\r\n                    this.commercialWorkingPageComponent.taxesComponent.setDefaultVatCode(data.defaultVATCode);\r\n                    this.commercialWorkingPageComponent.taxCostsComponent.setDefaultVatCode(data.defaultVATCode);\r\n                }\r\n            }));\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    onBackButtonClicked(index: number) {\r\n        this.isCompleted = false;\r\n        this.stepper.selectedIndex = index;\r\n    }\r\n\r\n    onMoveButtonClicked(index: number) {\r\n        let isFormValid = false;\r\n        if (this.commercialSelectionComponent.pricingOptionsComponent.formGroup.valid) {\r\n            if (this.isValid) {\r\n                this.contractsSelected();\r\n                this.isCompleted = true;\r\n                this.stepper.selectedIndex = index;\r\n            }\r\n            isFormValid = true;\r\n        }\r\n\r\n        if (!this.isValid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Please select a contract to proceed.',\r\n            );\r\n        }\r\n        if (!isFormValid) {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors..');\r\n        }\r\n    }\r\n\r\n    nextInvoiceButtonClicked() {\r\n        let searchContractRef: string = '';\r\n        let searchCounterParty: string = '';\r\n        let searchCharterRef: string = '';\r\n        let invoiceType: number = 0;\r\n        searchContractRef = this.commercialSelectionComponent.\r\n            contractSelectionComponent.searchContractReference;\r\n        searchCounterParty = this.commercialSelectionComponent.\r\n            contractSelectionComponent.searchCounterParty;\r\n        searchCharterRef = this.commercialSelectionComponent.\r\n            contractSelectionComponent.searchCharterReference;\r\n        invoiceType = this.commercialSelectionComponent.\r\n            contractSelectionComponent.invoiceType;\r\n\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/' + encodeURIComponent(invoiceType.toString())],\r\n            {\r\n                queryParams: {\r\n                    savedContractReference: searchContractRef, savedCounterParty: searchCounterParty,\r\n                    savedCharterReference: searchCharterRef,\r\n                },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    getDecimalandPricingOption() {\r\n        const decimalOptionValue = this.commercialWorkingPageComponent.valueOfGoodsComponent.decimalOptionValue;\r\n        const pricingOptionValue = this.commercialWorkingPageComponent.valueOfGoodsComponent.pricingOptionValue;\r\n        this.commercialSummaryComponent.setDecimalAndPricingOption(decimalOptionValue, pricingOptionValue);\r\n    }\r\n\r\n    onPricingAndDecimalOptionSelected(model: any) {\r\n        if (this.commercialWorkingPageComponent) {\r\n            this.commercialWorkingPageComponent.pricingAndDecimalOptionSelected(model.pricingSelected, model.decimalOptionSelected);\r\n        }\r\n    }\r\n\r\n    beforeInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        this.updateInvoiceLines(invoiceRecord);\r\n    }\r\n\r\n    afterInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        (this.selectedbankAccountId) ? invoiceRecord.bankAccountId = this.selectedbankAccountId : null;\r\n        const costContracts = this.commercialWorkingPageComponent.\r\n            addCostComponent.getAllInvoiceCostLines() as ContractsToCostInvoice[];\r\n        this.commercialSummaryComponent.costContractToBeSelected(costContracts);\r\n        this.commercialSummaryComponent.populateInvoiceRecord(invoiceRecord);\r\n        this.stepper.next();\r\n    }\r\n\r\n    onContractsSelected(contractsSelected: boolean) {\r\n        this.isValid = contractsSelected;\r\n    }\r\n\r\n    updateInvoiceLines(invoiceRecord: InvoiceRecord) {\r\n        invoiceRecord.invoiceLines.forEach(\r\n            (invoiceLine) => {\r\n                if (!invoiceLine.vatCode) {\r\n                    invoiceLine.vatCode =\r\n                        this.commercialWorkingPageComponent.taxesComponent.invoiceGoodsVatCodeCntrl.value;\r\n                }\r\n            },\r\n        );\r\n    }\r\n\r\n    onOpenDialogOnPreviewOrSaveClicked() {\r\n        this.isLoading = true;\r\n        if (this.commercialWorkingPageComponent.invoiceWorkingFormGroup.valid) {\r\n            (this.invoiceTypeId === InvoiceTypes.Sales) ? this.getCompanyBankAccounts() :\r\n                this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value);\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors...');\r\n            this.isLoading = false;\r\n        }\r\n        this.costAndTaxRowsSelected();\r\n    }\r\n\r\n    costAndTaxRowsSelected() {\r\n        this.commercialWorkingPageComponent.addCostComponent.setAllInvoiceCostLines();\r\n        this.invoiceCostContracts = this.commercialWorkingPageComponent.addCostComponent\r\n            .getAllInvoiceCostLines();\r\n        this.getTaxRecordsForSelectedCost();\r\n    }\r\n    getTaxRecordsForSelectedCost() {\r\n        this.taxRecords = this.commercialWorkingPageComponent.taxCostsComponent.taxesGridRows as TaxRecord[];\r\n        this.totalData = this.commercialWorkingPageComponent.totalData as TaxRecord;\r\n    }\r\n\r\n    ontotalAmountCalculated(model: TaxRecord) {\r\n        this.totalData = model;\r\n    }\r\n\r\n    onChangeCostContract(model: ContractsToCostInvoice[]) {\r\n        this.invoiceCostContracts = model;\r\n    }\r\n\r\n    getCompanyBankAccounts() {\r\n        if (this.selectedSupplier && this.currencySelected) {\r\n            this.masterdataService.getCompanyBankAccounts(this.currencySelected)\r\n                .subscribe((data) => {\r\n                    if (data.value.length > 0) {\r\n                        this.filteredCompanyBankAccounts = data.value;\r\n                    }\r\n                    this.showAvailableBankingOptionDialog();\r\n                },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    });\r\n        }\r\n    }\r\n\r\n    showAvailableBankingOptionDialog() {\r\n        if (this.filteredCompanyBankAccounts) {\r\n            const availableBankingoptionDialog = this.dialog.open(BankAccountDialogComponent, {\r\n                data: {\r\n                    title: 'Bank Account',\r\n                    okButton: 'Confirm',\r\n                    value: this.filteredCompanyBankAccounts,\r\n                },\r\n            });\r\n            availableBankingoptionDialog.afterClosed().subscribe((answer) => {\r\n                if (!answer) {\r\n                    this.isLoading = false;\r\n                } else if (answer.isClose) {\r\n                    this.selectedbankAccountId = answer.selectedValue;\r\n                    this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div>\\r\\n    <atlas-invoice-selection-form-component #InvoiceSelectionFormComponent>\\r\\n    </atlas-invoice-selection-form-component>\\r\\n\\r\\n    <atlas-contract-selection-form-component #contractSelectionComponent\\r\\n                                             [defaultWeightCode]=\\\"companyWeightCode\\\"\\r\\n                                             (contractsSelected)=\\\"onContractsSelected($event)\\\"\\r\\n                                             (commoditySelected)=\\\"onDifferentCommoditySelected($event)\\\">\\r\\n    </atlas-contract-selection-form-component>\\r\\n\\r\\n    <atlas-pricing-options #pricingOptionsComponent\\r\\n                           (pricingAndDecimalOptionSelected)=\\\"onPricingAndDecimalOptionSelected($event)\\\">\\r\\n    </atlas-pricing-options>\\r\\n\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, HostListener, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ContractSelectionFormComponent } from './components/contract-selection-form-component/contract-selection-form-component.component';\r\nimport { InvoiceSelectionFormComponent } from './components/invoice-selection-form-component/invoice-selection-form-component.component';\r\nimport { PricingOptionsComponent } from './components/pricing-options/pricing-options.component';\r\n\r\n@Component({\r\n    selector: 'atlas-commercial-selection',\r\n    templateUrl: './commercial-selection.component.html',\r\n    styleUrls: ['./commercial-selection.component.scss'],\r\n})\r\n\r\nexport class CommercialSelectionComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly pricingAndDecimalOptionSelected = new EventEmitter<any>();\r\n    @Output() readonly contractsSelected = new EventEmitter<boolean>();\r\n    @Input() companyWeightCode: string;\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('contractSelectionComponent') contractSelectionComponent: ContractSelectionFormComponent;\r\n    @ViewChild('pricingOptionsComponent') pricingOptionsComponent: PricingOptionsComponent;\r\n    @ViewChild('InvoiceSelectionFormComponent') InvoiceSelectionFormComponent: InvoiceSelectionFormComponent;\r\n\r\n    invoiceSelectionContractFormGroup: FormGroup;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSelectionContractFormGroup = this.formBuilder.group({\r\n            InvoiceSelectionFormComponent: this.InvoiceSelectionFormComponent.getFormGroup(),\r\n            contractSelectionComponent: this.contractSelectionComponent.getFormGroup(),\r\n            pricingOptionsComponent: this.pricingOptionsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.InvoiceSelectionFormComponent, this.pricingOptionsComponent, this.contractSelectionComponent);\r\n    }\r\n\r\n    onPricingAndDecimalOptionSelected(model: any) {\r\n        this.pricingAndDecimalOptionSelected.emit({ pricingSelected: model.pricingOption, decimalOptionSelected: model.decimalOption });\r\n\r\n    }\r\n\r\n    onDifferentCommoditySelected({ differentCommoditySelected, differentPricesSelected }) {\r\n        this.pricingOptionsComponent.onDifferentCommoditySelected(differentCommoditySelected, differentPricesSelected);\r\n    }\r\n\r\n    onContractsSelected(contractsSelected: boolean) {\r\n        this.contractsSelected.emit(contractsSelected);\r\n\r\n    }\r\n\r\n    populateEntity(model: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <form [formGroup]=\\\"searchContractForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           fxFlex=\\\"30%\\\"\\r\\n                           (keydown.enter)=\\\"onSearchContracts()\\\"\\r\\n                           placeholder=\\\"Contract Search\\\"\\r\\n                           formControlName=\\\"searchContractReferenceCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"charterReferenceCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCharters\\\"\\r\\n                                                         label=\\\"Charter Reference\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchContracts()\\\"\\r\\n                                                         displayProperty=\\\"charterCode\\\"\\r\\n                                                         [selectProperties]=\\\"['charterCode','description']\\\"\\r\\n                                                         [errorMap]=\\\"charterErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for charters\\\"\\r\\n                                                         gridId=\\\"charterGrid\\\"\\r\\n                                                         [dataLoader]=\\\"charterDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                         label=\\\"Counter Party\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchContracts()\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchContracts()\\\"\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card>\\r\\n</div>\\r\\n<atlas-filter-set-display (filtersChanged)=\\\"onFilterSetDetailsChange($event)\\\"\\r\\n                          [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                          [gridCode]=\\\"gridCode\\\"\\r\\n                          [company]=\\\"company\\\"\\r\\n                          #filterSetDisplayComponent>\\r\\n</atlas-filter-set-display>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card *ngIf=\\\"isLoading\\\"\\r\\n              fxFlex=\\\"100\\\">\\r\\n        <h2 class=\\\"atlas-grid-card-title\\\">Searching for results</h2>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <mat-card [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\"\\r\\n              fxFlex=\\\"100\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <!-- Commenting the below line until Counterparty filter is completely developed -->\\r\\n            <!-- <h2 class=\\\"atlas-grid-card-title\\\">{{dataLength}} {{ dataLength > 1 ? \\\"Contracts\\\" : \\\"Contract\\\"}} Found</h2> -->\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"invoiceContractGridOptions && invoiceContractGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"invoiceContractGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <atlas-grid-enlargement *ngIf=\\\"invoiceContractGridOptions && invoiceContractGridOptions.columnDefs\\\"\\r\\n                                    [gridOptions]=\\\"invoiceContractGridOptions\\\"\\r\\n                                    [userPreferencesParameters]=\\\"gridPreferences\\\"\\r\\n                                    (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                    (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                                    (rowDataChanged)=\\\"onRowDataChanged($event)\\\"\\r\\n                                    #gridZoom>\\r\\n            </atlas-grid-enlargement>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"invoiceContractGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"invoiceContractGridRows\\\"\\r\\n                             [gridOptions]=\\\"invoiceContractGridOptions\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (firstDataRendered)=\\\"onFirstDataRendered($event)\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             (rowDataChanged)=\\\"onRowDataChanged($event)\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\"\\r\\n             class=\\\"total-box\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n                Total Quantity : <span class=\\\"total-figure-value\\\">\\r\\n                    {{totalQuantity| number:'1.3-3' }}\\r\\n                    {{weightCode}}\\r\\n                </span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</div>\\r\\n\"","module.exports = \".total-box {\\n  margin-top: 14px; }\\n\"","import { Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ListAndSearchFilterDto } from '../../../../../../../shared/dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../../../shared/entities/charter.entity';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { IsLocked } from '../../../../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../../../shared/entities/lock-resource-information.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../../../../shared/services/execution/charter-data-loader';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../../../shared/services/http-services/lock.service';\r\nimport { CounterPartyDataLoader } from '../../../../../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { ExecutionActionsService } from '../../../../../../services/execution-actions.service';\r\nimport { FilterSetDisplayComponent } from './../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { ColumnConfigurationProperties } from './../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from './../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterData } from './../../../../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from './../../../../../../../shared/enums/contract-type.enum';\r\nimport { InvoiceTypes } from './../../../../../../../shared/enums/invoice-type.enum';\r\nimport { ListAndSearchFilterType } from './../../../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { GridConfigurationProviderService } from './../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { UtilService } from './../../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-contract-selection-form-component',\r\n    templateUrl: './contract-selection-form-component.component.html',\r\n    styleUrls: ['./contract-selection-form-component.component.scss'],\r\n    providers: [CounterPartyDataLoader, CharterDataLoader],\r\n})\r\nexport class ContractSelectionFormComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplayComponent') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    @Output() readonly commoditySelected = new EventEmitter<{ differentCommoditySelected: boolean, differentPricesSelected: boolean }>();\r\n    @Output() readonly contractsSelected = new EventEmitter<boolean>();\r\n    invoiceContractGridOptions: agGrid.GridOptions = {};\r\n    @Input() defaultWeightCode: string;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    invoiceContractGridColumns: agGrid.ColDef[];\r\n    invoiceContractGridRows: ContractsToInvoice[];\r\n    allInvoiceContractGridRows: ContractsToInvoice[];\r\n    contractsToInvoice: ContractsToInvoice[];\r\n    selectedContractsToInvoice: ContractsToInvoice[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    isBusinessSectorPostingProcess: boolean = false;\r\n    dataLength: number = 0;\r\n    searchContractForm: FormGroup;\r\n    totalQuantity: number = 0;\r\n    invoiceType: number;\r\n    company: string;\r\n    saveContractRef: string;\r\n    saveCounterparty: string;\r\n    saveCharterReference: string;\r\n    differentCommoditySelected: boolean;\r\n    isContractSelected: boolean = false;\r\n    counterParty: string;\r\n    subscriptions: Subscription[] = [];\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    gridCode: string;\r\n    filters: ListAndSearchFilter[];\r\n    savedFilters: ListAndSearchFilter[];\r\n    differentPricesSelected: boolean;\r\n    searchContractReference: string;\r\n    searchCharterReference: string;\r\n    searchCounterParty: string;\r\n    formatType: string = 'en-US';\r\n    decimalOptionValue: number = 2;\r\n    columnDefs: agGrid.ColDef[];\r\n    hasGridSharing = false;\r\n    defaultConversionFactor: number = 0;\r\n    additionnalColumns = [\r\n        {\r\n            headerName: 'Uninvoiced Quantity',\r\n            field: 'uninvoicedQuantity',\r\n            colId: 'uninvoicedQuantity',\r\n            type: 'numericColumn',\r\n            hide: false,\r\n            valueGetter: this.getUnInvoicedQuantity,\r\n            valueFormatter: this.formatValue.bind(this),\r\n        },\r\n        {\r\n            headerName: 'Quantity to invoice',\r\n            field: 'quantityToInvoice',\r\n            colId: 'quantityToInvoice',\r\n            type: 'numericColumn',\r\n            hide: false,\r\n            editable: this.isQuantityToInvoiceEditable.bind(this),\r\n            valueSetter: this.setQuantityToInvoice.bind(this),\r\n            valueFormatter: this.formatValue.bind(this),\r\n        },\r\n    ];\r\n    filteredCounterPartyList: Counterparty[];\r\n    counterPartyList: Counterparty[];\r\n    counterPartyControl: Counterparty;\r\n    masterdata: MasterData = new MasterData();\r\n    counterPartyCtrl = new AtlasFormControl('CounterPartyCommercial');\r\n    filteredCharters: Charter[];\r\n    charters: Charter[];\r\n    charterReferenceCtrl = new AtlasFormControl('CharterRefCommercial');\r\n    charterRefControl: Charter;\r\n    count: number = 0;\r\n    weightCode: string = '';\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Counter Party not in the list.');\r\n    charterErrorMap: Map<string, string> = new Map();\r\n\r\n    gridPreferences: UserGridPreferencesParameters = new UserGridPreferencesParameters();\r\n\r\n    constructor(private formBuilder: FormBuilder, private executionService: ExecutionService,\r\n        private route: ActivatedRoute, private snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        protected lockService: LockService,\r\n        protected dialog: MatDialog,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        public charterDataLoader: CharterDataLoader,\r\n        public executionActionsService: ExecutionActionsService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.searchContractForm = this.formBuilder.group({\r\n            searchContractReferenceCtrl: [''],\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.isLoading = true;\r\n        this.gridCode = this.invoiceType === InvoiceTypes.Purchase ? 'invoicePurcGoodsSelectionGrid' : 'invoiceSaleGoodsSelectionGrid';\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyList = this.filteredCounterPartyList;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.populateCharterList();\r\n        this.charterReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCharterReference(input);\r\n        });\r\n        this.loadGridConfiguration();\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.saveContractRef = params['savedContractReference'];\r\n            this.saveCounterparty = params['savedCounterParty'];\r\n            this.saveCharterReference = params['savedCharterReference'];\r\n        });\r\n        if (this.executionActionsService.EditCriteriaRetainFilter && this.executionActionsService.EditCriteriaRetainFilter.length > 0) {\r\n            this.savedFilters = this.executionActionsService.EditCriteriaRetainFilter;\r\n        }\r\n        if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference) {\r\n            if (this.saveContractRef) {\r\n                this.searchContractForm.controls['searchContractReferenceCtrl'].setValue(this.saveContractRef);\r\n            }\r\n            if (this.saveCounterparty) {\r\n                this.counterPartyControl = this.counterPartyList.find((counterParty) =>\r\n                    counterParty.counterpartyCode === this.saveCounterparty);\r\n                this.counterPartyCtrl.patchValue(this.counterPartyControl);\r\n            }\r\n            if (this.saveCharterReference) {\r\n                this.charterRefControl = this.charters.find((charter) =>\r\n                    charter.charterCode === this.saveCharterReference);\r\n                this.charterReferenceCtrl.patchValue(this.charterRefControl);\r\n            }\r\n        }\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());\r\n        this.getBusinessSectorConfiguration();\r\n        const defaultWeightCodeSetup = this.masterdata.weightUnits.find((weightUnit) =>\r\n            weightUnit.weightCode === this.defaultWeightCode);\r\n        if (defaultWeightCodeSetup) {\r\n            this.weightCode = defaultWeightCodeSetup.weightCode;\r\n            this.defaultConversionFactor = defaultWeightCodeSetup.conversionFactor;\r\n        }\r\n    }\r\n    getBusinessSectorConfiguration() {\r\n        this.executionService.getBusinessSectorForPosting()\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.isBusinessSectorPostingProcess = data.businessSectorNominalPostingPurpose;\r\n                }\r\n            });\r\n    }\r\n\r\n    populateCharterList() {\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.charters = charter;\r\n            this.filteredCharters = this.charters;\r\n        });\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onSearchContracts();\r\n        }\r\n    }\r\n    filterCharterReference(input) {\r\n        this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.charters,\r\n            ['charterCode', 'description'],\r\n        );\r\n        if (this.charterReferenceCtrl.valid || !this.charterReferenceCtrl.value) {\r\n            this.onSearchContracts();\r\n        }\r\n    }\r\n\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(param.value);\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.searchContractForm.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.invoiceContractGridColumns;\r\n\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridService.sizeColumns(this.invoiceContractGridOptions);\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        if (this.gridColumnApi) {\r\n            this.gridService.sizeColumns(this.invoiceContractGridOptions);\r\n        }\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            this.gridService.sizeColumns(this.invoiceContractGridOptions);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeContractsGrid();\r\n        this.gridService.sizeColumns(this.invoiceContractGridOptions);\r\n    }\r\n\r\n    getUnInvoicedQuantity(params) {\r\n        if (params.data.contractQuantity - params.data.invoicedQuantity > 0) {\r\n            return params.data.contractQuantity - params.data.invoicedQuantity;\r\n        } else if (params.data.contractQuantity - params.data.invoicedQuantity < 0) {\r\n            return 0;\r\n        }\r\n    }\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    setQuantityToInvoice(params) {\r\n        let validQuantity = true;\r\n        let invalidValue = true;\r\n        if (params.newValue > (params.data.contractQuantity - params.data.invoicedQuantity)) {\r\n            validQuantity = false;\r\n            params.data.quantityToInvoice = (params.data.contractQuantity - params.data.invoicedQuantity);\r\n        } else if (params.newValue <= 0) {\r\n            invalidValue = false;\r\n            params.data.quantityToInvoice = (params.data.contractQuantity - params.data.invoicedQuantity);\r\n        } else {\r\n            params.data.quantityToInvoice = Number(params.newValue);\r\n        }\r\n\r\n        if (!validQuantity) {\r\n            this.snackbarService.informationSnackBar('Quantity cannot be greater than uninvoiced quantity');\r\n        }\r\n        if (!invalidValue) {\r\n            this.snackbarService.informationSnackBar('Quantity cannot be zero or negative');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getContractsToInvoice() {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration.length > 0 && this.columnConfiguration) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            const invoiceType = this.masterdata.invoiceTypes.find((type) => type.invoiceTypeId === this.invoiceType);\r\n            const contractTypeCodeColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'ContractTypeCode');\r\n            if (invoiceType && contractTypeCodeColumn && ContractTypes[invoiceType.contractTypeCode]) {\r\n                const filterContractType = new ListAndSearchFilter();\r\n                filterContractType.fieldId = contractTypeCodeColumn.fieldId;\r\n                filterContractType.fieldName = contractTypeCodeColumn.fieldName;\r\n                filterContractType.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: ContractTypes[invoiceType.contractTypeCode],\r\n                };\r\n                filterContractType.isActive = true;\r\n                filters.push(filterContractType);\r\n            }\r\n            if (this.invoiceType === InvoiceTypes.Purchase) {\r\n                this.executionService.searchContractsToPurchaseInvoiceForCommercial(filters)\r\n                    .pipe(\r\n                        finalize(() => {\r\n                            this.isLoading = false;\r\n                        }),\r\n                    )\r\n                    .subscribe((data) => {\r\n                        this.contractsToInvoice = data;\r\n                        this.getData();\r\n                    });\r\n            } else if (this.invoiceType === InvoiceTypes.Sales) {\r\n                this.executionService.searchContractsToSaleInvoiceForCommercial(filters)\r\n                    .pipe(\r\n                        finalize(() => {\r\n                            this.isLoading = false;\r\n                        }),\r\n                    )\r\n                    .subscribe((data) => {\r\n                        this.contractsToInvoice = data;\r\n                        this.getData();\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n\r\n        this.invoiceContractGridRows = this.contractsToInvoice.filter((contract) =>\r\n            (contract.contractQuantity - contract.invoicedQuantity) > 0);\r\n        this.dataLength = this.invoiceContractGridRows.length;\r\n        this.allInvoiceContractGridRows = this.invoiceContractGridRows;\r\n        if (this.dataLength && this.dataLength > 0) {\r\n            this.counterParty = this.invoiceContractGridRows[0].counterparty;\r\n        }\r\n        if (this.filters.length === 0) {\r\n            if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference) {\r\n                this.onSearchContracts();\r\n            }\r\n        }\r\n    }\r\n\r\n    onRowDataChanged(params) {\r\n        if (this.counterParty) {\r\n            const counterPartyFilterComponent = this.gridApi.getFilterInstance('counterparty');\r\n            counterPartyFilterComponent.setModel({\r\n                type: 'set',\r\n                values: [this.counterParty],\r\n            });\r\n            this.gridApi.onFilterChanged();\r\n        }\r\n    }\r\n\r\n    onSearchContracts() {\r\n        this.searchContractReference = this.searchContractForm.get('searchContractReferenceCtrl').value;\r\n        if (this.counterPartyCtrl.value === '') {\r\n            this.searchCounterParty = this.counterPartyCtrl.value;\r\n        } else if (this.counterPartyCtrl.value) {\r\n            this.searchCounterParty = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n            if (!this.searchCounterParty) {\r\n                this.searchCounterParty = this.counterPartyCtrl.value;\r\n            }\r\n        }\r\n        if (this.charterReferenceCtrl.value === '') {\r\n            this.searchCharterReference = this.charterReferenceCtrl.value;\r\n        } else if (this.charterReferenceCtrl.value) {\r\n            this.searchCharterReference = (this.charterReferenceCtrl.value as Charter).charterCode;\r\n            if (!this.searchCharterReference) {\r\n                this.searchCharterReference = this.charterReferenceCtrl.value;\r\n            }\r\n        }\r\n        let rows: ContractsToInvoice[] = [];\r\n        let contractRows: number = 0;\r\n        let charterRows: number = 0;\r\n        this.filters = [];\r\n        if (!this.searchContractReference && !this.searchCharterReference && !this.searchCounterParty) {\r\n            this.invoiceContractGridRows = this.allInvoiceContractGridRows;\r\n            return;\r\n        }\r\n        if (this.allInvoiceContractGridRows && this.allInvoiceContractGridRows.length > 0) {\r\n            this.contractsToInvoice = this.allInvoiceContractGridRows;\r\n            this.isLoading = true;\r\n            if (this.searchContractReference) {\r\n                this.contractsToInvoice = this.allInvoiceContractGridRows.filter((item) => item.contractReference != null);\r\n                rows = this.contractsToInvoice.filter((item) =>\r\n                    item.contractReference.toString().toUpperCase().includes(this.searchContractReference.toUpperCase()));\r\n                contractRows = -1;\r\n            }\r\n            if (this.searchCharterReference) {\r\n                if (rows.length === 0 && contractRows === 0) {\r\n                    this.contractsToInvoice = this.allInvoiceContractGridRows.filter((item) => item.charter != null);\r\n                    rows = this.contractsToInvoice.filter((item) =>\r\n                        item.charter.toString().toUpperCase().includes(this.searchCharterReference.toUpperCase()));\r\n                } else if (contractRows === -1) {\r\n                    rows = rows.filter((item) => item.charter != null);\r\n                    rows = rows.filter((item) => item.charter.toString().toUpperCase().includes(this.searchCharterReference.toUpperCase()));\r\n                }\r\n                charterRows = -1;\r\n            }\r\n            if (this.searchCounterParty) {\r\n                if (rows.length === 0 && charterRows === 0 && contractRows === 0) {\r\n                    this.contractsToInvoice = this.allInvoiceContractGridRows.filter((item) => item.counterparty != null);\r\n                    rows = this.contractsToInvoice.filter((item) =>\r\n                        item.counterparty.toString().toUpperCase().includes(this.searchCounterParty.toUpperCase()));\r\n                } else {\r\n                    rows = rows.filter((item) => item.counterparty != null);\r\n                    rows = rows.filter((item) => item.counterparty.toString().toUpperCase().\r\n                        includes(this.searchCounterParty.toUpperCase()));\r\n                }\r\n            }\r\n        }\r\n        this.invoiceContractGridRows = rows;\r\n        this.dataLength = this.invoiceContractGridRows.length;\r\n        this.autoSizeContractsGrid();\r\n        this.isLoading = false;\r\n        (this.invoiceContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n        if (this.dataLength && this.dataLength > 0) {\r\n            this.counterParty = this.invoiceContractGridRows[0].counterparty;\r\n        }\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        this.totalQuantity = 0;\r\n        if (!event.node.selected) { // This condition is to make Quantity To Invoice = 0 if user unselects a row\r\n            event.data.quantityToInvoice = 0;\r\n        }\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        let validQuantity = true;\r\n        let valid = true;\r\n        let validBusinessSector = true;\r\n        if (event.node.isSelected()) {\r\n            selectedRows.forEach(\r\n                (selectedContract: ContractsToInvoice) => {\r\n                    if (selectedContract.contractQuantity > selectedContract.invoicedQuantity) {\r\n                        if (selectedContract.quantityToInvoice === 0) {\r\n                            selectedContract.quantityToInvoice =\r\n                                (selectedContract.contractQuantity - selectedContract.invoicedQuantity);\r\n                        }\r\n                        this.gridApi.refreshCells(event.data);\r\n                        if (this.defaultConversionFactor && this.defaultConversionFactor != 0) {\r\n                            this.totalQuantity += (selectedContract.quantityToInvoice *\r\n                                selectedContract.weightConversionFactor) / this.defaultConversionFactor;\r\n                        } else {\r\n                            this.totalQuantity += selectedContract.quantityToInvoice;\r\n                        }\r\n\r\n                    } else {\r\n                        validQuantity = false;\r\n                    }\r\n                },\r\n            );\r\n        } else {\r\n            event.data.quantityToInvoice = 0;\r\n            this.gridApi.refreshCells(event.data);\r\n        }\r\n        if (selectedRows.length > 1) {\r\n            let currencySelected;\r\n            let counterpartySelected;\r\n            let businessSectorSelected;\r\n\r\n            for (const row of selectedRows) {\r\n                if (!currencySelected) {\r\n                    currencySelected = row.currencyCode;\r\n                }\r\n                if (!counterpartySelected) {\r\n                    counterpartySelected = row.counterparty;\r\n                }\r\n                if (!businessSectorSelected) {\r\n                    businessSectorSelected = row.businessSector;\r\n                }\r\n                if (currencySelected !== row.currencyCode || counterpartySelected !== row.counterparty) {\r\n                    valid = false;\r\n                    break;\r\n                }\r\n                if (this.isBusinessSectorPostingProcess) {\r\n                    if (businessSectorSelected !== row.businessSector) {\r\n                        validBusinessSector = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!valid) {\r\n            this.snackbarService.informationSnackBar('Currency & Counterparty should be same');\r\n        }\r\n        if (!validBusinessSector) {\r\n            this.snackbarService.informationSnackBar('While invoicing, Business Sector must be the same');\r\n        }\r\n        if (!validQuantity) {\r\n            this.snackbarService.informationSnackBar('Value cannot be negative or more than the uninvoiced quantity');\r\n        }\r\n        if (!valid || !validQuantity || !validBusinessSector) {\r\n            this.invoiceContractGridOptions.api.deselectNode(event.node);\r\n        }\r\n\r\n        this.checkCommoditySelected(selectedRows);\r\n        this.isContractSelected = selectedRows.length > 0;\r\n        this.contractsSelected.emit(this.isContractSelected);\r\n        this.grantLock(Number(event.data.sectionId), event.node);\r\n        this.selectedContractsToInvoice = selectedRows;\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.invoiceContractGridOptions.api.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        this.subscriptions.push(\r\n                            this.lockService.lockContract(sectionId, LockFunctionalContext.ContractInvoicing)\r\n                                .subscribe(() => {\r\n                                    this.refeshResourceInformation();\r\n                                    this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                }));\r\n\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.ContractInvoicing)\r\n                    .subscribe(() => {\r\n                        node.setRowSelectable(true);\r\n                        this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                    }));\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.invoiceContractGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Check implemented for Pricing Options validation\r\n    checkCommoditySelected(selectedRows: any[]) {\r\n        this.differentCommoditySelected = false;\r\n        this.differentPricesSelected = false;\r\n        if (selectedRows.length > 1) {\r\n            const firstSelectedRow = selectedRows[0];\r\n            this.differentCommoditySelected = selectedRows.filter(\r\n                (row) => row.commodity.trim() !== firstSelectedRow.commodity.trim()).length > 0;\r\n            this.differentPricesSelected = selectedRows.filter(\r\n                (row) => row.price !== firstSelectedRow.price).length > 0;\r\n        }\r\n        this.commoditySelected.emit({\r\n            differentCommoditySelected: this.differentCommoditySelected, differentPricesSelected: this.differentPricesSelected,\r\n        });\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n\r\n        this.selectedContractsToInvoice = this.gridApi.getSelectedRows();\r\n\r\n        return this.selectedContractsToInvoice;\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue < params.newValue) {\r\n            this.totalQuantity = this.totalQuantity + (params.newValue - params.oldValue);\r\n        } else if (params.oldValue > params.newValue) {\r\n            this.totalQuantity = this.totalQuantity - (params.oldValue - params.newValue);\r\n        }\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n\r\n                this.gridPreferences = {\r\n                    company: this.company,\r\n                    gridId: this.gridCode,\r\n                    gridOptions: this.invoiceContractGridOptions,\r\n                    sharingEnabled: this.hasGridSharing,\r\n                };\r\n            });\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        // selection column\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                pinned: 'left',\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n            });\r\n\r\n        // grid config\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                hide: !config.isVisible,\r\n            };\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n\r\n            return columnDef;\r\n        }));\r\n\r\n        // calculated columns\r\n        this.columnDefs = this.columnDefs.concat(this.additionnalColumns);\r\n\r\n        if (this.invoiceContractGridOptions) {\r\n            this.invoiceContractGridOptions.columnDefs = this.columnDefs;\r\n            if (this.invoiceContractGridOptions.columnApi) {\r\n                this.invoiceContractGridOptions.columnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n    }\r\n\r\n    isQuantityToInvoiceEditable(param) {\r\n        return param.node.selected;\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]): void {\r\n        this.executionActionsService.EditCriteriaRetainFilter = filters;\r\n        this.filters = filters;\r\n        if (this.count === 1) {\r\n            this.filters = this.savedFilters;\r\n            this.savedFilters = null;\r\n            this.count = 0;\r\n        }\r\n        if (this.savedFilters && this.count === 0) {\r\n            if (this.filterSetDisplayComponent) {\r\n                this.count = 1;\r\n                const localFilters: ListAndSearchFilterDto[] = this.savedFilters.map((filter: ListAndSearchFilter) => {\r\n                    return new ListAndSearchFilterDto(filter);\r\n                });\r\n                this.filterSetDisplayComponent.loadFilters(localFilters);\r\n            }\r\n        } else {\r\n            this.getContractsToInvoice();\r\n        }\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        if (params && params.value && !isNaN(params.value)) {\r\n            if (params.colDef.colId.toLowerCase() === 'contractquantity' || params.colDef.colId.toLowerCase() === 'price' ||\r\n                params.colDef.colId.toLowerCase() === 'invoicedquantity') {\r\n                if (params.colDef.colId.toLowerCase() === 'price') {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(params.value);\r\n                } else {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription: Subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"card-header-luke\\\">\\r\\n    <mat-card-title>\\r\\n        <h2> Invoice Selection</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"none center\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"33%\\\"\\r\\n                     fxFlex.xs=\\\"33%\\\"\\r\\n                     fxFlex.sm=\\\"33%\\\">\\r\\n                    <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Invoice type\\\"\\r\\n                               [matTooltip]=\\\"'Invoice Type'\\\"\\r\\n                               [formControl]=\\\"invoiceTypeSelectedCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"33%\\\"\\r\\n                     fxFlex.xs=\\\"33%\\\"\\r\\n                     fxFlex.sm=\\\"33%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Costs/Commission\\\"\\r\\n                               [matTooltip]=\\\"'Costs/Commission'\\\"\\r\\n                               [formControl]=\\\"costsCommissionTypeCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"33%\\\"\\r\\n                     fxFlex.xs=\\\"33%\\\"\\r\\n                     fxFlex.sm=\\\"33%\\\">\\r\\n                    <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Quantity to Invoice\\\"\\r\\n                               [matTooltip]=\\\"'Quantity to Invoice'\\\"\\r\\n                               [formControl]=\\\"quantityToInvoiceCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".card-header-luke {\\n  min-height: auto; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-selection-form-component',\r\n    templateUrl: './invoice-selection-form-component.component.html',\r\n    styleUrls: ['./invoice-selection-form-component.component.scss'],\r\n})\r\nexport class InvoiceSelectionFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceTypeSelectedCtrl = new AtlasFormControl('invoiceTypeSelected');\r\n    costsCommissionTypeCtrl = new AtlasFormControl('costsCommissionSelection');\r\n    quantityToInvoiceCtrl = new AtlasFormControl('quantityToInvoiceSelection');\r\n\r\n    invoiceTypeId: number;\r\n    invoiceTypeDescription: string;\r\n    selectedInvoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n    contract: string = 'Contract';\r\n\r\n    masterdata: MasterData = new MasterData();\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        this.invoiceTypeDescription = this.masterdata.\r\n            invoiceTypes.find((x) => x.invoiceTypeId === this.invoiceTypeId).description;\r\n        this.invoiceTypeSelectedCtrl.patchValue(this.invoiceTypeDescription);\r\n        this.costsCommissionTypeCtrl.disable();\r\n        this.quantityToInvoiceCtrl.setValue(this.contract);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceTypeSelectedCtrl: this.invoiceTypeSelectedCtrl,\r\n            costsCommissionTypeCtrl: this.costsCommissionTypeCtrl,\r\n            quantityToInvoiceCtrl: this.quantityToInvoiceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const invoiceType = entity as InvoiceRecord;\r\n        invoiceType.invoiceType = this.invoiceTypeId;\r\n        invoiceType.quantityToInvoice = this.quantityToInvoiceCtrl.value;\r\n        return invoiceType;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Pricing Options</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"20%\\\">\\r\\n                <mat-select placeholder=\\\"Pricing option\\\"\\r\\n                            [matTooltip]=\\\"'Pricing option'\\\"\\r\\n                            [formControl]=\\\"pricingOptionsCtrl\\\"\\r\\n                            (selectionChange)='onPricingDecimalOptionSelected()'>\\r\\n                    <mat-option *ngFor=\\\"let pricing of masterdata.pricingOptions\\\"\\r\\n                                [value]=\\\"pricing.code\\\">{{pricing.description}}</mat-option>\\r\\n                </mat-select>\\r\\n                <mat-error *ngIf=\\\"pricingOptionsCtrl.hasError('required')\\\">\\r\\n                    Pricing Option is required\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"20%\\\">\\r\\n                <mat-select placeholder=\\\"Decimals\\\"\\r\\n                            [matTooltip]=\\\"'Decimals'\\\"\\r\\n                            [formControl]=\\\"decimalOptionsCtrl\\\"\\r\\n                            (selectionChange)='onPricingDecimalOptionSelected()'>\\r\\n                    <mat-option *ngFor=\\\"let decimal of decimalOptions\\\"\\r\\n                                [value]=\\\"decimal\\\">{{decimal}}</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\n\r\n@Component({\r\n    selector: 'atlas-pricing-options',\r\n    templateUrl: './pricing-options.component.html',\r\n    styleUrls: ['./pricing-options.component.scss'],\r\n})\r\nexport class PricingOptionsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly pricingAndDecimalOptionSelected = new EventEmitter<any>();\r\n\r\n    pricingOptionsCtrl = new AtlasFormControl('pricingOptions');\r\n    decimalOptionsCtrl = new AtlasFormControl('decimalOptions', 2);\r\n\r\n    decimalOptions: number[] = [2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n    masterdata: MasterData;\r\n\r\n    constructor(private route: ActivatedRoute, protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.bindConfiguration();\r\n        this.emitPricingAndDecimalOptions();\r\n    }\r\n\r\n    onPricingDecimalOptionSelected() {\r\n        this.emitPricingAndDecimalOptions();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            pricingOptionsCtrl: this.pricingOptionsCtrl,\r\n            decimalOptionsCtrl: this.decimalOptionsCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    emitPricingAndDecimalOptions() {\r\n        this.pricingAndDecimalOptionSelected.emit({\r\n            pricingOption: Number(this.pricingOptionsCtrl.value),\r\n            decimalOption: Number(this.decimalOptionsCtrl.value),\r\n        });\r\n    }\r\n\r\n    onDifferentCommoditySelected(differentCommoditySelected: boolean, differentPricesSelected: boolean) {\r\n        if (differentCommoditySelected) {\r\n            this.setValidators();\r\n        } else if (differentPricesSelected) {\r\n            this.setValidators();\r\n        } else {\r\n            this.clearValidators();\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.pricingOptionsCtrl.setValidators(Validators.compose([Validators.required]));\r\n        this.pricingOptionsCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    clearValidators() {\r\n        this.pricingOptionsCtrl.clearValidators();\r\n        this.pricingOptionsCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const invoiceType = entity as InvoiceRecord;\r\n\r\n        invoiceType.pricingOptionId = this.pricingOptionsCtrl.value ? Number(this.pricingOptionsCtrl.value) : null;\r\n        invoiceType.decimalOption = Number(this.decimalOptionsCtrl.value);\r\n        return invoiceType;\r\n    }\r\n\r\n}\r\n","module.exports = \"<atlas-execution-invoicing-summary-header #summaryHeaderComponent\\r\\n                                          [isCreationMode]=isCreationMode></atlas-execution-invoicing-summary-header>\\r\\n<div class=\\\"main-container\\\">\\r\\n\\r\\n    <atlas-value-of-goods-component #valueOfGoodsComponent></atlas-value-of-goods-component>\\r\\n    <atlas-add-cost #summaryAddCostComponent\\r\\n                    (onCostContractChanged)=\\\"onChangedCostContract($event)\\\">\\r\\n    </atlas-add-cost>\\r\\n    <atlas-taxes-component #taxesComponent></atlas-taxes-component>\\r\\n\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"space-between\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n         class=\\\"payment-total-amount-section\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxFlex=\\\"49\\\">\\r\\n            <atlas-payments-component #paymentComponent\\r\\n                                      fxFlex=\\\"100\\\"\\r\\n                                      fxFlex.lt-md=\\\"92\\\">\\r\\n            </atlas-payments-component>\\r\\n        </div>\\r\\n        <atlas-tax-costs fxFlex=\\\"50%\\\"\\r\\n                         (totalCostTaxCalculated)=\\\"onTotalCostTaxCalculated($event)\\\"\\r\\n                         #summaryTaxCostsComponent>\\r\\n        </atlas-tax-costs>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxFlex=\\\"100\\\">\\r\\n            <atlas-add-cost-total #summaryCostTotalAmountComponent\\r\\n                                  fxFlex=\\\"100\\\"\\r\\n                                  fxFlex.lt-md=\\\"92\\\"></atlas-add-cost-total>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Type } from '@angular/compiler';\r\nimport { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CompanyBankAccounts } from '../../../../../shared/entities/company-bankaccounts.entity';\r\nimport { CostDirectionType } from '../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../shared/enums/cost-sign.enum';\r\nimport { InvoiceTypes } from '../../../../../shared/enums/invoice-type.enum';\r\nimport { ContractsToCostInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { ContractsToInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { HeaderComponent } from '../../../header/header.component';\r\nimport { AddCostTaxComponent } from '../working-page/components/add-cost-tax/add-cost-tax.component';\r\nimport { AddCostTotalComponent } from '../working-page/components/add-cost-total/add-cost-total.component';\r\nimport { AddCostComponent } from '../working-page/components/add-cost/add-cost.component';\r\nimport { CommercialPaymentsComponent } from '../working-page/components/payments-component/payments-component.component';\r\nimport { TaxesComponent } from '../working-page/components/taxes-component/taxes-component.component';\r\nimport { CommercialValueOfGoodsComponent } from '../working-page/components/value-of-goods-component/value-of-goods-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-commercial-summary',\r\n    templateUrl: './commercial-summary.component.html',\r\n    styleUrls: ['./commercial-summary.component.scss'],\r\n})\r\nexport class CommercialSummaryComponent extends BaseFormComponent implements OnInit {\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('paymentComponent') paymentComponent: CommercialPaymentsComponent;\r\n    @ViewChild('taxesComponent') taxesComponent: TaxesComponent;\r\n    @ViewChild('valueOfGoodsComponent') valueOfGoodsComponent: CommercialValueOfGoodsComponent;\r\n    @ViewChild('summaryHeaderComponent') summaryHeaderComponent: HeaderComponent;\r\n    @ViewChild('summaryAddCostComponent') summaryAddCostComponent: AddCostComponent;\r\n    @ViewChild('summaryTaxCostsComponent') summaryTaxCostsComponent: AddCostTaxComponent;\r\n    @ViewChild('summaryCostTotalAmountComponent') summaryCostTotalAmountComponent: AddCostTotalComponent;\r\n    @Input() invoiceRecordFromGrid: InvoiceSummaryRecord;\r\n    @Input() defaultVATCode: string;\r\n    @Input() isCreationMode: boolean;\r\n    @Input() filteredCompanyBankAccounts: CompanyBankAccounts[];\r\n    @Input() invoiceCostContracts: ContractsToCostInvoice[];\r\n    @Input() invoiceTaxContracts: TaxRecord[];\r\n    @Input() invoiceTaxTotal: TaxRecord;\r\n    invoiceSummaryFormGroup: FormGroup;\r\n    model: InvoiceRecord;\r\n    invoiceLabel: string;\r\n    quantityToInvoice: string;\r\n    contracts: ContractsToInvoice[];\r\n    decimalOptionValue: number = 0;\r\n    pricingOptionValue: number = 0;\r\n    defaultDecimalOption: number = 2;\r\n    contract: ContractsToInvoice;\r\n    contractType: string = 'Contract';\r\n    costContracts: ContractsToCostInvoice[];\r\n    additionalCostRate: number = 0;\r\n    additionalCostCostDirection: string;\r\n    costTaxes: TaxRecord[];\r\n    totalData: TaxRecord;\r\n    valueOfGoodsDecimalOption: number = 2;\r\n    valueOfGoodsCurrency: string;\r\n    valueOfGoodsTotal: number = 0;\r\n    valueOfGoodsCostDirection: string;\r\n    totalRecordForGoods: InvoiceRecord = new InvoiceRecord();\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSummaryFormGroup = this.formBuilder.group({\r\n            paymentComponent: this.paymentComponent.getFormGroup(),\r\n            taxesComponent: this.taxesComponent.getFormGroup(),\r\n            valueOfGoodsComponent: this.valueOfGoodsComponent.getFormGroup(),\r\n            summaryHeaderComponent: this.summaryHeaderComponent.getFormGroup(),\r\n            summaryAddCostComponent: this.summaryAddCostComponent.getFormGroup(),\r\n            summaryTaxCostsComponent: this.summaryTaxCostsComponent.getFormGroup(),\r\n        });\r\n        this.invoiceSummaryFormGroup.disable();\r\n\r\n        this.formComponents.push(this.paymentComponent,\r\n            this.taxesComponent,\r\n            this.valueOfGoodsComponent,\r\n            this.summaryHeaderComponent,\r\n            this.summaryAddCostComponent,\r\n            this.summaryTaxCostsComponent);\r\n        this.summaryAddCostComponent.isAdditionalCostForSummary = true;\r\n    }\r\n\r\n    contractToBeSelected(contracts: ContractsToInvoice[]) {\r\n        this.contracts = contracts;\r\n    }\r\n\r\n    costContractToBeSelected(costContracts: ContractsToCostInvoice[]) {\r\n        this.costContracts = costContracts;\r\n    }\r\n\r\n    setDecimalAndPricingOption(decimalOptionValue: number, pricingOptionValue: number) {\r\n        this.decimalOptionValue = decimalOptionValue;\r\n        this.pricingOptionValue = pricingOptionValue;\r\n    }\r\n\r\n    populateInvoiceRecord(record: InvoiceRecord) {\r\n        this.model = record;\r\n        // this.costContracts = this.invoiceCostContracts;\r\n        this.costTaxes = this.invoiceTaxContracts;\r\n        this.totalData = this.invoiceTaxTotal;\r\n        this.populateSummaryFields();\r\n    }\r\n\r\n    populateSummaryFields() {\r\n        this.valueOfGoodsComponent.pricingAndDecimalOptionSelected(this.pricingOptionValue, this.decimalOptionValue);\r\n        if (this.contracts) {\r\n            this.valueOfGoodsComponent.contractToBeSelected(this.contracts);\r\n        }\r\n        if (this.costContracts) {\r\n            this.summaryAddCostComponent.contractToBeSelected(this.costContracts);\r\n        }\r\n        if (this.costTaxes) {\r\n            this.summaryTaxCostsComponent.taxRecordsSelected(this.costTaxes);\r\n        }\r\n        if (this.model) {\r\n            this.paymentComponent.invoicePayTermsCntrl.patchValue(this.model.paymentTerms);\r\n            this.paymentComponent.invoiceDueDateCntrl.patchValue(this.model.dueDate);\r\n            this.summaryCostTotalAmountComponent.amount = this.model.totalInvoiceValue;\r\n            this.summaryCostTotalAmountComponent.currencyCode = this.model.currency;\r\n            this.summaryCostTotalAmountComponent.costDirectionSign = CostSigns[this.model.costDirection];\r\n            this.summaryTaxCostsComponent.currencyCode = this.model.currency;\r\n            this.summaryAddCostComponent.currencyCodeSelected = this.model.currency;\r\n            this.summaryCostTotalAmountComponent.decimalOption = this.decimalOptionValue;\r\n            this.summaryCostTotalAmountComponent.totalCostDirectionSign = (this.model.invoiceType === InvoiceTypes.Purchase) ?\r\n                CostSigns[CostDirectionType.Cr] : CostSigns[CostDirectionType.Dr];\r\n            this.summaryHeaderComponent.setHeaderFieldsForSummary(this.model, this.filteredCompanyBankAccounts);\r\n\r\n            if (this.model.invoiceLines.length > 0) {\r\n                if (this.model.invoiceLines[0].vatCode) {\r\n                    this.taxesComponent.currencyCode = this.model.invoiceLines[0].currencyCode;\r\n                    this.taxesComponent.setDefaultVatCode(this.model.invoiceLines[0].vatCode);\r\n                }\r\n            }\r\n        }\r\n        this.summaryAddCostComponent.isAdditionalCostForSummary = true;\r\n        this.summaryCostTotalAmountComponent.summaryTotalCalculated();\r\n    }\r\n\r\n    setSummaryFieldsFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        this.summaryAddCostComponent.contractToBeSelectedFromGrid(summaryRecord);\r\n        this.valueOfGoodsComponent.pricingAndDecimalOptionSelected(this.pricingOptionValue, this.defaultDecimalOption);\r\n        this.valueOfGoodsComponent.contractToBeSelectedFromGrid(summaryRecord);\r\n        this.paymentComponent.setValuesForSummaryFromGrid(summaryRecord);\r\n        this.taxesComponent.setDataForTaxGoods(summaryRecord, this.defaultVATCode);\r\n        this.summaryCostTotalAmountComponent.setValuesForTotalFromGrid(summaryRecord);\r\n        this.summaryHeaderComponent.setHeaderFieldsFromGrid(summaryRecord);\r\n        this.summaryAddCostComponent.isAdditionalCostForSummary = true;\r\n\r\n    }\r\n\r\n    onTotalCostTaxCalculated(model) {\r\n        this.totalData = model;\r\n        this.calculateTaxTotal(model);\r\n    }\r\n    calculateTaxTotal(model: any) {\r\n        this.summaryCostTotalAmountComponent.setValuesForTotalTax(model);\r\n    }\r\n    calculateTotalWithoutTax() {\r\n        this.totalRecordForGoods.totalInvoiceValue = this.additionalCostRate + this.valueOfGoodsTotal;\r\n        this.totalRecordForGoods.decimalOption = this.valueOfGoodsDecimalOption;\r\n        this.totalRecordForGoods.currency = this.valueOfGoodsCurrency;\r\n        if (this.valueOfGoodsCostDirection === this.additionalCostCostDirection) {\r\n            this.totalRecordForGoods.costDirection = CostDirections[this.additionalCostCostDirection];\r\n        } else {\r\n            this.setCostDirection();\r\n        }\r\n        this.summaryCostTotalAmountComponent.setValuesForTotalWithoutTax(this.totalRecordForGoods);\r\n    }\r\n\r\n    setCostDirection() {\r\n        this.totalRecordForGoods.costDirection = (Math.abs(this.additionalCostRate) > Math.abs(this.valueOfGoodsTotal)) ?\r\n            CostDirections[this.additionalCostCostDirection] : CostDirections[this.valueOfGoodsCostDirection];\r\n    }\r\n\r\n    onChangedCostContract(model: any) {\r\n        if (model) {\r\n            this.additionalCostRate = model.rate;\r\n            this.additionalCostCostDirection = model.costDirection;\r\n            if (this.additionalCostCostDirection === CostDirections[CostDirections.Payable]) {\r\n                this.additionalCostRate = -(this.additionalCostRate);\r\n            }\r\n            this.summaryTaxCostsComponent.getTaxesForSelectedVat(model);\r\n            this.calculateTotalWithoutTax();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxFlex=\\\"49\\\">\\r\\n        <atlas-selection-form-component #selectionFormComponent\\r\\n                                        fxFlex=\\\"100\\\"\\r\\n                                        fxFlex.lt-md=\\\"92\\\"\\r\\n                                        (invoiceDateSelected)=\\\"onInvoiceDateSelected($event)\\\">\\r\\n        </atlas-selection-form-component>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxFlex=\\\"49\\\">\\r\\n        <atlas-document-template #documentTemplateComponent\\r\\n                                 (templateSelected)=\\\"onTemplateSelected($event)\\\"\\r\\n                                 fxFlex=\\\"100\\\"\\r\\n                                 fxFlex.lt-md=\\\"92\\\"\\r\\n                                 [documentType]=\\\"DocumentTypes.InvoiceGoodsInvoice\\\">\\r\\n        </atlas-document-template>\\r\\n    </div>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"start center\\\">\\r\\n    <atlas-value-of-goods-component #valueOfGoodsComponent\\r\\n                                    [defaultWeightCode]=\\\"companyWeightCode\\\"\\r\\n                                    (totalAmountCalculated)=\\\"ontotalAmountCalculated($event)\\\"\\r\\n                                    (costCurrency)=\\\"onCostCurrency($event)\\\"\\r\\n                                    fxFlex=\\\"100\\\"></atlas-value-of-goods-component>\\r\\n</div>\\r\\n<atlas-add-cost #addCostComponent\\r\\n                [selectedGoodsVat]=\\\"selectedGoodsVatCode\\\"\\r\\n                (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\"\\r\\n                (narrativeLength)=\\\"onNarrativeValueChanged($event)\\\">\\r\\n</atlas-add-cost>\\r\\n\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"start center\\\">\\r\\n    <atlas-taxes-component #taxesComponent\\r\\n                           (selectedGoodsTaxCode)=\\\"onChangeGoodsTaxCode($event)\\\"\\r\\n                           fxFlex=\\\"100\\\"></atlas-taxes-component>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n     class=\\\"payment-total-amount-section\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxFlex=\\\"49\\\">\\r\\n        <atlas-payments-component #paymentComponent\\r\\n                                  fxFlex=\\\"100\\\"\\r\\n                                  fxFlex.lt-md=\\\"92\\\">\\r\\n        </atlas-payments-component>\\r\\n    </div>\\r\\n    <atlas-tax-costs fxFlex=\\\"50%\\\"\\r\\n                     (totalCostTaxCalculated)=\\\"onTotalCostTaxCalculated($event)\\\"\\r\\n                     #taxCostsComponent>\\r\\n    </atlas-tax-costs>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxFlex=\\\"100\\\">\\r\\n        <atlas-add-cost-total #totalComponent\\r\\n                              fxFlex=\\\"100\\\"\\r\\n                              fxFlex.lt-md=\\\"92\\\"></atlas-add-cost-total>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".invoice-creation-margin {\\n  margin-left: 24px;\\n  margin-right: 24px; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { DocumentTemplateSelectedEvent } from '../../../../../shared/document-template-event.entity';\r\nimport { CostDirectionType } from '../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../shared/enums/cost-sign.enum';\r\nimport { DocumentTypes } from '../../../../../shared/enums/document-type.enum';\r\nimport { InvoicePaymentType } from '../../../../../shared/enums/invoice-payment-type';\r\nimport { InvoiceTypes } from '../../../../../shared/enums/invoice-type.enum';\r\nimport { ContractsToInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentTemplateComponent } from '../../../components/document-template/document-template.component';\r\nimport { TotalAmountComponent } from '../../../total-amount/total-amount.component';\r\nimport { AddCostTaxComponent } from './components/add-cost-tax/add-cost-tax.component';\r\nimport { AddCostTotalComponent } from './components/add-cost-total/add-cost-total.component';\r\nimport { AddCostComponent } from './components/add-cost/add-cost.component';\r\nimport { CommercialPaymentsComponent } from './components/payments-component/payments-component.component';\r\nimport { SelectionFormComponentComponent } from './components/selection-form-component/selection-form-component.component';\r\nimport { TaxesComponent } from './components/taxes-component/taxes-component.component';\r\nimport { CommercialValueOfGoodsComponent } from './components/value-of-goods-component/value-of-goods-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-commercial-working-page',\r\n    templateUrl: './commercial-working-page.component.html',\r\n    styleUrls: ['./commercial-working-page.component.scss'],\r\n})\r\nexport class CommercialWorkingPageComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly totalAmountCalculated = new EventEmitter<number>();\r\n    @Output() readonly templateSelected = new EventEmitter<DocumentTemplateSelectedEvent>();\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<number>();\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<number>();\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('paymentComponent') paymentComponent: CommercialPaymentsComponent;\r\n    @ViewChild('taxesComponent') taxesComponent: TaxesComponent;\r\n    @ViewChild('totalAmountComponent') totalAmountComponent: TotalAmountComponent;\r\n    @ViewChild('documentTemplateComponent') documentTemplateComponent: DocumentTemplateComponent;\r\n    @ViewChild('selectionFormComponent') selectionFormComponent: SelectionFormComponentComponent;\r\n    @ViewChild('valueOfGoodsComponent') valueOfGoodsComponent: CommercialValueOfGoodsComponent;\r\n    @ViewChild('addCostComponent') addCostComponent: AddCostComponent;\r\n    @ViewChild('taxCostsComponent') taxCostsComponent: AddCostTaxComponent;\r\n    @ViewChild('totalComponent') totalComponent: AddCostTotalComponent;\r\n    invoiceWorkingFormGroup: FormGroup;\r\n    DocumentTypes = DocumentTypes;\r\n    InvoiceTypes = InvoiceTypes;\r\n    additionalCostRate: number = 0;\r\n    additionalCostCostDirection: string;\r\n    totalData: TaxRecord;\r\n    totalRecordForWashout: InvoiceRecord = new InvoiceRecord();\r\n    valueOfGoodsDecimalOption: number = 2;\r\n    valueOfGoodsCurrency: string;\r\n    valueOfGoodsCostDirection: string;\r\n    valueOfGoodsTotal: number = 0;\r\n    selectedGoodsVatCode: string;\r\n    @Input() companyWeightCode: string;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceWorkingFormGroup = this.formBuilder.group({\r\n            selectionFormComponent: this.selectionFormComponent.getFormGroup(),\r\n            paymentComponent: this.paymentComponent.getFormGroup(),\r\n            taxesComponent: this.taxesComponent.getFormGroup(),\r\n            documentTemplateComponent: this.documentTemplateComponent.getFormGroup(),\r\n            totalComponent: this.totalComponent.getFormGroup(),\r\n            addCostComponent: this.addCostComponent.getFormGroup(),\r\n            taxCostsComponent: this.taxCostsComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.paymentComponent,\r\n            this.taxesComponent,\r\n            this.documentTemplateComponent,\r\n            this.selectionFormComponent,\r\n            this.valueOfGoodsComponent,\r\n            this.totalComponent,\r\n            this.addCostComponent,\r\n            this.taxCostsComponent);\r\n    }\r\n\r\n    contractsSelected(contracts: ContractsToInvoice[]) {\r\n        this.selectionFormComponent.contractToBeSelected(contracts);\r\n        this.valueOfGoodsComponent.contractToBeSelected(contracts);\r\n        if (contracts && contracts.length > 0) {\r\n            this.addCostComponent.setDefaultCurrency(contracts[0].currencyCode);\r\n        }\r\n    }\r\n    pricingAndDecimalOptionSelected(pricingOption: number, decimalOption: number) {\r\n        this.valueOfGoodsComponent.pricingAndDecimalOptionSelected(pricingOption, decimalOption);\r\n    }\r\n\r\n    onInvoiceDateSelected(invoiceDate: Date) {\r\n        this.paymentComponent.setinvoiceDateSelected(invoiceDate);\r\n    }\r\n\r\n    ontotalAmountCalculated(model: any) {\r\n        if (model) {\r\n            this.totalComponent.amount = model.amount;\r\n            this.valueOfGoodsTotal = model.amount;\r\n            this.valueOfGoodsCurrency = model.currencyCode;\r\n            this.valueOfGoodsCostDirection = CostDirections[CostDirectionType[model.debitCredit]];\r\n            this.totalComponent.decimalOption = model.decimalOption;\r\n            this.totalComponent.currencyCode = model.currencyCode;\r\n            this.totalComponent.totalCostDirectionSign = CostSigns[CostDirectionType[model.debitCredit]];\r\n            this.totalComponent.invoiceLabel = InvoicePaymentType[CostDirectionType[model.debitCredit]];\r\n            this.taxesComponent.currencyCode = model.currencyCode;\r\n            if (this.valueOfGoodsCostDirection === CostDirections[CostDirections.Payable]) {\r\n                this.valueOfGoodsTotal = -(this.valueOfGoodsTotal);\r\n            }\r\n            this.calculateTotalWithoutTax();\r\n        }\r\n    }\r\n\r\n    onTemplateSelected(event: DocumentTemplateSelectedEvent) {\r\n        this.templateSelected.emit(event);\r\n    }\r\n\r\n    onCostCurrency(currency: any) {\r\n        this.addCostComponent.currencyCodeSelected = currency;\r\n        this.taxCostsComponent.currencyCode = currency;\r\n    }\r\n\r\n    populateEntity(model: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n    onChangeCostContract(model: any) {\r\n        if (model) {\r\n            this.additionalCostRate = model.rate;\r\n            this.additionalCostCostDirection = model.costDirection;\r\n            if (this.additionalCostCostDirection === CostDirections[CostDirections.Payable]) {\r\n                this.additionalCostRate = -(this.additionalCostRate);\r\n            }\r\n            this.taxCostsComponent.getTaxesForSelectedVat(model);\r\n            this.totalCostAndVatCode.emit(model);\r\n            this.calculateTotalWithoutTax();\r\n        }\r\n    }\r\n\r\n    onChangeGoodsTaxCode(vatCode: string) {\r\n        this.selectedGoodsVatCode = vatCode;\r\n    }\r\n\r\n    onTotalCostTaxCalculated(model: any) {\r\n        this.totalData = model;\r\n        this.calculateTaxTotal(model);\r\n        this.totalCostTaxCalculated.emit(model);\r\n    }\r\n    calculateTaxTotal(model: any) {\r\n        this.totalComponent.setValuesForTotalTax(model);\r\n    }\r\n    calculateTotalWithoutTax() {\r\n        this.totalRecordForWashout.totalInvoiceValue = this.additionalCostRate + this.valueOfGoodsTotal;\r\n        this.totalRecordForWashout.decimalOption = this.valueOfGoodsDecimalOption;\r\n        this.totalRecordForWashout.currency = this.valueOfGoodsCurrency;\r\n        if (this.valueOfGoodsCostDirection === this.additionalCostCostDirection) {\r\n            this.totalRecordForWashout.costDirection = CostDirections[this.additionalCostCostDirection];\r\n        } else {\r\n            if (Math.abs(this.additionalCostRate) > Math.abs(this.valueOfGoodsTotal)) {\r\n                this.totalRecordForWashout.costDirection = CostDirections[this.additionalCostCostDirection];\r\n            } else {\r\n                this.totalRecordForWashout.costDirection = CostDirections[this.valueOfGoodsCostDirection];\r\n            }\r\n        }\r\n\r\n        this.totalComponent.setValuesForTotalWithoutTax(this.totalRecordForWashout);\r\n    }\r\n\r\n    onNarrativeValueChanged(maxLength: boolean) {\r\n        this.narrativeLength.emit(maxLength);\r\n    }\r\n\r\n    validateCostGrid() {\r\n        // calling the costgrid component to set the required field validation\r\n        return this.addCostComponent.validate();\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        Taxes for Cost\\r\\n\\r\\n    </mat-card-title>\\r\\n\\r\\n    <mat-card-content>\\r\\n\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"taxesGridRows\\\"\\r\\n                         [columnDefs]=\\\"taxesGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [pagination]=\\\"false\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <h2 class=\\\"no-margin total-figure\\\">Total Tax Amount: <span\\r\\n                      class=\\\"total-figure-value\\\">{{defaultTaxDirectionSign}}{{formatQuantityAndTotal(this.taxTotal)}}\\r\\n                    {{currencyCode}}</span>\\r\\n            </h2>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".ag-theme-material {\\n  margin-bottom: 0px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { TaxRecord } from '../../../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-add-cost-tax',\r\n    templateUrl: './add-cost-tax.component.html',\r\n    styleUrls: ['./add-cost-tax.component.scss']\r\n})\r\nexport class AddCostTaxComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<any>();\r\n    taxesGridOptions: agGrid.GridOptions = {};\r\n    taxesGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    gridApi: agGrid.GridApi;\r\n    rowGroupPanelShow: string;\r\n    isGroupingEnabled: boolean = false;\r\n    taxesGridRows: TaxRecord[];\r\n    costDirection: CostDirection;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    masterdata: MasterData = new MasterData();\r\n    vatCode: Vat[];\r\n    vatCodeAvailable: TaxRecord[];\r\n    costDirections: CostDirection[];\r\n\r\n    costTotal: number = 0;\r\n    total: number = 0;\r\n    taxTotal: number = 0;\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    costDirectionPay: string = 'Pay';\r\n    userActiveDirectoryName: string;\r\n    company: string;\r\n    defaultTaxDirectionSign: string = CostSigns[CostDirections.Payable];\r\n\r\n    constructor(private route: ActivatedRoute, protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        private authorizationService: AuthorizationService,\r\n        private companyManagerService: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n        this.company = this.companyManagerService.getCurrentCompanyId();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.taxesGridColumns;\r\n        this.taxesGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    initializeGridColumns() {\r\n        this.taxesGridColumns = [\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'vatDescription',\r\n                colId: 'vatDescription',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Amount',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: false,\r\n                valueFormatter: this.vatAmountFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    vatAmountFormatter(param) {\r\n        return Math.abs(param.value);\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.vatCode = this.masterdata.vats.filter((option) => option.vatCode === defaultVatCode);\r\n        const defaultTaxRecord: TaxRecord[] = [];\r\n        this.vatCode.forEach((data) => {\r\n            const taxLine = new TaxRecord();\r\n            taxLine.vatCode = data.vatCode;\r\n            taxLine.vatDescription = data.vatDescription;\r\n            taxLine.rate = data.rate;\r\n            taxLine.costDirection = this.credit;\r\n            defaultTaxRecord.push(taxLine);\r\n        });\r\n        if (defaultTaxRecord) {\r\n            this.taxRecordsSelected(defaultTaxRecord);\r\n        }\r\n    }\r\n\r\n    taxRecordsSelected(taxesRecord: TaxRecord[]) {\r\n        if (taxesRecord.length > 0) {\r\n            this.initializeGridColumns();\r\n            this.taxesGridRows = taxesRecord;\r\n            this.calculateTotalAmount(taxesRecord);\r\n            if (this.gridApi) {\r\n                this.gridApi.hideOverlay();\r\n            }\r\n        }\r\n    }\r\n\r\n    setDirectionAndCurrency(data: TaxRecord) {\r\n        this.costDirectionDisplay = data.costDirection;\r\n        this.currencyCode = data.currencyCode;\r\n    }\r\n\r\n    calculateTotalAmount(taxes: TaxRecord[]) {\r\n        this.total = 0;\r\n        this.taxTotal = 0;\r\n        taxes.forEach(\r\n            (tax) => {\r\n                this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n            },\r\n        );\r\n        this.totalCostTaxCalculated.emit({\r\n            amount: this.taxTotal,\r\n            decimalOption: this.decimalOptionValue,\r\n            currencyCode: this.currencyCode,\r\n            costDirection: this.costDirectionDisplay,\r\n        });\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n\r\n    getTaxesForSelectedVat(model: CostInvoiceRecord) {\r\n        if (model) {\r\n            this.costTotal = model.rate;\r\n            this.decimalOptionValue = model.decimalOption;\r\n            this.currencyCode = model.currencyCode;\r\n            this.totalCostDirection = model.costDirection;\r\n            if (model.costDirection === CostDirections[CostDirections.Payable]) {\r\n                this.costDirectionDisplay = this.credit;\r\n            } else if (model.costDirection === CostDirections[CostDirections.Receivable]) {\r\n                this.costDirectionDisplay = this.debit;\r\n            }\r\n            this.taxRecordsSelected(model.vatAvailable);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Total Amount</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             class=\\\"total-amount-content\\\">\\r\\n            <h2 class=\\\"no-margin total-figure\\\">Invoice Total Without Taxes: <span\\r\\n                      class=\\\"total-figure-value\\\">{{costDirectionSign}}{{formatAmount(amount)}}\\r\\n                    {{currencyCode}}</span> </h2>\\r\\n            <h2 class=\\\"no-margin total-figure\\\">Total Taxes: <span\\r\\n                      class=\\\"total-figure-value\\\">{{taxCostDirectionSign}}{{formatAmount(this.taxTotal)}}\\r\\n                    {{currencyCode}}</span> </h2>\\r\\n            <h2 class=\\\"no-margin total-figure\\\">Total Invoice Value: Amount to {{invoiceLabel}} <span\\r\\n                      class=\\\"total-figure-value\\\">{{totalCostDirectionSign}}{{formatAmount(this.total)}}\\r\\n                    {{currencyCode}}</span> </h2>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"mat-card-content {\\n  height: 50%; }\\n  mat-card-content .total-amount-content {\\n    height: 100%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { CostDirectionType } from '../../../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { InvoicePaymentType } from '../../../../../../../shared/enums/invoice-payment-type';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-add-cost-total',\r\n    templateUrl: './add-cost-total.component.html',\r\n    styleUrls: ['./add-cost-total.component.scss'],\r\n})\r\nexport class AddCostTotalComponent extends BaseFormComponent implements OnInit {\r\n\r\n    total: number = 0;\r\n    amount: number = 0;\r\n    taxTotal: number = 0;\r\n    currencyCode: string;\r\n    decimalOption: number;\r\n    formatType: string = 'en-US';\r\n    defaultDecimalOption: number = 2;\r\n    costDirectionDisplay: string;\r\n    totalCostDirection: string;\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    costDirections: CostDirection[];\r\n    costDirectionSign: string;\r\n    totalCostDirectionSign: string;\r\n    taxCostDirectionSign: string = CostSigns[CostDirections.Payable];\r\n    invoiceLabel: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n    }\r\n\r\n    formatAmount(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    setValuesForTotalWithoutTax(model: InvoiceRecord) {\r\n        this.amount = Math.abs(model.totalInvoiceValue);\r\n        this.decimalOption = model.decimalOption;\r\n        this.currencyCode = model.currency;\r\n        if (model.costDirection === CostDirections.Payable) {\r\n            this.costDirectionDisplay = this.credit;\r\n        } else if (model.costDirection === CostDirections.Receivable) {\r\n            this.costDirectionDisplay = this.debit;\r\n        }\r\n        this.costDirectionSign = CostSigns[model.costDirection];\r\n        this.setTotalForGoodCost();\r\n\r\n    }\r\n\r\n    setTotalForGoodCost() {\r\n        if (this.costDirectionDisplay) {\r\n            if (this.costDirectionDisplay === this.credit) {\r\n                this.total = this.taxTotal + this.amount;\r\n                this.totalCostDirection = this.credit;\r\n            } else {\r\n                this.total = this.amount - this.taxTotal;\r\n                this.totalCostDirection = this.debit;\r\n            }\r\n            this.invoiceLabel = InvoicePaymentType[CostDirectionType[this.costDirectionDisplay]];\r\n            this.totalCostDirectionSign = CostSigns[CostDirectionType[this.costDirectionDisplay]];\r\n        } else {\r\n            this.total = this.taxTotal;\r\n            this.totalCostDirection = this.credit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n            this.invoiceLabel = InvoicePaymentType[CostDirections.Payable];\r\n        }\r\n    }\r\n\r\n    setValuesForTotalTax(model: TaxRecord) {\r\n        this.taxTotal = Math.abs(model.amount);\r\n        this.decimalOption = model.decimalOption;\r\n        this.currencyCode = model.currencyCode;\r\n        this.total = this.taxTotal + this.amount;\r\n        if (this.taxTotal) {\r\n            this.setTotalForGoodCost();\r\n        }\r\n    }\r\n\r\n    setValuesForTotalFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        const invoiceLines = summaryRecord.summaryLines as InvoiceSummaryLineRecord[];\r\n        let total: number = 0;\r\n        invoiceLines.forEach((tax) => {\r\n            total = total + tax.vatAmount;\r\n        });\r\n        this.taxTotal = total;\r\n        this.decimalOption = this.defaultDecimalOption;\r\n        this.currencyCode = summaryRecord.currency;\r\n        this.amount = summaryRecord.totalInvoiceValue;\r\n        this.calculateCostDirection(invoiceLines);\r\n        this.setTotalForGoodCost();\r\n    }\r\n    summaryTotalCalculated() {\r\n        this.total = this.taxTotal + this.amount;\r\n    }\r\n\r\n    calculateCostDirection(contracts: InvoiceSummaryLineRecord[]) {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        let costDirectionId: number;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.lineAmount;\r\n                } else {\r\n                    totalDR = totalDR + contract.lineAmount;\r\n                }\r\n            },\r\n        );\r\n        this.costDirectionDisplay = (totalCR > totalDR) ? CostDirectionType[CostDirectionType.Cr] : CostDirectionType[CostDirectionType.Dr];\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n\r\n            if (selectedCostDirection) {\r\n                return selectedCostDirection.costDirectionId;\r\n            }\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceDetails = entity;\r\n        invoiceDetails.costDirection = (this.totalCostDirectionSign === CostSigns[CostDirections.Payable])\r\n            ? CostDirections.Payable : CostDirections.Receivable;\r\n        return invoiceDetails;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"90%\\\">\\r\\n                <h2>Cost</h2>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div [hidden]=\\\"isAdditionalCostForSummary\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             class=\\\"add-line-container\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <h4>Add new lines:</h4>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\"\\r\\n                 fxFlex=\\\"2\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [formControl]=\\\"addNewLineCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onAddRowButtonClicked(addNewLineCtrl.value)\\\">PROCEED</button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\"\\r\\n             class=\\\"use-goods-tax-code\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            <mat-slide-toggle [formControl]=\\\"useGoodsTaxCodeCtrl\\\"> Use Goods Tax Code</mat-slide-toggle>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end\\\"\\r\\n                 fxFlex=\\\"10%\\\"\\r\\n                 [hidden]=\\\"isAdditionalCostForSummary\\\">\\r\\n                <mat-form-field fxFlex=\\\"90%\\\">\\r\\n                    <mat-select placeholder=\\\"Cost VAT Code\\\"\\r\\n                                [formControl]=\\\"costVatCodeCtrl\\\"\\r\\n                                matTooltip=\\\"Cost VAT Code\\\"\\r\\n                                (selectionChange)='onCostVatCodeSelected()'>\\r\\n                        <mat-option *ngFor=\\\"let code of costVatCodeOptions\\\"\\r\\n                                    [value]=\\\"code.vatCode\\\">\\r\\n                            {{code.vatCode}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"selectedCostGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"selectedCostGridRows\\\"\\r\\n                             [columnDefs]=\\\"selectedCostGridColumns\\\"\\r\\n                             [gridOptions]=\\\"selectedCostGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [enableFilter]=\\\"true\\\"\\r\\n                             [rowSelection]=\\\"rowSelection\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [singleClickEdit]=true>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <h2 class=\\\"no-margin total-figure\\\">\\r\\n                Total Cost:<span class=\\\"total-figure-value\\\">\\r\\n                    {{this.totalCostDirectionSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                    {{this.currencyCodeSelected}} </span>\\r\\n            </h2>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n// import { DatePipe } from '@angular/common';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { AgContextualMenuComponent } from '../../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { InvoiceSetupResult } from '../../../../../../../shared/dtos/invoice-setup-result';\r\nimport { AgContextualMenuAction } from '../../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { InvoiceLineRecord } from '../../../../../../../shared/entities/invoice-line-record.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { CurrencyCodes } from '../../../../../../../shared/enums/currency-codes.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-add-cost',\r\n    templateUrl: './add-cost.component.html',\r\n    styleUrls: ['./add-cost.component.scss'],\r\n})\r\nexport class AddCostComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceCostMenuActions: { [key: string]: string } = {\r\n        deleteInvoiceCost: 'delete',\r\n    };\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<any>();\r\n    costVatCodeCtrl = new AtlasFormControl('CostVatCode');\r\n    useGoodsTaxCodeCtrl = new AtlasFormControl('UseGoodsTaxCode');\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n    @Input() invoiceSetupData: InvoiceSetupResult;\r\n    @Input() selectedGoodsVat: string;\r\n\r\n    company: string;\r\n    costDirections: CostDirection[];\r\n    selectedCostGridOptions: agGrid.GridOptions = {};\r\n    selectedCostGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    selectedCostGridRows: ContractsToCostInvoice[] = [];\r\n\r\n    invoiceType: number;\r\n    componentId: string = 'selectedCost';\r\n    isAddRow: boolean;\r\n    rowSelection: string;\r\n    masterData: MasterData;\r\n    invoicedPercentage: number = 100;\r\n    currencyCodeSelected: string;\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n    };\r\n    gridContext = {\r\n        gridEditable: false,\r\n    };\r\n    costVatCodeOptions: Vat[];\r\n    taxRateCalculated: number = 0;\r\n    vatRate: number[];\r\n\r\n    total: number = 0;\r\n    taxTotal: number = 0;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    vatCodeAvailable: Vat[];\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    defaultVatCode: string;\r\n    isAdditionalCostForSummary: boolean = false;\r\n    selectedCostVat: string;\r\n    costNarrativePrefix: string = 'ADD ';\r\n    userActiveDirectoryName: string;\r\n    totalCostDirectionSign: string;\r\n    addNewLineCtrl = new AtlasFormControl('addNewLineCtrl');\r\n    invoiceCostGridContextualMenuActions: AgContextualMenuAction[];\r\n    inPNL: boolean = false;\r\n    noAction: boolean = false;\r\n\r\n    constructor(private executionService: ExecutionService, protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        // private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        protected snackbar: SnackbarService,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n        this.gridContext.gridEditable = false;\r\n        this.costVatCodeOptions = this.masterData.vats;\r\n        this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n        this.selectedCostVat = this.costVatCodeCtrl.value;\r\n        this.init();\r\n        this.initializeGridColumns();\r\n        this.addNewLineCtrl.patchValue(1);\r\n        this.useGoodsTaxCodeCtrl.patchValue(true);\r\n        this.onChanges();\r\n    }\r\n\r\n    init() {\r\n        this.invoiceCostGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.invoiceCostMenuActions.deleteInvoiceCost,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, costLine: ContractsToCostInvoice) {\r\n        switch (action) {\r\n            case this.invoiceCostMenuActions.deleteInvoiceCost:\r\n                this.onDeleteSelectedButtonClicked(costLine);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            costVatCodeCtrl: this.costVatCodeCtrl,\r\n            useGoodsTaxCodeCtrl: this.useGoodsTaxCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onChanges() {\r\n        this.useGoodsTaxCodeCtrl.valueChanges.subscribe((val) => {\r\n            if (val) {\r\n                this.onUseGoodsTaxCodeToggleChange(this.selectedGoodsVat);\r\n            } else {\r\n                this.onUseGoodsTaxCodeToggleChange(this.selectedCostVat);\r\n            }\r\n        });\r\n    }\r\n\r\n    onUseGoodsTaxCodeToggleChange(value: string) {\r\n        if (value) {\r\n            this.costVatCodeCtrl.patchValue(value);\r\n            const changedVatCode = [];\r\n            this.gridApi.forEachNode((rowNode) => {\r\n                if (rowNode.data) {\r\n                    const data = rowNode.data;\r\n                    data.vatCode = value;\r\n                    changedVatCode.push(data);\r\n                }\r\n            });\r\n            this.gridApi.updateRowData({ update: changedVatCode });\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n    setVatCodeAvailable() {\r\n        if (this.selectedGoodsVat) {\r\n            this.costVatCodeCtrl.patchValue(this.selectedGoodsVat);\r\n            this.vatCodeAvailable = this.masterData.vats.filter((option) => option.vatCode === this.selectedGoodsVat);\r\n            this.totalCostAndVatDetails();\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.selectedCostGridColumns;\r\n        this.selectedCostGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.autoSizeGridHeader();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n    autoSizeGridHeader() {\r\n        const allColumnIds = [];\r\n        this.selectedCostGridColumns.forEach((columnDefs) => {\r\n            allColumnIds.push(columnDefs.field);\r\n        });\r\n        this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.selectedCostGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n                width: 250,\r\n                minWidth: 250,\r\n                maxWidth: 250,\r\n                suppressSizeToFit: true,\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: this.masterData,\r\n                    options: this.masterData.costTypes.filter((cost) => cost.isATradeCost === true)\r\n                        .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                    valueProperty: 'costTypeCode',\r\n                    codeProperty: 'costTypeCode',\r\n                    isRequired: true,\r\n                    displayProperty: 'name',\r\n\r\n                },\r\n                onCellValueChanged: this.onCostTypeChange.bind(this),\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'percentageInvoiced',\r\n                colId: 'percentageInvoiced',\r\n                valueGetter: this.getpercentageInvoiced.bind(this),\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n                onCellValueChanged: this.onCostDirectionChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n                editable: true,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.masterData.vats.map((vat) => vat.vatCode),\r\n                    displayPropertyName: 'vatCode',\r\n                    valuePropertyName: 'vatCode',\r\n                    displayFormat: 'vatCode',\r\n                    context: this.masterData,\r\n                },\r\n                onCellValueChanged: this.onVatCodeChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                valueSetter: this.setCostAmountToInvoice,\r\n                onCellValueChanged: this.onCostAmountToInvoiceChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                valueSetter: this.setCostNarrative.bind(this),\r\n                cellStyle: this.narrativeMaxLength.bind(this),\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.invoiceCostGridContextualMenuActions,\r\n                },\r\n                hide: this.isAdditionalCostForSummary === true,\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n        this.rowSelection = 'multiple';\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        if (!params.data.contractReference) {\r\n            return params.context.gridEditable;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    setCostAmountToInvoice(params): boolean {\r\n        params.data.costAmountToInvoice = (params.newValue <= 0) ? 0 : params.newValue;\r\n        return true;\r\n    }\r\n\r\n    setCostNarrative(params): boolean {\r\n        if (params.newValue.length <= 0) {\r\n            params.data.narrative = this.costNarrativePrefix;\r\n        } else {\r\n            const narrativeText = params.newValue as string;\r\n            params.data.narrative = (narrativeText).startsWith('ADD') ? params.newValue :\r\n                this.costNarrativePrefix.concat(params.newValue);\r\n        }\r\n        return true;\r\n    }\r\n    onCostTypeChange(params) {\r\n        const filteredCostType = params.colDef.cellRendererParams.context.costTypes.find(\r\n            (e) => e.costTypeCode === params.data.costTypeCode);\r\n        if (filteredCostType) {\r\n            this.inPNL = filteredCostType.inPNL;\r\n            this.noAction = filteredCostType.noAction;\r\n        }\r\n\r\n    }\r\n\r\n    narrativeMaxLength(params) {\r\n        if (params.data && params.value) {\r\n            if (params.value.length > 30) {\r\n                this.narrativeLength.emit(true);\r\n                this.snackbar.informationSnackBar(\r\n                    'Narrative length should be less than 30',\r\n                );\r\n                return { color: 'red' };\r\n            } else {\r\n                this.narrativeLength.emit(false);\r\n                return { color: 'black' };\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        if (this.isAddRow) {\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (!(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.vatCode\r\n                    && rowData.data.costAmountToInvoice)) {\r\n                    isValid = false;\r\n                }\r\n            });\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    contractToBeSelected(costContracts: ContractsToCostInvoice[]) {\r\n        if (costContracts.length > 0) {\r\n            this.initializeGridColumns();\r\n            if (this.defaultVatCode) {\r\n                costContracts.map((costContract) => costContract.vatCode = this.defaultVatCode);\r\n            }\r\n            this.selectedCostGridRows = costContracts;\r\n            this.selectedCostGridOptions.pagination = (costContracts.length > 10) ? true : false;\r\n            if (this.masterData.vats.length > 0) {\r\n                this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n            }\r\n            this.calculateTotalAmountAndGetVatCode(costContracts);\r\n        }\r\n    }\r\n\r\n    setDefaultCurrency(currency: string) {\r\n        if (currency) {\r\n            this.currencyCodeSelected = currency;\r\n        }\r\n    }\r\n\r\n    getpercentageInvoiced(params) {\r\n        params.data.percentageInvoiced = this.invoicedPercentage;\r\n        return params.data.percentageInvoiced;\r\n    }\r\n\r\n    onCostDirectionChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n    onCostAmountToInvoiceChange(params) {\r\n        if (params.data.costDirection) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onAddRowButtonClicked(numberOfLines: number) {\r\n        this.isAddRow = true;\r\n        this.gridContext.gridEditable = true;\r\n        this.gridApi.onFilterChanged();\r\n        for (let count = 1; count <= numberOfLines; count++) {\r\n            const newItem = this.createNewCostRowData();\r\n            this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n        }\r\n    }\r\n\r\n    onDeleteSelectedButtonClicked(costLine: ContractsToCostInvoice) {\r\n        if (!costLine.contractReference) {\r\n            this.total = 0;\r\n            this.gridApi.updateRowData({ remove: [costLine] });\r\n            this.calculationOfCRAndDR();\r\n            this.calculateTotalOnUpdateGrid();\r\n\r\n        } else { this.snackbar.informationSnackBar('You cannot delete a cost which is not added in Invoice Working Page'); }\r\n\r\n    }\r\n\r\n    calculationOfCRAndDR() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n            }\r\n        });\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    updateTotals(totalCR, totalDR) {\r\n        if (totalCR > totalDR) {\r\n            this.total = totalCR - totalDR;\r\n            this.costDirectionDisplay = this.credit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n            this.totalCostDirection = CostDirections[CostDirections.Payable];\r\n        } else {\r\n            this.total = totalDR - totalCR;\r\n            this.costDirectionDisplay = this.debit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Receivable];\r\n            this.totalCostDirection = CostDirections[CostDirections.Receivable];\r\n        }\r\n    }\r\n\r\n    totalCostAndVatDetails() {\r\n        this.totalCostAndVatCode.emit({\r\n            rate: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            costDirection: this.totalCostDirection,\r\n            currencyCode: this.currencyCodeSelected,\r\n            vatAvailable: this.vatCodeAvailable,\r\n        });\r\n        this.vatCodeAvailable.forEach(\r\n            (tax) => {\r\n                this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n            },\r\n        );\r\n    }\r\n\r\n    createNewCostRowData() {\r\n        const newData = new ContractsToCostInvoice();\r\n        newData.invoicePercent = this.invoicedPercentage;\r\n        newData.currencyCode = this.currencyCodeSelected;\r\n        newData.narrative = this.costNarrativePrefix;\r\n        newData.vatCode = this.defaultVatCode;\r\n        return newData;\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.defaultVatCode = defaultVatCode;\r\n    }\r\n\r\n    setTaxDataForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.selectedCostGridRows = this.getCostContractsForSummary(costInvoiceRecord);\r\n        this.initializeGridColumns();\r\n        this.calculateTotalForSummary(costInvoiceRecord);\r\n    }\r\n\r\n    getCostContractsForSummary(costInvoiceRecord: CostInvoiceRecord): ContractsToCostInvoice[] {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        if (costInvoiceRecord) {\r\n            const contract = new ContractsToCostInvoice();\r\n            contract.vatCode = costInvoiceRecord.vatCode;\r\n            contract.principalCommodity = costInvoiceRecord.principalCommodity;\r\n            contract.rate = costInvoiceRecord.price;\r\n            contract.quantity = costInvoiceRecord.quantity;\r\n            contract.costAmountToInvoice = costInvoiceRecord.lineAmount;\r\n            contract.invoicePercent = costInvoiceRecord.totalInvoiceValue;\r\n            contracts.push(contract);\r\n        }\r\n        return contracts;\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n            return selectedCostDirection.costDirectionId;\r\n        }\r\n    }\r\n\r\n    calculateTotalAmountAndGetVatCode(contracts: ContractsToCostInvoice[]) {\r\n        this.total = 0;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        let costDirectionId: number;\r\n        this.vatCodeAvailable = [];\r\n        contracts.forEach(\r\n            (contract) => {\r\n                let vatCode: Vat[];\r\n                // creating copy of selected vatCode, so the calculations are not impacting the original data\r\n                vatCode = this.masterData.vats\r\n                    .filter((vat) => (vat.vatCode === contract.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n                        return code.rate = code.rate / 100 * contract.costAmountToInvoice;\r\n                    });\r\n                    if (this.vatCodeAvailable.length === 0) {\r\n                        this.vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        this.vatCodeAvailable.map((code) =>\r\n                            (code.vatCode === vatCode[0].vatCode) ? (code.rate = code.rate + vatCode[0].rate) :\r\n                                this.vatCodeAvailable.push(vatCode[0]));\r\n                    }\r\n                }\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.costAmountToInvoice;\r\n                } else {\r\n                    totalDR = totalDR + contract.costAmountToInvoice;\r\n                }\r\n            },\r\n        );\r\n        if (contracts.length > 0) {\r\n            this.currencyCode = contracts[0].currencyCode;\r\n        }\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    calculateTotalOnUpdateGrid() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        const vatMasterData = this.masterData.vats;\r\n        let vatCodeAvailable = [];\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                let vatCode: Vat[] = [];\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n                vatCode = vatMasterData\r\n                    .filter((vat) => (vat.vatCode === rowNode.data.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n\r\n                        return code.rate = code.rate / 100 * rowNode.data.costAmountToInvoice;\r\n                    });\r\n                    if (vatCodeAvailable.length === 0) {\r\n                        if (rowNode.data.costDirection === costDirectionPay) {\r\n                            vatCode[0].rate = -(vatCode[0].rate);\r\n                        }\r\n                        vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        let isAvailable: boolean = false;\r\n                        vatCodeAvailable.map((code) => {\r\n                            if (code.vatCode === vatCode[0].vatCode) {\r\n                                if (vatCodeAvailable.filter((selectedVatCode) => selectedVatCode.vatCode === vatCode[0].vatCode)) {\r\n                                    if (rowNode.data.costDirection === costDirectionPay) {\r\n                                        vatCode[0].rate = -(vatCode[0].rate);\r\n                                    }\r\n                                    code.rate = code.rate + vatCode[0].rate;\r\n                                    isAvailable = true;\r\n                                }\r\n                            }\r\n                        });\r\n                        if (!isAvailable) {\r\n                            vatCodeAvailable = vatCodeAvailable.filter((code) => code.vatCode !== vatCode[0].vatCode);\r\n                            if (rowNode.data.costDirection === costDirectionPay) {\r\n                                vatCode[0].rate = -(vatCode[0].rate);\r\n                            }\r\n                            vatCodeAvailable.push(vatCode[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.updateTotals(totalCR, totalDR);\r\n        if (this.useGoodsTaxCodeCtrl.value) {\r\n            this.setVatCodeAvailable();\r\n        } else {\r\n            this.vatCodeAvailable = vatCodeAvailable.map((x) => ({ ...x }));\r\n            this.totalCostAndVatDetails();\r\n        }\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n\r\n    onVatCodeChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (params.data && params.context.gridEditable) {\r\n            if (!params.value || params.value === '') {\r\n                return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onCostVatCodeSelected() {\r\n        if (!this.useGoodsTaxCodeCtrl.value) {\r\n            const vat = this.costVatCodeCtrl.value;\r\n            this.selectedCostVat = vat;\r\n            const changedVatCode = [];\r\n            this.gridApi.forEachNode((rowNode) => {\r\n                if (rowNode.data) {\r\n                    const data = rowNode.data;\r\n                    data.vatCode = vat;\r\n                    changedVatCode.push(data);\r\n                }\r\n            });\r\n            this.gridApi.updateRowData({ update: changedVatCode });\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const selectedInvoiceCosts = entity;\r\n        selectedInvoiceCosts.currency = this.currencyCodeSelected;\r\n        selectedInvoiceCosts.totalInvoiceValue = this.total;\r\n        if (selectedInvoiceCosts.invoiceLines && selectedInvoiceCosts.invoiceLines.length > 0) {\r\n            const invoiceLines: InvoiceLineRecord[] = this.getInvoiceCostLines(selectedInvoiceCosts.invoiceLines.length);\r\n            invoiceLines.forEach((line) => {\r\n                selectedInvoiceCosts.invoiceLines.push(line);\r\n            });\r\n        } else {\r\n            selectedInvoiceCosts.invoiceLines = this.getInvoiceCostLines();\r\n        }\r\n        return selectedInvoiceCosts;\r\n    }\r\n\r\n    getAllInvoiceCostLines(): ContractsToCostInvoice[] {\r\n        const selectedCostRows: ContractsToCostInvoice[] = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costInvoiceline = new ContractsToCostInvoice();\r\n                costInvoiceline.costId = rowData.data.costId;\r\n                costInvoiceline.sectionId = rowData.data.sectionId;\r\n                costInvoiceline.costAmountToInvoice = rowData.data.costAmountToInvoice;\r\n                costInvoiceline.quantity = rowData.data.quantity;\r\n                costInvoiceline.costTypeCode = rowData.data.costTypeCode;\r\n                costInvoiceline.currencyCode = rowData.data.currencyCode;\r\n                costInvoiceline.vatCode = rowData.data.vatCode;\r\n                costInvoiceline.narrative = rowData.data.narrative;\r\n                costInvoiceline.invoicePercent = this.invoicedPercentage;\r\n                costInvoiceline.rateTypeCode = rowData.data.rateTypeCode;\r\n                costInvoiceline.costDirection = rowData.data.costDirection;\r\n                selectedCostRows.push(costInvoiceline);\r\n            }\r\n        });\r\n\r\n        return selectedCostRows;\r\n    }\r\n\r\n    getInvoiceCostLines(index: number = 0): InvoiceLineRecord[] {\r\n        const invoiceLines: InvoiceLineRecord[] = [];\r\n        this.selectedCostGridRows = this.getAllInvoiceCostLines();\r\n        this.selectedCostGridRows.map((data) => {\r\n            const invoiceLine = new InvoiceLineRecord();\r\n            invoiceLine.costID = data.costId;\r\n            invoiceLine.sectionID = data.sectionId;\r\n            invoiceLine.lineAmount = data.costAmountToInvoice;\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === data.costDirection);\r\n            invoiceLine.costDirectionId = selectedCostDirection ? selectedCostDirection.costDirectionId : null;\r\n            invoiceLine.costTypeCode = data.costTypeCode;\r\n            invoiceLine.currencyCode = data.currencyCode;\r\n            invoiceLine.rateTypeId = 1; // RateType to be defaulted as Amount as per the FS.\r\n            invoiceLine.vatCode = data.vatCode;\r\n            invoiceLine.vatAmount = data.vatAmount;\r\n            invoiceLine.invoicePercent = this.invoicedPercentage;\r\n            invoiceLine.narrative = data.narrative;\r\n            invoiceLine.inPL = this.inPNL;\r\n            invoiceLine.noAct = this.noAction;\r\n            invoiceLines.push(invoiceLine);\r\n            index++;\r\n        });\r\n        return invoiceLines;\r\n    }\r\n\r\n    /* Code for home grid to summary redirection */\r\n\r\n    contractToBeSelectedFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord) {\r\n            this.selectedCostGridRows = this.getCostContractsForSummaryFromGrid(summaryRecord.summaryLines);\r\n            this.initializeGridColumnsFromSummary();\r\n            if (this.selectedCostGridRows.length > 0) {\r\n                this.calculateTotalAmountAndGetVatCode(this.selectedCostGridRows);\r\n            } else {\r\n                this.currencyCodeSelected = summaryRecord.currency;\r\n                summaryRecord.summaryLines.forEach((record) => {\r\n                    if (record.vatCode) {\r\n                        this.vatCodeAvailable = this.masterData.vats.filter((option) => option.vatCode === record.vatCode);\r\n                    }\r\n                });\r\n                this.totalCostAndVatCode.emit({\r\n                    rate: this.total,\r\n                    decimalOption: this.decimalOptionValue,\r\n                    costDirection: this.totalCostDirection,\r\n                    currencyCode: this.currencyCodeSelected,\r\n                    vatAvailable: this.vatCodeAvailable,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    initializeGridColumnsFromSummary() {\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: '% Invoiced',\r\n                field: 'percentageInvoiced',\r\n                colId: 'percentageInvoiced',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getCostContractsForSummaryFromGrid(summaryLines: InvoiceSummaryLineRecord[]) {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.costId > 0) {\r\n                const contract = new ContractsToCostInvoice();\r\n                contract.costTypeCode = record.costTypeCode;\r\n                contract.principalCommodity = record.principalCommodity;\r\n                contract.rate = record.price;\r\n                contract.quantity = record.quantity.toString();\r\n                contract.weightCode = record.weightCode;\r\n                contract.costAmountToInvoice = record.lineAmount;\r\n                contract.costDirection = record.costDirection;\r\n                contract.vatCode = record.vatCode;\r\n                contract.invoicePercent = record.invoicePercent;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n\r\n    setAllInvoiceCostLines() {\r\n        this.selectedCostGridRows = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costInvoiceline = new ContractsToCostInvoice();\r\n                costInvoiceline.costId = rowData.data.costId;\r\n                costInvoiceline.sectionId = rowData.data.sectionId;\r\n                costInvoiceline.costAmountToInvoice = rowData.data.costAmountToInvoice;\r\n                costInvoiceline.quantity = rowData.data.quantity;\r\n                costInvoiceline.costTypeCode = rowData.data.costTypeCode;\r\n                costInvoiceline.currencyCode = rowData.data.currencyCode;\r\n                costInvoiceline.vatCode = rowData.data.vatCode;\r\n                costInvoiceline.invoicePercent = this.invoicedPercentage;\r\n                costInvoiceline.narrative = rowData.data.narrative;\r\n                costInvoiceline.costDirection = rowData.data.costDirection;\r\n                this.selectedCostGridRows.push(costInvoiceline);\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\"\\r\\n          fxFlex=\\\"100\\\">\\r\\n    <mat-card-title>\\r\\n        <h2> Payments</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                                class=\\\"mat-read-only-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Payment Terms\\\"\\r\\n                           [formControl]=\\\"invoicePayTermsCntrl\\\"\\r\\n                           [matTooltip]=\\\"'Payment Terms'\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           readonly>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                                class=\\\"mandatory\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Due Date\\\"\\r\\n                           [formControl]=\\\"invoiceDueDateCntrl\\\"\\r\\n                           [matDatepicker]=\\\"invoiceDueDatePicker\\\"\\r\\n                           [matTooltip]=\\\"'Due Date'\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           (dateChange)='onInvoiceDueDateSelected()'>\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"invoiceDueDatePicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #invoiceDueDatePicker></mat-datepicker>\\r\\n                    <mat-hint *ngIf=\\\"!invoiceDueDateCntrl.hasError('isDateBeforeValid' || 'required') && !invoiceDueDateCntrl.disabled\\\"\\r\\n                              class=\\\"invoice-creation-required-fields\\\">Required*</mat-hint>\\r\\n                    <mat-error *ngIf=\\\"invoiceDueDateCntrl.hasError('required')\\\">\\r\\n                        Required*\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"invoiceDueDateCntrl.hasError('isDateBeforeValid')\\\">\\r\\n                        Can't be before invoice date\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { PaymentTerm } from '../../../../../../../shared/entities/payment-term.entity';\r\nimport { CreditAgainstTypes } from '../../../../../../../shared/enums/credit-against-type.enum';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-payments-component',\r\n    templateUrl: './payments-component.component.html',\r\n    styleUrls: ['./payments-component.component.scss'],\r\n})\r\nexport class CommercialPaymentsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceDueDateCntrl = new AtlasFormControl('invoiceCreationPaymentDueDate');\r\n    invoicePayTermsCntrl = new AtlasFormControl('invoiceCreationPaymentTerms');\r\n\r\n    invoiceDateSelected: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    invoiceDateChanged: Date;\r\n    contracts: ContractsToInvoice[];\r\n    paymentTermsDescription: string;\r\n    masterDataPaymentTerms: PaymentTerm[];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected route: ActivatedRoute,\r\n\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterDataPaymentTerms = this.route.snapshot.data.masterdata.paymentTerms;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceDueDateCntrl: this.invoiceDueDateCntrl,\r\n            invoicePayTermsCntrl: this.invoicePayTermsCntrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    contractToBeSelected(contracts: ContractsToInvoice[]) {\r\n        this.contracts = contracts;\r\n        if (this.masterDataPaymentTerms && this.contracts) {\r\n            this.setPaymentTerm();\r\n        }\r\n    }\r\n\r\n    setinvoiceDateSelected(invoiceDate: Date) {\r\n        this.invoiceDateChanged = invoiceDate;\r\n        this.invoiceDateSelected = moment(invoiceDate).toDate();\r\n        if (this.contracts) {\r\n            this.setPaymentTerm();\r\n        }\r\n    }\r\n\r\n    setPaymentTerm() {\r\n        let paymentDateToSet: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n        let paymentTermToSet: string;\r\n        let dateDiff: number | undefined;\r\n        let canUpdatePayTermValue: boolean = true;\r\n        if (!this.invoiceDateSelected) {\r\n            this.invoiceDateSelected = paymentDateToSet;\r\n        }\r\n        this.contracts.forEach((contract, index) => {\r\n            let calculateDate: any;\r\n            const selectedPaymentTerms = this.masterDataPaymentTerms.filter(\r\n                (payTerms) => payTerms.paymentTermCode === contract.paymentTermCode,\r\n            );\r\n            const selectedPaymentTerm = selectedPaymentTerms.length ? selectedPaymentTerms[0] : undefined;\r\n            if (selectedPaymentTerm) {\r\n                if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.ArrivalDate) {\r\n                    calculateDate = moment(contract.arrivalDate);\r\n                } else if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.BLDate) {\r\n                    calculateDate = moment(contract.bLDate);\r\n                } else if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.CurrentDate) {\r\n                    calculateDate = this.companyManager.getCurrentCompanyDate();\r\n                } else if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.InvoiceDate) {\r\n                    calculateDate = moment(this.invoiceDateSelected);\r\n                }\r\n                calculateDate = moment(calculateDate).add('days', selectedPaymentTerm.creditDays);\r\n                if (dateDiff) {\r\n                    canUpdatePayTermValue = dateDiff > moment(calculateDate).diff(this.invoiceDateSelected) ? true : false;\r\n                }\r\n                if (canUpdatePayTermValue) {\r\n                    paymentDateToSet = calculateDate.toDate();\r\n                    paymentTermToSet = contract.paymentTermCode;\r\n                    dateDiff = moment(calculateDate).diff(this.invoiceDateSelected);\r\n                    this.paymentTermsDescription = selectedPaymentTerm.description;\r\n                }\r\n            }\r\n        });\r\n        if (paymentDateToSet) {\r\n            this.invoiceDueDateCntrl.patchValue(paymentDateToSet);\r\n            this.invoicePayTermsCntrl.patchValue(paymentTermToSet);\r\n        }\r\n    }\r\n    onInvoiceDueDateSelected() {\r\n        this.invoiceDueDateCntrl.clearValidators();\r\n        this.invoiceDueDateCntrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.invoiceDueDateCntrl.value,\r\n                moment(this.invoiceDateChanged)), Validators.required]));\r\n        this.invoiceDueDateCntrl.updateValueAndValidity();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const payments = entity as InvoiceRecord;\r\n        payments.paymentTerms = this.invoicePayTermsCntrl.value;\r\n        payments.dueDate = this.invoiceDueDateCntrl.value;\r\n        return payments;\r\n    }\r\n\r\n    setValuesForSummaryFromGrid(summaryRecord) {\r\n        this.invoicePayTermsCntrl.patchValue(summaryRecord.paymentTermsCode);\r\n        this.invoiceDueDateCntrl.patchValue(summaryRecord.dueDate);\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\"\\r\\n          fxFlex=\\\"100\\\">\\r\\n    <mat-card-title>\\r\\n        Invoice Selection\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"49%\\\"\\r\\n                            class=\\\"margin-bottom\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"invoiceDatePicker\\\"\\r\\n                       placeholder=\\\"Invoice date\\\"\\r\\n                       [matTooltip]=\\\"'Invoice date'\\\"\\r\\n                       [formControl]='invoiceDateCtrl'\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onInvoiceDateSelected()'>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"isDateAfterValid\\\"> Invoice Date is in Future</mat-hint>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"invoiceDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #invoiceDatePicker></mat-datepicker>\\r\\n                <mat-error *ngIf=\\\"invoiceDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                    Invoice Date can be equal to or after the contract date\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"49%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Counterparty\\\"\\r\\n                       [matTooltip]=\\\"'Counterparty'\\\"\\r\\n                       [formControl]=\\\"counterpartyCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"32%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Invoice type\\\"\\r\\n                       [matTooltip]=\\\"'Invoice Type'\\\"\\r\\n                       [formControl]=\\\"invoiceTypeCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"32%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Costs/Commission\\\"\\r\\n                       [matTooltip]=\\\"'Costs/Commission'\\\"\\r\\n                       [formControl]=\\\"costCommissionCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"25%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Quantity to Invoice\\\"\\r\\n                       [matTooltip]=\\\"'Quantity to Invoice'\\\"\\r\\n                       value=\\\"Contract\\\"\\r\\n                       [formControl]=\\\"quantityInvoiceCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <mat-divider></mat-divider>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-slide-toggle [checked]=\\\"true\\\"\\r\\n                              [formControl]=\\\"authorizePostingCtrl\\\">Authorize for posting</mat-slide-toggle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"mat-slide-toggle {\\n  margin-top: 2%; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nconst moment = _moment;\r\n@Component({\r\n    selector: 'atlas-selection-form-component',\r\n    templateUrl: './selection-form-component.component.html',\r\n    styleUrls: ['./selection-form-component.component.scss'],\r\n})\r\nexport class SelectionFormComponentComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly invoiceDateSelected = new EventEmitter<Date>();\r\n\r\n    invoiceDateCtrl = new AtlasFormControl('InvoiceSelectionDate');\r\n    invoiceTypeCtrl = new AtlasFormControl('InvoiceSelected');\r\n    counterpartyCtrl = new AtlasFormControl('Counterparty');\r\n    costCommissionCtrl = new AtlasFormControl('CostCommission');\r\n    quantityInvoiceCtrl = new AtlasFormControl('QuantityInvoice');\r\n    authorizePostingCtrl = new AtlasFormControl('AuthorizePosting');\r\n\r\n    invoiceTypeId: number;\r\n    invoiceTypeDescription: string;\r\n    masterdata: MasterData = new MasterData();\r\n    invoiceDate: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    dates: Date[];\r\n    maxDate: Moment;\r\n    isDateAfterValid: boolean;\r\n    company: string;\r\n    isAuthorizeForPosting: boolean;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceDateCtrl.setValue(this.companyManager.getCurrentCompanyDate().toDate());\r\n        this.invoiceDateSelected.emit(this.invoiceDateCtrl.value);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        this.invoiceTypeDescription = this.masterdata.\r\n            invoiceTypes.find((x) => x.invoiceTypeId === this.invoiceTypeId).description;\r\n        this.invoiceTypeCtrl.patchValue(this.invoiceTypeDescription);\r\n        this.authorizePostingCtrl.setValue(this.isAuthorizeForPosting);\r\n    }\r\n    setDefaultAuthorizeForPosting(defaultAuthorizeForPosting: boolean) {\r\n        this.isAuthorizeForPosting = defaultAuthorizeForPosting;\r\n        this.authorizePostingCtrl.setValue(this.isAuthorizeForPosting);\r\n    }\r\n    contractToBeSelected(contracts: ContractsToInvoice[]) {\r\n        if (contracts.length > 0) {\r\n            this.counterpartyCtrl.patchValue(contracts[0].counterparty);\r\n        }\r\n        this.setInvoiceDate(contracts);\r\n    }\r\n    setInvoiceDate(contracts: ContractsToInvoice[]) {\r\n        this.dates = Array.from(contracts, (x) => x.contractDate);\r\n        const moments = this.dates.map((d) => moment(d)),\r\n            maxDate = moment.max(moments);\r\n        this.maxDate = maxDate;\r\n    }\r\n    onInvoiceDateSelected() {\r\n        this.invoiceDate = new Date(this.invoiceDateCtrl.value);\r\n        this.invoiceDateCtrl.clearValidators();\r\n        this.isDateAfterValid = false;\r\n        this.invoiceFutureValidation(this.invoiceDate);\r\n        this.invoiceDateCtrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.invoiceDate, this.maxDate)]));\r\n        this.invoiceDateCtrl.updateValueAndValidity();\r\n        this.invoiceDateSelected.emit(this.invoiceDate);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceDateCtrl: this.invoiceDateCtrl,\r\n            authorizePostingCtrl: this.authorizePostingCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    invoiceFutureValidation(invoiceDate) {\r\n        const invoiceMoment: Moment = moment(invoiceDate);\r\n        if (invoiceMoment.isAfter(this.companyManager.getCurrentCompanyDate())) {\r\n            this.isDateAfterValid = true;\r\n        }\r\n    }\r\n    populateEntity(entity: any): any {\r\n        const invoiceSelection = entity as InvoiceRecord;\r\n        invoiceSelection.invoiceDate = this.invoiceDateCtrl.value;\r\n        invoiceSelection.counterpartyCode = this.counterpartyCtrl.value;\r\n        invoiceSelection.authorizedForPosting = this.authorizePostingCtrl.value;\r\n        return invoiceSelection;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-title>\\r\\n        Taxes\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <div fxFlex=\\\"25\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Goods VAT Code\\\"\\r\\n                                [formControl]=\\\"invoiceGoodsVatCodeCntrl\\\"\\r\\n                                [matTooltip]=\\\"'VAT Code'\\\"\\r\\n                                [panelWidth]=\\\"panelSize\\\"\\r\\n                                (optionSelected)=\\\"vatCodeSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let vatCode of filteredVatCodes\\\"\\r\\n                                    [value]=\\\"vatCode.vatCode\\\">\\r\\n                            {{vatCode.vatCode}} | {{vatCode.vatDescription}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"invoiceVatRateCntrl\\\"\\r\\n                                  [isEditable]=\\\"isInputField\\\"\\r\\n                                  [label]=\\\"'VAT Rate'\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"invoiceVatAmountCntrl\\\"\\r\\n                                  [isEditable]=\\\"isInputField\\\"\\r\\n                                  [label]=\\\"'Vat Amount'\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"fill\\\"\\r\\n                 class=\\\"total-box\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Total Taxes:\\r\\n                    <span class=\\\"total-figure-value\\\">0 {{currencyCode}}</span></mat-card-subtitle>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-taxes-component',\r\n    templateUrl: './taxes-component.component.html',\r\n    styleUrls: ['./taxes-component.component.scss'],\r\n})\r\nexport class TaxesComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly selectedGoodsTaxCode = new EventEmitter<any>();\r\n\r\n    invoiceGoodsVatCodeCntrl = new AtlasFormControl('invoiceCreationGoodsVatCode');\r\n    invoiceVatRateCntrl = new AtlasFormControl('invoiceCreationVatRate');\r\n    invoiceVatAmountCntrl = new AtlasFormControl('invoiceCreationVatAmount');\r\n\r\n    filteredVatCodes: Vat[];\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Vats,\r\n    ];\r\n    isInputField = false;\r\n    defaultVatCode: string;\r\n    currencyCode: string;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService.getMasterData(this.masterdataList).subscribe((data) => {\r\n            this.masterdata = data;\r\n            this.filteredVatCodes = this.masterdata.vats;\r\n            this.invoiceGoodsVatCodeCntrl.valueChanges.subscribe((input) => {\r\n                this.filteredVatCodes =\r\n                    this.utilService.filterListforAutocomplete(input,\r\n                        this.masterdata.vats,\r\n                        ['vatCode', 'vatDescription']);\r\n            });\r\n            this.bindConfiguration();\r\n        });\r\n        this.onChanges();\r\n    }\r\n\r\n    onChanges(): void {\r\n        this.invoiceGoodsVatCodeCntrl.valueChanges.subscribe((val) => {\r\n            this.selectedGoodsTaxCode.emit(this.invoiceGoodsVatCodeCntrl.value);\r\n        });\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.defaultVatCode = defaultVatCode;\r\n        if (this.defaultVatCode) {\r\n            const vatCode = this.masterdata.vats.filter((option) => option.vatCode === this.defaultVatCode);\r\n            if (vatCode.length > 0) {\r\n                this.invoiceGoodsVatCodeCntrl.patchValue(vatCode[0].vatCode);\r\n                this.invoiceVatRateCntrl.patchValue(vatCode[0].rate);\r\n                this.invoiceVatAmountCntrl.patchValue(vatCode[0].rate);\r\n            }\r\n        }\r\n    }\r\n\r\n    setDataForTaxGoods(summaryRecord: InvoiceSummaryRecord, defaultVATCode) {\r\n        summaryRecord.summaryLines.map((record) => {\r\n            (record.sectionId) ? this.defaultVatCode = record.vatCode : null;\r\n        });\r\n        (!this.defaultVatCode) ? this.defaultVatCode = defaultVATCode : null;\r\n        (summaryRecord.currency) ? this.currencyCode = summaryRecord.currency : null;\r\n        this.setDefaultVatCode(this.defaultVatCode);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceGoodsVatCodeCntrl: this.invoiceGoodsVatCodeCntrl,\r\n            invoiceVatRateCntrl: this.invoiceVatRateCntrl,\r\n            invoiceVatAmountCntrl: this.invoiceVatAmountCntrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    vatCodeSelected(vatCode: string) {\r\n        const selectedVatCode = this.masterdata.vats.find((x) => x.vatCode === vatCode);\r\n        this.invoiceVatRateCntrl.patchValue(\r\n            selectedVatCode.rate,\r\n        );\r\n        this.invoiceVatAmountCntrl.patchValue(\r\n            selectedVatCode.vatDescription,\r\n        );\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\" table-title\\\">\\r\\n        <h2 class=\\\"no-margin\\\">Value Of Goods</h2>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <atlas-ag-grid-user-preferences *ngIf=\\\"valueOfGoodsGridOptions && valueOfGoodsGridOptions.columnDefs\\\"\\r\\n                                        [gridOptions]=\\\"valueOfGoodsGridOptions\\\"\\r\\n                                        [company]=\\\"company\\\"\\r\\n                                        [gridId]=\\\"componentId\\\"\\r\\n                                        [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                        #userPreferences>\\r\\n        </atlas-ag-grid-user-preferences>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n\\r\\n        <div ag-grid=\\\"valueOfGoodsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"valueOfGoodsGridRows\\\"\\r\\n                             [columnDefs]=\\\"valueOfGoodsGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"false\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [groupUseEntireRow]=\\\"false\\\"\\r\\n                             [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\"\\r\\n                             [suppressDragLeaveHidesColumns]=\\\"true\\\"\\r\\n                             [suppressMakeColumnVisibleAfterUnGroup]=\\\"true\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             enableFilter\\r\\n                             [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <div class=\\\"total-box\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Total Invoiced Quantity :\\r\\n                    <span class=\\\"total-figure-value\\\">{{formatQuantityAndTotal(totalQuantity)}}\\r\\n                        {{weightCode}}</span>\\r\\n                </mat-card-subtitle>\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Sub Total :\\r\\n                    <span class=\\\"total-figure-value\\\">{{debitCreditSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                        {{currencyCode}}</span>\\r\\n                </mat-card-subtitle>\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Total :\\r\\n                    <span class=\\\"total-figure-value\\\">{{debitCreditSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                        {{currencyCode}}</span>\\r\\n                </mat-card-subtitle>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".total-box {\\n  margin-top: 28px; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { map } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InvoiceLineRecord } from '../../../../../../../shared/entities/invoice-line-record.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { CostDirectionType } from '../../../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { DiscountBasis } from '../../../../../../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from '../../../../../../../shared/enums/discount-type.enum';\r\nimport { InvoiceTypes } from '../../../../../../../shared/enums/invoice-type.enum';\r\nimport { PricingOptions } from '../../../../../../../shared/enums/pricing-options.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-value-of-goods-component',\r\n    templateUrl: './value-of-goods-component.component.html',\r\n    styleUrls: ['./value-of-goods-component.component.scss'],\r\n})\r\nexport class CommercialValueOfGoodsComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n\r\n    @Output() readonly totalAmountCalculated = new EventEmitter<any>();\r\n    @Output() readonly costCurrency = new EventEmitter<any>();\r\n    @Input() defaultWeightCode: string;\r\n\r\n    company: string;\r\n    valueOfGoodsGridOptions: agGrid.GridOptions = {};\r\n    valueOfGoodsGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    valueOfGoodsGridRows: ContractsToInvoice[];\r\n    isGroupingEnabled: boolean = false;\r\n    totalQuantity: number = 0;\r\n    total: number = 0;\r\n    weightCode: string = '';\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    weightedAverage: number = 0;\r\n    contractsForWeightedAverage: ContractsToInvoice[];\r\n    invoiceType: number;\r\n    debitCredit: string = '';\r\n    componentId: string = 'valueOfGoodsGrid';\r\n    hasGridSharing: boolean = false;\r\n    formatType: string = 'en-US';\r\n    rowGroupPanelShow: string;\r\n    debitCreditSign: string;\r\n    defaultConversionFactor: number = 0;\r\n    masterdata: MasterData = new MasterData();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.componentId)\r\n            .subscribe((configuration) => {\r\n                this.initializeGridColumns();\r\n                // -- used later if this will become L&S maybe\r\n                // this.columnConfiguration = configuration.columns;\r\n                // this.configurationLoaded.emit();\r\n                // this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n        const defaultWeightCodeSetup = this.masterdata.weightUnits.find((weightUnit) =>\r\n            weightUnit.weightCode === this.defaultWeightCode);\r\n        if (defaultWeightCodeSetup) {\r\n            this.defaultConversionFactor = defaultWeightCodeSetup.conversionFactor;\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.valueOfGoodsGridColumns;\r\n        this.valueOfGoodsGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.autoSizeGridHeader();\r\n    }\r\n    autoSizeGridHeader() {\r\n        const allColumnIds = [];\r\n        if (this.valueOfGoodsGridColumns) {\r\n            this.valueOfGoodsGridColumns.forEach((columnDefs) => {\r\n                allColumnIds.push(columnDefs.field);\r\n            });\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.valueOfGoodsGridColumns = [\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'commodity',\r\n                colId: 'commodity',\r\n                hide: false,\r\n                rowGroup: this.isGroupingEnabled,\r\n                enableRowGroup: this.isGroupingEnabled,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'price',\r\n                colId: 'price',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.price : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                rowGroup: this.isGroupingEnabled,\r\n                enableRowGroup: this.isGroupingEnabled,\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n            },\r\n            {\r\n                headerName: 'Premium/Discount',\r\n                field: 'premiumDiscountValue',\r\n                colId: 'premiumDiscountValue',\r\n                valueFormatter: this.formatPremiumDiscount,\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Quantity To Invoice',\r\n                field: 'quantityToInvoice',\r\n                colId: 'quantityToInvoice',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.quantityToInvoice : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'quantityCode',\r\n                colId: 'quantityCode',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Currency Code',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Invoice Value',\r\n                field: 'totalInvoiceValue',\r\n                colId: 'totalInvoiceValue',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.totalInvoiceValue : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                valueGetter: this.getInvoiceValue.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Contract Quantity',\r\n                field: 'contractQuantity',\r\n                colId: 'contractQuantity',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.contractQuantity : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n            },\r\n        ];\r\n        this.rowGroupPanelShow = this.isGroupingEnabled ? 'always' : '';\r\n    }\r\n\r\n    formatPremiumDiscount(params) {\r\n        if (params.data.premiumDiscountType === DiscountTypes.Premium) {\r\n            return '+' + params.data.premiumDiscountValue;\r\n        } else if (params.data.premiumDiscountType === DiscountTypes.Discount) {\r\n            return '-' + params.data.premiumDiscountValue;\r\n        } else {\r\n            return params.data.premiumDiscountValue;\r\n        }\r\n    }\r\n\r\n    getInvoiceValue(params) {\r\n        if (params.data.quantityToInvoice && params.data.price &&\r\n            params.data.priceConversionFactor && params.data.weightConversionFactor) {\r\n            if (params.data.premiumDiscountType === DiscountTypes.Premium) {\r\n                params.data.totalInvoiceValue = this.SetInvoiceValueForPremium(params.data);\r\n            } else if (params.data.premiumDiscountType === DiscountTypes.Discount) {\r\n                params.data.totalInvoiceValue = this.setInvoiceValueForDiscount(params.data);\r\n            }\r\n        }\r\n        this.calculateTotalAndTotalQuantity();\r\n        return params.data.totalInvoiceValue;\r\n    }\r\n\r\n    private setInvoiceValueForDiscount(params: ContractsToInvoice): number {\r\n        if (params) {\r\n            if (params.premiumDiscountBasis === DiscountBasis.Rate) {\r\n                return params.quantityToInvoice *\r\n                    (params.price - params.premiumDiscountValue) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else if (params.premiumDiscountBasis === DiscountBasis.Percent) {\r\n                return params.quantityToInvoice *\r\n                    (params.price * (1 - (params.premiumDiscountValue / 100))) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else {\r\n                return params.quantityToInvoice * params.price *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            }\r\n        }\r\n    }\r\n\r\n    private SetInvoiceValueForPremium(params: ContractsToInvoice): number {\r\n        if (params) {\r\n            if (params.premiumDiscountBasis === DiscountBasis.Rate) {\r\n                return params.quantityToInvoice *\r\n                    (params.price + params.premiumDiscountValue) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else if (params.premiumDiscountBasis === DiscountBasis.Percent) {\r\n                return params.quantityToInvoice *\r\n                    (params.price * (1 + (params.premiumDiscountValue / 100))) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else {\r\n                return params.quantityToInvoice * params.price *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            }\r\n        }\r\n    }\r\n\r\n    decimalFormatter(input, decimaloption: number, format: string) {\r\n        const formattedInput = new Intl.NumberFormat(format,\r\n            { minimumFractionDigits: decimaloption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateWeightedAverage() {\r\n\r\n        // calculating the weighted average of each selected contract\r\n        this.contractsForWeightedAverage.forEach(\r\n            (contract) => {\r\n                this.weightedAverage += contract.price * contract.quantityToInvoice;\r\n            },\r\n        );\r\n        // Assigning the calculated weighted average to the price of each selected contract\r\n        this.contractsForWeightedAverage.forEach(\r\n            (contract) => {\r\n                contract.price = this.weightedAverage / this.totalQuantity;\r\n            },\r\n        );\r\n        this.initializeGridColumns();\r\n        this.valueOfGoodsGridRows = this.contractsForWeightedAverage;\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    contractToBeSelected(contracts: ContractsToInvoice[]) {\r\n        if (contracts.length > 0) {\r\n            this.calculateTotalQuantity(contracts);\r\n            this.isGroupingEnabled = (this.pricingOptionValue === PricingOptions.GroupbycommodityPrice);\r\n            if (this.pricingOptionValue === PricingOptions.OutrightAverage) {\r\n                // creating copy of selected contracts, so the calculations are not impacting the original price\r\n                this.contractsForWeightedAverage = contracts.map((x) => ({ ...x }));\r\n                this.calculateWeightedAverage();\r\n            } else {\r\n                this.valueOfGoodsGridRows = contracts;\r\n                this.initializeGridColumns();\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateTotalAndTotalQuantity() {\r\n        this.totalQuantity = 0;\r\n        this.total = 0;\r\n        this.valueOfGoodsGridOptions.api.forEachNode((rowNode) => {\r\n            if (rowNode.data.totalInvoiceValue) {\r\n                this.total += rowNode.data.totalInvoiceValue;\r\n                if (this.defaultConversionFactor && this.defaultConversionFactor != 0) {\r\n                    this.totalQuantity += (rowNode.data.quantityToInvoice *\r\n                        rowNode.data.weightConversionFactor) / this.defaultConversionFactor;\r\n                } else {\r\n                    this.totalQuantity += rowNode.data.quantityToInvoice;\r\n\r\n                }\r\n            }\r\n        },\r\n        );\r\n        if (this.valueOfGoodsGridRows.length > 0) {\r\n            this.weightCode = this.defaultWeightCode ? this.defaultWeightCode : this.valueOfGoodsGridRows[0].quantityCode;\r\n            this.currencyCode = this.valueOfGoodsGridRows[0].currencyCode;\r\n            this.costCurrency.emit(this.currencyCode);\r\n        }\r\n        this.debitCredit = (this.invoiceType === InvoiceTypes.Purchase) ? 'Cr' : 'Dr';\r\n        this.debitCreditSign = CostSigns[CostDirectionType[this.debitCredit]];\r\n        this.totalAmountCalculated.emit({\r\n            amount: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            currencyCode: this.currencyCode,\r\n            debitCredit: this.debitCredit,\r\n        });\r\n\r\n    }\r\n\r\n    calculateTotalQuantity(contracts: ContractsToInvoice[]) {\r\n        this.totalQuantity = 0;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                this.totalQuantity = this.totalQuantity + contract.quantityToInvoice;\r\n            },\r\n        );\r\n    }\r\n\r\n    pricingAndDecimalOptionSelected(pricingOption: number, decimalOption: number) {\r\n        this.pricingOptionValue = pricingOption;\r\n        this.decimalOptionValue = decimalOption;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const valueOfGoods = entity as InvoiceRecord;\r\n        valueOfGoods.currency = this.currencyCode;\r\n        valueOfGoods.totalGoodsValue = this.totalQuantity;\r\n        valueOfGoods.totalInvoiceValue = this.total;\r\n        valueOfGoods.invoiceLines = this.getInvoiceLines();\r\n        return valueOfGoods;\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    getInvoiceLines() {\r\n        const invoiceLines: InvoiceLineRecord[] = [];\r\n        this.valueOfGoodsGridRows.map((data, index) => {\r\n            const invoiceLine = new InvoiceLineRecord();\r\n            invoiceLine.lineNumber = index + 1;\r\n            invoiceLine.sectionID = data.sectionId;\r\n            invoiceLine.price = data.price;\r\n            invoiceLine.quantity = data.quantityToInvoice.toString();\r\n            invoiceLine.priceUnitId = data.priceUnitId;\r\n            invoiceLine.weightUnitId = data.quantityUnitId;\r\n            invoiceLine.currencyCode = data.currencyCode;\r\n            invoiceLine.lineAmount = data.totalInvoiceValue;\r\n            invoiceLine.invoicePercent = (data.quantityToInvoice / data.contractQuantity) * 100;\r\n            invoiceLines.push(invoiceLine);\r\n        });\r\n        return invoiceLines;\r\n    }\r\n\r\n    /* summary redirection code */\r\n    contractToBeSelectedFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord.summaryLines) {\r\n            this.isGroupingEnabled = false;\r\n            this.invoiceType = summaryRecord.invoiceType;\r\n            this.currencyCode = summaryRecord.currency;\r\n            this.valueOfGoodsGridRows = this.getContractsForSummary(summaryRecord.summaryLines, this.currencyCode);\r\n            this.initializeGridColumnsFromSummary();\r\n            this.calculateTotalForSummary(summaryRecord.summaryLines);\r\n        }\r\n    }\r\n\r\n    contractToBeSelectedForSummary(contracts: ContractsToInvoice[], summaryRecord: InvoiceSummaryRecord[]) {\r\n        this.valueOfGoodsGridRows = this.getContractsForSummary(summaryRecord, this.currencyCode);\r\n        this.initializeGridColumnsFromSummary();\r\n        this.calculateTotalForSummary(summaryRecord);\r\n    }\r\n\r\n    calculateTotalForSummary(summaryLines) {\r\n        this.total = 0;\r\n        this.totalQuantity = 0;\r\n        summaryLines.forEach((line) => {\r\n            this.total = line.lineAmount + this.total;\r\n            this.totalQuantity = this.totalQuantity + line.quantity;\r\n            this.weightCode = line.weightCode;\r\n        });\r\n\r\n        this.debitCredit = (this.invoiceType === InvoiceTypes.Purchase) ? 'Cr' : 'Dr';\r\n        this.debitCreditSign = CostSigns[CostDirectionType[this.debitCredit]];\r\n    }\r\n\r\n    initializeGridColumnsFromSummary() {\r\n        this.valueOfGoodsGridColumns = [\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'commodity',\r\n                colId: 'commodity',\r\n                hide: false,\r\n                rowGroup: this.isGroupingEnabled,\r\n                enableRowGroup: this.isGroupingEnabled,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'price',\r\n                colId: 'price',\r\n                hide: false,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Invoiced Quantity',\r\n                field: 'invoicedQuantity',\r\n                colId: 'invoicedQuantity',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'quantityCode',\r\n                colId: 'quantityCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency Code',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Invoice Value',\r\n                field: 'totalInvoiceValue',\r\n                colId: 'totalInvoiceValue',\r\n                hide: false,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Contract Quantity',\r\n                field: 'contractQuantity',\r\n                colId: 'contractQuantity',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    decimalFormatterForSummary(params) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(params.value);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    getContractsForSummary(summaryLines, currencyCode) {\r\n        const contracts: ContractsToInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.sectionId) {\r\n                const contract = new ContractsToInvoice();\r\n                contract.commodity = record.principalCommodity;\r\n                contract.price = record.price;\r\n                contract.contractReference = record.contractReference;\r\n                contract.invoicedQuantity = record.quantity;\r\n                contract.quantityCode = record.weightCode;\r\n                contract.currencyCode = currencyCode;\r\n                contract.totalInvoiceValue = record.lineAmount;\r\n                contract.contractQuantity = record.contractQuantity;\r\n                contract.quantityToInvoice = record.quantity;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n\r\n    getInvoiceValueForSummary(params) {\r\n        return params.data.invoicedQuantity;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\"\\r\\n          fxFlex=\\\"100\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Invoice Document</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            (optionSelected)=\\\"onExternalInHouseSelected()\\\"\\r\\n                            placeholder=\\\"External/InHouse\\\"\\r\\n                            [formControl]=\\\"invoiceExtInHouseCtrl\\\"\\r\\n                            [matTooltip]=\\\"'External/InHouse'\\\">\\r\\n\\r\\n                    <mat-option *ngFor=\\\"let info of invoiceSourceType\\\"\\r\\n                                [value]=\\\"info.viewValue\\\">\\r\\n                        {{info.viewValue}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"60%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"External Invoice Reference\\\"\\r\\n                       [formControl]=\\\"invoiceExtRefCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('required')\\\">\\r\\n                    Reference is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('maxlength')\\\">\\r\\n                    Must be less than 25 characters\\r\\n                </mat-error>\\r\\n                <mat-hint align=\\\"end\\\">{{invoiceExtRefCtrl.value.length}} / 25</mat-hint>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"!isUnique\\\">\\r\\n                    Reference Number already used\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            placeholder=\\\"Template\\\"\\r\\n                            [formControl]=\\\"invoiceTemplatesCtrl\\\"\\r\\n                            (selectionChange)=\\\"onInvoiceTemplateSelected()\\\"\\r\\n                            matTooltip=\\\"Template\\\"\\r\\n                            [required]=\\\"invoiceTemplatesCtrl.isRequired\\\">\\r\\n                    <mat-option></mat-option>\\r\\n                    <mat-option *ngFor=\\\"let template of filteredTemplates\\\"\\r\\n                                [value]=\\\"template\\\">\\r\\n                        {{template.name}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n                <mat-error *ngIf=\\\"invoiceTemplatesCtrl.hasError('required')\\\">\\r\\n                    Template is required\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { PhysicalDocumentTemplate } from '../../../../shared/entities/document-template.entity';\r\nimport { DocumentTypes } from '../../../../shared/enums/document-type.enum';\r\nimport { InvoiceSourceType } from '../../../../shared/enums/invoice-source-type.enum';\r\nimport { InvoiceTypes } from '../../../../shared/enums/invoice-type.enum';\r\nimport { InvoiceRecord } from '../../../../shared/services/execution/dtos/invoice-record';\r\nimport { DocumentService } from '../../../../shared/services/http-services/document.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { DocumentTemplateBaseComponent } from '../../invoicing-base-form/document-template-base/document-template-base.component';\r\nimport { FormConfigurationProviderService } from './../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from './../../../../shared/services/http-services/execution.service';\r\n\r\n@Component({\r\n    selector: 'atlas-document-template',\r\n    templateUrl: './document-template.component.html',\r\n    styleUrls: ['./document-template.component.scss'],\r\n})\r\nexport class DocumentTemplateComponent extends DocumentTemplateBaseComponent implements OnInit {\r\n    @Input() documentType: DocumentTypes;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected documentService: DocumentService,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(executionService, formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.documentService.getTemplates(this.documentType).subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n            this.invoiceTemplatesCtrl.valueChanges.subscribe((input) => {\r\n                this.filteredTemplates =\r\n                    this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        templates.value,\r\n                        ['documentTemplateId', 'name']);\r\n\r\n            });\r\n            this.setValidators();\r\n            this.onExternalInHouseSelected();\r\n            this.bindConfiguration();\r\n            if ((this.filteredTemplates.length === 1) &&\r\n                (this.invoiceExtInHouseCtrl.value === (InvoiceSourceType[InvoiceSourceType.Inhouse]))) {\r\n                this.invoiceTemplatesCtrl.patchValue(this.filteredTemplates[0]);\r\n                this.onInvoiceTemplateSelected();\r\n            }\r\n\r\n        }));\r\n        this.onChanges();\r\n        this.invoiceSourceType = this.getInvoiceSourceTypeEnum();\r\n        this.getData();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceTemplatesCtrl: this.invoiceTemplatesCtrl,\r\n            invoiceExtRefCtrl: this.invoiceExtRefCtrl,\r\n            invoiceExtInHouseCtrl: this.invoiceExtInHouseCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceDocumentTemplate = entity as InvoiceRecord;\r\n        invoiceDocumentTemplate.template = this.invoiceTemplatesCtrl.value ?\r\n            (this.invoiceTemplatesCtrl.value as PhysicalDocumentTemplate).path : null;\r\n        invoiceDocumentTemplate.externalInhouse = this.invoiceExtInHouseCtrl.value;\r\n        invoiceDocumentTemplate.externalInvoiceRef = this.invoiceExtRefCtrl.value;\r\n        return invoiceDocumentTemplate;\r\n    }\r\n\r\n    getData() {\r\n        const invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.updateInhouseExternalStatus(invoiceTypeId);\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <form [formGroup]=\\\"searchForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           formControlName=\\\"searchContractCtrl\\\"\\r\\n                           (keydown.enter)=\\\"onSearchCostContracts()\\\"\\r\\n                           placeholder=\\\"Contract Search\\\" />\\r\\n                    <mat-error *ngIf=\\\"searchForm.get('searchContractCtrl').hasError('required')\\\">\\r\\n                        Contract reference is required\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"charterReferenceCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCharters\\\"\\r\\n                                                         label=\\\"Charter Reference\\\"\\r\\n                                                         displayProperty=\\\"charterCode\\\"\\r\\n                                                         [selectProperties]=\\\"['charterCode','description']\\\"\\r\\n                                                         [errorMap]=\\\"charterErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for charters\\\"\\r\\n                                                         gridId=\\\"charterGrid\\\"\\r\\n                                                         [dataLoader]=\\\"charterDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"costTypeCtrl\\\"\\r\\n                                                         [options]=\\\"filteredcostTypes\\\"\\r\\n                                                         label=\\\"Cost Type\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchCostContracts()\\\"\\r\\n                                                         displayProperty=\\\"costTypeCode\\\"\\r\\n                                                         [selectProperties]=\\\"['costTypeCode', 'name']\\\"\\r\\n                                                         [errorMap]=\\\"costTypeErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Cost Type\\\"\\r\\n                                                         gridId=\\\"costTypesGrid\\\"\\r\\n                                                         [dataLoader]=\\\"costTypeDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"supplierCodeCtrl\\\"\\r\\n                                                         [options]=\\\"filteredSupplier\\\"\\r\\n                                                         label=\\\"Supplier\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchCostContracts()\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchCostContracts()\\\"\\r\\n                        class=\\\"heroGradient\\\"\\r\\n                        id=\\\"search-button\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\\r\\n\\r\\n<atlas-filter-set-display (filtersChanged)=onFilterSetDetailsChange($event)\\r\\n                          [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                          [gridCode]=\\\"gridCode\\\"\\r\\n                          [company]=\\\"company\\\"\\r\\n                          #filterSetDisplayComponent>\\r\\n</atlas-filter-set-display>\\r\\n<mat-card>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h2 class=\\\"no-margin\\\">{{gridTitle}}</h2>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end start\\\">\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"apportion-button\\\"\\r\\n                    (click)=\\\"onApportionButtonClicked()\\\"\\r\\n                    [disabled]=\\\"isApportionDisable\\\">APPORTION</button>\\r\\n            <div>\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"costContractGridOptions && costContractGridOptions.columnDefs\\\"\\r\\n                                                [gridOptions]=\\\"costContractGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"gridCode\\\"\\r\\n                                                [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div ag-grid=\\\"costContractGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n         style=\\\"height: 100%\\\">\\r\\n        <ag-grid-angular style=\\\"width: 100%; height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"contractsToInvoice\\\"\\r\\n                         [columnDefs]=\\\"columnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         rowMultiSelectWithClick=true\\r\\n                         singleClickEdit=true\\r\\n                         suppressRowClickSelection=true\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         (firstDataRendered)=\\\"onFirstDataRendered($event)\\\"\\r\\n                         (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                         (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n            Total Quantity : <span class=\\\"total-figure-value\\\">\\r\\n                {{formatQuantityAndTotal(this.totalQuantity)}}\\r\\n            </span>\\r\\n        </mat-card-subtitle>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end\\\">\\r\\n        <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n            Total Cost :\\r\\n            <span class=\\\"total-figure-value\\\">\\r\\n                {{formatQuantityAndTotal(this.totalCostAmount)}}\\r\\n                {{this.currencyCodeSelected}}\\r\\n            </span>\\r\\n        </mat-card-subtitle>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\\r\\n\"","module.exports = \".container-height {\\n  height: 100%; }\\n\\n.atr-ag-grid {\\n  width: 100%;\\n  height: 100%; }\\n\\n.ag-theme-material .ag-header-select-all {\\n  width: 100% !important;\\n  text-align: center !important; }\\n\\n.atr-grid-left-margin {\\n  left: 20px; }\\n\\n.margin-content {\\n  margin-bottom: 2%; }\\n\\n.apportion-button.mat-raised-button {\\n  margin-top: 0 !important; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ListAndSearchFilterDto } from '../../../../../../../shared/dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../../../shared/entities/charter.entity';\r\nimport { CostType } from '../../../../../../../shared/entities/cost-type.entity';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { IsLocked } from '../../../../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../../../../../../shared/entities/list-and-search/list-and-search-request.entity';\r\nimport { LockFunctionalContext } from '../../../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { ToleranceTypes } from '../../../../../../../shared/enums/tolerance-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../../../../shared/services/execution/charter-data-loader';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../../../shared/services/http-services/lock.service';\r\nimport { CostTypeDataLoader } from '../../../../../../../shared/services/masterdata/costType-data-loader';\r\nimport { CounterPartyDataLoader } from '../../../../../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { ExecutionActionsService } from '../../../../../../services/execution-actions.service';\r\nimport { ApportionDialogComponent } from '../../../../../dialog-boxes/apportion-dialog/apportion-dialog.component';\r\nimport { AtlasNumber } from './../../../../../../..//shared/entities/atlas-number.entity';\r\nimport { FilterSetDisplayComponent } from './../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\n\r\n@Component({\r\n    selector: 'atlas-contract-search',\r\n    templateUrl: './contract-search.component.html',\r\n    styleUrls: ['./contract-search.component.scss'],\r\n    providers: [CostTypeDataLoader, CounterPartyDataLoader, CharterDataLoader],\r\n})\r\nexport class ContractSearchComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplayComponent') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    @Output() readonly supplier = new EventEmitter<any>();\r\n    @Output() readonly costContractsSelected = new EventEmitter<boolean>();\r\n\r\n    isLoading: boolean;\r\n\r\n    dataLength: number = 0;\r\n    searchForm: FormGroup;\r\n    totalQuantity: number = 0;\r\n    invoiceType: number;\r\n    company: string;\r\n    componentId: string = 'costInvoiceContract';\r\n    searchTerm: string;\r\n    searchCostTerm: string;\r\n    searchSupplierTerm: string;\r\n    searchCharterTerm: string;\r\n    differentCommoditySelected: boolean;\r\n    isContractSelected: boolean = false;\r\n    isApportionDisable: boolean = true;\r\n    supplierSelected: string;\r\n    tolerancePercentage: number;\r\n    saveContractRef: string;\r\n    saveCounterparty: string;\r\n    saveCharterReference: string;\r\n    saveCost: string;\r\n    counterParty: string;\r\n    rateType: RateTypes;\r\n    isApportion: boolean = true;\r\n    totalInvocieValue: number = 0;\r\n    isCostAmountChanged: boolean = true;\r\n    rowSelected: boolean = false;\r\n\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n\r\n    gridTitle = 'Cost Contracts to Invoice';\r\n    gridCode: string = 'invoiceCostSelectionGrid';\r\n    columnDefs: agGrid.ColDef[];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    hasGridSharing = false;\r\n    costContractGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    contractsToInvoice: ContractsToCostInvoice[];\r\n    contractsToInvoiceRow: ContractsToCostInvoice[];\r\n    allContracts: ContractsToCostInvoice[];\r\n    selectedCostContracts: ContractsToCostInvoice[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    costTypeCtrl = new AtlasFormControl('CostType');\r\n    filteredcostTypes: CostType[];\r\n    costControl: CostType;\r\n    costList: CostType[];\r\n    filteredSupplier: Counterparty[];\r\n    counterPartyList: Counterparty[];\r\n    counterPartyControl: Counterparty;\r\n    masterdata: MasterData = new MasterData();\r\n    supplierCodeCtrl = new AtlasFormControl('Supplier');\r\n    charterReferenceCtrl = new AtlasFormControl('CharterRef');\r\n    filteredCharters: Charter[];\r\n    charterRefControl: Charter;\r\n    charters: Charter[];\r\n    filters: ListAndSearchFilter[];\r\n    destroy$ = new Subject();\r\n    costIds: string[] = [];\r\n    selectedCostIds: string;\r\n    totalCostAmount: number = 0;\r\n    currencyCodeSelected: string;\r\n\r\n    additionnalColumns = [\r\n        {\r\n            headerName: 'Cost Amount',\r\n            field: 'costAmount',\r\n            colId: 'costAmount',\r\n            valueGetter: this.calculateCostAmount.bind(this),\r\n            valueFormatter: this.formatValue.bind(this),\r\n            type: 'numericColumn',\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: 'Cost Amount to Invoice',\r\n            field: 'costAmountToInvoice',\r\n            colId: 'costAmountToInvoice',\r\n            type: 'numericColumn',\r\n            editable: this.isGridEditable.bind(this),\r\n            valueSetter: this.setCostAmountToInvoice.bind(this),\r\n            valueFormatter: this.formatValue.bind(this),\r\n            hide: false,\r\n        },\r\n        {\r\n            headerName: '%Invoiced',\r\n            field: 'invoicePercent',\r\n            colId: 'invoicePercent',\r\n            valueSetter: this.setInvoicePercent.bind(this),\r\n            valueFormatter: this.formatValue.bind(this),\r\n            type: 'numericColumn',\r\n            hide: false,\r\n            editable: this.onRowSelectionChanged.bind(this),\r\n        },\r\n        {\r\n            headerName: 'Contract Quantity',\r\n            field: 'quantity',\r\n            colId: 'quantity',\r\n            hide: false,\r\n            editable: true,\r\n            type: 'numericColumn',\r\n            valueSetter: this.setContractQuantity.bind(this),\r\n            onCellValueChanged: this.onQuantityChanged.bind(this),\r\n\r\n        },\r\n    ];\r\n\r\n    costTypeErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Cost Type not in the list.');\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Supplier not in the list.');\r\n\r\n    charterErrorMap: Map<string, string> = new Map();\r\n    count: number = 0;\r\n    savedFilters: ListAndSearchFilter[];\r\n\r\n    constructor(private formBuilder: FormBuilder, private executionService: ExecutionService,\r\n        private route: ActivatedRoute, private snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        protected lockService: LockService,\r\n        public costTypeDataLoader: CostTypeDataLoader,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        protected utilService: UtilService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        public charterDataLoader: CharterDataLoader,\r\n        public gridService: AgGridService,\r\n        public executionActionsService: ExecutionActionsService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.searchForm = this.formBuilder.group({\r\n            searchContractCtrl: [''],\r\n        });\r\n    }\r\n\r\n    populateCharterList() {\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.charters = charter;\r\n            this.filteredCharters = this.charters;\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data['masterdata'] as MasterData;\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.selectedCostIds = params['costIds'];\r\n        });\r\n        this.filteredcostTypes = this.masterdata.costTypes;\r\n        this.filteredSupplier = this.masterdata.counterparties;\r\n        this.counterPartyList = this.filteredSupplier;\r\n        this.costList = this.filteredcostTypes;\r\n        this.costTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCostTypes(input);\r\n        });\r\n        this.supplierCodeCtrl.valueChanges.subscribe((input) => {\r\n            this.filterSupplier(input);\r\n        });\r\n        this.populateCharterList();\r\n        this.charterReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCharterReference(input);\r\n        });\r\n        this.loadGridConfiguration();\r\n\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.saveContractRef = params['savedContractRefCost'];\r\n            this.saveCounterparty = params['savedCounterPartyCost'];\r\n            this.saveCharterReference = params['savedCharterRefCost'];\r\n            this.saveCost = params['savedCost'];\r\n        });\r\n        if (this.executionActionsService.EditCriteriaRetainFilter && this.executionActionsService.EditCriteriaRetainFilter.length > 0) {\r\n            this.savedFilters = this.executionActionsService.EditCriteriaRetainFilter;\r\n        }\r\n        if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference || this.saveCost) {\r\n            if (this.saveContractRef) {\r\n                this.searchForm.controls['searchContractCtrl'].setValue(this.saveContractRef);\r\n            }\r\n            if (this.saveCounterparty) {\r\n                this.counterPartyControl = this.counterPartyList.find((counterParty) =>\r\n                    counterParty.counterpartyCode === this.saveCounterparty);\r\n                this.supplierCodeCtrl.patchValue(this.counterPartyControl);\r\n            }\r\n            if (this.saveCharterReference) {\r\n                this.charterRefControl = this.charters.find((charter) =>\r\n                    charter.charterCode === this.saveCharterReference);\r\n                this.charterReferenceCtrl.patchValue(this.charterRefControl);\r\n            }\r\n            if (this.saveCost) {\r\n                this.costControl = this.costList.find((cost) =>\r\n                    cost.costTypeCode === this.saveCost);\r\n                this.costTypeCtrl.patchValue(this.costControl);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onRowSelectionChanged(event): boolean {\r\n        if (event.data.invoicePercent > 0 && event.data.invoicePercent <= 100) {\r\n            this.rowSelected = true;\r\n            return this.rowSelected;\r\n        } else {\r\n            this.rowSelected = false;\r\n            return this.rowSelected;\r\n        }\r\n    }\r\n\r\n    setContractQuantity(params) {\r\n        let validQuantity = true;\r\n\r\n        if (params && params.data) {\r\n            if (params.newValue > params.data.quantityToInvoice) {\r\n                validQuantity = false;\r\n                params.data.quantity = Number(params.oldValue);\r\n\r\n            } else {\r\n                params.data.quantity = Number(params.newValue);\r\n            }\r\n\r\n            if (!validQuantity) {\r\n                this.snackbarService.informationSnackBar('Quantity cannot be greater than contract quantity');\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onQuantityChanged(params) {\r\n        if (params && params.data) {\r\n            const invoicePercercentage = (100 * params.newValue) / params.oldValue;\r\n\r\n            params.data.invoicePercent = (params.data.invoicePercent * invoicePercercentage) / 100;\r\n            params.data.costAmount = (params.data.costAmount * invoicePercercentage) / 100;\r\n            params.data.costAmountToInvoice = (params.data.costAmountToInvoice * invoicePercercentage) / 100;\r\n            if (this.gridApi) {\r\n                this.gridApi.refreshCells(params.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    filterCostTypes(input) {\r\n        this.filteredcostTypes = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.costTypes,\r\n            ['costTypeCode', 'name'],\r\n        );\r\n\r\n        if (this.costTypeCtrl.valid || !this.costTypeCtrl.value.costTypeCode) {\r\n            this.onSearchCostContracts();\r\n        }\r\n    }\r\n\r\n    filterSupplier(input) {\r\n        this.filteredSupplier = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.supplierCodeCtrl.valid || !this.supplierCodeCtrl.value) {\r\n            this.onSearchCostContracts();\r\n        }\r\n    }\r\n\r\n    filterCharterReference(input) {\r\n        this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.charters,\r\n            ['charterCode', 'description'],\r\n        );\r\n        if (this.charterReferenceCtrl.valid || !this.charterReferenceCtrl.value) {\r\n            this.onSearchCostContracts();\r\n        }\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    isGridEditable(params) {\r\n        // cannot edit the column, if row is not selected\r\n        return params.node.selected;\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        // selection column\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'left',\r\n            });\r\n\r\n        // grid config\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                width: 100,\r\n                hide: !config.isVisible,\r\n            };\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n\r\n            return columnDef;\r\n        }));\r\n\r\n        // calculated columns\r\n        this.columnDefs = this.columnDefs.concat(this.additionnalColumns);\r\n\r\n        if (this.gridApi) {\r\n            if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n        }\r\n        if (this.costContractGridOptions) {\r\n            this.costContractGridOptions.columnDefs = this.columnDefs;\r\n        }\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]) {\r\n        this.executionActionsService.EditCriteriaRetainFilter = filters;\r\n        this.filters = filters;\r\n        if (this.count === 1) {\r\n            this.filters = this.savedFilters;\r\n            this.savedFilters = null;\r\n            this.count = 0;\r\n        }\r\n        if (this.savedFilters && this.count === 0) {\r\n            if (this.filterSetDisplayComponent) {\r\n                this.count = 1;\r\n                const localFilters: ListAndSearchFilterDto[] = this.savedFilters.map((filter: ListAndSearchFilter) => {\r\n                    return new ListAndSearchFilterDto(filter);\r\n                });\r\n                this.filterSetDisplayComponent.loadFilters(localFilters);\r\n            }\r\n        } else {\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    loadData(emitResult = false) {\r\n        if (!this.filters) {\r\n            return;\r\n        }\r\n        const filters = this.filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n        this.isLoading = true;\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filters },\r\n        };\r\n\r\n        this.executionService.searchContractsForCostInvoice(request).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((data) => {\r\n            this.isLoading = false;\r\n            if (this.selectedCostIds) {\r\n                if (this.selectedCostIds.toString().includes(',')) {\r\n                    this.costIds = this.selectedCostIds.toString().split(',');\r\n                    if (this.costIds && this.costIds.length > 0) {\r\n                        const costContracts: ContractsToCostInvoice[] = [];\r\n                        this.costIds.forEach((costId) => {\r\n                            data.value.forEach((contract) => {\r\n                                if (Number(costId) === contract.costId && contract) {\r\n                                    costContracts.push(contract);\r\n                                }\r\n                            });\r\n                        });\r\n                        this.contractsToInvoice = costContracts;\r\n                    }\r\n                } else {\r\n                    this.contractsToInvoice = data.value.filter((contract) =>\r\n                        contract.costId === Number(this.selectedCostIds));\r\n                }\r\n            } else {\r\n                this.contractsToInvoice = data.value;\r\n            }\r\n            this.allContracts = this.contractsToInvoice;\r\n            this.gridApi.hideOverlay();\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n            if (this.filters.length === 0) {\r\n                if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference || this.saveCost) {\r\n                    this.onSearchCostContracts();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.columnDefs;\r\n        this.costContractGridOptions = params;\r\n\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    setCostAmountToInvoice(params): boolean {\r\n        params.data.costAmountToInvoice = Number(params.newValue);\r\n        if (params.newValue <= 0 || !params.data.costAmountToInvoice) {\r\n            this.snackbarService.informationSnackBar('0 or negative cost cannot be invoiced');\r\n            params.data.costAmountToInvoice = params.data.costAmount;\r\n        } else {\r\n            const tolerance: number = this.tolerancePercentage * 100;\r\n            if (this.tolerancePercentage !== ToleranceTypes.Percentage) {\r\n                const minToleranceBand: number = params.data.costAmount -\r\n                    (params.data.costAmount * this.tolerancePercentage);\r\n                const maxToleranceBand: number = params.data.costAmount +\r\n                    (params.data.costAmount * this.tolerancePercentage);\r\n                if (params.newValue < minToleranceBand || params.newValue > maxToleranceBand) {\r\n                    this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Tolerance Information',\r\n                            text: 'Cost Amount to Invoice is greater/less than ' + tolerance + '% – than the cost originally estimated',\r\n                            okButton: 'Ok',\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        this.calculateTotalCost();\r\n        return true;\r\n    }\r\n\r\n    calculateTotalCost() {\r\n        this.totalCostAmount = 0;\r\n        this.totalQuantity = 0;\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        if (selectedRows && selectedRows.length > 0) {\r\n            this.currencyCodeSelected = selectedRows[0].currencyCode;\r\n            selectedRows.forEach(\r\n                (selectedContract) => {\r\n                    this.totalCostAmount += selectedContract.costAmountToInvoice;\r\n                },\r\n            );\r\n        }\r\n    }\r\n    calculateCostAmount(params) {\r\n        if (this.isCostAmountChanged) {\r\n            if (params.data.rateTypeCode === RateTypes[RateTypes.Amount]) {\r\n                params.data.costAmount = params.data.rate;\r\n            } else if (params.data.rateTypeCode === RateTypes[RateTypes.Percent]) {\r\n                params.data.costAmount = (Number(params.data.quantity) * params.data.price *\r\n                    (params.data.rate / 100) * params.data.priceConversionFactor * params.data.weightConversionFactor);\r\n            } else if (params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n                params.data.costAmount =\r\n                    Number(params.data.quantity) * params.data.rateConversionFactor * (params.data.weightConversionFactor) * params.data.rate;\r\n            }\r\n        }\r\n        return params.data.costAmount;\r\n    }\r\n\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(param.value);\r\n    }\r\n\r\n    onSearchCostContracts() {\r\n        this.searchTerm = this.searchForm.get('searchContractCtrl').value;\r\n        this.searchCostTerm = (this.costTypeCtrl.value as CostType).costTypeCode;\r\n        this.searchSupplierTerm = (this.supplierCodeCtrl.value as Counterparty).counterpartyCode;\r\n        this.searchCharterTerm = (this.charterReferenceCtrl.value as Charter).charterCode;\r\n        let rows: ContractsToCostInvoice[] = [];\r\n        let contractRows: number = 0;\r\n        let charterRows: number = 0;\r\n        let costRows: number = 0;\r\n        if ((!this.searchTerm || this.searchTerm === '') && (!this.searchCostTerm || this.searchCostTerm === '')\r\n            && (!this.searchCharterTerm || this.searchCharterTerm === '')\r\n            && (!this.searchSupplierTerm || this.searchSupplierTerm === '')) {\r\n            return;\r\n        } else {\r\n            this.isLoading = true;\r\n            this.filters = [];\r\n            // added check to avoid runtime error with Array.Find\r\n            if (this.allContracts.length > 0) {\r\n                // sanity check to confirm corresponding fields in array is not null\r\n                this.contractsToInvoice = this.allContracts;\r\n\r\n                if (this.searchTerm) {\r\n                    this.contractsToInvoice = this.allContracts.filter((item) => item.contractReference != null);\r\n                    rows = this.contractsToInvoice.filter((item) =>\r\n                        item.contractReference.toString().toUpperCase().includes(this.searchTerm.toUpperCase()));\r\n                    contractRows = -1;\r\n                }\r\n                if (this.searchCharterTerm) {\r\n                    if (rows.length === 0 && contractRows === 0) {\r\n                        this.contractsToInvoice = this.allContracts.filter((item) => item.charterReference != null);\r\n                        rows = this.contractsToInvoice.filter((item) =>\r\n                            item.charterReference.toString().toUpperCase().includes(this.searchCharterTerm.toUpperCase()));\r\n                    } else if (contractRows === -1) {\r\n                        rows = rows.filter((item) => item.charterReference != null);\r\n                        rows = rows.filter((item) => item.charterReference.toString().toUpperCase().\r\n                            includes(this.searchCharterTerm.toUpperCase()));\r\n                    }\r\n                    charterRows = -1;\r\n                }\r\n                if (this.searchCostTerm) {\r\n                    if (rows.length === 0 && charterRows === 0 && contractRows === 0) {\r\n                        this.contractsToInvoice = this.allContracts.filter((item) => item.costTypeCode != null);\r\n                        rows = this.contractsToInvoice.filter((item) =>\r\n                            item.costTypeCode.toString().toUpperCase().includes(this.searchCostTerm.toUpperCase()));\r\n                    } else {\r\n                        rows = rows.filter((item) => item.costTypeCode != null);\r\n                        rows = rows.filter((item) => item.costTypeCode.toString().toUpperCase().\r\n                            includes(this.searchCostTerm.toUpperCase()));\r\n                    }\r\n                    costRows = -1;\r\n                }\r\n                if (this.searchSupplierTerm) {\r\n                    if (rows.length === 0 && charterRows === 0 && contractRows === 0 && costRows === 0) {\r\n                        this.contractsToInvoice = this.allContracts.filter((item) => item.supplierCode != null);\r\n                        rows = this.contractsToInvoice.filter((item) =>\r\n                            item.supplierCode.toString().toUpperCase().includes(this.searchSupplierTerm.toUpperCase()));\r\n                    } else {\r\n                        rows = rows.filter((item) => item.supplierCode != null);\r\n                        rows = rows.filter((item) => item.supplierCode.toString().toUpperCase().\r\n                            includes(this.searchSupplierTerm.toUpperCase()));\r\n                    }\r\n                }\r\n            }\r\n            this.contractsToInvoice = rows;\r\n            this.dataLength = this.contractsToInvoice.length;\r\n            this.autoSizeContractsGrid();\r\n            this.isLoading = false;\r\n            (this.contractsToInvoice) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n        }\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        const invoicedPercentage: number = 100;\r\n        const selectedNodes: agGrid.RowNode[] = this.gridApi.getSelectedNodes();\r\n        const selectedNodesToApprotionEnabled: ContractsToCostInvoice[] = this.gridApi.getSelectedRows();\r\n        const currentRowIndex = event.rowIndex;\r\n        this.totalQuantity = 0;\r\n\r\n        // calculate total quantity for the selected nodes\r\n        if (selectedNodes) {\r\n            const selectedSectionIds = selectedNodes.map((item) => item.data.sectionId).\r\n                filter((value, index, self) => self.indexOf(value) === index);\r\n            if (selectedSectionIds && selectedSectionIds.length > 0) {\r\n                for (const val of selectedSectionIds) {\r\n                    this.totalQuantity += selectedNodes.filter((item) => item.data.sectionId === val)[0].data.quantity;\r\n                }\r\n            }\r\n        }\r\n        this.isApportionDisable = true;\r\n        this.isApportion = true;\r\n\r\n        if (selectedNodes.length === 0) {\r\n            this.selectSupplier(null, false);\r\n        } else if (selectedNodes.length === 1) {\r\n            if (selectedNodes[0].data.supplierCode && !this.supplierSelected) {\r\n                this.supplierSelected = selectedNodes[0].data.supplierCode;\r\n            }\r\n            this.selectSupplier(this.supplierSelected);\r\n\r\n        } else if (selectedNodes.length > 1) {\r\n            let valid = true;\r\n            let currencySelected;\r\n            let costDirection: string;\r\n            let costTypeCode: string;\r\n\r\n            const firstSelectedNode = selectedNodes.map((node) => node.data)[0];\r\n\r\n            const filteredSelectedSectionIds = selectedNodesToApprotionEnabled.filter((contract) =>\r\n                contract.sectionId !== firstSelectedNode.sectionId && contract.weightCode !== firstSelectedNode.weightCode);\r\n\r\n            if (filteredSelectedSectionIds && filteredSelectedSectionIds.length > 0) {\r\n                this.isApportionDisable = false;\r\n            } else {\r\n                this.isApportionDisable = true;\r\n            }\r\n\r\n            for (const node of selectedNodes) {\r\n                if (!currencySelected) {\r\n                    currencySelected = node.data.currencyCode;\r\n                }\r\n                if (currencySelected !== node.data.currencyCode) {\r\n                    valid = false;\r\n                    break;\r\n                }\r\n                if (!costDirection && node.data) {\r\n                    costDirection = node.data.costDirection;\r\n                }\r\n                if (!costTypeCode && node.data) {\r\n                    costTypeCode = node.data.costTypeCode;\r\n                }\r\n                if (node.data && ((costDirection !== node.data.costDirection)\r\n                    || (costTypeCode !== node.data.costTypeCode))) {\r\n                    this.isApportion = false;\r\n                }\r\n            }\r\n            if (!valid) {\r\n                this.snackbarService.informationSnackBar('Different currency types cannot be invoiced together');\r\n                this.deselectNode(currentRowIndex);\r\n            }\r\n            if (valid && !this.supplierSelected) {\r\n                for (const node of selectedNodes) {\r\n                    if (!this.supplierSelected) {\r\n                        this.supplierSelected = node.data.supplierCode;\r\n                        this.selectSupplier(this.supplierSelected);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (event.node.isSelected()) {\r\n            if (event.node) {\r\n                if (!event.node.data.costAmount) {\r\n                    event.node.data.costAmountToInvoice = this.calculateCostAmountOnSelection(event.node.data)\r\n                        - (event.node.data.invoicedAmount);\r\n                    this.gridApi.refreshCells(event.data);\r\n                } else {\r\n                    const unInvoicedAmount = event.node.data.costAmount - event.node.data.invoicedAmount;\r\n                    event.node.data.costAmountToInvoice = (unInvoicedAmount > 0) ? unInvoicedAmount : 0;\r\n                    this.gridApi.refreshCells(event.data);\r\n                }\r\n                if (!event.node.data.invoicedPercentage) {\r\n                    event.node.data.invoicePercent = invoicedPercentage;\r\n                } else if (event.node.data.invoicedPercentage > 0 && event.node.data.invoicedPercentage < 100) {\r\n                    event.node.data.invoicePercent = invoicedPercentage - event.node.data.invoicedPercentage;\r\n                }\r\n            }\r\n\r\n            const currentSupplierNode = event.node.data.supplierCode;\r\n            if ((this.supplierSelected !== currentSupplierNode) && currentSupplierNode) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Confirmation of Supplier',\r\n                        text: 'You have selected an estimate line which is different to Previous Supplier. ' +\r\n                            'Do you wish to update this estimate with the same supplier ? ',\r\n                        okButton: 'Proceed',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (!answer) {\r\n                        this.deselectNode(currentRowIndex);\r\n                    }\r\n                });\r\n            }\r\n            this.gridApi.refreshCells();\r\n        } else {\r\n            event.data.costAmountToInvoice = null;\r\n            event.data.invoicePercent = event.data.invoicedPercentage;\r\n            event.data.quantity = event.data.quantityToInvoice;\r\n            this.gridApi.refreshCells(event.data);\r\n        }\r\n        this.calculateTotalCost();\r\n        this.isContractSelected = selectedNodes.length > 0;\r\n        this.costContractsSelected.emit(this.isContractSelected);\r\n        this.grantLock(Number(event.data.sectionId), event.node);\r\n        this.selectedCostContracts = selectedNodes.map((node) => node.data);\r\n    }\r\n\r\n    calculateCostAmountOnSelection(contract) {\r\n        if (contract.rateTypeCode === RateTypes[RateTypes.Amount]) {\r\n            contract.costAmount = contract.rate;\r\n        } else if (contract.rateTypeCode === RateTypes[RateTypes.Percent]) {\r\n            contract.costAmount = (Number(contract.quantity) * contract.price *\r\n                (contract.rate / 100) * contract.weightConversionFactor * contract.priceConversionFactor);\r\n        } else if (contract.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n            contract.costAmount =\r\n                Number(contract.quantity) * contract.rateConversionFactor * (contract.weightConversionFactor) * contract.rate;\r\n        }\r\n        return contract.costAmount;\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.costContractGridOptions.api.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        this.subscriptions.push(this.lockService.lockContract(sectionId, LockFunctionalContext.CostInvoicing)\r\n                            .subscribe(() => {\r\n                                this.refeshResourceInformation();\r\n                                this.locking = this.locking.filter((id) => id !== sectionId);\r\n                            }));\r\n\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                if (this.resourcesInformation.filter((rsc) => rsc.resourceId === sectionId).length === 0) {\r\n                    this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.CostInvoicing)\r\n                        .subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                        }));\r\n                } else {\r\n                    node.setRowSelectable(true);\r\n                    this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.costContractGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    deselectNode(currentRowIndex) {\r\n        this.costContractGridOptions.api.forEachNode((node) => {\r\n            if (Number(node.id) === currentRowIndex) {\r\n                this.costContractGridOptions.api.deselectNode(node);\r\n                node.data.costAmountToInvoice = null;\r\n                node.data.invoicePercent = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    selectSupplier(supplierSelected, isLineSelected = true) {\r\n        this.supplier.emit({\r\n            supplierSelected,\r\n            isLineSelected,\r\n        });\r\n        this.supplierSelected = supplierSelected;\r\n    }\r\n    setTolerancePercentage(tolerancePercentage) {\r\n        this.tolerancePercentage = tolerancePercentage;\r\n    }\r\n\r\n    // Commenting this until the counterparty/supplier filter is completely developed\r\n    // onRowDataChanged(params) {\r\n    //     if (this.counterParty) {\r\n    //         const counterPartyFilterComponent = this.gridApi.getFilterInstance('supplierCode');\r\n    //         counterPartyFilterComponent.setModel({\r\n    //             type: 'set',\r\n    //             values: [this.counterParty],\r\n    //         });\r\n    //         this.gridApi.onFilterChanged();\r\n    //     }\r\n    // }\r\n\r\n    numberFormatter(params) {\r\n        if (params && params.value && !isNaN(params.value)) {\r\n            if (params.colDef.colId.toLowerCase() === 'quantity' || params.colDef.colId.toLowerCase() === 'rate') {\r\n                if (params.colDef.colId.toLowerCase() === 'rate') {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(params.value);\r\n                } else {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onApportionButtonClicked() {\r\n        if (this.isApportion) {\r\n            this.getTotalQuantityAndTotalInvoiceValue();\r\n            const openApportiontDialog = this.dialog.open(ApportionDialogComponent, {\r\n                width: '40%',\r\n                height: '60%',\r\n                data: {\r\n                    selectedRows: this.selectedCostContracts,\r\n                    totalQuantity: this.totalQuantity,\r\n                    totalInvoiceValue: this.totalInvocieValue,\r\n                },\r\n\r\n            });\r\n\r\n            openApportiontDialog.afterClosed().subscribe((updatedCostContracts: ContractsToCostInvoice[]) => {\r\n                this.updateSelectedCostRows(updatedCostContracts);\r\n                this.isCostAmountChanged = false;\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Apportion Cannot be done for multiple costs types or if there is a mix of Pay/Rec');\r\n        }\r\n    }\r\n\r\n    setInvoicePercent(params): boolean {\r\n        if (params.newValue <= 0 || !params.data.invoicePercent) {\r\n            this.snackbarService.informationSnackBar('Invoice Percentage cannot be 0 or negative');\r\n            params.data.invoicePercent = params.oldValue < 1 ? 1 : params.oldValue;\r\n        } else if (params.newValue > 100) {\r\n            this.snackbarService.informationSnackBar('Invoice Percentage cannot be greater than 100');\r\n            params.data.invoicePercent = params.oldValue < 100 ? params.oldValue : 100;\r\n        } else if ((params.newValue > params.oldValue)) {\r\n            this.snackbarService.informationSnackBar('Invoice Percentage cannot be greater available percentage');\r\n            params.data.invoicePercent = params.oldValue;\r\n        } else {\r\n            params.data.invoicePercent = params.newValue;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getTotalQuantityAndTotalInvoiceValue() {\r\n        this.totalQuantity = 0;\r\n        this.totalInvocieValue = 0;\r\n        if (this.selectedCostContracts) {\r\n            this.selectedCostContracts.forEach((costContract) => {\r\n                this.totalQuantity += Number(costContract.quantity);\r\n                this.totalInvocieValue += costContract.costAmountToInvoice;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateSelectedCostRows(updatedCostContracts: ContractsToCostInvoice[]) {\r\n        if (updatedCostContracts) {\r\n            this.gridApi.updateRowData({ update: updatedCostContracts });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title fxFlex=\\\"5%\\\">\\r\\n            Invoicee\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\">\\r\\n                <mat-form-field fxFlex=\\\"70%\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Invoicee\\\"\\r\\n                           [required]=\\\"invoiceeCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"invoicee\\\"\\r\\n                           [formControl]=\\\"invoiceeCtrl\\\"\\r\\n                           [matTooltip]=\\\"'Invoicee'\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-autocomplete #invoicee=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (optionSelected)=\\\"onSelectionChange($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let counterparty of filteredCounterPartyList\\\"\\r\\n                                    [value]=\\\"counterparty.counterpartyCode\\\">\\r\\n                            {{counterparty.counterpartyCode}} | {{counterparty.description}}</mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"invoiceeCtrl.hasError('required')\\\">\\r\\n                        Invoicee is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"invoiceeCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <mat-form-field fxFlex=\\\"70%\\\"\\r\\n                            class=\\\"mat-read-only-field\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Invoicee Description\\\"\\r\\n                       [matTooltip]=\\\"'Invoicee Description'\\\"\\r\\n                       [formControl]=\\\"invoiceeDescriptionCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"label {\\n  font-family: 'Khula', sans-serif !important;\\n  font-weight: bold;\\n  font-size: 20px;\\n  line-height: 22px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { nameof, UtilService } from '../../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-invoicee-options',\r\n    templateUrl: './cost-invoicee-options.component.html',\r\n    styleUrls: ['./cost-invoicee-options.component.scss'],\r\n})\r\nexport class CostInvoiceeOptionsComponent extends BaseFormComponent implements OnInit {\r\n    invoiceeCtrl = new AtlasFormControl('invoiceeCtrl');\r\n    invoiceeDescriptionCtrl = new AtlasFormControl('invoiceeDescriptionCtrl');\r\n    masterdata: MasterData;\r\n    @Output() readonly userSupplier = new EventEmitter<string>();\r\n    supplierSelected: string;\r\n    filteredCounterPartyList: Counterparty[];\r\n    supplierDescription: Counterparty;\r\n    @Output() readonly supplier = new EventEmitter<any>();\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected masterdataService: MasterdataService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.invoiceeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.counterparties,\r\n                ['counterpartyCode', 'description'],\r\n            );\r\n        });\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceeCtrl: this.invoiceeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    onSupplierSelected(supplier) {\r\n        if (!supplier.isLineSelected) {\r\n            this.clearValidators();\r\n        } else if (!supplier.supplierSelected) {\r\n            this.setValidators();\r\n        } else {\r\n            this.invoiceeCtrl.patchValue(supplier.supplierSelected);\r\n            this.supplierDescription = this.filteredCounterPartyList.find((counterparty) => counterparty.counterpartyCode === supplier.supplierSelected);\r\n            if (this.supplierDescription) {\r\n                this.invoiceeDescriptionCtrl.patchValue(this.supplierDescription.description);\r\n            }\r\n\r\n            if (this.masterdata.counterparties) {\r\n                const invoicee = this.masterdata.counterparties.find(\r\n                    (counterParty) => counterParty.counterpartyCode === supplier.supplierSelected);\r\n                if (invoicee) {\r\n                    this.userSupplier.emit(invoicee.counterpartyCode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onSelectionChange(value: any) {\r\n        const selectedCounterparty = this.masterdata.counterparties.find(\r\n            (counterparty) => counterparty.counterpartyCode === value,\r\n        );\r\n        if (selectedCounterparty) {\r\n            const cpDescription = selectedCounterparty.description;\r\n            this.invoiceeDescriptionCtrl.patchValue(cpDescription);\r\n        }\r\n        this.userSupplier.emit(value);\r\n\r\n    }\r\n\r\n    setValidators() {\r\n        this.invoiceeCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.counterparties,\r\n                    nameof<Counterparty>('counterpartyCode'),\r\n                ),\r\n            ]));\r\n        this.invoiceeCtrl.setValidators(Validators.compose([Validators.required]));\r\n        this.invoiceeCtrl.updateValueAndValidity();\r\n    }\r\n    clearValidators() {\r\n        this.invoiceeCtrl.patchValue('');\r\n        this.invoiceeDescriptionCtrl.patchValue('');\r\n        this.invoiceeCtrl.clearValidators();\r\n        this.invoiceeCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceeOption = entity;\r\n        invoiceeOption.counterpartyCode = this.invoiceeCtrl.value;\r\n        return invoiceeOption;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"card-header-luke\\\">\\r\\n    <mat-card-title>Invoice Selection</mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"none center\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"33%\\\"\\r\\n                     fxFlex.xs=\\\"33%\\\"\\r\\n                     fxFlex.sm=\\\"33%\\\">\\r\\n                    <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Invoice type\\\"\\r\\n                               [matTooltip]=\\\"'Invoice Type'\\\"\\r\\n                               [formControl]=\\\"invoiceTypeSelectedCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".card-header-luke {\\n  min-height: auto; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-selection',\r\n    templateUrl: './invoice-selection.component.html',\r\n    styleUrls: ['./invoice-selection.component.scss'],\r\n})\r\nexport class InvoiceSelectionComponent extends BaseFormComponent implements OnInit {\r\n    invoiceTypeSelectedCtrl = new AtlasFormControl('invoiceCostTypeSelected');\r\n    costInvoiceTypeName: string = 'Cost';\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getData();\r\n    }\r\n    getData() {\r\n        this.invoiceTypeSelectedCtrl.patchValue(this.costInvoiceTypeName);\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceTypeSelectedCtrl: this.invoiceTypeSelectedCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceType = entity;\r\n        invoiceType.invoiceType = this.invoiceTypeSelectedCtrl.value;\r\n        return invoiceType;\r\n    }\r\n}\r\n","module.exports = \"<div>\\r\\n    <atlas-invoice-selection #invoiceSelectionComponent>\\r\\n    </atlas-invoice-selection>\\r\\n    <atlas-contract-search #contractSearchComponent\\r\\n                           (costContractsSelected)=\\\"onCostContractsSelected($event)\\\"\\r\\n                           (supplier)=\\\"onSupplierSelected($event)\\\">\\r\\n    </atlas-contract-search>\\r\\n    <atlas-cost-invoicee-options #costInvoiceeOptionsComponent\\r\\n                                 (userSupplier)=\\\"onUserSupplierValueChanged($event)\\\">\\r\\n    </atlas-cost-invoicee-options>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild, HostListener } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ContractSearchComponent } from '../cost-selection/components/contract-search/contract-search.component';\r\nimport { InvoiceSelectionComponent } from '../cost-selection/components/invoice-selection/invoice-selection.component';\r\nimport { CostInvoiceeOptionsComponent } from './components/cost-invoicee-options/cost-invoicee-options.component';\r\n@Component({\r\n    selector: 'atlas-cost-selection',\r\n    templateUrl: './cost-selection.component.html',\r\n    styleUrls: ['./cost-selection.component.scss'],\r\n})\r\nexport class CostSelectionComponent extends BaseFormComponent implements OnInit {\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n    @ViewChild('invoiceSelectionComponent') invoiceSelectionComponent: InvoiceSelectionComponent;\r\n    @ViewChild('contractSearchComponent') contractSearchComponent: ContractSearchComponent;\r\n    @ViewChild('costInvoiceeOptionsComponent') costInvoiceeOptionsComponent: CostInvoiceeOptionsComponent;\r\n    @Output() readonly costContractsSelected = new EventEmitter<boolean>();\r\n    @Output() readonly userSupplier = new EventEmitter<string>();\r\n\r\n    invoiceSelectionFormGroup: FormGroup;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSelectionFormGroup = this.formBuilder.group({\r\n            invoiceSelectionComponent: this.invoiceSelectionComponent.getFormGroup(),\r\n            contractSearchComponent: this.contractSearchComponent.getFormGroup(),\r\n            costInvoiceeOptionsComponent: this.costInvoiceeOptionsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.invoiceSelectionComponent,\r\n            this.contractSearchComponent,\r\n            this.costInvoiceeOptionsComponent,\r\n        );\r\n    }\r\n\r\n    onSupplierSelected(supplier) {\r\n        this.costInvoiceeOptionsComponent.onSupplierSelected(supplier);\r\n    }\r\n\r\n    onCostContractsSelected(costContractsSelected: boolean) {\r\n        this.costContractsSelected.emit(costContractsSelected);\r\n    }\r\n\r\n    populateEntity(model: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n    onUserSupplierValueChanged(userSupplier) {\r\n        this.userSupplier.emit(userSupplier);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        Invoice Document\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"2%\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-select placeholder=\\\"External/InHouse\\\"\\r\\n                            [formControl]=\\\"invoiceExtInHouseCtrl\\\"\\r\\n                            matTooltip=\\\"External/InHouse\\\">\\r\\n                    <mat-option *ngFor=\\\"let info of invoiceSourceType\\\"\\r\\n                                [value]=\\\"info.viewValue\\\">\\r\\n                        {{info.viewValue}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"External Invoice Reference\\\"\\r\\n                       [formControl]=\\\"invoiceExtRefCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('required')\\\">\\r\\n                    Reference is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('maxlength')\\\">\\r\\n                    Must be less than 25 characters\\r\\n                </mat-error>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"!isUnique\\\">\\r\\n                    Reference Number already used\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <mat-form-field fxFlex=\\\"32%\\\">\\r\\n                <mat-select placeholder=\\\"Document Template\\\"\\r\\n                            [formControl]=\\\"invoiceTemplatesCtrl\\\"\\r\\n                            (selectionChange)=\\\"onInvoiceTemplateSelected()\\\">\\r\\n                    <mat-option></mat-option>\\r\\n                    <mat-option *ngFor=\\\"let template of filteredTemplates\\\"\\r\\n                                [value]=\\\"template\\\">\\r\\n                        {{template.name}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n                <mat-error *ngIf=\\\"invoiceTemplatesCtrl.hasError('required')\\\">\\r\\n                    Template is required\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <mat-form-field fxFlex=\\\"32%\\\">\\r\\n                <mat-select placeholder=\\\"Doc Type\\\"\\r\\n                            [formControl]=\\\"docTypeCtrl\\\">\\r\\n                    <mat-option *ngFor=\\\"let info of transactionDocumentType\\\"\\r\\n                                [value]=\\\"info.value\\\">\\r\\n                        {{info.viewValue}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { PhysicalDocumentTemplate } from '../../../../../../../shared/entities/document-template.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { DocumentTypes } from '../../../../../../../shared/enums/document-type.enum';\r\nimport { InvoiceSourceType } from '../../../../../../../shared/enums/invoice-source-type.enum';\r\nimport { TransactionDocumentTypes } from '../../../../../../../shared/enums/transaction-document-type.enum';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../../../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { DocumentTemplateBaseComponent } from '../../../../../invoicing-base-form/document-template-base/document-template-base.component';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-document-template',\r\n    templateUrl: './cost-document-template.component.html',\r\n    styleUrls: ['./cost-document-template.component.scss'],\r\n})\r\nexport class CostDocumentTemplateComponent extends DocumentTemplateBaseComponent implements OnInit {\r\n    docTypeCtrl = new AtlasFormControl('DocType');\r\n    transactionDocumentType: string[];\r\n    costDirections: CostDirections;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected documentService: DocumentService,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(executionService, formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.documentService.\r\n            getTemplates(DocumentTypes.InvoiceCostsInvoice)\r\n            .subscribe((templates) => {\r\n                this.filteredTemplates = templates.value;\r\n                this.invoiceTemplatesCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredTemplates =\r\n                        this.utilService.filterListforAutocomplete(input,\r\n                            templates.value,\r\n                            ['documentTemplateId', 'name']);\r\n\r\n                });\r\n\r\n                this.setValidators();\r\n                this.onExternalInHouseSelected();\r\n                this.bindConfiguration();\r\n\r\n                if ((this.filteredTemplates.length === 1) &&\r\n                    (this.invoiceExtInHouseCtrl.value === (InvoiceSourceType[InvoiceSourceType.Inhouse]))) {\r\n                    this.invoiceTemplatesCtrl.patchValue(this.filteredTemplates[0]);\r\n                    this.onInvoiceTemplateSelected();\r\n                }\r\n            }));\r\n        this.onChanges();\r\n        this.invoiceSourceType = this.getInvoiceSourceTypeEnum();\r\n        this.transactionDocumentType = this.getTransactionDocumentTypeEnum();\r\n        this.getData();\r\n        this.docTypeCtrl.patchValue(TransactionDocumentTypes['PI/SI']);\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceExtInHouseCtrl: this.invoiceExtInHouseCtrl,\r\n            invoiceExtRefCtrl: this.invoiceExtRefCtrl,\r\n            documentTemplateCtrl: this.invoiceTemplatesCtrl,\r\n            docTypeCtrl: this.docTypeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    getData() {\r\n        if (this.costDirections === CostDirections.Payable) {\r\n            this.invoiceExtInHouseCtrl.patchValue(InvoiceSourceType[InvoiceSourceType.External]);\r\n        } else if (this.costDirections === CostDirections.Receivable) {\r\n            this.invoiceExtInHouseCtrl.patchValue(InvoiceSourceType[InvoiceSourceType.Inhouse]);\r\n        }\r\n    }\r\n\r\n    getTransactionDocumentTypeEnum(): string[] {\r\n        const transactionDocumentTypeEnum = [];\r\n        const objectEnum = Object.keys(TransactionDocumentTypes);\r\n        const values = objectEnum.slice(0, objectEnum.length / 2);\r\n        const keys = objectEnum.slice(objectEnum.length / 2);\r\n\r\n        for (let i = 0; i < objectEnum.length / 2; i++) {\r\n            if (Number(values[i]) !== TransactionDocumentTypes.Original) {\r\n                transactionDocumentTypeEnum.push({ viewValue: keys[i], value: Number(values[i]) });\r\n            }\r\n        }\r\n        return transactionDocumentTypeEnum;\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceDocumentTemplate = entity;\r\n        invoiceDocumentTemplate.template = this.invoiceTemplatesCtrl.value ?\r\n            (this.invoiceTemplatesCtrl.value as PhysicalDocumentTemplate).path : null;\r\n        invoiceDocumentTemplate.externalInhouse = this.invoiceExtInHouseCtrl.value;\r\n        invoiceDocumentTemplate.externalInvoiceRef = this.invoiceExtRefCtrl.value;\r\n        invoiceDocumentTemplate.documentType = this.docTypeCtrl.value;\r\n        return invoiceDocumentTemplate;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        Payments\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"2%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select placeholder=\\\"Payment Terms\\\"\\r\\n                            [formControl]=\\\"costPaymentTermsCtrl\\\"\\r\\n                            matTooltip=\\\"Payment Terms\\\">\\r\\n                    <mat-option *ngFor=\\\"let terms of paymentTermsOption\\\"\\r\\n                                [value]=\\\"terms.paymentTermCode\\\">{{terms.paymentTermCode}}</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                            class=\\\"mandatory\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Due Date\\\"\\r\\n                       [formControl]=\\\"costDueDateCtrl\\\"\\r\\n                       [matDatepicker]=\\\"costDueDatePicker\\\"\\r\\n                       matTooltip=\\\"Due Date\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onInvoiceDueDateSelected()'>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"costDueDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #costDueDatePicker></mat-datepicker>\\r\\n                <mat-hint *ngIf=\\\"!costDueDateCtrl.hasError('isDateBeforeValid' || 'required') && !costDueDateCtrl.disabled\\\"\\r\\n                          class=\\\"invoice-creation-required-fields\\\">Required*</mat-hint>\\r\\n                <mat-error *ngIf=\\\"costDueDateCtrl.hasError('required')\\\">\\r\\n                    Required*\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"costDueDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                    Value Date should be equal to or after the invoice date\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { PaymentTerm } from '../../../../../../../shared/entities/payment-term.entity';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-cost-payments',\r\n    templateUrl: './cost-payments.component.html',\r\n    styleUrls: ['./cost-payments.component.scss'],\r\n})\r\nexport class CostPaymentsComponent extends BaseFormComponent implements OnInit {\r\n    costPaymentTermsCtrl = new AtlasFormControl('costPaymentTerms');\r\n    costDueDateCtrl = new AtlasFormControl('costDueDate');\r\n    invoiceDateChanged: Date;\r\n    masterdata: MasterData = new MasterData();\r\n    paymentTermsOption: PaymentTerm[];\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.paymentTermsOption = this.masterdata.paymentTerms;\r\n        this.onChanges();\r\n\r\n        this.onInvoiceDueDateSelected();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            costPaymentTermsCtrl: this.costPaymentTermsCtrl,\r\n            costDueDatePickerCtrl: this.costDueDateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    onInvoiceDueDateSelected() {\r\n        this.costDueDateCtrl.clearValidators();\r\n        this.costDueDateCtrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.costDueDateCtrl.value, moment(this.invoiceDateChanged)), Validators.required]));\r\n        this.costDueDateCtrl.updateValueAndValidity();\r\n    }\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const payments = entity;\r\n        payments.paymentTerms = this.costPaymentTermsCtrl.value;\r\n        payments.dueDate = this.costDueDateCtrl.value;\r\n        return payments;\r\n    }\r\n\r\n    getPaymentTermsCreditDays(paymentTerm: string): number {\r\n        if (this.masterdata.paymentTerms) {\r\n            const selectedPaymentTerms: PaymentTerm = this.masterdata.paymentTerms.find(\r\n                (payTerms) => payTerms.paymentTermCode === paymentTerm,\r\n            );\r\n            return selectedPaymentTerms.creditDays;\r\n        }\r\n    }\r\n    onChanges(): void {\r\n        this.costPaymentTermsCtrl.valueChanges.subscribe((input) => {\r\n            this.costDueDateCtrl.patchValue(this.companyManager.getCurrentCompanyDate().add('days', this.getPaymentTermsCreditDays(input)));\r\n        });\r\n\r\n    }\r\n    setPaymentTerms(paymentTerm: string) {\r\n        this.costPaymentTermsCtrl.patchValue(paymentTerm);\r\n    }\r\n    setPaymentFieldsForSummary(model) {\r\n        this.costPaymentTermsCtrl.patchValue(model.paymentTerms);\r\n        this.costDueDateCtrl.patchValue(model.dueDate);\r\n    }\r\n\r\n    setValuesForSummaryFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        this.costPaymentTermsCtrl.patchValue(summaryRecord.paymentTermsCode);\r\n        this.costDueDateCtrl.patchValue(summaryRecord.dueDate);\r\n    }\r\n\r\n    setinvoiceDateSelected(invoiceDate: Date) {\r\n        this.invoiceDateChanged = invoiceDate;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <h2 class=\\\"atlas-grid-card-title\\\">Selected Cost</h2>\\r\\n    <mat-card-content>\\r\\n        <div [hidden]=\\\"isAddDeleteButtonInvisible\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             class=\\\"add-line-container\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <h6>Add new lines:</h6>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\"\\r\\n                 fxFlex=\\\"2\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [formControl]=\\\"addNewLineCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onAddRowButtonClicked(addNewLineCtrl.value)\\\">PROCEED</button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\" table-title\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end\\\"\\r\\n                 fxLayoutGap=\\\"2%\\\">\\r\\n                <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                    <mat-select placeholder=\\\"Cost VAT Code\\\"\\r\\n                                [formControl]=\\\"costVatCodeCtrl\\\"\\r\\n                                matTooltip=\\\"Cost VAT Code\\\"\\r\\n                                (selectionChange)='onCostVatCodeSelected()'>\\r\\n                        <mat-option *ngFor=\\\"let code of costVatCodeOptions\\\"\\r\\n                                    [value]=\\\"code.vatCode\\\">\\r\\n                            {{code.vatCode}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"selectedCostGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"selectedCostGridRows\\\"\\r\\n                             [columnDefs]=\\\"selectedCostGridColumns\\\"\\r\\n                             [gridOptions]=\\\"selectedCostGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [enableFilter]=\\\"true\\\"\\r\\n                             [rowSelection]=\\\"rowSelection\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [groupUseEntireRow]=\\\"false\\\"\\r\\n                             [suppressMakeColumnVisibleAfterUnGroup]=\\\"true\\\"\\r\\n                             [singleClickEdit]=true>\\r\\n                <!-- [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\" -->\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n                Total Cost:\\r\\n                <span class=\\\"total-figure-value\\\">\\r\\n                    {{this.totalCostDirectionSign}}{{formatQuantityAndTotal(this.total)}} {{this.currencyCodeSelected}}\\r\\n                </span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".margin-buttons {\\n  margin-bottom: 1%; }\\n  .margin-buttons button {\\n    margin-top: 0; }\\n  .padding-content {\\n  padding: 20px; }\\n  .atlas-grid-card-title {\\n  margin-bottom: 0; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { map } from 'rxjs/operators';\r\nimport { AgContextualMenuComponent } from '../../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { InvoiceSetupResult } from '../../../../../../../shared/dtos/invoice-setup-result';\r\nimport { AgContextualMenuAction } from '../../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { InvoiceLineRecord } from '../../../../../../../shared/entities/invoice-line-record.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-cost-selected-cost',\r\n    templateUrl: './invoice-cost-selected-cost.component.html',\r\n    styleUrls: ['./invoice-cost-selected-cost.component.scss'],\r\n})\r\nexport class InvoiceCostSelectedCostComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<any>();\r\n    costVatCodeCtrl = new AtlasFormControl('CostVatCode');\r\n    @Input() invoiceSetupData: InvoiceSetupResult;\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n\r\n    company: string;\r\n    costDirectionPay: string = 'Pay';\r\n    costDirections: CostDirection[];\r\n    selectedCostGridOptions: agGrid.GridOptions = {};\r\n    selectedCostGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    selectedCostGridRows: ContractsToCostInvoice[];\r\n    invoiceType: number;\r\n    componentId: string = 'selectedCost';\r\n    isAddRow: boolean;\r\n    rowSelection: string;\r\n    masterData: MasterData;\r\n    currencyCodeSelected: string;\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n    };\r\n    gridContext = {\r\n        gridEditable: false,\r\n    };\r\n    costVatCodeOptions: Vat[];\r\n    taxRateCalculated: number = 0;\r\n    vatRate: number[];\r\n\r\n    total: number = 0;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    vatCodeAvailable: Vat[];\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    defaultVatCode: string;\r\n    isAddDeleteButtonInvisible: boolean = false;\r\n    costNarrativePrefix: string = 'ADD ';\r\n    totalCostDirectionSign: string;\r\n    addNewLineCtrl = new AtlasFormControl('addNewLineCtrl');\r\n    invoiceCostGridContextualMenuActions: AgContextualMenuAction[];\r\n    invoiceCostMenuActions: { [key: string]: string } = {\r\n        deleteinvoiceCost: 'delete',\r\n    };\r\n    inPNL: boolean = false;\r\n    noAction: boolean = false;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        protected snackbar: SnackbarService,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n        this.gridContext.gridEditable = false;\r\n        this.costVatCodeOptions = this.masterData.vats;\r\n        this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n        this.initializeGridColumns();\r\n        this.addNewLineCtrl.patchValue(1);\r\n        this.init();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            costVatCodeCtrl: this.costVatCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.selectedCostGridColumns;\r\n        this.selectedCostGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.autoSizeGridHeader();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    autoSizeGridHeader() {\r\n        const allColumnIds = [];\r\n        this.selectedCostGridColumns.forEach((columnDefs) => {\r\n            allColumnIds.push(columnDefs.field);\r\n        });\r\n        this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.selectedCostGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n                width: 250,\r\n                minWidth: 250,\r\n                maxWidth: 250,\r\n                suppressSizeToFit: true,\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: this.masterData,\r\n                    options: this.masterData.costTypes.filter((cost) => cost.isATradeCost === true)\r\n                        .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                    valueProperty: 'costTypeCode',\r\n                    codeProperty: 'costTypeCode',\r\n                    displayProperty: 'name',\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: this.onCostTypeChange.bind(this),\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'invoicePercent',\r\n                colId: 'invoicePercent',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n                onCellValueChanged: this.onCostDirectionChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n                editable: true,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.masterData.vats.map((vat) => vat.vatCode),\r\n                    displayPropertyName: 'vatCode',\r\n                    valuePropertyName: 'vatCode',\r\n                    displayFormat: 'vatCode',\r\n                    context: this.masterData,\r\n                },\r\n                onCellValueChanged: this.onVatCodeChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCellForCostAmount.bind(this),\r\n                valueSetter: this.setCostAmountToInvoice,\r\n                onCellValueChanged: this.onCostAmountToInvoiceChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                valueSetter: this.setCostNarrative.bind(this),\r\n                cellStyle: this.narrativeMaxLength.bind(this),\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.invoiceCostGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                hide: this.isAddDeleteButtonInvisible === true,\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n        this.rowSelection = 'multiple';\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        if (!params.data.contractReference) {\r\n            return params.context.gridEditable;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    setCostAmountToInvoice(params): boolean {\r\n        params.data.costAmountToInvoice = (params.newValue <= 0) ? 0 : params.newValue;\r\n        return true;\r\n    }\r\n\r\n    setCostNarrative(params): boolean {\r\n        if (params.newValue.length <= 0) {\r\n            params.data.narrative = this.costNarrativePrefix;\r\n        } else {\r\n            const narrativeText = params.newValue as string;\r\n            params.data.narrative = (narrativeText).startsWith('ADD') ? params.newValue :\r\n                this.costNarrativePrefix.concat(params.newValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onCostDirectionChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onCostAmountToInvoiceChange(params) {\r\n        if (params.data.costDirection) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n    onCostTypeChange(params) {\r\n        const filteredCostType = params.colDef.cellRendererParams.context.costTypes.find(\r\n            (e) => e.costTypeCode === params.data.costTypeCode);\r\n        if (filteredCostType) {\r\n            this.inPNL = filteredCostType.inPNL;\r\n            this.noAction = filteredCostType.noAction;\r\n        }\r\n\r\n    }\r\n\r\n    contractToBeSelected(costContracts: ContractsToCostInvoice[]) {\r\n        if (costContracts.length > 0) {\r\n            this.initializeGridColumns();\r\n            if (this.defaultVatCode) {\r\n                costContracts.map((costContract) => costContract.vatCode = this.defaultVatCode);\r\n            }\r\n            this.selectedCostGridRows = costContracts;\r\n            this.selectedCostGridOptions.pagination = (costContracts.length > 10) ? true : false;\r\n            this.currencyCodeSelected = this.selectedCostGridRows[0].currencyCode;\r\n            this.calculateTotalAmountAndGetVatCode(costContracts);\r\n            if (this.masterData.vats.length > 0) {\r\n                this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n            }\r\n        } else {\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    onAddRowButtonClicked(numberOfLines: number) {\r\n        this.isAddRow = true;\r\n        this.gridContext.gridEditable = true;\r\n        this.gridApi.onFilterChanged();\r\n        for (let count = 1; count <= numberOfLines; count++) {\r\n            const newItem = this.createNewCostRowData();\r\n            this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.invoiceCostGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.invoiceCostMenuActions.deleteInvoiceCost,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, contractsToCostInvoices: ContractsToCostInvoice) {\r\n        switch (action) {\r\n            case this.invoiceCostMenuActions.deleteInvoiceCost:\r\n                this.onDeleteSelectedButtonClicked(contractsToCostInvoices);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n    onDeleteSelectedButtonClicked(contractsToCostInvoices: ContractsToCostInvoice) {\r\n        if (!contractsToCostInvoices.contractReference) {\r\n            this.total = 0;\r\n            this.gridApi.updateRowData({ remove: [contractsToCostInvoices] });\r\n            const index = this.selectedCostGridRows.indexOf(contractsToCostInvoices, 0);\r\n            if (index > -1) {\r\n                this.selectedCostGridRows.splice(index, 1);\r\n\r\n            }\r\n            this.calculationOfCRAndDR();\r\n            this.calculateTotalOnUpdateGrid();\r\n        } else { this.snackbar.informationSnackBar('You cannot delete a cost which is not added in Invoice Working Page'); }\r\n    }\r\n\r\n    calculationOfCRAndDR() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n            }\r\n        });\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    updateTotals(totalCR, totalDR) {\r\n        if (totalCR > totalDR) {\r\n            this.total = totalCR - totalDR;\r\n            this.costDirectionDisplay = this.credit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n            this.totalCostDirection = CostDirections[CostDirections.Payable];\r\n        } else {\r\n            this.total = totalDR - totalCR;\r\n            this.costDirectionDisplay = this.debit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Receivable];\r\n            this.totalCostDirection = CostDirections[CostDirections.Receivable];\r\n        }\r\n    }\r\n\r\n    totalCostAndVatDetails() {\r\n        this.totalCostAndVatCode.emit({\r\n            rate: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            costDirection: this.totalCostDirection,\r\n            currencyCode: this.currencyCodeSelected,\r\n            vatAvailable: this.vatCodeAvailable,\r\n        });\r\n    }\r\n\r\n    createNewCostRowData() {\r\n        const newData = new ContractsToCostInvoice();\r\n        newData.invoicePercent = 100;\r\n        newData.currencyCode = this.currencyCodeSelected;\r\n        newData.narrative = this.costNarrativePrefix;\r\n        return newData;\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.defaultVatCode = defaultVatCode;\r\n    }\r\n\r\n    setTaxDataForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.selectedCostGridRows = this.getCostContractsForSummary(costInvoiceRecord);\r\n        this.initializeGridColumns();\r\n        this.calculateTotalForSummary(costInvoiceRecord);\r\n    }\r\n\r\n    getCostContractsForSummary(costInvoiceRecord: CostInvoiceRecord): ContractsToCostInvoice[] {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        if (costInvoiceRecord) {\r\n            const contract = new ContractsToCostInvoice();\r\n            contract.vatCode = costInvoiceRecord.vatCode;\r\n            contract.principalCommodity = costInvoiceRecord.principalCommodity;\r\n            contract.rate = costInvoiceRecord.price;\r\n            contract.quantity = costInvoiceRecord.quantity;\r\n            contract.costAmountToInvoice = costInvoiceRecord.lineAmount;\r\n            contract.invoicePercent = costInvoiceRecord.totalInvoiceValue;\r\n            contracts.push(contract);\r\n        }\r\n        return contracts;\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n            return selectedCostDirection.costDirectionId;\r\n        }\r\n    }\r\n\r\n    calculateTotalAmountAndGetVatCode(contracts: ContractsToCostInvoice[]) {\r\n        this.total = 0;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        let costDirectionId: number;\r\n        this.vatCodeAvailable = [];\r\n        contracts.forEach(\r\n            (contract) => {\r\n                let vatCode: Vat[];\r\n                // creating copy of selected vatCode, so the calculations are not impacting the original data\r\n                vatCode = this.masterData.vats\r\n                    .filter((vat) => (vat.vatCode === contract.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n                        return code.rate = code.rate / 100 * contract.costAmountToInvoice;\r\n                    });\r\n                    if (this.vatCodeAvailable.length === 0) {\r\n                        this.vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        this.vatCodeAvailable.map((code) =>\r\n                            (code.vatCode === vatCode[0].vatCode) ? (code.rate = code.rate + vatCode[0].rate) :\r\n                                this.vatCodeAvailable.push(vatCode[0]));\r\n                    }\r\n                }\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = Number(totalCR) + Number(contract.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = Number(totalDR) + Number(contract.costAmountToInvoice);\r\n                }\r\n            },\r\n        );\r\n        if (contracts.length > 0) {\r\n            this.currencyCode = contracts[0].currencyCode;\r\n        }\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    calculateTotalOnUpdateGrid() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        const vatMasterData = this.masterData.vats;\r\n        let vatCodeAvailable = [];\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                let vatCode: Vat[] = [];\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n                vatCode = vatMasterData\r\n                    .filter((vat) => (vat.vatCode === rowNode.data.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n\r\n                        return code.rate = code.rate / 100 * rowNode.data.costAmountToInvoice;\r\n                    });\r\n                    if (vatCodeAvailable.length === 0) {\r\n                        if (rowNode.data.costDirection === costDirectionPay) {\r\n                            vatCode[0].rate = -(vatCode[0].rate);\r\n                        }\r\n                        vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        let isAvailable: boolean = false;\r\n                        vatCodeAvailable.map((code) => {\r\n                            if (code.vatCode === vatCode[0].vatCode) {\r\n                                if (vatCodeAvailable.filter((selectedVatCode) => selectedVatCode.vatCode === vatCode[0].vatCode)) {\r\n                                    if (rowNode.data.costDirection === costDirectionPay) {\r\n                                        vatCode[0].rate = -(vatCode[0].rate);\r\n                                    }\r\n                                    code.rate = code.rate + vatCode[0].rate;\r\n                                    isAvailable = true;\r\n                                }\r\n                            }\r\n                        });\r\n                        if (!isAvailable) {\r\n                            vatCodeAvailable = vatCodeAvailable.filter((code) => code.vatCode !== vatCode[0].vatCode);\r\n                            if (rowNode.data.costDirection === costDirectionPay) {\r\n                                vatCode[0].rate = -(vatCode[0].rate);\r\n                            }\r\n                            vatCodeAvailable.push(vatCode[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.vatCodeAvailable = vatCodeAvailable.map((x) => ({ ...x }));\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n\r\n    onVatCodeChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (params.data && params.context.gridEditable) {\r\n            if (!params.value || params.value === '') {\r\n                return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    requiredCellForCostAmount(params) {\r\n        if (params.data && params.context.gridEditable) {\r\n            if (!params.value || params.value === '') {\r\n                return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        params.value = (this.decimalFormatter(\r\n            params.value,\r\n            this.decimalOptionValue,\r\n            this.formatType));\r\n        return params.value;\r\n    }\r\n\r\n    decimalFormatter(input, decimaloption: number, format: string) {\r\n        const formattedInput = new Intl.NumberFormat(format, { minimumFractionDigits: 2, maximumFractionDigits: decimaloption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    narrativeMaxLength(params) {\r\n        if (params.data && params.value) {\r\n            if (params.value.length > 30) {\r\n                this.narrativeLength.emit(true);\r\n                this.snackbar.informationSnackBar(\r\n                    'Narrative length should be less than 30',\r\n                );\r\n                return { color: 'red' };\r\n            } else {\r\n                this.narrativeLength.emit(false);\r\n                return { color: 'black' };\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        if (this.isAddRow) {\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (!(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.vatCode\r\n                    && rowData.data.costAmountToInvoice)) {\r\n                    isValid = false;\r\n                }\r\n            });\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    onCostVatCodeSelected() {\r\n        const vat = this.costVatCodeCtrl.value;\r\n        const changedVatCode = [];\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                const data = rowNode.data;\r\n                data.vatCode = vat;\r\n                changedVatCode.push(data);\r\n            }\r\n        });\r\n        this.gridApi.updateRowData({ update: changedVatCode });\r\n        this.calculateTotalOnUpdateGrid();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const selectedInvoiceCosts = entity;\r\n        selectedInvoiceCosts.currency = this.currencyCodeSelected;\r\n        selectedInvoiceCosts.totalInvoiceValue = this.total;\r\n        selectedInvoiceCosts.invoiceLines = this.getInvoiceCostLines();\r\n        selectedInvoiceCosts.costDirection = CostDirections[this.totalCostDirection];\r\n        return selectedInvoiceCosts;\r\n    }\r\n\r\n    getAllInvoiceCostLines(): ContractsToCostInvoice[] {\r\n        const selectedCostRows: ContractsToCostInvoice[] = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costInvoiceline = new ContractsToCostInvoice();\r\n                costInvoiceline.costId = rowData.data.costId;\r\n                costInvoiceline.sectionId = rowData.data.sectionId;\r\n                costInvoiceline.costAmountToInvoice = rowData.data.costAmountToInvoice;\r\n                costInvoiceline.quantity = rowData.data.quantity;\r\n                costInvoiceline.costTypeCode = rowData.data.costTypeCode;\r\n                costInvoiceline.currencyCode = rowData.data.currencyCode;\r\n                costInvoiceline.invoicePercent = rowData.data.invoicePercent;\r\n                costInvoiceline.vatCode = rowData.data.vatCode;\r\n                costInvoiceline.narrative = rowData.data.narrative;\r\n                costInvoiceline.rateTypeCode = rowData.data.rateTypeCode;\r\n                costInvoiceline.costDirection = rowData.data.costDirection;\r\n                const vatCode = this.masterData.vats.find((vat) => (vat.vatCode === rowData.data.vatCode));\r\n                if (vatCode) { costInvoiceline.vatAmount = vatCode.rate / 100 * rowData.data.costAmountToInvoice; }\r\n                selectedCostRows.push(costInvoiceline);\r\n            }\r\n        });\r\n\r\n        return selectedCostRows;\r\n    }\r\n\r\n    getInvoiceCostLines(): InvoiceLineRecord[] {\r\n        const invoiceLines: InvoiceLineRecord[] = [];\r\n        this.selectedCostGridRows = this.getAllInvoiceCostLines();\r\n        this.selectedCostGridRows.map((data, index) => {\r\n            const invoiceLine = new InvoiceLineRecord();\r\n            invoiceLine.costID = data.costId;\r\n            invoiceLine.sectionID = data.sectionId;\r\n            invoiceLine.lineAmount = data.costAmountToInvoice;\r\n            invoiceLine.quantity = data.quantity;\r\n            invoiceLine.costTypeCode = data.costTypeCode;\r\n            invoiceLine.currencyCode = data.currencyCode;\r\n            invoiceLine.vatCode = data.vatCode;\r\n            invoiceLine.invoicePercent = data.invoicePercent;\r\n            invoiceLine.narrative = data.narrative;\r\n            invoiceLine.inPL = this.inPNL;\r\n            invoiceLine.noAct = this.noAction;\r\n            const vatCode = this.masterData.vats.find((vat) => (vat.vatCode === data.vatCode));\r\n            if (vatCode) { invoiceLine.vatAmount = vatCode.rate / 100 * data.costAmountToInvoice; }\r\n            invoiceLine.rateTypeId = (!data.costId) ? 1 : RateTypes[data.rateTypeCode];\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === data.costDirection);\r\n            invoiceLine.costDirectionId = selectedCostDirection.costDirectionId;\r\n\r\n            invoiceLines.push(invoiceLine);\r\n        });\r\n        return invoiceLines;\r\n    }\r\n\r\n    /* Code for home grid to summary redirection */\r\n    contractToBeSelectedFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord) {\r\n            this.selectedCostGridRows = this.getCostContractsForSummaryFromGrid(summaryRecord.summaryLines, summaryRecord.currency);\r\n            this.initializeGridColumnsFromSummary();\r\n            this.calculateTotalForSummaryFromGrid(summaryRecord);\r\n        }\r\n    }\r\n\r\n    calculateTotalForSummaryFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        this.total = 0;\r\n        const contracts = summaryRecord.summaryLines;\r\n        let costDirectionId: number;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.lineAmount;\r\n                } else {\r\n                    totalDR = totalDR + contract.lineAmount;\r\n                }\r\n            },\r\n        );\r\n        if (contracts.length > 0) {\r\n            this.currencyCodeSelected = summaryRecord.currency;\r\n        }\r\n        this.updateTotals(totalCR, totalDR);\r\n    }\r\n\r\n    initializeGridColumnsFromSummary() {\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: '% Invoiced',\r\n                field: 'invoicePercent',\r\n                colId: 'invoicePercent',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getCostContractsForSummaryFromGrid(summaryLines: InvoiceSummaryLineRecord[], currency: string) {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.costId > 0) {\r\n                const contract = new ContractsToCostInvoice();\r\n                contract.costTypeCode = record.costTypeCode;\r\n                contract.principalCommodity = record.principalCommodity;\r\n                contract.rate = record.price;\r\n                contract.currencyCode = currency;\r\n                contract.quantity = record.quantity.toString();\r\n                contract.weightCode = record.weightCode;\r\n                contract.costAmountToInvoice = record.lineAmount;\r\n                contract.costDirection = record.costDirection;\r\n                contract.vatCode = record.vatCode;\r\n                contract.invoicePercent = record.invoicePercent;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>Invoice Selection</mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"49\\\"\\r\\n                            class=\\\"margin-bottom\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"costInvoiceDatePicker\\\"\\r\\n                       placeholder=\\\"Invoice date\\\"\\r\\n                       [matTooltip]=\\\"'Invoice date'\\\"\\r\\n                       [formControl]='costInvoiceDateCtrl'\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onCostInvoiceDateSelected()'>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"isDateAfterValid\\\">Invoice Date is in Future</mat-hint>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"costInvoiceDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #costInvoiceDatePicker></mat-datepicker>\\r\\n                <mat-error *ngIf=\\\"costInvoiceDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                    Invoice Date can be equal to or after the contract date\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"70%\\\"\\r\\n                            class=\\\"mat-read-only-field\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Counterparty\\\"\\r\\n                       [matTooltip]=\\\"'Counterparty'\\\"\\r\\n                       [formControl]=\\\"counterpartyCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (userSupplier)=\\\"onUserSupplierValueChanged($event)\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-form-field fxFlex=\\\"49\\\"\\r\\n                            class=\\\"mat-read-only-field\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Invoice Type\\\"\\r\\n                       [formControl]='costInvoiceTypeCtrl'\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <mat-divider class=\\\"mat-divider-cost\\\"></mat-divider>\\r\\n        <div class=\\\"toggle-cost\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-slide-toggle [checked]=\\\"true\\\"\\r\\n                              [formControl]=\\\"authorizePostingCtrl\\\">Authorize for posting</mat-slide-toggle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n\\r\\n\\r\\n</mat-card>\\r\\n\"","module.exports = \".mat-divider-cost {\\n  margin-top: 2%; }\\n\\n.toggle-cost {\\n  margin-top: 5.7%; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\n\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-cost-invoice-selection',\r\n    templateUrl: './cost-invoice-selection.component.html',\r\n    styleUrls: ['./cost-invoice-selection.component.scss'],\r\n})\r\nexport class CostInvoiceSelectionComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly invoiceDateSelected = new EventEmitter<Date>();\r\n\r\n    costInvoiceDateCtrl = new AtlasFormControl('CostInvoiceDateCtrl');\r\n    counterpartyCtrl = new AtlasFormControl('CounterParty');\r\n    costInvoiceTypeCtrl = new AtlasFormControl('InvoiceType');\r\n    authorizePostingCtrl = new AtlasFormControl('AuthorizeForPosting');\r\n    company: string;\r\n    invoiceTypeDescription: string;\r\n    invoiceSelectDescription: string;\r\n    masterdata: MasterData = new MasterData();\r\n    selectedGroup: string;\r\n    costInvoiceTypeName: string = 'Cost';\r\n\r\n    invoiceDate: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    dates: Date[];\r\n    maxDate: Moment;\r\n    isDateAfterValid: boolean;\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.costInvoiceDateCtrl.setValue(this.companyManager.getCurrentCompanyDate().toDate());\r\n        this.invoiceDateSelected.emit(this.costInvoiceDateCtrl.value);\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n    getData() {\r\n        this.costInvoiceTypeCtrl.patchValue(this.costInvoiceTypeName);\r\n    }\r\n\r\n    setDefaultAuthorizeForPosting(defaultAuthorizeForPosting: boolean) {\r\n        this.authorizePostingCtrl.setValue(defaultAuthorizeForPosting);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            costInvoiceDateCtrl: this.costInvoiceDateCtrl,\r\n            counterpartyCtrl: this.counterpartyCtrl,\r\n            costInvoiceTypeCtrl: this.costInvoiceTypeCtrl,\r\n            authorizePostingCtrl: this.authorizePostingCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    contractToBeSelected(costContracts: ContractsToCostInvoice[]) {\r\n        this.setInvoiceDate(costContracts);\r\n    }\r\n    setInvoiceDate(costContracts: ContractsToCostInvoice[]) {\r\n        this.dates = Array.from(costContracts, (contracts) => contracts.contractDate);\r\n        const moments = this.dates.map((date) => moment(date)),\r\n            maxDate = moment.max(moments);\r\n        this.maxDate = maxDate;\r\n    }\r\n    onCostInvoiceDateSelected() {\r\n        this.invoiceDate = new Date(this.costInvoiceDateCtrl.value);\r\n        this.costInvoiceDateCtrl.clearValidators();\r\n        this.isDateAfterValid = false;\r\n        this.invoiceFutureValidation(this.invoiceDate);\r\n        this.costInvoiceDateCtrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.invoiceDate, this.maxDate)]));\r\n        this.costInvoiceDateCtrl.updateValueAndValidity();\r\n        this.invoiceDateSelected.emit(this.invoiceDate);\r\n    }\r\n    invoiceFutureValidation(invoiceDate) {\r\n        const invoiceMoment: Moment = moment(invoiceDate);\r\n        if (invoiceMoment.isAfter(this.companyManager.getCurrentCompanyDate())) {\r\n            this.isDateAfterValid = true;\r\n        }\r\n    }\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceSelection = entity;\r\n        invoiceSelection.invoiceDate = this.costInvoiceDateCtrl.value;\r\n        invoiceSelection.authorizedForPosting = this.authorizePostingCtrl.value;\r\n        return invoiceSelection;\r\n    }\r\n\r\n    onUserSupplierValueChanged(userSupplier) {\r\n        const selectedCounterparty = this.masterdata.counterparties.find(\r\n            (counterparty) => counterparty.counterpartyCode === userSupplier,\r\n        );\r\n        if (selectedCounterparty) {\r\n            const cpDescription = selectedCounterparty.description;\r\n            const cpSelected = userSupplier.concat('|').concat(cpDescription);\r\n            this.counterpartyCtrl.setValue(cpSelected);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <h2 class=\\\"atlas-grid-card-title\\\">\\r\\n        Taxes\\r\\n    </h2>\\r\\n    <mat-card-content>\\r\\n        <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"taxesGridRows\\\"\\r\\n                         [columnDefs]=\\\"taxesGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [pagination]=\\\"false\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n                Total Tax Amount:\\r\\n                <span class=\\\"total-figure-value\\\">\\r\\n                    {{taxCostDirectionSign}}{{formatQuantityAndTotal(this.taxTotal)}} {{currencyCode}}\\r\\n                </span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".ag-theme-material {\\n  margin-bottom: 20px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoicing-cost-taxes',\r\n    templateUrl: './invoicing-cost-taxes.component.html',\r\n    styleUrls: ['./invoicing-cost-taxes.component.scss'],\r\n})\r\nexport class InvoicingCostTaxesComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<any>();\r\n    taxesGridOptions: agGrid.GridOptions = {};\r\n    taxesGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    rowGroupPanelShow: string;\r\n    isGroupingEnabled: boolean = false;\r\n    taxesGridRows: TaxRecord[];\r\n    costDirection: CostDirection;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    masterdata: MasterData = new MasterData();\r\n    vatCode: Vat[];\r\n    vatCodeAvailable: TaxRecord[];\r\n    costDirections: CostDirection[];\r\n    costDirectionPay: string = 'Pay';\r\n\r\n    costTotal: number = 0;\r\n    total: number = 0;\r\n    taxTotal: number = 0;\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    taxCostDirectionSign: string = CostSigns[CostDirections.Payable];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n    onGridReady(params) {\r\n        params.columnDefs = this.taxesGridColumns;\r\n        this.taxesGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.taxesGridColumns = [\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'vatDescription',\r\n                colId: 'vatDescription',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Amount',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: this.vatAmountFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    vatAmountFormatter(param) {\r\n        return Math.abs(param.value);\r\n    }\r\n\r\n    taxRecordsSelected(taxesRecord: TaxRecord[]) {\r\n        if (taxesRecord.length > 0) {\r\n            this.initializeGridColumns();\r\n            this.taxesGridRows = taxesRecord;\r\n            this.calculateTotalAmount(taxesRecord);\r\n        }\r\n    }\r\n\r\n    setDirectionAndCurrency(data: TaxRecord) {\r\n        this.costDirectionDisplay = data.costDirection;\r\n        this.currencyCode = data.currencyCode;\r\n    }\r\n\r\n    calculateTotalAmount(taxes: TaxRecord[]) {\r\n        this.total = 0;\r\n        this.taxTotal = 0;\r\n        taxes.forEach(\r\n            (tax) => {\r\n                this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n            },\r\n        );\r\n        if (this.costTotal) {\r\n            this.total = (this.costDirectionDisplay === this.credit) ? this.taxTotal + this.costTotal : this.costTotal - this.taxTotal;\r\n        }\r\n        this.totalCostTaxCalculated.emit({\r\n            amount: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            currencyCode: this.currencyCode,\r\n            costDirection: this.costDirectionDisplay,\r\n        });\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n                                                     { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n    getTaxesForSelectedVat(model: CostInvoiceRecord) {\r\n        if (model) {\r\n            this.costTotal = model.rate;\r\n            this.decimalOptionValue = model.decimalOption;\r\n            this.currencyCode = model.currencyCode;\r\n            this.totalCostDirection = model.costDirection;\r\n            if (model.costDirection === CostDirections[CostDirections.Payable]) {\r\n                this.costDirectionDisplay = this.credit;\r\n            } else if (model.costDirection === CostDirections[CostDirections.Receivable]) {\r\n                this.costDirectionDisplay = this.debit;\r\n            }\r\n            this.taxRecordsSelected(model.vatAvailable);\r\n        }\r\n    }\r\n\r\n    /* redirection from invoice home grid*/\r\n    setDataForTaxCostGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord) {\r\n            this.getCostContractsForSummary(summaryRecord.summaryLines);\r\n            this.currencyCode = summaryRecord.currency;\r\n        }\r\n    }\r\n\r\n    getCostContractsForSummary(summaryLines: InvoiceSummaryLineRecord[]) {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.costId) {\r\n                const contract = new ContractsToCostInvoice();\r\n                contract.costTypeCode = record.costTypeCode;\r\n                contract.principalCommodity = record.principalCommodity;\r\n                contract.rate = record.price;\r\n                contract.quantity = record.quantity.toString();\r\n                contract.weightCode = record.weightCode;\r\n                contract.costAmountToInvoice = record.lineAmount;\r\n                contract.costDirection = record.costDirection;\r\n                contract.vatCode = record.vatCode;\r\n                contract.invoicePercent = record.invoicePercent;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        this.calculateTotalAmountAndGetVatCode(contracts);\r\n    }\r\n\r\n    calculateTotalAmountAndGetVatCode(contracts: ContractsToCostInvoice[]) {\r\n        const vatMasterData = this.masterdata.vats;\r\n        let vatCodeAvailable = [];\r\n        contracts.forEach((contract) => {\r\n            let vatCode: Vat[] = [];\r\n            vatCode = vatMasterData\r\n                .filter((vat) => (vat.vatCode === contract.vatCode)).map((x) => ({ ...x }));\r\n            if (vatCode.length > 0) {\r\n                vatCode.map((code) => {\r\n\r\n                    return code.rate = code.rate / 100 * contract.costAmountToInvoice;\r\n                });\r\n                if (vatCodeAvailable.length === 0) {\r\n                    if (contract.costDirection === this.costDirectionPay) {\r\n                        vatCode[0].rate = -(vatCode[0].rate);\r\n                    }\r\n                    vatCodeAvailable.push(vatCode[0]);\r\n                } else {\r\n                    let isAvailable: boolean = false;\r\n                    vatCodeAvailable.map((code) => {\r\n                        if (code.vatCode === vatCode[0].vatCode) {\r\n                            if (vatCodeAvailable.filter((selectedVatCode) => selectedVatCode.vatCode === vatCode[0].vatCode)) {\r\n                                if (contract.costDirection === this.costDirectionPay) {\r\n                                    vatCode[0].rate = -(vatCode[0].rate);\r\n                                }\r\n                                code.rate = code.rate + vatCode[0].rate;\r\n                                isAvailable = true;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!isAvailable) {\r\n                        vatCodeAvailable = vatCodeAvailable.filter((code) => code.vatCode !== vatCode[0].vatCode);\r\n                        if (contract.costDirection === this.costDirectionPay) {\r\n                            vatCode[0].rate = -(vatCode[0].rate);\r\n                        }\r\n                        vatCodeAvailable.push(vatCode[0]);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.vatCodeAvailable = vatCodeAvailable.map((x) => ({ ...x }));\r\n        this.taxesGridRows = this.vatCodeAvailable;\r\n        this.initializeGridColumns();\r\n        this.calculateTotalTaxForSummary(this.vatCodeAvailable);\r\n    }\r\n\r\n    calculateTotalTaxForSummary(taxes: TaxRecord[]) {\r\n        this.taxTotal = 0;\r\n        taxes.forEach(\r\n            (tax) => {\r\n                this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n            },\r\n        );\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutGap=\\\"2%\\\">\\r\\n        <atlas-cost-invoice-selection #costInvoiceSelectionComponent\\r\\n                                      fxFlex=\\\"49%\\\"\\r\\n                                      (invoiceDateSelected)=\\\"onInvoiceDateSelected($event)\\\">\\r\\n\\r\\n        </atlas-cost-invoice-selection>\\r\\n        <atlas-cost-document-template #costDocumentTemplateComponent\\r\\n                                      fxFlex=\\\"49%\\\"\\r\\n                                      (templateSelected)=\\\"onDocumentTemplateSelected($event)\\\">\\r\\n\\r\\n        </atlas-cost-document-template>\\r\\n    </div>\\r\\n    <atlas-invoice-cost-selected-cost (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\"\\r\\n                                      (narrativeLength)=\\\"onNarrativeValueChange($event)\\\"\\r\\n                                      #invoiceCostSelectedCostComponent>\\r\\n    </atlas-invoice-cost-selected-cost>\\r\\n    <atlas-invoicing-cost-taxes (totalCostTaxCalculated)=\\\"onTotalCostTaxCalculated($event)\\\"\\r\\n                                #invoicingCostTaxesComponent></atlas-invoicing-cost-taxes>\\r\\n    <div class=\\\"payment-total-amount-section\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxLayoutGap=\\\"2%\\\">\\r\\n        <atlas-cost-payments #costPaymentsComponent\\r\\n                             fxFlex=\\\"50%\\\"></atlas-cost-payments>\\r\\n        <atlas-total-amount #totalAmountComponent\\r\\n                            fxFlex=\\\"50%\\\"></atlas-total-amount>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, HostListener, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { DocumentTemplateSelectedEvent } from '../../../../../shared/document-template-event.entity';\r\nimport { InvoiceSetupResult } from '../../../../../shared/dtos/invoice-setup-result';\r\nimport { CostDirectionType } from '../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../shared/enums/cost-sign.enum';\r\nimport { InvoicePaymentType } from '../../../../../shared/enums/invoice-payment-type';\r\nimport { InvoiceSourceType } from '../../../../../shared/enums/invoice-source-type.enum';\r\nimport { CostInvoiceRecord } from '../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { BankAccountDialogComponent } from '../../../dialog-boxes/bank-account-dialog/bank-account-dialog.component';\r\nimport { TotalAmountComponent } from '../../../total-amount/total-amount.component';\r\nimport { CostInvoiceeOptionsComponent } from '../cost-selection/components/cost-invoicee-options/cost-invoicee-options.component';\r\nimport { CostDocumentTemplateComponent } from './components/document-template/cost-document-template.component';\r\nimport { CostPaymentsComponent } from './components/payments/cost-payments.component';\r\nimport { InvoiceCostSelectedCostComponent } from './components/selected-cost/invoice-cost-selected-cost.component';\r\nimport { CostInvoiceSelectionComponent } from './components/selection/cost-invoice-selection.component';\r\nimport { InvoicingCostTaxesComponent } from './components/taxes/invoicing-cost-taxes.component';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-working-page',\r\n    templateUrl: './cost-working-page.component.html',\r\n    styleUrls: ['./cost-working-page.component.scss'],\r\n})\r\n\r\nexport class CostWorkingPageComponent extends BaseFormComponent implements OnInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n    @ViewChild('costDocumentTemplateComponent') costDocumentTemplateComponent: CostDocumentTemplateComponent;\r\n    @ViewChild('costInvoiceSelectionComponent') costInvoiceSelectionComponent: CostInvoiceSelectionComponent;\r\n    @ViewChild('invoiceCostSelectedCostComponent') invoiceCostSelectedCostComponent: InvoiceCostSelectedCostComponent;\r\n    @ViewChild('invoicingCostTaxesComponent') invoicingCostTaxesComponent: InvoicingCostTaxesComponent;\r\n    @ViewChild('costPaymentsComponent') costPaymentsComponent: CostPaymentsComponent;\r\n    @ViewChild('costInvoiceeOptionsComponent') costInvoiceeOptionsComponent: CostInvoiceeOptionsComponent;\r\n    @ViewChild('totalAmountComponent') totalAmountComponent: TotalAmountComponent;\r\n    @ViewChild('bankAccountDialogComponent') bankAccountDialogComponent: BankAccountDialogComponent;\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<number>();\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<number>();\r\n    @Output() readonly documentTemplateSelected = new EventEmitter<DocumentTemplateSelectedEvent>();\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n\r\n    @Input() invoiceSetupData: InvoiceSetupResult;\r\n    decimalOption: number = 2;\r\n    totalData: TaxRecord;\r\n    invoiceCostWorkingFormGroup: FormGroup;\r\n    isSave: boolean = false;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceCostWorkingFormGroup = this.formBuilder.group({\r\n            costDocumentTemplateComponent: this.costDocumentTemplateComponent.getFormGroup(),\r\n            costInvoiceSelectionComponent: this.costInvoiceSelectionComponent.getFormGroup(),\r\n            costPaymentsComponent: this.costPaymentsComponent.getFormGroup(),\r\n            totalAmountComponent: this.totalAmountComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.costDocumentTemplateComponent,\r\n            this.costInvoiceSelectionComponent,\r\n            this.costPaymentsComponent,\r\n            this.invoiceCostSelectedCostComponent,\r\n            this.totalAmountComponent);\r\n    }\r\n\r\n    onSupplierSelected(supplier) {\r\n        this.costInvoiceeOptionsComponent.onSupplierSelected(supplier);\r\n    }\r\n\r\n    onChangeCostContract(model: CostInvoiceRecord) {\r\n        this.invoicingCostTaxesComponent.getTaxesForSelectedVat(model);\r\n    }\r\n\r\n    onNarrativeValueChange(maxLength: boolean) {\r\n        this.narrativeLength.emit(maxLength);\r\n    }\r\n    onTotalCostTaxCalculated(model: TaxRecord) {\r\n        this.totalData = model;\r\n        this.totalAmountComponent.amount = model.amount;\r\n        this.totalAmountComponent.decimalOption = model.decimalOption;\r\n        this.totalAmountComponent.currencyCode = model.currencyCode;\r\n        this.totalAmountComponent.totalCostDirectionSign = CostSigns[CostDirectionType[model.costDirection]];\r\n        this.totalAmountComponent.invoiceLabel = InvoicePaymentType[CostDirectionType[model.costDirection]];\r\n        if (this.invoicingCostTaxesComponent.totalCostDirection === CostDirections[CostDirections.Payable]) {\r\n            this.costDocumentTemplateComponent.invoiceExtInHouseCtrl.patchValue((InvoiceSourceType[InvoiceSourceType.External]));\r\n        } else {\r\n            this.costDocumentTemplateComponent.invoiceExtInHouseCtrl.patchValue((InvoiceSourceType[InvoiceSourceType.Inhouse]));\r\n        }\r\n    }\r\n\r\n    onDocumentTemplateSelected(event: DocumentTemplateSelectedEvent) {\r\n        this.documentTemplateSelected.emit(event);\r\n    }\r\n\r\n    populateEntity(model: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n    validateCostGrid() {\r\n        //  calling the costgrid component to set the required field validation\r\n        return this.invoiceCostSelectedCostComponent.validate();\r\n    }\r\n\r\n    onInvoiceDateSelected(invoiceDate: Date) {\r\n        this.costPaymentsComponent.setinvoiceDateSelected(invoiceDate);\r\n    }\r\n}\r\n","module.exports = \"<atlas-execution-invoicing-summary-header #summaryHeaderComponent></atlas-execution-invoicing-summary-header>\\r\\n\\r\\n<div>\\r\\n    <atlas-invoice-cost-selected-cost #invoiceCostSelectedCostComponent></atlas-invoice-cost-selected-cost>\\r\\n    <atlas-invoicing-cost-taxes #invoicingCostTaxesComponent></atlas-invoicing-cost-taxes>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         class=\\\"payment-total-amount-section\\\">\\r\\n\\r\\n        <atlas-cost-payments #costPaymentsComponent\\r\\n                             fxFlex=\\\"50%\\\"\\r\\n                             fxFlex.lt-md=\\\"92\\\"></atlas-cost-payments>\\r\\n        <atlas-total-amount #totalAmountComponent\\r\\n                            fxFlex=\\\"50%\\\"\\r\\n                            fxFlex.lt-md=\\\"92\\\"></atlas-total-amount>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ContractsToCostInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { CostInvoiceRecord } from '../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { HeaderComponent } from '../../../header/header.component';\r\nimport { TotalAmountComponent } from '../../../total-amount/total-amount.component';\r\nimport { CostPaymentsComponent } from '../cost-working-page/components/payments/cost-payments.component';\r\nimport { InvoiceCostSelectedCostComponent } from '../cost-working-page/components/selected-cost/invoice-cost-selected-cost.component';\r\nimport { InvoicingCostTaxesComponent } from '../cost-working-page/components/taxes/invoicing-cost-taxes.component';\r\nimport { CompanyBankAccounts } from '../../../../../shared/entities/company-bankaccounts.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-summary',\r\n    templateUrl: './cost-summary.component.html',\r\n    styleUrls: ['./cost-summary.component.scss'],\r\n})\r\nexport class CostSummaryComponent extends BaseFormComponent implements OnInit {\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('costPaymentsComponent') costPaymentsComponent: CostPaymentsComponent;\r\n    @ViewChild('invoicingCostTaxesComponent') invoicingCostTaxesComponent: InvoicingCostTaxesComponent;\r\n    @ViewChild('totalAmountComponent') totalAmountComponent: TotalAmountComponent;\r\n    @ViewChild('invoiceCostSelectedCostComponent') invoiceCostSelectedCostComponent: InvoiceCostSelectedCostComponent;\r\n    @ViewChild('summaryHeaderComponent') summaryHeaderComponent: HeaderComponent;\r\n\r\n    @Input() invoiceTaxContracts: TaxRecord[];\r\n    @Input() invoiceTaxTotal: TaxRecord;\r\n    @Input() invoiceCostContracts: ContractsToCostInvoice[];\r\n    @Input() filteredCompanyBankAccounts: CompanyBankAccounts[];\r\n\r\n    invoiceSummaryFormGroup: FormGroup;\r\n    model: InvoiceRecord;\r\n    invoiceLabel: string;\r\n    quantityToInvoice: string;\r\n    contracts: ContractsToCostInvoice[];\r\n    taxes: TaxRecord[];\r\n    totalData: TaxRecord;\r\n    decimalOptionValue: number = 0;\r\n    pricingOptionValue: number = 0;\r\n    defaultDecimalOption: number = 2;\r\n    contract: ContractsToCostInvoice;\r\n    contractType: string = 'Contract';\r\n    taxForCostInvoice: CostInvoiceRecord;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSummaryFormGroup = this.formBuilder.group({\r\n            costPaymentsComponent: this.costPaymentsComponent.getFormGroup(),\r\n            invoicingCostTaxesComponent: this.invoicingCostTaxesComponent.getFormGroup(),\r\n            invoiceCostSelectedCostComponent: this.invoiceCostSelectedCostComponent.getFormGroup(),\r\n            summaryHeaderComponent: this.summaryHeaderComponent.getFormGroup(),\r\n        });\r\n        this.invoiceSummaryFormGroup.disable();\r\n\r\n        this.formComponents.push(\r\n            this.costPaymentsComponent,\r\n            this.invoicingCostTaxesComponent,\r\n            this.invoiceCostSelectedCostComponent,\r\n            this.summaryHeaderComponent);\r\n        this.invoiceCostSelectedCostComponent.isAddDeleteButtonInvisible = true;\r\n\r\n    }\r\n\r\n    contractToBeSelected(contracts: ContractsToCostInvoice[]) {\r\n        this.contracts = contracts;\r\n    }\r\n\r\n    setDecimalAndPricingOption(decimalOptionValue, pricingOptionValue) {\r\n        this.decimalOptionValue = decimalOptionValue;\r\n        this.pricingOptionValue = pricingOptionValue;\r\n    }\r\n\r\n    populateInvoiceRecord(record) {\r\n        this.contracts = this.invoiceCostContracts;\r\n        this.taxes = this.invoiceTaxContracts;\r\n        this.totalData = this.invoiceTaxTotal;\r\n        this.model = record;\r\n        this.populateSummaryFields();\r\n    }\r\n\r\n    populateSummaryFields() {\r\n        this.invoiceCostSelectedCostComponent.contractToBeSelected(this.contracts);\r\n        this.invoicingCostTaxesComponent.taxRecordsSelected(this.taxes);\r\n        if (this.totalData) {\r\n            this.invoicingCostTaxesComponent.setDirectionAndCurrency(this.totalData);\r\n            this.totalAmountComponent.setTotalAmountForSummary(this.totalData);\r\n        }\r\n        if (this.model) {\r\n            this.costPaymentsComponent.setPaymentFieldsForSummary(this.model);\r\n            this.summaryHeaderComponent.setHeaderFieldsForSummary(this.model, this.filteredCompanyBankAccounts);\r\n        }\r\n    }\r\n\r\n    populateInvoiceRecordFromGrid(record) {\r\n        if (this.contract) {\r\n            this.contract.principalCommodity = record.principalCommodity;\r\n            this.contract.rate = record.price;\r\n            this.contract.quantity = record.quantity;\r\n            this.contracts.push(this.contract);\r\n        }\r\n    }\r\n\r\n    setSummaryFieldsFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord) {\r\n            this.invoiceCostSelectedCostComponent.contractToBeSelectedFromGrid(summaryRecord);\r\n            this.invoicingCostTaxesComponent.setDataForTaxCostGrid(summaryRecord);\r\n            this.costPaymentsComponent.setValuesForSummaryFromGrid(summaryRecord);\r\n            this.totalAmountComponent.setValuesForTotalFromGrid(summaryRecord);\r\n            this.summaryHeaderComponent.setHeaderFieldsFromGrid(summaryRecord);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"costInvoiceFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Contract Selection Screen</ng-template>\\r\\n                <atlas-cost-selection #costSelectionComponent\\r\\n                                      (costContractsSelected)=\\\"onCostContractsSelected($event)\\\"\\r\\n                                      (userSupplier)=\\\"onUserSupplierValueChanged($event)\\\"></atlas-cost-selection>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onMoveButtonClicked(invoicingSteps.workingStep)\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step [completed]=\\\"isCompleted\\\">\\r\\n                <ng-template matStepLabel>Invoice Working Page</ng-template>\\r\\n                <atlas-cost-working-page #costWorkingPageComponent\\r\\n                                         [invoiceSetupData]=\\\"invoiceSetupDataResult\\\"\\r\\n                                         (narrativeLength)=\\\"onNarrativeValueChanged($event)\\\"\\r\\n                                         (documentTemplateSelected)=\\\"onDocumentTemplateSelected($event)\\\">\\r\\n                </atlas-cost-working-page>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"end start\\\">\\r\\n                    <mat-slide-toggle *ngIf=\\\"hasTemplate\\\"\\r\\n                                      [formControl]=\\\"previewDocumentCtrl\\\">Preview Document</mat-slide-toggle>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            [disabled]=\\\"isLoading\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start end \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onBackButtonClicked(invoicingSteps.invoiceCreationStep)\\\"\\r\\n                                    [disabled]=\\\"isLoading\\\">\\r\\n                                BACK\\r\\n                            </button>\\r\\n                            <div\\r\\n                                 *ifAuthorized=\\\"'Invoices.InvoiceCreation', company:company, level: PermissionLevels.ReadWrite\\\">\\r\\n                                <button mat-raised-button\\r\\n                                        (click)=\\\"onOpenDialogOnPreviewOrSaveClicked()\\\"\\r\\n                                        [disabled]=\\\"isLoading\\\">\\r\\n                                    {{ previewDocumentCtrl.value ? \\\"Preview and Invoice\\\" : \\\"Create Invoice\\\" }}\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Invoice Summary Page</ng-template>\\r\\n                <atlas-cost-summary #costSummaryComponent\\r\\n                                    [invoiceTaxContracts]=\\\"taxRecords\\\"\\r\\n                                    [invoiceTaxTotal]=\\\"totalData\\\"\\r\\n                                    [invoiceCostContracts]=\\\"invoiceCostContracts\\\"\\r\\n                                    [filteredCompanyBankAccounts]=\\\"filteredCompanyBankAccounts\\\">\\r\\n                </atlas-cost-summary>\\r\\n                <div class=\\\"btn-container\\\"\\r\\n                     *ngIf=\\\"!isFromGrid\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start end\\\">\\r\\n                        <span class=\\\"fill-space\\\"></span>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"newSearchButtonClicked()\\\">\\r\\n                            New Search\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"nextInvoiceButtonClicked(stepper)\\\">\\r\\n                            Next Invoice\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \".mat-column-selection {\\n  overflow: initial; }\\n\\n.mat-button-toggle {\\n  text-align: center;\\n  min-width: 88px; }\\n\\nlabel {\\n  font-size: 14px;\\n  font-family: Roboto;\\n  color: black; }\\n\\nlabel.no-data-message {\\n  font-weight: bold; }\\n\\n.highlight {\\n  background: #A7C5E2; }\\n\\n.label-search {\\n  font-size: 11px;\\n  font-family: Roboto;\\n  color: rgba(0, 0, 0, 0.54); }\\n\\n.label-summary {\\n  font-weight: bold; }\\n\\nmat-radio-button {\\n  margin: 5px; }\\n\\n.mat-stepper-horizontal {\\n  background-color: transparent; }\\n\"","import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { InvoiceSetupResult } from '../../../shared/dtos/invoice-setup-result';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { CompanyBankAccounts } from '../../../shared/entities/company-bankaccounts.entity';\r\nimport { Counterparty } from '../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../shared/entities/nominal-account.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { CostDirections } from '../../../shared/enums/cost-direction.enum';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { ContractsToCostInvoice } from '../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { InvoiceRecord } from '../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { PreaccountingService } from '../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { BankAccountDialogComponent } from '../dialog-boxes/bank-account-dialog/bank-account-dialog.component';\r\nimport { InvoicingBaseFormComponent } from '../invoicing-base-form/invoicing-base-form.component';\r\nimport { CostSelectionComponent } from './components/cost-selection/cost-selection.component';\r\nimport { CostWorkingPageComponent } from './components/cost-working-page/cost-working-page.component';\r\nimport { CostSummaryComponent } from './components/summary/cost-summary.component';\r\n\r\n@Component({\r\n    selector: 'atlas-cost',\r\n    templateUrl: './cost.component.html',\r\n    styleUrls: ['./cost.component.scss'],\r\n})\r\nexport class CostComponent extends InvoicingBaseFormComponent implements OnInit {\r\n    @ViewChild('costSelectionComponent') costSelectionComponent: CostSelectionComponent;\r\n    @ViewChild('costWorkingPageComponent') costWorkingPageComponent: CostWorkingPageComponent;\r\n    @ViewChild('costSummaryComponent') costSummaryComponent: CostSummaryComponent;\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('bankAccountDialogComponent') bankAccountDialogComponent: BankAccountDialogComponent;\r\n\r\n    filteredCompanyBankAccounts: CompanyBankAccounts[] = [];\r\n    currencySelected: string;\r\n    selectedSupplier: Counterparty;\r\n    costInvoiceFormGroup: FormGroup;\r\n    taxRecords: TaxRecord[];\r\n    totalData: TaxRecord;\r\n    invoiceCostContracts: ContractsToCostInvoice[];\r\n    nominalAccounts: NominalAccount[];\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    currentStep: number = 0;\r\n    invoiceLabel: string;\r\n    selectedInvoiceId: number;\r\n    PermissionLevels = PermissionLevels;\r\n    isFromGrid: boolean = false;\r\n    isSave: boolean = false;\r\n    invoicingSteps: { [key: string]: number } = {\r\n        templateStep: -1,\r\n        invoiceCreationStep: 0,\r\n        workingStep: 1,\r\n        summaryStep: 2,\r\n    };\r\n    isValid: boolean = false;\r\n    previewDocumentCtrl = new AtlasFormControl('previewDocumentCtrl');\r\n    masterData: MasterData = new MasterData();\r\n    invoiceSetupDataResult: InvoiceSetupResult;\r\n    isCostNarrativeMaxLength: boolean;\r\n    isCompleted: boolean = false;\r\n\r\n    constructor(\r\n        protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        protected documentService: DocumentService,\r\n        @Inject(WINDOW) protected window: Window,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected masterdataService: MasterdataService,\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected preaccountingService: PreaccountingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected documentPopupService: DocumentPopupService) {\r\n        super(dialog, router, companyManager, snackbarService, documentService, window, utilService,\r\n              executionService, route, formBuilder, preaccountingService, formConfigurationProvider, documentPopupService);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.costInvoiceFormGroup = this.formBuilder.group({\r\n            costSelectionComponent: this.costSelectionComponent.getFormGroup(),\r\n            costWorkingPageComponent: this.costWorkingPageComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.costSelectionComponent, this.costWorkingPageComponent);\r\n        this.getInvoiceSetupByCompany();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if ((this.costWorkingPageComponent.invoiceCostWorkingFormGroup.dirty ||\r\n            this.costSelectionComponent.invoiceSelectionFormGroup.dirty) &&\r\n            this.isSave === false) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    nextInvoiceButtonClicked() {\r\n        let searchContractRef: string = '';\r\n        let searchCounterParty: string = '';\r\n        let searchCharterRef: string = '';\r\n        let searchCost: string = '';\r\n        let invoiceType: number = 0;\r\n        searchContractRef = this.costSelectionComponent.contractSearchComponent.searchTerm;\r\n        searchCounterParty = this.costSelectionComponent.contractSearchComponent.searchSupplierTerm;\r\n        searchCharterRef = this.costSelectionComponent.contractSearchComponent.searchCharterTerm;\r\n        searchCost = this.costSelectionComponent.contractSearchComponent.searchCostTerm;\r\n        invoiceType = this.costSelectionComponent.contractSearchComponent.invoiceType;\r\n\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/' + encodeURIComponent(invoiceType.toString())],\r\n            {\r\n                queryParams: {\r\n                    savedContractRefCost: searchContractRef, savedCounterPartyCost: searchCounterParty,\r\n                    savedCharterRefCost: searchCharterRef, savedCost: searchCost,\r\n                },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    beforeInvoiceActions(invoiceRecord: InvoiceRecord) { }\r\n\r\n    afterInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        (this.selectedbankAccountId) ? invoiceRecord.bankAccountId = this.selectedbankAccountId : null;\r\n        this.costSummaryComponent.populateInvoiceRecord(invoiceRecord);\r\n        this.stepper.next();\r\n\r\n    }\r\n\r\n    onMoveButtonClicked(index: number) {\r\n        let isFormValid = false;\r\n        if (this.costSelectionComponent.costInvoiceeOptionsComponent.formGroup.valid) {\r\n            if (this.isValid) {\r\n                this.costContractsSelected();\r\n                this.isCompleted = true;\r\n                this.stepper.selectedIndex = index;\r\n            }\r\n            isFormValid = true;\r\n        }\r\n\r\n        if (!this.isValid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Please select a contract to proceed.',\r\n            );\r\n        }\r\n        if (!isFormValid) {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors..');\r\n        }\r\n    }\r\n\r\n    onNarrativeValueChanged(maxLength: boolean) {\r\n        this.isCostNarrativeMaxLength = maxLength;\r\n    }\r\n\r\n    checkForTotalCostDirection() {\r\n        if (this.costWorkingPageComponent\r\n            .invoicingCostTaxesComponent.totalCostDirection === CostDirections[CostDirections.Payable]) {\r\n            this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value);\r\n        } else if (this.costWorkingPageComponent\r\n            .invoicingCostTaxesComponent.totalCostDirection === CostDirections[CostDirections.Receivable]) {\r\n            this.getCompanyBankAccounts();\r\n        }\r\n    }\r\n\r\n    onOpenDialogOnPreviewOrSaveClicked(createOrPreview) {\r\n        this.isLoading = true;\r\n        this.isSave = true;\r\n        if (this.costWorkingPageComponent.invoiceCostWorkingFormGroup.valid &&\r\n            this.costWorkingPageComponent.validateCostGrid()) {\r\n            if (this.isCostNarrativeMaxLength) {\r\n                this.snackbarService.informationSnackBar(\r\n                    'Narrative length should be less than 30',\r\n                );\r\n                return;\r\n            }\r\n            this.checkForTotalCostDirection();\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors...');\r\n            this.isLoading = false;\r\n        }\r\n        this.costAndTaxRowsSelected();\r\n    }\r\n\r\n    costContractsSelected() {\r\n        const costContracts = this.costSelectionComponent.\r\n            contractSearchComponent.selectedCostContracts as ContractsToCostInvoice[];\r\n        if (costContracts) {\r\n            this.costWorkingPageComponent.invoiceCostSelectedCostComponent.contractToBeSelected(costContracts);\r\n            this.costWorkingPageComponent.costInvoiceSelectionComponent.contractToBeSelected(costContracts);\r\n            costContracts.map((contract) => {\r\n                this.currencySelected = contract ? contract.currencyCode : null;\r\n            });\r\n        }\r\n    }\r\n\r\n    getTaxRecordsForSelectedCost() {\r\n        this.taxRecords = this.costWorkingPageComponent.invoicingCostTaxesComponent.taxesGridRows as TaxRecord[];\r\n        this.totalData = this.costWorkingPageComponent.totalData as TaxRecord;\r\n    }\r\n\r\n    costAndTaxRowsSelected() {\r\n        this.invoiceCostContracts = this.costWorkingPageComponent.invoiceCostSelectedCostComponent\r\n            .getAllInvoiceCostLines();\r\n        this.getTaxRecordsForSelectedCost();\r\n    }\r\n\r\n    getCompanyBankAccounts() {\r\n        if (this.selectedSupplier && this.currencySelected) {\r\n            this.masterdataService.getCompanyBankAccounts(this.currencySelected)\r\n                .subscribe(\r\n                    (data) => {\r\n                        if (data.value.length > 0) {\r\n                            this.filteredCompanyBankAccounts = data.value;\r\n                        }\r\n                        this.showAvailableBankingOptionDialog();\r\n                    },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    });\r\n        } else {\r\n            if (!this.selectedSupplier) {\r\n                this.snackbarService.throwErrorSnackBar('The invoicee is incorrect');\r\n            } else if (!this.currencySelected) {\r\n                this.snackbarService.throwErrorSnackBar('The currency is incorrect');\r\n            }\r\n            this.isLoading = false;\r\n            this.isSave = false;\r\n        }\r\n    }\r\n\r\n    showAvailableBankingOptionDialog() {\r\n        if (this.filteredCompanyBankAccounts) {\r\n            const availableBankingoptionDialog = this.dialog.open(BankAccountDialogComponent, {\r\n                data: {\r\n                    title: 'Bank Account',\r\n                    okButton: 'Confirm',\r\n                    value: this.filteredCompanyBankAccounts,\r\n                },\r\n            });\r\n            availableBankingoptionDialog.afterClosed().subscribe((answer) => {\r\n                if (!answer) {\r\n                    this.isLoading = false;\r\n                } else if (answer.isClose) {\r\n                    this.selectedbankAccountId = answer.selectedValue;\r\n                    this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value);\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    onCostContractsSelected(costContractsSelected: boolean) {\r\n        this.isValid = costContractsSelected;\r\n    }\r\n\r\n    onUserSupplierValueChanged(userSupplier) {\r\n        if (userSupplier) {\r\n            this.costWorkingPageComponent.costInvoiceSelectionComponent.onUserSupplierValueChanged(userSupplier);\r\n            this.selectedSupplier = this.masterData.counterparties.find(\r\n                (counterParty) => counterParty.description === userSupplier);\r\n        }\r\n    }\r\n\r\n    getInvoiceSetupByCompany() {\r\n        this.subscriptions.push(this.executionService.getInvoiceSetupByCompany()\r\n            .subscribe((data) => {\r\n                this.invoiceSetupDataResult = data;\r\n                this.costSelectionComponent.contractSearchComponent.setTolerancePercentage(data.tolerancePercentage);\r\n                this.costWorkingPageComponent.invoiceCostSelectedCostComponent.setDefaultVatCode(data.defaultVATCode);\r\n                this.costWorkingPageComponent.costPaymentsComponent.setPaymentTerms(data.paymentTermCode);\r\n                this.costWorkingPageComponent.costInvoiceSelectionComponent.\r\n                    setDefaultAuthorizeForPosting(data.authorizedForPosting);\r\n\r\n            }));\r\n    }\r\n\r\n    onBackButtonClicked(index: number) {\r\n        this.isCompleted = false;\r\n        this.stepper.selectedIndex = index;\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h1 class=\\\"no-margin\\\">APPORTION</h1>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\">\\r\\n        <mat-form-field fxFlex=\\\"32%\\\">\\r\\n            <input matInput\\r\\n                   placeholder=\\\"Quantity[MT]\\\"\\r\\n                   [formControl]=\\\"quantityCtrl\\\"\\r\\n                   autocomplete=\\\"off\\\"\\r\\n                   (change)=\\\"quantityOnChange()\\\"\\r\\n                   [readonly]=\\\"isReadOnly\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\">\\r\\n        <mat-form-field fxFlex=\\\"32%\\\">\\r\\n            <input matInput\\r\\n                   placeholder=\\\"Total Value\\\"\\r\\n                   [formControl]=\\\"totalValueCtrl\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\">\\r\\n        <mat-form-field fxFlex=\\\"32%\\\">\\r\\n            <input matInput\\r\\n                   placeholder=\\\"%Invoiced\\\"\\r\\n                   [formControl]=\\\"invoicePercentageCtrl\\\">\\r\\n        </mat-form-field>\\r\\n        <mat-form-field fxFlex=\\\"40%\\\"\\r\\n                        class=\\\"mat-read-only-field\\\">\\r\\n            <span matTooltip={{apportionBasisToolTip}}>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"(Basis Updated Total Value)\\\"\\r\\n                       [formControl]=\\\"totalValueBasisCtrl\\\"\\r\\n                       readonly>\\r\\n            </span>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\">\\r\\n        <mat-form-field fxFlex=\\\"32%\\\">\\r\\n            <mat-select placeholder=\\\"Apportion Basis\\\"\\r\\n                        [formControl]=\\\"apportionBasisCtrl\\\"\\r\\n                        (selectionChange)='onApportionBasisChanged()'>\\r\\n                <mat-option *ngFor=\\\"let basis of apportionBasisType\\\"\\r\\n                            [value]=\\\"basis.viewValue\\\">\\r\\n                    {{basis.viewValue}}\\r\\n                </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCloseButtonClicked()\\\">DISCARD</button>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start end\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDoneButtonClicked()\\\">DONE</button>\\r\\n    </div>\\r\\n</mat-dialog-actions>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { ApportionBasisType } from '../../../../shared/enums/apportion-basis-type.enum';\r\nimport { ContractsToCostInvoice } from '../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-apportion-dialog',\r\n    templateUrl: './apportion-dialog.component.html',\r\n    styleUrls: ['./apportion-dialog.component.scss'],\r\n})\r\nexport class ApportionDialogComponent implements OnInit {\r\n    quantityCtrl = new AtlasFormControl('Quantity');\r\n    totalValueCtrl = new AtlasFormControl('TotalValue');\r\n    invoicePercentageCtrl = new AtlasFormControl('InvoicePercentage');\r\n    totalValueBasisCtrl = new AtlasFormControl('TotalValueBasis');\r\n    apportionBasisCtrl = new AtlasFormControl('ApportionBasis');\r\n    apportionBasisType: string[];\r\n    dialogData: {\r\n        selectedRows: ContractsToCostInvoice[],\r\n        totalQuantity: number,\r\n        totalInvoiceValue: number,\r\n    };\r\n    isMixedWeightCode: boolean = false;\r\n    isPartialyInvoiced: boolean = false;\r\n    isMixedRatetypes: boolean = false;\r\n    apportionBasisToolTip: string = '';\r\n    isReadOnly: boolean = true;\r\n\r\n    constructor(private snackbarService: SnackbarService,\r\n        public thisDialogRef: MatDialogRef<ApportionDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: {\r\n            selectedRows: ContractsToCostInvoice[], totalQuantity: number, totalInvoiceValue: number,\r\n        }) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.apportionBasisType = this.getApportionBasisTypeEnum();\r\n        this.apportionBasisCtrl.patchValue(ApportionBasisType[ApportionBasisType.TotalValue]);\r\n        this.totalValueBasisCtrl.setValue(100);\r\n        this.setApportionValues();\r\n        this.onChanges();\r\n    }\r\n\r\n    getApportionBasisTypeEnum(): string[] {\r\n        const apportionBasisTypeEnum = [];\r\n        const objectEnum = Object.keys(ApportionBasisType);\r\n        const values = objectEnum.slice(0, objectEnum.length / 2);\r\n        const keys = objectEnum.slice(objectEnum.length / 2);\r\n\r\n        for (let i = 0; i < objectEnum.length / 2; i++) {\r\n            apportionBasisTypeEnum.push({ viewValue: keys[i], value: values[i] });\r\n        }\r\n        return apportionBasisTypeEnum;\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    onDoneButtonClicked() {\r\n        this.thisDialogRef.close(this.dialogData.selectedRows);\r\n    }\r\n\r\n    setApportionValues() {\r\n        if (this.dialogData) {\r\n            this.isReadOnly = true;\r\n            let weightCode: string;\r\n            let rateType: string;\r\n            this.quantityCtrl.patchValue(this.dialogData.totalQuantity);\r\n            this.totalValueCtrl.patchValue(this.dialogData.totalInvoiceValue);\r\n            this.dialogData.selectedRows.forEach((row) => {\r\n                if (!weightCode) {\r\n                    weightCode = row.weightCode;\r\n                }\r\n                if (!rateType) {\r\n                    rateType = row.rateTypeCode;\r\n                }\r\n                if (weightCode !== row.weightCode) {\r\n                    this.isMixedWeightCode = true;\r\n                }\r\n                if (rateType !== row.rateTypeCode) {\r\n                    this.isMixedRatetypes = true;\r\n                }\r\n                if (!this.isPartialyInvoiced && (row.invoicePercent > 0 && row.invoicePercent < 100)) {\r\n                    this.isPartialyInvoiced = true;\r\n                }\r\n            });\r\n            if (this.isPartialyInvoiced) {\r\n                this.invoicePercentageCtrl.setValue('');\r\n                this.invoicePercentageCtrl.disable();\r\n                this.totalValueBasisCtrl.setValue('');\r\n            } else {\r\n                this.invoicePercentageCtrl.setValue(100);\r\n                this.totalValueBasisCtrl.setValue((this.totalValueCtrl.value / this.dialogData.totalInvoiceValue) * 100);\r\n                this.setApportionTooltip();\r\n            }\r\n        }\r\n    }\r\n\r\n    setApportionTooltip() {\r\n        this.apportionBasisToolTip = 'The %invoiced basis the value entered above is ' +\r\n            (this.totalValueCtrl.value / this.dialogData.totalInvoiceValue) * 100 + ' but the % invoiced will be reflected as ' +\r\n            this.invoicePercentageCtrl.value + ' % for calculations ';\r\n    }\r\n\r\n    onApportionBasisChanged() {\r\n        const selectedBasis: string = this.apportionBasisCtrl.value;\r\n        if (selectedBasis.toLocaleLowerCase() === 'quantity') {\r\n            if (this.isMixedRatetypes || this.isMixedWeightCode || this.isPartialyInvoiced) {\r\n                this.snackbarService.informationSnackBar('Apportion Basis cannot be quantity in' +\r\n                    ' case there is a mix of weight codes or there is a partially invoiced cost line or there is a mix of rate types');\r\n                this.apportionBasisCtrl.patchValue(ApportionBasisType[ApportionBasisType.TotalValue]);\r\n                this.isReadOnly = true;\r\n            } else {\r\n                // make quantity editable\r\n                this.isReadOnly = false;\r\n            }\r\n        } else {\r\n            this.isReadOnly = true;\r\n        }\r\n    }\r\n\r\n    onTotalValueChanged() {\r\n        const selectedBasis: string = this.apportionBasisCtrl.value;\r\n        this.totalValueBasisCtrl.setValue((this.totalValueCtrl.value / this.dialogData.totalInvoiceValue) * 100);\r\n        if (this.dialogData.selectedRows) {\r\n            this.dialogData.selectedRows.forEach((costContract) => {\r\n                if (selectedBasis.toLowerCase() === 'quantity') {\r\n                    if (this.totalValueCtrl.value) {\r\n                        costContract.costAmountToInvoice = this.totalValueCtrl.value *\r\n                            (Number(costContract.quantity) / this.quantityCtrl.value);\r\n                    }\r\n                } else {\r\n                    if (this.totalValueCtrl.value) {\r\n                        costContract.costAmountToInvoice = costContract.costAmount *\r\n                            (this.totalValueCtrl.value / this.dialogData.totalInvoiceValue);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n        if (!this.isPartialyInvoiced) {\r\n            this.setApportionTooltip();\r\n        }\r\n\r\n    }\r\n\r\n    onInvoicedPercentageChanged() {\r\n        if (this.dialogData.selectedRows) {\r\n            this.dialogData.selectedRows.forEach((costContract) => {\r\n                if (this.invoicePercentageCtrl.value) {\r\n                    costContract.invoicePercent = this.invoicePercentageCtrl.value;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    quantityOnChange() {\r\n        if (this.dialogData.selectedRows) {\r\n            this.dialogData.selectedRows.forEach((costContract) => {\r\n                if (this.quantityCtrl.value) {\r\n                    costContract.quantity = (this.quantityCtrl.value *\r\n                        (Number(costContract.quantity) / this.dialogData.totalQuantity)).toString();\r\n                    costContract.costAmountToInvoice = this.totalValueCtrl.value *\r\n                        (Number(costContract.quantity) / this.quantityCtrl.value);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onChanges(): void {\r\n        this.invoicePercentageCtrl.valueChanges.subscribe(() => {\r\n            this.onInvoicedPercentageChanged();\r\n        });\r\n        this.totalValueCtrl.valueChanges.subscribe(() => {\r\n            this.onTotalValueChanged();\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<h1 mat-dialog-title> Bank Account</h1>\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"column\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            placeholder=\\\"LDC Bank Account Details\\\"\\r\\n                            [formControl]=\\\"bankAccountCtrl\\\"\\r\\n                            matTooltip=\\\"Bank Account\\\">\\r\\n\\r\\n                    <mat-option *ngFor=\\\"let option of filteredCompanyBankAccounts\\\"\\r\\n                                [value]=\\\"option.bankAccountId\\\">\\r\\n                        {{option.bankName}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n                <mat-error *ngIf=\\\"bankAccountCtrl.hasError('required')\\\">\\r\\n                    Reference is required\\r\\n                </mat-error>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"filteredCompanyBankAccounts.length==0\\\">\\r\\n                    selected currency and company have no bank accounts\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayoutGap=\\\"50%\\\">\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\">Cancel</button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onConfirmButtonClicked()\\\">Confirm</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n\"","module.exports = \".mat-dialog-content {\\n  width: 500px; }\\n\"","import { Component, HostListener, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceRecord } from '../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { CompanyBankAccounts } from '../../../../shared/entities/company-bankaccounts.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-bank-account-dialog',\r\n    templateUrl: './bank-account-dialog.component.html',\r\n    styleUrls: ['./bank-account-dialog.component.scss'],\r\n})\r\n\r\nexport class BankAccountDialogComponent extends BaseFormComponent implements OnInit {\r\n    bankAccountCtrl = new AtlasFormControl('bankAccountCtrl');\r\n    masterData: MasterData = new MasterData();\r\n    invoiceRecord: InvoiceRecord;\r\n    filteredCompanyBankAccounts: CompanyBankAccounts[];\r\n    bankDetail: InvoiceRecord;\r\n    formGroup: FormGroup;\r\n    dialogData: {\r\n        title: string,\r\n        okButton: string,\r\n        cancelButton: string;\r\n        value: CompanyBankAccounts[];\r\n    };\r\n    bankAccountForm: FormGroup;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        public thisDialogRef: MatDialogRef<BankAccountDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { title: string, okButton: string, cancelButton: string, value: CompanyBankAccounts[] },\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.filteredCompanyBankAccounts = this.dialogData.value;\r\n        if (this.filteredCompanyBankAccounts.length > 0) {\r\n            if (this.filteredCompanyBankAccounts.length === 1) {\r\n                this.bankAccountCtrl.patchValue(this.filteredCompanyBankAccounts[0].bankAccountId);\r\n            } else if (this.filteredCompanyBankAccounts.length > 1) {\r\n                this.bankAccountCtrl.patchValue(this.filteredCompanyBankAccounts.filter((company) => company.bankAccountDefault === 1)[0].bankAccountId);               \r\n            }\r\n            this.bankAccountCtrl.setValidators([Validators.required]);\r\n        }\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.formGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    onConfirmButtonClicked() {\r\n        if (this.bankAccountCtrl.valid) {\r\n            const nominalAccount = this.bankAccountCtrl.value;\r\n            this.thisDialogRef.close({ isClose: true, selectedValue: nominalAccount });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors..');\r\n        }\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div [ngSwitch]=\\\"invoiceTypeId\\\">\\r\\n    <atlas-commercial #commercialComponent\\r\\n                      *ngSwitchDefault></atlas-commercial>\\r\\n    <atlas-cost #costComponent\\r\\n                *ngSwitchCase=InvoiceTypes.Cost>\\r\\n    </atlas-cost>\\r\\n    <atlas-goods-cost #goodsCostComponent\\r\\n                      *ngSwitchCase=InvoiceTypes.GoodsCostPurchase>\\r\\n    </atlas-goods-cost>\\r\\n    <atlas-goods-cost #goodsCostComponent\\r\\n                      *ngSwitchCase=InvoiceTypes.GoodsCostSales>\\r\\n    </atlas-goods-cost>\\r\\n    <atlas-washout #washoutComponent\\r\\n                   *ngSwitchCase=InvoiceTypes.Washout>\\r\\n    </atlas-washout>\\r\\n    <atlas-reversal #reversalComponent\\r\\n                    *ngSwitchCase=\\\"InvoiceTypes.Reversal\\\"></atlas-reversal>\\r\\n</div>\"","import { AfterViewInit, Component, OnInit, ViewChild, HostListener } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../shared/components/base-form-component/base-form-component.component';\r\nimport { InvoiceTypes } from '../../shared/enums/invoice-type.enum';\r\nimport { FormConfigurationProviderService } from '../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../shared/services/snackbar.service';\r\nimport { CommercialComponent } from './commercial/commercial.component';\r\nimport { CostComponent } from './cost/cost.component';\r\nimport { GoodsCostComponent } from './goods-cost/goods-cost.component';\r\nimport { ReversalComponent } from './reversal/reversal.component';\r\nimport { WashoutComponent } from './washout/washout.component';\r\nimport { TitleService } from '../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-invoicing',\r\n    templateUrl: './execution-invoicing.component.html',\r\n    styleUrls: ['./execution-invoicing.component.css'],\r\n})\r\n\r\nexport class ExecutionInvoicingComponent extends BaseFormComponent implements OnInit, AfterViewInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('washoutComponent') washoutComponent: WashoutComponent;\r\n    @ViewChild('commercialComponent') commercialComponent: CommercialComponent;\r\n    @ViewChild('costComponent') costComponent: CostComponent;\r\n    @ViewChild('goodsCostComponent') goodsCostComponent: GoodsCostComponent;\r\n    @ViewChild('reversalComponent') reversalComponent: ReversalComponent;\r\n\r\n    createInvoiceFormGroup: FormGroup;\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    invoiceLabel: string;\r\n    invoiceId: number;\r\n    selectedInvoiceId: number;\r\n    isFromGrid: boolean = false;\r\n    isSave: boolean = false;\r\n    /*\r\n\t-----------------------------------------------------------------------------------------------------------------------------------\r\n\tGLOBAL FUNCTIONS\r\n\t-----------------------------------------------------------------------------------------------------------------------------------\r\n\t*/\r\n\r\n    constructor(private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        private formBuilder: FormBuilder,\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private titleService: TitleService\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification($event: any) {\r\n        if (this.createInvoiceFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.commercialComponent) {\r\n            if ((this.commercialComponent.commercialWorkingPageComponent.invoiceWorkingFormGroup.dirty || this.commercialComponent.commercialSelectionComponent.invoiceSelectionContractFormGroup.dirty) &&\r\n                this.commercialComponent.stepper.selectedIndex !== 2) {\r\n                return window.confirm(\"Leave an unsave form? \\nYour changes won't be applied!\");\r\n            }\r\n        }\r\n        else if (this.costComponent) {\r\n            if ((this.costComponent.costSelectionComponent.invoiceSelectionFormGroup.dirty || this.costComponent.costWorkingPageComponent.invoiceCostWorkingFormGroup.dirty) && this.isSave === false) {\r\n                return window.confirm(\"Leave an unsave form? \\nYour changes won't be applied!\");\r\n            }\r\n        }\r\n        else if (this.washoutComponent) {\r\n            if ((this.washoutComponent.washoutSelectionComponent.invoiceSelectionFormGroup.dirty || this.washoutComponent.washoutWorkingPageComponent.invoiceWashoutWorkingFormGroup.dirty) && this.washoutComponent.isSaveClicked === false) {\r\n                return window.confirm(\"Leave an unsave form? \\nYour changes won't be applied!\");\r\n            }\r\n        }\r\n        else if (this.reversalComponent) {\r\n            if (this.reversalComponent.reversalSelectionComponent.invoiceSelectionFormGroup.dirty && this.isSave === false) {\r\n                return window.confirm(\"Leave an unsave form? \\nYour changes won't be applied!\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    ngAfterViewInit() {\r\n        if (this.invoiceTypeId === InvoiceTypes.Cost) {\r\n            this.isSave = true;\r\n            this.titleService.setTitle('Invoice Costs/Commissions Creation');\r\n            this.createInvoiceFormGroup = this.formBuilder.group({\r\n                costComponent: this.costComponent.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.costComponent);\r\n        } else if (this.invoiceTypeId === InvoiceTypes.Washout) {\r\n            this.titleService.setTitle('Washout Creation');\r\n            this.createInvoiceFormGroup = this.formBuilder.group({\r\n                washoutComponent: this.washoutComponent.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.washoutComponent);\r\n        } else if (this.invoiceTypeId === InvoiceTypes.GoodsCostPurchase || this.invoiceTypeId === InvoiceTypes.GoodsCostSales) {\r\n            this.titleService.setTitle('Invoice Goods & Cost  Creation');\r\n            this.createInvoiceFormGroup = this.formBuilder.group({\r\n                goodsCostComponent: this.goodsCostComponent.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.goodsCostComponent);\r\n        } else if (this.invoiceTypeId === InvoiceTypes.Reversal) {\r\n            this.isSave = true;\r\n            this.titleService.setTitle('Invoice Reversal Creation');\r\n            this.createInvoiceFormGroup = this.formBuilder.group({\r\n                reversalComponent: this.reversalComponent.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.reversalComponent);\r\n        } else {\r\n            this.titleService.setTitle('Invoice Commercial Creation');\r\n            this.createInvoiceFormGroup = this.formBuilder.group({\r\n                commercialComponent: this.commercialComponent.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.commercialComponent);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoading\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end start\\\">\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"apportion-button\\\"\\r\\n                    (click)=\\\"onApportionButtonClicked()\\\"\\r\\n                    [disabled]=\\\"isApportionDisable\\\">APPORTION</button>\\r\\n            <div>\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"costContractGridOptions && costContractGridOptions.columnDefs\\\"\\r\\n                                                [gridOptions]=\\\"costContractGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"componentId\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div ag-grid=\\\"invoiceContractGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n         style=\\\"width: 100%; height:100%\\\">\\r\\n        <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"costContractGridRows\\\"\\r\\n                         [columnDefs]=\\\"costContractGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         [suppressRowClickSelection]=\\\"true\\\"\\r\\n                         (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                         (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                         (rowDataChanged)=\\\"onRowDataChanged($event)\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { ToleranceTypes } from '../../../../../../../shared/enums/tolerance-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { CommonMethods } from '../../../../../../services/execution-cash-common-methods';\r\nimport { ApportionDialogComponent } from '../../../../../dialog-boxes/apportion-dialog/apportion-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-contracts-cost',\r\n    templateUrl: './goods-cost-contracts-cost.component.html',\r\n    styleUrls: ['./goods-cost-contracts-cost.component.scss'],\r\n})\r\nexport class GoodsCostContractsCostComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @Output() readonly costContractsSelected = new EventEmitter<boolean>();\r\n    costContractGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    costContractGridColumns: agGrid.ColDef[];\r\n    costContractGridRows: ContractsToCostInvoice[];\r\n    contractsToInvoice: ContractsToCostInvoice[];\r\n    selectedCostContracts: ContractsToCostInvoice[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    isApportion: boolean = true;\r\n    dataLength: number = 0;\r\n    invoiceType: number;\r\n    company: string;\r\n    componentId: string = 'invoiceCostSelectionGrid';\r\n    hasGridSharing: boolean = false;\r\n    isContractSelected: boolean = false;\r\n    tolerancePercentage: number;\r\n    counterParty: string;\r\n    formatType: string = 'en-US';\r\n    rateType: RateTypes;\r\n    isApportionDisable: boolean = true;\r\n    totalQuantity: number = 0;\r\n    totalInvocieValue: number = 0;\r\n    isCostAmountChanged: boolean = true;\r\n    selected: boolean = false;\r\n\r\n    constructor(private executionService: ExecutionService,\r\n        private route: ActivatedRoute, protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private snackbarService: SnackbarService,\r\n        public gridService: AgGridService,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.componentId)\r\n            .subscribe((configuration) => {\r\n                this.initializeGridColumns();\r\n                // -- used later if this will become L&S maybe\r\n                // this.columnConfiguration = configuration.columns;\r\n                // this.configurationLoaded.emit();\r\n                // this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.costContractGridColumns;\r\n        this.costContractGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi !== undefined) {\r\n            const allColumnIds = [];\r\n            if (this.costContractGridColumns) {\r\n                this.costContractGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.costContractGridColumns = [\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Commodity',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Supplier',\r\n                field: 'supplierCode',\r\n                colId: 'supplierCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Term',\r\n                field: 'contractTermCode',\r\n                colId: 'contractTermCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Charter Reference',\r\n                field: 'charterReference',\r\n                colId: 'charterReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                editable: this.onRowSelectionChanged.bind(this),\r\n                type: 'numericColumn',\r\n                onCellValueChanged: this.onQuantityChanged.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'weightCode',\r\n                colId: 'weightCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Rate/Amount',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmount',\r\n                colId: 'costAmount',\r\n                valueGetter: this.calculateCostAmount.bind(this),\r\n                valueFormatter: this.formatValue.bind(this),\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Amount to Invoice',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                editable: this.onRowSelectionChanged.bind(this),\r\n                valueSetter: this.setCostAmountToInvoice.bind(this),\r\n                valueFormatter: this.formatValue.bind(this),\r\n                onCellValueChanged: this.onQuantityChanged.bind(this),\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'invoicePercent',\r\n                colId: 'invoicePercent',\r\n                hide: false,\r\n                valueSetter: this.setInvoicePercent.bind(this),\r\n                valueFormatter: this.formatValue.bind(this),\r\n                editable: this.onRowSelectionChanged.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    onRowSelectionChanged(event): boolean {\r\n        const isSelected = event.node.selected ? true : false;\r\n        return isSelected;\r\n    }\r\n\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(param.value);\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param && param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            if (param.colDef.colId.toLowerCase() === 'quantity') {\r\n                return commonMethods.getFormattedNumberValue(param.value, 3);\r\n            } else {\r\n                return commonMethods.getFormattedNumberValue(param.value, 4);\r\n            }\r\n        }\r\n    }\r\n\r\n    setCostAmountToInvoice(params) {\r\n        if (params.newValue <= 0) {\r\n            this.snackbarService.informationSnackBar('0 or negative cost cannot be invoiced');\r\n            params.data.costAmountToInvoice = params.data.costAmount;\r\n        } else {\r\n            const costAmount = params.data ? params.data.costAmount : params.costAmount;\r\n            const tolerance: number = this.tolerancePercentage * 100;\r\n            if (this.tolerancePercentage !== ToleranceTypes.Percentage) {\r\n                const minToleranceBand: number = costAmount -\r\n                    (costAmount * this.tolerancePercentage);\r\n                const maxToleranceBand: number = costAmount +\r\n                    (costAmount * this.tolerancePercentage);\r\n                if (params.newValue < minToleranceBand || params.newValue > maxToleranceBand) {\r\n                    this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Tolerance Information',\r\n                            text: 'Cost Amount to Invoice is greater/less than ' + tolerance + '% – than the cost originally estimated',\r\n                            okButton: 'Ok',\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n            if (params.newValue) {\r\n                params.data.costAmountToInvoice = Number(params.newValue);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    calculateCostAmount(params) {\r\n        if (this.isCostAmountChanged) {\r\n            if (params.data.rateTypeCode === RateTypes[RateTypes.Amount]) {\r\n                params.data.costAmount = params.data.rate;\r\n            } else if (params.data.rateTypeCode === RateTypes[RateTypes.Percent]) {\r\n                params.data.costAmount = (Number(params.data.quantity) * params.data.price * params.data.rate * params.data.priceConversionFactor * params.data.weightConversionFactor / 100);\r\n            } else if (params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n                params.data.costAmount =\r\n                    Number(params.data.quantity) * params.data.priceConversionFactor * (params.data.weightConversionFactor) * params.data.rate;\r\n            }\r\n        }\r\n        return params.data.costAmount;\r\n    }\r\n\r\n    calculateCostAmountOnSelection(contract) {\r\n        if (contract.rateTypeCode === RateTypes[RateTypes.Amount]) {\r\n            contract.costAmount = contract.rate;\r\n        } else if (contract.rateTypeCode === RateTypes[RateTypes.Percent]) {\r\n            contract.costAmount = (Number(contract.quantity) * contract.price * contract.weightConversionFactor * contract.priceConversionFactor * contract.rate / 100);\r\n        } else if (contract.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n            contract.costAmount =\r\n                Number(contract.quantity) * contract.priceConversionFactor * (contract.weightConversionFactor) * contract.rate;\r\n        }\r\n        return contract.costAmount;\r\n    }\r\n\r\n    getContractsToInvoice(sectionIds: number[], contracts: ContractsToInvoice[]) {\r\n        this.isLoading = true;\r\n        this.subscriptions.push(this.executionService.getCostForSelectedContracts(sectionIds)\r\n            .subscribe((data) => {\r\n                this.contractsToInvoice = data.value;\r\n                contracts.forEach(\r\n                    (selectedContractToInvoice: ContractsToInvoice) => {\r\n                        this.contractsToInvoice.forEach((contractToInvoice: ContractsToCostInvoice) => {\r\n                            if (contractToInvoice.sectionId === selectedContractToInvoice.sectionId) {\r\n                                const oldContractQuantity = contractToInvoice.quantity;\r\n                                const contractQuantity = selectedContractToInvoice.quantityToInvoice.toString();\r\n                                contractToInvoice.quantityToInvoice = selectedContractToInvoice.quantityToInvoice;\r\n                                contractToInvoice.originalQuantity = oldContractQuantity;\r\n                            }\r\n                        });\r\n\r\n                    },\r\n                );\r\n\r\n                this.initializeGridColumns();\r\n                this.costContractGridRows = this.contractsToInvoice;\r\n                this.dataLength = this.costContractGridRows.length;\r\n                this.autoSizeContractsGrid();\r\n                this.isLoading = false;\r\n                if (this.dataLength) {\r\n                    this.counterParty = this.costContractGridRows[0].supplierCode;\r\n                }\r\n\r\n            }));\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        const invoicedPercentage: number = 100;\r\n        this.isApportionDisable = true;\r\n        this.isApportion = true;\r\n        const selectedRows: ContractsToCostInvoice[] = this.gridApi.getSelectedRows();\r\n        if (!event.node.selected) {\r\n            event.data.costAmountToInvoice = null;\r\n            event.data.invoicePercent = null;\r\n            event.data.costAmountToInvoice = null;\r\n            event.data.invoicePercent = null;\r\n            event.data.quantity = null;\r\n        } else {\r\n            selectedRows.forEach(\r\n                (selectedContract: ContractsToCostInvoice) => {\r\n                    if (!selectedContract.costAmount) {\r\n                        selectedContract.costAmountToInvoice = this.calculateCostAmountOnSelection(selectedContract);\r\n                        selectedContract.invoicePercent = invoicedPercentage;\r\n                        this.setCostAmountToInvoice(selectedContract);\r\n                    } else {\r\n                        selectedContract.costAmountToInvoice = selectedContract.costAmount;\r\n                        selectedContract.invoicePercent = invoicedPercentage;\r\n                        this.setCostAmountToInvoice(selectedContract);\r\n                    }\r\n                    const oldContractQuantity = selectedContract.quantity;\r\n                    if (selectedContract.quantityToInvoice) {\r\n                        selectedContract.quantity = selectedContract.quantityToInvoice.toString();\r\n                        selectedContract.quantityToInvoice = null;\r\n                        this.quantityOnSelectionChanged(selectedContract.quantity, oldContractQuantity, selectedContract);\r\n                    } else if (!selectedContract.quantity) {\r\n                        selectedContract.quantity = selectedContract.originalQuantity;\r\n                        selectedContract.invoicePercent = invoicedPercentage;\r\n                        selectedContract.costAmountToInvoice = this.calculateCostAmountOnSelection(selectedContract);\r\n                        this.quantityOnSelectionChanged(selectedContract.quantity, selectedContract.quantity, selectedContract);\r\n                    } else {\r\n                        selectedContract.invoicePercent = invoicedPercentage;\r\n                        selectedContract.costAmountToInvoice = this.calculateCostAmountOnSelection(selectedContract);\r\n                        this.quantityOnSelectionChanged(selectedContract.quantity, selectedContract.originalQuantity, selectedContract);\r\n                    }\r\n                },\r\n            );\r\n\r\n            if (selectedRows.length > 1) {\r\n                let costDirection: string;\r\n                let costTypeCode: string;\r\n                this.isApportionDisable = false;\r\n                for (const row of selectedRows) {\r\n                    if (!costDirection && row) {\r\n                        costDirection = row.costDirection;\r\n                    }\r\n                    if (!costTypeCode && row) {\r\n                        costTypeCode = row.costTypeCode;\r\n                    }\r\n                    if (row && ((costDirection !== row.costDirection)\r\n                        || (costTypeCode !== row.costTypeCode))) {\r\n                        this.isApportion = false;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        this.isContractSelected = selectedRows.length > 0;\r\n        this.costContractsSelected.emit(this.isContractSelected);\r\n        this.selectedCostContracts = selectedRows;\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    setTolerancePercentage(tolerancePercentage) {\r\n        this.tolerancePercentage = tolerancePercentage;\r\n    }\r\n\r\n    onRowDataChanged(params) {\r\n        if (this.counterParty) {\r\n            const counterPartyFilterComponent = this.gridApi.getFilterInstance('supplierCode');\r\n            counterPartyFilterComponent.setModel({\r\n                type: 'set',\r\n                values: [this.counterParty],\r\n            });\r\n            this.gridApi.onFilterChanged();\r\n        }\r\n    }\r\n    onQuantityChanged(params) {\r\n        let validQuantity = true;\r\n        if (params.newValue > params.data.originalQuantity) {\r\n            validQuantity = false;\r\n            params.data.quantity = Number(params.oldValue);\r\n\r\n        } else {\r\n            params.data.quantity = Number(params.newValue);\r\n        }\r\n\r\n        if (!validQuantity) {\r\n            this.snackbarService.informationSnackBar('Quantity cannot be greater than contract quantity');\r\n        } else {\r\n            if (params && params.data) {\r\n                const invoicePercercentage = (100 * params.newValue) / params.oldValue;\r\n                params.data.invoicePercent = (params.data.invoicePercent * invoicePercercentage) / 100;\r\n                params.data.costAmount = (params.data.costAmount * invoicePercercentage) / 100;\r\n                params.data.costAmountToInvoice = (params.data.costAmountToInvoice * invoicePercercentage) / 100;\r\n\r\n            }\r\n        }\r\n\r\n        if (this.gridApi) {\r\n            this.gridApi.refreshCells(params.data);\r\n        }\r\n    }\r\n\r\n    quantityOnSelectionChanged(quantity: string, oldQuantity: string, contractToInvoice: ContractsToCostInvoice) {\r\n        if (quantity) {\r\n            const invoicePercercentage = (100 * parseInt(quantity)) / parseInt(oldQuantity);\r\n\r\n            contractToInvoice.invoicePercent = (contractToInvoice.invoicePercent * invoicePercercentage) / 100;\r\n            contractToInvoice.costAmount = (contractToInvoice.costAmount * invoicePercercentage) / 100;\r\n            contractToInvoice.costAmountToInvoice = (contractToInvoice.costAmountToInvoice * invoicePercercentage) / 100;\r\n        }\r\n\r\n    }\r\n\r\n    onApportionButtonClicked() {\r\n        if (this.isApportion) {\r\n            this.getTotalQuantityAndTotalInvoiceValue();\r\n            const openApportiontDialog = this.dialog.open(ApportionDialogComponent, {\r\n                width: '40%',\r\n                height: '60%',\r\n                data: {\r\n                    selectedRows: this.selectedCostContracts,\r\n                    totalQuantity: this.totalQuantity,\r\n                    totalInvoiceValue: this.totalInvocieValue,\r\n                },\r\n\r\n            });\r\n\r\n            openApportiontDialog.afterClosed().subscribe((updatedCostContracts: ContractsToCostInvoice[]) => {\r\n                this.updateSelectedCostRows(updatedCostContracts);\r\n                this.isCostAmountChanged = false;\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Apportion Cannot be done for multiple costs types or if there is a mix of Pay/Rec');\r\n        }\r\n    }\r\n\r\n    getTotalQuantityAndTotalInvoiceValue() {\r\n        this.totalQuantity = 0;\r\n        this.totalInvocieValue = 0;\r\n        if (this.selectedCostContracts) {\r\n            this.selectedCostContracts.forEach((costContract) => {\r\n                this.totalQuantity += Number(costContract.quantity);\r\n                this.totalInvocieValue += costContract.costAmountToInvoice;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateSelectedCostRows(updatedCostContracts: ContractsToCostInvoice[]) {\r\n        if (updatedCostContracts) {\r\n            this.gridApi.updateRowData({ update: updatedCostContracts });\r\n        }\r\n    }\r\n\r\n    setInvoicePercent(params): boolean {\r\n        if (params.newValue <= 0 || !params.data.invoicePercent) {\r\n            this.snackbarService.informationSnackBar('Invoice Percentage cannot be 0 or negative');\r\n            params.data.invoicePercent = params.oldValue < 1 ? 1 : params.oldValue;\r\n        } else if (params.newValue > 100) {\r\n            this.snackbarService.informationSnackBar('Invoice Percentage cannot be greater than 100');\r\n            params.data.invoicePercent = params.oldValue < 100 ? params.oldValue : 100;\r\n        } else if ((params.newValue > params.oldValue)) {\r\n            this.snackbarService.informationSnackBar('Invoice Percentage cannot be greater available percentage');\r\n            params.data.invoicePercent = params.oldValue;\r\n        } else {\r\n            params.data.invoicePercent = params.newValue;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","module.exports = \"<atlas-goods-cost-invoice-selection #goodsCostInvoiceSelectionComponent>\\r\\n</atlas-goods-cost-invoice-selection>\\r\\n<atlas-goods-cost-contracts-cost #goodsCostContractsCostComponent>\\r\\n</atlas-goods-cost-contracts-cost>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GoodsCostInvoiceSelectionComponent } from '../goods-cost-selection/components/goods-cost-invoice-selection/goods-cost-invoice-selection.component';\r\nimport { GoodsCostContractsCostComponent } from './components/goods-cost-contracts-cost/goods-cost-contracts-cost.component';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-selection-cost',\r\n    templateUrl: './goods-cost-selection-cost.component.html',\r\n    styleUrls: ['./goods-cost-selection-cost.component.scss'],\r\n})\r\nexport class GoodsCostSelectionCostComponent extends BaseFormComponent implements OnInit {\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('goodsCostInvoiceSelectionComponent') goodsCostInvoiceSelectionComponent: GoodsCostInvoiceSelectionComponent;\r\n    @ViewChild('goodsCostContractsCostComponent') goodsCostContractsCostComponent: GoodsCostContractsCostComponent;\r\n\r\n    goodsCostSelectionCostFormGroup: FormGroup;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.goodsCostSelectionCostFormGroup = this.formBuilder.group({\r\n            goodsCostContractsCostComponent: this.goodsCostContractsCostComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.goodsCostContractsCostComponent);\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <form [formGroup]=\\\"searchContractForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           fxFlex=\\\"30%\\\"\\r\\n                           placeholder=\\\"Contract Search\\\"\\r\\n                           (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                           formControlName=\\\"searchContractReferenceCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"charterReferenceCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCharters\\\"\\r\\n                                                         label=\\\"Charter Reference\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                                                         displayProperty=\\\"charterCode\\\"\\r\\n                                                         [selectProperties]=\\\"['charterCode','description']\\\"\\r\\n                                                         [errorMap]=\\\"charterErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for charters\\\"\\r\\n                                                         gridId=\\\"charterGrid\\\"\\r\\n                                                         [dataLoader]=\\\"charterDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                         label=\\\"Counter Party\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchButtonClicked()\\\"\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card>\\r\\n</div>\\r\\n<atlas-filter-set-display (filtersChanged)=\\\"onFilterSetDetailsChange($event)\\\"\\r\\n                          [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                          [gridCode]=\\\"gridCode\\\"\\r\\n                          [company]=\\\"company\\\"\\r\\n                          #filterSetDisplayComponent>\\r\\n</atlas-filter-set-display>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card fxFlex=\\\"100\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"invoiceContractGridOptions && invoiceContractGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"invoiceContractGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"invoiceContractGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"invoiceContractGridRows\\\"\\r\\n                             [gridOptions]=\\\"invoiceContractGridOptions\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (firstDataRendered)=\\\"onFirstDataRendered($event)\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             (rowDataChanged)=\\\"onRowDataChanged($event)\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n                Total Quantity : <span class=\\\"total-figure-value\\\">\\r\\n                    {{formatQuantity(this.totalQuantity)}}\\r\\n                </span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ListAndSearchFilterDto } from '../../../../../../../shared/dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../../../shared/entities/charter.entity';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { IsLocked } from '../../../../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { LockFunctionalContext } from '../../../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from '../../../../../../../shared/enums/contract-type.enum';\r\nimport { InvoiceTypes } from '../../../../../../../shared/enums/invoice-type.enum';\r\nimport { ListAndSearchFilterType } from '../../../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../../../../shared/services/execution/charter-data-loader';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../../../shared/services/http-services/lock.service';\r\nimport { CounterPartyDataLoader } from '../../../../../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { ExecutionActionsService } from '../../../../../../services/execution-actions.service';\r\nimport { FilterSetDisplayComponent } from './../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-contract-search',\r\n    templateUrl: './goods-cost-contract-search.component.html',\r\n    styleUrls: ['./goods-cost-contract-search.component.scss'],\r\n    providers: [CounterPartyDataLoader, CharterDataLoader],\r\n})\r\nexport class GoodsCostContractSearchComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplayComponent') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n\r\n    @Output() readonly commoditySelected = new EventEmitter<{ differentCommoditySelected: boolean, differentPricesSelected: boolean }>();\r\n    @Output() readonly contractsSelected = new EventEmitter<boolean>();\r\n    invoiceContractGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    invoiceContractGridColumns: agGrid.ColDef[];\r\n    invoiceContractGridRows: ContractsToInvoice[];\r\n    contractsToInvoice: ContractsToInvoice[];\r\n    allContracts: ContractsToInvoice[];\r\n    selectedContractsToInvoice: ContractsToInvoice[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    searchTerm: string;\r\n    dataLength: number = 0;\r\n    searchContractForm: FormGroup;\r\n    totalQuantity: number = 0;\r\n    invoiceType: number;\r\n    company: string;\r\n    formatType: string = 'en-US';\r\n    // componentId: string = 'invoiceContract';\r\n    decimalOptionValue: number = 3;\r\n    savedSearchTerm: string;\r\n    differentCommoditySelected: boolean;\r\n    isContractSelected: boolean = false;\r\n    counterParty: string;\r\n    isBusinessSectorPostingProcess: boolean = false;\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    gridCode: string;\r\n    filters: ListAndSearchFilter[];\r\n    differentPricesSelected: boolean;\r\n    hasGridSharing = false;\r\n    columnDefs: agGrid.ColDef[];\r\n    additionnalColumns = [\r\n        {\r\n            headerName: 'Uninvoiced Quantity',\r\n            field: 'uninvoicedQuantity',\r\n            colId: 'uninvoicedQuantity',\r\n            type: 'numericColumn',\r\n            hide: false,\r\n            valueGetter: this.getUnInvoicedQuantity,\r\n            valueFormatter: this.formatValue.bind(this),\r\n        },\r\n        {\r\n            headerName: 'Quantity to invoice',\r\n            field: 'quantityToInvoice',\r\n            colId: 'quantityToInvoice',\r\n            type: 'numericColumn',\r\n            hide: false,\r\n            editable: this.isQuantityToInvoiceEditable.bind(this),\r\n            valueSetter: this.setQuantityToInvoice.bind(this),\r\n            valueFormatter: this.formatValue.bind(this),\r\n        },\r\n    ];\r\n    saveContractRef: string;\r\n    saveCounterparty: string;\r\n    saveCharterReference: string;\r\n    counterPartyControl: Counterparty;\r\n    counterPartyList: Counterparty[];\r\n    searchCounterPartyTerm: string;\r\n    searchCharterTerm: string;\r\n    charterRefControl: Charter;\r\n    filteredCounterPartyList: Counterparty[];\r\n    masterdata: MasterData = new MasterData();\r\n    counterPartyCtrl = new AtlasFormControl('CounterPartyGoodsCost');\r\n    filteredCharters: Charter[];\r\n    charters: Charter[];\r\n    charterReferenceCtrl = new AtlasFormControl('CharterRefGoodsCost');\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Counter Party not in the list.');\r\n    charterErrorMap: Map<string, string> = new Map();\r\n    agGridOptions: agGrid.GridOptions;\r\n    count: number = 0;\r\n    savedFilters: ListAndSearchFilter[];\r\n\r\n    constructor(private formBuilder: FormBuilder, private executionService: ExecutionService,\r\n        private route: ActivatedRoute, private snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        protected lockService: LockService,\r\n        protected dialog: MatDialog,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        public charterDataLoader: CharterDataLoader,\r\n        private agGridService: AgGridService,\r\n        public gridService: AgGridService,\r\n        public executionActionsService: ExecutionActionsService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.searchContractForm = this.formBuilder.group({\r\n            searchContractReferenceCtrl: [''],\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.isLoading = true;\r\n        this.gridCode = this.invoiceType === InvoiceTypes.GoodsCostPurchase ? 'invoicePurcGoodsSelectionGrid' : 'invoiceSaleGoodsSelectionGrid'\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyList = this.filteredCounterPartyList;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.populateCharterList();\r\n        this.charterReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCharterReference(input);\r\n        });\r\n        this.loadGridConfiguration();\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.saveContractRef = params['savedContractReference'];\r\n            this.saveCounterparty = params['savedCounterParty'];\r\n            this.saveCharterReference = params['savedCharterReference'];\r\n        });\r\n        if (this.executionActionsService.EditCriteriaRetainFilter && this.executionActionsService.EditCriteriaRetainFilter.length > 0) {\r\n            this.savedFilters = this.executionActionsService.EditCriteriaRetainFilter;\r\n        }\r\n        if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference) {\r\n            if (this.saveContractRef) {\r\n                this.searchContractForm.controls['searchContractReferenceCtrl'].setValue(this.saveContractRef);\r\n            }\r\n            if (this.saveCounterparty) {\r\n                this.counterPartyControl = this.counterPartyList.find((counterParty) =>\r\n                    counterParty.counterpartyCode === this.saveCounterparty);\r\n                this.counterPartyCtrl.patchValue(this.counterPartyControl);\r\n            }\r\n            if (this.saveCharterReference) {\r\n                this.charterRefControl = this.charters.find((charter) =>\r\n                    charter.charterCode === this.saveCharterReference);\r\n                this.charterReferenceCtrl.patchValue(this.charterRefControl);\r\n            }\r\n        }\r\n        this.getBusinessSectorConfiguration();\r\n        if (this.agGridOptions) {\r\n            this.agGridService.sizeColumns(this.agGridOptions);\r\n        }\r\n    }\r\n    getBusinessSectorConfiguration() {\r\n        this.executionService.getBusinessSectorForPosting()\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.isBusinessSectorPostingProcess = data.businessSectorNominalPostingPurpose;\r\n                }\r\n            });\r\n    }\r\n\r\n    populateCharterList() {\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.charters = charter;\r\n            this.filteredCharters = this.charters;\r\n        });\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onSearchButtonClicked();\r\n        }\r\n    }\r\n    filterCharterReference(input) {\r\n        this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.charters,\r\n            ['charterCode', 'description'],\r\n        );\r\n        if (this.charterReferenceCtrl.valid || !this.charterReferenceCtrl.value) {\r\n            this.onSearchButtonClicked();\r\n        }\r\n    }\r\n\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(param.value);\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.invoiceContractGridColumns;\r\n        this.invoiceContractGridOptions = params;\r\n\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.agGridOptions = params;\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeContractsGrid();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    getUnInvoicedQuantity(params) {\r\n        if (params.data.contractQuantity - params.data.invoicedQuantity > 0) {\r\n            return params.data.contractQuantity - params.data.invoicedQuantity;\r\n        } else if (params.data.contractQuantity - params.data.invoicedQuantity < 0) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    setQuantityToInvoice(params) {\r\n        if (params) {\r\n            let validQuantity = true;\r\n            let invalidValue = true;\r\n            if (params.newValue > (params.data.contractQuantity - params.data.invoicedQuantity)) {\r\n                validQuantity = false;\r\n                params.data.quantityToInvoice = (params.data.contractQuantity - params.data.invoicedQuantity);\r\n            } else if (params.newValue <= 0) {\r\n                invalidValue = false;\r\n                params.data.quantityToInvoice = (params.data.contractQuantity - params.data.invoicedQuantity);\r\n            } else {\r\n                params.data.quantityToInvoice = Number(params.newValue);\r\n            }\r\n\r\n            if (!validQuantity) {\r\n                this.snackbarService.informationSnackBar('Quantity cannot be greater than uninvoiced quantity');\r\n            }\r\n            if (!invalidValue) {\r\n                this.snackbarService.informationSnackBar('Quantity cannot be zero or negative');\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getContractsToInvoice() {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration.length > 0 && this.columnConfiguration) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            let contractType;\r\n\r\n            if (this.invoiceType === InvoiceTypes.GoodsCostPurchase) {\r\n                contractType = ContractTypes.Purchase;\r\n            } else if (this.invoiceType === InvoiceTypes.GoodsCostSales) {\r\n                contractType = ContractTypes.Sale;\r\n            }\r\n\r\n            const contractTypeCodeColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'ContractTypeCode');\r\n            if (this.invoiceType && contractTypeCodeColumn && ContractTypes[contractType]) {\r\n                const filterContractType = new ListAndSearchFilter();\r\n                filterContractType.fieldId = contractTypeCodeColumn.fieldId;\r\n                filterContractType.fieldName = contractTypeCodeColumn.fieldName;\r\n                filterContractType.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: ContractTypes[contractType],\r\n                };\r\n                filterContractType.isActive = true;\r\n                filters.push(filterContractType);\r\n            }\r\n            if (this.invoiceType === InvoiceTypes.GoodsCostPurchase) {\r\n                this.executionService.searchContractsToPurchaseInvoiceForCommercial(filters)\r\n                    .pipe(\r\n                        finalize(() => {\r\n                            this.isLoading = false;\r\n                        }),\r\n                    )\r\n                    .subscribe((data) => {\r\n                        this.contractsToInvoice = data;\r\n                        this.getData();\r\n                    });\r\n            }\r\n            else if (this.invoiceType === InvoiceTypes.GoodsCostSales) {\r\n                this.executionService.searchContractsToSaleInvoiceForCommercial(filters)\r\n                    .pipe(\r\n                        finalize(() => {\r\n                            this.isLoading = false;\r\n                        }),\r\n                    )\r\n                    .subscribe((data) => {\r\n                        this.contractsToInvoice = data;\r\n                        this.getData();\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        this.invoiceContractGridRows = this.contractsToInvoice.filter((contract) =>\r\n            (contract.contractQuantity - contract.invoicedQuantity) > 0);\r\n        this.allContracts = this.invoiceContractGridRows;\r\n        this.dataLength = this.invoiceContractGridRows.length;\r\n        // this.autoSizeContractsGrid();\r\n        if (this.dataLength && this.dataLength > 0) {\r\n            this.counterParty = this.invoiceContractGridRows[0].counterparty;\r\n        }\r\n        if (this.filters.length === 0) {\r\n            if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference) {\r\n                this.onSearchButtonClicked();\r\n            }\r\n        }\r\n    }\r\n\r\n    onSearchButtonClicked() {\r\n        this.searchTerm = this.searchContractForm.get('searchContractReferenceCtrl').value;\r\n        if (this.counterPartyCtrl.value === '') {\r\n            this.searchCounterPartyTerm = this.counterPartyCtrl.value;\r\n        } else\r\n            if (this.counterPartyCtrl.value) {\r\n                this.searchCounterPartyTerm = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n                if (!this.searchCounterPartyTerm) {\r\n                    this.searchCounterPartyTerm = this.counterPartyCtrl.value;\r\n                }\r\n            }\r\n        if (this.charterReferenceCtrl.value === '') {\r\n            this.searchCharterTerm = this.charterReferenceCtrl.value;\r\n        } else {\r\n            if (this.charterReferenceCtrl.value) {\r\n                this.searchCharterTerm = (this.charterReferenceCtrl.value as Charter).charterCode;\r\n                if (this.searchCharterTerm) {\r\n                    this.searchCharterTerm = this.charterReferenceCtrl.value;\r\n                }\r\n            }\r\n        }\r\n        if (!this.searchTerm && !this.searchCharterTerm && !this.searchCounterPartyTerm) {\r\n            this.invoiceContractGridRows = this.allContracts;\r\n        } else {\r\n            this.isLoading = true;\r\n\r\n            // added check to avoid runtime error with Array.Find\r\n            if (this.allContracts && this.allContracts.length > 0) {\r\n                this.contractsToInvoice = this.allContracts;\r\n                this.filters = [];\r\n                if (this.searchTerm && !(this.searchTerm === '')) {\r\n                    this.contractsToInvoice = this.contractsToInvoice.filter((item) =>\r\n                        item.contractReference.toString().toUpperCase().includes(this.searchTerm.toUpperCase()));\r\n                }\r\n                if (this.searchCharterTerm && !(this.searchCharterTerm === '')) {\r\n                    const charterValue = (this.charterReferenceCtrl.value as Charter).charterCode;\r\n                    if (charterValue) {\r\n                        this.contractsToInvoice = this.contractsToInvoice.filter((item) => item.charter != null);\r\n                        this.contractsToInvoice = this.contractsToInvoice.filter((item) =>\r\n                            item.charter.toString().toUpperCase().includes(charterValue.toUpperCase()));\r\n                    }\r\n                }\r\n                if (this.searchCounterPartyTerm && !(this.searchCounterPartyTerm === '')) {\r\n                    this.contractsToInvoice = this.contractsToInvoice.filter((item) => item.counterparty != null);\r\n                    this.contractsToInvoice = this.contractsToInvoice.filter((item) =>\r\n                        item.counterparty.toString().toUpperCase().includes(this.searchCounterPartyTerm.toUpperCase()));\r\n                }\r\n            }\r\n            this.invoiceContractGridRows = this.contractsToInvoice;\r\n        }\r\n        this.dataLength = this.invoiceContractGridRows.length;\r\n        this.autoSizeContractsGrid();\r\n        this.isLoading = false;\r\n        if (this.dataLength && this.dataLength > 0) {\r\n            this.counterParty = this.invoiceContractGridRows[0].counterparty;\r\n        }\r\n        (this.invoiceContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        this.totalQuantity = 0;\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        const currentRowIndex = event.rowIndex;\r\n        let validQuantity = true;\r\n        let valid = true;\r\n        let validBusinessSector = true;\r\n        if (event.node.isSelected()) {\r\n            selectedRows.forEach(\r\n                (selectedContract: ContractsToInvoice) => {\r\n                    if (selectedContract.contractQuantity > selectedContract.invoicedQuantity) {\r\n                        if (selectedContract.quantityToInvoice === 0) {\r\n                            selectedContract.quantityToInvoice =\r\n                                (selectedContract.contractQuantity - selectedContract.invoicedQuantity);\r\n                        }\r\n                        this.gridApi.refreshCells(event.data);\r\n                        this.totalQuantity += selectedContract.quantityToInvoice;\r\n                    } else {\r\n                        validQuantity = false;\r\n                    }\r\n                },\r\n            );\r\n        } else {\r\n            event.data.quantityToInvoice = 0;\r\n            this.gridApi.refreshCells(event.data);\r\n        }\r\n        if (selectedRows.length > 1) {\r\n            let currencySelected;\r\n            let counterpartySelected;\r\n            let businessSectorSelected;\r\n            for (const row of selectedRows) {\r\n                if (!currencySelected) {\r\n                    currencySelected = row.currencyCode;\r\n                }\r\n                if (!counterpartySelected) {\r\n                    counterpartySelected = row.counterparty;\r\n                }\r\n                if (!businessSectorSelected) {\r\n                    businessSectorSelected = row.businessSector;\r\n                }\r\n                if (currencySelected !== row.currencyCode || counterpartySelected !== row.counterparty) {\r\n                    valid = false;\r\n                    break;\r\n                }\r\n\r\n                if (this.isBusinessSectorPostingProcess) {\r\n                    if (businessSectorSelected !== row.businessSector) {\r\n                        validBusinessSector = false;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        if (!valid) {\r\n            this.snackbarService.informationSnackBar('Currency & Counterparty should be same');\r\n        }\r\n        if (!validBusinessSector) {\r\n            this.snackbarService.informationSnackBar('While invoicing, Business Sector must be the same');\r\n        }\r\n        if (!validQuantity) {\r\n            this.snackbarService.informationSnackBar('Value cannot be negative or more than the uninvoiced quantity');\r\n        }\r\n        let rowNode: agGrid.RowNode;\r\n        this.invoiceContractGridOptions.api.forEachNode((node) => {\r\n            if (Number(node.id) === currentRowIndex) {\r\n                rowNode = node;\r\n                if (valid === false || validQuantity === false || validBusinessSector === false) {\r\n                    this.invoiceContractGridOptions.api.deselectNode(node);\r\n                }\r\n            }\r\n        });\r\n        this.checkCommoditySelected(selectedRows);\r\n        this.isContractSelected = selectedRows.length > 0;\r\n        this.contractsSelected.emit(this.isContractSelected);\r\n        this.grantLock(Number(event.data.sectionId), event.node);\r\n        this.selectedContractsToInvoice = selectedRows;\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.invoiceContractGridOptions.api.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        this.subscriptions.push(\r\n                            this.lockService.lockContract(sectionId, LockFunctionalContext.ContractInvoicing)\r\n                                .subscribe(() => {\r\n                                    this.refeshResourceInformation();\r\n                                    this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                }));\r\n\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                if (this.resourcesInformation.filter((rsc) => rsc.resourceId === sectionId).length === 0) {\r\n                    this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.ContractInvoicing)\r\n                        .subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                        }));\r\n                } else {\r\n                    node.setRowSelectable(true);\r\n                    this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.invoiceContractGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkCommoditySelected(selectedRows: ContractsToInvoice[]) {\r\n        this.differentCommoditySelected = false;\r\n        this.differentPricesSelected = false;\r\n        if (selectedRows.length > 1) {\r\n            const firstSelectedRow = selectedRows[0];\r\n            this.differentCommoditySelected = selectedRows.filter(\r\n                (row) => row.commodity.trim() !== firstSelectedRow.commodity.trim()).length > 0;\r\n            this.differentPricesSelected = selectedRows.filter(\r\n                (row) => row.price !== firstSelectedRow.price).length > 0;\r\n        }\r\n        this.commoditySelected.emit({\r\n            differentCommoditySelected: this.differentCommoditySelected, differentPricesSelected: this.differentPricesSelected,\r\n        });\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): ContractsToInvoice[] {\r\n\r\n        this.selectedContractsToInvoice = this.gridApi.getSelectedRows();\r\n\r\n        return this.selectedContractsToInvoice;\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue < params.newValue) {\r\n            this.totalQuantity = this.totalQuantity + (params.newValue - params.oldValue);\r\n        } else if (params.oldValue > params.newValue) {\r\n            this.totalQuantity = this.totalQuantity - (params.oldValue - params.newValue);\r\n        }\r\n    }\r\n\r\n    onRowDataChanged(params) {\r\n        if (this.counterParty) {\r\n            const counterPartyFilterComponent = this.gridApi.getFilterInstance('counterparty');\r\n            counterPartyFilterComponent.setModel({\r\n                type: 'set',\r\n                values: [this.counterParty],\r\n            });\r\n            this.gridApi.onFilterChanged();\r\n        }\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        // selection column\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40, pinned: 'left',\r\n                hide: false,\r\n            });\r\n\r\n        // grid config\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                hide: !config.isVisible,\r\n            };\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n\r\n            return columnDef;\r\n        }));\r\n\r\n        // calculated columns\r\n        this.columnDefs = this.columnDefs.concat(this.additionnalColumns);\r\n        if (this.invoiceContractGridOptions) {\r\n            this.invoiceContractGridOptions.columnDefs = this.columnDefs;\r\n            this.invoiceContractGridOptions.columnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    isQuantityToInvoiceEditable(param) {\r\n        return param.node.selected;\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]): void {\r\n        this.executionActionsService.EditCriteriaRetainFilter = filters;\r\n        this.filters = filters;\r\n        if (this.count === 1) {\r\n            this.filters = this.savedFilters;\r\n            this.savedFilters = null;\r\n            this.count = 0;\r\n        }\r\n        if (this.savedFilters && this.count === 0) {\r\n            if (this.filterSetDisplayComponent) {\r\n                this.count = 1;\r\n                const localFilters: ListAndSearchFilterDto[] = this.savedFilters.map((filter: ListAndSearchFilter) => {\r\n                    return new ListAndSearchFilterDto(filter);\r\n                });\r\n                this.filterSetDisplayComponent.loadFilters(localFilters);\r\n            }\r\n        } else {\r\n            this.getContractsToInvoice();\r\n        }\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        if (params && params.value && !isNaN(params.value)) {\r\n            if (params.colDef.colId.toLowerCase() === 'contractquantity' || params.colDef.colId.toLowerCase() === 'price' ||\r\n                params.colDef.colId.toLowerCase() === 'invoicedquantity') {\r\n                if (params.colDef.colId.toLowerCase() === 'price') {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(params.value);\r\n                } else {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    formatQuantity(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"card-header-luke\\\">\\r\\n    <mat-card-title>\\r\\n        Invoice Selection\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"none center\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"33%\\\"\\r\\n                     fxFlex.xs=\\\"33%\\\"\\r\\n                     fxFlex.sm=\\\"33%\\\">\\r\\n                    <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Invoice type\\\"\\r\\n                               [matTooltip]=\\\"'Invoice Type'\\\"\\r\\n                               [formControl]=\\\"invoiceTypeSelectedCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"33%\\\"\\r\\n                     fxFlex.xs=\\\"33%\\\"\\r\\n                     fxFlex.sm=\\\"33%\\\">\\r\\n                    <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                        <input matInput\\r\\n                               matTooltip=\\\"Costs/Commission\\\"\\r\\n                               [formControl]=\\\"costsCommissionTypeCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"33%\\\"\\r\\n                     fxFlex.xs=\\\"33%\\\"\\r\\n                     fxFlex.sm=\\\"33%\\\">\\r\\n                    <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Quantity to Invoice\\\"\\r\\n                               [matTooltip]=\\\"'Quantity to Invoice'\\\"\\r\\n                               [formControl]=\\\"quantityToInvoiceCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".card-header-luke {\\n  min-height: auto; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-invoice-selection',\r\n    templateUrl: './goods-cost-invoice-selection.component.html',\r\n    styleUrls: ['./goods-cost-invoice-selection.component.scss'],\r\n})\r\nexport class GoodsCostInvoiceSelectionComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceTypeSelectedCtrl = new AtlasFormControl('invoiceTypeSelected');\r\n    costsCommissionTypeCtrl = new AtlasFormControl('costsCommissionSelection');\r\n    quantityToInvoiceCtrl = new AtlasFormControl('quantityToInvoiceSelection');\r\n\r\n    invoiceTypeId: number;\r\n    invoiceTypeDescription: string;\r\n    selectedInvoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n    contract: string = 'Contract';\r\n    costCommission: string = 'Costs/Commission';\r\n\r\n    masterdata: MasterData = new MasterData();\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        this.invoiceTypeDescription = this.masterdata.\r\n            invoiceTypes.find((x) => x.invoiceTypeId === this.invoiceTypeId).name;\r\n        this.invoiceTypeSelectedCtrl.patchValue(this.invoiceTypeDescription);\r\n        this.quantityToInvoiceCtrl.setValue(this.contract);\r\n        this.costsCommissionTypeCtrl.setValue(this.costCommission);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceTypeSelectedCtrl: this.invoiceTypeSelectedCtrl,\r\n            costsCommissionTypeCtrl: this.costsCommissionTypeCtrl,\r\n            quantityToInvoiceCtrl: this.quantityToInvoiceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const invoiceType = entity as InvoiceRecord;\r\n        invoiceType.invoiceType = this.invoiceTypeId;\r\n        invoiceType.quantityToInvoice = this.quantityToInvoiceCtrl.value;\r\n        return invoiceType;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Pricing Options</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"20%\\\">\\r\\n                <mat-select placeholder=\\\"Pricing option\\\"\\r\\n                            [matTooltip]=\\\"'Pricing option'\\\"\\r\\n                            [formControl]=\\\"pricingOptionsCtrl\\\"\\r\\n                            (selectionChange)='onPricingDecimalOptionSelected()'>\\r\\n                    <mat-option *ngFor=\\\"let pricing of masterdata.pricingOptions\\\"\\r\\n                                [value]=\\\"pricing.code\\\">{{pricing.description}}</mat-option>\\r\\n                </mat-select>\\r\\n                <mat-error *ngIf=\\\"pricingOptionsCtrl.hasError('required')\\\">\\r\\n                    Pricing Option is required\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"20%\\\">\\r\\n                <mat-select placeholder=\\\"Decimals\\\"\\r\\n                            [matTooltip]=\\\"'Decimals'\\\"\\r\\n                            [formControl]=\\\"decimalOptionsCtrl\\\"\\r\\n                            (selectionChange)='onPricingDecimalOptionSelected()'>\\r\\n                    <mat-option *ngFor=\\\"let decimal of decimalOptions\\\"\\r\\n                                [value]=\\\"decimal\\\">{{decimal}}</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-pricing-options',\r\n    templateUrl: './goods-cost-pricing-options.component.html',\r\n    styleUrls: ['./goods-cost-pricing-options.component.scss'],\r\n})\r\nexport class GoodsCostPricingOptionsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly pricingAndDecimalOptionSelected = new EventEmitter<any>();\r\n\r\n    pricingOptionsCtrl = new AtlasFormControl('pricingOptions');\r\n    decimalOptionsCtrl = new AtlasFormControl('decimalOptions', 2);\r\n\r\n    decimalOptions: number[] = [2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n    masterdata: MasterData;\r\n\r\n    constructor(private route: ActivatedRoute, protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.bindConfiguration();\r\n        this.emitPricingAndDecimalOptions();\r\n    }\r\n\r\n    onPricingDecimalOptionSelected() {\r\n        this.emitPricingAndDecimalOptions();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            pricingOptionsCtrl: this.pricingOptionsCtrl,\r\n            decimalOptionsCtrl: this.decimalOptionsCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    emitPricingAndDecimalOptions() {\r\n        this.pricingAndDecimalOptionSelected.emit({\r\n            pricingOption: Number(this.pricingOptionsCtrl.value),\r\n            decimalOption: Number(this.decimalOptionsCtrl.value),\r\n        });\r\n    }\r\n\r\n    onDifferentCommoditySelected(differentCommoditySelected: boolean, differentPricesSelected: boolean) {\r\n        if (differentCommoditySelected) {\r\n            this.setValidators();\r\n        } else if (differentPricesSelected) {\r\n            this.setValidators();\r\n        } else {\r\n            this.clearValidators();\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.pricingOptionsCtrl.setValidators(Validators.required);\r\n        this.pricingOptionsCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    clearValidators() {\r\n        this.pricingOptionsCtrl.clearValidators();\r\n        this.pricingOptionsCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const invoiceType = entity as InvoiceRecord;\r\n\r\n        invoiceType.pricingOptionId = this.pricingOptionsCtrl.value ? Number(this.pricingOptionsCtrl.value) : null;\r\n        invoiceType.decimalOption = Number(this.decimalOptionsCtrl.value);\r\n        return invoiceType;\r\n    }\r\n}\r\n","module.exports = \"<atlas-goods-cost-invoice-selection #goodsCostInvoiceSelectionComponent>\\r\\n</atlas-goods-cost-invoice-selection>\\r\\n<atlas-goods-cost-contract-search #goodsCostContractSearchComponent\\r\\n                                  (contractsSelected)=\\\"onContractsSelected($event)\\\"\\r\\n                                  (commoditySelected)=\\\"onDifferentCommoditySelected($event)\\\">\\r\\n</atlas-goods-cost-contract-search>\\r\\n<atlas-goods-cost-pricing-options #goodsCostPricingOptionsComponent\\r\\n                                  (pricingAndDecimalOptionSelected)=\\\"onPricingAndDecimalOptionSelected($event)\\\">\\r\\n</atlas-goods-cost-pricing-options>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GoodsCostContractSearchComponent } from './components/goods-cost-contract-search/goods-cost-contract-search.component';\r\nimport { GoodsCostInvoiceSelectionComponent } from './components/goods-cost-invoice-selection/goods-cost-invoice-selection.component';\r\nimport { GoodsCostPricingOptionsComponent } from './components/goods-cost-pricing-options/goods-cost-pricing-options.component';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-selection',\r\n    templateUrl: './goods-cost-selection.component.html',\r\n    styleUrls: ['./goods-cost-selection.component.scss'],\r\n})\r\nexport class GoodsCostSelectionComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('goodsCostPricingOptionsComponent') goodsCostPricingOptionsComponent: GoodsCostPricingOptionsComponent;\r\n    @ViewChild('goodsCostInvoiceSelectionComponent') goodsCostInvoiceSelectionComponent: GoodsCostInvoiceSelectionComponent;\r\n    @ViewChild('goodsCostContractSearchComponent') goodsCostContractSearchComponent: GoodsCostContractSearchComponent;\r\n\r\n    @Output() readonly pricingAndDecimalOptionSelected = new EventEmitter<any>();\r\n    @Output() readonly contractsSelected = new EventEmitter<boolean>();\r\n\r\n    invoiceSelectionContractFormGroup: FormGroup;\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSelectionContractFormGroup = this.formBuilder.group({\r\n            goodsCostInvoiceSelectionComponent: this.goodsCostInvoiceSelectionComponent.getFormGroup(),\r\n            goodsCostContractSearchComponent: this.goodsCostContractSearchComponent.getFormGroup(),\r\n            goodsCostPricingOptionsComponent: this.goodsCostPricingOptionsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.goodsCostInvoiceSelectionComponent, this.goodsCostContractSearchComponent,\r\n            this.goodsCostPricingOptionsComponent);\r\n    }\r\n\r\n    onPricingAndDecimalOptionSelected(model: any) {\r\n        this.pricingAndDecimalOptionSelected.emit({ pricingSelected: model.pricingOption, decimalOptionSelected: model.decimalOption });\r\n\r\n    }\r\n\r\n    onDifferentCommoditySelected({ differentCommoditySelected, differentPricesSelected }) {\r\n        this.goodsCostPricingOptionsComponent.onDifferentCommoditySelected(differentCommoditySelected, differentPricesSelected);\r\n    }\r\n\r\n    onContractsSelected(contractsSelected: boolean) {\r\n        this.contractsSelected.emit(contractsSelected);\r\n\r\n    }\r\n\r\n    populateEntity(model: InvoiceRecord): InvoiceRecord {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n}\r\n","module.exports = \" <atlas-execution-invoicing-summary-header #summaryHeaderComponent\\r\\n                                           [isCreationMode]=isCreationMode></atlas-execution-invoicing-summary-header>\\r\\n <div fxLayout=\\\"row\\\" fxLayout.md=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"space-around start\\\"\\r\\n                     class=\\\"main-container\\\">\\r\\n     <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start left\\\"\\r\\n                            fxFlex=\\\"100%\\\">\\r\\n         <atlas-goods-cost-value-of-goods #valueOfGoodsComponent\\r\\n                                          (totalAmountCalculated)=\\\"ontotalAmountCalculated($event)\\\">\\r\\n         </atlas-goods-cost-value-of-goods>\\r\\n         <atlas-goods-cost-additional-cost #additionalCostComponent\\r\\n                                           [selectedGoodsVat]=\\\"selectedGoodsVatCode\\\"\\r\\n                                           (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\">\\r\\n         </atlas-goods-cost-additional-cost>\\r\\n         <div fxLayout=\\\"row\\\"\\r\\n              fxLayoutGap=\\\"16px\\\">\\r\\n             <atlas-goods-cost-tax-goods #taxGoodsComponent\\r\\n                                         (selectedGoodsTaxCode)=\\\"onChangeGoodsTaxCode($event)\\\"\\r\\n                                         fxFlex=\\\"50%\\\"></atlas-goods-cost-tax-goods>\\r\\n             <atlas-goods-cost-payments #paymentsComponent\\r\\n                                        fxFlex=\\\"50%\\\"></atlas-goods-cost-payments>\\r\\n         </div>\\r\\n         <atlas-goods-cost-tax-cost #taxCostComponent\\r\\n                                    (totalCostTaxCalculated)=\\\"onTotalCostTaxCalculated($event)\\\"\\r\\n                                    fxFlex=\\\"50%\\\"></atlas-goods-cost-tax-cost>\\r\\n         <atlas-goods-cost-total class=\\\"goods-cost-total\\\"\\r\\n                                 #totalComponent></atlas-goods-cost-total>\\r\\n     </div>\\r\\n </div>\\r\\n\"","module.exports = \"\"","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CompanyBankAccounts } from '../../../../../shared/entities/company-bankaccounts.entity';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { InvoiceTypes } from '../../../../../shared/enums/invoice-type.enum';\r\nimport { ContractsToCostInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { ContractsToInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { CostInvoiceRecord } from '../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { HeaderComponent } from '../../../header/header.component';\r\nimport { GoodsCostAdditionalCostComponent } from '../goods-cost-working-page/components/goods-cost-additional-cost/goods-cost-additional-cost.component';\r\nimport { GoodsCostPaymentsComponent } from '../goods-cost-working-page/components/goods-cost-payments/goods-cost-payments.component';\r\nimport { GoodsCostTaxCostComponent } from '../goods-cost-working-page/components/goods-cost-tax-cost/goods-cost-tax-cost.component';\r\nimport { GoodsCostTaxGoodsComponent } from '../goods-cost-working-page/components/goods-cost-tax-goods/goods-cost-tax-goods.component';\r\nimport { GoodsCostTotalComponent } from '../goods-cost-working-page/components/goods-cost-total/goods-cost-total.component';\r\nimport { GoodsCostValueOfGoodsComponent } from '../goods-cost-working-page/components/goods-cost-value-of-goods/goods-cost-value-of-goods.component';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-summary',\r\n    templateUrl: './goods-cost-summary.component.html',\r\n    styleUrls: ['./goods-cost-summary.component.scss'],\r\n})\r\nexport class GoodsCostSummaryComponent extends BaseFormComponent implements OnInit {\r\n    @Input() defaultVATCode: string;\r\n    @Input() isCreationMode: boolean;\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('summaryHeaderComponent') summaryHeaderComponent: HeaderComponent;\r\n    @ViewChild('valueOfGoodsComponent') valueOfGoodsComponent: GoodsCostValueOfGoodsComponent;\r\n    @ViewChild('additionalCostComponent') additionalCostComponent: GoodsCostAdditionalCostComponent;\r\n    @ViewChild('taxGoodsComponent') taxGoodsComponent: GoodsCostTaxGoodsComponent;\r\n    @ViewChild('taxCostComponent') taxCostComponent: GoodsCostTaxCostComponent;\r\n    @ViewChild('paymentsComponent') paymentsComponent: GoodsCostPaymentsComponent;\r\n    @ViewChild('totalComponent') totalComponent: GoodsCostTotalComponent;\r\n\r\n    @Input() invoiceTaxContracts: TaxRecord[];\r\n    @Input() invoiceTaxTotal: TaxRecord;\r\n    @Input() invoiceCostContracts: ContractsToCostInvoice[];\r\n    @Input() invoiceGoodsContracts: ContractsToInvoice[];\r\n    @Input() goodsTaxCode: string;\r\n    @Input() filteredCompanyBankAccounts: CompanyBankAccounts[];\r\n\r\n    invoiceTypeId: number;\r\n    originalInvoiceTypeId: number;\r\n    invoiceWorkingFormGroup: FormGroup;\r\n    selectedGoodsVatCode: string;\r\n    totalRecordForGoodCost: InvoiceRecord = new InvoiceRecord();\r\n    valueOfGoodsTotal: number = 0;\r\n    valueOfGoodsDecimalOption: number = 2;\r\n    valueOfGoodsCurrency: string;\r\n    valueOfGoodsCostDirection: string;\r\n    additionalCostRate: number = 0;\r\n    additionalCostCostDirection: string;\r\n\r\n    invoiceSummaryFormGroup: FormGroup;\r\n    model: InvoiceRecord;\r\n    invoiceLabel: string;\r\n    quantityToInvoice: string;\r\n    costContracts: ContractsToCostInvoice[];\r\n    contracts: ContractsToInvoice[];\r\n    costTaxes: TaxRecord[];\r\n    goodsTaxes: string;\r\n    totalData: TaxRecord;\r\n    decimalOptionValue: number = 0;\r\n    pricingOptionValue: number = 0;\r\n    defaultDecimalOption: number = 2;\r\n    contract: ContractsToCostInvoice;\r\n    contractType: string = 'Contract';\r\n    taxForCostInvoice: CostInvoiceRecord;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSummaryFormGroup = this.formBuilder.group({\r\n            paymentsComponent: this.paymentsComponent.getFormGroup(),\r\n            taxCostComponent: this.taxCostComponent.getFormGroup(),\r\n            additionalCostComponent: this.additionalCostComponent.getFormGroup(),\r\n            summaryHeaderComponent: this.summaryHeaderComponent.getFormGroup(),\r\n        });\r\n        this.invoiceSummaryFormGroup.disable();\r\n\r\n        this.formComponents.push(\r\n            this.paymentsComponent,\r\n            this.taxCostComponent,\r\n            this.additionalCostComponent,\r\n            this.summaryHeaderComponent);\r\n    }\r\n\r\n    setDecimalAndPricingOption(decimalOptionValue, pricingOptionValue) {\r\n        this.decimalOptionValue = decimalOptionValue;\r\n        this.pricingOptionValue = pricingOptionValue;\r\n    }\r\n\r\n    populateInvoiceRecord(record: InvoiceRecord) {\r\n        this.contracts = this.invoiceGoodsContracts;\r\n        this.costContracts = this.invoiceCostContracts;\r\n        this.costTaxes = this.invoiceTaxContracts;\r\n        this.totalData = this.invoiceTaxTotal;\r\n        this.goodsTaxes = this.goodsTaxCode;\r\n        this.model = record;\r\n        this.populateSummaryFields();\r\n    }\r\n\r\n    populateSummaryFields() {\r\n        if (this.contracts) {\r\n            this.valueOfGoodsComponent.contractToBeSelected(this.contracts);\r\n        }\r\n        if (this.costContracts) {\r\n            this.additionalCostComponent.contractToBeSelected(this.costContracts);\r\n        }\r\n        if (this.costTaxes) {\r\n            this.taxCostComponent.taxRecordsSelected(this.costTaxes);\r\n        }\r\n        if (this.goodsTaxes) {\r\n            this.taxGoodsComponent.setDefaultVatCode(this.goodsTaxes);\r\n        }\r\n        if (this.model) {\r\n            this.paymentsComponent.setPaymentFieldsForSummary(this.model);\r\n            this.summaryHeaderComponent.setHeaderFieldsForSummary(this.model, this.filteredCompanyBankAccounts);\r\n        }\r\n        this.additionalCostComponent.isAdditionalCostForSummary = true;\r\n\r\n    }\r\n\r\n    calculateTaxTotal(model) {\r\n        this.totalComponent.setValuesForTotalTax(model);\r\n    }\r\n\r\n    calculateTotalWithoutTax() {\r\n        this.totalRecordForGoodCost.totalInvoiceValue = this.additionalCostRate + this.valueOfGoodsTotal;\r\n        this.totalRecordForGoodCost.decimalOption = this.valueOfGoodsDecimalOption;\r\n        this.totalRecordForGoodCost.currency = this.valueOfGoodsCurrency;\r\n        if (this.valueOfGoodsCostDirection === this.additionalCostCostDirection) {\r\n            this.totalRecordForGoodCost.costDirection = CostDirections[this.additionalCostCostDirection];\r\n        } else {\r\n            this.setCostDirection();\r\n        }\r\n        this.totalComponent.setValuesForTotalWithoutTax(this.totalRecordForGoodCost);\r\n    }\r\n\r\n    setCostDirection() {\r\n        this.totalRecordForGoodCost.costDirection = (Math.abs(this.additionalCostRate) > Math.abs(this.valueOfGoodsTotal))\r\n            ? CostDirections[this.additionalCostCostDirection]\r\n            : CostDirections[this.valueOfGoodsCostDirection];\r\n    }\r\n\r\n    ontotalAmountCalculated(model) {\r\n        this.valueOfGoodsTotal = model.amount;\r\n        this.valueOfGoodsDecimalOption = model.decimalOption;\r\n        this.valueOfGoodsCurrency = model.currencyCode;\r\n        this.originalInvoiceTypeId = model.originalInvoiceType;\r\n        if (this.invoiceTypeId === InvoiceTypes.GoodsCostPurchase || this.originalInvoiceTypeId === InvoiceTypes.GoodsCostPurchase) {\r\n            this.valueOfGoodsTotal = -(this.valueOfGoodsTotal);\r\n            this.valueOfGoodsCostDirection = CostDirections[CostDirections.Payable];\r\n        } else {\r\n            this.valueOfGoodsCostDirection = CostDirections[CostDirections.Receivable];\r\n        }\r\n\r\n        this.calculateTotalWithoutTax();\r\n    }\r\n\r\n    onTotalCostTaxCalculated(model) {\r\n        this.totalData = model;\r\n        this.calculateTaxTotal(model);\r\n    }\r\n\r\n    onChangeGoodsTaxCode(vatCode: string) {\r\n        this.selectedGoodsVatCode = vatCode;\r\n    }\r\n\r\n    onChangeCostContract(model) {\r\n        if (model) {\r\n            this.additionalCostRate = model.rate;\r\n            this.additionalCostCostDirection = model.costDirection;\r\n            if (this.additionalCostCostDirection === CostDirections[CostDirections.Payable]) {\r\n                this.additionalCostRate = -(this.additionalCostRate);\r\n            }\r\n            this.taxCostComponent.getTaxesForSelectedVat(model);\r\n            this.calculateTotalWithoutTax();\r\n        }\r\n    }\r\n\r\n    setSummaryFieldsFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        this.invoiceTypeId = summaryRecord.invoiceType;\r\n        if (summaryRecord.summaryLines) {\r\n            this.taxGoodsComponent.setDataForTaxGoods(summaryRecord.summaryLines, this.defaultVATCode);\r\n        }\r\n        if (summaryRecord) {\r\n            this.additionalCostComponent.contractToBeSelectedFromGrid(summaryRecord);\r\n            this.valueOfGoodsComponent.contractToBeSelectedFromGrid(summaryRecord);\r\n            this.paymentsComponent.setValuesForSummaryFromGrid(summaryRecord);\r\n            this.summaryHeaderComponent.setHeaderFieldsFromGrid(summaryRecord);\r\n        }\r\n        this.additionalCostComponent.isAdditionalCostForSummary = true;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <mat-card-title class=\\\"no-margin\\\">Cost</mat-card-title>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             [hidden]=\\\"isAdditionalCostForSummary\\\">\\r\\n            <mat-card-subtitle class=\\\"addline-margin\\\">Add new lines:</mat-card-subtitle>\\r\\n            <mat-form-field fxFlex=\\\"3\\\">\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"addNewLineCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onAddRowButtonClicked(addNewLineCtrl.value)\\\"\\r\\n                    class=\\\"no-margin\\\">\\r\\n                Add\\r\\n            </button>\\r\\n\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <div class=\\\"use-goods-tax-toggle\\\">\\r\\n                <mat-slide-toggle [formControl]=\\\"useGoodsTaxCodeCtrl\\\"> Use Goods Tax Code</mat-slide-toggle>\\r\\n            </div>\\r\\n\\r\\n            <mat-form-field fxFlex=\\\"8%\\\">\\r\\n                <mat-select placeholder=\\\"Cost VAT Code\\\"\\r\\n                            [formControl]=\\\"costVatCodeCtrl\\\"\\r\\n                            matTooltip=\\\"Cost VAT Code\\\"\\r\\n                            (selectionChange)='onCostVatCodeSelected()'>\\r\\n                    <mat-option *ngFor=\\\"let code of costVatCodeOptions\\\"\\r\\n                                [value]=\\\"code.vatCode\\\">\\r\\n                        {{code.vatCode}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div ag-grid=\\\"selectedCostGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"selectedCostGridRows\\\"\\r\\n                             [columnDefs]=\\\"selectedCostGridColumns\\\"\\r\\n                             [gridOptions]=\\\"selectedCostGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [enableFilter]=\\\"true\\\"\\r\\n                             [rowSelection]=\\\"rowSelection\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [singleClickEdit]=true>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n                Total Cost:\\r\\n                <span class=\\\"total-figure-value\\\">\\r\\n                    {{this.totalCostDirectionSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                    {{this.currencyCodeSelected}}</span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".use-goods-tax-toggle {\\n  margin-bottom: 16px;\\n  margin-right: 16px; }\\n\\n.addline-margin {\\n  margin-right: 10px;\\n  margin-bottom: 10px; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { map } from 'rxjs/operators';\r\nimport { AgContextualMenuComponent } from '../../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { AgContextualMenuAction } from '../../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { InvoiceLineRecord } from '../../../../../../../shared/entities/invoice-line-record.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-additional-cost',\r\n    templateUrl: './goods-cost-additional-cost.component.html',\r\n    styleUrls: ['./goods-cost-additional-cost.component.scss'],\r\n})\r\nexport class GoodsCostAdditionalCostComponent extends BaseFormComponent implements OnInit {\r\n    costsMenuActions: { [key: string]: string } = {\r\n        deleteCostLine: 'delete',\r\n    };\r\n    @Input() selectedGoodsVat: string;\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<any>();\r\n    costVatCodeCtrl = new AtlasFormControl('CostVatCode');\r\n    useGoodsTaxCodeCtrl = new AtlasFormControl('UseGoodsTaxCode');\r\n    addNewLineCtrl = new AtlasFormControl('addNewLineCtrl');\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n\r\n    @Input() valueOfGoodsCurrency: string;\r\n\r\n    company: string;\r\n    costDirections: CostDirection[];\r\n    selectedCostGridOptions: agGrid.GridOptions = {};\r\n    selectedCostGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    selectedCostGridRows: ContractsToCostInvoice[] = [];\r\n    invoiceType: number;\r\n    componentId: string = 'selectedCost';\r\n    isAddRow: boolean;\r\n    rowSelection: string;\r\n    masterData: MasterData;\r\n    invoicedPercentage: number = 100;\r\n    currencyCodeSelected: string;\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n    };\r\n    gridContext = {\r\n        gridEditable: false,\r\n    };\r\n    costVatCodeOptions: Vat[];\r\n    taxRateCalculated: number = 0;\r\n    vatRate: number[];\r\n\r\n    total: number = 0;\r\n    taxTotal: number = 0;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    vatCodeAvailable: Vat[];\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    minDecimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    defaultVatCode: string;\r\n    isAdditionalCostForSummary: boolean = false;\r\n    selectedCostVat: string;\r\n    costNarrativePrefix: string = 'ADD ';\r\n    costGridContextualMenuActions: AgContextualMenuAction[];\r\n    tooltipRequiredMessage: string = 'The field should not be empty';\r\n    totalCostDirectionSign: string;\r\n    inPNL: boolean = false;\r\n    noAction: boolean = false;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        protected snackbarService: SnackbarService,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n        this.init();\r\n        this.gridContext.gridEditable = false;\r\n        this.costVatCodeOptions = this.masterData.vats;\r\n        if (this.masterData.vats.length > 0) {\r\n            this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n        }\r\n        this.selectedCostVat = this.costVatCodeCtrl.value;\r\n        this.initializeGridColumns();\r\n        this.useGoodsTaxCodeCtrl.patchValue(true);\r\n        this.addNewLineCtrl.patchValue(1);\r\n        this.onChanges();\r\n    }\r\n\r\n    onChanges(): void {\r\n        this.useGoodsTaxCodeCtrl.valueChanges.subscribe((val) => {\r\n            if (val) {\r\n                this.onUseGoodsTaxCodeToggleChange(this.selectedGoodsVat);\r\n            } else {\r\n                this.onUseGoodsTaxCodeToggleChange(this.selectedCostVat);\r\n            }\r\n        });\r\n    }\r\n\r\n    onUseGoodsTaxCodeToggleChange(value: string) {\r\n        if (value) {\r\n            this.costVatCodeCtrl.patchValue(value);\r\n            const changedVatCode = [];\r\n            this.gridApi.forEachNode((rowNode) => {\r\n                if (rowNode.data) {\r\n                    const data = rowNode.data;\r\n                    data.vatCode = value;\r\n                    changedVatCode.push(data);\r\n                }\r\n            });\r\n            this.gridApi.updateRowData({ update: changedVatCode });\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n    setVatCodeAvailable() {\r\n        if (this.selectedGoodsVat) {\r\n            this.costVatCodeCtrl.patchValue(this.selectedGoodsVat);\r\n            this.vatCodeAvailable = this.masterData.vats.filter((option) => option.vatCode === this.selectedGoodsVat);\r\n            this.totalCostAndVatDetails();\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            costVatCodeCtrl: this.costVatCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.selectedCostGridColumns;\r\n        this.selectedCostGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.autoSizeGridHeader();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    autoSizeGridHeader() {\r\n        const allColumnIds = [];\r\n        this.selectedCostGridColumns.forEach((columnDefs) => {\r\n            allColumnIds.push(columnDefs.field);\r\n        });\r\n        this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.selectedCostGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type*',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n                width: 250,\r\n                minWidth: 250,\r\n                maxWidth: 250,\r\n                suppressSizeToFit: true,\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: this.masterData,\r\n                    options: this.masterData.costTypes.filter((cost) => cost.isATradeCost === true)\r\n                        .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                    valueProperty: 'costTypeCode',\r\n                    codeProperty: 'costTypeCode',\r\n                    displayProperty: 'name',\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: this.onCostTypeChange.bind(this),\r\n\r\n                tooltip: (params) => {\r\n                    return params.value ? null : this.tooltipRequiredMessage;\r\n                },\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'invoicePercent',\r\n                colId: 'invoicePercent',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    params.data.invoicePercent,\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec*',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n                onCellValueChanged: this.onCostDirectionChange.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? null : this.tooltipRequiredMessage;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'VAT Code*',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n                editable: true,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.masterData.vats.map((vat) => vat.vatCode),\r\n                    displayPropertyName: 'vatCode',\r\n                    valuePropertyName: 'vatCode',\r\n                    displayFormat: 'vatCode',\r\n                    context: this.masterData,\r\n                },\r\n                onCellValueChanged: this.onVatCodeChange.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? null : this.tooltipRequiredMessage;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Cost Amount*',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCellForCostAmount.bind(this),\r\n                valueSetter: this.setCostAmountToInvoice,\r\n                onCellValueChanged: this.onCostAmountToInvoiceChange.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? null : this.tooltipRequiredMessage;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Cost Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                valueSetter: this.setCostNarrative.bind(this),\r\n                cellStyle: this.narrativeMaxLength.bind(this),\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.costGridContextualMenuActions,\r\n                    hide: false,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n        this.rowSelection = 'multiple';\r\n    }\r\n\r\n    decimalFormatter(input, decimaloption: number, format: string) {\r\n        const formattedInput = new Intl.NumberFormat(format, { minimumFractionDigits: 2, maximumFractionDigits: decimaloption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    pricingAndDecimalOptionSelected(pricingOption: number, decimalOption: number) {\r\n        this.pricingOptionValue = pricingOption;\r\n        this.decimalOptionValue = decimalOption;\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        if (!params.data.contractReference) {\r\n            return params.context.gridEditable;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    setCostAmountToInvoice(params): boolean {\r\n        params.data.costAmountToInvoice = (params.newValue <= 0) ? 0 : params.newValue;\r\n        return true;\r\n    }\r\n\r\n    setCostNarrative(params): boolean {\r\n        if (params.data.costId) {\r\n            params.data.narrative = this.costNarrativePrefix;\r\n        } else {\r\n            const narrativeText = params.newValue as string;\r\n            params.data.narrative = (narrativeText).startsWith('ADD') ? params.newValue :\r\n                this.costNarrativePrefix.concat(params.newValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    narrativeMaxLength(params) {\r\n        if (params.data && params.value) {\r\n            if (params.value.length > 30) {\r\n                this.narrativeLength.emit(true);\r\n                this.snackbarService.informationSnackBar(\r\n                    'Narrative length should be less than 30',\r\n                );\r\n                return { color: 'red' };\r\n            } else {\r\n                this.narrativeLength.emit(false);\r\n                return { color: 'black' };\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onCostDirectionChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onCostAmountToInvoiceChange(params) {\r\n        if (params.data.costDirection) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    contractToBeSelected(costContracts: ContractsToCostInvoice[]) {\r\n        if (costContracts.length > 0) {\r\n            this.initializeGridColumns();\r\n            if (this.defaultVatCode) {\r\n                costContracts.map((costContract) => costContract.vatCode = this.defaultVatCode);\r\n            }\r\n            this.selectedCostGridRows = costContracts;\r\n            this.selectedCostGridOptions.pagination = (costContracts.length > 10) ? true : false;\r\n\r\n            if (this.selectedCostGridRows.length > 0) {\r\n                this.currencyCodeSelected = this.selectedCostGridRows[0].currencyCode;\r\n            } else if (this.valueOfGoodsCurrency) {\r\n                this.currencyCodeSelected = this.valueOfGoodsCurrency;\r\n            }\r\n            if (this.masterData.vats.length > 0) {\r\n                this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n            }\r\n            this.calculateTotalAmountAndGetVatCode(costContracts);\r\n        } else if (this.valueOfGoodsCurrency) {\r\n            this.currencyCodeSelected = this.valueOfGoodsCurrency;\r\n        }\r\n    }\r\n\r\n    onAddRowButtonClicked(numberOfLines: number) {\r\n        this.isAddRow = true;\r\n        this.gridContext.gridEditable = true;\r\n        this.gridApi.onFilterChanged();\r\n        for (let count = 1; count <= numberOfLines; count++) {\r\n            const newItem = this.createNewCostRowData();\r\n            this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n        }\r\n    }\r\n\r\n    handleAction(action: string, costLine: ContractsToCostInvoice) {\r\n        switch (action) {\r\n            case this.costsMenuActions.deleteCostLine:\r\n                this.onDeleteSelectedButtonClicked(costLine);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onDeleteSelectedButtonClicked(costLine: ContractsToCostInvoice) {\r\n        if (!costLine.contractReference) {\r\n            this.total = 0;\r\n            this.gridApi.updateRowData({ remove: [costLine] });\r\n            this.selectedCostGridRows = this.getAllInvoiceCostLines();\r\n            this.calculationOfCRAndDR();\r\n            this.calculateTotalOnUpdateGrid();\r\n\r\n        } else { this.snackbarService.informationSnackBar('You cannot delete a cost which is not added in Invoice Working Page'); }\r\n\r\n    }\r\n\r\n    calculationOfCRAndDR() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n            }\r\n        });\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    updateTotals(totalCR, totalDR) {\r\n        if (totalCR > totalDR) {\r\n            this.total = totalCR - totalDR;\r\n            this.costDirectionDisplay = this.credit;\r\n            this.totalCostDirection = CostDirections[CostDirections.Payable];\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n        } else {\r\n            this.total = totalDR - totalCR;\r\n            this.costDirectionDisplay = this.debit;\r\n            this.totalCostDirection = CostDirections[CostDirections.Receivable];\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Receivable];\r\n        }\r\n    }\r\n\r\n    totalCostAndVatDetails() {\r\n        this.totalCostAndVatCode.emit({\r\n            rate: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            costDirection: this.totalCostDirection,\r\n            currencyCode: this.currencyCodeSelected,\r\n            vatAvailable: this.vatCodeAvailable,\r\n        });\r\n        if (this.vatCodeAvailable) {\r\n            this.vatCodeAvailable.forEach(\r\n                (tax) => {\r\n                    this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n                },\r\n            );\r\n        }\r\n    }\r\n\r\n    createNewCostRowData() {\r\n        if (this.valueOfGoodsCurrency && !this.currencyCodeSelected) {\r\n            this.currencyCodeSelected = this.valueOfGoodsCurrency;\r\n        }\r\n        const newData = new ContractsToCostInvoice();\r\n        newData.invoicePercent = this.invoicedPercentage;\r\n        newData.currencyCode = this.currencyCodeSelected;\r\n        newData.narrative = this.costNarrativePrefix;\r\n        return newData;\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.defaultVatCode = defaultVatCode;\r\n    }\r\n\r\n    setTaxDataForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.selectedCostGridRows = this.getCostContractsForSummary(costInvoiceRecord);\r\n        this.initializeGridColumns();\r\n        this.calculateTotalForSummary(costInvoiceRecord);\r\n    }\r\n\r\n    getCostContractsForSummary(costInvoiceRecord: CostInvoiceRecord): ContractsToCostInvoice[] {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        if (costInvoiceRecord) {\r\n            const contract = new ContractsToCostInvoice();\r\n            contract.vatCode = costInvoiceRecord.vatCode;\r\n            contract.principalCommodity = costInvoiceRecord.principalCommodity;\r\n            contract.rate = costInvoiceRecord.price;\r\n            contract.quantity = costInvoiceRecord.quantity;\r\n            contract.costAmountToInvoice = costInvoiceRecord.lineAmount;\r\n            contract.invoicePercent = costInvoiceRecord.totalInvoiceValue;\r\n            contracts.push(contract);\r\n        }\r\n        return contracts;\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n            return selectedCostDirection.costDirectionId;\r\n        }\r\n    }\r\n\r\n    calculateTotalAmountAndGetVatCode(contracts: ContractsToCostInvoice[]) {\r\n        this.total = 0;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        let costDirectionId: number;\r\n        this.vatCodeAvailable = [];\r\n        contracts.forEach(\r\n            (contract) => {\r\n                let vatCode: Vat[];\r\n                // creating copy of selected vatCode, so the calculations are not impacting the original data\r\n                vatCode = this.masterData.vats\r\n                    .filter((vat) => (vat.vatCode === contract.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n                        return code.rate = code.rate / 100 * contract.costAmountToInvoice;\r\n                    });\r\n                    if (this.vatCodeAvailable.length === 0) {\r\n                        this.vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        this.vatCodeAvailable.map((code) =>\r\n                            (code.vatCode === vatCode[0].vatCode) ? (code.rate = code.rate + vatCode[0].rate) :\r\n                                this.vatCodeAvailable.push(vatCode[0]));\r\n                    }\r\n                }\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.costAmountToInvoice;\r\n                } else {\r\n                    totalDR = totalDR + contract.costAmountToInvoice;\r\n                }\r\n            },\r\n        );\r\n        if (contracts.length > 0) {\r\n            this.currencyCode = contracts[0].currencyCode;\r\n        }\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.currencyCodeSelected = this.currencyCode;\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    calculateTotalOnUpdateGrid() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        const vatMasterData = this.masterData.vats;\r\n        let vatCodeAvailable = [];\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                let vatCode: Vat[] = [];\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n                vatCode = vatMasterData\r\n                    .filter((vat) => (vat.vatCode === rowNode.data.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n\r\n                        return code.rate = code.rate / 100 * rowNode.data.costAmountToInvoice;\r\n                    });\r\n                    if (vatCodeAvailable.length === 0) {\r\n                        if (rowNode.data.costDirection === costDirectionPay) {\r\n                            vatCode[0].rate = -(vatCode[0].rate);\r\n                        }\r\n                        vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        let isAvailable: boolean = false;\r\n                        vatCodeAvailable.map((code) => {\r\n                            if (code.vatCode === vatCode[0].vatCode) {\r\n                                if (vatCodeAvailable.filter((selectedVatCode) => selectedVatCode.vatCode === vatCode[0].vatCode)) {\r\n                                    if (rowNode.data.costDirection === costDirectionPay) {\r\n                                        vatCode[0].rate = -(vatCode[0].rate);\r\n                                    }\r\n                                    code.rate = code.rate + vatCode[0].rate;\r\n                                    isAvailable = true;\r\n                                }\r\n                            }\r\n                        });\r\n                        if (!isAvailable) {\r\n                            vatCodeAvailable = vatCodeAvailable.filter((code) => code.vatCode !== vatCode[0].vatCode);\r\n                            if (rowNode.data.costDirection === costDirectionPay) {\r\n                                vatCode[0].rate = -(vatCode[0].rate);\r\n                            }\r\n                            vatCodeAvailable.push(vatCode[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.updateTotals(totalCR, totalDR);\r\n        if (this.useGoodsTaxCodeCtrl.value) {\r\n            this.setVatCodeAvailable();\r\n        } else {\r\n            this.vatCodeAvailable = vatCodeAvailable.map((x) => ({ ...x }));\r\n            this.totalCostAndVatDetails();\r\n        }\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.minDecimalOptionValue, maximumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n\r\n    onVatCodeChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n\r\n    requiredCell(params) {\r\n        if (params.data && params.context.gridEditable) {\r\n            if (!params.value || params.value === '') {\r\n                return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    requiredCellForCostAmount(params) {\r\n        if (params.data && params.context.gridEditable) {\r\n            if (!params.value || params.value === '') {\r\n                return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        params.value = (this.decimalFormatter(\r\n            params.value,\r\n            this.decimalOptionValue,\r\n            this.formatType));\r\n        return params.value;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        if (this.isAddRow) {\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (!(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.vatCode\r\n                    && rowData.data.costAmountToInvoice)) {\r\n                    isValid = false;\r\n                }\r\n            });\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    onCostVatCodeSelected() {\r\n        if (!this.useGoodsTaxCodeCtrl.value) {\r\n            const vat = this.costVatCodeCtrl.value;\r\n            this.selectedCostVat = vat;\r\n            const changedVatCode = [];\r\n            this.gridApi.forEachNode((rowNode) => {\r\n                if (rowNode.data) {\r\n                    const data = rowNode.data;\r\n                    data.vatCode = vat;\r\n                    changedVatCode.push(data);\r\n                }\r\n            });\r\n            this.gridApi.updateRowData({ update: changedVatCode });\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n    onCostTypeChange(params) {\r\n        const filteredCostType = params.colDef.cellRendererParams.context.costTypes.find(\r\n            (e) => e.costTypeCode === params.data.costTypeCode);\r\n        if (filteredCostType) {\r\n            this.inPNL = filteredCostType.inPNL;\r\n            this.noAction = filteredCostType.noAction;\r\n        }\r\n\r\n    }\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const selectedInvoiceCosts = entity;\r\n        selectedInvoiceCosts.currency = this.currencyCodeSelected;\r\n        if (selectedInvoiceCosts.invoiceLines && selectedInvoiceCosts.invoiceLines.length > 0) {\r\n            const invoiceLines: InvoiceLineRecord[] = this.getInvoiceCostLines(selectedInvoiceCosts.invoiceLines.length);\r\n            invoiceLines.forEach((line) => {\r\n                selectedInvoiceCosts.invoiceLines.push(line);\r\n            });\r\n        } else {\r\n            selectedInvoiceCosts.invoiceLines = this.getInvoiceCostLines();\r\n        }\r\n\r\n        return selectedInvoiceCosts;\r\n    }\r\n\r\n    getAllInvoiceCostLines(): ContractsToCostInvoice[] {\r\n        const selectedCostRows: ContractsToCostInvoice[] = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costInvoiceline = new ContractsToCostInvoice();\r\n                costInvoiceline.costId = rowData.data.costId;\r\n                costInvoiceline.sectionId = rowData.data.sectionId;\r\n                costInvoiceline.costAmountToInvoice = rowData.data.costAmountToInvoice;\r\n                costInvoiceline.quantity = rowData.data.quantity;\r\n                costInvoiceline.costTypeCode = rowData.data.costTypeCode;\r\n                costInvoiceline.currencyCode = rowData.data.currencyCode;\r\n                costInvoiceline.vatCode = rowData.data.vatCode;\r\n                costInvoiceline.narrative = rowData.data.narrative;\r\n                costInvoiceline.invoicePercent = rowData.data.invoicePercent;\r\n                costInvoiceline.rateTypeCode = rowData.data.rateTypeCode;\r\n                costInvoiceline.costDirection = rowData.data.costDirection;\r\n                selectedCostRows.push(costInvoiceline);\r\n            }\r\n        });\r\n\r\n        return selectedCostRows;\r\n    }\r\n\r\n    getInvoiceCostLines(index: number = 0): InvoiceLineRecord[] {\r\n        const invoiceLines: InvoiceLineRecord[] = [];\r\n        this.selectedCostGridRows = this.getAllInvoiceCostLines();\r\n        this.selectedCostGridRows.map((data) => {\r\n            const invoiceLine = new InvoiceLineRecord();\r\n            invoiceLine.costID = data.costId;\r\n            invoiceLine.sectionID = data.sectionId;\r\n            invoiceLine.lineAmount = data.costAmountToInvoice;\r\n            invoiceLine.vatCode = data.vatCode;\r\n            invoiceLine.vatAmount = this.taxTotal;\r\n            invoiceLine.invoicePercent = data.invoicePercent;\r\n            invoiceLine.costTypeCode = data.costTypeCode;\r\n            invoiceLine.currencyCode = data.currencyCode;\r\n            invoiceLine.rateTypeId = (!data.costId) ? 1 : RateTypes[data.rateTypeCode];\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === data.costDirection);\r\n            invoiceLine.costDirectionId = selectedCostDirection.costDirectionId;\r\n            invoiceLine.narrative = data.narrative;\r\n            invoiceLine.inPL = this.inPNL;\r\n            invoiceLine.noAct = this.noAction;\r\n            invoiceLines.push(invoiceLine);\r\n            index++;\r\n        });\r\n        return invoiceLines;\r\n    }\r\n\r\n    /* Code for home grid to summary redirection */\r\n\r\n    contractToBeSelectedFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord) {\r\n            this.selectedCostGridRows = this.getCostContractsForSummaryFromGrid(summaryRecord.summaryLines, summaryRecord.currency);\r\n            this.initializeGridColumnsFromSummary();\r\n            if (this.selectedCostGridRows.length > 0) {\r\n                this.calculateTotalAmountAndGetVatCode(this.selectedCostGridRows);\r\n            } else {\r\n                this.currencyCodeSelected = summaryRecord.currency;\r\n                summaryRecord.summaryLines.forEach((record) => {\r\n                    if (record.vatCode) {\r\n                        this.vatCodeAvailable = this.masterData.vats.filter((option) => option.vatCode === record.vatCode);\r\n                    }\r\n                });\r\n                this.totalCostAndVatCode.emit({\r\n                    rate: this.total,\r\n                    decimalOption: this.decimalOptionValue,\r\n                    costDirection: this.totalCostDirection,\r\n                    currencyCode: this.currencyCodeSelected,\r\n                    vatAvailable: this.vatCodeAvailable,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateTotalForSummaryFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        this.total = 0;\r\n        const contracts = summaryRecord.summaryLines;\r\n        let costDirectionId: number;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.lineAmount;\r\n                } else {\r\n                    totalDR = totalDR + contract.lineAmount;\r\n                }\r\n            },\r\n        );\r\n        if (contracts.length > 0) {\r\n            this.currencyCodeSelected = summaryRecord.currency;\r\n        }\r\n        this.updateTotals(totalCR, totalDR);\r\n    }\r\n\r\n    initializeGridColumnsFromSummary() {\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: '% Invoiced',\r\n                field: 'percentageInvoiced',\r\n                colId: 'percentageInvoiced',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    init() {\r\n        this.costGridContextualMenuActions = [\r\n\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.costsMenuActions.deleteCostLine,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getCostContractsForSummaryFromGrid(summaryLines: InvoiceSummaryLineRecord[], currencyCode): ContractsToCostInvoice[] {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.costId > 0) {\r\n                const contract = new ContractsToCostInvoice();\r\n                contract.costTypeCode = record.costTypeCode;\r\n                contract.principalCommodity = record.principalCommodity;\r\n                contract.rate = record.price;\r\n                contract.quantity = record.quantity.toString();\r\n                contract.weightCode = record.weightCode;\r\n                contract.costAmountToInvoice = record.lineAmount;\r\n                contract.costDirection = record.costDirection;\r\n                contract.vatCode = record.vatCode;\r\n                contract.invoicePercent = record.invoicePercent;\r\n                contract.currencyCode = currencyCode;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Invoice Selection</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"49\\\"\\r\\n                            class=\\\"margin-bottom\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"invoiceDatePicker\\\"\\r\\n                       placeholder=\\\"Invoice date\\\"\\r\\n                       matTooltip=\\\"Invoice date\\\"\\r\\n                       [formControl]='invoiceDateCtrl'\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onInvoiceDateSelected()'>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"isDateAfterValid\\\"> Invoice Date is in Future</mat-hint>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"invoiceDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #invoiceDatePicker></mat-datepicker>\\r\\n                <mat-error *ngIf=\\\"invoiceDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                    Invoice Date can be equal to or after the contract date\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"49\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Counterparty\\\"\\r\\n                       matTooltip=\\\"Counterparty\\\"\\r\\n                       [formControl]=\\\"counterpartyCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"32%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Invoice type\\\"\\r\\n                       matTooltip=\\\"Invoice Type\\\"\\r\\n                       [formControl]=\\\"invoiceTypeCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"32%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Costs/Commission\\\"\\r\\n                       matTooltip=\\\"Costs/Commission\\\"\\r\\n                       [formControl]=\\\"costCommissionCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"25%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Quantity to Invoice\\\"\\r\\n                       matTooltip=\\\"Quantity to Invoice\\\"\\r\\n                       value=\\\"Contract\\\"\\r\\n                       [formControl]=\\\"quantityInvoiceCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <mat-divider></mat-divider>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-slide-toggle [checked]=\\\"true\\\"\\r\\n                              [formControl]=\\\"authorizePostingCtrl\\\">Authorize for posting</mat-slide-toggle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"mat-slide-toggle {\\n  margin-top: 2%; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-details',\r\n    templateUrl: './goods-cost-details.component.html',\r\n    styleUrls: ['./goods-cost-details.component.scss'],\r\n})\r\n\r\nexport class GoodsCostDetailsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly invoiceDateSelected = new EventEmitter<Date>();\r\n\r\n    invoiceDateCtrl = new AtlasFormControl('InvoiceSelectionDate');\r\n    invoiceTypeCtrl = new AtlasFormControl('InvoiceSelected');\r\n    counterpartyCtrl = new AtlasFormControl('Counterparty');\r\n    costCommissionCtrl = new AtlasFormControl('CostCommission');\r\n    quantityInvoiceCtrl = new AtlasFormControl('QuantityInvoice');\r\n    authorizePostingCtrl = new AtlasFormControl('AuthorizePosting');\r\n\r\n    invoiceTypeId: number;\r\n    invoiceTypeName: string;\r\n    masterData: MasterData = new MasterData();\r\n    invoiceDate: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    dates: Date[];\r\n    maxDate: Moment;\r\n    isDateAfterValid: boolean;\r\n    company: string;\r\n    isAuthorizeForPosting: boolean;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceDateCtrl.setValue(this.invoiceDate);\r\n        this.invoiceDateSelected.emit(this.invoiceDateCtrl.value);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        if (this.masterData) {\r\n            const invoiceType = this.masterData.\r\n                invoiceTypes.find((invoice) => invoice.invoiceTypeId === this.invoiceTypeId);\r\n            if (invoiceType) {\r\n                this.invoiceTypeName = invoiceType.name;\r\n                this.invoiceTypeCtrl.patchValue(this.invoiceTypeName);\r\n            }\r\n        }\r\n        if (this.isAuthorizeForPosting) {\r\n            this.authorizePostingCtrl.setValue(this.isAuthorizeForPosting);\r\n        } else {\r\n            this.authorizePostingCtrl.setValue(false);\r\n        }\r\n    }\r\n\r\n    setDefaultAuthorizeForPosting(defaultAuthorizeForPosting: boolean) {\r\n        this.isAuthorizeForPosting = defaultAuthorizeForPosting ? true : false;\r\n        this.authorizePostingCtrl.setValue(this.isAuthorizeForPosting);\r\n    }\r\n\r\n    contractToBeSelected(contracts: ContractsToInvoice[]) {\r\n        if (contracts.length > 0) {\r\n            const counterparty = this.masterData.counterparties.find(\r\n                (item) => item.counterpartyCode === contracts[0].counterparty);\r\n            if (counterparty) {\r\n                this.counterpartyCtrl.patchValue(counterparty.description);\r\n            }\r\n            this.setInvoiceDate(contracts);\r\n        }\r\n    }\r\n\r\n    setInvoiceDate(contracts: ContractsToInvoice[]) {\r\n        this.dates = Array.from(contracts, (x) => x.contractDate);\r\n        const moments = this.dates.map((d) => moment(d)),\r\n            maxDate = moment.max(moments);\r\n        this.maxDate = maxDate;\r\n    }\r\n\r\n    onInvoiceDateSelected() {\r\n        this.invoiceDate = new Date(this.invoiceDateCtrl.value);\r\n        this.invoiceDateCtrl.clearValidators();\r\n        this.isDateAfterValid = false;\r\n        this.invoiceFutureValidation(this.invoiceDate);\r\n        this.invoiceDateCtrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.invoiceDate, this.maxDate)]));\r\n        this.invoiceDateCtrl.updateValueAndValidity();\r\n        this.invoiceDateSelected.emit(this.invoiceDate);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceDateCtrl: this.invoiceDateCtrl,\r\n            authorizePostingCtrl: this.authorizePostingCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    invoiceFutureValidation(invoiceDate) {\r\n        const invoiceMoment: Moment = moment(invoiceDate);\r\n        if (invoiceMoment.isAfter(this.companyManager.getCurrentCompanyDate())) {\r\n            this.isDateAfterValid = true;\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceSelection = entity as InvoiceRecord;\r\n        invoiceSelection.invoiceDate = this.invoiceDateCtrl.value;\r\n        invoiceSelection.authorizedForPosting = this.authorizePostingCtrl.value;\r\n        if (this.masterData) {\r\n            const counterParty = this.masterData.counterparties.find(\r\n                (counterParty) => counterParty.description === this.counterpartyCtrl.value);\r\n            if (counterParty) {\r\n                invoiceSelection.counterpartyCode = counterParty.counterpartyCode;\r\n            }\r\n        }\r\n        return invoiceSelection;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-title>\\r\\n        <h2> Payments</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div>\\r\\n            <div class=\\\"goods-cost-payments\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                                class=\\\"mat-read-only-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Payment Terms\\\"\\r\\n                           [formControl]=\\\"invoicePayTermsCtrl\\\"\\r\\n                           matTooltip=\\\"Payment Terms\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           readonly>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                                class=\\\"mandatory\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Due Date\\\"\\r\\n                           [formControl]=\\\"invoiceDueDateCtrl\\\"\\r\\n                           [matDatepicker]=\\\"invoiceDueDatePicker\\\"\\r\\n                           matTooltip=\\\"Due Date\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           (dateChange)='onInvoiceDueDateSelected()'>\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"invoiceDueDatePicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #invoiceDueDatePicker></mat-datepicker>\\r\\n                    <mat-hint *ngIf=\\\"!invoiceDueDateCtrl.hasError('isDateBeforeValid' || 'required') && !invoiceDueDateCtrl.disabled\\\"\\r\\n                              class=\\\"invoice-creation-required-fields\\\">Required*</mat-hint>\\r\\n                    <mat-error *ngIf=\\\"invoiceDueDateCtrl.hasError('required')\\\">\\r\\n                        Required*\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"invoiceDueDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                        Value Date should be equal to or after the invoice date\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".goods-cost-payments {\\n  margin-bottom: 10px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { PaymentTerm } from '../../../../../../../shared/entities/payment-term.entity';\r\nimport { CreditAgainstTypes } from '../../../../../../../shared/enums/credit-against-type.enum';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-payments',\r\n    templateUrl: './goods-cost-payments.component.html',\r\n    styleUrls: ['./goods-cost-payments.component.scss']\r\n})\r\nexport class GoodsCostPaymentsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceDueDateCtrl = new AtlasFormControl('invoiceCreationPaymentDueDate');\r\n    invoicePayTermsCtrl = new AtlasFormControl('invoiceCreationPaymentTerms');\r\n\r\n    invoiceDateSelected: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    invoiceDateChanged: Date;\r\n    contracts: ContractsToInvoice[];\r\n    paymentTermsDescription: string;\r\n    masterDataPaymentTerms: PaymentTerm[];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterDataPaymentTerms = this.route.snapshot.data.masterdata.paymentTerms;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceDueDateCtrl: this.invoiceDueDateCtrl,\r\n            invoicePayTermsCtrl: this.invoicePayTermsCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    contractToBeSelected(contracts: ContractsToInvoice[]) {\r\n        this.contracts = contracts;\r\n        if (this.masterDataPaymentTerms && this.contracts) {\r\n            this.setPaymentTerm();\r\n        }\r\n    }\r\n\r\n    setinvoiceDateSelected(invoiceDate: Date) {\r\n        this.invoiceDateChanged = invoiceDate;\r\n        this.invoiceDateSelected = moment(invoiceDate).toDate();\r\n        if (this.contracts) {\r\n            this.setPaymentTerm();\r\n        }\r\n    }\r\n\r\n    setPaymentTerm() {\r\n        let paymentDateToSet: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n        let paymentTermToSet: string;\r\n        let dateDiff: number | undefined;\r\n        let canUpdatePayTermValue: boolean = true;\r\n        if (!this.invoiceDateSelected) {\r\n            this.invoiceDateSelected = paymentDateToSet;\r\n        }\r\n        this.contracts.forEach((contract, index) => {\r\n            let calculateDate: any;\r\n            const selectedPaymentTerms = this.masterDataPaymentTerms.filter(\r\n                (payTerms) => payTerms.paymentTermCode === contract.paymentTermCode,\r\n            );\r\n            const selectedPaymentTerm = selectedPaymentTerms.length ? selectedPaymentTerms[0] : undefined;\r\n            if (selectedPaymentTerm) {\r\n                if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.ArrivalDate) {\r\n                    calculateDate = moment(contract.arrivalDate);\r\n                } else if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.BLDate) {\r\n                    calculateDate = moment(contract.bLDate);\r\n                } else if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.CurrentDate) {\r\n                    calculateDate = this.companyManager.getCurrentCompanyDate();\r\n                } else if (selectedPaymentTerm.creditAgainst === CreditAgainstTypes.InvoiceDate) {\r\n                    calculateDate = moment(this.invoiceDateSelected);\r\n                }\r\n                calculateDate = moment(calculateDate).add('days', selectedPaymentTerm.creditDays);\r\n                if (dateDiff) {\r\n                    canUpdatePayTermValue = dateDiff > moment(calculateDate).diff(this.invoiceDateSelected) ? true : false;\r\n                }\r\n                if (canUpdatePayTermValue) {\r\n                    paymentDateToSet = calculateDate.toDate();\r\n                    paymentTermToSet = contract.paymentTermCode;\r\n                    dateDiff = moment(calculateDate).diff(this.invoiceDateSelected);\r\n                    this.paymentTermsDescription = selectedPaymentTerm.description;\r\n                }\r\n            }\r\n        });\r\n        if (paymentDateToSet) {\r\n            this.invoiceDueDateCtrl.patchValue(paymentDateToSet);\r\n            this.invoicePayTermsCtrl.patchValue(paymentTermToSet);\r\n        }\r\n    }\r\n\r\n    onInvoiceDueDateSelected() {\r\n        this.invoiceDueDateCtrl.clearValidators();\r\n        this.invoiceDueDateCtrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.invoiceDueDateCtrl.value,\r\n                moment(this.invoiceDateChanged)), Validators.required]));\r\n        this.invoiceDueDateCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const payments = entity as InvoiceRecord;\r\n        payments.paymentTerms = this.invoicePayTermsCtrl.value;\r\n        payments.dueDate = this.invoiceDueDateCtrl.value;\r\n        return payments;\r\n    }\r\n\r\n    setPaymentFieldsForSummary(model) {\r\n        this.invoicePayTermsCtrl.patchValue(model.paymentTerms);\r\n        this.invoiceDueDateCtrl.patchValue(model.dueDate);\r\n    }\r\n\r\n    setValuesForSummaryFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        this.invoicePayTermsCtrl.patchValue(summaryRecord.paymentTermsCode);\r\n        this.invoiceDueDateCtrl.patchValue(summaryRecord.dueDate);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title class=\\\"no-margin\\\">\\r\\n        Tax For Cost\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"taxesGridRows\\\"\\r\\n                         [columnDefs]=\\\"taxesGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [pagination]=\\\"false\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Total Tax Amount: <span\\r\\n                      class=\\\"total-figure-value\\\">{{defaultTaxDirectionSign}}{{formatQuantityAndTotal(this.taxTotal)}}\\r\\n                    {{currencyCode}} </span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".ag-theme-material {\\n  margin-bottom: 0; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { TaxRecord } from '../../../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-tax-cost',\r\n    templateUrl: './goods-cost-tax-cost.component.html',\r\n    styleUrls: ['./goods-cost-tax-cost.component.scss']\r\n})\r\n\r\nexport class GoodsCostTaxCostComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<any>();\r\n    taxesGridOptions: agGrid.GridOptions = {};\r\n    taxesGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    rowGroupPanelShow: string;\r\n    isGroupingEnabled: boolean = false;\r\n    taxesGridRows: TaxRecord[];\r\n    costDirection: CostDirection;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n\r\n    costTotal: number = 0;\r\n    total: number = 0;\r\n    taxTotal: number = 0;\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    masterdata: MasterData = new MasterData();\r\n    vatCode: Vat[];\r\n    vatCodeAvailable: TaxRecord[];\r\n    costDirections: CostDirection[];\r\n    costDirectionPay: string = 'Pay';\r\n    defaultTaxDirectionSign: string = CostSigns[CostDirections.Payable];\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.taxesGridColumns;\r\n        this.taxesGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.taxesGridColumns = [\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'vatDescription',\r\n                colId: 'vatDescription',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Amount',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: false,\r\n                valueFormatter: this.vatAmountFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    vatAmountFormatter(param) {\r\n        return Math.abs(param.value);\r\n    }\r\n\r\n    taxRecordsSelected(taxesRecord: TaxRecord[]) {\r\n        if (taxesRecord && taxesRecord.length > 0) {\r\n            this.initializeGridColumns();\r\n            this.taxesGridRows = taxesRecord;\r\n            this.calculateTotalAmount(taxesRecord);\r\n        }\r\n    }\r\n\r\n    setDirectionAndCurrency(data: TaxRecord) {\r\n        this.costDirectionDisplay = data.costDirection;\r\n        this.currencyCode = data.currencyCode;\r\n    }\r\n\r\n    calculateTotalAmount(taxes: TaxRecord[]) {\r\n        this.total = 0;\r\n        this.taxTotal = 0;\r\n        taxes.forEach(\r\n            (tax) => {\r\n                this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n            },\r\n        );\r\n        this.totalCostTaxCalculated.emit({\r\n            amount: this.taxTotal,\r\n            decimalOption: this.decimalOptionValue,\r\n            currencyCode: this.currencyCode,\r\n            costDirection: this.costDirectionDisplay,\r\n        });\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n\r\n    getTaxesForSelectedVat(model: CostInvoiceRecord) {\r\n        if (model) {\r\n            this.costTotal = model.rate;\r\n            this.decimalOptionValue = model.decimalOption;\r\n            this.currencyCode = model.currencyCode;\r\n            this.totalCostDirection = model.costDirection;\r\n            if (model.costDirection === CostDirections[CostDirections.Payable]) {\r\n                this.costDirectionDisplay = this.credit;\r\n            } else if (model.costDirection === CostDirections[CostDirections.Receivable]) {\r\n                this.costDirectionDisplay = this.debit;\r\n            }\r\n            this.taxRecordsSelected(model.vatAvailable);\r\n        }\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.vatCode = this.masterdata.vats.filter((option) => option.vatCode === defaultVatCode);\r\n        const defaultTaxRecord: TaxRecord[] = [];\r\n        this.vatCode.forEach((data) => {\r\n            const taxLine = new TaxRecord();\r\n            taxLine.vatCode = data.vatCode;\r\n            taxLine.vatDescription = data.vatDescription;\r\n            taxLine.rate = data.rate;\r\n            taxLine.costDirection = this.credit;\r\n            defaultTaxRecord.push(taxLine);\r\n        });\r\n        if (defaultTaxRecord) {\r\n            this.taxRecordsSelected(defaultTaxRecord);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\"\\r\\n          fxFlex>\\r\\n    <mat-card-title>\\r\\n        Tax For Goods\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <div fxFlex=\\\"33\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Goods VAT Code\\\"\\r\\n                                [formControl]=\\\"invoiceGoodsVatCodeCtrl\\\"\\r\\n                                matTooltip=\\\"VAT Code\\\"\\r\\n                                [panelWidth]=\\\"panelSize\\\"\\r\\n                                (optionSelected)=\\\"vatCodeSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let vatCode of filteredVatCodes\\\"\\r\\n                                    [value]=\\\"vatCode.vatCode\\\">\\r\\n                            {{vatCode.vatCode}} | {{vatCode.vatDescription}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"22\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"invoiceVatRateCtrl\\\"\\r\\n                                  [isEditable]=\\\"isInputField\\\"\\r\\n                                  label=\\\"VAT Rate\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"33\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"invoiceVatAmountCtrl\\\"\\r\\n                                  [isEditable]=\\\"isInputField\\\"\\r\\n                                  label=\\\"Vat Amount For Goods\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".invoice-creation-card {\\n  width: 100%; }\\n\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-tax-goods',\r\n    templateUrl: './goods-cost-tax-goods.component.html',\r\n    styleUrls: ['./goods-cost-tax-goods.component.scss']\r\n})\r\nexport class GoodsCostTaxGoodsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly selectedGoodsTaxCode = new EventEmitter<any>();\r\n\r\n    invoiceGoodsVatCodeCtrl = new AtlasFormControl('invoiceCreationGoodsVatCode');\r\n    invoiceVatRateCtrl = new AtlasFormControl('invoiceCreationVatRate');\r\n    invoiceVatAmountCtrl = new AtlasFormControl('invoiceCreationVatAmount');\r\n\r\n    filteredVatCodes: Vat[];\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Vats,\r\n    ];\r\n    isInputField = false;\r\n    defaultVatCode: string;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService.getMasterData(this.masterdataList).subscribe((data) => {\r\n            this.masterdata = data;\r\n            this.filteredVatCodes = this.masterdata.vats;\r\n            this.invoiceGoodsVatCodeCtrl.valueChanges.subscribe((input) => {\r\n                this.filteredVatCodes =\r\n                    this.utilService.filterListforAutocomplete(input,\r\n                        this.masterdata.vats,\r\n                        ['vatCode', 'vatDescription']);\r\n            });\r\n            this.bindConfiguration();\r\n        });\r\n        this.onChanges();\r\n\r\n    }\r\n\r\n    onChanges(): void {\r\n        this.invoiceGoodsVatCodeCtrl.valueChanges.subscribe((val) => {\r\n            this.selectedGoodsTaxCode.emit(this.invoiceGoodsVatCodeCtrl.value);\r\n        });\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.defaultVatCode = defaultVatCode;\r\n        if (this.defaultVatCode) {\r\n            const vatCode = this.masterdata.vats.filter((option) => option.vatCode === this.defaultVatCode);\r\n            if (vatCode.length > 0) {\r\n                this.invoiceGoodsVatCodeCtrl.patchValue(vatCode[0].vatCode);\r\n                this.invoiceVatRateCtrl.patchValue(vatCode[0].rate);\r\n                this.invoiceVatAmountCtrl.patchValue(vatCode[0].rate);\r\n            }\r\n        }\r\n    }\r\n\r\n    setDataForTaxGoods(summaryLines: InvoiceSummaryLineRecord[], defaultVATCode) {\r\n        summaryLines.map((record) => {\r\n            if (record.sectionId) {\r\n                this.defaultVatCode = record.vatCode;\r\n            }\r\n        });\r\n        if (!this.defaultVatCode) {\r\n            this.defaultVatCode = defaultVATCode;\r\n        }\r\n        this.setDefaultVatCode(this.defaultVatCode);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceGoodsVatCodeCtrl: this.invoiceGoodsVatCodeCtrl,\r\n            invoiceVatRateCtrl: this.invoiceVatRateCtrl,\r\n            invoiceVatAmountCtrl: this.invoiceVatAmountCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    vatCodeSelected(vatCode: string) {\r\n        const selectedVatCode = this.masterdata.vats.find((vat) => vat.vatCode === vatCode);\r\n        this.invoiceVatRateCtrl.patchValue(\r\n            selectedVatCode.rate,\r\n        );\r\n        this.invoiceVatAmountCtrl.patchValue(\r\n            selectedVatCode.vatDescription,\r\n        );\r\n    }\r\n\r\n}","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title class=\\\"no-margin\\\">\\r\\n            Total Amount\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             class=\\\"total-amount-content\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Invoice Total Without Taxes: <span\\r\\n                      class=\\\"total-figure-value\\\">{{formatAmount(amount)}}\\r\\n                    {{currencyCode}}</span>\\r\\n            </mat-card-subtitle>\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Total Taxes: <span\\r\\n                      class=\\\"total-figure-value\\\">{{formatAmount(this.taxTotal)}}\\r\\n                    {{currencyCode}}</span>\\r\\n            </mat-card-subtitle>\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Total Invoice Value: Amount to {{invoiceLabel}} <span\\r\\n                      class=\\\"total-figure-value\\\">{{formatAmount(this.total)}}\\r\\n                    {{currencyCode}}</span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"mat-card-content {\\n  height: 50%; }\\n  mat-card-content .total-amount-content {\\n    height: 100%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { CostDirectionType } from '../../../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { InvoicePaymentType } from '../../../../../../../shared/enums/invoice-payment-type';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-total',\r\n    templateUrl: './goods-cost-total.component.html',\r\n    styleUrls: ['./goods-cost-total.component.scss'],\r\n})\r\nexport class GoodsCostTotalComponent extends BaseFormComponent implements OnInit {\r\n    total: number = 0;\r\n    amount: number = 0;\r\n    taxTotal: number = 0;\r\n    currencyCode: string;\r\n    decimalOption: number;\r\n    formatType: string = 'en-US';\r\n    defaultDecimalOption: number = 2;\r\n    minDecimalOptionValue: number = 2;\r\n    costDirectionDisplay: string;\r\n    totalCostDirection: string;\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    costDirections: CostDirection[];\r\n    costDirectionSign: string;\r\n    totalCostDirectionSign: string;\r\n    taxCostDirectionSign: string = CostSigns[CostDirections.Payable];\r\n    invoiceLabel: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n    }\r\n\r\n    formatAmount(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.minDecimalOptionValue, maximumFractionDigits: this.decimalOption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    setValuesForTotalWithoutTax(model: InvoiceRecord) {\r\n        this.amount = (model.totalInvoiceValue);\r\n        this.decimalOption = model.decimalOption;\r\n        this.currencyCode = model.currency;\r\n        if (model.costDirection === CostDirections.Payable) {\r\n            this.costDirectionDisplay = this.credit;\r\n\r\n        } else if (model.costDirection === CostDirections.Receivable) {\r\n            this.costDirectionDisplay = this.debit;\r\n        }\r\n        this.costDirectionSign = CostSigns[model.costDirection];\r\n        // if (this.amount) {\r\n        this.setTotalForGoodCost();\r\n        // }\r\n    }\r\n\r\n    setTotalForGoodCost() {\r\n        if (this.costDirectionDisplay) {\r\n            if (this.costDirectionDisplay === this.credit) {\r\n                this.total = Number(this.taxTotal) + Number(this.amount);\r\n                this.totalCostDirection = this.credit;\r\n            } else {\r\n                this.total = Number(this.amount) - Number(this.taxTotal);\r\n                this.totalCostDirection = this.debit;\r\n            }\r\n\r\n            this.invoiceLabel = this.total < 0 ? InvoicePaymentType[CostDirectionType.Cr] : InvoicePaymentType[CostDirectionType.Dr];\r\n            //  this.totalCostDirectionSign = CostSigns[CostDirectionType[this.costDirectionDisplay]];\r\n        } else {\r\n            this.total = this.taxTotal;\r\n            this.totalCostDirection = this.credit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n            this.invoiceLabel = InvoicePaymentType[CostDirections.Payable];\r\n        }\r\n    }\r\n\r\n    setValuesForTotalTax(model: TaxRecord) {\r\n        this.taxTotal = (model.amount);\r\n        this.decimalOption = model.decimalOption;\r\n        this.currencyCode = model.currencyCode;\r\n        this.total = Number(this.taxTotal) + Number(this.amount);\r\n        if (this.taxTotal) {\r\n            this.setTotalForGoodCost();\r\n        }\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n            return selectedCostDirection.costDirectionId;\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const selectedInvoiceCosts = entity;\r\n        selectedInvoiceCosts.totalInvoiceValue = this.total;\r\n        return selectedInvoiceCosts;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             class=\\\"table-title\\\">\\r\\n            <mat-card-title class=\\\"no-margin\\\">Value Of Goods</mat-card-title>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"valueOfGoodsGridOptions && valueOfGoodsGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"valueOfGoodsGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            [gridId]=\\\"componentId\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"valueOfGoodsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"valueOfGoodsGridRows\\\"\\r\\n                             [columnDefs]=\\\"valueOfGoodsGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"false\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [groupUseEntireRow]=\\\"false\\\"\\r\\n                             [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\"\\r\\n                             [suppressDragLeaveHidesColumns]=\\\"true\\\"\\r\\n                             [suppressMakeColumnVisibleAfterUnGroup]=\\\"true\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             enableFilter\\r\\n                             [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end\\\"\\r\\n             class=\\\"value-goods-total-figure\\\">\\r\\n            <div fxFlex=\\\"30\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Total Invoiced Quantity : <span\\r\\n                          class=\\\"total-figure-value\\\">{{formatQuantityAndTotal(totalQuantity)}}\\r\\n                        {{weightCode}}</span></mat-card-subtitle>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Sub Total : <span\\r\\n                          class=\\\"total-figure-value\\\">{{debitCreditSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                        {{currencyCode}}</span>\\r\\n                </mat-card-subtitle>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Total : <span\\r\\n                          class=\\\"total-figure-value\\\">{{debitCreditSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                        {{currencyCode}}</span> </mat-card-subtitle>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".value-goods-total-figure {\\n  margin-top: 22px;\\n  text-align: right; }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { map } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InvoiceLineRecord } from '../../../../../../../shared/entities/invoice-line-record.entity';\r\nimport { ContractTypes } from '../../../../../../../shared/enums/contract-type.enum';\r\nimport { CostDirectionType } from '../../../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { DiscountBasis } from '../../../../../../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from '../../../../../../../shared/enums/discount-type.enum';\r\nimport { InvoiceTypes } from '../../../../../../../shared/enums/invoice-type.enum';\r\nimport { PricingOptions } from '../../../../../../../shared/enums/pricing-options.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-value-of-goods',\r\n    templateUrl: './goods-cost-value-of-goods.component.html',\r\n    styleUrls: ['./goods-cost-value-of-goods.component.scss'],\r\n})\r\n\r\nexport class GoodsCostValueOfGoodsComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n\r\n    @Output() readonly totalAmountCalculated = new EventEmitter<any>();\r\n    company: string;\r\n    valueOfGoodsGridOptions: agGrid.GridOptions = {};\r\n    valueOfGoodsGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    valueOfGoodsGridRows: ContractsToInvoice[];\r\n    isGroupingEnabled: boolean = false;\r\n    totalQuantity: number = 0;\r\n    total: number = 0;\r\n    weightCode: string = '';\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    weightedAverage: number = 0;\r\n    contractsForWeightedAverage: ContractsToInvoice[];\r\n    invoiceType: number;\r\n    originalInvoiceType: number;\r\n    debitCredit: string = '';\r\n    componentId: string = 'valueOfGoodsGrid';\r\n    hasGridSharing: boolean = false;\r\n    formatType: string = 'en-US';\r\n    rowGroupPanelShow: string;\r\n    debitCreditSign: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.componentId)\r\n            .subscribe((configuration) => {\r\n                this.initializeGridColumns();\r\n                // -- used later if this will become L&S maybe\r\n                // this.columnConfiguration = configuration.columns;\r\n                // this.configurationLoaded.emit();\r\n                // this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.valueOfGoodsGridColumns;\r\n        this.valueOfGoodsGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n    }\r\n    // to be removed once testing done for grid autosize\r\n    autoSizeGridHeader() {\r\n        const allColumnIds = [];\r\n        if (this.valueOfGoodsGridColumns) {\r\n            this.valueOfGoodsGridColumns.forEach((columnDefs) => {\r\n                allColumnIds.push(columnDefs.field);\r\n            });\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.valueOfGoodsGridColumns = [\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'commodity',\r\n                colId: 'commodity',\r\n                hide: false,\r\n                rowGroup: this.isGroupingEnabled,\r\n                enableRowGroup: this.isGroupingEnabled,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'price',\r\n                colId: 'price',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.price : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                rowGroup: this.isGroupingEnabled,\r\n                enableRowGroup: this.isGroupingEnabled,\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n            },\r\n\r\n            {\r\n                headerName: 'Premium/Discount',\r\n                field: 'premiumDiscountValue',\r\n                colId: 'premiumDiscountValue',\r\n                valueFormatter: this.formatPremiumDiscount,\r\n                hide: false,\r\n            },\r\n\r\n            {\r\n                headerName: 'Quantity To Invoice',\r\n                field: 'quantityToInvoice',\r\n                colId: 'quantityToInvoice',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.quantityToInvoice : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n            },\r\n\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'quantityCode',\r\n                colId: 'quantityCode',\r\n                hide: true,\r\n            },\r\n\r\n            {\r\n                headerName: 'Currency Code',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Invoice Value',\r\n                field: 'totalInvoiceValue',\r\n                colId: 'totalInvoiceValue',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.totalInvoiceValue : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                valueGetter: this.getInvoiceValue.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Contract Quantity',\r\n                field: 'contractQuantity',\r\n                colId: 'contractQuantity',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.contractQuantity : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n                hide: false,\r\n            },\r\n        ];\r\n        this.rowGroupPanelShow = this.isGroupingEnabled ? 'always' : '';\r\n    }\r\n\r\n    getInvoiceValue(params) {\r\n        if (params.data.premiumDiscountType === DiscountTypes.Premium) {\r\n            params.data.totalInvoiceValue = this.SetInvoiceValueForPremium(params.data);\r\n        } else if (params.data.premiumDiscountType === DiscountTypes.Discount) {\r\n            params.data.totalInvoiceValue = this.setInvoiceValueForDiscount(params.data);\r\n        }\r\n        this.calculateTotalAndTotalQuantity();\r\n        return params.data.totalInvoiceValue;\r\n    }\r\n\r\n    private setInvoiceValueForDiscount(params: ContractsToInvoice): number {\r\n        if (params) {\r\n            if (params.premiumDiscountBasis === DiscountBasis.Rate) {\r\n                return params.quantityToInvoice *\r\n                    (params.price - params.premiumDiscountValue) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else if (params.premiumDiscountBasis === DiscountBasis.Percent) {\r\n                return params.quantityToInvoice *\r\n                    (params.price * (1 - (params.premiumDiscountValue / 100))) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else {\r\n                return params.quantityToInvoice * params.price *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            }\r\n        }\r\n    }\r\n\r\n    private SetInvoiceValueForPremium(params: ContractsToInvoice): number {\r\n        if (params) {\r\n            if (params.premiumDiscountBasis === DiscountBasis.Rate) {\r\n                return params.quantityToInvoice *\r\n                    (params.price + params.premiumDiscountValue) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else if (params.premiumDiscountBasis === DiscountBasis.Percent) {\r\n                return params.quantityToInvoice *\r\n                    (params.price * (1 + (params.premiumDiscountValue / 100))) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else {\r\n                return params.quantityToInvoice * params.price *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            }\r\n        }\r\n    }\r\n\r\n    decimalFormatter(input, decimaloption: number, format: string) {\r\n        const formattedInput = new Intl.NumberFormat(format, { minimumFractionDigits: decimaloption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateWeightedAverage() {\r\n\r\n        // calculating the weighted average of each selected contract\r\n        this.contractsForWeightedAverage.forEach(\r\n            (contract) => {\r\n                this.weightedAverage += contract.price * contract.quantityToInvoice;\r\n            },\r\n        );\r\n        // Assigning the calculated weighted average to the price of each selected contract\r\n        this.contractsForWeightedAverage.forEach(\r\n            (contract) => {\r\n                contract.price = this.weightedAverage / this.totalQuantity;\r\n            },\r\n        );\r\n        this.initializeGridColumns();\r\n        this.valueOfGoodsGridRows = this.contractsForWeightedAverage;\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType, { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    contractToBeSelected(contracts: ContractsToInvoice[]) {\r\n        if (contracts.length > 0) {\r\n            this.calculateTotalQuantity(contracts);\r\n            this.isGroupingEnabled = false;\r\n            if (this.pricingOptionValue === PricingOptions.OutrightAverage) {\r\n                // creating copy of selected contracts, so the calculations are not impacting the original price\r\n                this.contractsForWeightedAverage = contracts.map((x) => ({ ...x }));\r\n                this.calculateWeightedAverage();\r\n            } else {\r\n                this.isGroupingEnabled = (this.pricingOptionValue === PricingOptions.GroupbycommodityPrice);\r\n                this.initializeGridColumns();\r\n                this.valueOfGoodsGridRows = contracts;\r\n            }\r\n        }\r\n    }\r\n    calculateTotalQuantity(contracts: ContractsToInvoice[]) {\r\n        this.totalQuantity = 0;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                this.totalQuantity = this.totalQuantity + contract.quantityToInvoice;\r\n            },\r\n        );\r\n    }\r\n\r\n    calculateTotalAndTotalQuantity() {\r\n        this.total = 0;\r\n        this.valueOfGoodsGridOptions.api.forEachNode((rowNode) => {\r\n            if (rowNode.data.totalInvoiceValue) {\r\n                this.total += rowNode.data.totalInvoiceValue;\r\n            }\r\n        },\r\n        );\r\n        if (this.valueOfGoodsGridRows.length > 0) {\r\n            this.weightCode = this.valueOfGoodsGridRows[0].quantityCode;\r\n            this.currencyCode = this.valueOfGoodsGridRows[0].currencyCode;\r\n        }\r\n        this.debitCredit = (this.invoiceType === InvoiceTypes.GoodsCostPurchase ||\r\n            this.originalInvoiceType === InvoiceTypes.GoodsCostPurchase) ? 'Cr' : 'Dr';\r\n        this.debitCreditSign = CostSigns[CostDirectionType[this.debitCredit]];\r\n        this.totalAmountCalculated.emit({\r\n            amount: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            currencyCode: this.currencyCode,\r\n            creditDebit: this.debitCredit,\r\n            originalInvoiceType: this.originalInvoiceType,\r\n        });\r\n\r\n    }\r\n\r\n    pricingAndDecimalOptionSelected(pricingOption: number, decimalOption: number) {\r\n        this.pricingOptionValue = pricingOption;\r\n        this.decimalOptionValue = decimalOption;\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const valueOfGoods = entity as InvoiceRecord;\r\n        valueOfGoods.currency = this.currencyCode;\r\n        valueOfGoods.totalGoodsValue = this.totalQuantity;\r\n        if (valueOfGoods.invoiceLines && valueOfGoods.invoiceLines.length > 0) {\r\n            const invoiceLines: InvoiceLineRecord[] = this.getInvoiceLines(valueOfGoods.invoiceLines.length);\r\n            invoiceLines.forEach((line) => {\r\n                valueOfGoods.invoiceLines.push(line);\r\n            });\r\n        } else {\r\n            valueOfGoods.invoiceLines = this.getInvoiceLines(0);\r\n        }\r\n        return valueOfGoods;\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    getInvoiceLines(index: number = 0) {\r\n        const invoiceLines: InvoiceLineRecord[] = [];\r\n        this.valueOfGoodsGridRows.map((data) => {\r\n            const invoiceLine = new InvoiceLineRecord();\r\n            invoiceLine.lineNumber = index + 1;\r\n            invoiceLine.sectionID = data.sectionId;\r\n            invoiceLine.price = data.price;\r\n            invoiceLine.quantity = data.quantityToInvoice.toString();\r\n            invoiceLine.priceUnitId = data.priceUnitId;\r\n            invoiceLine.weightUnitId = data.quantityUnitId;\r\n            invoiceLine.currencyCode = data.currencyCode;\r\n            invoiceLine.lineAmount = data.totalInvoiceValue;\r\n            invoiceLine.invoicePercent = (data.quantityToInvoice / data.contractQuantity) * 100;\r\n            invoiceLine.contractType = ContractTypes[data.contractTypeCode];\r\n            invoiceLines.push(invoiceLine);\r\n            index++;\r\n        });\r\n        return invoiceLines;\r\n    }\r\n\r\n    formatPremiumDiscount(params) {\r\n\r\n        if (params.data.premiumDiscountType === DiscountTypes.Premium) {\r\n            return '+' + params.data.premiumDiscountValue;\r\n        } else if (params.data.premiumDiscountType === DiscountTypes.Discount) {\r\n            return '-' + params.data.premiumDiscountValue;\r\n        } else {\r\n            return params.data.premiumDiscountValue;\r\n        }\r\n    }\r\n\r\n    contractToBeSelectedFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord.summaryLines) {\r\n            const valueOfGoodsGridRows = summaryRecord.summaryLines.filter(\r\n                (filteredSummaryLine) => filteredSummaryLine.costId == null);\r\n            this.invoiceType = summaryRecord.invoiceType;\r\n            this.currencyCode = summaryRecord.currency;\r\n            this.valueOfGoodsGridRows = this.getContractsForSummary(valueOfGoodsGridRows, summaryRecord.currency);\r\n            this.initializeGridColumnsFromSummary();\r\n            if (this.valueOfGoodsGridRows.length > 0) {\r\n                this.calculateTotalForSummary(summaryRecord);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateTotalForSummary(summaryRecord: InvoiceSummaryRecord) {\r\n        const invoiceRecord: InvoiceSummaryRecord = summaryRecord;\r\n        this.totalQuantity = 0;\r\n        this.total = 0;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        this.originalInvoiceType = summaryRecord.originalInvoiceType;\r\n        invoiceRecord.summaryLines.filter(\r\n            (filteredSummaryLine) => filteredSummaryLine.costId == null).forEach(\r\n                (contract) => {\r\n                    this.currencyCode = invoiceRecord.currency;\r\n                    const totalValue: number = contract.lineAmount;\r\n                    this.totalQuantity = this.totalQuantity + Number(contract.quantity);\r\n                    if (this.invoiceType === InvoiceTypes.GoodsCostPurchase ||\r\n                        this.originalInvoiceType === InvoiceTypes.GoodsCostPurchase) {\r\n                        totalCR = totalCR + totalValue;\r\n                    } else {\r\n                        totalDR = totalDR + totalValue;\r\n                    }\r\n                },\r\n            );\r\n        if (totalCR > totalDR) {\r\n            this.total = totalCR - totalDR;\r\n            this.debitCredit = 'Cr';\r\n        } else {\r\n            this.total = totalDR - totalCR;\r\n            this.debitCredit = 'Dr';\r\n        }\r\n        this.debitCreditSign = CostSigns[CostDirectionType[this.debitCredit]];\r\n        this.totalAmountCalculated.emit({\r\n            amount: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            creditDebit: this.debitCredit,\r\n            currencyCode: this.currencyCode,\r\n            originalInvoiceType: this.originalInvoiceType,\r\n        });\r\n    }\r\n\r\n    initializeGridColumnsFromSummary() {\r\n        this.valueOfGoodsGridColumns = [\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'commodity',\r\n                colId: 'commodity',\r\n                hide: false,\r\n                rowGroup: this.isGroupingEnabled,\r\n                enableRowGroup: this.isGroupingEnabled,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'price',\r\n                colId: 'price',\r\n                hide: false,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Invoiced Quantity',\r\n                field: 'invoicedQuantity',\r\n                colId: 'invoicedQuantity',\r\n                hide: false,\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'quantityCode',\r\n                colId: 'quantityCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency Code',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Invoice Value',\r\n                field: 'totalInvoiceValue',\r\n                colId: 'totalInvoiceValue',\r\n                hide: false,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    decimalFormatterForSummary(params) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType, {\r\n            minimumFractionDigits: this.decimalOptionValue,\r\n        }).format(params.value);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    getContractsForSummary(summaryLines: InvoiceSummaryLineRecord[], currencyCode: string) {\r\n        const contracts: ContractsToInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.sectionId) {\r\n                const contract = new ContractsToInvoice();\r\n                contract.commodity = record.principalCommodity;\r\n                contract.price = record.price;\r\n                contract.contractReference = record.contractReference;\r\n                contract.quantityToInvoice = record.quantity;\r\n                contract.quantityCode = record.weightCode;\r\n                contract.currencyCode = currencyCode;\r\n                contract.totalInvoiceValue = record.lineAmount;\r\n                contract.invoicedQuantity = record.quantity;\r\n                //  contract.priceCode = record.priceCode;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n\r\n    getInvoiceValueForSummary(params) {\r\n        return params.data.invoicedQuantity;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutGap=\\\"16px\\\">\\r\\n        <atlas-goods-cost-details #detailsComponent\\r\\n                                  fxFlex=\\\"60%\\\"\\r\\n                                  (invoiceDateSelected)=\\\"onInvoiceDateSelected($event)\\\">\\r\\n\\r\\n        </atlas-goods-cost-details>\\r\\n        <atlas-document-template #documentComponent\\r\\n                                 (templateSelected)=\\\"onDocumentTemplateSelected($event)\\\"\\r\\n                                 fxFlex=\\\"40%\\\"\\r\\n                                 [documentType]=\\\"DocumentTypes.InvoiceGoodsCostInvoice\\\">\\r\\n        </atlas-document-template>\\r\\n    </div>\\r\\n    <atlas-goods-cost-value-of-goods #valueOfGoodsComponent\\r\\n                                     (totalAmountCalculated)=\\\"ontotalAmountCalculated($event)\\\">\\r\\n    </atlas-goods-cost-value-of-goods>\\r\\n    <atlas-goods-cost-additional-cost #additionalCostComponent\\r\\n                                      [selectedGoodsVat]=\\\"selectedGoodsVatCode\\\"\\r\\n                                      [valueOfGoodsCurrency]=\\\"valueOfGoodsCurrency\\\"\\r\\n                                      (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\"\\r\\n                                      (narrativeLength)=\\\"onNarrativeValueChange($event)\\\">\\r\\n    </atlas-goods-cost-additional-cost>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none stretch\\\"\\r\\n         fxLayoutGap=\\\"16px\\\">\\r\\n        <atlas-goods-cost-tax-goods #taxGoodsComponent\\r\\n                                    (selectedGoodsTaxCode)=\\\"onChangeGoodsTaxCode($event)\\\"\\r\\n                                    fxFlex=\\\"50%\\\"></atlas-goods-cost-tax-goods>\\r\\n        <atlas-goods-cost-payments #paymentsComponent\\r\\n                                   fxFlex=\\\"50%\\\"></atlas-goods-cost-payments>\\r\\n    </div>\\r\\n    <atlas-goods-cost-tax-cost #taxCostComponent\\r\\n                               (totalCostTaxCalculated)=\\\"onTotalCostTaxCalculated($event)\\\"\\r\\n                               fxFlex=\\\"50%\\\"></atlas-goods-cost-tax-cost>\\r\\n    <atlas-goods-cost-total class=\\\"goods-cost-total\\\"\\r\\n                            #totalComponent></atlas-goods-cost-total>\\r\\n</div>\\r\\n\"","module.exports = \".goods-cost-total {\\n  width: 100%; }\\n\"","import { ChangeDetectorRef, Component, EventEmitter, HostListener, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { DocumentTemplateSelectedEvent } from '../../../../../shared/document-template-event.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CostDirectionType } from '../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { DocumentTypes } from '../../../../../shared/enums/document-type.enum';\r\nimport { InvoiceTypes } from '../../../../../shared/enums/invoice-type.enum';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { DocumentTemplateComponent } from '../../../components/document-template/document-template.component';\r\nimport { GoodsCostAdditionalCostComponent } from './components/goods-cost-additional-cost/goods-cost-additional-cost.component';\r\nimport { GoodsCostDetailsComponent } from './components/goods-cost-details/goods-cost-details.component';\r\nimport { GoodsCostPaymentsComponent } from './components/goods-cost-payments/goods-cost-payments.component';\r\nimport { GoodsCostTaxCostComponent } from './components/goods-cost-tax-cost/goods-cost-tax-cost.component';\r\nimport { GoodsCostTaxGoodsComponent } from './components/goods-cost-tax-goods/goods-cost-tax-goods.component';\r\nimport { GoodsCostTotalComponent } from './components/goods-cost-total/goods-cost-total.component';\r\nimport { GoodsCostValueOfGoodsComponent } from './components/goods-cost-value-of-goods/goods-cost-value-of-goods.component';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost-working-page',\r\n    templateUrl: './goods-cost-working-page.component.html',\r\n    styleUrls: ['./goods-cost-working-page.component.scss'],\r\n})\r\n\r\nexport class GoodsCostWorkingPageComponent extends BaseFormComponent implements OnInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('detailsComponent') detailsComponent: GoodsCostDetailsComponent;\r\n    @ViewChild('documentComponent') documentComponent: DocumentTemplateComponent;\r\n    @ViewChild('valueOfGoodsComponent') valueOfGoodsComponent: GoodsCostValueOfGoodsComponent;\r\n    @ViewChild('additionalCostComponent') additionalCostComponent: GoodsCostAdditionalCostComponent;\r\n    @ViewChild('taxGoodsComponent') taxGoodsComponent: GoodsCostTaxGoodsComponent;\r\n    @ViewChild('taxCostComponent') taxCostComponent: GoodsCostTaxCostComponent;\r\n    @ViewChild('paymentsComponent') paymentsComponent: GoodsCostPaymentsComponent;\r\n    @ViewChild('totalComponent') totalComponent: GoodsCostTotalComponent;\r\n\r\n    @Output() readonly valueOfGoodsRecord = new EventEmitter<any>();\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<any>();\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<any>();\r\n    @Output() readonly documentTemplateSelected = new EventEmitter<DocumentTemplateSelectedEvent>();\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n\r\n    invoiceTypeId: number;\r\n    totalData: TaxRecord;\r\n    invoiceWorkingFormGroup: FormGroup;\r\n    selectedGoodsVatCode: string;\r\n    masterdata: MasterData = new MasterData();\r\n    totalRecordForGoodCost: InvoiceRecord = new InvoiceRecord();\r\n    valueOfGoodsTotal: number = 0;\r\n    valueOfGoodsDecimalOption: number = 2;\r\n    valueOfGoodsCurrency: string;\r\n    valueOfGoodsCostDirection: string;\r\n    additionalCostRate: number = 0;\r\n    additionalCostCostDirection: string;\r\n    isSave: boolean = false;\r\n    DocumentTypes = DocumentTypes;\r\n    InvoiceTypes = InvoiceTypes;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private cdr: ChangeDetectorRef) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceWorkingFormGroup = this.formBuilder.group({\r\n            detailsComponent: this.detailsComponent.getFormGroup(),\r\n            documentComponent: this.documentComponent.getFormGroup(),\r\n            valueOfGoodsComponent: this.valueOfGoodsComponent.getFormGroup(),\r\n            additionalCostComponent: this.additionalCostComponent.getFormGroup(),\r\n            taxGoodsComponent: this.taxGoodsComponent.getFormGroup(),\r\n            taxCostComponent: this.taxCostComponent.getFormGroup(),\r\n            paymentsComponent: this.paymentsComponent.getFormGroup(),\r\n            totalComponent: this.totalComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(this.detailsComponent, this.documentComponent,\r\n            this.valueOfGoodsComponent, this.additionalCostComponent,\r\n            this.taxGoodsComponent, this.taxCostComponent,\r\n            this.paymentsComponent, this.totalComponent);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    calculateTaxTotal(model) {\r\n        this.totalComponent.setValuesForTotalTax(model);\r\n    }\r\n\r\n    calculateTotalWithoutTax() {\r\n        this.totalRecordForGoodCost.totalInvoiceValue = this.additionalCostRate + this.valueOfGoodsTotal;\r\n        this.totalRecordForGoodCost.decimalOption = this.valueOfGoodsDecimalOption;\r\n        this.totalRecordForGoodCost.currency = this.valueOfGoodsCurrency;\r\n        if (this.additionalCostCostDirection) {\r\n            if (this.valueOfGoodsCostDirection === this.additionalCostCostDirection) {\r\n                this.totalRecordForGoodCost.costDirection = CostDirections[this.additionalCostCostDirection];\r\n            } else {\r\n                if (Math.abs(this.additionalCostRate) > Math.abs(this.valueOfGoodsTotal)) {\r\n                    this.totalRecordForGoodCost.costDirection = CostDirections[this.additionalCostCostDirection];\r\n                } else {\r\n                    this.totalRecordForGoodCost.costDirection = CostDirections[this.valueOfGoodsCostDirection];\r\n                }\r\n            }\r\n        } else {\r\n            this.totalRecordForGoodCost.costDirection = CostDirections[this.valueOfGoodsCostDirection];\r\n        }\r\n\r\n        this.totalComponent.setValuesForTotalWithoutTax(this.totalRecordForGoodCost);\r\n    }\r\n\r\n    ontotalAmountCalculated(model) {\r\n        this.valueOfGoodsTotal = model.amount;\r\n        this.valueOfGoodsDecimalOption = model.decimalOption;\r\n        this.valueOfGoodsCurrency = model.currencyCode;\r\n        this.cdr.detectChanges();\r\n        this.valueOfGoodsRecord.emit(model);\r\n\r\n        if (this.invoiceTypeId === InvoiceTypes.GoodsCostPurchase) {\r\n            this.valueOfGoodsTotal = -(this.valueOfGoodsTotal);\r\n            this.valueOfGoodsCostDirection = CostDirections[CostDirections.Payable];\r\n        } else {\r\n            this.valueOfGoodsCostDirection = CostDirections[CostDirections.Receivable];\r\n        }\r\n        this.calculateTotalWithoutTax();\r\n    }\r\n\r\n    onTotalCostTaxCalculated(model) {\r\n        this.totalData = model;\r\n        this.calculateTaxTotal(model);\r\n        this.totalCostTaxCalculated.emit(model);\r\n    }\r\n\r\n    onChangeGoodsTaxCode(vatCode: string) {\r\n        this.selectedGoodsVatCode = vatCode;\r\n    }\r\n\r\n    onChangeCostContract(model) {\r\n        if (model) {\r\n            this.additionalCostRate = model.rate;\r\n            this.additionalCostCostDirection = model.costDirection;\r\n            if (this.additionalCostCostDirection === CostDirections[CostDirections.Payable]) {\r\n                this.additionalCostRate = -(this.additionalCostRate);\r\n            }\r\n            this.taxCostComponent.getTaxesForSelectedVat(model);\r\n            this.totalCostAndVatCode.emit(model);\r\n            this.calculateTotalWithoutTax();\r\n        }\r\n\r\n    }\r\n\r\n    onDocumentTemplateSelected(event: DocumentTemplateSelectedEvent) {\r\n        this.documentTemplateSelected.emit(event);\r\n    }\r\n\r\n    onInvoiceDateSelected(invoiceDate: Date) {\r\n        this.paymentsComponent.setinvoiceDateSelected(invoiceDate);\r\n    }\r\n\r\n    setInvoiceSetupByCompany(data) {\r\n        this.taxCostComponent.setDefaultVatCode(data.defaultVATCode);\r\n        this.taxGoodsComponent.setDefaultVatCode(data.defaultVATCode);\r\n        this.additionalCostComponent.setDefaultVatCode(data.defaultVATCode);\r\n        this.detailsComponent.setDefaultAuthorizeForPosting(data.authorizedForPosting);\r\n    }\r\n\r\n    populateEntity(model: InvoiceRecord): InvoiceRecord {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n    pricingAndDecimalOptionSelected(pricingOption: number, decimalOption: number) {\r\n        this.valueOfGoodsComponent.pricingAndDecimalOptionSelected(pricingOption, decimalOption);\r\n        this.additionalCostComponent.pricingAndDecimalOptionSelected(pricingOption, decimalOption);\r\n    }\r\n\r\n    onNarrativeValueChange(maxLength: boolean) {\r\n        this.narrativeLength.emit(maxLength);\r\n    }\r\n\r\n    validateCostGrid() {\r\n        // calling the costgrid component to set the required field validation\r\n        return this.additionalCostComponent.validate();\r\n    }\r\n\r\n    getGoodsCostRecords() {\r\n        const goodCostRecordForBankingOption = new InvoiceRecord();\r\n        goodCostRecordForBankingOption.currency = this.totalComponent.currencyCode;\r\n        goodCostRecordForBankingOption.counterpartyCode = this.detailsComponent.counterpartyCtrl.value;\r\n\r\n        (this.totalComponent.totalCostDirection === CostDirectionType[CostDirectionType.Cr]) ?\r\n            goodCostRecordForBankingOption.costDirection = CostDirections.Payable :\r\n            goodCostRecordForBankingOption.costDirection = CostDirections.Receivable;\r\n        return goodCostRecordForBankingOption;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.invoiceWorkingFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"goodsCostInvoiceFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Contract Selection Screen</ng-template>\\r\\n                <atlas-goods-cost-selection #goodsCostSelectionComponent\\r\\n                                            (contractsSelected)=\\\"onContractsSelected($event)\\\"\\r\\n                                            (pricingAndDecimalOptionSelected)=\\\"onPricingAndDecimalOptionSelected($event)\\\">\\r\\n                </atlas-goods-cost-selection>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onMoveButtonClicked(invoicingSteps.invoiceCostSelection)\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step [completed]=\\\"isCompleted\\\">\\r\\n                <ng-template matStepLabel>Costs Selection Screen</ng-template>\\r\\n                <atlas-goods-cost-selection-cost #costSelectionComponent>\\r\\n                </atlas-goods-cost-selection-cost>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onBackButtonClicked(invoicingSteps.invoiceContractSelection)\\\"\\r\\n                                mat-button>\\r\\n                            BACK\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onMoveButtonClicked(invoicingSteps.workingStep)\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step [completed]=\\\"isCompleted\\\">\\r\\n                <ng-template matStepLabel>Invoice Working Page</ng-template>\\r\\n                <atlas-goods-cost-working-page #goodsCostWorkingPageComponent\\r\\n                                               (contractsSelected)=\\\"onContractsSelected($event)\\\"\\r\\n                                               (documentTemplateSelected)=\\\"onDocumentTemplateSelected($event)\\\"\\r\\n                                               (totalCostTaxCalculated)=\\\"ontotalAmountCalculated($event)\\\"\\r\\n                                               (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\"\\r\\n                                               (valueOfGoodsRecord)=\\\"onChangeValueOfGoods($event)\\\"\\r\\n                                               (narrativeLength)=\\\"onNarrativeValueChanged($event)\\\">\\r\\n                </atlas-goods-cost-working-page>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"end start\\\">\\r\\n                    <mat-slide-toggle *ngIf=\\\"hasTemplate\\\"\\r\\n                                      [formControl]=\\\"previewDocumentCtrl\\\">Preview Document </mat-slide-toggle>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            [disabled]=\\\"isLoading\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start end \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onBackButtonClicked(invoicingSteps.invoiceCostSelection)\\\"\\r\\n                                    [disabled]=\\\"isLoading\\\">\\r\\n                                BACK\\r\\n                            </button>\\r\\n                            <div\\r\\n                                 *ifAuthorized=\\\"'Invoices.InvoiceCreation', company:company, level: PermissionLevels.ReadWrite\\\">\\r\\n                                <button mat-raised-button\\r\\n                                        (click)=\\\"onOpenDialogOnPreviewOrSaveClicked()\\\"\\r\\n                                        [disabled]=\\\"isLoading\\\">\\r\\n                                    {{ previewDocumentCtrl.value ? \\\"Preview and Invoice\\\" : \\\"Create Invoice\\\" }}\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Invoice Summary Page</ng-template>\\r\\n                <atlas-goods-cost-summary #goodsCostSummaryComponent\\r\\n                                          [invoiceTaxContracts]=\\\"taxRecords\\\"\\r\\n                                          [invoiceTaxTotal]=\\\"totalData\\\"\\r\\n                                          [invoiceCostContracts]=\\\"invoiceCostContracts\\\"\\r\\n                                          [invoiceGoodsContracts]=\\\"invoiceGoodsContracts\\\"\\r\\n                                          [goodsTaxCode]=\\\"goodsTaxCode\\\"\\r\\n                                          [filteredCompanyBankAccounts]=\\\"filteredCompanyBankAccounts\\\"\\r\\n                                          [isCreationMode]=isCreationMode>\\r\\n                </atlas-goods-cost-summary>\\r\\n                <div class=\\\"btn-container\\\"\\r\\n                     *ngIf=\\\"!isFromGrid\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start end\\\">\\r\\n                        <span class=\\\"fill-space\\\"></span>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"newSearchButtonClicked()\\\">\\r\\n                            New Search\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"nextInvoiceButtonClicked(stepper)\\\">\\r\\n                            Next Invoice\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \".mat-stepper-horizontal {\\n  background-color: transparent; }\\n\"","import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { CompanyBankAccounts } from '../../../shared/entities/company-bankaccounts.entity';\r\nimport { Counterparty } from '../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { CostDirections } from '../../../shared/enums/cost-direction.enum';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { ContractsToCostInvoice } from '../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { ContractsToInvoice } from '../../../shared/services/execution/dtos/contracts-to-invoice';\r\nimport { CostInvoiceRecord } from '../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { PreaccountingService } from '../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { BankAccountDialogComponent } from '../dialog-boxes/bank-account-dialog/bank-account-dialog.component';\r\nimport { InvoicingBaseFormComponent } from '../invoicing-base-form/invoicing-base-form.component';\r\nimport { GoodsCostSelectionCostComponent } from './components/goods-cost-selection-cost/goods-cost-selection-cost.component';\r\nimport { GoodsCostSelectionComponent } from './components/goods-cost-selection/goods-cost-selection.component';\r\nimport { GoodsCostSummaryComponent } from './components/goods-cost-summary/goods-cost-summary.component';\r\nimport { GoodsCostWorkingPageComponent } from './components/goods-cost-working-page/goods-cost-working-page.component';\r\n\r\n@Component({\r\n    selector: 'atlas-goods-cost',\r\n    templateUrl: './goods-cost.component.html',\r\n    styleUrls: ['./goods-cost.component.scss'],\r\n})\r\nexport class GoodsCostComponent extends InvoicingBaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('goodsCostSelectionComponent') goodsCostSelectionComponent: GoodsCostSelectionComponent;\r\n    @ViewChild('costSelectionComponent') costSelectionComponent: GoodsCostSelectionCostComponent;\r\n    @ViewChild('goodsCostWorkingPageComponent') goodsCostWorkingPageComponent: GoodsCostWorkingPageComponent;\r\n    @ViewChild('goodsCostSummaryComponent') goodsCostSummaryComponent: GoodsCostSummaryComponent;\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n\r\n    filteredCompanyBankAccounts: CompanyBankAccounts[] = [];\r\n    currencySelected: string;\r\n    selectedSupplier: Counterparty;\r\n    masterData: MasterData;\r\n    goodsCostSelectedValues: InvoiceRecord;\r\n    totalCostDirection: string;\r\n    goodsCostInvoiceFormGroup: FormGroup;\r\n    taxRecords: TaxRecord[];\r\n    totalData: TaxRecord;\r\n    invoiceCostContracts: ContractsToCostInvoice[];\r\n    invoiceGoodsContracts: ContractsToInvoice[];\r\n    goodsTaxCode: string;\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    invoiceLabel: string;\r\n    selectedInvoiceId: number;\r\n    isFromGrid: boolean = false;\r\n    invoicingSteps: { [key: string]: number } = {\r\n        invoiceContractSelection: 0,\r\n        invoiceCostSelection: 1,\r\n        workingStep: 2,\r\n        summaryStep: 3,\r\n    };\r\n    isValid: boolean = false;\r\n    additionalCostData: CostInvoiceRecord;\r\n    valueOfGoodsData: InvoiceRecord;\r\n    previewDocumentCtrl = new AtlasFormControl('previewDocumentCtrl');\r\n    isCreateInvoiceButtonClicked = false;\r\n    PermissionLevels = PermissionLevels;\r\n    isCostNarrativeMaxLength: boolean;\r\n    isCreationMode: boolean = true;\r\n    isCompleted: boolean = false;\r\n\r\n    constructor(\r\n        protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        protected documentService: DocumentService,\r\n        @Inject(WINDOW) protected window: Window,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected masterdataService: MasterdataService,\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected preaccountingService: PreaccountingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected documentPopupService: DocumentPopupService) {\r\n        super(dialog, router, companyManager, snackbarService, documentService, window, utilService,\r\n            executionService, route, formBuilder, preaccountingService, formConfigurationProvider, documentPopupService);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.goodsCostInvoiceFormGroup = this.formBuilder.group({\r\n            goodsCostSelectionComponent: this.goodsCostSelectionComponent.getFormGroup(),\r\n            costSelectionComponent: this.costSelectionComponent.getFormGroup(),\r\n            goodsCostWorkingPageComponent: this.goodsCostWorkingPageComponent.getFormGroup(),\r\n\r\n        });\r\n        this.formComponents.push(\r\n            this.goodsCostSelectionComponent,\r\n            this.costSelectionComponent,\r\n            this.goodsCostWorkingPageComponent,\r\n        );\r\n        this.getInvoiceSetupByCompany();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.goodsCostInvoiceFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    onMoveButtonClicked(selectedStepperIndex: number) {\r\n        let isFormValid = false;\r\n        if (this.goodsCostSelectionComponent.goodsCostPricingOptionsComponent.formGroup.valid) {\r\n            if (this.isValid) {\r\n                (selectedStepperIndex === this.invoicingSteps.invoiceCostSelection) ? this.goodsContractsSelected() :\r\n                    this.costContractsSelected();\r\n                this.isCompleted = true;\r\n                this.stepper.selectedIndex = selectedStepperIndex;\r\n            }\r\n            isFormValid = true;\r\n        }\r\n\r\n        if (!this.isValid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Please select a contract to proceed.',\r\n            );\r\n        }\r\n        if (!isFormValid) {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors..');\r\n        }\r\n    }\r\n\r\n    onContractsSelected(contractsSelected: boolean) {\r\n        this.isValid = contractsSelected;\r\n    }\r\n\r\n    onChangeValueOfGoods(model: InvoiceRecord) {\r\n        this.valueOfGoodsData = model;\r\n    }\r\n\r\n    ontotalAmountCalculated(model: TaxRecord) {\r\n        this.totalData = model;\r\n    }\r\n\r\n    onChangeCostContract(model: ContractsToCostInvoice[]) {\r\n        this.invoiceCostContracts = model;\r\n    }\r\n\r\n    goodsContractsSelected() {\r\n        const contracts = this.goodsCostSelectionComponent.\r\n            goodsCostContractSearchComponent.selectedContractsToInvoice as ContractsToInvoice[];\r\n        if (contracts) {\r\n            const sectionIds: number[] = contracts.map((contract) => contract.sectionId);\r\n            this.costSelectionComponent.goodsCostContractsCostComponent.getContractsToInvoice(sectionIds, contracts);\r\n            this.goodsCostWorkingPageComponent.valueOfGoodsComponent.contractToBeSelected(contracts);\r\n            this.goodsCostWorkingPageComponent.detailsComponent.contractToBeSelected(contracts);\r\n            if (!this.isCreateInvoiceButtonClicked) {\r\n                this.goodsCostWorkingPageComponent.paymentsComponent.contractToBeSelected(contracts);\r\n            }\r\n        }\r\n    }\r\n\r\n    costContractsSelected() {\r\n        const costsForSelectedContracts = this.costSelectionComponent.\r\n            goodsCostContractsCostComponent.selectedCostContracts as ContractsToCostInvoice[];\r\n        if (costsForSelectedContracts) {\r\n            this.goodsCostWorkingPageComponent.additionalCostComponent.contractToBeSelected(costsForSelectedContracts);\r\n        }\r\n    }\r\n\r\n    getTaxRecordsForSelectedCost() {\r\n        this.taxRecords = this.goodsCostWorkingPageComponent.taxCostComponent.taxesGridRows as TaxRecord[];\r\n        this.totalData = this.goodsCostWorkingPageComponent.totalData as TaxRecord;\r\n        this.goodsTaxCode = this.goodsCostWorkingPageComponent.selectedGoodsVatCode as string;\r\n    }\r\n\r\n    costAndTaxRowsSelected() {\r\n        this.invoiceCostContracts = this.goodsCostWorkingPageComponent.additionalCostComponent\r\n            .getAllInvoiceCostLines();\r\n        this.invoiceGoodsContracts = this.goodsCostWorkingPageComponent.valueOfGoodsComponent\r\n            .valueOfGoodsGridRows as ContractsToInvoice[];\r\n        this.getTaxRecordsForSelectedCost();\r\n    }\r\n\r\n    onPricingAndDecimalOptionSelected(model: any) {\r\n        if (this.goodsCostWorkingPageComponent) {\r\n            this.goodsCostWorkingPageComponent.pricingAndDecimalOptionSelected(model.pricingSelected, model.decimalOptionSelected);\r\n        }\r\n    }\r\n\r\n    beforeInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        this.updateInvoiceLines(invoiceRecord);\r\n    }\r\n\r\n    afterInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        (this.selectedbankAccountId) ? invoiceRecord.bankAccountId = this.selectedbankAccountId : null;\r\n        this.goodsCostSummaryComponent.populateInvoiceRecord(invoiceRecord);\r\n        this.stepper.next();\r\n    }\r\n\r\n    updateInvoiceLines(invoiceRecord: InvoiceRecord) {\r\n        invoiceRecord.invoiceLines.forEach(\r\n            (invoiceLine) => {\r\n                if (!invoiceLine.vatCode) {\r\n                    invoiceLine.vatCode = (invoiceLine.costID) ?\r\n                        this.goodsCostWorkingPageComponent.additionalCostComponent.costVatCodeCtrl.value :\r\n                        this.goodsCostWorkingPageComponent.taxGoodsComponent.invoiceGoodsVatCodeCtrl.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    onNarrativeValueChanged(maxLength: boolean) {\r\n        this.isCostNarrativeMaxLength = maxLength;\r\n    }\r\n\r\n    onOpenDialogOnPreviewOrSaveClicked() {\r\n        this.isLoading = true;\r\n        if (this.goodsCostWorkingPageComponent.invoiceWorkingFormGroup.valid) {\r\n            if (this.isCostNarrativeMaxLength) {\r\n                this.snackbarService.informationSnackBar(\r\n                    'Narrative length should be less than 30',\r\n                );\r\n                return;\r\n            }\r\n            if (!this.goodsCostWorkingPageComponent.additionalCostComponent.validate()) {\r\n                this.snackbarService.informationSnackBar(\r\n                    'Additional cost is invalid',\r\n                );\r\n                return;\r\n            }\r\n            this.checkForPayableorReceivable();\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors...');\r\n            this.isLoading = false;\r\n        }\r\n        this.costAndTaxRowsSelected();\r\n    }\r\n\r\n    checkForPayableorReceivable() {\r\n        this.goodsCostSelectedValues = this.goodsCostWorkingPageComponent.getGoodsCostRecords();\r\n        if (this.goodsCostSelectedValues) {\r\n            this.selectedSupplier = this.masterData.counterparties.find(\r\n                (counterParty) => counterParty.description === this.goodsCostSelectedValues.counterpartyCode);\r\n            (this.goodsCostSelectedValues.costDirection === CostDirections.Payable) ?\r\n                this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value) :\r\n                this.getCompanyBankAccounts();\r\n        }\r\n\r\n    }\r\n    nextInvoiceButtonClicked() {\r\n        let searchContractRef: string = '';\r\n        let searchCounterParty: string = '';\r\n        let searchCharterRef: string = '';\r\n        searchContractRef = this.goodsCostSelectionComponent.\r\n            goodsCostContractSearchComponent.searchTerm;\r\n        searchCounterParty = this.goodsCostSelectionComponent.\r\n            goodsCostContractSearchComponent.searchCounterPartyTerm;\r\n        searchCharterRef = this.goodsCostSelectionComponent.\r\n            goodsCostContractSearchComponent.searchCharterTerm;\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/' + encodeURIComponent(this.invoiceTypeId.toString())],\r\n            {\r\n                queryParams: {\r\n                    savedContractReference: searchContractRef, savedCounterParty: searchCounterParty,\r\n                    savedCharterReference: searchCharterRef,\r\n                },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    getInvoiceSetupByCompany() {\r\n        this.subscriptions.push(this.executionService.getInvoiceSetupByCompany()\r\n            .subscribe((data) => {\r\n                this.costSelectionComponent.goodsCostContractsCostComponent.setTolerancePercentage(data.tolerancePercentage);\r\n                this.goodsCostWorkingPageComponent.setInvoiceSetupByCompany(data);\r\n            }));\r\n    }\r\n\r\n    getCompanyBankAccounts() {\r\n        if (this.selectedSupplier && this.goodsCostSelectedValues.currency) {\r\n            this.masterdataService.getCompanyBankAccounts(this.goodsCostSelectedValues.currency)\r\n                .subscribe((data) => {\r\n                    if (data.value.length > 0) {\r\n                        this.filteredCompanyBankAccounts = data.value;\r\n                    }\r\n                    this.showAvailableBankingOptionDialog();\r\n                },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    });\r\n        }\r\n    }\r\n\r\n    showAvailableBankingOptionDialog() {\r\n        if (this.filteredCompanyBankAccounts) {\r\n            const availableBankingoptionDialog = this.dialog.open(BankAccountDialogComponent, {\r\n                data: {\r\n                    title: 'Bank Account',\r\n                    okButton: 'Confirm',\r\n                    value: this.filteredCompanyBankAccounts,\r\n                },\r\n            });\r\n            availableBankingoptionDialog.afterClosed().subscribe((answer) => {\r\n                if (!answer) {\r\n                    this.isLoading = false;\r\n                } else if (answer.isClose) {\r\n                    this.selectedbankAccountId = answer.selectedValue;\r\n                    this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onBackButtonClicked(index: number) {\r\n        this.isCompleted = false;\r\n        this.stepper.selectedIndex = index;\r\n    }\r\n}\r\n","module.exports = \"<ng-template #headerContent>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start end\\\"\\r\\n         fxLayoutGap=\\\"1%\\\">\\r\\n        <h2 class=\\\"summary-header-title\\\"\\r\\n            *ngIf=\\\"this.invoiceTypeId!= this.reversalInvoiceTypeId\\\">Invoice Reference Number:\\r\\n            {{invoiceLabel}}</h2>\\r\\n        <h2 class=\\\"summary-header-title\\\"\\r\\n            *ngIf=\\\"this.newInvoiceReference && this.invoiceTypeId=== this.reversalInvoiceTypeId\\\">{{newInvoiceReference}}\\r\\n        </h2>\\r\\n        <h2 class=\\\"summary-header-title\\\"\\r\\n            *ngIf=\\\"this.invoiceTypeId=== this.reversalInvoiceTypeId\\\">Reversal Of : {{invoiceLabel}}</h2>\\r\\n        <mat-chip-list class=\\\"chip-list\\\">\\r\\n            <mat-chip selected\\r\\n                      disabled>{{invoiceType}}</mat-chip>\\r\\n            <mat-chip selected\\r\\n                      disabled>{{externalHouse}}</mat-chip>\\r\\n            <mat-chip selected\\r\\n                      disabled>{{quantityToInvoice}}</mat-chip>\\r\\n        </mat-chip-list>\\r\\n    </div>\\r\\n    <div class=\\\"summary-details\\\"\\r\\n         fxLayout=\\\"row\\\">\\r\\n        <div fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\"\\r\\n             fxFlex=\\\"70%\\\">\\r\\n            <div fxLayout=\\\"row\\\">\\r\\n\\r\\n                <mat-form-field fxFlex=\\\"25%\\\">\\r\\n                    <input matInput\\r\\n                           [matDatepicker]=\\\"invoiceDatePicker\\\"\\r\\n                           placeholder=\\\"Invoice date\\\"\\r\\n                           [matTooltip]=\\\"'Invoice date'\\\"\\r\\n                           [formControl]='invoiceDateCtrl'\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"invoiceDatePicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #invoiceDatePicker></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                fxFlex=\\\"25%\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Counterparty\\\"\\r\\n                           [matTooltip]=\\\"'Counterparty'\\\"\\r\\n                           [formControl]=\\\"counterpartyCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"25%\\\"\\r\\n                                [hidden]=\\\"!invoiceExtRefCtrl.value\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"External Invoice Reference\\\"\\r\\n                           [formControl]=\\\"invoiceExtRefCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                fxFlex=\\\"25%\\\"\\r\\n                                [hidden]=\\\"!bankingInformationCtrl.value\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Banking Information\\\"\\r\\n                           [formControl]=\\\"bankingInformationCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n\\r\\n\\r\\n<mat-card *ngIf=\\\"isCreationMode\\\"\\r\\n          class=\\\"card-header-luke\\\">\\r\\n    <ng-container *ngTemplateOutlet=\\\"headerContent\\\"></ng-container>\\r\\n</mat-card>\\r\\n\\r\\n<header *ngIf=\\\"!isCreationMode\\\"\\r\\n        class=\\\"header-background mat-elevation-z2\\\">\\r\\n    <div class=\\\"header-content displayMode\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"headerContent\\\"></ng-container>\\r\\n    </div>\\r\\n</header>\\r\\n\"","module.exports = \".summary-header-title {\\n  display: inline-block;\\n  margin-bottom: 0; }\\n\\n.summary-details {\\n  margin-top: 20px; }\\n\\n.invoice-date-warning {\\n  background-color: #ec8d2d; }\\n\\nheader {\\n  margin-bottom: 14px; }\\n\\n.header-background {\\n  min-height: 114px; }\\n\\n.header-content {\\n  padding: 16px 30px 0px; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { InvoiceSourceType } from '../../../shared/enums/invoice-source-type.enum';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { QuantityToInvoiceType } from '../../../shared/enums/quantity-to-invoice.enum';\r\nimport { InvoiceRecord } from '../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-execution-invoicing-summary-header',\r\n    templateUrl: './header.component.html',\r\n    styleUrls: ['./header.component.scss'],\r\n})\r\n\r\nexport class HeaderComponent extends BaseFormComponent implements OnInit {\r\n    @Input() isCreationMode: boolean;\r\n    invoiceDateCtrl = new AtlasFormControl('invoiceDateCtrl');\r\n    counterpartyCtrl = new AtlasFormControl('counterpartyCtrl');\r\n    invoiceExtRefCtrl = new AtlasFormControl('invoiceExtRefCtrl');\r\n    invoiceTypeCtrl = new AtlasFormControl('invoiceTypeCtrl');\r\n    bankingInformationCtrl = new AtlasFormControl('bankingInformationCtrl');\r\n    model: InvoiceRecord;\r\n    invoiceLabel: string;\r\n    invoiceType: string;\r\n    externalHouse: string;\r\n    quantityToInvoice: string;\r\n    invoiceExternalReference: string;\r\n    invoiceTypeId: number;\r\n    reversalInvoiceTypeId: number;\r\n    masterdata: MasterData = new MasterData();\r\n    newInvoiceReference: string = '';\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.bankingInformationCtrl.disable();\r\n        this.reversalInvoiceTypeId = InvoiceTypes.Reversal;\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        const invoiceId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceId')));\r\n        if (invoiceId) {\r\n            this.route.queryParams.subscribe((params) => {\r\n                this.invoiceTypeId = Number(params['invoiceType']);\r\n            });\r\n        }\r\n    }\r\n\r\n    populateInvoiceRecord(record) {\r\n        this.model = record;\r\n        this.externalHouse = InvoiceTypes[String(this.model.externalInhouse)];\r\n        this.invoiceLabel = this.model.invoiceLabel;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceDateCtrl: this.invoiceDateCtrl,\r\n            counterpartyCtrl: this.counterpartyCtrl,\r\n            invoiceExtRefCtrl: this.invoiceExtRefCtrl,\r\n            invoiceTypeCtrl: this.invoiceTypeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setHeaderFieldsForSummary(model, bankAccounts) {\r\n        if (model) {\r\n            this.invoiceDateCtrl.patchValue(model.invoiceDate);\r\n            this.counterpartyCtrl.patchValue(model.counterpartyCode);\r\n            this.invoiceExtRefCtrl.patchValue(model.externalInvoiceRef);\r\n            this.invoiceLabel = model.invoiceLabel;\r\n            if (model.reversedInvoiceReference) {\r\n                this.newInvoiceReference = model.reversedInvoiceReference;\r\n            }\r\n            this.externalHouse = InvoiceSourceType[model.externalInhouse];\r\n            this.quantityToInvoice = QuantityToInvoiceType[model.quantityToInvoiceType];\r\n            if (this.masterdata) {\r\n                const invoiceType = this.masterdata.\r\n                    invoiceTypes.find((invoice) => invoice.invoiceTypeId === Number(model.invoiceType));\r\n                if (invoiceType) {\r\n                    this.setInvoiceTypeForSummary(invoiceType, model);\r\n                }\r\n            }\r\n            if (bankAccounts && model.bankAccountId) {\r\n                const filteredBankAccounts = bankAccounts.filter((account) =>\r\n                    account.bankAccountId === model.bankAccountId);\r\n                (filteredBankAccounts.length > 0) ? this.bankingInformationCtrl.patchValue(filteredBankAccounts[0].bankName) :\r\n                    null;\r\n            } else if (model.bankAccountId) {\r\n                this.bankingInformationCtrl.patchValue(model.bankAccountId);\r\n            }\r\n        }\r\n    }\r\n\r\n    setHeaderFieldsFromGrid(summaryRecord) {\r\n        if (this.masterdata) {\r\n            const invoiceType = this.masterdata.\r\n                invoiceTypes.find((invoice) => invoice.invoiceTypeId === summaryRecord.invoiceType);\r\n            if (invoiceType) {\r\n                this.setInvoiceTypeForSummary(invoiceType, summaryRecord);\r\n            }\r\n        }\r\n        this.invoiceDateCtrl.patchValue(summaryRecord.invoiceDate);\r\n        this.counterpartyCtrl.patchValue(summaryRecord.counterparty);\r\n        this.invoiceExtRefCtrl.patchValue(summaryRecord.externalInvoiceReference);\r\n        this.bankingInformationCtrl.patchValue(summaryRecord.clientAccount);\r\n        if (summaryRecord.reversedInvoiceReference) {\r\n            this.newInvoiceReference = summaryRecord.reversedInvoiceReference;\r\n        }\r\n        this.invoiceLabel = summaryRecord.invoiceCode;\r\n        this.externalHouse = InvoiceSourceType[summaryRecord.externalInhouse];\r\n        this.quantityToInvoice = QuantityToInvoiceType[summaryRecord.quantityToInvoiceType];\r\n    }\r\n\r\n    setInvoiceTypeForSummary(invoiceType, summaryRecord) {\r\n        this.invoiceType = (invoiceType.invoiceTypeId === InvoiceTypes.GoodsCostPurchase ||\r\n            invoiceType.invoiceTypeId === InvoiceTypes.GoodsCostSales ||\r\n            invoiceType.invoiceTypeId === InvoiceTypes.Washout) ? invoiceType.name : InvoiceTypes[Number(summaryRecord.invoiceType)];\r\n\r\n        if (summaryRecord.invoiceType === InvoiceTypes.Cost ||\r\n            summaryRecord.invoiceType === InvoiceTypes.CostReceivable ||\r\n            summaryRecord.invoiceType === InvoiceTypes.CostCreditNote ||\r\n            summaryRecord.invoiceType === InvoiceTypes.CostDebitNote) {\r\n            this.invoiceType = InvoiceTypes[Number(InvoiceTypes.Cost)];\r\n        }\r\n    }\r\n}\r\n","module.exports = \"\"","module.exports = \"\"","import { Component, EventEmitter, Output } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { DocumentTemplateSelectedEvent } from '../../../../shared/document-template-event.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { PhysicalDocumentTemplate } from '../../../../shared/entities/document-template.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { DocumentTypes } from '../../../../shared/enums/document-type.enum';\r\nimport { InvoiceSourceType } from '../../../../shared/enums/invoice-source-type.enum';\r\nimport { InvoiceTypes } from '../../../../shared/enums/invoice-type.enum';\r\nimport { BaseFormComponent } from './../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from './../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from './../../../../shared/services/http-services/execution.service';\r\n\r\n@Component({\r\n    selector: 'atlas-document-template-base',\r\n    templateUrl: './document-template-base.component.html',\r\n    styleUrls: ['./document-template-base.component.scss'],\r\n})\r\nexport class DocumentTemplateBaseComponent extends BaseFormComponent {\r\n    @Output() readonly templateSelected = new EventEmitter<DocumentTemplateSelectedEvent>();\r\n\r\n    isUnique = true;\r\n    invoiceTemplatesCtrl = new AtlasFormControl('invoiceCreationTemplate');\r\n    invoiceExtRefCtrl = new AtlasFormControl('invoiceExternalReference');\r\n    invoiceExtInHouseCtrl = new AtlasFormControl('invoiceExtInHouseInfo');\r\n\r\n    filteredTemplates: PhysicalDocumentTemplate[] = [];\r\n    masterdata: MasterData;\r\n    selectedInvoiceTypeId: number;\r\n    invoiceSourceType: string[];\r\n    InvoiceTypes = InvoiceTypes;\r\n    DocumentTypes = DocumentTypes;\r\n\r\n    constructor(protected executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    checkUnicityOfExternalRef(val: string): void {\r\n        if (val) {\r\n            this.executionService.checkExternalInvoiceReferenceExists(val)\r\n                .subscribe((isNotUnique: boolean) => {\r\n                    this.isUnique = !isNotUnique;\r\n                });\r\n        } else {\r\n            this.isUnique = true;\r\n        }\r\n    }\r\n\r\n    getInvoiceSourceTypeEnum(): string[] {\r\n        const myEnum = [];\r\n        const objectEnum = Object.keys(InvoiceSourceType);\r\n        const values = objectEnum.slice(0, objectEnum.length / 2);\r\n        const keys = objectEnum.slice(objectEnum.length / 2);\r\n\r\n        for (let i = 0; i < objectEnum.length / 2; i++) {\r\n            myEnum.push({ viewValue: keys[i], value: values[i] });\r\n        }\r\n        return myEnum;\r\n    }\r\n\r\n    setValidators() {\r\n        this.invoiceExtRefCtrl.setValidators(Validators.compose([Validators.maxLength(25)]));\r\n        this.invoiceExtRefCtrl.valueChanges.subscribe((val) => {\r\n            this.checkUnicityOfExternalRef(val);\r\n        });\r\n    }\r\n\r\n    onExternalInHouseSelected() {\r\n        if (this.invoiceExtInHouseCtrl.value === InvoiceSourceType[InvoiceSourceType.External]) {\r\n            this.invoiceExtRefCtrl.setValidators(Validators.compose([Validators.required]));\r\n            this.invoiceTemplatesCtrl.clearValidators();\r\n            if (this.filteredTemplates.length === 1) {\r\n                this.invoiceTemplatesCtrl.reset();\r\n            }\r\n        } else if (this.invoiceExtInHouseCtrl.value === InvoiceSourceType[InvoiceSourceType.Inhouse]) {\r\n            this.invoiceTemplatesCtrl.setValidators(Validators.compose([Validators.required]));\r\n            this.invoiceExtRefCtrl.clearValidators();\r\n            this.setValidators();\r\n            if (this.filteredTemplates.length === 1) {\r\n                this.invoiceTemplatesCtrl.patchValue(this.filteredTemplates[0]);\r\n            }\r\n        }\r\n\r\n        this.invoiceExtRefCtrl.updateValueAndValidity();\r\n        this.invoiceTemplatesCtrl.updateValueAndValidity();\r\n        this.formGroup.updateValueAndValidity();\r\n        this.onInvoiceTemplateSelected();\r\n    }\r\n\r\n    onInvoiceTemplateSelected() {\r\n        this.templateSelected.emit(this.invoiceTemplatesCtrl.value ?\r\n            new DocumentTemplateSelectedEvent(true, this.invoiceTemplatesCtrl.value) :\r\n            new DocumentTemplateSelectedEvent(false));\r\n    }\r\n\r\n    onChanges(): void {\r\n        this.invoiceExtInHouseCtrl.valueChanges.subscribe((val) => {\r\n            this.onExternalInHouseSelected();\r\n        });\r\n    }\r\n\r\n    updateInhouseExternalStatus(invoiceType: InvoiceTypes) {\r\n        if (invoiceType === InvoiceTypes.Sales\r\n            || invoiceType === InvoiceTypes.GoodsCostSales\r\n            || invoiceType === InvoiceTypes.Washout) {\r\n            this.invoiceExtInHouseCtrl.patchValue(InvoiceSourceType[InvoiceSourceType.Inhouse]);\r\n        } else if (invoiceType === InvoiceTypes.Purchase\r\n            || invoiceType === InvoiceTypes.GoodsCostPurchase) {\r\n            this.invoiceExtInHouseCtrl.patchValue(InvoiceSourceType[InvoiceSourceType.External]);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"\"","module.exports = \"\"","import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Component, HostListener, Inject } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { combineLatest, of, throwError } from 'rxjs';\r\nimport { catchError, finalize, mergeMap } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { DocumentGenerationConfirmationDialogBoxComponent } from '../../../shared/components/document-generation-confirmation-dialog-box/document-generation-confirmation-dialog-box.component';\r\nimport { DocumentTemplateSelectedEvent } from '../../../shared/document-template-event.entity';\r\nimport { DocumentPopupButtonSettings } from '../../../shared/entities/document-popup-button-settings.entity';\r\nimport { PhysicalDocumentReference } from '../../../shared/entities/document-reference.entity';\r\nimport { PhysicalDocumentTemplate } from '../../../shared/entities/document-template.entity';\r\nimport { ProblemDetail } from '../../../shared/entities/problem-detail.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { DocumentEntityTypes } from '../../../shared/enums/document-entity-type.enum';\r\nimport { DocumentTypes } from '../../../shared/enums/document-type.enum';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { InvoiceRecord } from '../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { PreaccountingService } from '../../../shared/services/http-services/preaccounting.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { AtlasFormControl } from './../../../shared/entities/atlas-form-control';\r\nimport { GenerateDocumentActions } from './../../../shared/enums/generate-document-action.enum';\r\nimport { DocumentService } from './../../../shared/services/http-services/document.service';\r\nimport { SnackbarService } from './../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoicing-base-form',\r\n    templateUrl: './invoicing-base-form.component.html',\r\n    styleUrls: ['./invoicing-base-form.component.scss'],\r\n})\r\nexport class InvoicingBaseFormComponent extends BaseFormComponent {\r\n    isCreateInvoiceButtonClicked = false;\r\n    protected formComponents: BaseFormComponent[] = [];\r\n    currentStep: number = 0;\r\n    hasTemplate = false;\r\n    previewDocumentCtrl = new AtlasFormControl('previewDocumentCtrl');\r\n    selectedTemplate: PhysicalDocumentTemplate;\r\n    isLoading = false;\r\n    selectedbankAccountId: number;\r\n    messageGenerated: string;\r\n    mappingFields = new Array();\r\n\r\n    constructor(protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        protected documentService: DocumentService,\r\n        @Inject(WINDOW) protected window: Window,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected preaccountingService: PreaccountingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected documentPopupService: DocumentPopupService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.goToInvoiceHome();\r\n            } else {\r\n                this.isLoading = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.formGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    goToInvoiceHome() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/invoicing/home']);\r\n    }\r\n\r\n    newSearchButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/invoicing/new']);\r\n    }\r\n\r\n    getCreateInvoiceInfo(): InvoiceRecord {\r\n        this.isCreateInvoiceButtonClicked = true;\r\n        let invoiceRecord = new InvoiceRecord();\r\n        this.formComponents.forEach((comp) => {\r\n            invoiceRecord = comp.populateEntity(invoiceRecord);\r\n        });\r\n\r\n        invoiceRecord.bankAccountId = this.selectedbankAccountId;\r\n\r\n        return invoiceRecord;\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    showConfirmationModal(hasPreview: boolean | string) {\r\n        if (hasPreview) {\r\n            this.createInvoice(true);\r\n        } else {\r\n            this.createInvoice();\r\n        }\r\n    }\r\n\r\n    createInvoice(isDraft = false) {\r\n        this.isLoading = true;\r\n        let dialog: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>;\r\n        const messageGenerating = 'Generating invoice' + (isDraft ? ' preview' : '') + '... Please wait.';\r\n        if (isDraft) {\r\n            dialog = this.documentPopupService.showDocumentGenerationPopup(\r\n                'Document Invoice',\r\n                'invoice',\r\n                new DocumentPopupButtonSettings(),\r\n            );\r\n            this.documentPopupService.startDialogWork(dialog, messageGenerating);\r\n        } else {\r\n            this.snackbarService.informationSnackBar(messageGenerating);\r\n        }\r\n\r\n        const invoiceRecord = this.getCreateInvoiceInfo();\r\n        invoiceRecord.isDraft = isDraft;\r\n        this.beforeInvoiceActions(invoiceRecord);\r\n        this.executionService.createInvoice(invoiceRecord)\r\n            .pipe(\r\n                mergeMap((invoice: InvoiceRecord) => {\r\n                    if (invoice.c2CCode && invoice.costAlternativeCode && invoice.departmentAlternativeCode\r\n                        && invoice.nominalAlternativeAccount && invoice.taxInterfaceCode) {\r\n                        this.messageGenerated = 'Invoice ' + invoice.documentReference + ' generated successfully';\r\n                    } else {\r\n                        if (!invoice.costAlternativeCode) {\r\n                            this.mappingFields.push('\"Cost Alternative Code\"');\r\n                        }\r\n                        if (!invoice.departmentAlternativeCode) {\r\n                            this.mappingFields.push('\"Department Alternative Code\"');\r\n                        }\r\n                        if (!invoice.nominalAlternativeAccount) {\r\n                            this.mappingFields.push('\"Nominal Account\"');\r\n                        }\r\n                        if (!invoice.taxInterfaceCode) {\r\n                            this.mappingFields.push('\"Tax Code\"');\r\n                        }\r\n                        if (!invoice.c2CCode) {\r\n                            this.mappingFields.push('\"C2C code\"');\r\n                        }\r\n                        const mappingErrorFields = this.mappingFields.join(', ');\r\n                        this.messageGenerated = 'The document ' + invoice.invoiceLabel +\r\n                            ' will not be sent to the accounting interface because the accounting interface code for '\r\n                            + mappingErrorFields + ' is/are not filled in. Please contact the accountant';\r\n                    }\r\n                    if (dialog) {\r\n                        dialog.componentInstance.processMessage = this.messageGenerated;\r\n                    } else {\r\n                        this.snackbarService.informationAndCopySnackBar(this.messageGenerated, this.messageGenerated);\r\n                    }\r\n                    return combineLatest(\r\n                        (invoice.physicalDocumentId) ?\r\n                            this.documentService.getGeneratedDocumentContent(invoice.physicalDocumentId, isDraft)\r\n                            : of(null),\r\n                        of(invoice));\r\n                }),\r\n                catchError((error) => {\r\n                    if (dialog) {\r\n                        dialog.close();\r\n                    }\r\n\r\n                    return throwError(error);\r\n                }),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                    this.documentPopupService.finishDialogWork(dialog);\r\n                }),\r\n            )\r\n            .subscribe(([response, invoice]) => {\r\n                if (!isDraft) {\r\n                    this.afterInvoiceActions(invoice);\r\n                } else {\r\n                    this.handleDialogEvents(invoice, dialog);\r\n                }\r\n                if (response) {\r\n                    this.downloadFile(response);\r\n                }\r\n            }\r\n                , (error) => {\r\n                    this.snackbarService.throwErrorSnackBar(error.error.detail);\r\n                });\r\n    }\r\n\r\n    beforeInvoiceActions(invoiceRecord: InvoiceRecord): void {\r\n        // overwritten in base child classes\r\n    }\r\n\r\n    afterInvoiceActions(invoiceRecord: InvoiceRecord, summaryRecord?: InvoiceRecord): void {\r\n        // overwritten in base child classes\r\n    }\r\n\r\n    downloadFile(response: HttpResponse<Blob>) {\r\n        const newBlob = new Blob([response.body],\r\n            { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n        const data = this.window.URL.createObjectURL(newBlob);\r\n        const link = document.createElement('a');\r\n        link.href = data;\r\n        link.download = this.utilService.getFileNameFromContentDisposition(response);\r\n        link.click();\r\n    }\r\n\r\n    handleDialogEvents(invoiceRecord: InvoiceRecord,\r\n        dialog: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>) {\r\n\r\n        this.subscriptions.push(dialog.componentInstance.documentSelected\r\n            .subscribe((file: File) => {\r\n                this.onFileSelected(dialog, invoiceRecord, file);\r\n            }));\r\n\r\n        this.subscriptions.push(dialog.afterClosed()\r\n            .subscribe((answer) => {\r\n                this.onDialogClosed(answer);\r\n            }));\r\n    }\r\n\r\n    onFileSelected(dialog: MatDialogRef<DocumentGenerationConfirmationDialogBoxComponent>,\r\n        invoiceRecord: InvoiceRecord,\r\n        file: File) {\r\n        this.documentPopupService.startDialogWork(dialog, 'Uploading document...');\r\n        const documentType = this.mapInvoiceTypeToPhysicalDocumentType(invoiceRecord.invoiceType);\r\n        this.subscriptions.push(this.documentService.uploadDocument(\r\n            invoiceRecord.invoiceId,\r\n            documentType,\r\n            invoiceRecord.template,\r\n            true,\r\n            file)\r\n            .pipe(\r\n                mergeMap((document: PhysicalDocumentReference) => {\r\n                    dialog.componentInstance.processMessage = 'Generating final document...';\r\n                    const invoiceInfo = this.getCreateInvoiceInfo();\r\n                    invoiceInfo.physicalDocumentId = document.physicalDocumentId;\r\n                    this.beforeInvoiceActions(invoiceInfo);\r\n                    return this.executionService.createInvoice(invoiceInfo);\r\n                }),\r\n                mergeMap((invoice: InvoiceRecord) => {\r\n                    dialog.componentInstance.processMessage = 'Downloading final document...';\r\n                    return combineLatest(this.documentService.getGeneratedDocumentContent(invoice.physicalDocumentId), of(invoice));\r\n                }),\r\n                finalize(() => {\r\n                    this.documentPopupService.finishDialogWork(dialog);\r\n                }),\r\n            )\r\n            .subscribe(\r\n                ([response, invoice]) => {\r\n                    this.downloadFile(response);\r\n                    this.afterInvoiceActions(invoice);\r\n                    dialog.close();\r\n                },\r\n                (error: HttpErrorResponse) => {\r\n                    dialog.componentInstance.errorMessage = this.documentPopupService.getErrorMessage(error, DocumentEntityTypes.Invoice);\r\n                },\r\n            ));\r\n    }\r\n\r\n    mapInvoiceTypeToPhysicalDocumentType(invoiceType: InvoiceTypes): DocumentTypes {\r\n        switch (invoiceType) {\r\n            case InvoiceTypes.Purchase:\r\n            case InvoiceTypes.Sales:\r\n                return DocumentTypes.InvoiceGoodsInvoice;\r\n            case InvoiceTypes.Cost:\r\n            case InvoiceTypes.CostReceivable:\r\n            case InvoiceTypes.CostCreditNote:\r\n            case InvoiceTypes.CostDebitNote:\r\n                return DocumentTypes.InvoiceCostsInvoice;\r\n            case InvoiceTypes.GoodsCostPurchase:\r\n            case InvoiceTypes.GoodsCostSales:\r\n                return DocumentTypes.InvoiceGoodsCostInvoice;\r\n            case InvoiceTypes.Washout:\r\n                return DocumentTypes.InvoiceWashout;\r\n            case InvoiceTypes.Reversal:\r\n                return DocumentTypes.InvoiceCancellation;\r\n            default:\r\n                console.error('Invalid invoice selection type: %s', invoiceType);\r\n                break;\r\n        }\r\n    }\r\n\r\n    onDialogClosed(dialogAnswer: any) {\r\n        if (dialogAnswer && dialogAnswer['buttonClicked']) {\r\n            if (dialogAnswer['buttonClicked'] === GenerateDocumentActions.ConfirmDocumentGeneration) {\r\n                this.createInvoice();\r\n            }\r\n        }\r\n    }\r\n\r\n    onDocumentTemplateSelected(documentSelectedEvent: DocumentTemplateSelectedEvent) {\r\n        this.hasTemplate = documentSelectedEvent.hasTemplate;\r\n        this.previewDocumentCtrl.setValue(this.hasTemplate);\r\n        this.selectedTemplate = documentSelectedEvent.template || undefined;\r\n    }\r\n}\r\n","module.exports = \"<div [ngSwitch]=\\\"invoiceTypeId\\\">\\r\\n    <atlas-commercial-summary #commercialSummaryComponent\\r\\n                              [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                              [isCreationMode]=\\\"isCreationMode\\\"\\r\\n                              *ngIf=\\\"isCommercial()\\\"></atlas-commercial-summary>\\r\\n    <atlas-cost-summary #costSummaryComponent\\r\\n                        [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                        *ngIf=\\\"isCost()\\\"></atlas-cost-summary>\\r\\n    <atlas-goods-cost-summary #goodsCostSummaryComponent\\r\\n                              [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                              *ngIf=\\\"isGoodsCost()\\\"></atlas-goods-cost-summary>\\r\\n    <atlas-washout-summary #washoutSummaryComponent\\r\\n                           [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                           *ngIf=\\\"isWashout()\\\"></atlas-washout-summary>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { InvoiceSummaryRecord } from '../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { CommercialSummaryComponent } from '../commercial/components/summary/commercial-summary.component';\r\nimport { CostSummaryComponent } from '../cost/components/summary/cost-summary.component';\r\nimport { GoodsCostSummaryComponent } from '../goods-cost/components/goods-cost-summary/goods-cost-summary.component';\r\nimport { WashoutSummaryComponent } from '../washout/components/washout-summary/washout-summary.component';\r\n\r\n@Component({\r\n    selector: 'atlas-invoicing-summary',\r\n    templateUrl: './invoicing-summary.component.html',\r\n    styleUrls: ['./invoicing-summary.component.scss'],\r\n})\r\nexport class InvoicingSummaryComponent extends BaseFormComponent implements OnInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('commercialSummaryComponent') commercialSummaryComponent: CommercialSummaryComponent;\r\n    @ViewChild('costSummaryComponent') costSummaryComponent: CostSummaryComponent;\r\n    @ViewChild('goodsCostSummaryComponent') goodsCostSummaryComponent: GoodsCostSummaryComponent;\r\n    @ViewChild('washoutSummaryComponent') washoutSummaryComponent: WashoutSummaryComponent;\r\n\r\n    createInvoiceFormGroup: FormGroup;\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    originalInvoiceTypeId: number = 0;\r\n    invoiceLabel: string;\r\n    invoiceId: number;\r\n    isFromGrid: boolean = false;\r\n    summaryRecord: InvoiceSummaryRecord;\r\n    defaultVATCode: string;\r\n    isCreationMode: boolean = false;\r\n    isLoading = true;\r\n    invoiceTypeForReversal: number;\r\n\r\n    constructor(private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        private formBuilder: FormBuilder,\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.invoiceId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.invoiceTypeId = Number(params['invoiceType']);\r\n            this.originalInvoiceTypeId = Number(params['originalInvoiceType']);\r\n        });\r\n        if (this.invoiceId && this.invoiceTypeId) {\r\n            if (this.invoiceTypeId === InvoiceTypes.Reversal) {\r\n                this.invoiceTypeForReversal = this.invoiceTypeId;\r\n                this.invoiceTypeId = this.originalInvoiceTypeId;\r\n            }\r\n            this.launchSelectedInvoiceSummary();\r\n            this.getInvoiceSetupByCompany();\r\n        }\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.createInvoiceFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    launchSelectedInvoiceSummary() {\r\n        this.subscriptions.push(this.executionService.\r\n            getInvoiceById(this.invoiceId)\r\n            .subscribe((data) => {\r\n                data.originalInvoiceType = this.originalInvoiceTypeId;\r\n                if (this.invoiceTypeId === InvoiceTypes.Reversal || this.invoiceTypeForReversal === InvoiceTypes.Reversal) {\r\n                    data.invoiceDate = data.reversedDocumentDate;\r\n                    data.invoiceType = InvoiceTypes.Reversal;\r\n                }\r\n                this.isLoading = false;\r\n                this.titleService.setTitle(data.invoiceCode + ' - Invoice View');\r\n                switch (this.invoiceTypeId) {\r\n                    case InvoiceTypes.Purchase:\r\n                    case InvoiceTypes.Sales:\r\n                        this.commercialSummaryComponent.setSummaryFieldsFromGrid(data);\r\n                        break;\r\n                    case InvoiceTypes.Cost:\r\n                    case InvoiceTypes.CostReceivable:\r\n                    case InvoiceTypes.CostCreditNote:\r\n                    case InvoiceTypes.CostDebitNote:\r\n                        this.invoiceTypeId = Number(InvoiceTypes.Cost);\r\n                        this.costSummaryComponent.setSummaryFieldsFromGrid(data);\r\n                        break;\r\n                    case InvoiceTypes.Washout:\r\n                    case InvoiceTypes.WashoutDebitNote:\r\n                        this.invoiceTypeId = Number(InvoiceTypes.Washout);\r\n                        this.washoutSummaryComponent.setSummaryFieldsFromGrid(data);\r\n                        break;\r\n                    case InvoiceTypes.GoodsCostPurchase:\r\n                    case InvoiceTypes.GoodsCostSales:\r\n                        this.goodsCostSummaryComponent.setSummaryFieldsFromGrid(data);\r\n                        break;\r\n                    case InvoiceTypes.Cancelled:\r\n                        this.invoiceTypeId = Number(InvoiceTypes.Washout);\r\n                        this.washoutSummaryComponent.setSummaryFieldsFromGrid(data);\r\n                        break;\r\n                    default: // throw Action not recognized exception\r\n                        break;\r\n                }\r\n            }));\r\n    }\r\n\r\n    getInvoiceSetupByCompany() {\r\n        this.subscriptions.push(this.executionService.getInvoiceSetupByCompany()\r\n            .subscribe((data) => {\r\n                this.defaultVATCode = data.defaultVATCode;\r\n            }));\r\n    }\r\n\r\n    isCommercial() {\r\n        return this.invoiceTypeId === Number(InvoiceTypes.Purchase)\r\n            || this.invoiceTypeId === Number(InvoiceTypes.Sales);\r\n    }\r\n\r\n    isCost() {\r\n        return this.invoiceTypeId === Number(InvoiceTypes.Cost)\r\n            || this.invoiceTypeId === Number(InvoiceTypes.CostReceivable)\r\n            || this.invoiceTypeId === Number(InvoiceTypes.CostCreditNote)\r\n            || this.invoiceTypeId === Number(InvoiceTypes.CostDebitNote);\r\n    }\r\n\r\n    isGoodsCost() {\r\n        return this.invoiceTypeId === Number(InvoiceTypes.GoodsCostPurchase)\r\n            || this.invoiceTypeId === Number(InvoiceTypes.GoodsCostSales);\r\n    }\r\n\r\n    isWashout() {\r\n        return this.invoiceTypeId === Number(InvoiceTypes.Washout)\r\n            || this.invoiceTypeId === Number(InvoiceTypes.WashoutDebitNote)\r\n            || this.invoiceTypeId === Number(InvoiceTypes.Cancelled);\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card fxFlex=\\\"100\\\">\\r\\n        <form [formGroup]=\\\"searchForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           (keydown.enter)=\\\"onSearchReversalDocumentClicked()\\\"\\r\\n                           formControlName=\\\"searchDocumentCtrl\\\"\\r\\n                           placeholder=\\\"Invoice Document Ref\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           formControlName=\\\"contractReferenceCtrl\\\"\\r\\n                           placeholder=\\\"Contract Reference\\\"\\r\\n                           (keydown.enter)=\\\"onSearchReversalDocumentClicked()\\\"\\r\\n                           #action>\\r\\n                </mat-form-field>\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"charterReferenceCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCharters\\\"\\r\\n                                                         label=\\\"Charter Reference\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchReversalDocumentClicked()\\\"\\r\\n                                                         displayProperty=\\\"charterCode\\\"\\r\\n                                                         [selectProperties]=\\\"['charterCode','description']\\\"\\r\\n                                                         [errorMap]=\\\"charterErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for charters\\\"\\r\\n                                                         gridId=\\\"charterGrid\\\"\\r\\n                                                         [dataLoader]=\\\"charterDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                         label=\\\"Counter Party\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchReversalDocumentClicked()\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchReversalDocumentClicked()\\\"\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\\r\\n<atlas-filter-set-display (filtersChanged)=onFilterSetDetailsChange($event)\\r\\n                          [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                          [gridCode]=\\\"gridCode\\\"\\r\\n                          [company]=\\\"company\\\"\\r\\n                          #filterSetDisplayComponent>\\r\\n</atlas-filter-set-display>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card fxFlex=\\\"100\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             *ngIf=\\\"!isLoading\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"no-margin\\\">{{gridTitle}}</h2>\\r\\n\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"reversalDocumentGridOptions && reversalDocumentGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"reversalDocumentGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"reversalDocumentGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [gridOptions]=\\\"reversalDocumentGridOptions\\\"\\r\\n                             [rowData]=\\\"reversalDocumentGridRows\\\"\\r\\n                             [columnDefs]=\\\"reversalDocumentGridColumns\\\"\\r\\n                             domLayout=autoHeight\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [enableFilter]=\\\"true\\\"\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             rowMultiSelectWithClick=true\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (firstDataRendered)=\\\"onFirstDataRendered($event)\\\"\\r\\n                             (rowSelected)=\\\"onRowSelected($event)\\\">\\r\\n                <!-- [suppressRowClickSelection]=\\\"true\\\" -->\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\\r\\n\"","module.exports = \".atlas-grid-card-header h3 {\\n  margin-bottom: 0; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AgGridCheckboxComponent } from '../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { InvoiceReversalSearchResult } from '../../../../../../../shared/dtos/invoice-reversal';\r\nimport { ListAndSearchFilterDto } from '../../../../../../../shared/dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../../../shared/entities/charter.entity';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { IsLocked } from '../../../../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../../../../../../shared/entities/list-and-search/list-and-search-request.entity';\r\nimport { LockFunctionalContext } from '../../../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ReversalRowSelection } from '../../../../../../../shared/entities/reversal-row-selection.entity';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../../../../shared/services/execution/charter-data-loader';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../../../shared/services/http-services/lock.service';\r\nimport { CounterPartyDataLoader } from '../../../../../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { ExecutionActionsService } from '../../../../../../services/execution-actions.service';\r\nimport { DocumentTypeComponent } from '../document-type/document-type.component';\r\nimport { FilterSetDisplayComponent } from './../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\n\r\n@Component({\r\n    selector: 'atlas-document-search',\r\n    templateUrl: './document-search.component.html',\r\n    styleUrls: ['./document-search.component.scss'],\r\n    providers: [CounterPartyDataLoader, CharterDataLoader],\r\n})\r\nexport class DocumentSearchComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplayComponent') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    @ViewChild('documentTypeComponent') documentTypeComponent: DocumentTypeComponent;\r\n    @Output() readonly documentTypeSelected = new EventEmitter<number>();\r\n    @Output() readonly documentDateSelected = new EventEmitter<Date>();\r\n    @Output() readonly rowSelected = new EventEmitter<ReversalRowSelection>();\r\n\r\n    dataLength: number = 0;\r\n    searchForm: FormGroup;\r\n    invoiceType: number;\r\n    company: string;\r\n    isLoading: boolean;\r\n    searchInvoiceReference: string;\r\n    documentDate: Date;\r\n    documentTypeId: number;\r\n    transactionDocumentId: number;\r\n    reversalInvoiceReference: string;\r\n    transactionDocumentTypeId: number = 0;\r\n    invoiceId: number;\r\n    searchContractReference: string;\r\n    searchCharterReference: string;\r\n    searchCounterParty: string;\r\n\r\n    gridTitle = 'Reversible Invoices';\r\n    gridCode: string = 'invoiceReversalSelectionGrid';\r\n\r\n    reversalDocumentGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    reversalDocumentGridColumns: agGrid.ColDef[];\r\n    hasGridSharing = false;\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    reversalDocumentGridRows: InvoiceReversalSearchResult[];\r\n    reversalDocumentGrid: InvoiceReversalSearchResult[];\r\n    reversalDocuments: InvoiceReversalSearchResult[];\r\n    additionnalColumns = [];\r\n\r\n    filters: ListAndSearchFilter[];\r\n    destroy$ = new Subject();\r\n\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    filteredCounterPartyList: Counterparty[];\r\n    masterdata: MasterData = new MasterData();\r\n    counterPartyCtrl = new AtlasFormControl('CounterPartyReversal');\r\n    filteredCharters: Charter[];\r\n    charters: Charter[];\r\n    charterReferenceCtrl = new AtlasFormControl('CharterRefReversal');\r\n    saveContractRef: string;\r\n    saveCounterparty: string;\r\n    saveCharterReference: string;\r\n    saveInvoiceReference: string;\r\n    counterPartyControl: Counterparty;\r\n    counterPartyList: Counterparty[];\r\n    charterRefControl: Charter;\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Counter Party not in the list.');\r\n    charterErrorMap: Map<string, string> = new Map();\r\n    count: number = 0;\r\n    savedFilters: ListAndSearchFilter[];\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private snackbarService: SnackbarService,\r\n        protected uiService: UiService,\r\n        private executionService: ExecutionService,\r\n        protected dialog: MatDialog,\r\n        protected lockService: LockService,\r\n        protected utilService: UtilService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        public charterDataLoader: CharterDataLoader,\r\n        public gridService: AgGridService,\r\n        public executionActionsService: ExecutionActionsService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.searchForm = this.formBuilder.group({\r\n            searchDocumentCtrl: [''],\r\n            contractReferenceCtrl: [''],\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data['masterdata'] as MasterData;\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.bindConfiguration();\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyList = this.filteredCounterPartyList;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.populateCharterList();\r\n        this.charterReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCharterReference(input);\r\n        });\r\n        this.loadGridConfiguration();\r\n\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.saveContractRef = params['savedContractReference'];\r\n            this.saveCounterparty = params['savedCounterParty'];\r\n            this.saveCharterReference = params['savedCharterReference'];\r\n            this.saveInvoiceReference = params['savedInvoiceReference'];\r\n        });\r\n        if (this.executionActionsService.EditCriteriaRetainFilter && this.executionActionsService.EditCriteriaRetainFilter.length > 0) {\r\n            this.savedFilters = this.executionActionsService.EditCriteriaRetainFilter;\r\n        }\r\n        if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference || this.saveInvoiceReference) {\r\n            if (this.saveContractRef) {\r\n                this.searchForm.controls['contractReferenceCtrl'].setValue(this.saveContractRef);\r\n            }\r\n            if (this.saveInvoiceReference) {\r\n                this.searchForm.controls['searchDocumentCtrl'].setValue(this.saveInvoiceReference);\r\n            }\r\n            if (this.saveCounterparty) {\r\n                this.counterPartyControl = this.counterPartyList.find((counterParty) =>\r\n                    counterParty.counterpartyCode === this.saveCounterparty);\r\n                this.counterPartyCtrl.patchValue(this.counterPartyControl);\r\n            }\r\n            if (this.saveCharterReference) {\r\n                this.charterRefControl = this.charters.find((charter) =>\r\n                    charter.charterCode === this.saveCharterReference);\r\n                this.charterReferenceCtrl.patchValue(this.charterRefControl);\r\n            }\r\n        }\r\n    }\r\n\r\n    populateCharterList() {\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.charters = charter;\r\n            this.filteredCharters = this.charters;\r\n        });\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onSearchReversalDocumentClicked();\r\n        }\r\n    }\r\n    filterCharterReference(input) {\r\n        this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.charters,\r\n            ['charterCode', 'description'],\r\n        );\r\n        if (this.charterReferenceCtrl.valid || !this.charterReferenceCtrl.value) {\r\n            this.onSearchReversalDocumentClicked();\r\n        }\r\n    }\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.reversalDocumentGridColumns = [];\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        // selection column\r\n        this.reversalDocumentGridColumns.push(\r\n            {\r\n                headerCheckboxSelection: false,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'left',\r\n            });\r\n\r\n        // grid config\r\n        this.reversalDocumentGridColumns = this.reversalDocumentGridColumns\r\n            .concat(configuration.map((config: ColumnConfigurationProperties) => {\r\n                const columnDef: agGrid.ColDef = {\r\n                    colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                    headerName: config.friendlyName,\r\n                    field: this.utilService.convertToCamelCase(config.fieldName),\r\n                    width: 100,\r\n                    hide: !config.isVisible,\r\n                };\r\n                const formatter = this.uiService.getFormatterForType(config.gridType);\r\n                if (formatter) {\r\n                    columnDef.valueFormatter = formatter;\r\n                }\r\n                const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n                if (dateGetter) {\r\n                    columnDef.cellClass = 'dateFormat';\r\n                    columnDef.valueGetter = dateGetter;\r\n                }\r\n\r\n                if (config.gridType === 'boolean') {\r\n                    columnDef.cellRendererFramework = AgGridCheckboxComponent;\r\n                    columnDef.cellRendererParams = { disabled: true };\r\n                }\r\n\r\n                const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n                if (numericColumn) {\r\n                    columnDef.type = 'numericColumn';\r\n                    columnDef.valueFormatter = this.numberFormatter;\r\n                }\r\n\r\n                return columnDef;\r\n            }));\r\n\r\n        // calculated columns\r\n        this.reversalDocumentGridColumns = this.reversalDocumentGridColumns.concat(this.additionnalColumns);\r\n\r\n        if (this.gridApi) {\r\n            if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n        }\r\n        if (this.reversalDocumentGridOptions && this.reversalDocumentGridOptions.api) {\r\n            this.reversalDocumentGridOptions.columnDefs = this.reversalDocumentGridColumns;\r\n            this.reversalDocumentGridOptions.api.setColumnDefs(this.reversalDocumentGridColumns);\r\n        }\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]) {\r\n        this.executionActionsService.EditCriteriaRetainFilter = filters;\r\n        this.filters = filters;\r\n        if (this.count === 1) {\r\n            this.filters = this.savedFilters;\r\n            this.savedFilters = null;\r\n            this.count = 0;\r\n        }\r\n        if (this.savedFilters && this.count === 0) {\r\n            if (this.filterSetDisplayComponent) {\r\n                this.count = 1;\r\n                const localFilters: ListAndSearchFilterDto[] = this.savedFilters.map((filter: ListAndSearchFilter) => {\r\n                    return new ListAndSearchFilterDto(filter);\r\n                });\r\n                this.filterSetDisplayComponent.loadFilters(localFilters);\r\n            }\r\n        } else {\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        if (!this.filters) {\r\n            return;\r\n        }\r\n        const filters = this.filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n        this.isLoading = true;\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filters },\r\n        };\r\n\r\n        this.executionService.searchInvoicesToReverse(request).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((data) => {\r\n            this.reversalDocumentGrid = data.value;\r\n            this.reversalDocumentGridRows = this.reversalDocumentGrid.filter((reversalContract) => {\r\n                const reversalContractQuantityValue = Number(reversalContract.quantity);\r\n                const reversalContractQuantityValueFixes = Number(reversalContractQuantityValue.toFixed(3));\r\n                if (reversalContractQuantityValueFixes) {\r\n                    return reversalContract;\r\n                }\r\n            });\r\n            this.reversalDocuments = this.reversalDocumentGridRows;\r\n            this.dataLength = this.reversalDocumentGridRows.length;\r\n            this.gridApi.hideOverlay();\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n            if (this.filters.length === 0) {\r\n                if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference || this.saveInvoiceReference) {\r\n                    this.onSearchReversalDocumentClicked();\r\n                }\r\n            }\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.reversalDocumentGridColumns;\r\n        this.gridApi = params.api;\r\n        this.reversalDocumentGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n    }\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi && this.reversalDocumentGridColumns) {\r\n            const allColumnIds = [];\r\n            this.reversalDocumentGridColumns.forEach((columnDefs) => {\r\n                allColumnIds.push(columnDefs.field);\r\n            });\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged() {\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    externalFilterPresent() {\r\n        if (this.searchInvoiceReference) {\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    externalFilterPass(node) {\r\n        const invoiceReference = node.data.invoiceReference;\r\n        return invoiceReference === this.searchInvoiceReference.toUpperCase()\r\n            || invoiceReference.toString().match(this.searchInvoiceReference);\r\n    }\r\n\r\n    contractValid(node) {\r\n        if (node.data.contractUnApproved === true || node.data.invoiceMatched === true) {\r\n            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };\r\n        }\r\n    }\r\n\r\n    onSearchReversalDocumentClicked() {\r\n        this.searchInvoiceReference = this.searchForm.get('searchDocumentCtrl').value;\r\n        this.searchContractReference = this.searchForm.get('contractReferenceCtrl').value;\r\n        if (this.counterPartyCtrl.value === '') {\r\n            this.searchCounterParty = this.counterPartyCtrl.value;\r\n        } else\r\n            if (this.counterPartyCtrl.value) {\r\n                this.searchCounterParty = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n                if (!this.searchCounterParty) {\r\n                    this.searchCounterParty = this.counterPartyCtrl.value;\r\n                }\r\n            }\r\n        if (this.charterReferenceCtrl.value === '') {\r\n            this.searchCharterReference = this.charterReferenceCtrl.value;\r\n        } else\r\n            if (this.charterReferenceCtrl.value) {\r\n                this.searchCharterReference = (this.charterReferenceCtrl.value as Charter).charterCode;\r\n                if (!this.searchCharterReference) {\r\n                    this.searchCharterReference = this.charterReferenceCtrl.value;\r\n                }\r\n            }\r\n        let documentRows: number = 0;\r\n        let contractRows: number = 0;\r\n        let charterRows: number = 0;\r\n        // This Commented code will be removed once thorough testing for grid is done\r\n        // if (this.gridApi) { this.gridApi.onFilterChanged(); }\r\n        // this.dataLength = this.gridApi.getDisplayedRowCount();\r\n\r\n        let rows: InvoiceReversalSearchResult[] = [];\r\n        let reversalContracts: InvoiceReversalSearchResult[] = [];\r\n        if (!this.searchInvoiceReference && !this.searchContractReference && !this.searchCharterReference && !this.searchCounterParty) {\r\n            this.reversalDocumentGridRows = this.reversalDocuments;\r\n            return;\r\n        }\r\n        if (this.reversalDocuments && this.reversalDocuments.length > 0) {\r\n            this.isLoading = true;\r\n            this.reversalDocumentGridRows = this.reversalDocuments;\r\n            this.filters = [];\r\n            // (this.searchTerm) ?\r\n            //     rows = this.reversalDocuments.filter((item) =>\r\n            //         item.invoiceReference.toString().toUpperCase().includes(this.searchTerm.toUpperCase())) :\r\n            //     rows = this.reversalDocuments;\r\n            if (this.searchInvoiceReference) {\r\n                reversalContracts = this.reversalDocuments.filter((item) => item.invoiceReference != null);\r\n                rows = reversalContracts.filter((item) =>\r\n                    item.invoiceReference.toString().toUpperCase().includes(this.searchInvoiceReference.toUpperCase()));\r\n                documentRows = -1;\r\n            }\r\n            if (this.searchContractReference) {\r\n                if (rows.length === 0 && contractRows === 0) {\r\n                    reversalContracts = this.reversalDocuments.filter((item) => item.contractReference != null);\r\n                    rows = reversalContracts.filter((item) =>\r\n                        item.contractReference.toString().toUpperCase().includes(this.searchContractReference.toUpperCase()));\r\n                } else {\r\n                    rows = rows.filter((item) => item.contractReference != null);\r\n                    rows = rows.filter((item) => item.contractReference.toString().toUpperCase().\r\n                        includes(this.searchContractReference.toUpperCase()));\r\n                }\r\n                contractRows = -1;\r\n            }\r\n            if (this.searchCharterReference) {\r\n                if (rows.length === 0 && contractRows === 0) {\r\n                    reversalContracts = this.reversalDocuments.filter((item) => item.charterReference != null);\r\n                    rows = reversalContracts.filter((item) =>\r\n                        item.charterReference.toString().toUpperCase().includes(this.searchCharterReference.toUpperCase()));\r\n                } else {\r\n                    rows = rows.filter((item) => item.charterReference != null);\r\n                    rows = rows.filter((item) => item.charterReference.toString().toUpperCase().\r\n                        includes(this.searchCharterReference.toUpperCase()));\r\n                }\r\n                charterRows = -1;\r\n            }\r\n            if (this.searchCounterParty) {\r\n                if (rows.length === 0 && charterRows === 0 && contractRows === 0) {\r\n                    reversalContracts = this.reversalDocuments.filter((item) => item.customerRef != null);\r\n                    rows = reversalContracts.filter((item) =>\r\n                        item.customerRef.toString().toUpperCase().includes(this.searchCounterParty.toUpperCase()));\r\n                } else {\r\n                    rows = rows.filter((item) => item.customerRef != null);\r\n                    rows = rows.filter((item) => item.customerRef.toString().toUpperCase().\r\n                        includes(this.searchCounterParty.toUpperCase()));\r\n                }\r\n            }\r\n        }\r\n\r\n        this.reversalDocumentGridRows = rows;\r\n        this.dataLength = this.reversalDocumentGridRows.length;\r\n        this.autoSizeContractsGrid();\r\n        this.isLoading = false;\r\n        (this.reversalDocumentGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n    deselectNode(currentRowIndex) {\r\n        this.reversalDocumentGridOptions.api.forEachNode((node) => {\r\n            if (Number(node.id) === currentRowIndex) {\r\n                this.reversalDocumentGridOptions.api.deselectNode(node);\r\n            }\r\n        });\r\n    }\r\n    onRowSelected(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        const currentRowIndex = event.rowIndex;\r\n        if (selectedRows.length === 0) {\r\n            this.documentDateSelected.emit(null);\r\n            this.reversalInvoiceReference = '';\r\n            const row: ReversalRowSelection = {\r\n                data: null,\r\n                isRowSelected: false,\r\n            };\r\n            this.rowSelected.emit(row);\r\n        }\r\n        if (!event.node.isSelected()) {\r\n            if (event.data.invoiceReference === this.reversalInvoiceReference) {\r\n                this.gridApi.forEachNode((rowData) => {\r\n                    if (rowData.data.invoiceReference === this.reversalInvoiceReference) {\r\n                        rowData.selectThisNode(false);\r\n                    }\r\n                });\r\n            }\r\n            this.gridApi.deselectNode(event.node);\r\n        } else {\r\n            if (event.data.contractUnApproved === true) {\r\n                this.snackbarService.informationSnackBar('Check Approval Status of the Contract');\r\n                this.gridApi.deselectIndex(currentRowIndex);\r\n            }\r\n            if (event.data.invoiceMatched === true) {\r\n                this.snackbarService.informationSnackBar('Document cannot be reversed since it is already matched');\r\n                this.gridApi.deselectIndex(currentRowIndex);\r\n            }\r\n            if (selectedRows.length === 1) {\r\n                if (event.node.selected === true) {\r\n                    this.reversalInvoiceReference = event.data.invoiceReference;\r\n                    this.invoiceId = event.data.invoiceId;\r\n                    this.documentDate = event.data.documentDate;\r\n                    this.transactionDocumentId = event.data.transactionDocumentId;\r\n                    this.transactionDocumentTypeId = event.data.transactionDocumentTypeId;\r\n                    this.documentTypeSelected.emit(this.documentTypeId);\r\n                    this.documentDateSelected.emit(this.documentDate);\r\n                    const row: ReversalRowSelection = {\r\n                        data: event.data,\r\n                        isRowSelected: event.node.selected,\r\n                    };\r\n                    this.rowSelected.emit(row);\r\n                }\r\n            }\r\n            if (selectedRows.length > 1) {\r\n                if (event.data.invoiceReference !== this.reversalInvoiceReference) {\r\n                    this.snackbarService.informationSnackBar('Only One Invoice Document can be reversed at a time');\r\n                    this.gridApi.deselectIndex(currentRowIndex);\r\n                }\r\n            }\r\n        }\r\n        this.grantLock(Number(event.data.invoiceId), event.node);\r\n    }\r\n\r\n    grantLock(invoiceId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(invoiceId)) {\r\n                this.locking.push(invoiceId);\r\n                this.subscriptions.push(this.lockService.isLockedInvoice(invoiceId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.gridApi.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== invoiceId);\r\n                    } else {\r\n                        this.subscriptions.push(this.lockService.lockInvoice(\r\n                            invoiceId, LockFunctionalContext.ReversalInvoicing).subscribe(\r\n                                () => {\r\n                                    this.refeshResourceInformation();\r\n                                    this.locking = this.locking.filter((id) => id !== invoiceId);\r\n                                },\r\n                                (error) => {\r\n                                    const errorMessage = error && error.error && error.error.detail && error.error.detail.length > 0 ?\r\n                                        error.error.detail :\r\n                                        'The invoice or one of the contract related is locked by another user.';\r\n                                    this.dialog.open(ConfirmationDialogComponent, {\r\n                                        data: {\r\n                                            title: 'Lock',\r\n                                            text: errorMessage,\r\n                                            okButton: 'Got it',\r\n                                        },\r\n                                    });\r\n                                    this.gridApi.deselectNode(node);\r\n                                    this.locking = this.locking.filter((id) => id !== invoiceId);\r\n                                }));\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(invoiceId)) {\r\n                this.unlocking.push(invoiceId);\r\n                this.refeshResourceInformation();\r\n                if (this.resourcesInformation.filter((rsc) => rsc.resourceId === invoiceId).length === 0) {\r\n                    this.subscriptions.push(this.lockService.unlockInvoice(\r\n                        invoiceId, LockFunctionalContext.ReversalInvoicing).subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== invoiceId);\r\n                        }));\r\n                } else {\r\n                    node.setRowSelectable(true);\r\n                    this.unlocking = this.unlocking.filter((id) => id !== invoiceId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.gridApi.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Invoice';\r\n                resourceInformation.resourceId = node.data.invoiceId;\r\n                resourceInformation.resourceCode = node.data.invoiceReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceDetails = entity as InvoiceRecord;\r\n        invoiceDetails.invoiceId = this.invoiceId;\r\n        invoiceDetails.transactionDocumentId = this.transactionDocumentId;\r\n        invoiceDetails.invoiceLabel = this.reversalInvoiceReference;\r\n        invoiceDetails.transactionDocumentTypeId = this.transactionDocumentTypeId;\r\n        return invoiceDetails;\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        if (params && params.value && !isNaN(params.value)) {\r\n            if (params.colDef.colId.toLowerCase() === 'costamount' || params.colDef.colId.toLowerCase() === 'totalinvoicevalue'\r\n                || params.colDef.colId.toLowerCase() === 'quantity') {\r\n                if (params.colDef.colId.toLowerCase() === 'quantity') {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params.value);\r\n                } else {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>\\r\\n            Reverse Settings\\r\\n        </h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            placeholder=\\\"Document Type\\\"\\r\\n                            [formControl]=\\\"documentTypeCtrl\\\"\\r\\n                            matTooltip=\\\"Document Type\\\">\\r\\n\\r\\n                    <mat-option *ngFor=\\\"let info of masterDataDocumentType\\\"\\r\\n                                [value]=\\\"info.physicalDocumentTypeId\\\">\\r\\n                        {{info.physicalDocumentTypeLabel}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                            class=\\\"mandatory\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Document Date\\\"\\r\\n                       [formControl]=\\\"documentDateCtrl\\\"\\r\\n                       [matDatepicker]=\\\"documentDatePicker\\\"\\r\\n                       matTooltip=\\\"Document Date\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onDocumentDateSelected()'>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"documentDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-error *ngIf=\\\"documentDateCtrl.hasError('isDateAfterValid')\\\">\\r\\n                    Document Date cannot be after Today’s Date\\r\\n                </mat-error>\\r\\n                <mat-datepicker #documentDatePicker></mat-datepicker>\\r\\n                <mat-error *ngIf=\\\"documentDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                    Document Date cannot be before Invoice Date\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"!documentDateCtrl.hasError('isDateBeforeValid' || 'required') && !documentDateCtrl.disabled\\\"\\r\\n                          class=\\\"invoice-creation-required-fields\\\">Required*</mat-hint>\\r\\n                <mat-error *ngIf=\\\"documentDateCtrl.hasError('required')\\\">\\r\\n                    Required*\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { PhysicalDocumentType } from '../../../../../../../shared/entities/document-type.entity';\r\nimport { TransactionDocumentTypes } from '../../../../../../../shared/enums/transaction-document-type.enum';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { documentDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-document-type',\r\n    templateUrl: './document-type.component.html',\r\n    styleUrls: ['./document-type.component.scss'],\r\n})\r\nexport class DocumentTypeComponent extends BaseFormComponent implements OnInit {\r\n\r\n    documentDateCtrl = new AtlasFormControl('reversalDocumentDate', '', Validators.required);\r\n    documentTypeCtrl = new AtlasFormControl('reversalDocumentType');\r\n\r\n    masterDataDocumentType: PhysicalDocumentType[];\r\n    documentDate: Moment;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterDataDocumentType = [\r\n            {\r\n                physicalDocumentTypeId: TransactionDocumentTypes.Original,\r\n                physicalDocumentTypeLabel: TransactionDocumentTypes[TransactionDocumentTypes.Original],\r\n            },\r\n            {\r\n                physicalDocumentTypeId: TransactionDocumentTypes['CN/DN'],\r\n                physicalDocumentTypeLabel: TransactionDocumentTypes[TransactionDocumentTypes['CN/DN']],\r\n            },\r\n        ];\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            documentDateCtrl: this.documentDateCtrl,\r\n            documentTypeCtrl: this.documentTypeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    documentDateSelected(documentDate: Date) {\r\n        if (!documentDate) {\r\n            this.documentDateCtrl.patchValue('');\r\n            this.documentDateCtrl.clearValidators();\r\n        } else {\r\n            this.documentDate = moment(documentDate);\r\n            this.documentDateCtrl.patchValue(documentDate);\r\n        }\r\n    }\r\n    rowSelected(rowSelection: boolean) {\r\n        if (!rowSelection) {\r\n            this.documentTypeCtrl.patchValue('');\r\n        } else {\r\n            this.documentTypeCtrl.patchValue(TransactionDocumentTypes.Original);\r\n            this.documentTypeCtrl.updateValueAndValidity();\r\n        }\r\n    }\r\n    onDocumentDateSelected() {\r\n        const invoiceDate = new Date(this.documentDateCtrl.value);\r\n        this.documentDateCtrl.clearValidators();\r\n        this.documentDateCtrl.setValidators(\r\n            Validators.compose([Validators.required, documentDateValidation(invoiceDate, this.documentDate)]));\r\n        this.documentDateCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceDetails = entity as InvoiceRecord;\r\n        invoiceDetails.documentType = this.documentTypeCtrl.value;\r\n        invoiceDetails.invoiceDate = this.documentDateCtrl.value;\r\n        return invoiceDetails;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\"\\r\\n          fxFlex=\\\"100\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Invoice Document</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            (optionSelected)=\\\"onExternalInHouseSelected()\\\"\\r\\n                            placeholder=\\\"External/InHouse\\\"\\r\\n                            [formControl]=\\\"invoiceExtInHouseCtrl\\\"\\r\\n                            [matTooltip]=\\\"'External/InHouse'\\\">\\r\\n\\r\\n                    <mat-option *ngFor=\\\"let info of invoiceSourceType\\\"\\r\\n                                [value]=\\\"info.viewValue\\\">\\r\\n                        {{info.viewValue}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"60%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"External Invoice Reference\\\"\\r\\n                       [formControl]=\\\"invoiceExtRefCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('required')\\\">\\r\\n                    Reference is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('maxlength')\\\">\\r\\n                    Must be less than 25 characters\\r\\n                </mat-error>\\r\\n                <mat-hint align=\\\"end\\\">{{invoiceExtRefCtrl.value.length}} / 25</mat-hint>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"!isUnique\\\">\\r\\n                    Reference Number already used\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            placeholder=\\\"Template\\\"\\r\\n                            [formControl]=\\\"invoiceTemplatesCtrl\\\"\\r\\n                            (selectionChange)=\\\"onInvoiceTemplateSelected()\\\"\\r\\n                            matTooltip=\\\"Template\\\"\\r\\n                            [required]=\\\"invoiceTemplatesCtrl.isRequired\\\">\\r\\n                    <mat-option></mat-option>\\r\\n                    <mat-option *ngFor=\\\"let template of filteredTemplates\\\"\\r\\n                                [value]=\\\"template\\\">\\r\\n                        {{template.name}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n                <mat-error *ngIf=\\\"invoiceTemplatesCtrl.hasError('required')\\\">\\r\\n                    Template is required\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { InvoiceSourceType } from '../../../../../../../shared/enums/invoice-source-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../../../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { DocumentTemplateComponent } from '../../../../../components/document-template/document-template.component';\r\n\r\n@Component({\r\n    selector: 'atlas-reversal-document-template',\r\n    templateUrl: './reversal-document-template.component.html',\r\n    styleUrls: ['./reversal-document-template.component.scss'],\r\n})\r\nexport class ReversalDocumentTemplateComponent extends DocumentTemplateComponent implements OnInit {\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected documentService: DocumentService,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formBuilder,\r\n            route,\r\n            documentService,\r\n            utilService,\r\n            executionService,\r\n            formConfigurationProvider);\r\n    }\r\n\r\n    getData() {\r\n        this.invoiceExtInHouseCtrl.patchValue(InvoiceSourceType[InvoiceSourceType.Inhouse]);\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"card-header-luke\\\">\\r\\n    <mat-card-title>\\r\\n        <h2> Invoice Selections</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <div fxFlex=\\\"33%\\\"\\r\\n                 fxFlex.xs=\\\"33%\\\"\\r\\n                 fxFlex.sm=\\\"33%\\\">\\r\\n                <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Invoice type\\\"\\r\\n                           matTooltip=\\\"Invoice Type\\\"\\r\\n                           [formControl]=\\\"invoiceTypeSelectedCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           readonly>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"33%\\\"\\r\\n                 fxFlex.xs=\\\"33%\\\"\\r\\n                 fxFlex.sm=\\\"33%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Costs/Commission\\\"\\r\\n                           matTooltip=\\\"Costs/Commission\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"costsCommissionTypeCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"33%\\\"\\r\\n                 fxFlex.xs=\\\"33%\\\"\\r\\n                 fxFlex.sm=\\\"33%\\\">\\r\\n                <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Quantity to Invoice\\\"\\r\\n                           matTooltip=\\\"Quantity to Invoice\\\"\\r\\n                           [formControl]=\\\"quantityToInvoiceCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           readonly>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".card-header-luke {\\n  min-height: auto; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-reversal-invoice-selection',\r\n    templateUrl: './reversal-invoice-selection.component.html',\r\n    styleUrls: ['./reversal-invoice-selection.component.scss'],\r\n})\r\n\r\nexport class ReversalInvoiceSelectionComponent extends BaseFormComponent implements OnInit {\r\n    invoiceTypeSelectedCtrl = new AtlasFormControl('invoiceTypeSelected');\r\n    costsCommissionTypeCtrl = new AtlasFormControl('costsCommissionSelection');\r\n    quantityToInvoiceCtrl = new AtlasFormControl('quantityToInvoiceSelection');\r\n\r\n    invoiceTypeId: number;\r\n    invoiceTypeName: string;\r\n    selectedInvoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n    contract: string = 'Contract';\r\n    reversalInvoiceTypeName: string = 'Reversal';\r\n\r\n    masterdata: MasterData = new MasterData();\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        if (this.masterdata) {\r\n            const invoiceType = this.masterdata.\r\n                invoiceTypes.find((invoice) => invoice.invoiceTypeId === this.invoiceTypeId);\r\n            if (invoiceType) {\r\n                this.invoiceTypeName = invoiceType.name;\r\n                this.invoiceTypeSelectedCtrl.patchValue(this.invoiceTypeName);\r\n            }\r\n        }\r\n        this.costsCommissionTypeCtrl.disable();\r\n        this.quantityToInvoiceCtrl.setValue(this.contract);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceTypeSelectedCtrl: this.invoiceTypeSelectedCtrl,\r\n            costsCommissionTypeCtrl: this.costsCommissionTypeCtrl,\r\n            quantityToInvoiceCtrl: this.quantityToInvoiceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const invoiceType = entity as InvoiceRecord;\r\n        invoiceType.invoiceType = this.invoiceTypeId;\r\n        invoiceType.quantityToInvoice = this.quantityToInvoiceCtrl.value;\r\n        return invoiceType;\r\n    }\r\n}\r\n","module.exports = \"<atlas-reversal-invoice-selection #invoiceSelectionComponent></atlas-reversal-invoice-selection>\\r\\n<atlas-document-search #documentSearchComponent\\r\\n                       (documentTypeSelected)=\\\"documentTypeSelected($event)\\\"\\r\\n                       (documentDateSelected)=\\\"documentDateSelected($event)\\\"\\r\\n                       (rowSelected)=\\\"onRowSelected($event)\\\">\\r\\n</atlas-document-search>\\r\\n<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxFlex=\\\"49\\\">\\r\\n        <atlas-document-type #documentTypeComponent></atlas-document-type>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxFlex=\\\"49\\\">\\r\\n        <atlas-reversal-document-template #documentTemplateComponent\\r\\n                                          (templateSelected)=\\\"onTemplateSelected($event)\\\"\\r\\n                                          [documentType]=\\\"DocumentTypes.InvoiceCancellation\\\">\\r\\n        </atlas-reversal-document-template>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { DocumentTemplateSelectedEvent } from '../../../../../shared/document-template-event.entity';\r\nimport { InvoiceReversalSearchResult } from '../../../../../shared/dtos/invoice-reversal';\r\nimport { ReversalRowSelection } from '../../../../../shared/entities/reversal-row-selection.entity';\r\nimport { DocumentTypes } from '../../../../../shared/enums/document-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentSearchComponent } from './components/document-search/document-search.component';\r\nimport { DocumentTypeComponent } from './components/document-type/document-type.component';\r\nimport { ReversalDocumentTemplateComponent } from './components/reversal-document-template/reversal-document-template.component';\r\nimport { ReversalInvoiceSelectionComponent } from './components/reversal-invoice-selection/reversal-invoice-selection.component';\r\n\r\n@Component({\r\n    selector: 'atlas-reversal-selection',\r\n    templateUrl: './reversal-selection.component.html',\r\n    styleUrls: ['./reversal-selection.component.scss'],\r\n})\r\nexport class ReversalSelectionComponent extends BaseFormComponent implements OnInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n    @Output() readonly templateSelected = new EventEmitter<DocumentTemplateSelectedEvent>();\r\n    @Output() readonly rowSelected = new EventEmitter<ReversalRowSelection>();\r\n    @ViewChild('invoiceSelectionComponent') invoiceSelectionComponent: ReversalInvoiceSelectionComponent;\r\n    @ViewChild('documentSearchComponent') documentSearchComponent: DocumentSearchComponent;\r\n    @ViewChild('documentTypeComponent') documentTypeComponent: DocumentTypeComponent;\r\n    @ViewChild('documentTemplateComponent') documentTemplateComponent: ReversalDocumentTemplateComponent;\r\n    invoiceSelectionFormGroup: FormGroup;\r\n    DocumentTypes = DocumentTypes;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSelectionFormGroup = this.formBuilder.group({\r\n            invoiceSelectionComponent: this.invoiceSelectionComponent.getFormGroup(),\r\n            documentSearchComponent: this.documentSearchComponent.getFormGroup(),\r\n            documentTypeComponent: this.documentTypeComponent.getFormGroup(),\r\n            documentTemplateComponent: this.documentTemplateComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.invoiceSelectionComponent,\r\n            this.documentSearchComponent,\r\n            this.documentTypeComponent,\r\n            this.documentTemplateComponent);\r\n    }\r\n    documentTypeSelected(documentTypeId: number) {\r\n        this.documentTypeComponent.documentTypeCtrl.patchValue(documentTypeId);\r\n    }\r\n\r\n    documentDateSelected(documentDate: Date) {\r\n        this.documentTypeComponent.documentDateSelected(documentDate);\r\n    }\r\n    onRowSelected(row: ReversalRowSelection) {\r\n        this.updateInhouseExternalStatus(row.data);\r\n        this.documentTypeComponent.rowSelected(row.isRowSelected);\r\n        this.rowSelected.emit(row);\r\n    }\r\n    populateEntity(model: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n    onTemplateSelected(event: DocumentTemplateSelectedEvent) {\r\n        this.templateSelected.emit(event);\r\n    }\r\n\r\n    updateInhouseExternalStatus(data: InvoiceReversalSearchResult) {\r\n        if (data) {\r\n            this.documentTemplateComponent.updateInhouseExternalStatus(data.invoiceTypeId);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     [ngSwitch]=\\\"invoiceTypeId\\\">\\r\\n    <atlas-commercial-summary #commercialSummaryComponent\\r\\n                              [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                              *ngSwitchDefault\\r\\n                              [isCreationMode]=isCreationMode></atlas-commercial-summary>\\r\\n    <atlas-cost-summary #costSummaryComponent\\r\\n                        [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                        *ngSwitchCase=InvoiceTypes.Cost></atlas-cost-summary>\\r\\n    <atlas-cost-summary #costSummaryComponent\\r\\n                        [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                        *ngSwitchCase=InvoiceTypes.CostReceivable></atlas-cost-summary>\\r\\n    <atlas-cost-summary #costSummaryComponent\\r\\n                        [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                        *ngSwitchCase=InvoiceTypes.CostDebitNote></atlas-cost-summary>\\r\\n    <atlas-cost-summary #costSummaryComponent\\r\\n                        [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                        *ngSwitchCase=InvoiceTypes.CostCreditNote></atlas-cost-summary>\\r\\n    <atlas-goods-cost-summary #goodsCostSummaryComponent\\r\\n                              [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                              *ngSwitchCase=InvoiceTypes.GoodsCostPurchase></atlas-goods-cost-summary>\\r\\n    <atlas-goods-cost-summary #goodsCostSummaryComponent\\r\\n                              [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                              *ngSwitchCase=InvoiceTypes.GoodsCostSales></atlas-goods-cost-summary>\\r\\n    <atlas-washout-summary #washoutSummaryComponent\\r\\n                           [defaultVATCode]=\\\"defaultVATCode\\\"\\r\\n                           *ngSwitchCase=InvoiceTypes.Washout></atlas-washout-summary>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { InvoiceSetupResult } from '../../../../../shared/dtos/invoice-setup-result';\r\nimport { InvoiceTypes } from '../../../../../shared/enums/invoice-type.enum';\r\nimport { InvoiceSummaryRecord } from '../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { CommercialSummaryComponent } from '../../../commercial/components/summary/commercial-summary.component';\r\nimport { CostSummaryComponent } from '../../../cost/components/summary/cost-summary.component';\r\nimport { GoodsCostSummaryComponent } from '../../../goods-cost/components/goods-cost-summary/goods-cost-summary.component';\r\nimport { WashoutSummaryComponent } from '../../../washout/components/washout-summary/washout-summary.component';\r\n\r\n@Component({\r\n    selector: 'atlas-reversal-summary',\r\n    templateUrl: './reversal-summary.component.html',\r\n    styleUrls: ['./reversal-summary.component.scss'],\r\n})\r\nexport class ReversalSummaryComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('commercialSummaryComponent') commercialSummaryComponent: CommercialSummaryComponent;\r\n    @ViewChild('costSummaryComponent') costSummaryComponent: CostSummaryComponent;\r\n    @ViewChild('goodsCostSummaryComponent') goodsCostSummaryComponent: GoodsCostSummaryComponent;\r\n    @ViewChild('washoutSummaryComponent') washoutSummaryComponent: WashoutSummaryComponent;\r\n    @Input() isCreationMode: boolean;\r\n    @Input() invoiceTypeId: number = 0;\r\n    createInvoiceFormGroup: FormGroup;\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceLabel: string;\r\n    invoiceId: number;\r\n    selectedInvoiceId: number;\r\n    isFromGrid: boolean = false;\r\n    summaryRecord: InvoiceSummaryRecord;\r\n    defaultVATCode: string;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.invoiceId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    populateInvoiceRecord(\r\n        invoice: InvoiceSummaryRecord,\r\n        invoiceSetup: InvoiceSetupResult) {\r\n        this.defaultVATCode = invoiceSetup.defaultVATCode;\r\n        if (invoice) {\r\n            switch (this.invoiceTypeId) {\r\n                case InvoiceTypes.Purchase:\r\n                    this.commercialSummaryComponent.setSummaryFieldsFromGrid(invoice);\r\n                    break;\r\n                case InvoiceTypes.Sales:\r\n                    this.commercialSummaryComponent.setSummaryFieldsFromGrid(invoice);\r\n                    break;\r\n                case InvoiceTypes.GoodsCostPurchase:\r\n                    this.goodsCostSummaryComponent.setSummaryFieldsFromGrid(invoice);\r\n                    break;\r\n                case InvoiceTypes.GoodsCostSales:\r\n                    this.goodsCostSummaryComponent.setSummaryFieldsFromGrid(invoice);\r\n                    break;\r\n                case InvoiceTypes.Cost:\r\n                case InvoiceTypes.CostReceivable:\r\n                case InvoiceTypes.CostDebitNote:\r\n                case InvoiceTypes.CostCreditNote:\r\n                    this.costSummaryComponent.setSummaryFieldsFromGrid(invoice);\r\n                    break;\r\n                case InvoiceTypes.Washout:\r\n                    this.washoutSummaryComponent.setSummaryFieldsFromGrid(invoice);\r\n                    break;\r\n                default: // throw Action not recognized exception\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"inverseReversalFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Document Selection Screen</ng-template>\\r\\n                <div>\\r\\n                    <atlas-reversal-selection #reversalSelectionComponent\\r\\n                                              (templateSelected)=\\\"onDocumentTemplateSelected($event)\\\"\\r\\n                                              (rowSelected)=\\\"onRowSelected($event)\\\">\\r\\n                    </atlas-reversal-selection>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <mat-slide-toggle [formControl]=\\\"previewDocumentCtrl\\\"\\r\\n                                          *ngIf=\\\"hasTemplate\\\">Preview Document</mat-slide-toggle>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start end \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    *ifAuthorized=\\\"'Invoices.InvoiceCreation', company:company, level: PermissionLevels.ReadWrite\\\"\\r\\n                                    (click)=\\\"onOpenDialogOnPreviewAndReverseClicked()\\\"\\r\\n                                    [disabled]=\\\"isLoading\\\">\\r\\n                                {{ previewDocumentCtrl.value ? \\\"Preview and Reverse\\\" : \\\"Reverse\\\" }}\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Invoice Summary Page</ng-template>\\r\\n                <atlas-reversal-summary #reversalSummaryComponent\\r\\n                                        [isCreationMode]=\\\"isCreationMode\\\"\\r\\n                                        [invoiceTypeId]=\\\"originalInvoiceType\\\">\\r\\n                </atlas-reversal-summary>\\r\\n\\r\\n                <div class=\\\"btn-container\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start end\\\">\\r\\n                        <span class=\\\"fill-space\\\"></span>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"newSearchButtonClicked()\\\">\\r\\n                            New Search\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onNextInvoiceButtonClicked()\\\">\\r\\n                            Next Invoice\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \".mat-stepper-horizontal {\\n  background-color: transparent; }\\n\"","import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { forkJoin } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ReversalRowSelection } from '../../../shared/entities/reversal-row-selection.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { InvoiceRecord } from '../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryRecord } from '../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { PreaccountingService } from '../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { InvoicingBaseFormComponent } from '../invoicing-base-form/invoicing-base-form.component';\r\nimport { ReversalSelectionComponent } from './components/reversal-selection/reversal-selection.component';\r\nimport { ReversalSummaryComponent } from './components/reversal-summary/reversal-summary.component';\r\n@Component({\r\n    selector: 'atlas-reversal',\r\n    templateUrl: './reversal.component.html',\r\n    styleUrls: ['./reversal.component.scss'],\r\n})\r\nexport class ReversalComponent extends InvoicingBaseFormComponent implements OnInit {\r\n    protected formComponents: BaseFormComponent[] = [];\r\n\r\n    @ViewChild('reversalSelectionComponent') reversalSelectionComponent: ReversalSelectionComponent;\r\n    @ViewChild('reversalSummaryComponent') reversalSummaryComponent: ReversalSummaryComponent;\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n\r\n    summaryRecord: InvoiceSummaryRecord;\r\n    inverseReversalFormGroup: FormGroup;\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    currentStep: number = 0;\r\n    PermissionLevels = PermissionLevels;\r\n    transactionDocumentId: number;\r\n    documentTypeId: number;\r\n    documentDate: Date;\r\n    invoicingSteps: { [key: string]: number } = {\r\n        invoiceCreationStep: 0,\r\n        summaryStep: 1,\r\n    };\r\n    isCreateInvoiceButtonClicked = false;\r\n    isCreationMode: boolean = true;\r\n    isSave: boolean = false;\r\n    isInvoiceSelected = false;\r\n    originalInvoiceId: number;\r\n    originalInvoiceType: InvoiceTypes;\r\n\r\n    /*\r\n\t-----------------------------------------------------------------------------------------------------------------------------------\r\n\tGLOBAL FUNCTIONS\r\n\t-----------------------------------------------------------------------------------------------------------------------------------\r\n\t*/\r\n\r\n    constructor(\r\n        protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        protected documentService: DocumentService,\r\n        @Inject(WINDOW) protected window: Window,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected preaccountingService: PreaccountingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected documentPopupService: DocumentPopupService) {\r\n        super(dialog, router, companyManager, snackbarService, documentService, window, utilService,\r\n            executionService, route, formBuilder, preaccountingService, formConfigurationProvider, documentPopupService);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.inverseReversalFormGroup = this.formBuilder.group({\r\n            reversalSelectionComponent: this.reversalSelectionComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.reversalSelectionComponent);\r\n        this.getInvoiceSetupByCompany();\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.reversalSelectionComponent.invoiceSelectionFormGroup.dirty && this.isSave === false) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    getInvoiceSetupByCompany() {\r\n\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.goToInvoiceHome();\r\n            }\r\n        });\r\n    }\r\n\r\n    newSearchButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/invoicing/new']);\r\n    }\r\n\r\n    onNextInvoiceButtonClicked() {\r\n        let searchContractRef: string = '';\r\n        let searchCounterParty: string = '';\r\n        let searchCharterRef: string = '';\r\n        let searchInvoiceRef: string = '';\r\n        let invoiceType: number = 0;\r\n        searchContractRef = this.reversalSelectionComponent.documentSearchComponent.searchContractReference;\r\n        searchCounterParty = this.reversalSelectionComponent.documentSearchComponent.searchCounterParty;\r\n        searchCharterRef = this.reversalSelectionComponent.documentSearchComponent.saveCharterReference;\r\n        searchInvoiceRef = this.reversalSelectionComponent.documentSearchComponent.searchInvoiceReference;\r\n        invoiceType = this.reversalSelectionComponent.\r\n            documentSearchComponent.invoiceType;\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/' + encodeURIComponent(invoiceType.toString())],\r\n            {\r\n                queryParams: {\r\n                    savedContractReference: searchContractRef, savedCounterParty: searchCounterParty,\r\n                    savedCharterReference: searchCharterRef, savedInvoiceReference: searchInvoiceRef,\r\n                },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    goToInvoiceHome() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/execution/invoicing/home']);\r\n    }\r\n\r\n    beforeInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        this.originalInvoiceId = invoiceRecord.invoiceId;\r\n    }\r\n\r\n    afterInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        this.isLoading = true;\r\n        this.stepper.next();\r\n        const documentDate = this.reversalSelectionComponent.documentTypeComponent.\r\n            getFormGroup().value.documentDateCtrl;\r\n        this.subscriptions.push(\r\n            forkJoin([this.executionService.getInvoiceById(this.originalInvoiceId),\r\n            this.executionService.getInvoiceSetupByCompany()])\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe(([invoice, setup]) => {\r\n                    invoice.invoiceDate = documentDate;\r\n                    this.reversalSummaryComponent.populateInvoiceRecord(invoice, setup);\r\n                }));\r\n    }\r\n\r\n    onOpenDialogOnPreviewAndReverseClicked() {\r\n        // variable which checks for existing template (To be set once template card is implemented)\r\n        this.isSave = true;\r\n        this.isLoading = true;\r\n        if (this.invoiceTypeId !== InvoiceTypes.Cost) {\r\n            if (this.reversalSelectionComponent.invoiceSelectionFormGroup.valid && this.isInvoiceSelected) {\r\n                this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value);\r\n            } else {\r\n                this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors and/or select invoice to reverse.');\r\n                this.isLoading = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    onRowSelected(row: ReversalRowSelection) {\r\n        this.isInvoiceSelected = row.isRowSelected;\r\n        if (row.data) {\r\n            this.originalInvoiceType = row.data.invoiceTypeId;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\"\\r\\n          fxFlex=\\\"100\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Total Amount</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxFlex\\r\\n             class=\\\"total-box\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Total Invoice Value (Amount to {{invoiceLabel}}):\\r\\n                <span class=\\\"total-figure-value\\\">{{totalCostDirectionSign}}{{formatAmount(amount)}}\\r\\n                    {{currencyCode}}</span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CostDirection } from '../../../shared/entities/cost-direction.entity';\r\nimport { CostDirectionType } from '../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../shared/enums/cost-sign.enum';\r\nimport { InvoicePaymentType } from '../../../shared/enums/invoice-payment-type';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { InvoiceSummaryLineRecord } from '../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-total-amount',\r\n    templateUrl: './total-amount.component.html',\r\n    styleUrls: ['./total-amount.component.scss'],\r\n})\r\nexport class TotalAmountComponent extends BaseFormComponent implements OnInit {\r\n\r\n    amount: number;\r\n    currencyCode: string;\r\n    decimalOption: number;\r\n    formatType: string = 'en-US';\r\n    defaultDecimalOption: number = 2;\r\n    costDirectionDisplay: string = '';\r\n    costDirections: CostDirection[];\r\n    totalCostDirectionSign: string;\r\n    invoiceLabel: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.formGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    formatAmount(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    setTotalAmountForSummary(summaryRecord: TaxRecord) {\r\n        this.amount = summaryRecord.amount;\r\n        this.currencyCode = summaryRecord.currencyCode;\r\n        this.decimalOption = this.defaultDecimalOption;\r\n        this.costDirectionDisplay = summaryRecord.costDirection;\r\n        this.totalCostDirectionSign = CostSigns[CostDirectionType[summaryRecord.costDirection]];\r\n        this.invoiceLabel = InvoicePaymentType[CostDirectionType[summaryRecord.costDirection]];\r\n    }\r\n\r\n    setValuesForTotal(model) {\r\n        this.amount = model.amount;\r\n        this.decimalOption = model.decimalOption;\r\n        this.currencyCode = model.currencyCode;\r\n        this.costDirectionDisplay = model.costDirection;\r\n    }\r\n\r\n    setValuesForTotalFromGrid(model: InvoiceSummaryRecord) {\r\n        this.amount = model.totalInvoiceValue;\r\n        this.decimalOption = this.defaultDecimalOption;\r\n        this.currencyCode = model.currency;\r\n        (model.invoiceType === InvoiceTypes.Purchase || model.invoiceType === InvoiceTypes.Sales) ?\r\n            this.setCostDirection(model) : this.calculateCostDirection(model.summaryLines);\r\n    }\r\n\r\n    setCostDirection(model: InvoiceSummaryRecord) {\r\n        (model.invoiceType === InvoiceTypes.Purchase) ? this.totalCostDirectionSign = CostSigns[CostDirections.Payable] :\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Receivable];\r\n        this.invoiceLabel = InvoicePaymentType[CostSigns[this.totalCostDirectionSign]];\r\n    }\r\n\r\n    calculateCostDirection(contracts: InvoiceSummaryLineRecord[]) {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        let costDirectionId: number;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.lineAmount;\r\n                } else {\r\n                    totalDR = totalDR + contract.lineAmount;\r\n                }\r\n            },\r\n        );\r\n        if (totalCR > totalDR) {\r\n            this.costDirectionDisplay = CostDirectionType[CostDirectionType.Cr];\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n        } else {\r\n            this.costDirectionDisplay = CostDirectionType[CostDirectionType.Dr];\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Receivable];\r\n        }\r\n    }\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n            this.invoiceLabel = selectedCostDirection.costDirection;\r\n            return selectedCostDirection.costDirectionId;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Decimals</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"20%\\\">\\r\\n                <mat-select placeholder=\\\"Decimals\\\"\\r\\n                            [matTooltip]=\\\"'Decimals'\\\"\\r\\n                            [formControl]=\\\"decimalOptionsCtrl\\\"\\r\\n                            (selectionChange)='onDecimalOptionSelected()'>\\r\\n                    <mat-option *ngFor=\\\"let decimal of decimalOptions\\\"\\r\\n                                [value]=\\\"decimal\\\">{{decimal}}</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-decimals',\r\n    templateUrl: './decimals.component.html',\r\n    styleUrls: ['./decimals.component.scss'],\r\n})\r\nexport class DecimalsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly decimalOptionSelected = new EventEmitter<any>();\r\n\r\n    decimalOptionsCtrl = new AtlasFormControl('decimalOptions', 2);\r\n\r\n    decimalOptions: number[] = [2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n    masterdata: MasterData;\r\n\r\n    constructor(private route: ActivatedRoute, protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.bindConfiguration();\r\n        this.emitDecimalOptions();\r\n    }\r\n\r\n    onDecimalOptionSelected() {\r\n        this.emitDecimalOptions();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            decimalOptionsCtrl: this.decimalOptionsCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    emitDecimalOptions() {\r\n        this.decimalOptionSelected.emit({\r\n            decimalOption: Number(this.decimalOptionsCtrl.value),\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"card-header-luke\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Invoice Selection</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <div fxFlex=\\\"33%\\\"\\r\\n                 fxFlex.xs=\\\"33%\\\"\\r\\n                 fxFlex.sm=\\\"33%\\\">\\r\\n                <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Invoice type\\\"\\r\\n                           [matTooltip]=\\\"'Invoice Type'\\\"\\r\\n                           [formControl]=\\\"invoiceTypeSelectedCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           readonly>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".card-header-luke {\\n  min-height: auto; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-type-selection',\r\n    templateUrl: './invoice-type-selection.component.html',\r\n    styleUrls: ['./invoice-type-selection.component.scss'],\r\n})\r\nexport class InvoiceTypeSelectionComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceTypeSelectedCtrl = new AtlasFormControl('invoiceWashoutTypeSelected');\r\n    invoiceTypeDescription: string;\r\n    masterdata: MasterData = new MasterData();\r\n    invoiceTypeId: number;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.invoiceTypeDescription = this.masterdata.\r\n            invoiceTypes.find((invoiceType) => invoiceType.invoiceTypeId === this.invoiceTypeId).name;\r\n        this.invoiceTypeSelectedCtrl.patchValue(this.invoiceTypeDescription);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceTypeSelectedCtrl: this.invoiceTypeSelectedCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceType = entity as InvoiceRecord;\r\n        invoiceType.invoiceType = this.invoiceTypeId;\r\n        return invoiceType;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <form [formGroup]=\\\"searchForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           fxFlex=\\\"30%\\\"\\r\\n                           formControlName=\\\"searchContractCtrl\\\"\\r\\n                           (keydown.enter)=\\\"onSearchWashoutContractsClicked()\\\"\\r\\n                           placeholder=\\\"Contract Search\\\" />\\r\\n                </mat-form-field>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"charterReferenceCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCharters\\\"\\r\\n                                                         label=\\\"Charter Reference\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchWashoutContractsClicked()\\\"\\r\\n                                                         displayProperty=\\\"charterCode\\\"\\r\\n                                                         [selectProperties]=\\\"['charterCode','description']\\\"\\r\\n                                                         [errorMap]=\\\"charterErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for charters\\\"\\r\\n                                                         gridId=\\\"charterGrid\\\"\\r\\n                                                         [dataLoader]=\\\"charterDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                         label=\\\"Counter Party\\\"\\r\\n                                                         (keydown.enter)=\\\"onSearchWashoutContractsClicked()\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchWashoutContractsClicked()\\\"\\r\\n                        class=\\\"heroGradient\\\"\\r\\n                        id=\\\"search-button\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n\\r\\n    </mat-card>\\r\\n</div>\\r\\n\\r\\n<atlas-filter-set-display (filtersChanged)=onFilterSetDetailsChange($event)\\r\\n                          [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                          [gridCode]=\\\"gridCode\\\"\\r\\n                          [company]=\\\"company\\\"\\r\\n                          #filterSetDisplayComponent>\\r\\n</atlas-filter-set-display>\\r\\n<mat-card>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         fxLayoutGap=\\\"20px\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h2 class=\\\"no-margin\\\">{{gridTitle}}</h2>\\r\\n\\r\\n        <atlas-ag-grid-user-preferences *ngIf=\\\"isConfigLoaded\\\"\\r\\n                                        [gridOptions]=\\\"washoutContractGridOptions\\\"\\r\\n                                        [company]=\\\"company\\\"\\r\\n                                        [gridId]=\\\"gridCode\\\"\\r\\n                                        [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                        #userPreferences>\\r\\n        </atlas-ag-grid-user-preferences>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"costContractGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n         style=\\\"width: 100%; height: 100%\\\">\\r\\n        <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"washoutContractGridRows\\\"\\r\\n                         [gridOptions]=\\\"washoutContractGridOptions\\\"\\r\\n                         [columnDefs]=\\\"washoutContractGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         [singleClickEdit]=\\\"true\\\"\\r\\n                         [suppressRowClickSelection]=\\\"true\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                         rowMultiSelectWithClick=true\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                         (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         (firstDataRendered)=\\\"onFirstDataRendered($event)\\\"\\r\\n                         (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                         (rowDataChanged)=\\\"onRowDataChanged($event)\\\">\\r\\n            <!-- [suppressRowClickSelection]=\\\"true\\\" -->\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ListAndSearchFilterDto } from '../../../../../../../shared/dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../../../shared/entities/charter.entity';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { IsLocked } from '../../../../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../../../../../../shared/entities/list-and-search/list-and-search-request.entity';\r\nimport { LockFunctionalContext } from '../../../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../../../../shared/services/execution/charter-data-loader';\r\nimport { ContractsToWashoutInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-washout-invoice';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../../../shared/services/http-services/lock.service';\r\nimport { CounterPartyDataLoader } from '../../../../../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { ExecutionActionsService } from '../../../../../../services/execution-actions.service';\r\nimport { FilterSetDisplayComponent } from './../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\n\r\n@Component({\r\n    selector: 'atlas-washout-search',\r\n    templateUrl: './washout-search.component.html',\r\n    styleUrls: ['./washout-search.component.scss'],\r\n    providers: [CounterPartyDataLoader, CharterDataLoader],\r\n})\r\n\r\nexport class WashoutSearchComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplayComponent') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    @Output() readonly washoutContractsSelected = new EventEmitter<boolean>();\r\n    @Output() readonly counterPartySelected = new EventEmitter<string>();\r\n\r\n    dataLength: number = 0;\r\n    searchForm: FormGroup;\r\n    invoiceType: number;\r\n    company: string;\r\n    isLoading: boolean;\r\n    isContractSelected: boolean = false;\r\n    counterParty: string;\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    formatType: string = 'en-US';\r\n    destroy$ = new Subject();\r\n\r\n    gridTitle = 'Washout Contracts to Invoice';\r\n    gridCode: string = 'invoiceWashoutSelectionGrid';\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    hasGridSharing = false;\r\n\r\n    washoutContractGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    washoutContractGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n\r\n    allWashoutContractGridRows: ContractsToWashoutInvoice[];\r\n    washoutContractGridRows: ContractsToWashoutInvoice[];\r\n    washoutContract: ContractsToWashoutInvoice[];\r\n    contractsToInvoice: ContractsToWashoutInvoice[];\r\n    selectedWashoutContracts: ContractsToWashoutInvoice[];\r\n    additionnalColumns = [\r\n        {\r\n            headerName: 'Uninvoiced Quantity',\r\n            field: 'uninvoicedQuantity',\r\n            colId: 'uninvoicedQuantity',\r\n            hide: false,\r\n            valueGetter: this.getUnInvoicedQuantity,\r\n            valueFormatter: this.formatValue.bind(this),\r\n        },\r\n    ];\r\n\r\n    filters: ListAndSearchFilter[];\r\n    isConfigLoaded = false;\r\n    searchContractReference: string;\r\n    searchCharterReference: string;\r\n    searchCounterParty: string;\r\n    filteredCounterPartyList: Counterparty[];\r\n    masterdata: MasterData = new MasterData();\r\n    counterPartyCtrl = new AtlasFormControl('CounterPartyWashout');\r\n    filteredCharters: Charter[];\r\n    charters: Charter[];\r\n    charterReferenceCtrl = new AtlasFormControl('CharterRefWashout');\r\n    saveContractRef: string;\r\n    saveCounterparty: string;\r\n    saveCharterReference: string;\r\n    counterPartyControl: Counterparty;\r\n    counterPartyList: Counterparty[];\r\n    charterRefControl: Charter;\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Counter Party not in the list.');\r\n    charterErrorMap: Map<string, string> = new Map();\r\n    count: number = 0;\r\n    savedFilters: ListAndSearchFilter[];\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n        private snackbarService: SnackbarService,\r\n        private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        protected lockService: LockService,\r\n        protected utilService: UtilService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        public charterDataLoader: CharterDataLoader,\r\n        public gridService: AgGridService,\r\n        public executionActionsService: ExecutionActionsService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.searchForm = this.formBuilder.group({\r\n            searchContractCtrl: [''],\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.isLoading = true;\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyList = this.filteredCounterPartyList;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.populateCharterList();\r\n        this.charterReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCharterReference(input);\r\n        });\r\n        this.loadGridConfiguration();\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.saveContractRef = params['savedContractReference'];\r\n            this.saveCounterparty = params['savedCounterParty'];\r\n            this.saveCharterReference = params['savedCharterReference'];\r\n        });\r\n        if (this.executionActionsService.EditCriteriaRetainFilter && this.executionActionsService.EditCriteriaRetainFilter.length > 0) {\r\n            this.savedFilters = this.executionActionsService.EditCriteriaRetainFilter;\r\n        }\r\n        if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference) {\r\n            if (this.saveContractRef) {\r\n                this.searchForm.controls['searchContractCtrl'].setValue(this.saveContractRef);\r\n            }\r\n            if (this.saveCounterparty) {\r\n                this.counterPartyControl = this.counterPartyList.find((counterParty) =>\r\n                    counterParty.counterpartyCode === this.saveCounterparty);\r\n                this.counterPartyCtrl.patchValue(this.counterPartyControl);\r\n            }\r\n            if (this.saveCharterReference) {\r\n                this.charterRefControl = this.charters.find((charter) =>\r\n                    charter.charterCode === this.saveCharterReference);\r\n                this.charterReferenceCtrl.patchValue(this.charterRefControl);\r\n            }\r\n        }\r\n    }\r\n\r\n    populateCharterList() {\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.charters = charter;\r\n            this.filteredCharters = this.charters;\r\n        });\r\n    }\r\n\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(param.value);\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onSearchWashoutContractsClicked();\r\n        }\r\n    }\r\n    filterCharterReference(input) {\r\n        this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.charters,\r\n            ['charterCode', 'description'],\r\n        );\r\n        if (this.charterReferenceCtrl.valid || !this.charterReferenceCtrl.value) {\r\n            this.onSearchWashoutContractsClicked();\r\n        }\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.isConfigLoaded = false;\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.washoutContractGridColumns = [];\r\n        // selection column\r\n        this.washoutContractGridColumns.push(\r\n            {\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'left',\r\n            });\r\n\r\n        // grid config\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.washoutContractGridColumns = this.washoutContractGridColumns\r\n            .concat(configuration.map((config) => {\r\n                const columnDef: agGrid.ColDef = {\r\n                    colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                    headerName: config.friendlyName,\r\n                    field: this.utilService.convertToCamelCase(config.fieldName),\r\n                    width: 100,\r\n                    hide: !config.isVisible,\r\n                };\r\n\r\n                const formatter = this.uiService.getFormatterForType(config.gridType);\r\n                if (formatter) {\r\n                    columnDef.valueFormatter = formatter;\r\n                }\r\n\r\n                const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n                if (dateGetter) {\r\n                    columnDef.cellClass = 'dateFormat';\r\n                    columnDef.valueGetter = dateGetter;\r\n                }\r\n                const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n                if (numericColumn) {\r\n                    columnDef.type = 'numericColumn';\r\n                    columnDef.valueFormatter = this.numberFormatter;\r\n                }\r\n                return columnDef;\r\n            }));\r\n\r\n        // calculated columns\r\n        this.washoutContractGridColumns = this.washoutContractGridColumns.concat(this.additionnalColumns);\r\n\r\n        if (this.gridApi) {\r\n            if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n        }\r\n        if (this.washoutContractGridOptions && this.washoutContractGridOptions.api) {\r\n            this.washoutContractGridOptions.columnDefs = this.washoutContractGridColumns;\r\n            this.washoutContractGridOptions.api.setColumnDefs(this.washoutContractGridColumns);\r\n        }\r\n        this.isConfigLoaded = true;\r\n        this.gridApi.refreshView();\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]): void {\r\n        this.executionActionsService.EditCriteriaRetainFilter = filters;\r\n        this.filters = filters;\r\n        if (this.count === 1) {\r\n            this.filters = this.savedFilters;\r\n            this.savedFilters = null;\r\n            this.count = 0;\r\n        }\r\n        if (this.savedFilters && this.count === 0) {\r\n            if (this.filterSetDisplayComponent) {\r\n                this.count = 1;\r\n                const localFilters: ListAndSearchFilterDto[] = this.savedFilters.map((filter: ListAndSearchFilter) => {\r\n                    return new ListAndSearchFilterDto(filter);\r\n                });\r\n                this.filterSetDisplayComponent.loadFilters(localFilters);\r\n            }\r\n        } else {\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    loadData(emitResult = false) {\r\n        if (!this.filters) {\r\n            return;\r\n        }\r\n        const filters = this.filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n        this.isLoading = true;\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filters },\r\n        };\r\n\r\n        this.executionService.searchWashoutContractsToInvoice(request).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((data) => {\r\n            this.isLoading = false;\r\n            this.washoutContract = data.value;\r\n            this.washoutContractGridRows = this.washoutContract.filter((contract) => {\r\n                const washoutContractValue = Number(contract.quantity);\r\n                const washoutContractValueFixes = Number(washoutContractValue.toFixed(3));\r\n                if (washoutContractValueFixes) {\r\n                    return contract;\r\n                }\r\n            });\r\n            this.dataLength = this.washoutContractGridRows.length;\r\n            this.contractsToInvoice = data.value;\r\n            this.allWashoutContractGridRows = this.washoutContractGridRows;\r\n            this.autoSizeContractsGrid();\r\n            if (this.dataLength && this.dataLength > 0) {\r\n                this.counterParty = this.washoutContractGridRows[0].counterparty;\r\n            }\r\n            if (this.filters.length === 0) {\r\n                if (this.saveContractRef || this.saveCounterparty || this.saveCharterReference) {\r\n                    this.onSearchWashoutContractsClicked();\r\n                }\r\n            }\r\n            this.onRowDataChanged(null);\r\n        });\r\n    }\r\n\r\n    onSearchWashoutContractsClicked() {\r\n        this.searchContractReference = this.searchForm.get('searchContractCtrl').value;\r\n        if (this.counterPartyCtrl.value === '') {\r\n            this.searchCounterParty = this.counterPartyCtrl.value;\r\n        } else\r\n            if (this.counterPartyCtrl.value) {\r\n                this.searchCounterParty = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n                if (!this.searchCounterParty) {\r\n                    this.searchCounterParty = this.counterPartyCtrl.value;\r\n                }\r\n            }\r\n        if (this.charterReferenceCtrl.value === '') {\r\n            this.searchCharterReference = this.charterReferenceCtrl.value;\r\n        } else\r\n            if (this.charterReferenceCtrl.value) {\r\n                this.searchCharterReference = (this.charterReferenceCtrl.value as Charter).charterCode;\r\n                if (!this.searchCharterReference) {\r\n                    this.searchCharterReference = this.charterReferenceCtrl.value;\r\n                }\r\n            }\r\n        if (!this.searchContractReference && !this.searchCharterReference && !this.searchCounterParty) {\r\n            this.washoutContractGridRows = this.allWashoutContractGridRows;\r\n            return;\r\n        }\r\n        let rows: ContractsToWashoutInvoice[] = [];\r\n        let contractRows: number = 0;\r\n        let charterRows: number = 0;\r\n        this.filters = [];\r\n        if (this.allWashoutContractGridRows && this.allWashoutContractGridRows.length > 0) {\r\n            this.isLoading = true;\r\n            if (this.searchContractReference) {\r\n                this.contractsToInvoice = this.allWashoutContractGridRows.filter((item) => item.contractReference != null);\r\n                rows = this.contractsToInvoice.filter((item) =>\r\n                    item.contractReference.toString().toUpperCase().includes(this.searchContractReference.toUpperCase()));\r\n                contractRows = -1;\r\n            }\r\n            if (this.searchCharterReference) {\r\n                if (rows.length === 0 && contractRows === 0) {\r\n                    this.contractsToInvoice = this.allWashoutContractGridRows.filter((item) => item.charterReference != null);\r\n                    rows = this.contractsToInvoice.filter((item) =>\r\n                        item.charterReference.toString().toUpperCase().includes(this.searchCharterReference.toUpperCase()));\r\n                } else if (contractRows === -1) {\r\n                    rows = rows.filter((item) => item.charterReference != null);\r\n                    rows = rows.filter((item) => item.charterReference.toString().toUpperCase().\r\n                        includes(this.searchCharterReference.toUpperCase()));\r\n                }\r\n                charterRows = -1;\r\n            }\r\n            if (this.searchCounterParty) {\r\n                if (rows.length === 0 && charterRows === 0 && contractRows === 0) {\r\n                    this.contractsToInvoice = this.allWashoutContractGridRows.filter((item) => item.counterparty != null);\r\n                    rows = this.contractsToInvoice.filter((item) =>\r\n                        item.counterparty.toString().toUpperCase().includes(this.searchCounterParty.toUpperCase()));\r\n                } else {\r\n                    rows = rows.filter((item) => item.counterparty != null);\r\n                    rows = rows.filter((item) => item.counterparty.toString().\r\n                        toUpperCase().includes(this.searchCounterParty.toUpperCase()));\r\n                }\r\n            }\r\n        }\r\n        this.washoutContractGridRows = rows;\r\n        this.dataLength = this.washoutContractGridRows.length;\r\n        this.autoSizeContractsGrid();\r\n        this.isLoading = false;\r\n        if (this.dataLength && this.dataLength > 0) {\r\n            this.counterParty = this.washoutContractGridRows[0].counterparty;\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.washoutContractGridOptions = params;\r\n        if (this.washoutContractGridColumns) {\r\n            this.washoutContractGridOptions.columnDefs = this.washoutContractGridColumns;\r\n            this.washoutContractGridOptions.api.setColumnDefs(this.washoutContractGridColumns);\r\n        }\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi && this.washoutContractGridColumns) {\r\n            const allColumnIds = [];\r\n            this.washoutContractGridColumns.forEach((columnDefs) => {\r\n                allColumnIds.push(columnDefs.field);\r\n            });\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    getUnInvoicedQuantity(params) {\r\n        if (params.data.quantity - params.data.invoicedQuantity > 0) {\r\n            return params.data.quantity - params.data.invoicedQuantity;\r\n        } else if (params.data.quantity - params.data.invoicedQuantity < 0) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    deselectNode(currentRowIndex) {\r\n        this.washoutContractGridOptions.api.forEachNode((node) => {\r\n            if (Number(node.id) === currentRowIndex) {\r\n                this.washoutContractGridOptions.api.deselectNode(node);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        const currentRowIndex = event.rowIndex;\r\n        let valid = true;\r\n\r\n        if (selectedRows.length > 1) {\r\n            let currencySelected;\r\n            let counterpartySelected;\r\n            let blDateSelected;\r\n            for (const row of selectedRows) {\r\n                if (!counterpartySelected) {\r\n                    counterpartySelected = row.counterparty;\r\n                }\r\n                if (!currencySelected) {\r\n                    currencySelected = row.currencyCode;\r\n                }\r\n                if (!blDateSelected) {\r\n                    blDateSelected = row.blDate;\r\n                }\r\n                if (currencySelected !== row.currencyCode || counterpartySelected !== row.counterparty) {\r\n                    valid = false;\r\n                    break;\r\n                }\r\n                if (blDateSelected !== row.blDate) {\r\n                    const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Confirmation of BL Date',\r\n                            text: 'You have selected a contract pair which has a different BL date from the previous selection” Do you wish to update this contract pair with the same BL date? ',\r\n                            okButton: 'Proceed',\r\n                            cancelButton: 'Cancel',\r\n                        },\r\n                    });\r\n                    confirmDialog.afterClosed().subscribe((answer) => {\r\n                        if (!answer) {\r\n                            this.deselectNode(currentRowIndex);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (!valid) {\r\n            this.snackbarService.informationSnackBar('Currency & Counterparty should be same');\r\n        }\r\n        this.washoutContractGridOptions.api.forEachNode((node) => {\r\n            if (Number(node.id) === currentRowIndex) {\r\n                if (valid === false) {\r\n                    this.washoutContractGridOptions.api.deselectNode(node);\r\n                }\r\n            }\r\n        });\r\n        this.isContractSelected = selectedRows.length > 0;\r\n        if (this.isContractSelected) {\r\n            this.counterPartySelected.emit(selectedRows[0].counterparty);\r\n            this.washoutContractsSelected.emit(this.isContractSelected);\r\n        }\r\n        this.grantLock(Number(event.data.sectionId), event.node);\r\n        this.selectedWashoutContracts = selectedRows;\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.washoutContractGridOptions.api.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        this.subscriptions.push(\r\n                            this.lockService.lockContract(sectionId, LockFunctionalContext.WashoutInvoicing).subscribe((lockState) => {\r\n                                this.refeshResourceInformation();\r\n                                this.locking = this.locking.filter((id) => id !== sectionId);\r\n                            }));\r\n\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                if (this.resourcesInformation.filter((rsc) => rsc.resourceId === sectionId).length === 0) {\r\n                    this.subscriptions.push(\r\n                        this.lockService.unlockContract(sectionId, LockFunctionalContext.WashoutInvoicing).subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                        }));\r\n                } else {\r\n                    node.setRowSelectable(true);\r\n                    this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.washoutContractGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        if (params && params.value && !isNaN(params.value)) {\r\n            if (params.colDef.colId.toLowerCase() === 'quantity' || params.colDef.colId.toLowerCase() === 'price' ||\r\n                params.colDef.colId.toLowerCase() === 'invoicedquantity') {\r\n                if (params.colDef.colId.toLowerCase() === 'price') {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(params.value);\r\n                } else {\r\n                    return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onRowDataChanged(params) {\r\n        if (this.counterParty) {\r\n            const counterPartyFilterComponent = this.gridApi.getFilterInstance('counterparty');\r\n            counterPartyFilterComponent.setModel({\r\n                type: 'set',\r\n                values: [this.counterParty],\r\n            });\r\n            this.gridApi.onFilterChanged();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div>\\r\\n    <atlas-invoice-type-selection #invoiceTypeSelectionComponent>\\r\\n    </atlas-invoice-type-selection>\\r\\n    <atlas-washout-search #washoutSearchComponent\\r\\n                          (washoutContractsSelected)=\\\"onContractsSelected($event)\\\"\\r\\n                          (counterPartySelected)=\\\"onCounterPartySelected($event)\\\">\\r\\n    </atlas-washout-search>\\r\\n    <atlas-decimals #washoutDecimalsComponent>\\r\\n    </atlas-decimals>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild, EventEmitter, Output, HostListener } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { DecimalsComponent } from './components/decimals/decimals.component';\r\nimport { InvoiceTypeSelectionComponent } from './components/invoice-type-selection/invoice-type-selection.component';\r\nimport { WashoutSearchComponent } from './components/washout-search/washout-search.component';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\n\r\n@Component({\r\n    selector: 'atlas-washout-selection',\r\n    templateUrl: './washout-selection.component.html',\r\n    styleUrls: ['./washout-selection.component.scss'],\r\n})\r\nexport class WashoutSelectionComponent extends BaseFormComponent implements OnInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n    @ViewChild('invoiceTypeSelectionComponent') invoiceTypeSelectionComponent: InvoiceTypeSelectionComponent;\r\n    @ViewChild('washoutSearchComponent') washoutSearchComponent: WashoutSearchComponent;\r\n    @ViewChild('washoutDecimalsComponent') washoutDecimalsComponent: DecimalsComponent;\r\n    @Output() readonly counterPartySelected = new EventEmitter<String>();\r\n    @Output() readonly washoutContractsSelected = new EventEmitter<boolean>();\r\n\r\n    invoiceSelectionFormGroup: FormGroup;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceSelectionFormGroup = this.formBuilder.group({\r\n            invoiceTypeSelectionComponent: this.invoiceTypeSelectionComponent.getFormGroup(),\r\n            washoutSearchComponent: this.washoutSearchComponent.getFormGroup(),\r\n            washoutDecimalsComponent: this.washoutDecimalsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.invoiceTypeSelectionComponent,\r\n            this.washoutSearchComponent,\r\n            this.washoutDecimalsComponent);\r\n    }\r\n\r\n    onCounterPartySelected(counterParty) {\r\n        this.counterPartySelected.emit(counterParty);\r\n    }\r\n\r\n    onContractsSelected(contractsSelected: boolean) {\r\n        this.washoutContractsSelected.emit(contractsSelected);\r\n    }\r\n\r\n    populateEntity(model: InvoiceRecord): InvoiceRecord {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n}\r\n","module.exports = \" <atlas-execution-invoicing-summary-header #summaryHeaderComponent\\r\\n                                           [isCreationMode]=isCreationMode>\\r\\n </atlas-execution-invoicing-summary-header>\\r\\n <div fxLayout=\\\"row\\\" fxLayout.md=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"space-around start\\\">\\r\\n     <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start left\\\"\\r\\n                            fxFlex=\\\"100%\\\">\\r\\n         <atlas-value-of-goods #summaryValueOfGoodsComponent\\r\\n                               (totalAmountCalculated)=\\\"ontotalAmountCalculated($event)\\\">\\r\\n         </atlas-value-of-goods>\\r\\n         <atlas-additional-cost #summaryAdditionalCostComponent\\r\\n                                [selectedGoodsVat]=\\\"selectedGoodsVatCode\\\"\\r\\n                                (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\">\\r\\n         </atlas-additional-cost>\\r\\n         <div fxLayout=\\\"row\\\"\\r\\n              fxLayoutGap=\\\"16px\\\">\\r\\n             <atlas-tax-goods fxFlex=\\\"50%\\\"\\r\\n                              #summaryTaxGoodsComponent\\r\\n                              (selectedGoodsTaxCode)=\\\"onChangeGoodsTaxCode($event)\\\">\\r\\n             </atlas-tax-goods>\\r\\n             <atlas-payments fxFlex=\\\"50%\\\"\\r\\n                             #summaryPaymentComponent>\\r\\n             </atlas-payments>\\r\\n         </div>\\r\\n         <atlas-tax-costs #summaryTaxCostsComponent\\r\\n                          fxFlex=\\\"50%\\\"\\r\\n                          (totalCostTaxCalculated)=\\\"onTotalCostTaxCalculated($event)\\\">\\r\\n         </atlas-tax-costs>\\r\\n         <atlas-washout-total fxFlex=\\\"50%\\\"\\r\\n                              #summaryTotalAmountComponent>\\r\\n         </atlas-washout-total>\\r\\n     </div>\\r\\n </div>\\r\\n\"","module.exports = \"\"","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CostDirectionType } from '../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { ContractsToCostInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { ContractsToWashoutInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-washout-invoice';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { HeaderComponent } from '../../../header/header.component';\r\nimport { AdditionalCostComponent } from '../washout-working-page/components/additional-cost/additional-cost.component';\r\nimport { WashoutPaymentsComponent } from '../washout-working-page/components/payments/payments.component';\r\nimport { TaxCostsComponent } from '../washout-working-page/components/tax-costs/tax-costs.component';\r\nimport { TaxGoodsComponent } from '../washout-working-page/components/tax-goods/tax-goods.component';\r\nimport { WashoutValueOfGoodsComponent } from '../washout-working-page/components/value-of-goods/value-of-goods.component';\r\nimport { WashoutTotalComponent } from '../washout-working-page/components/washout-total/washout-total.component';\r\nimport { CompanyBankAccounts } from '../../../../../shared/entities/company-bankaccounts.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-washout-summary',\r\n    templateUrl: './washout-summary.component.html',\r\n    styleUrls: ['./washout-summary.component.scss'],\r\n})\r\nexport class WashoutSummaryComponent extends BaseFormComponent implements OnInit {\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n    @Input() defaultVATCode: string;\r\n    @Input() isCreationMode: boolean;\r\n    @ViewChild('summaryHeaderComponent') summaryHeaderComponent: HeaderComponent;\r\n    @ViewChild('summaryValueOfGoodsComponent') summaryValueOfGoodsComponent: WashoutValueOfGoodsComponent;\r\n    @ViewChild('summaryAdditionalCostComponent') summaryAdditionalCostComponent: AdditionalCostComponent;\r\n    @ViewChild('summaryTaxGoodsComponent') summaryTaxGoodsComponent: TaxGoodsComponent;\r\n    @ViewChild('summaryTaxCostsComponent') summaryTaxCostsComponent: TaxCostsComponent;\r\n    @ViewChild('summaryPaymentComponent') summaryPaymentComponent: WashoutPaymentsComponent;\r\n    @ViewChild('summaryTotalAmountComponent') summaryTotalAmountComponent: WashoutTotalComponent;\r\n\r\n    @Input() invoiceTaxContracts: TaxRecord[];\r\n    @Input() invoiceTaxTotal: TaxRecord;\r\n    @Input() invoiceCostContracts: ContractsToCostInvoice[];\r\n    @Input() invoiceGoodsContracts: ContractsToWashoutInvoice[];\r\n    @Input() goodsTaxCode: string;\r\n    @Input() filteredCompanyBankAccounts: CompanyBankAccounts[];\r\n\r\n    invoiceTypeId: number;\r\n    invoiceWorkingFormGroup: FormGroup;\r\n    selectedGoodsVatCode: string;\r\n    totalRecordForWashout: InvoiceRecord = new InvoiceRecord();\r\n    valueOfGoodsTotal: number = 0;\r\n    valueOfGoodsDecimalOption: number = 2;\r\n    valueOfGoodsCurrency: string;\r\n    valueOfGoodsCreditDebit: string;\r\n    additionalCostRate: number = 0;\r\n    additionalCostCostDirection: string;\r\n    valueOfGoodsCostDirection: string;\r\n\r\n    washoutSummaryFormGroup: FormGroup;\r\n    model: InvoiceRecord;\r\n    contracts: ContractsToWashoutInvoice[];\r\n    taxRecord: TaxRecord;\r\n    costContracts: ContractsToCostInvoice[];\r\n    costTaxes: TaxRecord[];\r\n    goodsTaxes: string;\r\n    totalData: TaxRecord;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.washoutSummaryFormGroup = this.formBuilder.group({\r\n            summaryValueOfGoodsComponent: this.summaryValueOfGoodsComponent.getFormGroup(),\r\n            summaryAdditionalCostComponent: this.summaryAdditionalCostComponent.getFormGroup(),\r\n            summaryTaxGoodsComponent: this.summaryTaxGoodsComponent.getFormGroup(),\r\n            summaryTaxCostsComponent: this.summaryTaxCostsComponent.getFormGroup(),\r\n            summaryPaymentComponent: this.summaryPaymentComponent.getFormGroup(),\r\n            summaryHeaderComponent: this.summaryHeaderComponent.getFormGroup(),\r\n            summaryTotalAmountComponent: this.summaryTotalAmountComponent.getFormGroup(),\r\n        });\r\n        this.washoutSummaryFormGroup.disable();\r\n\r\n        this.formComponents.push(\r\n            this.summaryValueOfGoodsComponent,\r\n            this.summaryAdditionalCostComponent,\r\n            this.summaryTaxGoodsComponent,\r\n            this.summaryTaxCostsComponent,\r\n            this.summaryPaymentComponent,\r\n            this.summaryHeaderComponent,\r\n            this.summaryTotalAmountComponent);\r\n            this.summaryAdditionalCostComponent.isAdditionalCostForSummary = true;\r\n    \r\n    }\r\n    washoutContracts(contracts: ContractsToWashoutInvoice[]) {\r\n        this.contracts = contracts;\r\n    }\r\n\r\n    populateInvoiceRecord(record) {\r\n        this.contracts = this.invoiceGoodsContracts;\r\n        this.costContracts = this.invoiceCostContracts;\r\n        this.costTaxes = this.invoiceTaxContracts;\r\n        this.totalData = this.invoiceTaxTotal;\r\n        this.goodsTaxes = this.goodsTaxCode;\r\n        this.model = record;\r\n        this.populateSummaryFields();\r\n    }\r\n\r\n    populateSummaryFields() {\r\n        if (this.contracts) {\r\n            this.summaryValueOfGoodsComponent.selectedWashoutContracts(this.contracts);\r\n        }\r\n        if (this.costContracts) {\r\n            this.summaryAdditionalCostComponent.contractToBeSelected(this.costContracts);\r\n        }\r\n        if (this.costTaxes) {\r\n            this.summaryTaxCostsComponent.taxRecordsSelected(this.costTaxes);\r\n        }\r\n        if (this.goodsTaxes) {\r\n            this.summaryTaxGoodsComponent.setDefaultVatCode(this.goodsTaxes);\r\n        }\r\n        if (this.model) {\r\n            this.summaryPaymentComponent.setPaymentFieldsForSummary(this.model);\r\n            this.summaryHeaderComponent.setHeaderFieldsForSummary(this.model, this.filteredCompanyBankAccounts);\r\n        }\r\n        this.summaryAdditionalCostComponent.isAdditionalCostForSummary = true;\r\n    }\r\n\r\n    calculateTaxTotal(model) {\r\n        this.summaryTotalAmountComponent.setValuesForTotalTax(model);\r\n    }\r\n\r\n    calculateTotalWithoutTax() {\r\n        this.totalRecordForWashout.totalInvoiceValue = this.additionalCostRate + this.valueOfGoodsTotal;\r\n        this.totalRecordForWashout.decimalOption = this.valueOfGoodsDecimalOption;\r\n        this.totalRecordForWashout.currency = this.valueOfGoodsCurrency;\r\n        if (this.valueOfGoodsCostDirection === this.additionalCostCostDirection) {\r\n            this.totalRecordForWashout.costDirection = CostDirections[this.additionalCostCostDirection];\r\n        } else {\r\n            this.setCostDirection();\r\n        }\r\n        this.summaryTotalAmountComponent.setValuesForTotalWithoutTax(this.totalRecordForWashout);\r\n    }\r\n\r\n    setCostDirection() {\r\n        this.totalRecordForWashout.costDirection = (Math.abs(this.additionalCostRate) > Math.abs(this.valueOfGoodsTotal)) ?\r\n            CostDirections[this.additionalCostCostDirection] : CostDirections[this.valueOfGoodsCostDirection];\r\n    }\r\n\r\n    ontotalAmountCalculated(model) {\r\n        this.valueOfGoodsTotal = model.amount;\r\n        this.valueOfGoodsDecimalOption = model.decimalOption;\r\n        this.valueOfGoodsCurrency = model.currencyCode;\r\n        this.valueOfGoodsCostDirection = CostDirections[CostDirectionType[model.creditDebit]];\r\n        if (this.valueOfGoodsCostDirection === CostDirections[CostDirections.Payable]) {\r\n            this.valueOfGoodsTotal = -(this.valueOfGoodsTotal);\r\n        }\r\n        this.calculateTotalWithoutTax();\r\n    }\r\n\r\n    onTotalCostTaxCalculated(model) {\r\n        this.totalData = model;\r\n        this.calculateTaxTotal(model);\r\n    }\r\n\r\n    onChangeGoodsTaxCode(vatCode: string) {\r\n        this.selectedGoodsVatCode = vatCode;\r\n    }\r\n\r\n    onChangeCostContract(model) {\r\n        if (model) {\r\n            this.additionalCostRate = model.rate;\r\n            this.additionalCostCostDirection = model.costDirection;\r\n            if (this.additionalCostCostDirection === CostDirections[CostDirections.Payable]) {\r\n                this.additionalCostRate = -(this.additionalCostRate);\r\n            }\r\n            this.summaryTaxCostsComponent.getTaxesForSelectedVat(model);\r\n            this.calculateTotalWithoutTax();\r\n        }\r\n    }\r\n\r\n    setSummaryFieldsFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord.summaryLines) {\r\n            this.summaryTaxGoodsComponent.setDataForTaxGoods(summaryRecord.summaryLines, this.defaultVATCode);\r\n        }\r\n        if (summaryRecord) {\r\n            this.summaryAdditionalCostComponent.contractToBeSelectedFromGrid(summaryRecord);\r\n            this.summaryValueOfGoodsComponent.contractToBeSelectedFromGrid(summaryRecord);\r\n            this.summaryPaymentComponent.setValuesForSummaryFromGrid(summaryRecord);\r\n            this.summaryHeaderComponent.setHeaderFieldsFromGrid(summaryRecord);\r\n        }\r\n        this.summaryAdditionalCostComponent.isAdditionalCostForSummary = true;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"90%\\\">\\r\\n                <h2>Cost</h2>\\r\\n                <div fxLayoutAlign=\\\"end\\\">\\r\\n                    <button mat-icon-button\\r\\n                            [matMenuTriggerFor]=\\\"menu1\\\"\\r\\n                            class=\\\"additional-cost-float-right\\\">\\r\\n                        <i class=\\\"material-icons\\\">more_vert</i>\\r\\n                    </button>\\r\\n                    <mat-menu #menu1=\\\"matMenu\\\">\\r\\n                        <button mat-menu-item\\r\\n                                [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                            <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n                        </button>\\r\\n                    </mat-menu>\\r\\n                    <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n                        <button mat-menu-item\\r\\n                                (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                            <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n                        </button>\\r\\n                        <button mat-menu-item\\r\\n                                (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                            <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n                        </button>\\r\\n                    </mat-menu>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div [hidden]=\\\"isAdditionalCostForSummary\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             class=\\\"add-line-container\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <h6>Add new lines:</h6>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\"\\r\\n                 fxFlex=\\\"2\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [formControl]=\\\"addNewLineCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onAddRowButtonClicked(addNewLineCtrl.value)\\\">PROCEED</button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\"\\r\\n             class=\\\"use-goods-tax-code\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            <mat-slide-toggle [formControl]=\\\"useGoodsTaxCodeCtrl\\\"> Use Goods Tax Code</mat-slide-toggle>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end\\\"\\r\\n                 fxFlex=\\\"10%\\\"\\r\\n                 [hidden]=\\\"isAdditionalCostForSummary\\\">\\r\\n                <mat-form-field fxFlex=\\\"90%\\\">\\r\\n                    <mat-select placeholder=\\\"Cost VAT Code\\\"\\r\\n                                [formControl]=\\\"costVatCodeCtrl\\\"\\r\\n                                matTooltip=\\\"Cost VAT Code\\\"\\r\\n                                (selectionChange)='onCostVatCodeSelected()'>\\r\\n                        <mat-option *ngFor=\\\"let code of costVatCodeOptions\\\"\\r\\n                                    [value]=\\\"code.vatCode\\\">\\r\\n                            {{code.vatCode}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"selectedCostGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"selectedCostGridRows\\\"\\r\\n                             [columnDefs]=\\\"selectedCostGridColumns\\\"\\r\\n                             [gridOptions]=\\\"selectedCostGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [enableFilter]=\\\"true\\\"\\r\\n                             [rowSelection]=\\\"rowSelection\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [singleClickEdit]=true>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n                Total Cost:<span class=\\\"total-figure-value\\\">\\r\\n                    {{this.totalCostDirectionSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                    {{this.currencyCodeSelected}} </span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".use-goods-tax-code {\\n  margin-top: 10px; }\\n\\nbutton {\\n  margin: 0; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { AgContextualMenuComponent } from '../../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { InvoiceSetupResult } from '../../../../../../../shared/dtos/invoice-setup-result';\r\nimport { AgContextualMenuAction } from '../../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { InvoiceLineRecord } from '../../../../../../../shared/entities/invoice-line-record.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToCostInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-additional-cost',\r\n    templateUrl: './additional-cost.component.html',\r\n    styleUrls: ['./additional-cost.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class AdditionalCostComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceCostMenuActions: { [key: string]: string } = {\r\n        deleteInvoiceCost: 'delete',\r\n    };\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<any>();\r\n    costVatCodeCtrl = new AtlasFormControl('CostVatCode');\r\n    useGoodsTaxCodeCtrl = new AtlasFormControl('UseGoodsTaxCode');\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n    @Input() invoiceSetupData: InvoiceSetupResult;\r\n    @Input() selectedGoodsVat: string;\r\n\r\n    company: string;\r\n    costDirections: CostDirection[];\r\n    selectedCostGridOptions: agGrid.GridOptions = {};\r\n    selectedCostGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    selectedCostGridRows: ContractsToCostInvoice[] = [];\r\n\r\n    invoiceType: number;\r\n    componentId: string = 'selectedCost';\r\n    isAddRow: boolean;\r\n    rowSelection: string;\r\n    masterData: MasterData;\r\n    invoicedPercentage: number = 100;\r\n    currencyCodeSelected: string;\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n    };\r\n    gridContext = {\r\n        gridEditable: false,\r\n    };\r\n    costVatCodeOptions: Vat[];\r\n    taxRateCalculated: number = 0;\r\n    vatRate: number[];\r\n\r\n    total: number = 0;\r\n    taxTotal: number = 0;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    vatCodeAvailable: Vat[];\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    defaultVatCode: string;\r\n    isAdditionalCostForSummary: boolean = false;\r\n    selectedCostVat: string;\r\n    costNarrativePrefix: string = 'ADD ';\r\n    userActiveDirectoryName: string;\r\n    totalCostDirectionSign: string;\r\n    addNewLineCtrl = new AtlasFormControl('addNewLineCtrl');\r\n    invoiceCostGridContextualMenuActions: AgContextualMenuAction[];\r\n    inPNL: boolean = false;\r\n    noAction: boolean = false;\r\n\r\n    constructor(private executionService: ExecutionService, protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        protected snackbar: SnackbarService,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceType = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n        this.gridContext.gridEditable = false;\r\n        this.costVatCodeOptions = this.masterData.vats;\r\n        this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n        this.selectedCostVat = this.costVatCodeCtrl.value;\r\n        this.init();\r\n        this.initializeGridColumns();\r\n        this.addNewLineCtrl.patchValue(1);\r\n        this.useGoodsTaxCodeCtrl.patchValue(true);\r\n        this.onChanges();\r\n    }\r\n\r\n    init() {\r\n        this.invoiceCostGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.invoiceCostMenuActions.deleteInvoiceCost,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, costLine: ContractsToCostInvoice) {\r\n        switch (action) {\r\n            case this.invoiceCostMenuActions.deleteInvoiceCost:\r\n                this.onDeleteSelectedButtonClicked(costLine);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            costVatCodeCtrl: this.costVatCodeCtrl,\r\n            useGoodsTaxCodeCtrl: this.useGoodsTaxCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onChanges() {\r\n        this.useGoodsTaxCodeCtrl.valueChanges.subscribe((val) => {\r\n            if (val) {\r\n                this.onUseGoodsTaxCodeToggleChange(this.selectedGoodsVat);\r\n            } else {\r\n                this.onUseGoodsTaxCodeToggleChange(this.selectedCostVat);\r\n            }\r\n        });\r\n    }\r\n\r\n    onUseGoodsTaxCodeToggleChange(value: string) {\r\n        if (value) {\r\n            this.costVatCodeCtrl.patchValue(value);\r\n            const changedVatCode = [];\r\n            this.gridApi.forEachNode((rowNode) => {\r\n                if (rowNode.data) {\r\n                    const data = rowNode.data;\r\n                    data.vatCode = value;\r\n                    changedVatCode.push(data);\r\n                }\r\n            });\r\n            this.gridApi.updateRowData({ update: changedVatCode });\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n    setVatCodeAvailable() {\r\n        if (this.selectedGoodsVat) {\r\n            this.costVatCodeCtrl.patchValue(this.selectedGoodsVat);\r\n            this.vatCodeAvailable = this.masterData.vats.filter((option) => option.vatCode === this.selectedGoodsVat);\r\n            this.totalCostAndVatDetails();\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.selectedCostGridColumns;\r\n        this.selectedCostGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.autoSizeGridHeader();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n    autoSizeGridHeader() {\r\n        const allColumnIds = [];\r\n        this.selectedCostGridColumns.forEach((columnDefs) => {\r\n            allColumnIds.push(columnDefs.field);\r\n        });\r\n        this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.selectedCostGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n                width: 250,\r\n                minWidth: 250,\r\n                maxWidth: 250,\r\n                suppressSizeToFit: true,\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: this.masterData,\r\n                    options: this.masterData.costTypes.filter((cost) => cost.isATradeCost === true)\r\n                        .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                    valueProperty: 'costTypeCode',\r\n                    codeProperty: 'costTypeCode',\r\n                    displayProperty: 'name',\r\n\r\n                },\r\n                onCellValueChanged: this.onCostTypeChange.bind(this),\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'percentageInvoiced',\r\n                colId: 'percentageInvoiced',\r\n                valueGetter: this.getpercentageInvoiced.bind(this),\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n                onCellValueChanged: this.onCostDirectionChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n                editable: true,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.masterData.vats.map((vat) => vat.vatCode),\r\n                    displayPropertyName: 'vatCode',\r\n                    valuePropertyName: 'vatCode',\r\n                    displayFormat: 'vatCode',\r\n                    context: this.masterData,\r\n                },\r\n                onCellValueChanged: this.onVatCodeChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                valueSetter: this.setCostAmountToInvoice,\r\n                onCellValueChanged: this.onCostAmountToInvoiceChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n                editable: this.isGridEditable,\r\n                valueSetter: this.setCostNarrative.bind(this),\r\n                cellStyle: this.narrativeMaxLength.bind(this),\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.invoiceCostGridContextualMenuActions,\r\n                },\r\n                hide: this.isAdditionalCostForSummary === true,\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n        this.rowSelection = 'multiple';\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        if (!params.data.contractReference) {\r\n            return params.context.gridEditable;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    setCostAmountToInvoice(params): boolean {\r\n        params.data.costAmountToInvoice = (params.newValue <= 0) ? 0 : params.newValue;\r\n        return true;\r\n    }\r\n\r\n    setCostNarrative(params): boolean {\r\n        if (params.newValue.length <= 0) {\r\n            params.data.narrative = this.costNarrativePrefix;\r\n        } else {\r\n            const narrativeText = params.newValue as string;\r\n            params.data.narrative = (narrativeText).startsWith('ADD') ? params.newValue :\r\n                this.costNarrativePrefix.concat(params.newValue);\r\n        }\r\n        return true;\r\n    }\r\n    onCostTypeChange(params) {\r\n        const filteredCostType = params.colDef.cellRendererParams.context.costTypes.find(\r\n            (e) => e.costTypeCode === params.data.costTypeCode);\r\n        if (filteredCostType) {\r\n            this.inPNL = filteredCostType.inPNL;\r\n            this.noAction = filteredCostType.noAction;\r\n        }\r\n\r\n    }\r\n\r\n    narrativeMaxLength(params) {\r\n        if (params.data && params.value) {\r\n            if (params.value.length > 30) {\r\n                this.narrativeLength.emit(true);\r\n                this.snackbar.informationSnackBar(\r\n                    'Narrative length should be less than 30',\r\n                );\r\n                return { color: 'red' };\r\n            } else {\r\n                this.narrativeLength.emit(false);\r\n                return { color: 'black' };\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        if (this.isAddRow) {\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (!(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.vatCode\r\n                    && rowData.data.costAmountToInvoice)) {\r\n                    isValid = false;\r\n                }\r\n            });\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    contractToBeSelected(costContracts: ContractsToCostInvoice[]) {\r\n        if (costContracts.length > 0) {\r\n            this.initializeGridColumns();\r\n            if (this.defaultVatCode) {\r\n                costContracts.map((costContract) => costContract.vatCode = this.defaultVatCode);\r\n            }\r\n            this.selectedCostGridRows = costContracts;\r\n            this.selectedCostGridOptions.pagination = (costContracts.length > 10) ? true : false;\r\n            if (this.selectedCostGridRows.length > 0) {\r\n                this.currencyCodeSelected = this.selectedCostGridRows[0].currencyCode;\r\n            }\r\n            if (this.masterData.vats.length > 0) {\r\n                this.costVatCodeCtrl.patchValue(this.masterData.vats[0].vatCode);\r\n            }\r\n            this.calculateTotalAmountAndGetVatCode(costContracts);\r\n        }\r\n    }\r\n\r\n    setDefaultCurrency(currency: string) {\r\n        if (currency) {\r\n            this.currencyCodeSelected = currency;\r\n        }\r\n    }\r\n\r\n    getpercentageInvoiced(params) {\r\n        params.data.percentageInvoiced = this.invoicedPercentage;\r\n        return params.data.percentageInvoiced;\r\n    }\r\n\r\n    onCostDirectionChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n    onCostAmountToInvoiceChange(params) {\r\n        if (params.data.costDirection) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onAddRowButtonClicked(numberOfLines: number) {\r\n        this.isAddRow = true;\r\n        this.gridContext.gridEditable = true;\r\n        this.gridApi.onFilterChanged();\r\n        for (let count = 1; count <= numberOfLines; count++) {\r\n            const newItem = this.createNewCostRowData();\r\n            this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n        }\r\n    }\r\n\r\n    onDeleteSelectedButtonClicked(costLine: ContractsToCostInvoice) {\r\n        if (!costLine.contractReference) {\r\n            this.total = 0;\r\n            this.gridApi.updateRowData({ remove: [costLine] });\r\n            this.calculationOfCRAndDR();\r\n            this.calculateTotalOnUpdateGrid();\r\n\r\n        } else { this.snackbar.informationSnackBar('You cannot delete a cost which is not added in Invoice Working Page'); }\r\n\r\n    }\r\n\r\n    calculationOfCRAndDR() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n            }\r\n        });\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    updateTotals(totalCR, totalDR) {\r\n        if (totalCR > totalDR) {\r\n            this.total = totalCR - totalDR;\r\n            this.costDirectionDisplay = this.credit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n            this.totalCostDirection = CostDirections[CostDirections.Payable];\r\n        } else {\r\n            this.total = totalDR - totalCR;\r\n            this.costDirectionDisplay = this.debit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Receivable];\r\n            this.totalCostDirection = CostDirections[CostDirections.Receivable];\r\n        }\r\n    }\r\n\r\n    totalCostAndVatDetails() {\r\n        this.totalCostAndVatCode.emit({\r\n            rate: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            costDirection: this.totalCostDirection,\r\n            currencyCode: this.currencyCodeSelected,\r\n            vatAvailable: this.vatCodeAvailable,\r\n        });\r\n\r\n        this.vatCodeAvailable.forEach(\r\n            (tax) => {\r\n                this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n            },\r\n        );\r\n    }\r\n\r\n    createNewCostRowData() {\r\n        const newData = new ContractsToCostInvoice();\r\n        newData.invoicePercent = this.invoicedPercentage;\r\n        newData.currencyCode = this.currencyCodeSelected;\r\n        newData.narrative = this.costNarrativePrefix;\r\n        newData.vatCode = this.defaultVatCode;\r\n        return newData;\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.defaultVatCode = defaultVatCode;\r\n    }\r\n\r\n    setTaxDataForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.selectedCostGridRows = this.getCostContractsForSummary(costInvoiceRecord);\r\n        this.initializeGridColumns();\r\n        this.calculateTotalForSummary(costInvoiceRecord);\r\n    }\r\n\r\n    getCostContractsForSummary(costInvoiceRecord: CostInvoiceRecord): ContractsToCostInvoice[] {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        if (costInvoiceRecord) {\r\n            const contract = new ContractsToCostInvoice();\r\n            contract.vatCode = costInvoiceRecord.vatCode;\r\n            contract.principalCommodity = costInvoiceRecord.principalCommodity;\r\n            contract.rate = costInvoiceRecord.price;\r\n            contract.quantity = costInvoiceRecord.quantity;\r\n            contract.costAmountToInvoice = costInvoiceRecord.lineAmount;\r\n            contract.invoicePercent = costInvoiceRecord.totalInvoiceValue;\r\n            contracts.push(contract);\r\n        }\r\n        return contracts;\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n            return selectedCostDirection.costDirectionId;\r\n        }\r\n    }\r\n\r\n    calculateTotalAmountAndGetVatCode(contracts: ContractsToCostInvoice[]) {\r\n        this.total = 0;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        let costDirectionId: number;\r\n        this.vatCodeAvailable = [];\r\n        contracts.forEach(\r\n            (contract) => {\r\n                let vatCode: Vat[];\r\n                // creating copy of selected vatCode, so the calculations are not impacting the original data\r\n                vatCode = this.masterData.vats\r\n                    .filter((vat) => (vat.vatCode === contract.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n                        return code.rate = code.rate / 100 * contract.costAmountToInvoice;\r\n                    });\r\n                    if (this.vatCodeAvailable.length === 0) {\r\n                        this.vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        this.vatCodeAvailable.map((code) =>\r\n                            (code.vatCode === vatCode[0].vatCode) ? (code.rate = code.rate + vatCode[0].rate) :\r\n                                this.vatCodeAvailable.push(vatCode[0]));\r\n                    }\r\n                }\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.costAmountToInvoice;\r\n                } else {\r\n                    totalDR = totalDR + contract.costAmountToInvoice;\r\n                }\r\n            },\r\n        );\r\n        if (contracts.length > 0) {\r\n            this.currencyCode = contracts[0].currencyCode;\r\n        }\r\n        this.updateTotals(totalCR, totalDR);\r\n        this.totalCostAndVatDetails();\r\n    }\r\n\r\n    calculateTotalOnUpdateGrid() {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        const costDirectionPay: string = 'Pay';\r\n        const vatMasterData = this.masterData.vats;\r\n        let vatCodeAvailable = [];\r\n        this.gridApi.forEachNode((rowNode) => {\r\n            if (rowNode.data) {\r\n                let vatCode: Vat[] = [];\r\n                if (rowNode.data.costDirection === costDirectionPay) {\r\n                    totalCR = totalCR + Number(rowNode.data.costAmountToInvoice);\r\n                } else {\r\n                    totalDR = totalDR + Number(rowNode.data.costAmountToInvoice);\r\n                }\r\n                vatCode = vatMasterData\r\n                    .filter((vat) => (vat.vatCode === rowNode.data.vatCode)).map((x) => ({ ...x }));\r\n                if (vatCode.length > 0) {\r\n                    vatCode.map((code) => {\r\n\r\n                        return code.rate = code.rate / 100 * rowNode.data.costAmountToInvoice;\r\n                    });\r\n                    if (vatCodeAvailable.length === 0) {\r\n                        if (rowNode.data.costDirection === costDirectionPay) {\r\n                            vatCode[0].rate = -(vatCode[0].rate);\r\n                        }\r\n                        vatCodeAvailable.push(vatCode[0]);\r\n                    } else {\r\n                        let isAvailable: boolean = false;\r\n                        vatCodeAvailable.map((code) => {\r\n                            if (code.vatCode === vatCode[0].vatCode) {\r\n                                if (vatCodeAvailable.filter((selectedVatCode) => selectedVatCode.vatCode === vatCode[0].vatCode)) {\r\n                                    if (rowNode.data.costDirection === costDirectionPay) {\r\n                                        vatCode[0].rate = -(vatCode[0].rate);\r\n                                    }\r\n                                    code.rate = code.rate + vatCode[0].rate;\r\n                                    isAvailable = true;\r\n                                }\r\n                            }\r\n                        });\r\n                        if (!isAvailable) {\r\n                            vatCodeAvailable = vatCodeAvailable.filter((code) => code.vatCode !== vatCode[0].vatCode);\r\n                            if (rowNode.data.costDirection === costDirectionPay) {\r\n                                vatCode[0].rate = -(vatCode[0].rate);\r\n                            }\r\n                            vatCodeAvailable.push(vatCode[0]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.updateTotals(totalCR, totalDR);\r\n        if (this.useGoodsTaxCodeCtrl.value) {\r\n            this.setVatCodeAvailable();\r\n        } else {\r\n            this.vatCodeAvailable = vatCodeAvailable.map((x) => ({ ...x }));\r\n            this.totalCostAndVatDetails();\r\n        }\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n\r\n    onVatCodeChange(params) {\r\n        if (params.data.costAmountToInvoice) {\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (params.data && params.context.gridEditable) {\r\n            if (!params.value || params.value === '') {\r\n                return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onCostVatCodeSelected() {\r\n        if (!this.useGoodsTaxCodeCtrl.value) {\r\n            const vat = this.costVatCodeCtrl.value;\r\n            this.selectedCostVat = vat;\r\n            const changedVatCode = [];\r\n            this.gridApi.forEachNode((rowNode) => {\r\n                if (rowNode.data) {\r\n                    const data = rowNode.data;\r\n                    data.vatCode = vat;\r\n                    changedVatCode.push(data);\r\n                }\r\n            });\r\n            this.gridApi.updateRowData({ update: changedVatCode });\r\n            this.calculateTotalOnUpdateGrid();\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const selectedInvoiceCosts = entity;\r\n        selectedInvoiceCosts.currency = this.currencyCodeSelected;\r\n        selectedInvoiceCosts.totalInvoiceValue = this.total;\r\n        if (selectedInvoiceCosts.invoiceLines && selectedInvoiceCosts.invoiceLines.length > 0) {\r\n            const invoiceLines: InvoiceLineRecord[] = this.getInvoiceCostLines(selectedInvoiceCosts.invoiceLines.length);\r\n            invoiceLines.forEach((line) => {\r\n                selectedInvoiceCosts.invoiceLines.push(line);\r\n            });\r\n        } else {\r\n            selectedInvoiceCosts.invoiceLines = this.getInvoiceCostLines();\r\n        }\r\n        return selectedInvoiceCosts;\r\n    }\r\n\r\n    getAllInvoiceCostLines(): ContractsToCostInvoice[] {\r\n        const selectedCostRows: ContractsToCostInvoice[] = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costInvoiceline = new ContractsToCostInvoice();\r\n                costInvoiceline.costId = rowData.data.costId;\r\n                costInvoiceline.sectionId = rowData.data.sectionId;\r\n                costInvoiceline.costAmountToInvoice = rowData.data.costAmountToInvoice;\r\n                costInvoiceline.quantity = rowData.data.quantity;\r\n                costInvoiceline.costTypeCode = rowData.data.costTypeCode;\r\n                costInvoiceline.currencyCode = rowData.data.currencyCode;\r\n                costInvoiceline.vatCode = rowData.data.vatCode;\r\n                costInvoiceline.narrative = rowData.data.narrative;\r\n                costInvoiceline.invoicePercent = this.invoicedPercentage;\r\n                costInvoiceline.rateTypeCode = rowData.data.rateTypeCode;\r\n                costInvoiceline.costDirection = rowData.data.costDirection;\r\n                selectedCostRows.push(costInvoiceline);\r\n            }\r\n        });\r\n\r\n        return selectedCostRows;\r\n    }\r\n\r\n    getInvoiceCostLines(index: number = 0): InvoiceLineRecord[] {\r\n        const invoiceLines: InvoiceLineRecord[] = [];\r\n        this.selectedCostGridRows = this.getAllInvoiceCostLines();\r\n        this.selectedCostGridRows.map((data) => {\r\n            const invoiceLine = new InvoiceLineRecord();\r\n            invoiceLine.costID = data.costId;\r\n            invoiceLine.sectionID = data.sectionId;\r\n            invoiceLine.lineAmount = data.costAmountToInvoice;\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === data.costDirection);\r\n            invoiceLine.costDirectionId = selectedCostDirection ? selectedCostDirection.costDirectionId : null;\r\n            invoiceLine.costTypeCode = data.costTypeCode;\r\n            invoiceLine.currencyCode = data.currencyCode;\r\n            invoiceLine.rateTypeId = 1; // RateType to be defaulted as Amount as per the FS.\r\n            invoiceLine.vatCode = data.vatCode;\r\n            invoiceLine.vatAmount = data.vatAmount;\r\n            invoiceLine.invoicePercent = this.invoicedPercentage;\r\n            invoiceLine.narrative = data.narrative;\r\n            invoiceLine.inPL = this.inPNL;\r\n            invoiceLine.noAct = this.noAction;\r\n            invoiceLines.push(invoiceLine);\r\n            index++;\r\n        });\r\n        return invoiceLines;\r\n    }\r\n\r\n    /* Code for home grid to summary redirection */\r\n\r\n    contractToBeSelectedFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord) {\r\n            this.selectedCostGridRows = this.getCostContractsForSummaryFromGrid(summaryRecord.summaryLines);\r\n            this.initializeGridColumnsFromSummary();\r\n            if (this.selectedCostGridRows.length > 0) {\r\n                this.calculateTotalAmountAndGetVatCode(this.selectedCostGridRows);\r\n            } else {\r\n                this.currencyCodeSelected = summaryRecord.currency;\r\n                summaryRecord.summaryLines.forEach((record) => {\r\n                    if (record.vatCode) {\r\n                        this.vatCodeAvailable = this.masterData.vats.filter((option) => option.vatCode === record.vatCode);\r\n                    }\r\n                });\r\n                this.totalCostAndVatCode.emit({\r\n                    rate: this.total,\r\n                    decimalOption: this.decimalOptionValue,\r\n                    costDirection: this.totalCostDirection,\r\n                    currencyCode: this.currencyCodeSelected,\r\n                    vatAvailable: this.vatCodeAvailable,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    initializeGridColumnsFromSummary() {\r\n        this.selectedCostGridColumns = [\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Amount',\r\n                field: 'costAmountToInvoice',\r\n                colId: 'costAmountToInvoice',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: '% Invoiced',\r\n                field: 'percentageInvoiced',\r\n                colId: 'percentageInvoiced',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec',\r\n                field: 'costDirection',\r\n                colId: 'costDirection',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getCostContractsForSummaryFromGrid(summaryLines: InvoiceSummaryLineRecord[]) {\r\n        const contracts: ContractsToCostInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.costId > 0) {\r\n                const contract = new ContractsToCostInvoice();\r\n                contract.costTypeCode = record.costTypeCode;\r\n                contract.principalCommodity = record.principalCommodity;\r\n                contract.rate = record.price;\r\n                contract.quantity = record.quantity.toString();\r\n                contract.weightCode = record.weightCode;\r\n                contract.costAmountToInvoice = record.lineAmount;\r\n                contract.costDirection = record.costDirection;\r\n                contract.vatCode = record.vatCode;\r\n                contract.invoicePercent = record.invoicePercent;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = 'Cost';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'Cost';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n\r\n    setAllInvoiceCostLines() {\r\n        this.selectedCostGridRows = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costInvoiceline = new ContractsToCostInvoice();\r\n                costInvoiceline.costId = rowData.data.costId;\r\n                costInvoiceline.sectionId = rowData.data.sectionId;\r\n                costInvoiceline.costAmountToInvoice = rowData.data.costAmountToInvoice;\r\n                costInvoiceline.quantity = rowData.data.quantity;\r\n                costInvoiceline.costTypeCode = rowData.data.costTypeCode;\r\n                costInvoiceline.currencyCode = rowData.data.currencyCode;\r\n                costInvoiceline.vatCode = rowData.data.vatCode;\r\n                costInvoiceline.invoicePercent = this.invoicedPercentage;\r\n                costInvoiceline.narrative = rowData.data.narrative;\r\n                costInvoiceline.costDirection = rowData.data.costDirection;\r\n                this.selectedCostGridRows.push(costInvoiceline);\r\n            }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\"\\r\\n          fxFlex=\\\"100\\\">\\r\\n    <mat-card-title>\\r\\n        Invoice Document\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            (optionSelected)=\\\"onExternalInHouseSelected()\\\"\\r\\n                            placeholder=\\\"External/InHouse\\\"\\r\\n                            [formControl]=\\\"invoiceExtInHouseCtrl\\\"\\r\\n                            matTooltip=\\\"External/InHouse\\\">\\r\\n                    <mat-option *ngFor=\\\"let info of invoiceSourceType\\\"\\r\\n                                [value]=\\\"info.viewValue\\\">\\r\\n                        {{info.viewValue}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"60%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"External Invoice Reference\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]=\\\"invoiceExtRefCtrl\\\">\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('required')\\\">\\r\\n                    Reference is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"invoiceExtRefCtrl.hasError('maxlength')\\\">\\r\\n                    Must be less than 25 characters\\r\\n                </mat-error>\\r\\n                <mat-hint align=\\\"end\\\">\\r\\n                    {{invoiceExtRefCtrl.value.length}} / 25\\r\\n                </mat-hint>\\r\\n                <mat-hint style=\\\"color:orange\\\"\\r\\n                          *ngIf=\\\"!isUnique\\\">\\r\\n                    Reference Number already used\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                            class=\\\"margin-bottom\\\">\\r\\n                <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                            placeholder=\\\"Template\\\"\\r\\n                            [formControl]=\\\"invoiceTemplatesCtrl\\\"\\r\\n                            (selectionChange)=\\\"onInvoiceTemplateSelected()\\\"\\r\\n                            matTooltip=\\\"Template\\\"\\r\\n                            [required]=\\\"invoiceTemplatesCtrl.isRequired\\\">\\r\\n                    <mat-option></mat-option>\\r\\n                    <mat-option *ngFor=\\\"let template of filteredTemplates\\\"\\r\\n                                [value]=\\\"template\\\">\\r\\n                        {{template.name}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n                <mat-error *ngIf=\\\"invoiceTemplatesCtrl.hasError('required')\\\">\\r\\n                    Template is required\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-form-field fxFlex=\\\"32%\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"washoutAgreementDatePicker\\\"\\r\\n                       placeholder=\\\"Agreement Date (BL Date)\\\"\\r\\n                       [matTooltip]=\\\"'Agreement Date'\\\"\\r\\n                       [formControl]='washoutAgreementDateCtrl'\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onAgreementDateChanged()'>\\r\\n                <mat-error *ngIf=\\\"washoutAgreementDateCtrl.hasError('isDateAfterCurrentDateValid')\\\">\\r\\n                    Date cannot be greater than the system date\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"washoutAgreementDateCtrl.hasError('required')\\\">\\r\\n                    Agreement Date is required\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"!washoutAgreementDateCtrl.hasError('isDateAfterCurrentDateValid' || 'required')\\\"\\r\\n                          class=\\\"invoice-creation-required-fields\\\">Required*</mat-hint>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"washoutAgreementDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #washoutAgreementDatePicker></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { PhysicalDocumentTemplate } from '../../../../../../../shared/entities/document-template.entity';\r\nimport { ContractTypes } from '../../../../../../../shared/enums/contract-type.enum';\r\nimport { DocumentTypes } from '../../../../../../../shared/enums/document-type.enum';\r\nimport { InvoiceSourceType } from '../../../../../../../shared/enums/invoice-source-type.enum';\r\nimport { ContractsToWashoutInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-washout-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../../../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { agreementDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nimport { DocumentTemplateBaseComponent } from '../../../../../../execution-invoicing/invoicing-base-form/document-template-base/document-template-base.component';\r\n\r\nconst moment = _moment;\r\n@Component({\r\n    selector: 'atlas-invoice-document',\r\n    templateUrl: './invoice-document.component.html',\r\n    styleUrls: ['./invoice-document.component.scss'],\r\n})\r\nexport class InvoiceDocumentComponent extends DocumentTemplateBaseComponent implements OnInit {\r\n    washoutAgreementDateCtrl = new AtlasFormControl('washoutAgreementDateCtrl');\r\n    contractsToWashoutInvoice: ContractsToWashoutInvoice;\r\n    isDateAfterValid: boolean;\r\n    blDateTrade: Date;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected documentService: DocumentService,\r\n        protected executionService: ExecutionService,\r\n        protected utilService: UtilService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(executionService, formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.documentService.getTemplates(DocumentTypes.InvoiceWashout).subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n            this.invoiceTemplatesCtrl.valueChanges.subscribe((input) => {\r\n                this.filteredTemplates =\r\n                    this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        templates.value,\r\n                        ['documentTemplateId', 'name']);\r\n\r\n            });\r\n            this.onExternalInHouseSelected();\r\n            this.bindConfiguration();\r\n            if ((this.filteredTemplates.length === 1) &&\r\n                (this.invoiceExtInHouseCtrl.value === (InvoiceSourceType[InvoiceSourceType.Inhouse]))) {\r\n                this.invoiceTemplatesCtrl.patchValue(this.filteredTemplates[0]);\r\n                this.onInvoiceTemplateSelected();\r\n            }\r\n\r\n        }));\r\n        this.invoiceSourceType = this.getInvoiceSourceTypeEnum();\r\n        this.invoiceExtInHouseCtrl.patchValue(InvoiceSourceType[InvoiceSourceType.Inhouse]);\r\n        this.washoutAgreementDateCtrl.patchValue(this.companyManager.getCurrentCompanyDate().toDate());\r\n        this.setValidators();\r\n        this.onChanges();\r\n    }\r\n\r\n    onAgreementDateChanged() {\r\n        this.washoutAgreementDateCtrl.clearValidators();\r\n        const agreementDate: _moment.Moment = moment(this.washoutAgreementDateCtrl.value);\r\n        const currentDate = moment(this.companyManager.getCurrentCompanyDate());\r\n        this.washoutAgreementDateCtrl.setValidators(\r\n            Validators.compose([Validators.required, agreementDateValidation(agreementDate, currentDate)]));\r\n        this.washoutAgreementDateCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            invoiceExtInHouseCtrl: this.invoiceExtInHouseCtrl,\r\n            invoiceExtRefCtrl: this.invoiceExtRefCtrl,\r\n            invoiceTemplatesCtrl: this.invoiceTemplatesCtrl,\r\n            washoutAgreementDateCtrl: this.washoutAgreementDateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceDocumentTemplate = entity;\r\n        invoiceDocumentTemplate.template = this.invoiceTemplatesCtrl.value ?\r\n            (this.invoiceTemplatesCtrl.value as PhysicalDocumentTemplate).path : null;\r\n        invoiceDocumentTemplate.externalInhouse = this.invoiceExtInHouseCtrl.value;\r\n        invoiceDocumentTemplate.externalInvoiceRef = this.invoiceExtRefCtrl.value;\r\n        invoiceDocumentTemplate.agreementDate = this.washoutAgreementDateCtrl.value;\r\n        return invoiceDocumentTemplate;\r\n    }\r\n\r\n    selectedWashoutContracts(contracts: ContractsToWashoutInvoice[]) {\r\n        if (contracts.length > 0) {\r\n            contracts = contracts.filter((contract) => contract.contractType === ContractTypes.Purchase);\r\n            if (contracts.length > 0) {\r\n                this.blDateTrade = (contracts[0].blDate != null) ? contracts[0].blDate :\r\n                    (this.companyManager.getCurrentCompanyDate().toDate());\r\n                this.washoutAgreementDateCtrl.patchValue(this.blDateTrade);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Payments</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"2%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select placeholder=\\\"Payment Terms\\\"\\r\\n                            [formControl]=\\\"washoutPaymentTermsCtrl\\\"\\r\\n                            matTooltip=\\\"Payment Terms\\\">\\r\\n                    <mat-option *ngFor=\\\"let terms of paymentTermsOption\\\"\\r\\n                                [value]=\\\"terms.paymentTermCode\\\">{{terms.paymentTermCode}}</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"30%\\\"\\r\\n                            class=\\\"mandatory\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Due Date\\\"\\r\\n                       [formControl]=\\\"washoutDueDateCtrl\\\"\\r\\n                       [matDatepicker]=\\\"washoutDueDatePicker\\\"\\r\\n                       matTooltip=\\\"Due Date\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onInvoiceDueDateSelected()'>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"washoutDueDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #washoutDueDatePicker></mat-datepicker>\\r\\n                <mat-hint *ngIf=\\\"!washoutDueDateCtrl.hasError('isDateBeforeValid' || 'required') && !washoutDueDateCtrl.disabled\\\"\\r\\n                          class=\\\"invoice-creation-required-fields\\\">Required*</mat-hint>\\r\\n                <mat-error *ngIf=\\\"washoutDueDateCtrl.hasError('required')\\\">\\r\\n                    Required*\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"washoutDueDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                    Value Date should be equal to or after the invoice date\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { PaymentTerm } from '../../../../../../../shared/entities/payment-term.entity';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-payments',\r\n    templateUrl: './payments.component.html',\r\n    styleUrls: ['./payments.component.scss'],\r\n})\r\n\r\nexport class WashoutPaymentsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    washoutPaymentTermsCtrl = new AtlasFormControl('washoutPaymentTerms');\r\n    washoutDueDateCtrl = new AtlasFormControl('washoutDueDate');\r\n    invoiceDateChanged: Date;\r\n    masterdata: MasterData = new MasterData();\r\n    paymentTermsOption: PaymentTerm[];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.paymentTermsOption = this.masterdata.paymentTerms;\r\n        this.onChanges();\r\n        this.onInvoiceDueDateSelected();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            washoutPaymentTermsCtrl: this.washoutPaymentTermsCtrl,\r\n            washoutDueDatePickerCtrl: this.washoutDueDateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onInvoiceDueDateSelected() {\r\n        this.washoutDueDateCtrl.clearValidators();\r\n        this.washoutDueDateCtrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.washoutDueDateCtrl.value,\r\n                moment(this.invoiceDateChanged)), Validators.required]));\r\n        this.washoutDueDateCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const payments = entity;\r\n        payments.paymentTerms = this.washoutPaymentTermsCtrl.value;\r\n        payments.dueDate = this.washoutDueDateCtrl.value;\r\n        return payments;\r\n    }\r\n\r\n    getPaymentTermsCreditDays(paymentTerm: string): number {\r\n        if (this.masterdata.paymentTerms) {\r\n            const selectedPaymentTerms: PaymentTerm = this.masterdata.paymentTerms.find(\r\n                (payTerms) => payTerms.paymentTermCode === paymentTerm,\r\n            );\r\n            if (selectedPaymentTerms) {\r\n                return selectedPaymentTerms.creditDays;\r\n            }\r\n        }\r\n    }\r\n\r\n    onChanges(): void {\r\n        this.washoutPaymentTermsCtrl.valueChanges.subscribe((input) => {\r\n            this.washoutDueDateCtrl.patchValue(this.companyManager.getCurrentCompanyDate()\r\n                .add('days', this.getPaymentTermsCreditDays(input)));\r\n        });\r\n    }\r\n\r\n    setPaymentTerms(paymentTerm: string) {\r\n        this.washoutPaymentTermsCtrl.patchValue(paymentTerm);\r\n    }\r\n\r\n    setPaymentFieldsForSummary(model) {\r\n        this.washoutPaymentTermsCtrl.patchValue(model.paymentTerms);\r\n        this.washoutDueDateCtrl.patchValue(model.dueDate);\r\n    }\r\n\r\n    setValuesForSummaryFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        this.washoutPaymentTermsCtrl.patchValue(summaryRecord.paymentTermsCode);\r\n        this.washoutDueDateCtrl.patchValue(summaryRecord.dueDate);\r\n    }\r\n}\r\n","module.exports = \"<mat-card fxFlex=\\\"100\\\">\\r\\n    <mat-card-title>\\r\\n        Invoice Selection\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"49\\\"\\r\\n                            class=\\\"margin-bottom\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"washoutInvoiceDatePicker\\\"\\r\\n                       placeholder=\\\"Invoice date\\\"\\r\\n                       [matTooltip]=\\\"'Invoice date'\\\"\\r\\n                       [formControl]='washoutInvoiceDateCtrl'\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (dateChange)='onWashoutInvoiceDateSelected()'>\\r\\n                <mat-hint *ngIf=\\\"isDateAfterValid\\\">Invoice Date is in Future</mat-hint>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"washoutInvoiceDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #washoutInvoiceDatePicker></mat-datepicker>\\r\\n                <mat-error *ngIf=\\\"washoutInvoiceDateCtrl.hasError('isDateBeforeValid')\\\">\\r\\n                    Invoice Date can be equal to or after the contract date\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"49\\\"\\r\\n                            class=\\\"mat-read-only-field\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Counterparty\\\"\\r\\n                       [matTooltip]=\\\"'Counterparty'\\\"\\r\\n                       [formControl]=\\\"counterpartyCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-form-field fxFlex=\\\"32%\\\"\\r\\n                            class=\\\"mat-read-only-field\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Invoice Type\\\"\\r\\n                       [formControl]='washoutInvoiceTypeCtrl'\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <mat-divider class=\\\"mat-divider-washout\\\"></mat-divider>\\r\\n        <div class=\\\"toggle-washout\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-slide-toggle [checked]=\\\"true\\\"\\r\\n                              [formControl]=\\\"authorizePostingCtrl\\\">Authorize for posting</mat-slide-toggle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".mat-divider-washout {\\n  margin-top: 2%; }\\n\\n.toggle-washout {\\n  margin-top: 5.7%; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ContractsToWashoutInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-washout-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { invoiceDateValidation } from '../../../../../../../shared/validators/date-validators.validator';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-selection',\r\n    templateUrl: './selection.component.html',\r\n    styleUrls: ['./selection.component.scss'],\r\n})\r\nexport class SelectionComponent extends BaseFormComponent implements OnInit {\r\n    washoutInvoiceDateCtrl = new AtlasFormControl('WashoutInvoiceDateCtrl');\r\n    counterpartyCtrl = new AtlasFormControl('WashoutCounterParty');\r\n    washoutInvoiceTypeCtrl = new AtlasFormControl('WashoutInvoiceType');\r\n    authorizePostingCtrl = new AtlasFormControl('WashoutAuthorizeForPosting');\r\n    company: string;\r\n    invoiceTypeDescription: string;\r\n    invoiceSelectDescription: string;\r\n    masterdata: MasterData = new MasterData();\r\n    selectedGroup: string;\r\n    invoiceDate: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    dates: Date[];\r\n    maxDate: _moment.Moment;\r\n    isDateAfterValid: boolean;\r\n    @Output() readonly invoiceDateChanged = new EventEmitter<Date>();\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.washoutInvoiceDateCtrl.setValue(this.companyManager.getCurrentCompanyDate().toDate());\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getData();\r\n    }\r\n\r\n    getData() {\r\n        const invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.invoiceTypeDescription = this.masterdata.\r\n            invoiceTypes.find((invoiceType) => invoiceType.invoiceTypeId === invoiceTypeId).name;\r\n        this.washoutInvoiceTypeCtrl.patchValue(this.invoiceTypeDescription);\r\n    }\r\n\r\n    setDefaultAuthorizeForPosting(defaultAuthorizeForPosting: boolean) {\r\n        this.authorizePostingCtrl.setValue(defaultAuthorizeForPosting);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            washoutInvoiceDateCtrl: this.washoutInvoiceDateCtrl,\r\n            counterpartyCtrl: this.counterpartyCtrl,\r\n            washoutInvoiceTypeCtrl: this.washoutInvoiceTypeCtrl,\r\n            authorizePostingCtrl: this.authorizePostingCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    selectedWashoutContracts(washoutContracts: ContractsToWashoutInvoice[]) {\r\n        this.setInvoiceDate(washoutContracts);\r\n    }\r\n\r\n    setInvoiceDate(washoutContracts: ContractsToWashoutInvoice[]) {\r\n        this.dates = Array.from(washoutContracts, (contracts) => contracts.contractDate);\r\n        const moments = this.dates.map((date) => moment(date)),\r\n            maxDate = moment.max(moments);\r\n        this.maxDate = maxDate;\r\n    }\r\n    counterPartySelected(counterPartySelected) {\r\n        this.counterpartyCtrl.patchValue(this.masterdata.counterparties.find(\r\n            (counterParty) => counterParty.counterpartyCode === counterPartySelected).description);\r\n    }\r\n    onWashoutInvoiceDateSelected() {\r\n        this.invoiceDate = new Date(this.washoutInvoiceDateCtrl.value);\r\n        this.washoutInvoiceDateCtrl.clearValidators();\r\n        this.isDateAfterValid = false;\r\n        this.invoiceFutureValidation(this.invoiceDate);\r\n        this.washoutInvoiceDateCtrl.setValidators(\r\n            Validators.compose([invoiceDateValidation(this.invoiceDate, this.maxDate)]));\r\n        this.washoutInvoiceDateCtrl.updateValueAndValidity();\r\n        if (this.washoutInvoiceDateCtrl.valid) {\r\n        this.invoiceDateChanged.emit(this.washoutInvoiceDateCtrl.value);\r\n        }\r\n    }\r\n\r\n    invoiceFutureValidation(invoiceDate) {\r\n        const invoiceMoment: _moment.Moment = moment(invoiceDate);\r\n        if (invoiceMoment.isAfter(this.companyManager.getCurrentCompanyDate())) {\r\n            this.isDateAfterValid = true;\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceSelection = entity;\r\n        invoiceSelection.invoiceDate = this.washoutInvoiceDateCtrl.value;\r\n        invoiceSelection.authorizedForPosting = this.authorizePostingCtrl.value;\r\n        if (this.masterdata) {\r\n            const requiredCounterParty = this.masterdata.counterparties.find(\r\n                (counterParty) => counterParty.description === this.counterpartyCtrl.value);\r\n            if (requiredCounterParty) {\r\n                invoiceSelection.counterpartyCode = requiredCounterParty.counterpartyCode;\r\n            }\r\n        }\r\n        return invoiceSelection;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        Taxes for Cost\\r\\n        <button mat-icon-button\\r\\n                [matMenuTriggerFor]=\\\"menu1\\\"\\r\\n                style=\\\"float: right\\\">\\r\\n            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n        </button>\\r\\n        <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </mat-card-title>\\r\\n\\r\\n    <mat-card-content>\\r\\n\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"taxesGridRows\\\"\\r\\n                         [columnDefs]=\\\"taxesGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [pagination]=\\\"false\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <mat-card-subtitle class=\\\"no-margin total-figure\\\">Total Tax Amount: <span\\r\\n                      class=\\\"total-figure-value\\\">{{defaultTaxDirectionSign}}{{formatQuantityAndTotal(this.taxTotal)}}\\r\\n                    {{currencyCode}}</span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".ag-theme-material {\\n  margin-bottom: 0px; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { CostInvoiceRecord } from '../../../../../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { TaxRecord } from '../../../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-tax-costs',\r\n    templateUrl: './tax-costs.component.html',\r\n    styleUrls: ['./tax-costs.component.scss'],\r\n    providers: [DatePipe]\r\n})\r\nexport class TaxCostsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<any>();\r\n    taxesGridOptions: agGrid.GridOptions = {};\r\n    taxesGridColumns: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    gridApi: agGrid.GridApi;\r\n    rowGroupPanelShow: string;\r\n    isGroupingEnabled: boolean = false;\r\n    taxesGridRows: TaxRecord[];\r\n    costDirection: CostDirection;\r\n    totalCostDirection: string;\r\n    costDirectionDisplay: string = '';\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    masterdata: MasterData = new MasterData();\r\n    vatCode: Vat[];\r\n    vatCodeAvailable: TaxRecord[];\r\n    costDirections: CostDirection[];\r\n\r\n    costTotal: number = 0;\r\n    total: number = 0;\r\n    taxTotal: number = 0;\r\n    currencyCode: string = '';\r\n    pricingOptionValue: number = 0;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    costDirectionPay: string = 'Pay';\r\n    userActiveDirectoryName: string;\r\n    company: string;\r\n    defaultTaxDirectionSign: string = CostSigns[CostDirections.Payable];\r\n\r\n    constructor(private route: ActivatedRoute, protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService, private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private companyManagerService: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n        this.company = this.companyManagerService.getCurrentCompanyId();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.taxesGridColumns;\r\n        this.taxesGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    initializeGridColumns() {\r\n        this.taxesGridColumns = [\r\n            {\r\n                headerName: 'VAT Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'vatDescription',\r\n                colId: 'vatDescription',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'VAT Amount',\r\n                field: 'rate',\r\n                colId: 'rate',\r\n                hide: false,\r\n                valueFormatter: this.vatAmountFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    vatAmountFormatter(param) {\r\n        return Math.abs(param.value);\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.vatCode = this.masterdata.vats.filter((option) => option.vatCode === defaultVatCode);\r\n        const defaultTaxRecord: TaxRecord[] = [];\r\n        this.vatCode.forEach((data) => {\r\n            const taxLine = new TaxRecord();\r\n            taxLine.vatCode = data.vatCode;\r\n            taxLine.vatDescription = data.vatDescription;\r\n            taxLine.rate = data.rate;\r\n            taxLine.costDirection = this.credit;\r\n            defaultTaxRecord.push(taxLine);\r\n        });\r\n        if (defaultTaxRecord) {\r\n            this.taxRecordsSelected(defaultTaxRecord);\r\n        }\r\n    }\r\n\r\n    taxRecordsSelected(taxesRecord: TaxRecord[]) {\r\n        if (taxesRecord.length > 0) {\r\n            this.initializeGridColumns();\r\n            this.taxesGridRows = taxesRecord;\r\n            this.calculateTotalAmount(taxesRecord);\r\n            if (this.gridApi) {\r\n                this.gridApi.hideOverlay();\r\n            }\r\n        }\r\n    }\r\n\r\n    setDirectionAndCurrency(data: TaxRecord) {\r\n        this.costDirectionDisplay = data.costDirection;\r\n        this.currencyCode = data.currencyCode;\r\n    }\r\n\r\n    calculateTotalAmount(taxes: TaxRecord[]) {\r\n        this.total = 0;\r\n        this.taxTotal = 0;\r\n        taxes.forEach(\r\n            (tax) => {\r\n                this.taxTotal = this.taxTotal + Math.abs(tax.rate);\r\n            },\r\n        );\r\n        this.totalCostTaxCalculated.emit({\r\n            amount: this.taxTotal,\r\n            decimalOption: this.decimalOptionValue,\r\n            currencyCode: this.currencyCode,\r\n            costDirection: this.costDirectionDisplay,\r\n        });\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotalForSummary(costInvoiceRecord: CostInvoiceRecord) {\r\n        this.total = costInvoiceRecord.totalVatAmount;\r\n        this.currencyCode = costInvoiceRecord.currencyCode;\r\n    }\r\n\r\n    getTaxesForSelectedVat(model: CostInvoiceRecord) {\r\n        if (model) {\r\n            this.costTotal = model.rate;\r\n            this.decimalOptionValue = model.decimalOption;\r\n            this.currencyCode = model.currencyCode;\r\n            this.totalCostDirection = model.costDirection;\r\n            if (model.costDirection === CostDirections[CostDirections.Payable]) {\r\n                this.costDirectionDisplay = this.credit;\r\n            } else if (model.costDirection === CostDirections[CostDirections.Receivable]) {\r\n                this.costDirectionDisplay = this.debit;\r\n            }\r\n            this.taxRecordsSelected(model.vatAvailable);\r\n        }\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        let screenName: String = 'Taxes for Cost';\r\n        let now = new Date();\r\n        let todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        var params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        let screenName: String = 'Taxes for Cost';\r\n        let now = new Date();\r\n        let todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        var params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Taxes</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <div fxFlex=\\\"25\\\"\\r\\n                 fxFlex.xs=\\\"25\\\"\\r\\n                 fxFlex.sm=\\\"25\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Goods VAT Code\\\"\\r\\n                                [formControl]=\\\"goodsVatCodeCtrl\\\"\\r\\n                                matTooltip=\\\"VAT Code\\\"\\r\\n                                [panelWidth]=\\\"panelSize\\\"\\r\\n                                (optionSelected)=\\\"vatCodeSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let vatCode of filteredVatCodes\\\"\\r\\n                                    [value]=\\\"vatCode.vatCode\\\">\\r\\n                            {{vatCode.vatCode}} | {{vatCode.vatDescription}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25\\\"\\r\\n                 fxFlex.xs=\\\"25\\\"\\r\\n                 fxFlex.sm=\\\"25\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"descriptionCtrl\\\"\\r\\n                                  [isEditable]=\\\"isInputField\\\"\\r\\n                                  label=\\\"Description\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25\\\"\\r\\n                 fxFlex.xs=\\\"25\\\"\\r\\n                 fxFlex.sm=\\\"25\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"vatAmountForGoodsCtrl\\\"\\r\\n                                  [isEditable]=\\\"isInputField\\\"\\r\\n                                  label=\\\"Vat Amount For Goods\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../../shared/entities/vat.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\n\r\n@Component({\r\n    selector: 'atlas-tax-goods',\r\n    templateUrl: './tax-goods.component.html',\r\n    styleUrls: ['./tax-goods.component.scss'],\r\n})\r\nexport class TaxGoodsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly selectedGoodsTaxCode = new EventEmitter<any>();\r\n\r\n    goodsVatCodeCtrl = new AtlasFormControl('invoiceCreationGoodsVatCode');\r\n    descriptionCtrl = new AtlasFormControl('invoiceCreationVatRate');\r\n    vatAmountForGoodsCtrl = new AtlasFormControl('invoiceCreationVatAmount');\r\n\r\n    filteredVatCodes: Vat[];\r\n\r\n    masterdata: MasterData = new MasterData();\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Vats,\r\n    ];\r\n    isInputField = false;\r\n    defaultVatCode: string;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        if (this.masterdata) {\r\n            this.filteredVatCodes = this.masterdata.vats;\r\n            this.goodsVatCodeCtrl.valueChanges.subscribe((input) => {\r\n                this.filteredVatCodes =\r\n                    this.utilService.filterListforAutocomplete(input,\r\n                        this.masterdata.vats,\r\n                        ['vatCode', 'vatDescription']);\r\n            });\r\n            this.bindConfiguration();\r\n        }\r\n        this.onChanges();\r\n\r\n    }\r\n\r\n    onChanges(): void {\r\n        this.goodsVatCodeCtrl.valueChanges.subscribe((val) => {\r\n            this.selectedGoodsTaxCode.emit(this.goodsVatCodeCtrl.value);\r\n        });\r\n    }\r\n\r\n    setDefaultVatCode(defaultVatCode) {\r\n        this.defaultVatCode = defaultVatCode;\r\n        if (this.defaultVatCode) {\r\n            const vatCode = this.masterdata.vats.filter((option) => option.vatCode === this.defaultVatCode);\r\n            if (vatCode.length > 0) {\r\n                this.goodsVatCodeCtrl.patchValue(vatCode[0].vatCode);\r\n                this.descriptionCtrl.patchValue(vatCode[0].vatDescription);\r\n                this.vatAmountForGoodsCtrl.patchValue(vatCode[0].rate);\r\n            }\r\n        }\r\n    }\r\n\r\n    setDataForTaxGoods(summaryLines: InvoiceSummaryLineRecord[], defaultVATCode) {\r\n        summaryLines.map((record) => {\r\n            if (record.sectionId) {\r\n                this.defaultVatCode = record.vatCode;\r\n            }\r\n        });\r\n        if (!this.defaultVatCode) {\r\n            this.defaultVatCode = defaultVATCode;\r\n        }\r\n        this.setDefaultVatCode(this.defaultVatCode);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            goodsVatCodeCtrl: this.goodsVatCodeCtrl,\r\n            descriptionCtrl: this.descriptionCtrl,\r\n            vatAmountForGoodsCtrl: this.vatAmountForGoodsCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    vatCodeSelected(vatCode: string) {\r\n        const selectedVatCode = this.masterdata.vats.find((vat) => vat.vatCode === vatCode);\r\n        this.descriptionCtrl.patchValue(\r\n            selectedVatCode.vatDescription,\r\n        );\r\n        this.vatAmountForGoodsCtrl.patchValue(\r\n            selectedVatCode.rate,\r\n        );\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        Value of Goods\\r\\n        <button mat-icon-button\\r\\n                [matMenuTriggerFor]=\\\"menu1\\\"\\r\\n                style=\\\"float: right\\\">\\r\\n            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n        </button>\\r\\n        <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </mat-card-title>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"valueOfGoodsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"valueOfGoodsGridRows\\\"\\r\\n                             [columnDefs]=\\\"valueOfGoodsGridColumns\\\"\\r\\n                             [gridOptions]=\\\"valueOfGoodsGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [enableFilter]=\\\"true\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [groupUseEntireRow]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">\\r\\n                Total: <span class=\\\"total-figure-value\\\"> {{debitCreditSign}}{{formatQuantityAndTotal(this.total)}}\\r\\n                    {{this.currencyCode}} </span>\\r\\n            </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".value-of-goods-float-right {\\n  float: right;\\n  margin-top: 16px; }\\n\\n.ag-root-wrapper {\\n  width: 100%; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InvoiceLineRecord } from '../../../../../../../shared/entities/invoice-line-record.entity';\r\nimport { ContractTypes } from '../../../../../../../shared/enums/contract-type.enum';\r\nimport { CostDirectionType } from '../../../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { DiscountBasis } from '../../../../../../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from '../../../../../../../shared/enums/discount-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { ContractsToWashoutInvoice } from '../../../../../../../shared/services/execution/dtos/contracts-to-washout-invoice';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-value-of-goods',\r\n    templateUrl: './value-of-goods.component.html',\r\n    styleUrls: ['./value-of-goods.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class WashoutValueOfGoodsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly totalAmountCalculated = new EventEmitter<any>();\r\n    currencyCode: string = '';\r\n    creditDebit: string = '';\r\n    decimalOptionValue: number = 2;\r\n    valueOfGoodsGridOptions: agGrid.GridOptions = {};\r\n    valueOfGoodsGridColumns: agGrid.ColDef[];\r\n    valueOfGoodsGridRows: ContractsToWashoutInvoice[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    gridContext = {\r\n        gridEditable: false,\r\n    };\r\n    totalQuantity: number = 0;\r\n    total: number = 0;\r\n    formatType: string = 'en-US';\r\n    weightCode: string = '';\r\n    weightedAverage: number = 0;\r\n    invoiceType: number;\r\n    debitCredit: string = '';\r\n    userActiveDirectoryName: string;\r\n    company: string;\r\n    debitCreditSign: string;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private companyManagerService: CompanyManagerService,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n        this.company = this.companyManagerService.getCurrentCompanyId();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.gridContext.gridEditable = false;\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.valueOfGoodsGridColumns;\r\n        this.valueOfGoodsGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    // this will be removed once testing is done for grid autosize\r\n    autoSizeGridHeader() {\r\n        const allColumnIds = [];\r\n        if (this.valueOfGoodsGridColumns) {\r\n            this.valueOfGoodsGridColumns.forEach((columnDefs) => {\r\n                allColumnIds.push(columnDefs.field);\r\n            });\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.valueOfGoodsGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.valueOfGoodsGridColumns = [\r\n            {\r\n                headerName: 'Counter party',\r\n                field: 'counterparty',\r\n                colId: 'counterparty',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.quantity : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n            },\r\n            {\r\n                headerName: 'Premium/Discount',\r\n                field: 'premiumDiscountValue',\r\n                colId: 'premiumDiscountValue',\r\n                valueFormatter: this.formatPremiumDiscount,\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'quantityCode',\r\n                colId: 'quantityCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'price',\r\n                colId: 'price',\r\n                type: 'numericColumn',\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.price : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Currency Code',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'totalInvoiceValue',\r\n                colId: 'totalInvoiceValue',\r\n                type: 'numericColumn',\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.totalInvoiceValue : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                valueGetter: this.getAmount.bind(this),\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    formatPremiumDiscount(params) {\r\n        if (params.data.premiumDiscountType === DiscountTypes.Premium) {\r\n            return '+' + params.data.premiumDiscountValue;\r\n        } else if (params.data.premiumDiscountType === DiscountTypes.Discount) {\r\n            return '-' + params.data.premiumDiscountValue;\r\n        } else {\r\n            return params.data.premiumDiscountValue;\r\n        }\r\n    }\r\n\r\n    selectedWashoutContracts(contracts: ContractsToWashoutInvoice[]) {\r\n        if (contracts.length > 0) {\r\n            this.initializeGridColumns();\r\n            this.valueOfGoodsGridRows = contracts;\r\n            this.calculateTotal(contracts);\r\n        }\r\n    }\r\n\r\n    getAmount(params): number {\r\n        if (params.data.premiumDiscountType === DiscountTypes.Premium) {\r\n            params.data.totalInvoiceValue = this.setInvoiceValueForPremium(params.data);\r\n        } else if (params.data.premiumDiscountType === DiscountTypes.Discount) {\r\n            params.data.totalInvoiceValue = this.setInvoiceValueForDiscount(params.data);\r\n        }\r\n        this.calculateTotal(this.valueOfGoodsGridRows);\r\n        return (params.data.totalInvoiceValue);\r\n    }\r\n    private setInvoiceValueForDiscount(params: ContractsToWashoutInvoice): number {\r\n        if (params) {\r\n            if (params.quantity && params.price &&\r\n                params.priceConversionFactor && params.weightConversionFactor) {\r\n                if (params.premiumDiscountBasis === DiscountBasis.Rate) {\r\n                    return params.quantity *\r\n                        (params.price - params.premiumDiscountValue) *\r\n                        params.priceConversionFactor * params.weightConversionFactor;\r\n                } else if (params.premiumDiscountBasis === DiscountBasis.Percent) {\r\n                    return params.quantity *\r\n                        (params.price * (1 - (params.premiumDiscountValue / 100))) *\r\n                        params.priceConversionFactor * params.weightConversionFactor;\r\n                } else {\r\n                    return params.quantity * params.price *\r\n                        params.priceConversionFactor * params.weightConversionFactor;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private setInvoiceValueForPremium(params: ContractsToWashoutInvoice): number {\r\n        if (params) {\r\n            if (params.premiumDiscountBasis === DiscountBasis.Rate) {\r\n                return params.quantity *\r\n                    (params.price + params.premiumDiscountValue) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else if (params.premiumDiscountBasis === DiscountBasis.Percent) {\r\n                return params.quantity *\r\n                    (params.price * (1 + (params.premiumDiscountValue / 100))) *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            } else {\r\n                return params.quantity * params.price *\r\n                    params.priceConversionFactor * params.weightConversionFactor;\r\n            }\r\n        }\r\n    }\r\n\r\n    decimalFormatter(input, decimalOption: number, format: string) {\r\n        const formattedInput = new Intl.NumberFormat(format,\r\n            { minimumFractionDigits: decimalOption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    decimalOptionSelected(decimalOption: number) {\r\n        this.decimalOptionValue = decimalOption;\r\n    }\r\n\r\n    formatQuantityAndTotal(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    calculateTotal(contracts: ContractsToWashoutInvoice[]) {\r\n        this.totalQuantity = 0;\r\n        this.total = 0;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                this.currencyCode = contract.currencyCode;\r\n                const totalValue = contract.totalInvoiceValue;\r\n                this.totalQuantity = this.totalQuantity + (contract.quantity - contract.invoicedQuantity);\r\n                if (contract.contractType === ContractTypes.Purchase) {\r\n                    totalCR = totalCR + totalValue;\r\n                } else {\r\n                    totalDR = totalDR + totalValue;\r\n                }\r\n            },\r\n        );\r\n        if (totalCR > totalDR) {\r\n            this.total = totalCR - totalDR;\r\n            this.creditDebit = 'Cr';\r\n        } else {\r\n            this.total = totalDR - totalCR;\r\n            this.creditDebit = 'Dr';\r\n        }\r\n        this.debitCreditSign = CostSigns[CostDirectionType[this.creditDebit]];\r\n        this.totalAmountCalculated.emit({\r\n            amount: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            creditDebit: this.creditDebit,\r\n            currencyCode: this.currencyCode,\r\n        });\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const valueOfGoods = entity as InvoiceRecord;\r\n        valueOfGoods.currency = this.currencyCode;\r\n        valueOfGoods.totalGoodsValue = this.totalQuantity;\r\n        valueOfGoods.totalInvoiceValue = this.total;\r\n        if (valueOfGoods.invoiceLines && valueOfGoods.invoiceLines.length > 0) {\r\n            const invoiceLines: InvoiceLineRecord[] = this.getInvoiceLines(valueOfGoods.invoiceLines.length);\r\n            invoiceLines.forEach((line) => {\r\n                valueOfGoods.invoiceLines.push(line);\r\n            });\r\n        } else {\r\n            valueOfGoods.invoiceLines = this.getInvoiceLines();\r\n        }\r\n        return valueOfGoods;\r\n    }\r\n\r\n    getInvoiceLines(index: number = 0): InvoiceLineRecord[] {\r\n        const invoiceLines: InvoiceLineRecord[] = [];\r\n        this.valueOfGoodsGridRows.map((data) => {\r\n            const invoiceLine = new InvoiceLineRecord();\r\n            invoiceLine.lineNumber = index + 1;\r\n            invoiceLine.sectionID = data.sectionId;\r\n            invoiceLine.price = data.price;\r\n            invoiceLine.currencyCode = data.currencyCode;\r\n            invoiceLine.lineAmount = (data.price * (data.quantity - data.invoicedQuantity));\r\n            invoiceLine.quantity = (data.quantity - data.invoicedQuantity).toString();\r\n            invoiceLine.invoicePercent = ((data.quantity - data.invoicedQuantity) / Number(data.quantity)) * 100;\r\n            invoiceLine.contractType = data.contractType;\r\n            invoiceLines.push(invoiceLine);\r\n            index++;\r\n        });\r\n        return invoiceLines;\r\n    }\r\n    /* Summary redirection from grid */\r\n\r\n    contractToBeSelectedFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        if (summaryRecord.summaryLines) {\r\n            this.initializeGridColumnsFromSummary();\r\n            this.valueOfGoodsGridRows = this.getContractsForSummary(summaryRecord.summaryLines.filter(\r\n                (filteredSummaryLine) => filteredSummaryLine.costId == null),\r\n                summaryRecord.currency, summaryRecord.counterparty);\r\n\r\n            if (this.valueOfGoodsGridRows.length > 0) {\r\n                this.calculateTotalForSummary(summaryRecord);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateTotalForSummary(summaryRecord: InvoiceSummaryRecord) {\r\n        const invoiceRecord: InvoiceSummaryRecord = summaryRecord;\r\n        this.totalQuantity = 0;\r\n        this.total = 0;\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        invoiceRecord.summaryLines.forEach(\r\n            (contract) => {\r\n                this.currencyCode = invoiceRecord.currency;\r\n                const totalValue: number = contract.price * Number(contract.quantity);\r\n                this.totalQuantity = this.totalQuantity + Number(contract.quantity);\r\n                if (contract.contractType === ContractTypes.Purchase) {\r\n                    totalCR = totalCR + totalValue;\r\n                } else {\r\n                    totalDR = totalDR + totalValue;\r\n                }\r\n            },\r\n        );\r\n        if (totalCR > totalDR) {\r\n            this.total = totalCR - totalDR;\r\n            this.creditDebit = 'Cr';\r\n        } else {\r\n            this.total = totalDR - totalCR;\r\n            this.creditDebit = 'Dr';\r\n        }\r\n        this.debitCreditSign = CostSigns[CostDirectionType[this.creditDebit]];\r\n        this.totalAmountCalculated.emit({\r\n            amount: this.total,\r\n            decimalOption: this.decimalOptionValue,\r\n            creditDebit: this.creditDebit,\r\n            currencyCode: this.currencyCode,\r\n        });\r\n    }\r\n\r\n    initializeGridColumnsFromSummary() {\r\n        this.valueOfGoodsGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.valueOfGoodsGridColumns = [\r\n            {\r\n                headerName: 'Counter party',\r\n                field: 'counterparty',\r\n                colId: 'counterparty',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Commodity',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'quantityCode',\r\n                colId: 'quantityCode',\r\n                hide: false,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'price',\r\n                colId: 'price',\r\n                hide: false,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n                aggFunc: 'sum',\r\n                enableValue: true,\r\n            },\r\n            {\r\n                headerName: 'Currency Code',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'totalInvoiceValue',\r\n                colId: 'totalInvoiceValue',\r\n                hide: false,\r\n                valueFormatter: this.decimalFormatterForSummary.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    decimalFormatterForSummary(params) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOptionValue }).format(params.value);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    getContractsForSummary(summaryLines, currency: string, counterparty: string) {\r\n        const contracts: ContractsToWashoutInvoice[] = [];\r\n        summaryLines.map((record) => {\r\n            if (record.sectionId) {\r\n                const contract = new ContractsToWashoutInvoice();\r\n                contract.counterparty = counterparty;\r\n                contract.contractReference = record.contractReference;\r\n                contract.principalCommodity = record.principalCommodity;\r\n                contract.quantity = record.quantity;\r\n                contract.quantityCode = record.weightCode;\r\n                contract.price = record.price;\r\n                contract.currencyCode = currency;\r\n                contract.totalInvoiceValue = record.lineAmount;\r\n                contracts.push(contract);\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = 'Value of Good';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'Value of Good';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"invoice-creation-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            Total Amount\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             class=\\\"total-amount-content\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Invoice Total Without Taxes: <span\\r\\n                      class=\\\"total-figure-value\\\">{{costDirectionSign}}{{formatAmount(amount)}}\\r\\n                    {{currencyCode}}</span> </mat-card-subtitle>\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Total Taxes: <span\\r\\n                      class=\\\"total-figure-value\\\">{{taxCostDirectionSign}}{{formatAmount(this.taxTotal)}}\\r\\n                    {{currencyCode}}</span> </mat-card-subtitle>\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Total Invoice Value: Amount to {{invoiceLabel}} <span\\r\\n                      class=\\\"total-figure-value\\\">{{totalCostDirectionSign}}{{formatAmount(this.total)}}\\r\\n                    {{currencyCode}}</span> </mat-card-subtitle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"mat-card-content {\\n  height: 50%; }\\n  mat-card-content .total-amount-content {\\n    height: 100%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { CostDirectionType } from '../../../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostSigns } from '../../../../../../../shared/enums/cost-sign.enum';\r\nimport { InvoicePaymentType } from '../../../../../../../shared/enums/invoice-payment-type';\r\nimport { InvoiceRecord } from '../../../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { InvoiceSummaryLineRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-line-record';\r\nimport { InvoiceSummaryRecord } from '../../../../../../../shared/services/execution/dtos/invoice-summary-record';\r\nimport { TaxRecord } from '../../../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-washout-total',\r\n    templateUrl: './washout-total.component.html',\r\n    styleUrls: ['./washout-total.component.scss'],\r\n})\r\nexport class WashoutTotalComponent extends BaseFormComponent implements OnInit {\r\n    total: number = 0;\r\n    amount: number = 0;\r\n    taxTotal: number = 0;\r\n    currencyCode: string;\r\n    decimalOption: number;\r\n    formatType: string = 'en-US';\r\n    defaultDecimalOption: number = 2;\r\n    costDirectionDisplay: string;\r\n    totalCostDirection: string;\r\n    debit: string = 'Dr';\r\n    credit: string = 'Cr';\r\n    costDirections: CostDirection[];\r\n    costDirectionSign: string;\r\n    totalCostDirectionSign: string;\r\n    taxCostDirectionSign: string = CostSigns[CostDirections.Payable];\r\n    invoiceLabel: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n    }\r\n\r\n    formatAmount(input: number) {\r\n        const formattedInput = new Intl.NumberFormat(this.formatType,\r\n            { minimumFractionDigits: this.decimalOption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    setValuesForTotalWithoutTax(model: InvoiceRecord) {\r\n        this.amount = Math.abs(model.totalInvoiceValue);\r\n        this.decimalOption = model.decimalOption;\r\n        this.currencyCode = model.currency;\r\n        if (model.costDirection === CostDirections.Payable) {\r\n            this.costDirectionDisplay = this.credit;\r\n        } else if (model.costDirection === CostDirections.Receivable) {\r\n            this.costDirectionDisplay = this.debit;\r\n        }\r\n        this.costDirectionSign = CostSigns[model.costDirection];\r\n        if (this.amount >= 0) {\r\n            this.setTotalForGoodCost();\r\n        }\r\n    }\r\n\r\n    setTotalForGoodCost() {\r\n        if (this.costDirectionDisplay) {\r\n            if (this.costDirectionDisplay === this.credit) {\r\n                this.total = this.taxTotal + this.amount;\r\n                this.totalCostDirection = this.credit;\r\n            } else {\r\n                this.total = this.amount - this.taxTotal;\r\n                this.totalCostDirection = this.debit;\r\n            }\r\n            this.invoiceLabel = InvoicePaymentType[CostDirectionType[this.costDirectionDisplay]];\r\n            this.totalCostDirectionSign = CostSigns[CostDirectionType[this.costDirectionDisplay]];\r\n        } else {\r\n            this.total = this.taxTotal;\r\n            this.totalCostDirection = this.credit;\r\n            this.totalCostDirectionSign = CostSigns[CostDirections.Payable];\r\n            this.invoiceLabel = InvoicePaymentType[CostDirections.Payable];\r\n        }\r\n    }\r\n\r\n    setValuesForTotalTax(model: TaxRecord) {\r\n        this.taxTotal = Math.abs(model.amount);\r\n        this.decimalOption = model.decimalOption;\r\n        this.currencyCode = model.currencyCode;\r\n        this.total = this.taxTotal + this.amount;\r\n        if (this.taxTotal) {\r\n            this.setTotalForGoodCost();\r\n        }\r\n    }\r\n\r\n    setValuesForTotalFromGrid(summaryRecord: InvoiceSummaryRecord) {\r\n        const invoiceLines = summaryRecord.summaryLines as InvoiceSummaryLineRecord[];\r\n        let total: number = 0;\r\n        invoiceLines.forEach((tax) => {\r\n            total = total + tax.vatAmount;\r\n        });\r\n        this.taxTotal = total;\r\n        this.decimalOption = this.defaultDecimalOption;\r\n        this.currencyCode = summaryRecord.currency;\r\n        this.amount = summaryRecord.totalInvoiceValue;\r\n        this.calculateCostDirection(invoiceLines);\r\n        this.setTotalForGoodCost();\r\n    }\r\n\r\n    calculateCostDirection(contracts: InvoiceSummaryLineRecord[]) {\r\n        let totalCR: number = 0;\r\n        let totalDR: number = 0;\r\n        let costDirectionId: number;\r\n        contracts.forEach(\r\n            (contract) => {\r\n                costDirectionId = this.getCostDirectionIdFromCode(contract.costDirection);\r\n                if (costDirectionId === CostDirections.Payable) {\r\n                    totalCR = totalCR + contract.lineAmount;\r\n                } else {\r\n                    totalDR = totalDR + contract.lineAmount;\r\n                }\r\n            },\r\n        );\r\n        this.costDirectionDisplay = (totalCR > totalDR) ? CostDirectionType[CostDirectionType.Cr] : CostDirectionType[CostDirectionType.Dr];\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string): number {\r\n        if (code) {\r\n            const selectedCostDirection = this.costDirections.find(\r\n                (e) => e.costDirection === code);\r\n            return selectedCostDirection.costDirectionId;\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: InvoiceRecord): InvoiceRecord {\r\n        const invoiceDetails = entity;\r\n        invoiceDetails.costDirection = (this.totalCostDirectionSign === CostSigns[CostDirections.Payable])\r\n            ? CostDirections.Payable : CostDirections.Receivable;\r\n        return invoiceDetails;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxLayoutGap=\\\"2%\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxFlex=\\\"49%\\\">\\r\\n            <atlas-selection #washoutSelectionComponent\\r\\n                             (invoiceDateChanged)=\\\"invoiceDateChanged($event)\\\"\\r\\n                             fxFlex=\\\"100%\\\">\\r\\n            </atlas-selection>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxFlex=\\\"49%\\\">\\r\\n            <atlas-invoice-document #invoiceDocumentComponent\\r\\n                                    (documentTemplateSelected)=\\\"onDocumentTemplateSelected($event)\\\"\\r\\n                                    fxFlex=\\\"100%\\\">\\r\\n            </atlas-invoice-document>\\r\\n        </div>\\r\\n    </div>\\r\\n    <atlas-value-of-goods #valueOfGoodsComponent\\r\\n                          (totalAmountCalculated)=\\\"ontotalAmountCalculated($event)\\\">\\r\\n    </atlas-value-of-goods>\\r\\n    <atlas-additional-cost #additionalCostComponent\\r\\n                           [selectedGoodsVat]=\\\"selectedGoodsVatCode\\\"\\r\\n                           (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\"\\r\\n                           (narrativeLength)=\\\"onNarrativeValueChange($event)\\\">\\r\\n    </atlas-additional-cost>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutGap=\\\"2%\\\">\\r\\n        <atlas-tax-goods fxFlex=\\\"50%\\\"\\r\\n                         #taxGoodsComponent\\r\\n                         (selectedGoodsTaxCode)=\\\"onChangeGoodsTaxCode($event)\\\">\\r\\n        </atlas-tax-goods>\\r\\n        <atlas-payments #washoutPaymentComponent\\r\\n                        fxFlex=\\\"50%\\\">\\r\\n        </atlas-payments>\\r\\n\\r\\n    </div>\\r\\n    <atlas-tax-costs fxFlex=\\\"50%\\\"\\r\\n                     (totalCostTaxCalculated)=\\\"onTotalCostTaxCalculated($event)\\\"\\r\\n                     #taxCostsComponent>\\r\\n    </atlas-tax-costs>\\r\\n    <atlas-washout-total class=\\\"washout-total-amount\\\"\\r\\n                         #totalComponent></atlas-washout-total>\\r\\n</div>\"","module.exports = \".washout-total-amount {\\n  width: 100%; }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CostDirectionType } from '../../../../../shared/enums/cost-direction-type.enum';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { ContractsToWashoutInvoice } from '../../../../../shared/services/execution/dtos/contracts-to-washout-invoice';\r\nimport { InvoiceRecord } from '../../../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { AdditionalCostComponent } from './components/additional-cost/additional-cost.component';\r\nimport { InvoiceDocumentComponent } from './components/invoice-document/invoice-document.component';\r\nimport { WashoutPaymentsComponent } from './components/payments/payments.component';\r\nimport { SelectionComponent } from './components/selection/selection.component';\r\nimport { TaxCostsComponent } from './components/tax-costs/tax-costs.component';\r\nimport { TaxGoodsComponent } from './components/tax-goods/tax-goods.component';\r\nimport { WashoutValueOfGoodsComponent } from './components/value-of-goods/value-of-goods.component';\r\nimport { WashoutTotalComponent } from './components/washout-total/washout-total.component';\r\n\r\n@Component({\r\n    selector: 'atlas-washout-working-page',\r\n    templateUrl: './washout-working-page.component.html',\r\n    styleUrls: ['./washout-working-page.component.scss'],\r\n})\r\nexport class WashoutWorkingPageComponent extends BaseFormComponent implements OnInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n    @ViewChild('additionalCostComponent') additionalCostComponent: AdditionalCostComponent;\r\n    @ViewChild('invoiceDocumentComponent') invoiceDocumentComponent: InvoiceDocumentComponent;\r\n    @ViewChild('washoutPaymentComponent') washoutPaymentComponent: WashoutPaymentsComponent;\r\n    @ViewChild('washoutSelectionComponent') washoutSelectionComponent: SelectionComponent;\r\n    @ViewChild('valueOfGoodsComponent') valueOfGoodsComponent: WashoutValueOfGoodsComponent;\r\n    @ViewChild('taxGoodsComponent') taxGoodsComponent: TaxGoodsComponent;\r\n    @ViewChild('taxCostsComponent') taxCostsComponent: TaxCostsComponent;\r\n    @ViewChild('totalComponent') totalComponent: WashoutTotalComponent;\r\n\r\n    @Output() readonly valueOfGoodsRecord = new EventEmitter<any>();\r\n    @Output() readonly totalCostAndVatCode = new EventEmitter<number>();\r\n    @Output() readonly totalCostTaxCalculated = new EventEmitter<number>();\r\n    @Output() readonly isDocumentTemplateSelected = new EventEmitter<boolean>();\r\n    @Output() readonly narrativeLength = new EventEmitter<boolean>();\r\n\r\n    invoiceWashoutWorkingFormGroup: FormGroup;\r\n    invoiceTypeId: number;\r\n    totalData: TaxRecord;\r\n    totalRecordForWashout: InvoiceRecord = new InvoiceRecord();\r\n    valueOfGoodsTotal: number = 0;\r\n    valueOfGoodsDecimalOption: number = 2;\r\n    valueOfGoodsCurrency: string;\r\n    valueOfGoodsCreditDebit: string;\r\n    additionalCostRate: number = 0;\r\n    additionalCostCostDirection: string;\r\n    selectedGoodsVatCode: string;\r\n    valueOfGoodsCostDirection: string;\r\n    isSave: boolean = false;\r\n\r\n    constructor(private executionService: ExecutionService,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.invoiceWashoutWorkingFormGroup = this.formBuilder.group({\r\n            invoiceDocumentComponent: this.invoiceDocumentComponent.getFormGroup(),\r\n            washoutPaymentComponent: this.washoutPaymentComponent.getFormGroup(),\r\n            washoutSelectionComponent: this.washoutSelectionComponent.getFormGroup(),\r\n            valueOfGoodsComponent: this.valueOfGoodsComponent.getFormGroup(),\r\n            additionalCostComponent: this.additionalCostComponent.getFormGroup(),\r\n            taxGoodsComponent: this.taxGoodsComponent.getFormGroup(),\r\n            taxCostsComponent: this.taxCostsComponent.getFormGroup(),\r\n            totalComponent: this.totalComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.invoiceDocumentComponent,\r\n            this.washoutPaymentComponent,\r\n            this.washoutSelectionComponent,\r\n            this.valueOfGoodsComponent,\r\n            this.additionalCostComponent,\r\n            this.taxGoodsComponent,\r\n            this.taxCostsComponent,\r\n            this.totalComponent,\r\n        );\r\n    }\r\n\r\n    populateEntity(model: InvoiceRecord): InvoiceRecord {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n    contractsSelected(contracts: ContractsToWashoutInvoice[]) {\r\n        this.washoutSelectionComponent.selectedWashoutContracts(contracts);\r\n        this.valueOfGoodsComponent.selectedWashoutContracts(contracts);\r\n        this.invoiceDocumentComponent.selectedWashoutContracts(contracts);\r\n        if (contracts && contracts.length > 0) {\r\n            this.additionalCostComponent.setDefaultCurrency(contracts[0].currencyCode);\r\n        }\r\n    }\r\n\r\n    pricingAndDecimalOptionSelected(pricingOption: number, decimalOption: number) {\r\n        this.valueOfGoodsComponent.decimalOptionSelected(decimalOption);\r\n    }\r\n\r\n    onTotalCostTaxCalculated(model) {\r\n        this.totalData = model;\r\n        this.calculateTaxTotal(model);\r\n        this.totalCostTaxCalculated.emit(model);\r\n    }\r\n\r\n    calculateTaxTotal(model) {\r\n        this.totalComponent.setValuesForTotalTax(model);\r\n    }\r\n\r\n    calculateTotalWithoutTax() {\r\n        this.totalRecordForWashout.totalInvoiceValue = this.additionalCostRate + this.valueOfGoodsTotal;\r\n        this.totalRecordForWashout.decimalOption = this.valueOfGoodsDecimalOption;\r\n        this.totalRecordForWashout.currency = this.valueOfGoodsCurrency;\r\n        if (this.valueOfGoodsCostDirection === this.additionalCostCostDirection) {\r\n            this.totalRecordForWashout.costDirection = CostDirections[this.additionalCostCostDirection];\r\n        } else {\r\n            if (Math.abs(this.additionalCostRate) > Math.abs(this.valueOfGoodsTotal)) {\r\n                this.totalRecordForWashout.costDirection = CostDirections[this.additionalCostCostDirection];\r\n            } else {\r\n                this.totalRecordForWashout.costDirection = CostDirections[this.valueOfGoodsCostDirection];\r\n            }\r\n        }\r\n\r\n        this.totalComponent.setValuesForTotalWithoutTax(this.totalRecordForWashout);\r\n    }\r\n\r\n    onChangeCostContract(model) {\r\n        if (model) {\r\n            this.additionalCostRate = model.rate;\r\n            this.additionalCostCostDirection = model.costDirection;\r\n            if (this.additionalCostCostDirection === CostDirections[CostDirections.Payable]) {\r\n                this.additionalCostRate = -(this.additionalCostRate);\r\n            }\r\n            this.taxCostsComponent.getTaxesForSelectedVat(model);\r\n            this.totalCostAndVatCode.emit(model);\r\n            this.calculateTotalWithoutTax();\r\n        }\r\n    }\r\n\r\n    ontotalAmountCalculated(model) {\r\n        this.valueOfGoodsTotal = model.amount;\r\n        this.valueOfGoodsDecimalOption = model.decimalOption;\r\n        this.valueOfGoodsCurrency = model.currencyCode;\r\n        this.valueOfGoodsCostDirection = CostDirections[CostDirectionType[model.creditDebit]];\r\n        this.valueOfGoodsRecord.emit(model);\r\n        if (this.valueOfGoodsCostDirection === CostDirections[CostDirections.Payable]) {\r\n            this.valueOfGoodsTotal = -(this.valueOfGoodsTotal);\r\n        }\r\n        this.calculateTotalWithoutTax();\r\n    }\r\n\r\n    onChangeGoodsTaxCode(vatCode: string) {\r\n        this.selectedGoodsVatCode = vatCode;\r\n    }\r\n\r\n    onDocumentTemplateSelected(value) {\r\n        this.isDocumentTemplateSelected.emit(value);\r\n    }\r\n\r\n    invoiceDateChanged(documentTypeValue: Date) {\r\n        this.washoutPaymentComponent.invoiceDateChanged = documentTypeValue;\r\n    }\r\n\r\n    onNarrativeValueChange(maxLength: boolean) {\r\n        this.narrativeLength.emit(maxLength);\r\n    }\r\n\r\n    validateCostGrid() {\r\n        // calling the costgrid component to set the required field validation\r\n        return this.additionalCostComponent.validate();\r\n    }\r\n\r\n    getWashoutRecords() {\r\n        const washoutRecordForBankingOption = new InvoiceRecord();\r\n        washoutRecordForBankingOption.currency = this.totalComponent.currencyCode;\r\n        washoutRecordForBankingOption.counterpartyCode = this.washoutSelectionComponent.counterpartyCtrl.value;\r\n\r\n        (this.totalComponent.totalCostDirection === CostDirectionType[CostDirectionType.Cr]) ?\r\n            washoutRecordForBankingOption.costDirection = CostDirections.Payable :\r\n            washoutRecordForBankingOption.costDirection = CostDirections.Receivable;\r\n        return washoutRecordForBankingOption;\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"washoutInvoiceFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Contract Selection Screen</ng-template>\\r\\n                <atlas-washout-selection #washoutSelectionComponent\\r\\n                                         (washoutContractsSelected)=\\\"onWashoutContractsSelected($event)\\\"\\r\\n                                         (counterPartySelected)=\\\"onCounterPartySelected($event)\\\">\\r\\n                </atlas-washout-selection>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onMoveButtonClicked(invoicingSteps.workingStep)\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step [completed]=\\\"isCompleted\\\">\\r\\n                <ng-template matStepLabel>Invoice Working Page</ng-template>\\r\\n                <atlas-washout-working-page #washoutWorkingPageComponent\\r\\n                                            (isDocumentTemplateSelected)=\\\"onDocumentTemplateSelected($event)\\\"\\r\\n                                            (totalCostTaxCalculated)=\\\"ontotalAmountCalculated($event)\\\"\\r\\n                                            (totalCostAndVatCode)=\\\"onChangeCostContract($event)\\\"\\r\\n                                            (valueOfGoodsRecord)=\\\"onChangeValueOfGoods($event)\\\"\\r\\n                                            (narrativeLength)=\\\"onNarrativeValueChanged($event)\\\">\\r\\n                </atlas-washout-working-page>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"end start\\\">\\r\\n                    <mat-slide-toggle *ngIf=\\\"hasTemplate\\\"\\r\\n                                      [formControl]=\\\"previewDocumentCtrl\\\">Preview Document </mat-slide-toggle>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            [disabled]=\\\"isLoading\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start end \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onBackButtonClicked(invoicingSteps.invoiceCreationStep)\\\"\\r\\n                                    [disabled]=\\\"isLoading\\\">\\r\\n                                BACK\\r\\n                            </button>\\r\\n                            <div\\r\\n                                 *ifAuthorized=\\\"'Invoices.InvoiceCreation', company:company, level: PermissionLevels.ReadWrite\\\">\\r\\n                                <button mat-raised-button\\r\\n                                        (click)=\\\"onOpenDialogOnPreviewOrSaveClicked()\\\"\\r\\n                                        [disabled]=\\\"isLoading\\\">\\r\\n                                    {{ previewDocumentCtrl.value ? \\\"Preview and Invoice\\\" : \\\"Create Invoice\\\" }}\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Invoice Summary Page</ng-template>\\r\\n                <atlas-washout-summary #washoutSummaryComponent\\r\\n                                       [invoiceTaxContracts]=\\\"taxRecords\\\"\\r\\n                                       [invoiceTaxTotal]=\\\"totalData\\\"\\r\\n                                       [invoiceCostContracts]=\\\"invoiceCostContracts\\\"\\r\\n                                       [invoiceGoodsContracts]=\\\"invoiceGoodsContracts\\\"\\r\\n                                       [goodsTaxCode]=\\\"goodsTaxCode\\\"\\r\\n                                       [filteredCompanyBankAccounts]=\\\"filteredCompanyBankAccounts\\\"\\r\\n                                       [isCreationMode]=isCreationMode>\\r\\n                </atlas-washout-summary>\\r\\n                <div class=\\\"btn-container\\\"\\r\\n                     *ngIf=\\\"!isFromGrid\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxAlignLayout=\\\"start end\\\">\\r\\n                        <span class=\\\"fill-space\\\"></span>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"newSearchButtonClicked()\\\">\\r\\n                            New Search\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"nextInvoiceButtonClicked(stepper)\\\">\\r\\n                            Next Invoice\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\"","module.exports = \".mat-column-selection {\\n  overflow: initial; }\\n\\n.mat-button-toggle {\\n  text-align: center;\\n  min-width: 88px; }\\n\\nlabel {\\n  font-size: 14px;\\n  font-family: Roboto;\\n  color: black; }\\n\\nlabel.no-data-message {\\n  font-weight: bold; }\\n\\n.highlight {\\n  background: #A7C5E2; }\\n\\n.label-search {\\n  font-size: 11px;\\n  font-family: Roboto;\\n  color: rgba(0, 0, 0, 0.54); }\\n\\n.label-summary {\\n  font-weight: bold; }\\n\\nmat-radio-button {\\n  margin: 5px; }\\n\\n.mat-stepper-horizontal {\\n  background-color: transparent; }\\n\"","import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { InvoiceSetupResult } from '../../../shared/dtos/invoice-setup-result';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { CompanyBankAccounts } from '../../../shared/entities/company-bankaccounts.entity';\r\nimport { Counterparty } from '../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { CostDirections } from '../../../shared/enums/cost-direction.enum';\r\nimport { InvoiceTypes } from '../../../shared/enums/invoice-type.enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { DocumentPopupService } from '../../../shared/services/document-popup.service';\r\nimport { ContractsToCostInvoice } from '../../../shared/services/execution/dtos/contracts-to-cost-invoice';\r\nimport { ContractsToWashoutInvoice } from '../../../shared/services/execution/dtos/contracts-to-washout-invoice';\r\nimport { CostInvoiceRecord } from '../../../shared/services/execution/dtos/cost-invoice-record';\r\nimport { InvoiceRecord } from '../../../shared/services/execution/dtos/invoice-record';\r\nimport { TaxRecord } from '../../../shared/services/execution/dtos/tax-record';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../shared/services/http-services/masterdata.service';\r\nimport { PreaccountingService } from '../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../shared/services/util.service';\r\nimport { BankAccountDialogComponent } from '../dialog-boxes/bank-account-dialog/bank-account-dialog.component';\r\nimport { InvoicingBaseFormComponent } from '../invoicing-base-form/invoicing-base-form.component';\r\nimport { WashoutSelectionComponent } from './components/washout-selection/washout-selection.component';\r\nimport { WashoutSummaryComponent } from './components/washout-summary/washout-summary.component';\r\nimport { WashoutWorkingPageComponent } from './components/washout-working-page/washout-working-page.component';\r\n\r\n@Component({\r\n    selector: 'atlas-washout',\r\n    templateUrl: './washout.component.html',\r\n    styleUrls: ['./washout.component.scss'],\r\n})\r\nexport class WashoutComponent extends InvoicingBaseFormComponent implements OnInit {\r\n    @ViewChild('washoutSelectionComponent') washoutSelectionComponent: WashoutSelectionComponent;\r\n    @ViewChild('washoutWorkingPageComponent') washoutWorkingPageComponent: WashoutWorkingPageComponent;\r\n    @ViewChild('washoutSummaryComponent') washoutSummaryComponent: WashoutSummaryComponent;\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n\r\n    filteredCompanyBankAccounts: CompanyBankAccounts[] = [];\r\n    currencySelected: string;\r\n    selectedSupplier: Counterparty;\r\n    masterData: MasterData;\r\n    washoutSelectedValues: InvoiceRecord;\r\n    totalCostDirection: string;\r\n    invoiceSetUpData: InvoiceSetupResult;\r\n    invoiceCostContracts: ContractsToCostInvoice[];\r\n    invoiceGoodsContracts: ContractsToWashoutInvoice[];\r\n    goodsTaxCode: string;\r\n    additionalCostData: CostInvoiceRecord;\r\n    valueOfGoodsData: InvoiceRecord;\r\n    washoutInvoiceFormGroup: FormGroup;\r\n    taxRecords: TaxRecord[];\r\n    totalData: TaxRecord;\r\n    InvoiceTypes = InvoiceTypes;\r\n    company: string;\r\n    invoiceTypeId: number;\r\n    currentStep: number = 0;\r\n    invoiceLabel: string;\r\n    selectedInvoiceId: number;\r\n    PermissionLevels = PermissionLevels;\r\n    isCostNarrativeMaxLength: boolean;\r\n    isFromGrid: boolean = false;\r\n    invoicingSteps: { [key: string]: number } = {\r\n        templateStep: -1,\r\n        invoiceCreationStep: 0,\r\n        workingStep: 1,\r\n        summaryStep: 2,\r\n    };\r\n    isValid: boolean = false;\r\n    previewDocumentCtrl = new AtlasFormControl('previewDocumentCtrl');\r\n    isCreateInvoiceButtonClicked = false;\r\n    isCreationMode: boolean = true;\r\n    isSaveClicked: boolean = false;\r\n    isCompleted: boolean = false;\r\n\r\n    constructor(\r\n        protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        protected documentService: DocumentService,\r\n        @Inject(WINDOW) protected window: Window,\r\n        protected utilService: UtilService,\r\n        protected executionService: ExecutionService,\r\n        protected masterdataService: MasterdataService,\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected preaccountingService: PreaccountingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected documentPopupService: DocumentPopupService) {\r\n        super(dialog, router, companyManager, snackbarService, documentService, window, utilService,\r\n            executionService, route, formBuilder, preaccountingService, formConfigurationProvider, documentPopupService);\r\n        this.invoiceTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('invoiceTypeId')));\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.selectedInvoiceId = params['invoiceId'];\r\n            this.isFromGrid = params['isFromGrid'];\r\n        });\r\n        if (this.isFromGrid) {\r\n            this.launchSelectedInvoiceSummary(this.selectedInvoiceId);\r\n        }\r\n        this.washoutInvoiceFormGroup = this.formBuilder.group({\r\n            washoutSelectionComponent: this.washoutSelectionComponent.getFormGroup(),\r\n            washoutWorkingPageComponent: this.washoutWorkingPageComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.washoutSelectionComponent, this.washoutWorkingPageComponent);\r\n        this.getInvoiceSetupByCompany();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if ((this.washoutSelectionComponent.invoiceSelectionFormGroup.dirty || this.washoutWorkingPageComponent.invoiceWashoutWorkingFormGroup.dirty) && (this.isSaveClicked === false)) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    getInvoiceSetupByCompany() {\r\n        this.subscriptions.push(this.executionService.getInvoiceSetupByCompany()\r\n            .subscribe((data) => {\r\n                this.invoiceSetUpData = data;\r\n            }));\r\n    }\r\n\r\n    launchSelectedInvoiceSummary(selectedInvoiceId) {\r\n        this.subscriptions.push(this.executionService.\r\n            getInvoiceById(selectedInvoiceId)\r\n            .subscribe((data) => {\r\n                this.stepper.selectedIndex = 4;\r\n                // this.invoiceSummaryStep.populateInvoiceRecordFromGrid(data);\r\n                this.invoiceLabel = data.invoiceCode;\r\n            }));\r\n    }\r\n\r\n    beforeInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n        this.updateInvoiceLines(invoiceRecord);\r\n    }\r\n\r\n    afterInvoiceActions(invoiceRecord: InvoiceRecord) {\r\n\r\n        (this.selectedbankAccountId) ? invoiceRecord.bankAccountId = this.selectedbankAccountId : null;\r\n        this.washoutSummaryComponent.populateInvoiceRecord(invoiceRecord);\r\n        this.stepper.next();\r\n    }\r\n\r\n    updateInvoiceLines(invoiceRecord: InvoiceRecord) {\r\n        invoiceRecord.invoiceLines.forEach(\r\n            (invoiceLine) => {\r\n                if (!invoiceLine.vatCode) {\r\n                    invoiceLine.vatCode = (invoiceLine.costID) ?\r\n                        this.washoutWorkingPageComponent.additionalCostComponent.costVatCodeCtrl.value :\r\n                        this.washoutWorkingPageComponent.taxGoodsComponent.goodsVatCodeCtrl.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    onNarrativeValueChanged(maxLength: boolean) {\r\n        this.isCostNarrativeMaxLength = maxLength;\r\n    }\r\n\r\n    onOpenDialogOnPreviewOrSaveClicked() {\r\n        this.isLoading = true;\r\n        if (this.washoutWorkingPageComponent.invoiceWashoutWorkingFormGroup.valid\r\n            && this.washoutWorkingPageComponent.additionalCostComponent.validate()) {\r\n            if (this.isCostNarrativeMaxLength) {\r\n                this.snackbarService.informationSnackBar(\r\n                    'Narrative length should be less than 30',\r\n                );\r\n                return;\r\n            }\r\n            this.isSaveClicked = true;\r\n            this.checkForPayableorReceivable();\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors...');\r\n            this.isLoading = false;\r\n        }\r\n        this.costAndTaxRowsSelected();\r\n    }\r\n\r\n    onMoveButtonClicked(index: number) {\r\n        let isFormValid = false;\r\n        if (this.washoutSelectionComponent.washoutDecimalsComponent.formGroup.valid) {\r\n\r\n            if (this.isValid) {\r\n                this.selectedWashoutContracts();\r\n                this.getTaxRecordsForSelectedCost();\r\n                this.isCompleted = true;\r\n                this.stepper.selectedIndex = index;\r\n            }\r\n            isFormValid = true;\r\n        }\r\n\r\n        if (!this.isValid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Please select a contract to proceed.',\r\n            );\r\n        }\r\n        if (!isFormValid) {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors..');\r\n        }\r\n    }\r\n\r\n    selectedWashoutContracts() {\r\n        const selectedSectionIdList: number[] = [];\r\n        if (this.washoutSelectionComponent.\r\n            washoutSearchComponent.selectedWashoutContracts.length > 0) {\r\n            this.washoutSelectionComponent.\r\n                washoutSearchComponent.selectedWashoutContracts.map((data) => {\r\n                    selectedSectionIdList.push(data.sectionId);\r\n                });\r\n            if (this.invoiceSetUpData) {\r\n                this.washoutWorkingPageComponent.taxCostsComponent.setDefaultVatCode(this.invoiceSetUpData.defaultVATCode);\r\n                this.washoutWorkingPageComponent.taxGoodsComponent.setDefaultVatCode(this.invoiceSetUpData.defaultVATCode);\r\n                this.washoutWorkingPageComponent.washoutSelectionComponent.setDefaultAuthorizeForPosting\r\n                    (this.invoiceSetUpData.authorizedForPosting);\r\n                this.washoutWorkingPageComponent.washoutPaymentComponent.setPaymentTerms(this.invoiceSetUpData.paymentTermCode);\r\n                this.washoutWorkingPageComponent.additionalCostComponent.setDefaultVatCode(this.invoiceSetUpData.defaultVATCode);\r\n            }\r\n            this.subscriptions.push(this.executionService.getAllocatedContractsForSelectedWashout(selectedSectionIdList)\r\n                .subscribe(((allocatedWashoutContract) => {\r\n                    if (allocatedWashoutContract) {\r\n                        if (!this.isCreateInvoiceButtonClicked) {\r\n                            this.washoutWorkingPageComponent.contractsSelected(allocatedWashoutContract.value);\r\n                            this.washoutWorkingPageComponent.valueOfGoodsComponent.selectedWashoutContracts(allocatedWashoutContract.value);\r\n                        } else {\r\n                            this.washoutSummaryComponent.washoutContracts(allocatedWashoutContract.value);\r\n                        }\r\n                    }\r\n                })));\r\n        } else {\r\n            this.isValid = false;\r\n        }\r\n\r\n    }\r\n    getTaxRecordsForSelectedCost() {\r\n        this.taxRecords = this.washoutWorkingPageComponent.taxCostsComponent.taxesGridRows as TaxRecord[];\r\n        this.totalData = this.washoutWorkingPageComponent.totalData as TaxRecord;\r\n        this.goodsTaxCode = this.washoutWorkingPageComponent.selectedGoodsVatCode as string;\r\n    }\r\n\r\n    costAndTaxRowsSelected() {\r\n        this.washoutWorkingPageComponent.additionalCostComponent.setAllInvoiceCostLines();\r\n        this.invoiceCostContracts = this.washoutWorkingPageComponent.additionalCostComponent\r\n            .getAllInvoiceCostLines();\r\n        this.invoiceGoodsContracts = this.washoutWorkingPageComponent.valueOfGoodsComponent\r\n            .valueOfGoodsGridRows as ContractsToWashoutInvoice[];\r\n        this.getTaxRecordsForSelectedCost();\r\n    }\r\n\r\n    onWashoutContractsSelected(contractsSelected: boolean) {\r\n        this.isValid = contractsSelected;\r\n    }\r\n\r\n    onChangeValueOfGoods(model: InvoiceRecord) {\r\n        this.valueOfGoodsData = model;\r\n    }\r\n\r\n    ontotalAmountCalculated(model: TaxRecord) {\r\n        this.totalData = model;\r\n    }\r\n\r\n    onChangeCostContract(model: ContractsToCostInvoice[]) {\r\n        this.invoiceCostContracts = model;\r\n    }\r\n\r\n    onPricingAndDecimalOptionSelected(model: any) {\r\n        if (this.washoutWorkingPageComponent) {\r\n            this.washoutWorkingPageComponent.pricingAndDecimalOptionSelected(model.pricingSelected, model.decimalOptionSelected);\r\n        }\r\n    }\r\n\r\n    onCounterPartySelected(counterParty) {\r\n        this.washoutWorkingPageComponent.washoutSelectionComponent.counterPartySelected(counterParty);\r\n    }\r\n\r\n    nextInvoiceButtonClicked() {\r\n        let searchContractRef: string = '';\r\n        let searchCounterParty: string = '';\r\n        let searchCharterRef: string = '';\r\n        searchContractRef = this.washoutSelectionComponent.washoutSearchComponent.searchContractReference;\r\n        searchCounterParty = this.washoutSelectionComponent.washoutSearchComponent.searchCounterParty;\r\n        searchCharterRef = this.washoutSelectionComponent.washoutSearchComponent.saveCharterReference;\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/execution/invoicing/' + encodeURIComponent(this.invoiceTypeId.toString())],\r\n            {\r\n                queryParams: {\r\n                    savedContractReference: searchContractRef, savedCounterParty: searchCounterParty,\r\n                    savedCharterReference: searchCharterRef,\r\n                },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    checkForPayableorReceivable() {\r\n        this.washoutSelectedValues = this.washoutWorkingPageComponent.getWashoutRecords();\r\n        if (this.washoutSelectedValues) {\r\n            this.selectedSupplier = this.masterData.counterparties.find(\r\n                (counterParty) => counterParty.description === this.washoutSelectedValues.counterpartyCode);\r\n            (this.washoutSelectedValues.costDirection === CostDirections.Payable) ?\r\n                this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value) :\r\n                this.getCompanyBankAccounts();\r\n        }\r\n    }\r\n\r\n    getCompanyBankAccounts() {\r\n        if (this.selectedSupplier && this.washoutSelectedValues.currency) {\r\n            this.masterdataService.getCompanyBankAccounts(this.washoutSelectedValues.currency)\r\n                .subscribe((data) => {\r\n                    if (data.value.length > 0) {\r\n                        this.filteredCompanyBankAccounts = data.value;\r\n                    }\r\n                    this.showAvailableBankingOptionDialog();\r\n                },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    });\r\n        }\r\n    }\r\n\r\n    showAvailableBankingOptionDialog() {\r\n        if (this.filteredCompanyBankAccounts) {\r\n            const availableBankingoptionDialog = this.dialog.open(BankAccountDialogComponent, {\r\n                data: {\r\n                    title: 'Bank Account',\r\n                    okButton: 'Confirm',\r\n                    value: this.filteredCompanyBankAccounts,\r\n                },\r\n            });\r\n            availableBankingoptionDialog.afterClosed().subscribe((answer) => {\r\n                if (!answer) {\r\n                    this.isLoading = false;\r\n                } else if (answer.isClose) {\r\n                    this.selectedbankAccountId = answer.selectedValue;\r\n                    this.showConfirmationModal(this.hasTemplate && this.previewDocumentCtrl.value);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onBackButtonClicked(index: number) {\r\n        this.isCompleted = false;\r\n        this.stepper.selectedIndex = index;\r\n    }\r\n\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { TextMaskModule } from 'angular2-text-mask';\r\nimport { MissingInvoicesDetailsComponent } from '../home/execution-dashboard/missing-invoices-details/missing-invoices-details.component';\r\nimport { AgGridCheckboxComponent } from '../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { ConfirmationDialogComponent } from '../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { MaterialModule } from '../shared/material.module';\r\nimport { CustomDateAdapter } from '../shared/services/customDateAdapter';\r\nimport { ATLAS_DATE_FORMATS, SharedModule } from '../shared/shared.module';\r\nimport { ContractAdviceGenerationComponent } from './document/contract-advice-generation/contract-advice-generation.component';\r\nimport { ContractAdviceGenerationSelectionFormComponent } from './document/contract-advice-generation/form-components/selection-form/selection-form.component';\r\nimport { DocumentUploadDialogBoxComponent } from './document/dialog-boxes/document-upload-dialog-box/document-upload-dialog-box.component';\r\nimport { DocumentListCardComponent } from './document/list/card/document-list-card.component';\r\nimport { DocumentListComponent } from './document/list/document-list.component';\r\nimport { ExecutionAllocationComponent } from './execution-allocation/execution-allocation.component';\r\nimport { AdditionalCostsFormComponent } from './execution-cash/execution-cash-create/cash-details/additional-costs/additional-costs.component';\r\nimport { AdditionalDetailsFormComponent } from './execution-cash/execution-cash-create/cash-details/additional-details/additional-details.component';\r\nimport { BankInformationComponent } from './execution-cash/execution-cash-create/cash-details/bank-information/bank-information.component';\r\nimport { CashDetailsFormComponent } from './execution-cash/execution-cash-create/cash-details/cash-details.component';\r\nimport { CounterpartyFormComponent } from './execution-cash/execution-cash-create/cash-details/counterparty-card/counterparty-card.component';\r\nimport { CurrencyInformationCardComponent } from './execution-cash/execution-cash-create/cash-details/currency-information-card/currency-information-card.component';\r\nimport { DocumentInformationFormComponent } from './execution-cash/execution-cash-create/cash-details/document-information/document-information.component';\r\nimport { PaymentOrderTemplateSelectionCardComponent } from './execution-cash/execution-cash-create/cash-details/template-selection-card/payment-order-template-selection-card.component';\r\nimport { CashWarningDialogComponentComponent } from './execution-cash/execution-cash-create/cash-dialog-component/cash-warning-dialog-component/cash-warning-dialog-component.component';\r\nimport { CashSelectionFormComponent } from './execution-cash/execution-cash-create/cash-selection/cash-selection.component';\r\nimport { PaymentDifferentClientComponent } from './execution-cash/execution-cash-create/cash-selection/payment-different-client/payment-different-client.component';\r\nimport { PaymentDifferentCurrencyComponent } from './execution-cash/execution-cash-create/cash-selection/payment-different-currency/payment-different-currency.component';\r\nimport { PaymentFullTransactionComponent } from './execution-cash/execution-cash-create/cash-selection/payment-full-transaction/payment-full-transaction.component';\r\nimport { ReceiptDifferentCurrencyComponent } from './execution-cash/execution-cash-create/cash-selection/receipt-different-currency/receipt-different-currency.component';\r\nimport { ReceiptFullTransactionComponent } from './execution-cash/execution-cash-create/cash-selection/receipt-full-transaction/receipt-full-transaction.component';\r\nimport { SimpleCashPaymentComponent } from './execution-cash/execution-cash-create/cash-selection/simple-cash-payment/simple-cash-payment.component';\r\nimport { SimpleCashReceiptComponent } from './execution-cash/execution-cash-create/cash-selection/simple-cash-receipt/simple-cash-receipt.component';\r\nimport { CashSummaryFormComponent } from './execution-cash/execution-cash-create/cash-summary/cash-summary.component';\r\nimport { InvoiceGridForSummaryComponent } from './execution-cash/execution-cash-create/cash-summary/invoice-grid-for-summary/invoice-grid-for-summary.component';\r\nimport { ExecutionCashCreateComponent } from './execution-cash/execution-cash-create/execution-cash-create.component';\r\nimport { InvoiceMatchingComponent } from './execution-cash/execution-cash-create/pick-transaction/invoice-matching/invoice-matching.component';\r\nimport { PickTransactionComponent } from './execution-cash/execution-cash-create/pick-transaction/pick-transaction.component';\r\nimport { ExecutionCashPaymentListPageComponent } from './execution-cash/execution-cash-payment-list-page/execution-cash-payment-list-page.component';\r\nimport { ExecutionCashComponent } from './execution-cash/execution-cash.component';\r\nimport { AgGridCharterStatusForCharterBulkClosureComponent } from './execution-charter/ag-grid-charterstatus-for-charter-bulk-closure/ag-grid-charterstatus-for-charter-bulk-closure.component';\r\nimport { AgGridHyperlinkForCharterBulkClosureComponent } from './execution-charter/ag-grid-hyperlink-for-charter-bulk-closure/ag-grid-hyperlink-for-charter-bulk-closure.component';\r\nimport { PurchaseAllocationComponentComponent } from './execution-charter/execution-charter-allocation-deallocation/allocation-form-components/purchase-allocation-component/purchase-allocation-component.component';\r\nimport { QuantityAllocationComponentComponent } from './execution-charter/execution-charter-allocation-deallocation/allocation-form-components/quantity-allocation-component/quantity-allocation-component.component';\r\nimport { SaleAllocationComponentComponent } from './execution-charter/execution-charter-allocation-deallocation/allocation-form-components/sale-allocation-component/sale-allocation-component.component';\r\nimport { ContractDeallocationDialogComponent } from './execution-charter/execution-charter-allocation-deallocation/contract-deallocation-dialog-component/contract-deallocation-dialog-component.component';\r\nimport { DeallocationComponentComponent } from './execution-charter/execution-charter-allocation-deallocation/deallocation-form-component/deallocation-component/deallocation-component.component';\r\nimport { ExecutionCharterAllocationDeallocationComponent } from './execution-charter/execution-charter-allocation-deallocation/execution-charter-allocation-deallocation.component';\r\nimport { ExecutionCharterAssignmentComponent } from './execution-charter/execution-charter-assignment/execution-charter-assignment.component';\r\nimport { AdditionalInformationFormComponent } from './execution-charter/execution-charter-creation-page/components/additional-information-form-component/additional-information-form-component.component';\r\nimport { AssignSectionDialogComponent } from './execution-charter/execution-charter-creation-page/components/assign-section-dialog/assign-section-dialog.component';\r\nimport { AssignedContractListFormComponent } from './execution-charter/execution-charter-creation-page/components/assigned-contract-list-form-component/assigned-contract-list-form-component.component';\r\nimport { CharterMenuBarComponent } from './execution-charter/execution-charter-creation-page/components/charter-menu-bar-component/charter-menu-bar-component.component';\r\nimport { CharterPnlReportComponent } from './execution-charter/execution-charter-creation-page/components/charter-pnl-report/charter-pnl-report.component';\r\nimport { CharterReportComponent } from './execution-charter/execution-charter-creation-page/components/charter-report/charter-report.component';\r\nimport { DeassignSectionDialogComponent } from './execution-charter/execution-charter-creation-page/components/deassign-section-dialog/deassign-section-dialog.component';\r\nimport { MainInformationFormComponent } from './execution-charter/execution-charter-creation-page/components/main-information-form-component/main-information-form-component.component';\r\nimport { MemoFormComponent } from './execution-charter/execution-charter-creation-page/components/memo-form-component/memo-form-component.component';\r\nimport { ReassignContractAgGridComponent } from './execution-charter/execution-charter-creation-page/components/reassign-contract-ag-grid/reassign-contract-ag-grid.component';\r\nimport { ReassignSectionDialogComponent } from './execution-charter/execution-charter-creation-page/components/reassign-section-dialog/reassign-section-dialog.component';\r\nimport { ShipmentFormComponent } from './execution-charter/execution-charter-creation-page/components/shipment-form-component/shipment-form-component.component';\r\nimport { TotalCardComponent } from './execution-charter/execution-charter-creation-page/components/total-card-component/total-card-component.component';\r\nimport { WarningComponent } from './execution-charter/execution-charter-creation-page/components/warning-component/warning-component.component';\r\nimport { ExecutionCharterCreationPageComponent } from './execution-charter/execution-charter-creation-page/execution-charter-creation-page.component';\r\nimport { ExecutionCharterDetailsComponent } from './execution-charter/execution-charter-details/execution-charter-details.component';\r\nimport { ExecutionCharterEditPageComponent } from './execution-charter/execution-charter-edit-page/execution-charter-edit-page.component';\r\nimport { ExecutionCharterListPageComponent } from './execution-charter/execution-charter-list-page/execution-charter-list-page.component';\r\nimport { CharterBulkClosureComponent } from './execution-charter/group-amendments/charter-bulk-closure/charter-bulk-closure.component';\r\nimport { ExecutionCharterGroupAmendmentsComponent } from './execution-charter/group-amendments/execution-charter-group-amendments.component';\r\nimport { CharterBulkClosureMatrixComponent } from './execution-charter/group-function/bulk-closure-function/charter-bulk-closure-matrix/charter-bulk-closure-matrix.component';\r\nimport { CharterBulkClosureSummaryComponent } from './execution-charter/group-function/bulk-closure-function/charter-bulk-closure-summary/charter-bulk-closure-summary.component';\r\nimport { CharterSelectionBulkClosureComponent } from './execution-charter/group-function/bulk-closure-function/charter-selection-bulk-closure/charter-selection-bulk-closure.component';\r\nimport { ExecutionCharterBulkClosureFunctionComponent } from './execution-charter/group-function/bulk-closure-function/execution-charter-bulk-closure-function.component';\r\nimport { ExecutionCharterGroupFunctionComponent } from './execution-charter/group-function/execution-charter-group-function.component';\r\nimport { CostFormComponentComponent } from './execution-invoicing-create/components/cost-form-component/cost-form-component.component';\r\nimport { PurchaseGoodsFormComponentComponent } from './execution-invoicing-create/components/purchase-goods-form-component/purchase-goods-form-component.component';\r\nimport { QuantityInvoiceFormComponentComponent } from './execution-invoicing-create/components/quantity-invoice-form-component/quantity-invoice-form-component.component';\r\nimport { ReversalFormComponent } from './execution-invoicing-create/components/reversal-form-component/reversal-form-component.component';\r\nimport { SalesGoodsFormComponentComponent } from './execution-invoicing-create/components/sales-goods-form-component/sales-goods-form-component.component';\r\nimport { WashoutFormComponent } from './execution-invoicing-create/components/washout-form-component/washout-form-component.component';\r\nimport { ExecutionInvoicingCreateComponent } from './execution-invoicing-create/execution-invoicing-create.component';\r\nimport { ExecutionInvoicingHomeComponent } from './execution-invoicing-home/execution-invoicing-home.component';\r\nimport { CommercialComponent } from './execution-invoicing/commercial/commercial.component';\r\nimport { CommercialSelectionComponent } from './execution-invoicing/commercial/components/commercial-selection/commercial-selection.component';\r\nimport { ContractSelectionFormComponent } from './execution-invoicing/commercial/components/commercial-selection/components/contract-selection-form-component/contract-selection-form-component.component';\r\nimport { InvoiceSelectionFormComponent } from './execution-invoicing/commercial/components/commercial-selection/components/invoice-selection-form-component/invoice-selection-form-component.component';\r\nimport { PricingOptionsComponent } from './execution-invoicing/commercial/components/commercial-selection/components/pricing-options/pricing-options.component';\r\nimport { CommercialSummaryComponent } from './execution-invoicing/commercial/components/summary/commercial-summary.component';\r\nimport { CommercialWorkingPageComponent } from './execution-invoicing/commercial/components/working-page/commercial-working-page.component';\r\nimport { AddCostTaxComponent } from './execution-invoicing/commercial/components/working-page/components/add-cost-tax/add-cost-tax.component';\r\nimport { AddCostTotalComponent } from './execution-invoicing/commercial/components/working-page/components/add-cost-total/add-cost-total.component';\r\nimport { AddCostComponent } from './execution-invoicing/commercial/components/working-page/components/add-cost/add-cost.component';\r\nimport { CommercialPaymentsComponent } from './execution-invoicing/commercial/components/working-page/components/payments-component/payments-component.component';\r\nimport { SelectionFormComponentComponent } from './execution-invoicing/commercial/components/working-page/components/selection-form-component/selection-form-component.component';\r\nimport { TaxesComponent } from './execution-invoicing/commercial/components/working-page/components/taxes-component/taxes-component.component';\r\nimport { CommercialValueOfGoodsComponent } from './execution-invoicing/commercial/components/working-page/components/value-of-goods-component/value-of-goods-component.component';\r\nimport { DocumentTemplateComponent } from './execution-invoicing/components/document-template/document-template.component';\r\nimport { ContractSearchComponent } from './execution-invoicing/cost/components/cost-selection/components/contract-search/contract-search.component';\r\nimport { CostInvoiceeOptionsComponent } from './execution-invoicing/cost/components/cost-selection/components/cost-invoicee-options/cost-invoicee-options.component';\r\nimport { InvoiceSelectionComponent } from './execution-invoicing/cost/components/cost-selection/components/invoice-selection/invoice-selection.component';\r\nimport { CostSelectionComponent } from './execution-invoicing/cost/components/cost-selection/cost-selection.component';\r\nimport { CostDocumentTemplateComponent } from './execution-invoicing/cost/components/cost-working-page/components/document-template/cost-document-template.component';\r\nimport { CostPaymentsComponent } from './execution-invoicing/cost/components/cost-working-page/components/payments/cost-payments.component';\r\nimport { InvoiceCostSelectedCostComponent } from './execution-invoicing/cost/components/cost-working-page/components/selected-cost/invoice-cost-selected-cost.component';\r\nimport { CostInvoiceSelectionComponent } from './execution-invoicing/cost/components/cost-working-page/components/selection/cost-invoice-selection.component';\r\nimport { InvoicingCostTaxesComponent } from './execution-invoicing/cost/components/cost-working-page/components/taxes/invoicing-cost-taxes.component';\r\nimport { CostWorkingPageComponent } from './execution-invoicing/cost/components/cost-working-page/cost-working-page.component';\r\nimport { CostSummaryComponent } from './execution-invoicing/cost/components/summary/cost-summary.component';\r\nimport { CostComponent } from './execution-invoicing/cost/cost.component';\r\nimport { ApportionDialogComponent } from './execution-invoicing/dialog-boxes/apportion-dialog/apportion-dialog.component';\r\nimport { BankAccountDialogComponent } from './execution-invoicing/dialog-boxes/bank-account-dialog/bank-account-dialog.component';\r\nimport { ExecutionInvoicingComponent } from './execution-invoicing/execution-invoicing.component';\r\nimport { GoodsCostContractsCostComponent } from './execution-invoicing/goods-cost/components/goods-cost-selection-cost/components/goods-cost-contracts-cost/goods-cost-contracts-cost.component';\r\nimport { GoodsCostSelectionCostComponent } from './execution-invoicing/goods-cost/components/goods-cost-selection-cost/goods-cost-selection-cost.component';\r\nimport { GoodsCostContractSearchComponent } from './execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-contract-search/goods-cost-contract-search.component';\r\nimport { GoodsCostInvoiceSelectionComponent } from './execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-invoice-selection/goods-cost-invoice-selection.component';\r\nimport { GoodsCostPricingOptionsComponent } from './execution-invoicing/goods-cost/components/goods-cost-selection/components/goods-cost-pricing-options/goods-cost-pricing-options.component';\r\nimport { GoodsCostSelectionComponent } from './execution-invoicing/goods-cost/components/goods-cost-selection/goods-cost-selection.component';\r\nimport { GoodsCostSummaryComponent } from './execution-invoicing/goods-cost/components/goods-cost-summary/goods-cost-summary.component';\r\nimport { GoodsCostAdditionalCostComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-additional-cost/goods-cost-additional-cost.component';\r\nimport { GoodsCostDetailsComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-details/goods-cost-details.component';\r\nimport { GoodsCostPaymentsComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-payments/goods-cost-payments.component';\r\nimport { GoodsCostTaxCostComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-cost/goods-cost-tax-cost.component';\r\nimport { GoodsCostTaxGoodsComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-tax-goods/goods-cost-tax-goods.component';\r\nimport { GoodsCostTotalComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-total/goods-cost-total.component';\r\nimport { GoodsCostValueOfGoodsComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/components/goods-cost-value-of-goods/goods-cost-value-of-goods.component';\r\nimport { GoodsCostWorkingPageComponent } from './execution-invoicing/goods-cost/components/goods-cost-working-page/goods-cost-working-page.component';\r\nimport { GoodsCostComponent } from './execution-invoicing/goods-cost/goods-cost.component';\r\nimport { HeaderComponent } from './execution-invoicing/header/header.component';\r\nimport { DocumentTemplateBaseComponent } from './execution-invoicing/invoicing-base-form/document-template-base/document-template-base.component';\r\nimport { InvoicingBaseFormComponent } from './execution-invoicing/invoicing-base-form/invoicing-base-form.component';\r\nimport { InvoicingSummaryComponent } from './execution-invoicing/invoicing-summary/invoicing-summary.component';\r\nimport { DocumentSearchComponent } from './execution-invoicing/reversal/components/reversal-selection/components/document-search/document-search.component';\r\nimport { DocumentTypeComponent } from './execution-invoicing/reversal/components/reversal-selection/components/document-type/document-type.component';\r\nimport { ReversalDocumentTemplateComponent } from './execution-invoicing/reversal/components/reversal-selection/components/reversal-document-template/reversal-document-template.component';\r\nimport { ReversalInvoiceSelectionComponent } from './execution-invoicing/reversal/components/reversal-selection/components/reversal-invoice-selection/reversal-invoice-selection.component';\r\nimport { ReversalSelectionComponent } from './execution-invoicing/reversal/components/reversal-selection/reversal-selection.component';\r\nimport { ReversalSummaryComponent } from './execution-invoicing/reversal/components/reversal-summary/reversal-summary.component';\r\nimport { ReversalComponent } from './execution-invoicing/reversal/reversal.component';\r\nimport { TotalAmountComponent } from './execution-invoicing/total-amount/total-amount.component';\r\nimport { DecimalsComponent } from './execution-invoicing/washout/components/washout-selection/components/decimals/decimals.component';\r\nimport { InvoiceTypeSelectionComponent } from './execution-invoicing/washout/components/washout-selection/components/invoice-type-selection/invoice-type-selection.component';\r\nimport { WashoutSearchComponent } from './execution-invoicing/washout/components/washout-selection/components/washout-search/washout-search.component';\r\nimport { WashoutSelectionComponent } from './execution-invoicing/washout/components/washout-selection/washout-selection.component';\r\nimport { WashoutSummaryComponent } from './execution-invoicing/washout/components/washout-summary/washout-summary.component';\r\nimport { AdditionalCostComponent } from './execution-invoicing/washout/components/washout-working-page/components/additional-cost/additional-cost.component';\r\nimport { InvoiceDocumentComponent } from './execution-invoicing/washout/components/washout-working-page/components/invoice-document/invoice-document.component';\r\nimport { WashoutPaymentsComponent } from './execution-invoicing/washout/components/washout-working-page/components/payments/payments.component';\r\nimport { SelectionComponent } from './execution-invoicing/washout/components/washout-working-page/components/selection/selection.component';\r\nimport { TaxCostsComponent } from './execution-invoicing/washout/components/washout-working-page/components/tax-costs/tax-costs.component';\r\nimport { TaxGoodsComponent } from './execution-invoicing/washout/components/washout-working-page/components/tax-goods/tax-goods.component';\r\nimport { WashoutValueOfGoodsComponent } from './execution-invoicing/washout/components/washout-working-page/components/value-of-goods/value-of-goods.component';\r\nimport { WashoutTotalComponent } from './execution-invoicing/washout/components/washout-working-page/components/washout-total/washout-total.component';\r\nimport { WashoutWorkingPageComponent } from './execution-invoicing/washout/components/washout-working-page/washout-working-page.component';\r\nimport { WashoutComponent } from './execution-invoicing/washout/washout.component';\r\nimport { ExecutionRoutingModule } from './execution.route';\r\nimport { ExecutionCashReceiptListPageComponent } from './execution-cash/execution-cash-receipt-list-page/execution-cash-receipt-list-page.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        ExecutionRoutingModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        SharedModule,\r\n        AgGridModule,\r\n        TextMaskModule,\r\n    ],\r\n    entryComponents: [\r\n        ConfirmationDialogComponent,\r\n        AgGridCheckboxComponent,\r\n        AssignSectionDialogComponent,\r\n        DeassignSectionDialogComponent,\r\n        BankAccountDialogComponent,\r\n        ContractDeallocationDialogComponent,\r\n        CharterPnlReportComponent,\r\n        CharterReportComponent,\r\n        DocumentUploadDialogBoxComponent,\r\n        CashWarningDialogComponentComponent,\r\n        ReassignSectionDialogComponent,\r\n        ApportionDialogComponent,\r\n        AgGridCharterStatusForCharterBulkClosureComponent,\r\n        AgGridHyperlinkForCharterBulkClosureComponent,\r\n    ],\r\n    declarations: [\r\n        ExecutionAllocationComponent,\r\n        ExecutionInvoicingComponent,\r\n        ExecutionCharterCreationPageComponent,\r\n        ExecutionCharterListPageComponent,\r\n        ExecutionCharterDetailsComponent,\r\n        ExecutionCharterAssignmentComponent,\r\n        MissingInvoicesDetailsComponent,\r\n        ExecutionInvoicingHomeComponent,\r\n        MainInformationFormComponent,\r\n        ShipmentFormComponent,\r\n        AdditionalInformationFormComponent,\r\n        MemoFormComponent,\r\n        TotalCardComponent,\r\n        ExecutionCharterEditPageComponent,\r\n        ContractAdviceGenerationComponent,\r\n        ContractAdviceGenerationSelectionFormComponent,\r\n        InvoiceSelectionFormComponent,\r\n        ContractSelectionFormComponent,\r\n        CommercialWorkingPageComponent,\r\n        DocumentListComponent,\r\n        DocumentListCardComponent,\r\n        AssignSectionDialogComponent,\r\n        AssignedContractListFormComponent,\r\n        TaxesComponent,\r\n        TotalAmountComponent,\r\n        CommercialPaymentsComponent,\r\n        WarningComponent,\r\n        PricingOptionsComponent,\r\n        ContractSelectionFormComponent,\r\n        CommercialSummaryComponent,\r\n        SelectionFormComponentComponent,\r\n        CommercialValueOfGoodsComponent,\r\n        DeassignSectionDialogComponent,\r\n        ExecutionInvoicingCreateComponent,\r\n        PurchaseGoodsFormComponentComponent,\r\n        SalesGoodsFormComponentComponent,\r\n        QuantityInvoiceFormComponentComponent,\r\n        CostFormComponentComponent,\r\n        CostSelectionComponent,\r\n        InvoiceSelectionComponent,\r\n        ExecutionCashComponent,\r\n        ExecutionCashCreateComponent,\r\n        CashSelectionFormComponent,\r\n        CashDetailsFormComponent,\r\n        CounterpartyFormComponent,\r\n        AdditionalDetailsFormComponent,\r\n        DocumentInformationFormComponent,\r\n        ExecutionCashPaymentListPageComponent,\r\n        ContractSearchComponent,\r\n        CostInvoiceeOptionsComponent,\r\n        CashSummaryFormComponent,\r\n        HeaderComponent,\r\n        CostWorkingPageComponent,\r\n        CostInvoiceSelectionComponent,\r\n        CostDocumentTemplateComponent,\r\n        InvoicingCostTaxesComponent,\r\n        CostPaymentsComponent,\r\n        InvoiceCostSelectedCostComponent,\r\n        PickTransactionComponent,\r\n        InvoiceMatchingComponent,\r\n        SimpleCashPaymentComponent,\r\n        SimpleCashReceiptComponent,\r\n        PaymentFullTransactionComponent,\r\n        PaymentDifferentClientComponent,\r\n        PaymentDifferentCurrencyComponent,\r\n        ReceiptFullTransactionComponent,\r\n        ReceiptDifferentCurrencyComponent,\r\n        CostSummaryComponent,\r\n        BankAccountDialogComponent,\r\n        WashoutFormComponent,\r\n        AdditionalCostsFormComponent,\r\n        CharterMenuBarComponent,\r\n        InvoiceGridForSummaryComponent,\r\n        ReversalFormComponent,\r\n        GoodsCostComponent,\r\n        GoodsCostSelectionComponent,\r\n        GoodsCostInvoiceSelectionComponent,\r\n        GoodsCostContractSearchComponent,\r\n        GoodsCostPricingOptionsComponent,\r\n        GoodsCostWorkingPageComponent,\r\n        WashoutComponent,\r\n        CommercialComponent,\r\n        CostComponent,\r\n        DecimalsComponent,\r\n        WashoutSearchComponent,\r\n        WashoutSelectionComponent,\r\n        WashoutWorkingPageComponent,\r\n        InvoiceTypeSelectionComponent,\r\n        AdditionalCostComponent,\r\n        InvoiceDocumentComponent,\r\n        WashoutPaymentsComponent,\r\n        SelectionComponent,\r\n        WashoutValueOfGoodsComponent,\r\n        CommercialSelectionComponent,\r\n        GoodsCostDetailsComponent,\r\n        GoodsCostValueOfGoodsComponent,\r\n        GoodsCostAdditionalCostComponent,\r\n        GoodsCostTaxGoodsComponent,\r\n        GoodsCostTaxCostComponent,\r\n        GoodsCostPaymentsComponent,\r\n        GoodsCostTotalComponent,\r\n        GoodsCostSelectionCostComponent,\r\n        GoodsCostContractsCostComponent,\r\n        TaxGoodsComponent,\r\n        TaxCostsComponent,\r\n        ReversalComponent,\r\n        ReversalSelectionComponent,\r\n        ReversalInvoiceSelectionComponent,\r\n        DocumentTypeComponent,\r\n        DocumentSearchComponent,\r\n        WashoutSummaryComponent,\r\n        CurrencyInformationCardComponent,\r\n        GoodsCostSummaryComponent,\r\n        ReversalSummaryComponent,\r\n        InvoicingSummaryComponent,\r\n        WashoutTotalComponent,\r\n        PaymentOrderTemplateSelectionCardComponent,\r\n        ExecutionCharterAllocationDeallocationComponent,\r\n        PurchaseAllocationComponentComponent,\r\n        SaleAllocationComponentComponent,\r\n        QuantityAllocationComponentComponent,\r\n        DeallocationComponentComponent,\r\n        ContractDeallocationDialogComponent,\r\n        InvoicingBaseFormComponent,\r\n        CharterPnlReportComponent,\r\n        CharterReportComponent,\r\n        DocumentUploadDialogBoxComponent,\r\n        DocumentTemplateBaseComponent,\r\n        BankInformationComponent,\r\n        CashWarningDialogComponentComponent,\r\n        DocumentTemplateComponent,\r\n        ReversalDocumentTemplateComponent,\r\n        ReassignContractAgGridComponent,\r\n        ReassignSectionDialogComponent,\r\n        ApportionDialogComponent,\r\n        ExecutionCharterGroupAmendmentsComponent,\r\n        CharterBulkClosureComponent,\r\n        ExecutionCharterGroupFunctionComponent,\r\n        ExecutionCharterBulkClosureFunctionComponent,\r\n        CharterSelectionBulkClosureComponent,\r\n        CharterBulkClosureMatrixComponent,\r\n        CharterBulkClosureSummaryComponent,\r\n        AgGridCharterStatusForCharterBulkClosureComponent,\r\n        AgGridHyperlinkForCharterBulkClosureComponent,\r\n        AddCostComponent,\r\n        AddCostTaxComponent,\r\n        AddCostTotalComponent,\r\n        ExecutionCashReceiptListPageComponent,\r\n    ],\r\n    providers: [CustomDateAdapter,\r\n        { provide: MAT_DATE_LOCALE, useValue: 'en' },\r\n        { provide: DateAdapter, useClass: CustomDateAdapter },\r\n        { provide: MAT_DATE_FORMATS, useValue: ATLAS_DATE_FORMATS },\r\n    ],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n\r\n})\r\nexport class ExecutionModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MissingInvoicesDetailsComponent } from '../home/execution-dashboard/missing-invoices-details/missing-invoices-details.component';\r\nimport { MasterDataProps } from '../shared/entities/masterdata-props.entity';\r\nimport { PermissionLevels } from '../shared/enums/permission-level.enum';\r\nimport { CanDeactivateGuard } from '../shared/guards/can-deactivate-guard.service';\r\nimport { SecurityGuard } from '../shared/guards/security.guard';\r\nimport { CompanyDateResolver } from '../shared/resolvers/company-date.resolver';\r\nimport { FormConfigurationResolver } from '../shared/resolvers/form-configuration.resolver';\r\nimport { MasterDataResolver } from '../shared/resolvers/masterdata.resolver';\r\nimport { ContractAdviceGenerationComponent } from './document/contract-advice-generation/contract-advice-generation.component';\r\nimport { DocumentListComponent } from './document/list/document-list.component';\r\nimport { ExecutionAllocationComponent } from './execution-allocation/execution-allocation.component';\r\nimport { CashSummaryFormComponent } from './execution-cash/execution-cash-create/cash-summary/cash-summary.component';\r\nimport { ExecutionCashCreateComponent } from './execution-cash/execution-cash-create/execution-cash-create.component';\r\nimport { ExecutionCashComponent } from './execution-cash/execution-cash.component';\r\nimport { ExecutionCharterAllocationDeallocationComponent } from './execution-charter/execution-charter-allocation-deallocation/execution-charter-allocation-deallocation.component';\r\nimport { ExecutionCharterAssignmentComponent } from './execution-charter/execution-charter-assignment/execution-charter-assignment.component';\r\nimport { ExecutionCharterCreationPageComponent } from './execution-charter/execution-charter-creation-page/execution-charter-creation-page.component';\r\nimport { ExecutionCharterDetailsComponent } from './execution-charter/execution-charter-details/execution-charter-details.component';\r\nimport { ExecutionCharterEditPageComponent } from './execution-charter/execution-charter-edit-page/execution-charter-edit-page.component';\r\nimport { ExecutionCharterListPageComponent } from './execution-charter/execution-charter-list-page/execution-charter-list-page.component';\r\nimport { ExecutionCharterGroupAmendmentsComponent } from './execution-charter/group-amendments/execution-charter-group-amendments.component';\r\nimport { ExecutionCharterGroupFunctionComponent } from './execution-charter/group-function/execution-charter-group-function.component';\r\nimport { ExecutionInvoicingCreateComponent } from './execution-invoicing-create/execution-invoicing-create.component';\r\nimport { ExecutionInvoicingHomeComponent } from './execution-invoicing-home/execution-invoicing-home.component';\r\nimport { CommercialPaymentsComponent } from './execution-invoicing/commercial/components/working-page/components/payments-component/payments-component.component';\r\nimport { ExecutionInvoicingComponent } from './execution-invoicing/execution-invoicing.component';\r\nimport { InvoicingSummaryComponent } from './execution-invoicing/invoicing-summary/invoicing-summary.component';\r\nexport const routes: Routes = [\r\n    {\r\n        path: 'invoicing/missinginvoices/dealtype/:dealType',\r\n        component: MissingInvoicesDetailsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: { animation: 'homeMissingInvoices', title: 'Missing Invoicing', isHomePage: false, privilegeLevel1Name: null },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'invoicing/missinginvoices',\r\n        component: MissingInvoicesDetailsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: { animation: 'homeMissingInvoices', title: 'Missing Invoicing', isHomePage: false, privilegeLevel1Name: null },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cash',\r\n        component: ExecutionCashComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'cashHomePage', title: 'Cash', isHomePage: true, privilegeLevel1Name: 'Cash',\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n            ],\r\n        },\r\n        resolve: {\r\n            formConfiguration: FormConfigurationResolver,\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cash/new/:cashTypeId',\r\n        component: ExecutionCashCreateComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'cashCreatePage',\r\n            title: 'Cash',\r\n            isHomePage: true,\r\n            privilegeLevel1Name: 'Cash',\r\n            formId: 'cashCreatePage',\r\n            masterdataWithoutCompanyList: [\r\n                MasterDataProps.FxRates,\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.CashTypes,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.BankTypes,\r\n                MasterDataProps.BankAccountStatuses,\r\n            ],\r\n        },\r\n        resolve: {\r\n            formConfiguration: FormConfigurationResolver,\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'allocation/:pricingMethod/:sectionId',\r\n        component: ExecutionAllocationComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'executionAllocate',\r\n            title: 'Trade Allocation', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Allocate',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'invoicing/home',\r\n        component: ExecutionInvoicingHomeComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'executionInvoicingHome',\r\n            title: 'Invoices',\r\n            isHomePage: true,\r\n            privilegeLevel1Name: 'Invoices',\r\n            masterdataList: [\r\n                MasterDataProps.InvoiceTypes,\r\n                MasterDataProps.Counterparties,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Invoices',\r\n                    permission: PermissionLevels.Read,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'invoicing/new',\r\n        component: ExecutionInvoicingCreateComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionInvoicing',\r\n            title: 'New Invoice', isHomePage: false, privilegeLevel1Name: null,\r\n            formId: 'InvoiceCreation',\r\n            masterdataList: [\r\n                MasterDataProps.InvoiceTypes,\r\n                MasterDataProps.PricingOptions,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.NominalAccounts,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'InvoiceCreation',\r\n                    permission: PermissionLevels.Read,\r\n                    parentLevelOne: 'Invoices',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'invoicing/:invoiceTypeId',\r\n        component: ExecutionInvoicingComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionInvoicing',\r\n            title: 'Invoice Creation', isHomePage: false, privilegeLevel1Name: null,\r\n            formId: 'InvoiceCreation',\r\n            masterdataList: [\r\n                MasterDataProps.InvoiceTypes,\r\n                MasterDataProps.PricingOptions,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.WeightUnits,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'InvoiceCreation',\r\n                    permission: PermissionLevels.Read,\r\n                    parentLevelOne: 'Invoices',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'invoicing/summary/:invoiceId',\r\n        component: InvoicingSummaryComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'executionInvoicing',\r\n            title: 'Invoice Summary', isHomePage: false, privilegeLevel1Name: null,\r\n            formId: 'InvoiceSummary',\r\n            masterdataList: [\r\n                MasterDataProps.InvoiceTypes,\r\n                MasterDataProps.PricingOptions,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.NominalAccounts,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'InvoiceCreation',\r\n                    permission: PermissionLevels.Read,\r\n                    parentLevelOne: 'Invoices',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'invoicing/contract/:contractId',\r\n        component: ExecutionInvoicingComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionInvoicing', isHomePage: false, privilegeLevel1Name: null,\r\n            title: 'Contract Invoicing',\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter',\r\n        component: ExecutionCharterListPageComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'executionCharter',\r\n            title: 'Charter',\r\n            isHomePage: true,\r\n            privilegeLevel1Name: 'Charters',\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/new',\r\n        component: ExecutionCharterCreationPageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionCharter',\r\n            title: 'New Creation', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.TransportTypes,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ChartersView',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Charters',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/new/:charterId',\r\n        component: ExecutionCharterCreationPageComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'executionCharter', title: 'New Charter', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.TransportTypes,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ChartersView',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Charters',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/edit/:charterId',\r\n        component: ExecutionCharterEditPageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionCharter', title: 'Edit Charter', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.TransportTypes,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.PaymentTerms,\r\n\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ChartersView',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Charters',\r\n                },\r\n            ],\r\n        },\r\n\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/details/:charterId',\r\n        component: ExecutionCharterDetailsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'executionCharter', title: 'Charter', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.TransportTypes,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.PaymentTerms,\r\n\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ChartersView',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Charters',\r\n                    // parentLevelTwo: 'ChartersView',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/assignment/:charterId',\r\n        component: ExecutionCharterAssignmentComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionCharter', isHomePage: false, privilegeLevel1Name: null,\r\n            title: 'Assign contract(s) to charter',\r\n            masterdataList: [\r\n                MasterDataProps.TransportTypes,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Counterparties,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ChartersView',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Charters',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n\r\n        },\r\n    },\r\n    {\r\n        path: 'document/list',\r\n        component: DocumentListComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'documentList',\r\n            title: 'Document List', isHomePage: true, icon: '',\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'document/list/:entity/:recordId',\r\n        component: DocumentListComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'documentList',\r\n            title: 'Document List', isHomePage: false, icon: '',\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/allocateDeallocate/:charterId',\r\n        component: ExecutionCharterAllocationDeallocationComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionCharter', isHomePage: false, icon: '',\r\n            title: 'Trade Allocation/Deallocation',\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n\r\n        },\r\n    },\r\n    {\r\n        path: 'document/generation/contractadvice/:recordId',\r\n        component: ContractAdviceGenerationComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'documentGeneration',\r\n            title: 'Document Generation', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GenerateContractAdvice',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'invoicing/:invoiceTypeId',\r\n        component: CommercialPaymentsComponent,\r\n        data: {\r\n            animation: 'executionPaymentTerm',\r\n            title: 'Payment Term', isHomePage: false, privilegeLevel1Name: null,\r\n            paymentTerms: [MasterDataProps.PaymentTerms],\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.NominalAccounts,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cash/display/:cashTypeId/:cashId',\r\n        component: CashSummaryFormComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionCash', title: 'Cash Details',\r\n            formId: 'cashSummaryPage', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.BankTypes,\r\n                MasterDataProps.BankAccountStatuses,\r\n\r\n            ],\r\n\r\n        },\r\n        resolve: {\r\n            formConfiguration: FormConfigurationResolver,\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cash/edit/:cashTypeId/:cashId',\r\n        component: ExecutionCashCreateComponent,\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'executionCash', title: 'Edit Cash',\r\n            formId: 'cashCreatePage', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataWithoutCompanyList: [\r\n                MasterDataProps.FxRates,\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.BankTypes,\r\n                MasterDataProps.BankAccountStatuses,\r\n\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/groupfunctions',\r\n        component: ExecutionCharterGroupAmendmentsComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'groupFunctions',\r\n            title: 'Group Functions',\r\n            formId: 'GroupFunctions', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n            ],\r\n\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'charter/bulkActions/:bulkActionTypeId',\r\n        component: ExecutionCharterGroupFunctionComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'bulkActions',\r\n            title: 'Bulk Actions',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            formId: 'GroupFunctions',\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class ExecutionRoutingModule { }\r\n","module.exports = \"<div class=\\\"elevated-container mat-elevation-z1 container-custom\\\">\\r\\n    <form [formGroup]=\\\"missingInvoicesForm\\\">\\r\\n        <mat-expansion-panel expanded=\\\"true\\\">\\r\\n            <mat-expansion-panel-header>\\r\\n                <mat-panel-title>\\r\\n                    <h2>Missing invoices</h2>\\r\\n                    <div class=\\\"custom-line-title\\\"></div>\\r\\n                </mat-panel-title>\\r\\n            </mat-expansion-panel-header>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"none left\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <mat-select placeholder=\\\"Platform\\\"\\r\\n                                    formControlName=\\\"platformFilterCtrl\\\"\\r\\n                                    multiple>\\r\\n                            <mat-option value=\\\"1\\\">Grains</mat-option>\\r\\n                            <mat-option value=\\\"2\\\">Oilseeds</mat-option>\\r\\n                            <mat-option value=\\\"3\\\">Coffee</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"8%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <button mat-icon-button\\r\\n                            aria-label=\\\"View 1\\\"\\r\\n                            matTooltip=\\\"View 1\\\">\\r\\n                        <mat-icon>grade</mat-icon>&nbsp;View 1\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"8%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <button mat-icon-button\\r\\n                            aria-label=\\\"View 2\\\"\\r\\n                            matTooltip=\\\"View 2\\\">\\r\\n                        <mat-icon style=\\\"color:Gainsboro;\\\">grade</mat-icon>&nbsp;View 2\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"8%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <button mat-icon-button\\r\\n                            aria-label=\\\"View 3\\\"\\r\\n                            matTooltip=\\\"View 3\\\">\\r\\n                        <mat-icon style=\\\"color:Gainsboro;\\\">grade</mat-icon>&nbsp;View 3\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"none left\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <mat-select placeholder=\\\"Entity\\\"\\r\\n                                    formControlName=\\\"entityFilterCtrl\\\"\\r\\n                                    (selectionChange)=\\\"entityFilterChange()\\\"\\r\\n                                    multiple>\\r\\n                            <mat-option value=\\\"A1\\\">A1</mat-option>\\r\\n                            <mat-option value=\\\"A8\\\">A8</mat-option>\\r\\n                            <mat-option value=\\\"R3\\\">R3</mat-option>\\r\\n                            <mat-option value=\\\"S4\\\">S4</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <mat-select placeholder=\\\"Ageing BL Date\\\"\\r\\n                                    formControlName=\\\"blDateFilterCtrl\\\"\\r\\n                                    multiple>\\r\\n                            <mat-option value=1>0-1 months</mat-option>\\r\\n                            <mat-option value=2>03-06 months</mat-option>\\r\\n                            <mat-option value=3>12-24 months</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <mat-select placeholder=\\\"Transport type\\\"\\r\\n                                    formControlName=\\\"transportFilterCtrl\\\"\\r\\n                                    multiple>\\r\\n                            <mat-option value=\\\"Bulk\\\">Bulk</mat-option>\\r\\n                            <mat-option value=\\\"Others\\\">Others</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <mat-select placeholder=\\\"Contract type\\\"\\r\\n                                    formControlName=\\\"contractTypeFilterCtrl\\\"\\r\\n                                    (selectionChange)=\\\"contractTypeFilterChange()\\\"\\r\\n                                    multiple>\\r\\n                            <mat-option value=\\\"Purchases\\\">Purchases</mat-option>\\r\\n                            <mat-option value=\\\"Sales\\\">Sales</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <mat-select placeholder=\\\"User\\\"\\r\\n                                    formControlName=\\\"userFilterCtrl\\\"\\r\\n                                    multiple>\\r\\n                            <mat-option value=\\\"1\\\">User 1</mat-option>\\r\\n                            <mat-option value=\\\"2\\\">User 2</mat-option>\\r\\n                            <mat-option value=\\\"2\\\">User 3</mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"15%\\\"\\r\\n                     fxFlex.xs=\\\"100%\\\"\\r\\n                     fxFlex.sm=\\\"100%\\\">\\r\\n                    <button mat-icon-button\\r\\n                            matTooltip=\\\"View\\\">\\r\\n                        <mat-icon>remove_red_eye</mat-icon>\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <mat-table #table\\r\\n                       [dataSource]=\\\"selectionDataSource\\\">\\r\\n                <ng-container matColumnDef=\\\"contractRef\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Contract</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.contractRef }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"entityFilter\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Entity</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.entityFilter }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"department\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Department</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.department }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"counterparty\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Counterparty</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.counterparty }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"vessel\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Vessel</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.vessel }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"transportFilter\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Transport Type</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.transportFilter }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"blDate\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>BL Date</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\">\\r\\n                        <atr-date-label [date]=\\\"element.blDate\\\"></atr-date-label>\\r\\n                    </mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"period\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Period</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.period }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"commodity\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Commodity</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.commodity }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"quantity\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Quantity</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.quantity }} MT</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"total\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Total %</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.total }} %</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"price\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Price</mat-header-cell>\\r\\n                    <mat-cell class=\\\"mat-cell-right\\\"\\r\\n                              *matCellDef=\\\"let element\\\"> {{ element.price }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"priceDiff\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Price Diff</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.priceDiff }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"lots\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>Lots</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.lots }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"user\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef>User</mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let element\\\"> {{ element.user }}</mat-cell>\\r\\n                </ng-container>\\r\\n                <ng-container matColumnDef=\\\"selection\\\">\\r\\n                    <mat-header-cell *matHeaderCellDef> Selection </mat-header-cell>\\r\\n                    <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                        <mat-checkbox (change)=\\\"contractSelected(row)\\\"\\r\\n                                      [checked]=\\\"selectionManager.isSelected(row)\\\"></mat-checkbox>\\r\\n                    </mat-cell>\\r\\n                </ng-container>\\r\\n\\r\\n                <mat-header-row *matHeaderRowDef=\\\"selectionDisplayedColumns\\\"></mat-header-row>\\r\\n                <mat-row *matRowDef=\\\"let row; columns: selectionDisplayedColumns;\\\"></mat-row>\\r\\n            </mat-table>\\r\\n            <div>\\r\\n                <div class=\\\"custom-line-footer\\\"></div>\\r\\n                <div style=\\\"margin:20px; text-align:right\\\">\\r\\n                    <span class=\\\"fill-space\\\"></span>\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"proceedButtonClicked()\\\"\\r\\n                            [disabled]=\\\"selectedRowReference == ''\\\">Proceed</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-expansion-panel>\\r\\n    </form>\\r\\n</div>\\r\\n\"","module.exports = \".mat-header-cell {\\n  font-weight: 800 !important;\\n  font-size: 14px !important;\\n  color: #24333e !important; }\\n\"","import { SelectionModel } from \"@angular/cdk/collections\";\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Filter } from '../../../shared/entities/filter.entity';\r\nimport { MissingInvoicesDisplayView } from '../../../shared/models/missing-invoices-display-view';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atr-missing-invoices-details',\r\n    templateUrl: './missing-invoices-details.component.html',\r\n    styleUrls: ['./missing-invoices-details.component.scss'],\r\n})\r\n\r\nexport class MissingInvoicesDetailsComponent implements OnInit {\r\n    constructor(private fb: FormBuilder,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private titleService: TitleService) {\r\n\r\n        this.createForm();\r\n\r\n    }\r\n    company: string;\r\n\r\n    missingInvoicesForm: FormGroup;\r\n\r\n    selectionManager = new SelectionModel<MissingInvoicesDisplayView>(true, []);\r\n    selectionDisplayedColumns = ['contractRef', 'entityFilter', 'department', 'counterparty', 'vessel', 'transportFilter', 'blDate', 'period', 'commodity', 'quantity', 'total', 'price', 'priceDiff', 'lots', 'user', 'selection'];\r\n    selectionDataSource: MatTableDataSource<MissingInvoicesDisplayView>;\r\n\r\n    @ViewChild(MatPaginator) paginator: MatPaginator;\r\n    @ViewChild(MatSort) sort: MatSort;\r\n\r\n    dealType: string = '';\r\n\r\n    missingInvoices: MissingInvoicesDisplayView[] = [\r\n        // new MissingInvoicesDisplayView(126, 'P00126.000', '751', 'LDC', 'Vessel', new Date(\"12/12/2017\"), 'D', 'BAG', 1000, 0.2, 100, 100, 1, 'ATRCTRL2', 'S4', 1, 'BULK', 'P'),\r\n        // new MissingInvoicesDisplayView(127, 'P00127.000', '1260', 'LDC', 'Vessel', new Date(\"12/12/2017\"), 'D', 'BAR', 3000, 0.2, 100, 100, 1, 'ATRCTRL3', 'A1', 1, 'BULK', 'P'),\r\n        // new MissingInvoicesDisplayView(128, 'S00128.000', '799', 'ABBEYS01.P', 'Vessel', new Date(\"12/12/2017\"), 'S', 'BAR', 100, 0.2, 100, 100, 1, 'ATRCTRL3', 'A8', 1, 'BULK', 'S'),\r\n        // new MissingInvoicesDisplayView(129, 'P00129.000', '2270', 'LDC', 'Vessel', new Date(\"12/12/2017\"), 'D', 'BIO', 5500, 0.2, 100, 100, 1, 'ATREXEC1', 'A1', 1, 'BULK', 'P'),\r\n        // new MissingInvoicesDisplayView(130, 'S00130.000', '2270', 'ABDSRL01.P', 'Vessel', new Date(\"12/12/2017\"), 'D', 'BIO', 6000, 0.2, 100, 100, 1, 'ATRCTRL3', 'A8', 1, 'BULK', 'S'),\r\n        // new MissingInvoicesDisplayView(131, 'P00131.000', '2270', 'LDC', 'Vessel', new Date(\"12/12/2017\"), 'S', 'BIO', 6050, 0.2, 100, 100, 1, 'ATRCTRL3', 'A1', 1, 'BULK', 'P'),\r\n        // new MissingInvoicesDisplayView(132, 'P00132.000', '2270', 'LDC', 'Vessel', new Date(\"12/12/2017\"), 'D', 'BIO', 7000, 0.2, 100, 100, 1, 'ATRCTRL3', 'A8', 1, 'BULK', 'P'),\r\n        // new MissingInvoicesDisplayView(135, 'S00135.000', '1020', 'ACEGRA01.P', 'Vessel', new Date(\"12/12/2017\"), 'D', 'BAG', 100, 0.2, 100, 100, 1, 'ATRCTRL1', 'S4', 1, 'BULK', 'S'),\r\n        new MissingInvoicesDisplayView(18, 'S00028.000', '5540', 'AGENCI03.P', 'Vessel', new Date('12/12/2017'), 'D', 'BIO_OP', 8000, 0.2, 100, 100, 1, 'ATREXEC1', 'S4', 1, 'BULK', 'Sales'),\r\n        new MissingInvoicesDisplayView(19, 'P00029.000', '5530', 'LDC', 'Vessel', new Date('12/12/2017'), 'D', 'BIO_OP', 8001, 0.2, 100, 100, 1, 'ATREXEC1', 'A1', 1, 'BULK', 'Purchases'),\r\n        new MissingInvoicesDisplayView(20, 'P00030.000', '799', 'LDC', 'Vessel', new Date('12/12/2017'), 'D', 'CRN_UY', 134, 0.2, 100, 100, 1, 'ATRCTRL2', 'A8', 1, 'BULK', 'Purchases'),\r\n        new MissingInvoicesDisplayView(21, 'P00031.000', '2020', 'LDC', 'Vessel', new Date('12/12/2017'), 'D', 'CME_BR', 4000, 0.2, 100, 100, 1, 'ATRCTRL2', 'A1', 1, 'BULK', 'Purchases'),\r\n        new MissingInvoicesDisplayView(22, 'S00032.000', '1020', 'ABDSRL01.P', 'Vessel', new Date('12/12/2017'), 'D', 'BAR_AR', 807, 0.2, 100, 100, 1, 'ATRCTRL3', 'A8', 1, 'BULK', 'Sales'),\r\n        new MissingInvoicesDisplayView(23, 'S00033.000', '6680', 'ABBEYS01.P', 'Vessel', new Date('12/12/2017'), 'D', 'BAG_UY', 909, 0.2, 100, 100, 1, 'ATRCTRL3', 'A1', 1, 'BULK', 'Sales'),\r\n        new MissingInvoicesDisplayView(24, 'P00034.000', '3020', 'LDC', 'Vessel', new Date('12/12/2017'), 'S', 'BAR_AR', 980, 0.2, 100, 100, 1, 'ATRCTRL3', 'A1', 1, 'BULK', 'Purchases'),\r\n        new MissingInvoicesDisplayView(25, 'P00035.000', '1210', 'LDC', 'Vessel', new Date('12/12/2017'), 'S', 'BIO_AR', 600, 0.2, 100, 100, 1, 'ATRCTRL3', 'A8', 1, 'BULK', 'Purchases'),\r\n        new MissingInvoicesDisplayView(26, 'P00036.000', '751', 'LDC', 'Vessel', new Date('12/12/2017'), 'D', 'BAG_AR', 125, 0.2, 100, 100, 1, 'ATRCTRL1', 'S4', 1, 'BULK', 'Purchases'),\r\n\r\n    ];\r\n\r\n    filtersApplied: Filter[] = [];\r\n\r\n    resultsAfterFiltering: MissingInvoicesDisplayView[] = [];\r\n\r\n    selectedRowReference: string = '';\r\n\r\n    createForm() {\r\n        this.missingInvoicesForm = this.fb.group({\r\n            entityFilterCtrl: '',\r\n            platformFilterCtrl: '',\r\n            blDateFilterCtrl: '',\r\n            transportFilterCtrl: '',\r\n            contractTypeFilterCtrl: '',\r\n            userFilterCtrl: '',\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.selectionDataSource = new MatTableDataSource(this.missingInvoices);\r\n        this.selectionDataSource.paginator = this.paginator;\r\n        this.selectionDataSource.sort = this.sort;\r\n        this.dealType = String(this.route.snapshot.paramMap.get('dealType'));\r\n        if (this.dealType != 'null') {\r\n            let ctrl: AbstractControl = this.missingInvoicesForm.get('contractTypeFilterCtrl');\r\n            ctrl.setValue([this.dealType]);\r\n            this.contractTypeFilterChange();\r\n        }\r\n    }\r\n\r\n    removeFilters(filterId: string) {\r\n        this.filtersApplied = this.filtersApplied.filter((f) => f.filterId !== filterId);\r\n        this.applyFilters();\r\n    }\r\n    addFilters(filterId: string, filters: string[]) {\r\n        this.removeFilters(filterId);\r\n        this.filtersApplied.push(new Filter(filterId, filters));\r\n        this.applyFilters();\r\n    }\r\n    applyFilters() {\r\n        this.resultsAfterFiltering = this.missingInvoices;\r\n        this.applyEntityFilter();\r\n        this.applyContractTypeFilter();\r\n        this.selectionDataSource = new MatTableDataSource(this.resultsAfterFiltering);\r\n        this.selectionDataSource.paginator = this.paginator;\r\n        this.selectionDataSource.sort = this.sort;\r\n    }\r\n    filterChange(controlName: string) {\r\n        let selectedValues: string[] = this.missingInvoicesForm.get(controlName).value;\r\n        if (selectedValues.length === 0) { this.removeFilters(controlName); } else {\r\n            this.addFilters(controlName, selectedValues);\r\n        }\r\n    }\r\n    applyEntityFilter() {\r\n        let selectedEntities: string[] = this.missingInvoicesForm.get('entityFilterCtrl').value;\r\n        if (selectedEntities.length !== 0) {\r\n            this.resultsAfterFiltering = this.resultsAfterFiltering.filter((m) => selectedEntities.includes(m.entityFilter));\r\n        }\r\n    }\r\n    applyContractTypeFilter() {\r\n        let selectedEntities: string[] = this.missingInvoicesForm.get('contractTypeFilterCtrl').value;\r\n        if (selectedEntities.length !== 0) {\r\n            this.resultsAfterFiltering = this.resultsAfterFiltering.filter((m) => selectedEntities.includes(m.contractTypeFilter));\r\n        }\r\n    }\r\n\r\n    entityFilterChange() {\r\n        let selectedEntities: string[] = this.missingInvoicesForm.get('entityFilterCtrl').value;\r\n        if (selectedEntities.length === 0) {\r\n            this.selectionDataSource = new MatTableDataSource(this.missingInvoices);\r\n        } else {\r\n            this.selectionDataSource = new MatTableDataSource(this.missingInvoices.filter((m) => selectedEntities.includes(m.entityFilter)));\r\n        }\r\n        this.selectionDataSource.paginator = this.paginator;\r\n        this.selectionDataSource.sort = this.sort;\r\n    }\r\n\r\n    contractTypeFilterChange() {\r\n        // let selectedValues: string[] = this.missingInvoicesForm.get(\"contractTypeFilterCtrl\").value;\r\n        // if (selectedValues.length == 0) { this.removeFilters(\"contractTypeFilterCtrl\"); }\r\n        // else {\r\n        // \tthis.addFilters(\"contractTypeFilterCtrl\", selectedValues)\r\n        // }\r\n        let selectedEntities: string[] = this.missingInvoicesForm.get('contractTypeFilterCtrl').value;\r\n        if (selectedEntities.length === 0) {\r\n            this.selectionDataSource = new MatTableDataSource(this.missingInvoices);\r\n        } else {\r\n            this.selectionDataSource = new MatTableDataSource(this.missingInvoices.filter((m) => selectedEntities.includes(m.contractTypeFilter)));\r\n        }\r\n        this.selectionDataSource.paginator = this.paginator;\r\n        this.selectionDataSource.sort = this.sort;\r\n    }\r\n\r\n    contractSelected(row: any) {\r\n        if (this.selectionManager.isSelected(row)) {\r\n            this.selectionManager.clear();\r\n            this.selectedRowReference = '';\r\n        } else {\r\n            this.selectionManager.clear();\r\n            this.selectionManager.toggle(row);\r\n            this.selectedRowReference = row;\r\n        }\r\n    }\r\n\r\n    proceedButtonClicked() {\r\n        this.router.navigate(['/' + this.company + '/execution/invoicing/contract', String(this.selectionManager.selected[0].sectionID)]);\r\n        // this.router.navigate(['/execution/invoicing/workingpage', String(this.selectionManager.selected[0].sectionID)]);\r\n        // this.router.navigate(['/execution/invoicing/contract', this.selectionManager.selected[0].sectionID]);\r\n    }\r\n}\r\n","import { PhysicalDocumentTemplate } from './entities/document-template.entity';\r\n\r\nexport class DocumentTemplateSelectedEvent {\r\n    hasTemplate: boolean;\r\n    template?: PhysicalDocumentTemplate;\r\n\r\n    constructor(hasTemplate: boolean, template?: PhysicalDocumentTemplate) {\r\n        this.hasTemplate = hasTemplate;\r\n        if (template) {\r\n            this.template = template;\r\n        }\r\n    }\r\n}\r\n","export class AdditionalCost {\r\n    cashAdditionalCostId: number;\r\n    costDirectionId: number;\r\n    costTypeCode: string;\r\n    nominalAccountCode: string;\r\n    accountLineType: string;\r\n    currencyCode: string;\r\n    amount: number;\r\n    narrative: string;\r\n    accountId: number;\r\n    accountCode: string;\r\n    clientAccount: number;\r\n    counterpartyCode: string;\r\n    nominalAccountNumber: string;\r\n    customerVendor: string;\r\n    clientAccountMandatory: boolean;\r\n}\r\n","import { ContractStatus } from '../enums/contract-status.enum';\r\nimport { ContractTypes } from '../enums/contract-type.enum';\r\nimport { InvoicingStatus } from '../enums/invoicing-status.enum';\r\n\r\nexport class AssignedSection {\r\n    contractType: ContractTypes;\r\n    sectionId: number;\r\n    contractLabel: string;\r\n    buyerCode: string;\r\n    sellerCode: string;\r\n    quantity: number;\r\n    weightUnitId: number;\r\n    commodityId: number;\r\n    allocatedTo: string;\r\n    sectionAllocated: string;\r\n    blDate?: Date;\r\n    price: string;\r\n    priceUnitId: number;\r\n    currency: string;\r\n    departmentId: number;\r\n    charterRef: string;\r\n    assignedCharterReference: string;\r\n    assignmentDate: string;\r\n    vessel: string;\r\n    groupNumber: string;\r\n    portOrigin: string;\r\n    portDestination: string;\r\n    blRef: string;\r\n    counterparty: string;\r\n    invoiceRef: string;\r\n    pricingMethodId: number;\r\n    contractStatusCode: ContractStatus;\r\n    createdDateTime: Date;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    paymentTermCode: string;\r\n    shipmentPeriod: string;\r\n    removeSectionTrafficInfo: boolean;\r\n    invoicingStatus: InvoicingStatus;\r\n    contractBlDate: string;\r\n    marketSector: string;\r\n    allocatedSectionId: number;\r\n    allocatedToSectionId: number;\r\n    allocatedDateTime: Date;\r\n    amendedBy: string;\r\n    amendedOn: Date;\r\n    arbitrationCode: string;\r\n    arbitrationDescription: string;\r\n    buyerDescription: string;\r\n    commodity1: string;\r\n    commodity2: string;\r\n    commodity3: string;\r\n    commodity4: string;\r\n    commodity5: string;\r\n    commodityDescription: string;\r\n    companyId: string;\r\n    contractIssuedOn: Date;\r\n    contractQuantity: number;\r\n    contractTermCode: string;\r\n    contractTermDescription: string;\r\n    contractTermLocationPortCode: string;\r\n    contractTermLocationDescription: string;\r\n    contractValue: number;\r\n    counterpartyRef: string;\r\n    contractDate: Date;\r\n    createdBy: string;\r\n    cropYear: number;\r\n    currencyDescription: string;\r\n    deliveryPeriodStart: Date;\r\n    deliveryPeriodEnd: Date;\r\n    departmentCode: string;\r\n    departmentDescription: string;\r\n    groupingNumber: number;\r\n    displayContractType: string;\r\n    invoiceValue: number;\r\n    displayInvoicingStatus: string;\r\n    mainInvoiceReference: string;\r\n    mainInvoiceDate: Date;\r\n    memo: string;\r\n    otherReference: string;\r\n    parentContractLabel: string;\r\n    paymentDate: Date;\r\n    paymentTermDescription: string;\r\n    percentageInvoiced: number;\r\n    periodType: string;\r\n    physicalContractCode: string;\r\n    portOfOrigin: string;\r\n    portOfOriginDescription: string;\r\n    portOfDestination: string;\r\n    portOfDestinationDescription: string;\r\n    positionMonth: Date;\r\n    positionType: string;\r\n    originalQuantity: number;\r\n    priceCode: string;\r\n    priceUnitDescription: string;\r\n    quantityCodeInvoiced: string;\r\n    quantityInvoiced: number;\r\n    sellerDescription: string;\r\n    traderDisplayName: string;\r\n    vesselName: string;\r\n    weightUnitCode: string;\r\n    weightUnitDescription: string;\r\n    principalCommodity: string;\r\n    part2: string;\r\n    part3: string;\r\n    WeightCode: string;\r\n\r\n}\r\n","export class CashSummary {\r\n    cashId: number;\r\n    cashTypeId: number;\r\n    currencyCode: string;\r\n    amount: number;\r\n    counterPartyCode: string;\r\n    nominalAccountCode: string;\r\n    documentDate: Date;\r\n    valueDate: Date;\r\n    costTypeCode: string;\r\n    costDirectionId: number;\r\n    departmentId: number;\r\n    narrative: string;\r\n    charterId: number;\r\n    companyId: string;\r\n    createdDateTime: Date;\r\n    createdBy: string;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    transactionDocumentId: number;\r\n    authorizedForPosting: boolean;\r\n    counterpartyDocumentReference: string;\r\n    documentReference: string;\r\n    nominalBankAccountCode: string;\r\n    ownerName: string;\r\n    physicalDocumentId: number;\r\n    transactionDocumentTypeId: number;\r\n    departmentDescription: string;\r\n    charterCode: string;\r\n    matchingAmount: number;\r\n    traxStatus: number;\r\n    errorMessage: string;\r\n    postingStatus: number;\r\n    matchingCashId: number;\r\n    paymentCashId: number;\r\n    cashDocumentType: string\r\n}\r\n","import { CharterStatus } from \"../enums/charter-status.enum\";\r\nimport { AssignedSectionToCharterBulkClosure } from \"./assigned-section-to-charter-bulk-closure.entity\";\r\n\r\nexport class CharterBulkClosure {\r\n    dataVersionId: number;\r\n    charterId: number;\r\n    charterCode: string;\r\n    statusId: CharterStatus;\r\n    sectionsAssigned: AssignedSectionToCharterBulkClosure[];\r\n    category?: string;\r\n    message?: string;\r\n    vesselName: string;\r\n    description?: string;\r\n\r\n    constructor(charterData?: CharterBulkClosure) {\r\n        if (charterData) {\r\n            this.dataVersionId = charterData.dataVersionId;\r\n            this.charterId = charterData.charterId;\r\n            this.charterCode = charterData.charterCode;\r\n            this.statusId = charterData.statusId;\r\n            this.sectionsAssigned = charterData.sectionsAssigned;\r\n            this.category = charterData.category;\r\n            this.message = charterData.message;\r\n            this.vesselName = charterData.vesselName;\r\n            this.description = charterData.description;\r\n        }\r\n    }\r\n}","export class DocumentPopupButtonSettings {\r\n    createButtonText: string;\r\n    uploadButtonText: string;\r\n    createButtonTooltip: string;\r\n    uploadButtonTooltip: string;\r\n\r\n    constructor() {\r\n        this.createButtonText = 'Use Atlas Template';\r\n        this.uploadButtonText = 'Edit Template';\r\n        this.createButtonTooltip = 'Generate the document from Atlas';\r\n        this.uploadButtonTooltip = 'Generate the document from the file you edited and saved from your computer';\r\n    }\r\n}\r\n","export class Filter {\r\n\tfilterId: string;\r\n\tfilters: string[];\r\n\r\n\tconstructor(filterId: string, filters: string[]) {\r\n\t\tthis.filterId = filterId;\r\n\t\tthis.filters = filters;\r\n\t}\r\n}\r\n","export enum ApportionBasisType {\r\n    TotalValue = 0,\r\n    Quantity = 1,\r\n}\r\n","export enum CashSelectionType {\r\n    SimpleCashPayment = 1,\r\n    PaymentFullPartialTransaction = 2,\r\n    PaymentDifferentCurrency = 3,\r\n    PaymentDifferentClient = 4,\r\n    SimpleCashReceipt = 5,\r\n    ReceiptFullPartialTransaction = 6,\r\n    ReceiptDifferentCurrency = 7,\r\n}\r\n","export enum CashStepperType {\r\n    PaymentCashType = 0,\r\n    PaymentPickTransaction = 1,\r\n    PaymentDetails = 2,\r\n    PaymentSummary = 3,\r\n    ReceiptCashType = 0,\r\n    ReceiptDetails = 1,\r\n    ReceiptPickTransaction = 2,\r\n    ReceiptSummary = 3,\r\n}\r\n","export enum CharterClosureStatus {\r\n\r\n    // 1 -> Fully Invoiced, 2-> Quantity = 0 / ShippingStatus = Cancelled\r\n    // 3-> Invoice not finalized, 4 -> Unposted Invoices, 5 -> No BL Date/UNrelized Trade\r\n    // 6 -> Uninvoiced Costs, 7-> Uncashmatched Costs & Not posted Invoices\r\n    // sectionCloseValidStatus = [1, 2, 3, 4, 5, 6, 7];\r\n    FullyInvoiced = 1,\r\n    ZeroQuantity = 2,\r\n    CancelledShipping = 3,\r\n    InvoiceNotFinalized = 4,\r\n    UnpostedInvoice = 5,\r\n    NoBlDateUnrelizedTrade = 6,\r\n    UninvoicedCosts = 7,\r\n    UncashmatchedCosts = 8\r\n}\r\n","\r\nexport enum CharterGroupFunctionTypes {\r\n    CharterBulkClosure = 1,\r\n}\r\n","﻿export enum CostDirectionType {\r\n    Cr = 1,\r\n    Dr = 2,\r\n}","export enum CostSigns {\r\n    \"-\" = 1,\r\n    \"+\" = 2,\r\n}\r\n","export enum InvoicePaymentType {\r\n    Pay = 1,\r\n    Receive = 2,\r\n}\r\n","export enum PricingOptions {\r\n    OutrightAverage = 1,\r\n    OutrightActualPricePerSplit = 2,\r\n    GroupbycommodityPrice = 3,\r\n}\r\n","export enum ToleranceTypes\r\n{\r\n\tPercentage = 0,\r\n}\r\n","import { AssignedSection } from '../entities/assigned-section.entity';\r\nimport { ContractStatus } from '../enums/contract-status.enum';\r\nimport { ContractTypes } from '../enums/contract-type.enum';\r\n\r\nexport class AssignedSectionView {\r\n    contractType: ContractTypes;\r\n    sectionId: number;\r\n    contractLabel: string;\r\n    buyerCode: string;\r\n    sellerCode: string;\r\n    quantity: number;\r\n    originalQuantity: number;\r\n    weightUnitId: number;\r\n    commodityId: number;\r\n    allocatedTo: string;\r\n    sectionAllocated: string;\r\n    blDate?: Date;\r\n    price: string;\r\n    priceUnitId: number;\r\n    currency: string;\r\n    departmentId: number;\r\n    charterRef: string;\r\n    assignedCharterReference: string;\r\n    assignmentDate: string;\r\n    vessel: string;\r\n    groupNumber: string;\r\n    portOrigin: string;\r\n    portDestination: string;\r\n    blRef: string;\r\n    counterparty: string;\r\n    invoiceRef: string;\r\n    pricingMethodId: number;\r\n    contractStatusCode: ContractStatus;\r\n    createdDateTime: Date;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    paymentTermCode: string;\r\n    shipmentPeriod: string;\r\n    removeSectionTrafficInfo: boolean;\r\n    isTouched: boolean;\r\n    isValid: boolean;\r\n    isValidAllocatedTo: boolean;\r\n    invoicingStatus: number;\r\n    isSaleFullyInvoiced: boolean;\r\n    reasonForDeassignment: string;\r\n    reasonForReassignment: string;\r\n    highLightRow: boolean;\r\n    automatedChanged: boolean;\r\n    quantityStyleChangeForQuantity: boolean;\r\n    quantityStyleChangeForAllocatedTo: boolean;\r\n    editableAllocatedTo: boolean;\r\n    allocatedSectionId: number;\r\n    allocatedToSectionId: number;\r\n    isChecked: boolean;\r\n    contractBlDate: string;\r\n    marketSector: string;\r\n    allocatedDateTime: Date;\r\n    amendedBy: string;\r\n    amendedOn: Date;\r\n    arbitrationCode: string;\r\n    arbitrationDescription: string;\r\n    buyerDescription: string;\r\n    commodity1: string;\r\n    commodity2: string;\r\n    commodity3: string;\r\n    commodity4: string;\r\n    commodity5: string;\r\n    commodityDescription: string;\r\n    companyId: string;\r\n    contractIssuedOn: Date;\r\n    contractQuantity: number;\r\n    contractTermCode: string;\r\n    contractTermDescription: string;\r\n    contractTermLocationPortCode: string;\r\n    contractTermLocationDescription: string;\r\n    contractValue: number;\r\n    counterpartyRef: string;\r\n    contractDate: Date;\r\n    createdBy: string;\r\n    cropYear: number;\r\n    currencyDescription: string;\r\n    dataVersionId: number;\r\n    deliveryPeriodStart: Date;\r\n    deliveryPeriodEnd: Date;\r\n    departmentCode: string;\r\n    departmentDescription: string;\r\n    groupingNumber: number;\r\n    displayContractType: string;\r\n    invoiceValue: number;\r\n    displayInvoicingStatus: string;\r\n    mainInvoiceReference: string;\r\n    mainInvoiceDate: Date;\r\n    memo: string;\r\n    otherReference: string;\r\n    parentContractLabel: string;\r\n    paymentDate: Date;\r\n    paymentTermDescription: string;\r\n    percentageInvoiced: number;\r\n    periodType: string;\r\n    physicalContractCode: string;\r\n    portOfOrigin: string;\r\n    portOfOriginDescription: string;\r\n    portOfDestination: string;\r\n    portOfDestinationDescription: string;\r\n    positionMonth: Date;\r\n    positionType: string;\r\n    priceCode: string;\r\n    priceUnitDescription: string;\r\n    quantityCodeInvoiced: string;\r\n    quantityInvoiced: number;\r\n    sellerDescription: string;\r\n    traderDisplayName: string;\r\n    vesselName: string;\r\n    weightUnitCode: string;\r\n    weightUnitDescription: string;\r\n    reassignQuantity: number;\r\n    isnavopen: boolean;\r\n    isWashout: boolean;\r\n    principalCommodity: string;\r\n    part2: string;\r\n    part3: string;\r\n    WeightCode: string;\r\n    constructor(section: AssignedSection) {\r\n        this.contractType = section.contractType;\r\n        this.contractLabel = section.contractLabel;\r\n        this.commodityId = section.commodityId;\r\n        this.departmentId = section.departmentId;\r\n        this.buyerCode = section.buyerCode;\r\n        this.sellerCode = section.sellerCode;\r\n        this.currency = section.currency;\r\n        this.price = section.price;\r\n        this.blDate = section.blDate;\r\n        this.allocatedTo = section.allocatedTo;\r\n        this.assignedCharterReference = section.assignedCharterReference;\r\n        this.weightUnitId = section.weightUnitId;\r\n        this.priceUnitId = section.priceUnitId;\r\n        this.sectionId = section.sectionId;\r\n        this.quantity = section.quantity;\r\n        this.sectionAllocated = section.sectionAllocated;\r\n        this.charterRef = section.charterRef;\r\n        this.assignmentDate = section.assignmentDate;\r\n        this.vessel = section.vessel;\r\n        this.groupNumber = section.groupNumber;\r\n        this.portOrigin = section.portOrigin;\r\n        this.portDestination = section.portDestination;\r\n        this.marketSector = section.marketSector;\r\n        this.blRef = section.blRef;\r\n        this.counterparty = section.counterparty;\r\n        this.invoiceRef = section.invoiceRef;\r\n        this.pricingMethodId = section.pricingMethodId;\r\n        this.contractStatusCode = section.contractStatusCode;\r\n        this.createdDateTime = section.createdDateTime;\r\n        this.modifiedDateTime = section.modifiedDateTime;\r\n        this.modifiedBy = section.modifiedBy;\r\n        this.paymentTermCode = section.paymentTermCode;\r\n        this.shipmentPeriod = section.shipmentPeriod;\r\n        this.removeSectionTrafficInfo = section.removeSectionTrafficInfo;\r\n        this.isTouched = false;\r\n        this.originalQuantity = this.quantity;\r\n        this.isValid = true;\r\n        this.isValidAllocatedTo = true;\r\n        this.invoicingStatus = section.invoicingStatus;\r\n        this.isSaleFullyInvoiced = false;\r\n        this.reasonForDeassignment = '';\r\n        this.highLightRow = false;\r\n        this.automatedChanged = false;\r\n        this.quantityStyleChangeForQuantity = false;\r\n        this.quantityStyleChangeForAllocatedTo = false;\r\n        this.editableAllocatedTo = (section.allocatedTo) ? false : true;\r\n        this.isChecked = false;\r\n        this.contractBlDate = section.contractBlDate;\r\n        this.allocatedDateTime = section.allocatedDateTime;\r\n        this.amendedBy = section.amendedBy;\r\n        this.amendedOn = section.amendedOn;\r\n        this.arbitrationCode = section.arbitrationCode;\r\n        this.arbitrationDescription = section.arbitrationDescription;\r\n        this.buyerDescription = section.buyerDescription;\r\n        this.commodity1 = section.commodity1;\r\n        this.commodity2 = section.commodity2;\r\n        this.commodity3 = section.commodity3;\r\n        this.commodity4 = section.commodity4;\r\n        this.commodity5 = section.commodity5;\r\n        this.commodityDescription = section.commodityDescription;\r\n        this.companyId = section.companyId;\r\n        this.contractIssuedOn = section.contractIssuedOn;\r\n        this.contractQuantity = section.contractQuantity;\r\n        this.contractTermCode = section.contractTermCode;\r\n        this.contractTermDescription = section.contractTermDescription;\r\n        this.contractTermLocationPortCode = section.contractTermLocationPortCode;\r\n        this.contractTermLocationDescription = section.contractTermLocationDescription;\r\n        this.contractValue = section.contractValue;\r\n        this.counterpartyRef = section.counterpartyRef;\r\n        this.contractDate = section.contractDate;\r\n        this.createdBy = section.createdBy;\r\n        this.cropYear = section.cropYear;\r\n        this.currencyDescription = section.currencyDescription;\r\n        this.deliveryPeriodStart = section.deliveryPeriodStart;\r\n        this.deliveryPeriodEnd = section.deliveryPeriodEnd;\r\n        this.departmentCode = section.departmentCode;\r\n        this.departmentDescription = section.departmentDescription;\r\n        this.groupingNumber = section.groupingNumber;\r\n        this.displayContractType = section.displayContractType;\r\n        this.invoiceValue = section.invoiceValue;\r\n        this.displayInvoicingStatus = section.displayInvoicingStatus;\r\n        this.mainInvoiceReference = section.mainInvoiceReference;\r\n        this.mainInvoiceDate = section.mainInvoiceDate;\r\n        this.memo = section.memo;\r\n        this.otherReference = section.otherReference;\r\n        this.parentContractLabel = section.parentContractLabel;\r\n        this.paymentDate = section.paymentDate;\r\n        this.paymentTermDescription = section.paymentTermDescription;\r\n        this.percentageInvoiced = section.percentageInvoiced;\r\n        this.periodType = section.periodType;\r\n        this.physicalContractCode = section.physicalContractCode;\r\n        this.portOfOrigin = section.portOfOrigin;\r\n        this.portOfOriginDescription = section.portOfOriginDescription;\r\n        this.portOfDestination = section.portOfDestination;\r\n        this.portOfDestinationDescription = section.portOfDestinationDescription;\r\n        this.positionMonth = section.positionMonth;\r\n        this.positionType = section.positionType;\r\n        this.priceCode = section.priceCode;\r\n        this.priceUnitDescription = section.priceUnitDescription;\r\n        this.quantityCodeInvoiced = section.quantityCodeInvoiced;\r\n        this.quantityInvoiced = section.quantityInvoiced;\r\n        this.sellerDescription = section.sellerDescription;\r\n        this.traderDisplayName = section.traderDisplayName;\r\n        this.vesselName = section.vesselName;\r\n        this.weightUnitCode = section.weightUnitCode;\r\n        this.weightUnitDescription = section.weightUnitDescription;\r\n        this.isnavopen = false;\r\n        this.allocatedSectionId = section.allocatedSectionId;\r\n        this.allocatedToSectionId = section.allocatedToSectionId;\r\n        this.isWashout = false;\r\n        this.principalCommodity = section.principalCommodity;\r\n        this.part2 = section.part2;\r\n        this.part3 = section.part3;\r\n        this.departmentCode = section.departmentCode;\r\n        this.departmentDescription = section.departmentDescription;\r\n        this.WeightCode = section.WeightCode;\r\n\r\n    }\r\n}\r\n","import { CashSummary } from '../entities/cash.entity';\r\nimport { CashSelectionType } from '../enums/cash-selection-type';\r\nimport { CashType } from '../enums/cash-type.enum';\r\nimport { InterfaceStatus } from '../enums/interface-status.enum';\r\nimport { PostingStatus } from '../enums/posting-status.enum';\r\n\r\nexport class CashDisplayView {\r\n\r\n    cashId: number;\r\n    cashTypeId: number;\r\n    currencyCode: string;\r\n    amount: number;\r\n    counterPartyCode: string;\r\n    nominalAccountCode: string;\r\n    documentDate: Date;\r\n    valueDate: Date;\r\n    costTypeCode: string;\r\n    costDirectionId: number;\r\n    departmentId: number;\r\n    narrative: string;\r\n    charterId: number;\r\n    status: string;\r\n    errorMessage: string;\r\n    companyId: string;\r\n    transactionDocumentId: number;\r\n    traxStatus: string;\r\n    authorizedForPosting: boolean;\r\n    counterpartyDocumentReference: string;\r\n    documentReference: string;\r\n    nominalBankAccountCode: string;\r\n    ownerName: string;\r\n    physicalDocumentId: number;\r\n    transactionDocumentTypeId: number;\r\n    counterpartyOrNominalAccountCode: string;\r\n    departmentDescription: string;\r\n    charterCode: string;\r\n    documentType: string;\r\n    matchingAmount: number;\r\n    postingStatus: number;\r\n    paymentCashId: number;\r\n\r\n    constructor(cash?: CashSummary) {\r\n        if (cash) {\r\n            this.cashId = cash.cashId;\r\n            this.cashTypeId = cash.cashTypeId;\r\n            this.currencyCode = cash.currencyCode;\r\n            this.counterPartyCode = cash.counterPartyCode;\r\n            this.nominalAccountCode = cash.nominalAccountCode;\r\n            this.documentDate = cash.documentDate;\r\n            this.valueDate = cash.valueDate;\r\n            this.costTypeCode = cash.costTypeCode;\r\n            this.costDirectionId = cash.costDirectionId;\r\n            this.departmentId = cash.departmentId;\r\n            this.narrative = cash.narrative;\r\n            this.charterId = cash.charterId;\r\n            this.status = this.getPostingStatus(cash.postingStatus);\r\n            this.transactionDocumentId = cash.transactionDocumentId;\r\n            this.authorizedForPosting = cash.authorizedForPosting;\r\n            this.counterpartyDocumentReference = cash.counterpartyDocumentReference;\r\n            this.documentReference = cash.documentReference;\r\n            this.nominalBankAccountCode = cash.nominalBankAccountCode;\r\n            this.ownerName = cash.ownerName;\r\n            this.physicalDocumentId = cash.physicalDocumentId;\r\n            this.transactionDocumentTypeId = cash.transactionDocumentTypeId;\r\n            this.counterpartyOrNominalAccountCode = (this.costDirectionId === CashType.CashPayment ?\r\n                cash.counterPartyCode : cash.nominalAccountCode);\r\n\r\n            this.departmentDescription = cash.departmentDescription;\r\n            this.documentType = this.getDocumentType(this.cashTypeId);\r\n            this.charterCode = cash.charterCode;\r\n            this.amount = cash.cashTypeId === CashSelectionType.PaymentDifferentCurrency ||\r\n                cash.cashTypeId === CashSelectionType.ReceiptDifferentCurrency ?\r\n                cash.matchingAmount : cash.amount;\r\n            this.traxStatus = this.getTraxStatus(cash.traxStatus);\r\n            this.errorMessage = cash.errorMessage;\r\n            this.paymentCashId = cash.paymentCashId;\r\n        }\r\n    }\r\n\r\n    getDocumentType(value: number) {\r\n\r\n        // these return values are taken from/defined in FS.\r\n        if (value !== 0) {\r\n            if (value === CashSelectionType.SimpleCashPayment ||\r\n                value === CashSelectionType.SimpleCashReceipt) {\r\n                return 'Simple Cash';\r\n            } else\r\n                if (value === CashSelectionType.PaymentDifferentClient) {\r\n                    return 'Diff Cli';\r\n                } else\r\n                    if (value === CashSelectionType.PaymentFullPartialTransaction ||\r\n                        value === CashSelectionType.ReceiptFullPartialTransaction) {\r\n                        return 'Pick Tx';\r\n                    } else\r\n                        if (value === CashSelectionType.PaymentDifferentCurrency ||\r\n                            value === CashSelectionType.ReceiptDifferentCurrency) {\r\n                            return 'Diff Ccy';\r\n                        }\r\n\r\n        }\r\n    }\r\n    getTraxStatus(traxStatus: number) {\r\n        switch (traxStatus) {\r\n            case InterfaceStatus.ReadyToTransmit:\r\n                return 'Ready To Transmit';\r\n                break;\r\n            case InterfaceStatus.StandBy:\r\n                return 'Stand By';\r\n                break;\r\n            case InterfaceStatus.TransmitError:\r\n                return 'Transmit Error';\r\n                break;\r\n            default:\r\n                return InterfaceStatus[traxStatus];\r\n                break;\r\n        }\r\n    }\r\n    getPostingStatus(postingStatus: number) {\r\n        switch (postingStatus) {\r\n            case PostingStatus.Authorized:\r\n                return 'Authorized';\r\n            case PostingStatus.Deleted:\r\n                return 'Deleted';\r\n            case PostingStatus.Held:\r\n                return 'Held';\r\n            case PostingStatus.Incomplete:\r\n                return 'Incomplete';\r\n            case PostingStatus.MappingError:\r\n                return 'Mapping Error';\r\n            case PostingStatus.Posted:\r\n                return 'Posted';\r\n        }\r\n    }\r\n}\r\n","import { Charter } from '../entities/charter.entity';\r\n\r\nexport class CharterDisplayView {\r\n    charterId: number;\r\n    charterCode: string;\r\n    description: string;\r\n    transportType: string;\r\n    vessel: string;\r\n    loadingLocation: string;\r\n    departureDate: Date;\r\n    dischargeLocation: string;\r\n    arrivalDate: Date;\r\n    creationDate: Date;\r\n    createdBy: string;\r\n    blDate?: Date;\r\n    departmentId: number;\r\n    charterManagerId: number;\r\n    charterManagerSamAccountName: string;\r\n    charterStatusId: number;\r\n\r\n    constructor(charter?: Charter) {\r\n        if (charter) {\r\n            this.charterId = charter.charterId;\r\n            this.charterCode = charter.charterCode;\r\n            this.description = charter.description;\r\n            this.transportType = charter.transportTypeCode;\r\n            this.vessel = charter.vesselCode;\r\n            this.loadingLocation = charter.loadingLocationCode;\r\n            this.departureDate = charter.departureDate;\r\n            this.dischargeLocation = charter.dischargeLocationCode;\r\n            this.arrivalDate = charter.arrivalDate;\r\n            this.creationDate = charter.creationDate;\r\n            this.createdBy = charter.createdBy;\r\n            this.blDate = charter.blDate;\r\n            this.departmentId = charter.departmentId;\r\n            this.charterManagerId = charter.charterManagerId;\r\n            this.charterManagerSamAccountName = charter.charterManagerSamAccountName;\r\n            this.charterStatusId = charter.charterStatusId;\r\n        }\r\n    }\r\n}\r\n","export class MissingInvoicesDisplayView {\r\n\tsectionID: number;\r\n\tcontractRef: string;\r\n\tdepartment: string;\r\n\tcounterparty: string;\r\n\tvessel: string;\r\n\tblDate: Date;\r\n\tperiod: string;\r\n\tcommodity: string;\r\n\tquantity: number;\r\n\ttotal: number;\r\n\tprice: number;\r\n\tpriceDiff: number;\r\n\tlots: number;\r\n\tuser: string;\r\n\tentityFilter: string;\r\n\tblDateFilter: number;\r\n\ttransportFilter: string;\r\n\tcontractTypeFilter: string;\r\n\r\n\tconstructor(sectionID: number, contractRef: string, department: string, counterparty: string, vessel: string, blDate: Date, period: string, commodity: string, quantity: number, total: number, price: number, priceDiff: number, lots: number, user: string, entityFilter: string, blDateFilter: number, transportFilter: string, contractTypeFilter: string) {\r\n\t\tthis.contractRef = contractRef;\r\n\t\tthis.department = department;\r\n\t\tthis.counterparty = counterparty;\r\n\t\tthis.vessel = vessel;\r\n\t\tthis.blDate = blDate;\r\n\t\tthis.period = period;\r\n\t\tthis.commodity = commodity;\r\n\t\tthis.quantity = quantity;\r\n\t\tthis.total = total;\r\n\t\tthis.price = price;\r\n\t\tthis.priceDiff = priceDiff;\r\n\t\tthis.lots = lots;\r\n\t\tthis.user = user;\r\n\t\tthis.entityFilter = entityFilter;\r\n\t\tthis.blDateFilter = blDateFilter;\r\n\t\tthis.transportFilter = transportFilter;\r\n\t\tthis.contractTypeFilter = contractTypeFilter;\r\n\t\tthis.sectionID = sectionID;\r\n\t}\r\n}\r\n","import { TradeSearchResult } from '../dtos/trade';\r\nimport { ContractStatus } from '../enums/contract-status.enum';\r\nimport { ContractTypes } from '../enums/contract-type.enum';\r\nimport { PricingMethods } from './../enums/pricing-method.enum';\r\n\r\nexport class TradePartialDisplayView {\r\n    contractLabel: string;\r\n    type: string;\r\n    pricingMethodLabel: string;\r\n    pricingMethodId: number;\r\n    status: string;\r\n    commodityCode: string;\r\n    paymentTermCode: string;\r\n    departmentCode: string;\r\n\r\n    quantity: number;\r\n    weightCode: string;\r\n    price: number;\r\n    currencyCode: string;\r\n    contractValue: number;\r\n\r\n    contractDate: Date;\r\n    lastModifiedDate: Date;\r\n    lastModifiedBy: string;\r\n    blDate: Date;\r\n\r\n    sectionId: number;\r\n    allocatedTo: string;\r\n    charter: string;\r\n    parentRef: string;\r\n\r\n    invoicedQuantity: number;\r\n    invoicedQuantityUnit: string;\r\n    invoiceValue: number;\r\n    valuationPrice: number;\r\n\r\n    constructor(trade?: TradeSearchResult) {\r\n        if (trade) {\r\n            this.contractLabel = trade.contractLabel;\r\n            this.type = ContractTypes[trade.type];\r\n            this.pricingMethodId = trade.pricingMethodId;\r\n\t\t\tthis.pricingMethodLabel = PricingMethods[trade.pricingMethodId];\r\n            this.status = ContractStatus[trade.status];\r\n            this.commodityCode = trade.commodityCode;\r\n            this.paymentTermCode = trade.paymentTermCode;\r\n            this.departmentCode = trade.departmentCode;\r\n\r\n            this.quantity = trade.quantity;\r\n            this.weightCode = trade.weightCode;\r\n            this.price = trade.price;\r\n            this.currencyCode = trade.currencyCode;\r\n            this.contractValue = trade.contractValue;\r\n\r\n            this.contractDate = trade.contractDate;\r\n            this.lastModifiedDate = trade.modifiedDateTime;\r\n            this.lastModifiedBy = trade.modifiedBy;\r\n\r\n            this.sectionId = trade.sectionId;\r\n            this.allocatedTo = trade.allocatedTo;\r\n            this.charter = trade.charterCode;\r\n            this.parentRef = trade.parentRef;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { ExecutionService } from '../http-services/execution.service';\r\nimport { User } from '../../entities/user.entity';\r\n\r\n@Injectable()\r\nexport class CharterManagerDataLoader implements MasterDataLoader {\r\n    constructor(private executionService: ExecutionService) { }\r\n\r\n    getData(): Observable<User[]> {\r\n        const list = this.executionService.getAllCharterManagers()\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n\r\n}\r\n","import { AtlasNumber } from '../../../../shared/entities/atlas-number.entity';\r\n\r\nexport class CashMatching {\r\n    documentMatchingId: number;\r\n    associatedAccountCode: string;\r\n    physicalContractCode: string;\r\n    clientReference: string;\r\n    contractSectionCode: string;\r\n    paymentTermCode: string;\r\n    quantity: number;\r\n    amountPaidInDiffCcy: number;\r\n    accountReference: string;\r\n    commodityId: string;\r\n    documentNarrativeCode: string;\r\n    amountToBePaid: number;\r\n    accountLineTypeId: number;\r\n    charterCode: string;\r\n    costTypeCode: string;\r\n    amount: number;\r\n    departmentCode: string;\r\n    departmentId: number;\r\n    documentReference: string;\r\n    secondaryDocumentReference: string;\r\n    currencyCode: string;\r\n    documentDate: Date;\r\n    valueDate: Date;\r\n    expenseCode: string;\r\n    documentType: string;\r\n    balance: AtlasNumber;\r\n\r\n    transactionDocumentId: number;\r\n    authorizedForPosting: boolean;\r\n    totalAmount: AtlasNumber;\r\n    counterPartyId: number;\r\n    paymentTermId: number;\r\n    transactionDocumentTypeId: number;\r\n    matchFlagId: number;\r\n    isChecked: boolean;\r\n    rate: number;\r\n\r\n    externalReference: string;\r\n    narrative: string;\r\n    charterId: number;\r\n    transactionDirectionId: number;\r\n    amountInFunctionalCurrency: number;\r\n    amountInStatutoryCurrency: number;\r\n    roeType: string;\r\n    currencyCodeFrom: string;\r\n    currencyCodeTo: string;\r\n\r\n    invoiceGLDate: Date;\r\n    sourceJournalLineId: number;\r\n    sourceInvoiceId: number;\r\n    sourceCashLineId: number;\r\n    postedDate: Date;\r\n}\r\n","import { AdditionalCost } from '../../../../shared/entities/additional-cost.entity';\r\nimport { CashMatching } from './cash-matching';\r\nexport class CashRecord {\r\n\r\n    cashId: number;\r\n    documentId: number;\r\n    cashTypeId: number;\r\n    nominalBankAccount: string;\r\n    currencyCode: string;\r\n    amount: number;\r\n    counterpartyCode: string;\r\n    counterPartyId: number;\r\n    traxStatus: number;\r\n    traxInterfaceStatus: string;\r\n    interfaceStatus: number;\r\n    nominalBankAccountCode: number;\r\n    documentDate: Date;\r\n    valueDate: Date;\r\n    costTypeCode: string;\r\n    bankAccountCode: string;\r\n    costDirectionId: number;\r\n    departmentId: number;\r\n    documentReference: string;\r\n    narrative: string;\r\n    charterId: number;\r\n    clientBankAccount: number;\r\n    toTransmitToTreasury: boolean;\r\n    payee: string;\r\n    payer: string;\r\n    authorizedForPosting: boolean;\r\n    status: number;\r\n    companyId: string;\r\n    createdDateTime: Date;\r\n    createdBy: string;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    ownerName: string;\r\n    nominalAccountCode: string;\r\n    counterpartyDocumentReference: string;\r\n    departmentCode: string;\r\n    charterReference: string;\r\n    additionalCostDetails: AdditionalCost[] = [];\r\n    childCashTypeId: number;\r\n    urgentPayment: boolean;\r\n    documentMatchings: CashMatching[] = [];\r\n    matchingCashId: number;\r\n    matchingCurrency: string;\r\n    matchingAmount: number;\r\n    matchingRate: number;\r\n    matchingRateType: string;\r\n    matchingStatusId: number;\r\n    matchFlagId: number;\r\n    transactionDocumentId: number;\r\n    matchedDocumentReference: string;\r\n    physicalDocumentId?: number;\r\n    isDraft: boolean;\r\n    template: string;\r\n\r\n    functionalCurrencyCode: string;\r\n    statutoryCurrencyCode: string;\r\n\r\n    functionalToStatutoryCurrenyRate: number;\r\n    functionalToStatutoryCurrencyRoeType: string;\r\n\r\n    cashCurrencyCode: string;\r\n    cashCurrencyRoeType: string;\r\n    cashCurrencyRate: number;\r\n\r\n    c2CCode: string;\r\n    nominalAlternativeAccount: boolean;\r\n    costAlternativeCode: boolean;\r\n    departmentAlternativeCode: string;\r\n    taxInterfaceCode: string;\r\n\r\n    // used for diff client\r\n    matchingCounterpartyId: number;\r\n    paymentCounterPartyCode: string;\r\n    paymentCounterPartyId: number;\r\n    counterPartyTransferId: number;\r\n\r\n    interfaceErrorMessage: string;\r\n    postingErrorMessage: string;\r\n\r\n    paymentCashId: number;\r\n}\r\n","export class CashSetup {\r\n    paymentCostTypeCode: string;\r\n    receiptCostTypeCode: string;\r\n    toTransmitToTreasury: boolean;\r\n    authorizedForPosting: boolean;\r\n    nominalAccountId: number;\r\n    nominalAccountCode: string;\r\n    urgentPayment: boolean;\r\n    currencyCode: string;\r\n\r\n}\r\n","\r\nexport class ContractsToCostInvoice {\r\n    costId: number;\r\n    sectionId: number;\r\n    contractReference: string;\r\n    principalCommodity: string;\r\n    supplierCode: string;\r\n    contractTermCode: string;\r\n    charterReference: string;\r\n    quantity: string;\r\n    weightCode: string;\r\n    costTypeCode: string;\r\n    costDirection: string;\r\n    currencyCode: string;\r\n    rate: number;\r\n    narrative: string;\r\n    originalEstimatedRate: number;\r\n    contractDate: Date;\r\n    rateTypeCode: string;\r\n    price: number;\r\n    weightConversionFactor: number;\r\n    priceConversionFactor: number;\r\n    commodity: string;\r\n    commodity2: string;\r\n    commodity3: string;\r\n    commodity4: string;\r\n    commodity5: string;\r\n    invoicedAmount: number;\r\n    rateConversionFactor: number;\r\n\r\n    // -- not coming from API\r\n    costAmountToInvoice: number;\r\n    invoicePercent: number;\r\n    costAmount: number;\r\n    vatCode: string;\r\n    vatAmount: number;\r\n    invoicedPercentage: number;\r\n    quantityToInvoice: number;\r\n    originalQuantity: string;\r\n\r\n}\r\n","export class ContractsToInvoice {\r\n    sectionId: number;\r\n    contractQuantity: number;\r\n    contractNumber: number;\r\n    commodity: string;\r\n    quantityCode: string;\r\n    charter: string;\r\n    contractTermCode: string;\r\n    contractReference: string;\r\n    counterparty: string;\r\n    currencyCode: string;\r\n    allocationContract: string;\r\n    invoicedQuantity: number;\r\n    uninvoicedQuantity: number;\r\n    quantityToInvoice: number;\r\n    contractTypeCode: string;\r\n    price: number;\r\n    priceConversionFactor: number;\r\n    bLDate: Date;\r\n    arrivalDate: Date;\r\n    contractDate: Date;\r\n    weightConversionFactor: number;\r\n    paymentTermCode: string;\r\n    allocatedQuantity: number;\r\n    priceUnitId: number;\r\n    quantityUnitId: number;\r\n    totalInvoiceValue: number;\r\n    premiumDiscountType: number;\r\n    premiumDiscountBasis: number;\r\n    premiumDiscountValue: number;\r\n    priceCode: string;\r\n    commodity2: string;\r\n    commodity3: string;\r\n    commodity4: string;\r\n    commodity5: string;\r\n}\r\n","\r\nexport class ContractsToWashoutInvoice {\r\n    sectionId: number;\r\n    dataVersionId: number;\r\n    contractReference: string;\r\n    contractType: number;\r\n    counterparty: string;\r\n    principalCommodity: string;\r\n    contractTermCode: string;\r\n    allocatedContract: string;\r\n    charterReference: string;\r\n    quantityCode: string;\r\n    quantity: number;\r\n    currencyCode: string;\r\n    priceCode: string;\r\n    price: number;\r\n    paymentTermCode: string;\r\n    invoicedQuantity: number;\r\n    blDate: Date;\r\n    contractDate: Date;\r\n    totalInvoiceValue: number;\r\n    commodity: string;\r\n    commodity2: string;\r\n    commodity3: string;\r\n    commodity4: string;\r\n    commodity5: string;\r\n    department: string;\r\n    premiumDiscountType: number;\r\n    premiumDiscountBasis: number;\r\n    premiumDiscountValue: number;\r\n    weightConversionFactor: number;\r\n    priceConversionFactor: number;\r\n}\r\n","export class InvoiceForCashMatching {\r\n    counterpartyreference: string;\r\n    currency: string;\r\n    departmentCode: string;\r\n    clientName: string;\r\n    documentReference: string;\r\n    invoiceDocumentReference: string;\r\n    amount: number;\r\n}\r\n","import { QuantityToInvoiceType } from '../../../../shared/enums/quantity-to-invoice.enum';\r\nimport { InvoiceTypes } from '../../../enums/invoice-type.enum';\r\nimport { InvoiceSummaryLineRecord } from './invoice-summary-line-record';\r\n\r\nexport class InvoiceSummaryRecord {\r\n    invoiceCode: string;\r\n    invoiceDate: Date;\r\n    invoiceType: InvoiceTypes;\r\n    counterparty: string;\r\n    paymentTermsCode: string;\r\n    dueDate: Date;\r\n    externalInvoiceReference: string;\r\n    externalInhouse: string;\r\n    currency: string;\r\n    totalInvoiceValue: number;\r\n    ModifiedDateTime: Date;\r\n    QuantityToInvoiceType: QuantityToInvoiceType;\r\n    summaryLines: InvoiceSummaryLineRecord[];\r\n    reversedInvoiceReference: string;\r\n    clientAccount: string;\r\n    reversedDocumentDate: Date;\r\n    originalInvoiceType: InvoiceTypes;\r\n}\r\n","export class TaxRecord {\r\n    vatCode: string;\r\n    vatDescription: string;\r\n    rate: number;\r\n    currencyCode: string;\r\n    decimalOption: number;\r\n    amount: number;\r\n    costDirection: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ExecutionService } from '../http-services/execution.service';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class CashListPaymentDataLoader implements DataLoader {\r\n\r\n    constructor(private executionService: ExecutionService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n\r\n        const list = this.executionService.searchCashPaymentList(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ExecutionService } from '../http-services/execution.service';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class CashListReceiptDataLoader implements DataLoader {\r\n\r\n    constructor(private executionService: ExecutionService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n        // has to replace with execution search service call\r\n        const list = this.executionService.searchCashReceiptList(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { AssignedSection } from '../../entities/assigned-section.entity';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { ExecutionService } from '../http-services/execution.service';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class CharterAssignmentSectionsDataLoader implements DataLoader {\r\n\r\n    constructor(private executionService: ExecutionService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n        const list = this.executionService.searchAssignSections(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { Charter } from '../../entities/charter.entity';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { ExecutionService } from '../http-services/execution.service';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class CharterListDataLoader implements DataLoader {\r\n\r\n    constructor(private executionService: ExecutionService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n        const list = this.executionService.charterSearch(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { DocumentService } from '../http-services/document.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class TradeDocumentDataLoader implements DataLoader {\r\n    constructor(private documentService: DocumentService,\r\n        private route: ActivatedRoute, ) { }\r\n\r\n    recordId = Number(this.route.snapshot.paramMap.get('recordId'));\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<any> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n            dataVersionId,\r\n        };\r\n\r\n        const list = this.documentService.getGeneratedDocuments(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    if (this.recordId) {\r\n                        const result = data.value.find((record) => record.recordId === this.recordId)\r\n                        return result;\r\n                    }\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CostType } from '../../entities/cost-type.entity';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { PagingOptions } from '../../entities/http-services/paging-options';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\nimport { MasterdataService } from '../http-services/masterdata.service';\r\n\r\n@Injectable()\r\nexport class CostTypeDataLoader implements MasterDataLoader {\r\n    constructor(private masterDataService: MasterdataService) { }\r\n\r\n    getData(searchTerm: string,\r\n        pagingOptions: PagingOptions): Observable<CostType[]> {\r\n\r\n        const list = this.masterDataService.getCostTypes(searchTerm, pagingOptions)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n"],"sourceRoot":""}