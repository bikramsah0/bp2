{"version":3,"sources":["webpack:///./Client/app/shared/directives/number-validators.directive.ts","webpack:///./Client/app/shared/entities/charter.entity.ts","webpack:///./Client/app/shared/entities/invoice-line-record.entity.ts","webpack:///./Client/app/shared/entities/lock-functional-context.entity.ts","webpack:///./Client/app/shared/enums/charter-status.enum.ts","webpack:///./Client/app/shared/enums/cost-direction.enum.ts","webpack:///./Client/app/shared/enums/group-function-type.ts","webpack:///./Client/app/shared/enums/invoice-source-type.enum.ts","webpack:///./Client/app/shared/enums/invoicing-status.enum.ts","webpack:///./Client/app/shared/enums/posting-status.enum.ts","webpack:///./Client/app/shared/enums/quantity-to-invoice.enum.ts","webpack:///./Client/app/shared/enums/rate-type.enum.ts","webpack:///./Client/app/shared/enums/shipping-type-enum.ts","webpack:///./Client/app/shared/enums/split-type.enum.ts","webpack:///./Client/app/shared/enums/trade-fields.enum.ts","webpack:///./Client/app/shared/enums/transaction-document-type.enum.ts","webpack:///./Client/app/shared/models/allocated-trade-display-view.ts","webpack:///./Client/app/shared/services/customDateAdapter.ts","webpack:///./Client/app/shared/services/execution/dtos/invoice-record.ts","webpack:///./Client/app/shared/services/masterdata/counterparty-data-loader.ts","webpack:///./Client/app/shared/validators/warning-messages-validator.validator.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-date-validator.validator.ts","webpack:///./Client/app/trading/entities/allocation-message.ts"],"names":[],"mappings":"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","file":"execution-execution-module~trading-trading-module.js","sourcesContent":["import { ValidatorFn } from \"@angular/forms/src/directives/validators\";\r\nimport { AbstractControl } from \"@angular/forms/src/model\";\r\n\r\nexport function isPositive(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n        if (Number(control.value) < 0) {\r\n            return { isPositiveError: true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nexport function isDifferencePositive(calculatedValue: number): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n        if (Number(calculatedValue) - Number(control.value) < 0) {\r\n            return { isDifferencePositiveError: true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nexport function isGreatherThanZero(): ValidatorFn {\r\n\treturn (control: AbstractControl): { [key: string]: any } => {\r\n\t\tlet value = control.value;\r\n\t\tif (!isNaN(value) && control.value != '' && (Number(value) <= 0)) {\r\n\t\t\treturn { \"isGreatherThanZeroError\" : true };\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n}\r\n\r\n","import { AssignedSection } from './assigned-section.entity';\r\nimport { Section } from './section.entity';\r\n\r\nexport class Charter {\r\n    charterId: number;\r\n    charterCode: string;\r\n    description: string;\r\n    transportTypeCode: string;\r\n    vesselCode: string;\r\n    vesselId: number;\r\n    vesselBuilt: string;\r\n    loadingLocationCode: string;\r\n    departureDate: Date;\r\n    dischargeLocationCode: string;\r\n    arrivalDate: Date;\r\n    creationDate: Date;\r\n    createdBy: string;\r\n    charterManagerId: number;\r\n    charterManagerSamAccountName: string;\r\n    charterManagerDisplayName: string;\r\n    memo: string;\r\n    departmentId: number;\r\n    blDate?: Date;\r\n    blRef: string;\r\n    currency: string;\r\n    weightUnitId: number;\r\n    modifiedDate: Date;\r\n    modifiedBy: string;\r\n    assignmentDate: Date;\r\n    assignedSections: AssignedSection[];\r\n    charterStatusId: number;\r\n    marketSector: string;\r\n    shippingStatusCode: string;\r\n    shippingStatusDescription: string;\r\n    sectionsAssigned: Section[];\r\n    company: string;\r\n    assignedBy: string;\r\n    assignedByDisplayName: string;\r\n    departmentCode: string;\r\n    departmentDescription: string;\r\n    charterStatusDescription: string;\r\n}\r\n","\r\nexport class InvoiceLineRecord {\r\n    sectionID: number;\r\n    costID: number;\r\n    invoiceID: number;\r\n    lineNumber: number;\r\n    quantity: string;\r\n    weightUnitId: number;\r\n    price: number;\r\n    priceUnitId: number;\r\n    currencyCode: string;\r\n    vatCode: string;\r\n    vatAmount: number;\r\n    lineAmount: number;\r\n    invoicePercent: number;\r\n    authorizedForPosting: number;\r\n    costTypeCode: string;\r\n    costDirectionId: number;\r\n    rateTypeId: number;\r\n    contractType: number;\r\n    narrative: string;\r\n    inPL: boolean;\r\n    noAct: boolean;\r\n}\r\n","export enum LockFunctionalContext {\r\n    TradeEdit = 100,\r\n    RelativeTradeEdit = 101,\r\n    TradeApproval = 102,\r\n    TradeSplit = 103,\r\n    TradeTranche = 104,\r\n    RelativeTradeSplit = 105,\r\n    RelativeTradeTranche = 106,\r\n    TradeAssignment = 107,\r\n    TradeDeassignment = 108,\r\n    BulkEdition = 109,\r\n    BulkApproval = 110,\r\n    TradeReassignment = 111,\r\n    TradeMerge = 112,\r\n    TradeBulkClosure = 113,\r\n    FxDeal = 114,\r\n    CharterEdit = 200,\r\n    CharterDeletion = 201,\r\n    CharterBulkClosure = 202,\r\n    ContractInvoicing = 300,\r\n    CostInvoicing = 301,\r\n    GoodsAndCostsInvoicing = 302,\r\n    WashoutInvoicing = 303,\r\n    ReversalInvoicing = 304,\r\n    Allocation = 400,\r\n    RelativeAllocation = 401,\r\n    Deallocation = 402,\r\n    BulkAllocation = 403,\r\n    BulkDeallocation = 404,\r\n    RelativeDeallocation = 403,\r\n    CostMatrixEdition = 500,\r\n    CostMatrixDeletion = 501,\r\n    MasterDataEdition = 600,\r\n    UserAccountEdition = 700,\r\n    UserAccountDeletion = 701,\r\n    UserProfileEdition = 800,\r\n    UserProfileDeletion = 801,\r\n    AccountingDocumentEdition = 900,\r\n    AccountingDocumentAuthorizeForPosting = 901,\r\n    AccountingDocumentReversal = 902,\r\n    CashDocumentEdition = 1000,\r\n    CashDocumentDeletion = 1001,\r\n}\r\n","export enum CharterStatus {\r\n    Open = 1,\r\n    Closed = 2,\r\n}","export enum CostDirections {\r\n    Payable = 1,\r\n    Receivable = 2,\r\n}\r\n","\r\nexport enum GroupFunctionTypes {\r\n    TradeBulkEdition = 1,\r\n    TradeBulkApproval = 2,\r\n    Costs = 3,\r\n    TradeBulkClosure = 4,\r\n    TradeBulkAllocation = 5,\r\n    TradeBulkDeAllocation = 6,\r\n}\r\n","export enum InvoiceSourceType {\r\n    Inhouse = 0,\r\n    External = 1,\r\n}\r\n","export enum InvoicingStatus {\r\n    Uninvoiced = 1,\r\n    FinalInvoiceRequired = 2,\r\n    Finalized = 3,\r\n}","export enum PostingStatus {\r\n    Incomplete = 1,\r\n    Held = 2,\r\n    MappingError = 3,\r\n    Authorized = 4,\r\n    Posted = 5,\r\n    Deleted = 6,\r\n}\r\n","export enum QuantityToInvoiceType {\r\n\r\n    Contract = 0,\r\n    Loaded = 1,\r\n    Discharged = 2,\r\n}\r\n","export enum RateTypes {\r\n    Unknown = 0,\r\n    Amount = 1,\r\n    Percent = 2,\r\n    Rate = 3,\r\n}\r\n","export enum ShippingType {\r\n    NoTransfer = 1,\r\n    PurchaseToSale = 2,\r\n    SaleToPurchase = 3,\r\n}\r\n","export enum SplitType {\r\n    SourceSplit = 1,\r\n    TargetSplit = 2,\r\n    Both = 3,\r\n    None = 4,\r\n}\r\n","\r\nexport enum TradeFields {\r\n    ArbitrationId,\r\n    BuyerId,\r\n    CharterId,\r\n    ContractDate,\r\n    ContractedValue,\r\n    ContractStatusCode,\r\n    ContractTermLocationId,\r\n    CounterpartyRef,\r\n    CropYear,\r\n    CurrencyCode,\r\n    DeliveryPeriodEnd,\r\n    DeliveryPeriodStart,\r\n    DepartmentId,\r\n    FirstApprovalDateTime,\r\n    MarketSectorId,\r\n    Memorandum,\r\n    MonthPositionIndex,\r\n    OriginalQuantity,\r\n    Part2,\r\n    Part3,\r\n    Part4,\r\n    Part5,\r\n    PaymentTermId,\r\n    PeriodTypeId,\r\n    PhysicalContractCode,\r\n    PortDestinationId,\r\n    PortOriginId,\r\n    PositionMonthType,\r\n    PremiumDiscountBasis,\r\n    PremiumDiscountCurrency,\r\n    PremiumDiscountValue,\r\n    Price,\r\n    PricingMethodId,\r\n    PrincipalCommodity,\r\n    Quantity,\r\n    SellerId,\r\n    ShippingPeriod,\r\n    TraderId,\r\n    Type,\r\n\r\n}\r\n","export enum TransactionDocumentTypes {\r\n    'PI/SI' = 0,\r\n    'CN/DN' = 1,\r\n    Original = 2,\r\n}\r\n","import { AllocatedTradeSearchResult } from '../dtos/allocated-trade';\r\n\r\nexport class AllocatedTradeDisplayView {\r\n    contractLabel: string;\r\n    commodityCode: string;\r\n    quantity: number;\r\n    weightCode: string;\r\n    counterparty: string;\r\n    shippingPeriod: string;\r\n    departmentCode: string;\r\n    sectionId: number;\r\n    type: string;\r\n    principalCommodity: string;\r\n    commodityOrigin: string;\r\n    commodityGrade: string;\r\n    commodityLvl4: string;\r\n    commodityLvl5: string;\r\n    allocatedSectionId: number;\r\n    currencyCode: string;\r\n\r\n    constructor(allocatedTrade?: AllocatedTradeSearchResult) {\r\n        if (allocatedTrade) {\r\n            this.contractLabel = allocatedTrade.physicalContractCode;\r\n            this.commodityCode = allocatedTrade.commodityCode;\r\n            this.quantity = allocatedTrade.quantity;\r\n            this.weightCode = allocatedTrade.weightCode;\r\n            this.counterparty = allocatedTrade.counterparty;\r\n            this.shippingPeriod = allocatedTrade.shippingPeriod;\r\n            this.departmentCode = allocatedTrade.departmentCode;\r\n            this.sectionId = allocatedTrade.sectionId;\r\n            this.type = allocatedTrade.type;\r\n            this.principalCommodity = allocatedTrade.principalCommodity;\r\n            this.commodityOrigin = allocatedTrade.commodityOrigin;\r\n            this.commodityGrade = allocatedTrade.commodityGrade;\r\n            this.commodityLvl4 = allocatedTrade.commodityLvl4;\r\n            this.commodityLvl5 = allocatedTrade.commodityLvl5;\r\n            this.allocatedSectionId = allocatedTrade.allocatedSectionId;\r\n            this.currencyCode = allocatedTrade.currencyCode;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport * as moment from 'moment';\r\nimport { AuthorizationService } from '../../core/services/authorization.service';\r\nimport { SecurityService } from '../../shared/services/security.service';\r\nimport { ConfigurationService } from './http-services/configuration.service';\r\n\r\n@Injectable()\r\nexport class CustomDateAdapter extends MomentDateAdapter {\r\n    // this is the default date set to the system\r\n    customDateFormat: string = undefined;\r\n    constructor(private securityService: SecurityService,\r\n        protected configurationService: ConfigurationService,\r\n        private authorizationService: AuthorizationService) {\r\n        super('en-US');\r\n    }\r\n\r\n    public format(date: moment.Moment, displayFormat: string): string {\r\n        if (!this.customDateFormat) {\r\n            this.getdateFormat();\r\n        }\r\n        return date.locale('en-US').format(this.customDateFormat);\r\n    }\r\n\r\n    getdateFormat() {\r\n        this.customDateFormat = this.authorizationService.getUserDateFormat();\r\n    }\r\n}\r\n","import { DocumentRecord } from '../../../entities/document-record.entity';\r\nimport { InvoiceLineRecord } from '../../../entities/invoice-line-record.entity';\r\nimport { CostDirections } from '../../../enums/cost-direction.enum';\r\nimport { InvoiceTypes } from '../../../enums/invoice-type.enum';\r\nimport { QuantityToInvoiceType } from '../../../enums/quantity-to-invoice.enum';\r\nimport { TransactionDocumentTypes } from '../../../enums/transaction-document-type.enum';\r\nimport { TransactionRecord } from './invoice-transaction-record';\r\n\r\nexport class InvoiceRecord {\r\n    invoiceId: number;\r\n    invoiceLabel: string;\r\n    externalInvoiceRef: string;\r\n    counterpartyCode: string;\r\n    totalGoodsValue: number; // totalPriceHT: number;\r\n    totalInvoiceValue: number; // totalPriceTTC: number;\r\n    invoiceDate: Date;\r\n    dueDate: Date;\r\n    currency: string;\r\n    invoiceType: InvoiceTypes;\r\n    paymentTerms: string;\r\n    quantityToInvoiceType: QuantityToInvoiceType;\r\n    companyId: string;\r\n    template: string;\r\n    externalInhouse: number;\r\n    document: DocumentRecord;\r\n    transaction: TransactionRecord;\r\n    invoiceLines: InvoiceLineRecord[];\r\n    authorizedForPosting: boolean;\r\n    quantityToInvoice: number;\r\n    transactionDocumentId: number;\r\n    documentType: TransactionDocumentTypes;\r\n    costDirection: CostDirections;\r\n    decimalOption: number;\r\n    invoiceTypeId: number;\r\n    transactionDocumentTypeId: number;\r\n    nominalAccountNumber: string;\r\n    physicalDocumentId?: number;\r\n    isDraft: boolean;\r\n    bankAccountId: number;\r\n    agreementDate: Date;\r\n\r\n    c2CCode: string;\r\n    nominalAlternativeAccount: boolean;\r\n    costAlternativeCode: boolean;\r\n    departmentAlternativeCode: string;\r\n    taxInterfaceCode: boolean;\r\n\r\n    pricingOptionId: number;\r\n    settlementValue: number;\r\n    documentReference: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Counterparty } from '../../entities/counterparty.entity';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { PagingOptions } from '../../entities/http-services/paging-options';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\nimport { MasterdataService } from '../http-services/masterdata.service';\r\n\r\n@Injectable()\r\nexport class CounterPartyDataLoader implements MasterDataLoader {\r\n    constructor(private masterDataService: MasterdataService) { }\r\n\r\n    getData(searchTerm: string,\r\n        pagingOptions: PagingOptions): Observable<Counterparty[]> {\r\n\r\n        const list = this.masterDataService.getCounterparties(searchTerm, pagingOptions)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n\r\n    getDataById(counterpartyId): Observable<Counterparty[]> {\r\n\r\n        const list = this.masterDataService.getCounterpartyById(counterpartyId)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { CommonMethods } from '../../execution/services/execution-cash-common-methods';\r\nimport { AllocationMessage } from '../../trading/entities/allocation-message';\r\nimport { AllocationSetUp } from '../entities/allocation-set-up-entity';\r\nimport { CommonEntity } from '../entities/common-entity';\r\nimport { TradeFields } from '../enums/trade-fields.enum';\r\nimport { WarningMessageTypes } from '../enums/warning-message-type.enum';\r\n\r\nexport function GetWarningMessages(allocationMessages: AllocationMessage[], allocationSetUpData: AllocationSetUp[]) {\r\n    const allocationMessage: AllocationMessage[] = [];\r\n    const restrictedMessage = new AllocationMessage();\r\n    const warningMessage = new AllocationMessage();\r\n    restrictedMessage.message = '';\r\n    warningMessage.message = '';\r\n    const messageList: CommonEntity[] = [];\r\n    const commonMethods = new CommonMethods();\r\n\r\n    if (allocationSetUpData && allocationSetUpData.length > 0) {\r\n        const allocationSetupFields = allocationSetUpData.filter\r\n            ((item) => item.differenceBlocking === true ||\r\n                item.differenceWarning === true);\r\n        if (allocationSetupFields && allocationSetupFields.length > 0) {\r\n            allocationSetupFields.forEach((item) => {\r\n                if (item.fieldName === TradeFields[TradeFields.ArbitrationId]) {\r\n                    if (allocationMessages[0].arbitrationId !== allocationMessages[1].arbitrationId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Arbitration'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.BuyerId]) {\r\n                    if (allocationMessages[0].buyerId !== allocationMessages[1].buyerId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Buyer Code'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.ContractDate]) {\r\n                    if (allocationMessages[0].contractDate !== allocationMessages[1].contractDate) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Contract Date'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.CharterId]) {\r\n                    if (allocationMessages[0].charterId && allocationMessages[1].charterId &&\r\n                        allocationMessages[0].charterId !== allocationMessages[1].charterId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Charter'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.ContractedValue]) {\r\n                    if (allocationMessages[0].contractedValue !== allocationMessages[1].contractedValue) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Contracted Value'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.ContractStatusCode]) {\r\n                    if (allocationMessages[0].contractStatusCode !== allocationMessages[1].contractStatusCode) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Contract Status Code'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.ContractTermLocationId]) {\r\n                    if (allocationMessages[0].contractTermLocationId !== allocationMessages[1].contractTermLocationId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Contract Term Location'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.CounterpartyRef]) {\r\n                    if (allocationMessages[0].counterpartyRef !== allocationMessages[1].counterpartyRef) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Counterparty Ref'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.CropYear]) {\r\n                    if (allocationMessages[0].cropYear !== allocationMessages[1].cropYear) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Crop Year'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.CurrencyCode]) {\r\n                    if (allocationMessages[0].currencyCode !== allocationMessages[1].currencyCode) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                            item.differenceWarning, 'Currency Code'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.DeliveryPeriodEnd]) {\r\n                    if (allocationMessages[0].deliveryPeriodEnd !== allocationMessages[1].deliveryPeriodEnd) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Delivery Period End'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.DeliveryPeriodStart]) {\r\n                    if (allocationMessages[0].deliveryPeriodStart !== allocationMessages[1].deliveryPeriodStart) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Delivery Period Start'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.DepartmentId]) {\r\n                    if (allocationMessages[0].departmentId !== allocationMessages[1].departmentId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Department'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.FirstApprovalDateTime]) {\r\n                    if (allocationMessages[0].firstApprovalDateTime !== allocationMessages[1].firstApprovalDateTime) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'First Approval DateTime'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.MarketSectorId]) {\r\n                    if (allocationMessages[0].marketSectorId !== allocationMessages[1].marketSectorId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Market Sector'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.Memorandum]) {\r\n                    if (allocationMessages[0].memorandum !== allocationMessages[1].memorandum) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Memorandum'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.MonthPositionIndex]) {\r\n                    if (allocationMessages[0].monthPositionIndex !== allocationMessages[1].monthPositionIndex) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Month Position Index'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.OriginalQuantity]) {\r\n                    if (allocationMessages[0].originalQuantity !== allocationMessages[1].originalQuantity) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Original Quantity'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.Part2]) {\r\n                    if (allocationMessages[0].part2 !== allocationMessages[1].part2) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Cmy 2'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.Part3]) {\r\n                    if (allocationMessages[0].part3 !== allocationMessages[1].part3) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Cmy 3'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.Part4]) {\r\n                    if (allocationMessages[0].part4 !== allocationMessages[1].part4) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Cmy 4'));\r\n                    }\r\n                }\r\n                if (item.fieldName === TradeFields[TradeFields.Part5]) {\r\n                    if (allocationMessages[0].part5 !== allocationMessages[1].part5) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Cmy 5'));\r\n                    }\r\n                }\r\n                if (item.fieldName === TradeFields[TradeFields.PaymentTermId]) {\r\n                    if (allocationMessages[0].paymentTermId !== allocationMessages[1].paymentTermId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Payment Term'));\r\n                    }\r\n                }\r\n                if (item.fieldName === TradeFields[TradeFields.PeriodTypeId]) {\r\n                    if (allocationMessages[0].periodTypeId !== allocationMessages[1].periodTypeId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Period Type'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.PhysicalContractCode]) {\r\n                    if (allocationMessages[0].physicalContractCode !== allocationMessages[1].physicalContractCode) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Physical Contract Code'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.PortDestinationId]) {\r\n                    if (allocationMessages[0].portDestinationId !== allocationMessages[1].portDestinationId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Port Of Destination'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.PortOriginId]) {\r\n                    if (allocationMessages[0].portOriginId !== allocationMessages[1].portOriginId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Port Of Origin'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.PositionMonthType]) {\r\n                    if (allocationMessages[0].positionMonthType !== allocationMessages[1].positionMonthType) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Position Month Type'));\r\n                    }\r\n                }\r\n                if (item.fieldName === TradeFields[TradeFields.PremiumDiscountBasis]) {\r\n                    if (allocationMessages[0].premiumDiscountBasis !== allocationMessages[1].premiumDiscountBasis) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Premium Discount Basis'));\r\n                    }\r\n                }\r\n                if (item.fieldName === TradeFields[TradeFields.PremiumDiscountCurrency]) {\r\n                    if (allocationMessages[0].premiumDiscountCurrency !== allocationMessages[1].premiumDiscountCurrency) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Premium Discount Currency'));\r\n                    }\r\n                }\r\n                if (item.fieldName === TradeFields[TradeFields.PremiumDiscountValue]) {\r\n                    if (allocationMessages[0].premiumDiscountValue !== allocationMessages[1].premiumDiscountValue) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Premium Discount Value'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.Price]) {\r\n                    if (allocationMessages[0].price !== allocationMessages[1].price) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Price'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.PricingMethodId]) {\r\n                    if (allocationMessages[0].pricingMethodId !== allocationMessages[1].pricingMethodId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Pricing Method'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.PrincipalCommodity]) {\r\n                    if (allocationMessages[0].principalCommodity !== allocationMessages[1].principalCommodity) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Cmy 1'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.Quantity]) {\r\n                    if (allocationMessages[0].quantity !== allocationMessages[1].quantity) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Quantity'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.SellerId]) {\r\n                    if (allocationMessages[0].sellerId !== allocationMessages[1].sellerId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Seller Code'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.ShippingPeriod]) {\r\n                    if (allocationMessages[0].shippingPeriod !== allocationMessages[1].shippingPeriod) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Shipping Period'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.TraderId]) {\r\n                    if (allocationMessages[0].traderId !== allocationMessages[1].traderId) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Trader'));\r\n                    }\r\n                }\r\n\r\n                if (item.fieldName === TradeFields[TradeFields.Type]) {\r\n                    if (allocationMessages[0].type !== allocationMessages[1].type) {\r\n                        messageList.push(commonMethods.populateAllocationMessages(item.differenceBlocking,\r\n                                                                                  item.differenceWarning, 'Type'));\r\n                    }\r\n                }\r\n            },\r\n            );\r\n        }\r\n\r\n        if (messageList && messageList.length > 0) {\r\n\r\n            const restrictedMessageList = messageList.filter((item) => item.id === WarningMessageTypes.Restricted);\r\n            if (restrictedMessageList && restrictedMessageList.length > 0) {\r\n                restrictedMessage.errorTypeId = WarningMessageTypes.Restricted;\r\n                restrictedMessage.message = restrictedMessageList.map(({ message }) => message).join().replace(/^,|,$/g, '');\r\n                restrictedMessage.message = 'Errors generated from' + ' ' + restrictedMessage.message;\r\n                allocationMessage.push(restrictedMessage);\r\n            }\r\n            const warningMessageList = messageList.filter((item) => item.id === WarningMessageTypes.Warning);\r\n            if (warningMessageList && warningMessageList.length > 0) {\r\n                warningMessage.errorTypeId = WarningMessageTypes.Warning;\r\n                warningMessage.message = warningMessageList.map(({ message }) => message).join().replace(/^,|,$/g, '');\r\n                warningMessage.message = 'Warnings generated from' + ' ' + warningMessage.message;\r\n                allocationMessage.push(warningMessage);\r\n            }\r\n        }\r\n    }\r\n    return allocationMessage;\r\n}\r\n","import { FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { AbstractControlService } from '../../../../../shared/services/common/abstract-control.service';\r\nimport { isDateTwoBeforeDateOne } from '../../../../../shared/validators/date-validators.validator';\r\nexport function dateAfter(dateComparedFormControlName: string, referenceFormControlName: string, allowEqual: boolean = true): ValidatorFn {\r\n    return (abstractForm: FormGroup): { [key: string]: any } => {\r\n        const comparedDate = abstractForm.get(dateComparedFormControlName);\r\n        const reference = abstractForm.get(referenceFormControlName);\r\n        const res = isDateTwoBeforeDateOne(comparedDate.value, reference.value, true);\r\n        if (!res) {\r\n            AbstractControlService.addError(comparedDate, { key: 'isBeforeDate', value: true });\r\n            return { isBeforeDate: true };\r\n        } else {\r\n            AbstractControlService.removeError(comparedDate, { key: 'isBeforeDate', value: true });\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n","export class AllocationMessage {\r\n    errorTypeId: number;\r\n    message: string;\r\n    portOriginId: number;\r\n    portDestinationId: number;\r\n    principalCommodity: string;\r\n    part2: string;\r\n    part3: string;\r\n    part4: string;\r\n    part5: string;\r\n    charterId: number;\r\n\r\n    arbitrationId: number;\r\n    buyerId: number;\r\n    contractDate: Date;\r\n    contractedValue: number;\r\n    contractStatusCode: number;\r\n    contractTermLocationId: number;\r\n    counterpartyRef: string;\r\n    cropYear: number;\r\n    currencyCode: string;\r\n    deliveryPeriodEnd: Date;\r\n    deliveryPeriodStart: Date;\r\n    departmentId: number;\r\n    firstApprovalDateTime: Date;\r\n    marketSectorId: number;\r\n    memorandum: string;\r\n    monthPositionIndex: number;\r\n    originalQuantity: number;\r\n    paymentTermId: number;\r\n    periodTypeId: number;\r\n    physicalContractCode: string;\r\n    positionMonthType: number;\r\n    premiumDiscountBasis: number;\r\n    premiumDiscountCurrency: string;\r\n    premiumDiscountValue: number;\r\n    price: number;\r\n    pricingMethodId: number;\r\n    quantity: number;\r\n    sellerId: number;\r\n    shippingPeriod: boolean;\r\n    traderId: number;\r\n    type: number;\r\n\r\n}\r\n"],"sourceRoot":""}