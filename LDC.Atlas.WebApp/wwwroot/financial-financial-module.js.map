{"version":3,"sources":["webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/cash-matching-dialog/cash-matching-dialog.component.html","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/cash-matching-dialog/cash-matching-dialog.component.scss","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/cash-matching-dialog/cash-matching-dialog.component.ts","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/delete-matching-dialog/delete-matching-dialog.component.html","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/delete-matching-dialog/delete-matching-dialog.component.scss","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/delete-matching-dialog/delete-matching-dialog.component.ts","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/document-date-dialog/document-date-dialog.component.html","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/document-date-dialog/document-date-dialog.component.scss","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/document-date-dialog/document-date-dialog.component.ts","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/payment-document-date-dialog/payment-document-date-dialog.component.html","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/payment-document-date-dialog/payment-document-date-dialog.component.scss","webpack:///./Client/app/financial/components/cash-matching/cash-matching-dialog/payment-document-date-dialog/payment-document-date-dialog.component.ts","webpack:///./Client/app/financial/components/cash-matching/cash-matching-home/cash-matching-home.component.html","webpack:///./Client/app/financial/components/cash-matching/cash-matching-home/cash-matching-home.component.scss","webpack:///./Client/app/financial/components/cash-matching/cash-matching-home/cash-matching-home.component.ts","webpack:///./Client/app/financial/components/cash-matching/create-match-flag/create-match-flag.component.html","webpack:///./Client/app/financial/components/cash-matching/create-match-flag/create-match-flag.component.scss","webpack:///./Client/app/financial/components/cash-matching/create-match-flag/create-match-flag.component.ts","webpack:///./Client/app/financial/components/cash-matching/delete-match-flag/delete-match-flag.component.html","webpack:///./Client/app/financial/components/cash-matching/delete-match-flag/delete-match-flag.component.scss","webpack:///./Client/app/financial/components/cash-matching/delete-match-flag/delete-match-flag.component.ts","webpack:///./Client/app/financial/components/cut-off/close-month/cards/accounting-closure/accounting-closure.component.html","webpack:///./Client/app/financial/components/cut-off/close-month/cards/accounting-closure/accounting-closure.component.scss","webpack:///./Client/app/financial/components/cut-off/close-month/cards/accounting-closure/accounting-closure.component.ts","webpack:///./Client/app/financial/components/cut-off/close-month/cards/operations-closure/operations-closure.component.html","webpack:///./Client/app/financial/components/cut-off/close-month/cards/operations-closure/operations-closure.component.scss","webpack:///./Client/app/financial/components/cut-off/close-month/cards/operations-closure/operations-closure.component.ts","webpack:///./Client/app/financial/components/cut-off/close-month/close-month.component.html","webpack:///./Client/app/financial/components/cut-off/close-month/close-month.component.scss","webpack:///./Client/app/financial/components/cut-off/close-month/close-month.component.ts","webpack:///./Client/app/financial/components/cut-off/close-month/dialog-boxes/close-month-edit-dialog/close-month-edit-dialog.component.html","webpack:///./Client/app/financial/components/cut-off/close-month/dialog-boxes/close-month-edit-dialog/close-month-edit-dialog.component.scss","webpack:///./Client/app/financial/components/cut-off/close-month/dialog-boxes/close-month-edit-dialog/close-month-edit-dialog.component.ts","webpack:///./Client/app/financial/components/cut-off/close-month/dialog-boxes/close-month-warning-dialog/close-month-warning-dialog.component.html","webpack:///./Client/app/financial/components/cut-off/close-month/dialog-boxes/close-month-warning-dialog/close-month-warning-dialog.component.scss","webpack:///./Client/app/financial/components/cut-off/close-month/dialog-boxes/close-month-warning-dialog/close-month-warning-dialog.component.ts","webpack:///./Client/app/financial/components/cut-off/freeze/cards/grid/freeze-grid.component.html","webpack:///./Client/app/financial/components/cut-off/freeze/cards/grid/freeze-grid.component.scss","webpack:///./Client/app/financial/components/cut-off/freeze/cards/grid/freeze-grid.component.ts","webpack:///./Client/app/financial/components/cut-off/freeze/cards/header-filter/freeze-header-filter.component.html","webpack:///./Client/app/financial/components/cut-off/freeze/cards/header-filter/freeze-header-filter.component.scss","webpack:///./Client/app/financial/components/cut-off/freeze/cards/header-filter/freeze-header-filter.component.ts","webpack:///./Client/app/financial/components/cut-off/freeze/cards/header/freeze-header.component.html","webpack:///./Client/app/financial/components/cut-off/freeze/cards/header/freeze-header.component.scss","webpack:///./Client/app/financial/components/cut-off/freeze/cards/header/freeze-header.component.ts","webpack:///./Client/app/financial/components/cut-off/freeze/freeze.component.html","webpack:///./Client/app/financial/components/cut-off/freeze/freeze.component.scss","webpack:///./Client/app/financial/components/cut-off/freeze/freeze.component.ts","webpack:///./Client/app/financial/components/cut-off/freeze/recalculate/freeze-recalculate.component.html","webpack:///./Client/app/financial/components/cut-off/freeze/recalculate/freeze-recalculate.component.scss","webpack:///./Client/app/financial/components/cut-off/freeze/recalculate/freeze-recalculate.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/cards/end-of-month-selection/end-of-month-selection.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/cards/end-of-month-selection/end-of-month-selection.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/cards/end-of-month-selection/end-of-month-selection.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/associated-client-dropdown/associated-client-dropdown.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/associated-client-dropdown/associated-client-dropdown.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/associated-client-dropdown/associated-client-dropdown.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/charter-dropdown/charter-dropdown.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/charter-dropdown/charter-dropdown.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/charter-dropdown/charter-dropdown.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/cost-type-dropdown/cost-type-dropdown.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/cost-type-dropdown/cost-type-dropdown.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/cost-type-dropdown/cost-type-dropdown.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/deal-number-dropdown/deal-number-dropdown.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/deal-number-dropdown/deal-number-dropdown.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/deal-number-dropdown/deal-number-dropdown.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/dealt-currency-dropdown/dealt-currency-dropdown.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/dealt-currency-dropdown/dealt-currency-dropdown.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/dealt-currency-dropdown/dealt-currency-dropdown.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/department-dropdown/department-dropdown.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/department-dropdown/department-dropdown.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/department-dropdown/department-dropdown.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-summary.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-summary.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-summary.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-tab-group/generate-end-of-month-tab-group.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-tab-group/generate-end-of-month-tab-group.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-tab-group/generate-end-of-month-tab-group.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/settlement-currency-dropdown/settlement-currency-dropdown.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/settlement-currency-dropdown/settlement-currency-dropdown.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/settlement-currency-dropdown/settlement-currency-dropdown.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/details-tab.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/details-tab.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/details-tab.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/fx-deal-details-month-end/fx-deal-month-end.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/fx-deal-details-month-end/fx-deal-month-end.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/fx-deal-details-month-end/fx-deal-month-end.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/fx-deal-month-end-summary/fx-deal-month-end-summary.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/fx-deal-month-end-summary/fx-deal-month-end-summary.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/fx-deal-month-end-summary/fx-deal-month-end-summary.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/overview-tab/overview-tab.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/overview-tab/overview-tab.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/overview-tab/overview-tab.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/fx-deal-postings-month-end/fx-deal-month-end.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/fx-deal-postings-month-end/fx-deal-month-end.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/fx-deal-postings-month-end/fx-deal-month-end.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/postings-tab.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/postings-tab.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/postings-tab.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-month/generate-end-of-month.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-year/cards/generate-end-of-year-warning-message/generate-end-of-year-warning-message.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-year/cards/generate-end-of-year-warning-message/generate-end-of-year-warning-message.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-year/cards/generate-end-of-year-warning-message/generate-end-of-year-warning-message.component.ts","webpack:///./Client/app/financial/components/cut-off/generate-end-of-year/generate-end-of-year.component.html","webpack:///./Client/app/financial/components/cut-off/generate-end-of-year/generate-end-of-year.component.scss","webpack:///./Client/app/financial/components/cut-off/generate-end-of-year/generate-end-of-year.component.ts","webpack:///./Client/app/financial/components/foreign-exchange/market-data-tab-group/market-data-tab-group.component.html","webpack:///./Client/app/financial/components/foreign-exchange/market-data-tab-group/market-data-tab-group.component.scss","webpack:///./Client/app/financial/components/foreign-exchange/market-data-tab-group/market-data-tab-group.component.ts","webpack:///./Client/app/financial/components/foreign-exchange/rates/cards/grid/foreign-exchange-rates-grid.component.html","webpack:///./Client/app/financial/components/foreign-exchange/rates/cards/grid/foreign-exchange-rates-grid.component.scss","webpack:///./Client/app/financial/components/foreign-exchange/rates/cards/grid/foreign-exchange-rates-grid.component.ts","webpack:///./Client/app/financial/components/foreign-exchange/rates/cards/select-types/foreign-exchange-rates-select-types.component.html","webpack:///./Client/app/financial/components/foreign-exchange/rates/cards/select-types/foreign-exchange-rates-select-types.component.scss","webpack:///./Client/app/financial/components/foreign-exchange/rates/cards/select-types/foreign-exchange-rates-select-types.component.ts","webpack:///./Client/app/financial/components/foreign-exchange/rates/foreign-exchange-rates.component.html","webpack:///./Client/app/financial/components/foreign-exchange/rates/foreign-exchange-rates.component.scss","webpack:///./Client/app/financial/components/foreign-exchange/rates/foreign-exchange-rates.component.ts","webpack:///./Client/app/financial/components/foreign-exchange/warning-error-msg-dialog/warning-error-msg-dialog.component.html","webpack:///./Client/app/financial/components/foreign-exchange/warning-error-msg-dialog/warning-error-msg-dialog.component.scss","webpack:///./Client/app/financial/components/foreign-exchange/warning-error-msg-dialog/warning-error-msg-dialog.component.ts","webpack:///./Client/app/financial/components/home/home.component.html","webpack:///./Client/app/financial/components/home/home.component.scss","webpack:///./Client/app/financial/components/home/home.component.ts","webpack:///./Client/app/financial/components/interface/accounting-error-management/accounting-error-management.component.html","webpack:///./Client/app/financial/components/interface/accounting-error-management/accounting-error-management.component.scss","webpack:///./Client/app/financial/components/interface/accounting-error-management/accounting-error-management.component.ts","webpack:///./Client/app/financial/components/interface/functional-errors/functional-errors.component.html","webpack:///./Client/app/financial/components/interface/functional-errors/functional-errors.component.scss","webpack:///./Client/app/financial/components/interface/functional-errors/functional-errors.component.ts","webpack:///./Client/app/financial/components/interface/technical-errors/technical-errors.component.html","webpack:///./Client/app/financial/components/interface/technical-errors/technical-errors.component.scss","webpack:///./Client/app/financial/components/interface/technical-errors/technical-errors.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-creation/accounting-creation.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-creation/accounting-creation.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-creation/accounting-creation.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-creation/accounting-warning-error-msg-dialog/accounting-warning-error-msg-dialog.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-creation/accounting-warning-error-msg-dialog/accounting-warning-error-msg-dialog.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-creation/accounting-warning-error-msg-dialog/accounting-warning-error-msg-dialog.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-edit-base/accounting-edit-base.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-edit-base/accounting-edit-base.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-edit/accounting-edit-summary/accounting-edit-summary.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-edit/accounting-edit-summary/accounting-edit-summary.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-edit/accounting-edit-summary/accounting-edit-summary.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-edit/accounting-edit.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-edit/accounting-edit.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-edit/accounting-edit.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-entries-component/accounting-entries-component.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-entries-component/accounting-entries-component.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-entries-component/accounting-entries-component.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-entries-component/manual-journal-accrual-view/manual-journal-accrual-view.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-entries-component/manual-journal-accrual-view/manual-journal-accrual-view.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-entries-component/manual-journal-accrual-view/manual-journal-accrual-view.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-file-upload/accounting-file-upload-dialog-box/accounting-file-upload-dialog-box.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-file-upload/accounting-file-upload-dialog-box/accounting-file-upload-dialog-box.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-file-upload/accounting-file-upload-dialog-box/accounting-file-upload-dialog-box.component.ts","webpack:///./Client/app/financial/components/posting-process/accounting-tab-group/accounting-tab-group.component.html","webpack:///./Client/app/financial/components/posting-process/accounting-tab-group/accounting-tab-group.component.scss","webpack:///./Client/app/financial/components/posting-process/accounting-tab-group/accounting-tab-group.component.ts","webpack:///./Client/app/financial/components/posting-process/authorize-posting-dialog/authorize-posting-dialog.component.html","webpack:///./Client/app/financial/components/posting-process/authorize-posting-dialog/authorize-posting-dialog.component.scss","webpack:///./Client/app/financial/components/posting-process/authorize-posting-dialog/authorize-posting-dialog.component.ts","webpack:///./Client/app/financial/components/posting-process/posting-management/accounting-document-information-component/accounting-document-information-component.component.html","webpack:///./Client/app/financial/components/posting-process/posting-management/accounting-document-information-component/accounting-document-information-component.component.scss","webpack:///./Client/app/financial/components/posting-process/posting-management/accounting-document-information-component/accounting-document-information-component.component.ts","webpack:///./Client/app/financial/components/posting-process/posting-management/posting-management.component.html","webpack:///./Client/app/financial/components/posting-process/posting-management/posting-management.component.scss","webpack:///./Client/app/financial/components/posting-process/posting-management/posting-management.component.ts","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document-create/reverse-document-create.component.html","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document-create/reverse-document-create.component.scss","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document-create/reverse-document-create.component.ts","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document-summary/reverse-document-summary.component.html","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document-summary/reverse-document-summary.component.scss","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document-summary/reverse-document-summary.component.ts","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document.component.html","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document.component.scss","webpack:///./Client/app/financial/components/posting-process/reverse-document/reverse-document.component.ts","webpack:///./Client/app/financial/components/tab-group/financial-tab-group.component.html","webpack:///./Client/app/financial/components/tab-group/financial-tab-group.component.scss","webpack:///./Client/app/financial/components/tab-group/financial-tab-group.component.ts","webpack:///./Client/app/financial/entities/fx-rates-selected-type.entity.ts","webpack:///./Client/app/financial/financial.module.ts","webpack:///./Client/app/financial/financial.route.ts","webpack:///./Client/app/shared/entities/accounting-document-line.entity.ts","webpack:///./Client/app/shared/entities/accounting-document-status-deleted.entity.ts","webpack:///./Client/app/shared/entities/accounting-document-status.entity.ts","webpack:///./Client/app/shared/entities/accounting-setup.entity.ts","webpack:///./Client/app/shared/entities/accountingImportReport.entity.ts","webpack:///./Client/app/shared/entities/create-transaction-document.entity.ts","webpack:///./Client/app/shared/entities/filter-gem.entity.ts","webpack:///./Client/app/shared/entities/filter-value-generate-end-month.entity.ts","webpack:///./Client/app/shared/entities/foreign-exchange-rate-display-view.entity.ts","webpack:///./Client/app/shared/entities/lock-functional-context.entity.ts","webpack:///./Client/app/shared/entities/manual-journal-document-line.entity.ts","webpack:///./Client/app/shared/entities/manual-journal-document.entity.ts","webpack:///./Client/app/shared/entities/manualImportReport.entity.ts","webpack:///./Client/app/shared/enums/account-line-type.enum.ts","webpack:///./Client/app/shared/enums/generate-month-end-type.enum.ts","webpack:///./Client/app/shared/enums/matching-type.enum.ts","webpack:///./Client/app/shared/enums/posting-document-tatype.enum.ts","webpack:///./Client/app/shared/enums/posting-document-type.enum.ts","webpack:///./Client/app/shared/enums/posting-status.enum.ts","webpack:///./Client/app/shared/enums/report-type.enum.ts","webpack:///./Client/app/shared/models/fx-deal-generate-end-of-month-display-view.ts","webpack:///./Client/app/shared/models/overview-generate-end-of-month-display-view.ts","webpack:///./Client/app/shared/models/posting-management-display-view.ts","webpack:///./Client/app/shared/models/reversal-document-display-view.ts","webpack:///./Client/app/shared/models/transaction-detail-display-view.ts","webpack:///./Client/app/shared/services/execution/dtos/document-matching.ts","webpack:///./Client/app/shared/services/execution/dtos/fxdeal-month-end-temporary-adjustment-list-command.ts","webpack:///./Client/app/shared/services/execution/dtos/month-end-temporary-adjustment-list-command.ts","webpack:///./Client/app/shared/services/execution/year-end-process-command.ts","webpack:///./Client/app/shared/services/list-and-search/financials-edit-document-data-loader.ts","webpack:///./Client/app/shared/services/list-and-search/posting-acoount-lines-data-loader.ts","webpack:///./Client/app/shared/services/preaccounting/all-document-reference-data-loader.ts","webpack:///./Client/app/shared/services/preaccounting/document-reference-data-loader.ts","webpack:///./Client/app/shared/services/preaccounting/dtos/document-matching-record.ts","webpack:///./Client/app/shared/services/preaccounting/transaction-document-data-loader.ts"],"names":[],"mappings":"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","file":"financial-financial-module.js","sourcesContent":["module.exports = \"<h1 mat-dialog-title> System will match the transactions. please provide the data to proceed\\r\\n    <button mat-icon-button\\r\\n            mat-dialog-close\\r\\n            class=\\\"close-dialog-btn\\\">\\r\\n        <mat-icon aria-label=\\\"Closing button\\\">clear</mat-icon>\\r\\n    </button></h1>\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <p>{{dialogData.text}}</p>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<div fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"10%\\\"\\r\\n         class=\\\"confirmation-input-container\\\">\\r\\n        <mat-form-field fxFlex=\\\"40%\\\">\\r\\n            <input matInput\\r\\n                   [matDatepicker]=\\\"documentDatePicker\\\"\\r\\n                   placeholder=\\\"Payment Document Date\\\"\\r\\n                   matTooltip=\\\"Payment Document Date\\\"\\r\\n                   [required]=\\\"paymentDocDateCtrl.isRequired\\\"\\r\\n                   autocomplete=\\\"off\\\"\\r\\n                   [formControl]='paymentDocDateCtrl'>\\r\\n            <mat-datepicker-toggle matSuffix\\r\\n                                   [for]=\\\"documentDatePicker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #documentDatePicker></mat-datepicker>\\r\\n            <mat-error *ngIf=\\\"paymentDocDateCtrl.hasError('required')\\\">\\r\\n                This field is required\\r\\n            </mat-error>\\r\\n            <mat-error *ngIf=\\\"paymentDocDateCtrl.hasError('isBeforeDateValid')\\\">\\r\\n                Date cannot be before the document date\\r\\n            </mat-error>\\r\\n            <mat-error *ngIf=\\\"paymentDocDateCtrl.hasError('isDateAfterValid')\\\">\\r\\n                Date cannot be greater than the system date\\r\\n            </mat-error>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between end\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCancelButtonClicked()\\\">CANCEL</button>\\r\\n\\r\\n        <button mat-button\\r\\n                (click)=\\\"onProceedButtonClicked()\\\">PROCEED</button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".mat-dialog-content {\\n  width: 500px; }\\n\\n.confirmation-input-container {\\n  margin-top: 2%; }\\n\"","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material';\r\nimport * as moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { isAfterDate, isDateBeforeControlDate } from '../../../../../shared/validators/date-validators.validator';\r\nimport { DocumentDateDialogComponent } from '../document-date-dialog/document-date-dialog.component';\r\n@Component({\r\n    selector: 'atlas-cash-matching-dialog',\r\n    templateUrl: './cash-matching-dialog.component.html',\r\n    styleUrls: ['./cash-matching-dialog.component.scss'],\r\n})\r\nexport class CashMatchingDialogComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isDialogClosedValue = new EventEmitter<any>();\r\n    paymentDocDateCtrl = new AtlasFormControl('PaymentDocumentDate');\r\n    isDialogClosed: boolean;\r\n    documentDateDialogClosed: boolean;\r\n    lastMonthClosedForOperation: Date;\r\n    documentDate: string;\r\n    dialogData: {\r\n        title: string,\r\n        text: string,\r\n        okButton: string,\r\n        cancelButton: string;\r\n        value: string;\r\n    };\r\n    paymentDocumentDate: Date;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        public thisDialogRef: MatDialogRef<CashMatchingDialogComponent>,\r\n        protected dialog: MatDialog,\r\n        private preAccountingService: PreaccountingService,\r\n        @Inject(MAT_DIALOG_DATA) public data: { title: string, text: string, okButton: string, cancelButton: string; value: string },\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected companyManager: CompanyManagerService) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n        this.documentDate = this.dialogData.value;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.paymentDocDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.documentDate = this.dialogData.value;\r\n        this.preAccountingService.getAccountingSetupDetails().subscribe(\r\n            (data) => {\r\n                if (data) {\r\n                    this.lastMonthClosedForOperation = data.lastMonthClosedForOperation;\r\n                }\r\n            });\r\n    }\r\n    onProceedButtonClicked() {\r\n        this.paymentDocumentDate = new Date(this.paymentDocDateCtrl.value);\r\n        if (new Date(new Date(this.lastMonthClosedForOperation).toLocaleDateString()) >\r\n            new Date(this.paymentDocDateCtrl.value)) {\r\n            const paymentDocumentDateDialog = this.dialog.open(DocumentDateDialogComponent, {\r\n                data: {\r\n                    title: 'Payment Document Date Dialog',\r\n                    text: 'Please note that any revaluation journal will be posted on the next open accounting month',\r\n                    okButton: 'Confirm',\r\n                    cancelButton: 'Cancel',\r\n                    value: this.paymentDocumentDate,\r\n                },\r\n            });\r\n            this.subscriptions.push(paymentDocumentDateDialog.afterClosed().subscribe((answer) => {\r\n                this.documentDateDialogClosed = answer ? true : false;\r\n                if (answer && answer['buttonClicked']) {\r\n                    this.thisDialogRef.close({ buttonClicked: true, buttonValue: answer['buttonValue'] });\r\n                    this.isDialogClosed = answer['buttonClicked'];\r\n                }\r\n            }));\r\n        } else {\r\n            this.thisDialogRef.close({ buttonClicked: true, buttonValue: this.paymentDocumentDate });\r\n        }\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n    setValidators() {\r\n        this.paymentDocDateCtrl.setValidators(\r\n            Validators.compose([Validators.required, isAfterDate(this.companyManager.getCurrentCompanyDate())\r\n                , isDateBeforeControlDate(moment(this.documentDate))]),\r\n        );\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            paymentDocDateCtrl: this.paymentDocDateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n}\r\n","module.exports = \"<h3 mat-dialog-title> Delete Match Flag ?\\r\\n    <button mat-icon-button\\r\\n            mat-dialog-close\\r\\n            class=\\\"close-dialog-btn\\\">\\r\\n        <mat-icon aria-label=\\\"Closing button\\\">clear</mat-icon>\\r\\n    </button></h3>\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <p>{{dialogData.text}} {{dialogData.value}}.</p>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<div fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         class=\\\"confirmation-input-container\\\"\\r\\n         fxLayoutGap=\\\"30%\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxFlex=\\\"100%\\\"\\r\\n             fxLayoutAlign=\\\"space-between end\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onCancelButtonClicked()\\\">{{dialogData.cancelButton}}</button>\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onProceedButtonClicked()\\\">{{dialogData.okButton}}</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-delete-matching-dialog',\r\n    templateUrl: './delete-matching-dialog.component.html',\r\n    styleUrls: ['./delete-matching-dialog.component.scss'],\r\n})\r\nexport class DeleteMatchingDialogComponent extends BaseFormComponent implements OnInit {\r\n    dialogData: {\r\n        title: string,\r\n        text: string,\r\n        okButton: string,\r\n        cancelButton: string;\r\n        value: string;\r\n    };\r\n    matchFlagCode: string;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        public thisDialogRef: MatDialogRef<DeleteMatchingDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { title: string, text: string, okButton: string, cancelButton: string; value: string; },\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n        this.matchFlagCode = this.dialogData.value;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.matchFlagCode = this.dialogData.value;\r\n    }\r\n    onProceedButtonClicked() {\r\n        this.thisDialogRef.close({ buttonClicked: true, buttonValue: this.matchFlagCode });\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close({ buttonClicked: false });\r\n    }\r\n}\r\n","module.exports = \"<h3 mat-dialog-title> Accounting month for the date selected is already closed.\\r\\n    <button mat-icon-button\\r\\n            mat-dialog-close\\r\\n            class=\\\"close-dialog-btn\\\">\\r\\n        <mat-icon aria-label=\\\"Closing button\\\">clear</mat-icon>\\r\\n    </button></h3>\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <p>{{dialogData.text}}</p>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<div fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"10%\\\"\\r\\n         class=\\\"confirmation-input-container\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between end\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onCancelButtonClicked()\\\">CANCEL</button>\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onProceedButtonClicked()\\\">OKAY</button>\\r\\n        </div>\\r\\n    </div>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-document-date-dialog',\r\n    templateUrl: './document-date-dialog.component.html',\r\n    styleUrls: ['./document-date-dialog.component.scss'],\r\n})\r\nexport class DocumentDateDialogComponent extends BaseFormComponent implements OnInit {\r\n    dialogData: {\r\n        title: string,\r\n        text: string,\r\n        okButton: string,\r\n        cancelButton: string;\r\n        value: Date;\r\n    };\r\n    paymentDocumentDate: Date;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        public thisDialogRef: MatDialogRef<DocumentDateDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { title: string, text: string, okButton: string, cancelButton: string; value: Date; },\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n        this.paymentDocumentDate = this.dialogData.value;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.paymentDocumentDate = this.dialogData.value;\r\n    }\r\n    onProceedButtonClicked() {\r\n        this.thisDialogRef.close({ buttonClicked: true, buttonValue: this.paymentDocumentDate });\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n\r\n}\r\n","module.exports = \"<h3>\\r\\n    <button mat-icon-button\\r\\n            mat-dialog-close\\r\\n            class=\\\"close-dialog-btn\\\">\\r\\n        <mat-icon aria-label=\\\"Closing button\\\">clear</mat-icon>\\r\\n    </button></h3>\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <p>{{dialogData.text1}} {{dialogData.value1}} are selected</p>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <p>{{dialogData.text2}} {{dialogData.value3}}</p>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<div fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"10%\\\"\\r\\n         class=\\\"confirmation-input-container\\\">\\r\\n        <mat-form-field fxFlex=\\\"40%\\\">\\r\\n            <input matInput\\r\\n                   [matDatepicker]=\\\"documentDatePicker\\\"\\r\\n                   placeholder=\\\"New Payment Document Date\\\"\\r\\n                   matTooltip=\\\"New Payment Document Date\\\"\\r\\n                   [required]=\\\"paymentDocDateCtrl.isRequired\\\"\\r\\n                   autocomplete=\\\"off\\\"\\r\\n                   [formControl]='paymentDocDateCtrl'>\\r\\n            <mat-datepicker-toggle matSuffix\\r\\n                                   [for]=\\\"documentDatePicker\\\"></mat-datepicker-toggle>\\r\\n            <mat-datepicker #documentDatePicker></mat-datepicker>\\r\\n            <mat-error *ngIf=\\\"paymentDocDateCtrl.hasError('required')\\\">\\r\\n                This field is required\\r\\n            </mat-error>\\r\\n            <mat-error *ngIf=\\\"paymentDocDateCtrl.hasError('isBeforeDateValid')\\\">\\r\\n                Date cannot be before the document date\\r\\n            </mat-error>\\r\\n            <mat-error *ngIf=\\\"paymentDocDateCtrl.hasError('isDateAfterValid')\\\">\\r\\n                Date cannot be greater than the system date\\r\\n            </mat-error>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between end\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCancelButtonClicked()\\\">CANCEL</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onProceedButtonClicked()\\\">OKAY</button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { isAfterDate } from '../../../../../shared/validators/date-validators.validator';\r\nimport { DocumentDateDialogComponent } from '../document-date-dialog/document-date-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-payment-document-date-dialog',\r\n    templateUrl: './payment-document-date-dialog.component.html',\r\n    styleUrls: ['./payment-document-date-dialog.component.scss'],\r\n})\r\nexport class PaymentDocumentDateDialogComponent extends BaseFormComponent implements OnInit {\r\n    paymentDocDateCtrl = new AtlasFormControl('PaymentDocumentDate');\r\n\r\n    dialogData: {\r\n        title: string,\r\n        text1: string,\r\n        text2: string,\r\n        okButton: string,\r\n        cancelButton: string;\r\n        value1: string;\r\n        value2: Date;\r\n        value3: string;\r\n    };\r\n    matchFlagCode: string;\r\n    paymentDocumentDate: Date;\r\n    newPaymentDocumentDate: Date;\r\n    lastMonthClosedForOperation: Date;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        public thisDialogRef: MatDialogRef<PaymentDocumentDateDialogComponent>,\r\n        protected dialog: MatDialog,\r\n        @Inject(MAT_DIALOG_DATA) public data:\r\n            {\r\n                title: string, text1: string, text2: string, okButton: string,\r\n                cancelButton: string; value1: string; value2: Date; value3: string\r\n            },\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private companyManager: CompanyManagerService,\r\n        private preAccountingService: PreaccountingService) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n        this.matchFlagCode = this.dialogData.value1;\r\n        this.paymentDocumentDate = this.dialogData.value2;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.matchFlagCode = this.dialogData.value1;\r\n        this.paymentDocumentDate = this.dialogData.value2;\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.paymentDocDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.preAccountingService.getAccountingSetupDetails().subscribe(\r\n            (data) => {\r\n                if (data) {\r\n                    this.lastMonthClosedForOperation = data.lastMonthClosedForOperation;\r\n                }\r\n            });\r\n    }\r\n    onProceedButtonClicked() {\r\n        this.newPaymentDocumentDate = new Date(new Date(this.paymentDocDateCtrl.value).toDateString());\r\n        if (new Date(new Date(this.lastMonthClosedForOperation).toDateString()) >\r\n            new Date(new Date(this.paymentDocDateCtrl.value).toDateString())) {\r\n            const paymentDocumentDateDialog = this.dialog.open(DocumentDateDialogComponent, {\r\n                data: {\r\n                    title: 'Payment Document Date Dialog',\r\n                    text: 'Please note that any revaluation journal will be posted on the next open accounting month',\r\n                    okButton: 'Confirm',\r\n                    cancelButton: 'Cancel',\r\n                    value: this.newPaymentDocumentDate,\r\n                },\r\n            });\r\n            this.subscriptions.push(paymentDocumentDateDialog.afterClosed().subscribe((answer) => {\r\n                if (answer && answer['buttonClicked']) {\r\n                    this.thisDialogRef.close({ buttonClicked: true, buttonValue: answer['buttonValue'] });\r\n\r\n                }\r\n            }));\r\n        } else {\r\n            this.thisDialogRef.close({ buttonClicked: true, buttonValue: this.paymentDocDateCtrl.value });\r\n        }\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close({ buttonClicked: false });\r\n    }\r\n    setValidators() {\r\n        this.paymentDocDateCtrl.setValidators(\r\n            Validators.compose([Validators.required, isAfterDate(this.companyManager.getCurrentCompanyDate())]),\r\n        );\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            paymentDocDateCtrl: this.paymentDocDateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav matToolbarHighlight\\r\\n             mat-tab-nav-bar>\\r\\n            <div *ngFor=\\\"let routeLink of routeLinks\\\">\\r\\n                <a mat-tab-link\\r\\n                   [routerLink]=\\\"routeLink.link\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLink)\\\">\\r\\n                    {{ routeLink.label }}\\r\\n                </a>\\r\\n            </div>\\r\\n        </nav>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-cash-matching-home',\r\n    templateUrl: './cash-matching-home.component.html',\r\n    styleUrls: ['./cash-matching-home.component.scss'],\r\n})\r\nexport class CashMatchingHomeComponent extends BaseFormComponent implements OnInit {\r\n\r\n    routeLinks = [\r\n\r\n        {\r\n            label: 'Create Match',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/create/matching',\r\n            index: 0,\r\n        },\r\n        {\r\n            label: 'Delete Match',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/delete/matching',\r\n            index: 1,\r\n        },\r\n    ];\r\n    activeLinkIndex = -1;\r\n    company: string;\r\n\r\n    constructor(private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.activeLinkIndex = this.routeLinks.indexOf(this.routeLinks.find((tab) => this.router.url.includes(tab.link)));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n\r\n    }\r\n    isActive(routeLink: any) {\r\n        return this.activeLinkIndex === routeLink.index;\r\n    }\r\n\r\n}\r\n","module.exports = \"<atlas-cash-matching-home></atlas-cash-matching-home>\\r\\n<div class=\\\"main-container\\\">\\r\\n\\r\\n    <mat-card *ngIf=\\\"isDialogClosed\\\">\\r\\n        <mat-card-header>\\r\\n            <mat-card-title *ngIf=\\\"!journalFieldShow\\\">\\r\\n                <mat-card-subtitle>Documents matched with code\\r\\n                    <span class=\\\"total-figure-value\\\">{{matchCodeSelected}}\\r\\n                    </span>\\r\\n                </mat-card-subtitle>\\r\\n            </mat-card-title>\\r\\n            <mat-card-title *ngIf=\\\"journalFieldShow\\\">\\r\\n                <mat-card-subtitle>Documents matched with match flag\\r\\n                    <span class=\\\"total-figure-value\\\">{{matchCodeSelected}}\\r\\n                    </span>\\r\\n                    Revaluation Journal Generated is :\\r\\n                    <span class=\\\"total-figure-value\\\">{{journalDocumentId}}</span>\\r\\n                </mat-card-subtitle>\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n\\r\\n        <div class=\\\"button-container\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             fxLayoutGap=\\\"8px\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onCloseButtonClicked()\\\">\\r\\n                CLOSE </button>\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onAccountingEntriesButtonClicked()\\\">\\r\\n                GO TO ACC. ENTRIES\\r\\n            </button>\\r\\n\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n\\r\\n    <mat-card>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                Documents to match\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\"\\r\\n                 fxFlex=\\\"15%\\\">\\r\\n                <div fxFlex=\\\"98%\\\">\\r\\n                    <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                             [fieldControl]=\\\"counterpartyCtrl\\\"\\r\\n                                                             [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                             label=\\\"Client Account\\\"\\r\\n                                                             displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                             [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                             [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                             gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                             (optionSelected)=\\\"onCounterpartyIdSelected($event)\\\">\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                </div>\\r\\n            </div>\\r\\n            <mat-form-field fxFlex=\\\"16%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Client Name\\\"\\r\\n                       [formControl]=\\\"clientNameCtrl\\\"\\r\\n                       label=\\\"Client Name\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Client Name\\\">\\r\\n            </mat-form-field>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"12%\\\"\\r\\n                 [class.isEmpty]=\\\"!departmentCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"departmentCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Department\\\"\\r\\n                           [required]=\\\"departmentCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"departments\\\"\\r\\n                           [formControl]=\\\"departmentCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           matTooltip=\\\"Department Code\\\">\\r\\n                    <mat-autocomplete #departments=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (optionSelected)=\\\"onDepartmentCodeSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let department of filteredDepartment\\\"\\r\\n                                    [value]=\\\"department.departmentCode\\\">\\r\\n                            {{department.departmentCode}} | {{department.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"departmentCtrl.hasError('required')\\\"> Required\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"departmentCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"12%\\\"\\r\\n                 [class.isEmpty]=\\\"!currencyCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"currencyCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Currency\\\"\\r\\n                           [required]=\\\"currencyCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"currencies\\\"\\r\\n                           [formControl]=\\\"currencyCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           matTooltip=\\\"Currency\\\">\\r\\n                    <mat-autocomplete #currencies=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                        <mat-option *ngFor=\\\"let currency of filteredCurrencyList\\\"\\r\\n                                    [value]=\\\"currency.currencyCode\\\">{{currency.currencyCode}} |\\r\\n                            {{currency.description}}</mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"currencyCtrl.hasError('required')\\\"> Required\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"currencyCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <mat-form-field fxFlex=12%>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"DocumentReference\\\"\\r\\n                       [matAutocomplete]=\\\"documentReferences\\\"\\r\\n                       [formControl]=\\\"docReferenceCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"DocumentReference\\\">\\r\\n                <mat-autocomplete #documentReferences=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\"\\r\\n                                  (optionSelected)=\\\"onDocumentReferenceOptionSelected($event.option.value)\\\">\\r\\n                    <mat-option *ngFor=\\\"let docReference of filteredDocReferenceList\\\"\\r\\n                                [value]=\\\"docReference.documentReference\\\">\\r\\n                        {{docReference.documentReference}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"docReferenceCtrl.hasError('inDropdownList')\\\">\\r\\n                    Document Reference doesn't exist\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=14%>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Second Document Reference\\\"\\r\\n                       [formControl]=\\\"secDocReferenceCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Second Document Reference\\\">\\r\\n            </mat-form-field>\\r\\n            <button mat-icon-button\\r\\n                    [disabled]=\\\"isSearchDisabled\\\"\\r\\n                    (click)=\\\"onCreateMatchSearchButtonClicked()\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\"\\r\\n         *ngIf=\\\"isDataAvailable\\\">\\r\\n        <mat-card fxFlex=\\\"100%\\\">\\r\\n            <div ag-grid=\\\"documentMatchingGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [columnDefs]=\\\"documentMatchingGridColumns\\\"\\r\\n                                 [rowData]=\\\"documentMatchingGridRows\\\"\\r\\n                                 [gridOptions]=\\\"documentMatchingGridOptions\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (rowSelected)=\\\"onCreateMatchRowSelected($event)\\\"\\r\\n                                 (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                 [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                                 rowSelection=\\\"multiple\\\"\\r\\n                                 [singleClickEdit]=\\\"true\\\"\\r\\n                                 [suppressRowClickSelection]=\\\"true\\\"\\r\\n                                 [suppressNoRowsOverlay]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"20\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Balance : <span class=\\\"total-figure-value\\\">{{formattedInput}}\\r\\n                    </span></mat-card-subtitle>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <atlas-empty-state *ngIf=\\\"!isDataAvailable\\\"\\r\\n                       title=\\\"No Entries to display\\\"\\r\\n                       message=\\\"Edit the filters and generate the table again\\\"\\r\\n                       #emptyStateComponent></atlas-empty-state>\\r\\n    <div fxLayout=\\\"row \\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start \\\">\\r\\n            <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                    mat-button>\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start \\\"\\r\\n             *ngIf=\\\"isDataAvailable\\\">\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"end start \\\">\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onMatchSelectedButtonClicked()\\\"\\r\\n                        [disabled]=\\\"isCompanyFrozen\\\">\\r\\n                    MATCH SELECTED\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".matched-document {\\n  margin-right: 5%;\\n  float: left;\\n  padding-top: 18px;\\n  color: green; }\\n\"","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { EmptyStateComponent } from '../../../../shared/components/empty-state/empty-state.component';\r\nimport { inDropdownListValidator } from '../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { Currency } from '../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { MasterDataProps } from '../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { MatchingType } from '../../../../shared/enums/matching-type.enum';\r\nimport { TransactionDocument } from '../../../../shared/enums/transaction-document.enum';\r\nimport { ConvertToNumber, CustomNumberMask } from '../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { DocumentMatching } from '../../../../shared/services/execution/dtos/document-matching';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { ForeignExchangeService } from '../../../../shared/services/http-services/foreign-exchange.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { DocumentMatchingRecord } from '../../../../shared/services/preaccounting/dtos/document-matching-record';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { nameof, UtilService } from '../../../../shared/services/util.service';\r\nimport { CashMatchingDialogComponent } from '../cash-matching-dialog/cash-matching-dialog/cash-matching-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-create-match-flag',\r\n    templateUrl: './create-match-flag.component.html',\r\n    styleUrls: ['./create-match-flag.component.scss'],\r\n})\r\nexport class CreateMatchFlagComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('emptyStateComponent') emptyStateComponent: EmptyStateComponent;\r\n    counterpartyCtrl = new AtlasFormControl('Counterparty');\r\n    clientNameCtrl = new AtlasFormControl('ClientName');\r\n    departmentCtrl = new AtlasFormControl('Department');\r\n    currencyCtrl = new AtlasFormControl('Currency');\r\n    docReferenceCtrl = new AtlasFormControl('DocumentReference');\r\n    secDocReferenceCtrl = new AtlasFormControl('SecondaryReference');\r\n    currentDocDateCtrl = new AtlasFormControl('CurrentDocumentDate');\r\n    private formComponents: BaseFormComponent[] = [];\r\n    cashMatchingDialog: CashMatchingDialogComponent;\r\n    filteredCounterPartyList: Counterparty[];\r\n    filteredDepartment: Department[];\r\n    allDepartment: Department[];\r\n    filteredCurrencyList: Currency[];\r\n    filteredCompanies: Company[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    dataLength: number = 0;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    isDialogClosed: boolean;\r\n    matchFlagId: string;\r\n    matchFlagCode: number;\r\n    journalFieldShow: boolean = false;\r\n    journalDocumentId: string;\r\n    isDocumentsSelected: boolean = false;\r\n    isSave: boolean = false;\r\n    documentMatchingGridOptions: agGrid.GridOptions = {};\r\n    documentMatchingGridColumns: agGrid.ColDef[];\r\n    documentMatchingGridRows: DocumentMatching[];\r\n    selectedDocumentsToMatch: DocumentMatching[];\r\n    documentMatching: DocumentMatching[];\r\n    filteredDocReferenceList: DocumentMatching[];\r\n    documentReference: DocumentMatching[] = [];\r\n    documentSelectionModel: DocumentMatching;\r\n    masterData: MasterData;\r\n    index: number = 0;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Counterparties,\r\n        MasterDataProps.Departments,\r\n        MasterDataProps.Currencies,\r\n        MasterDataProps.Companies];\r\n    company: string;\r\n    documentIndex: number;\r\n    isEdit: boolean;\r\n    counterpartyId: number;\r\n    departmentValue: number;\r\n    transactionDocument: TransactionDocument;\r\n    totalCredit: number;\r\n    totalDebit: number;\r\n    totalBalance: number;\r\n    documentDate: string;\r\n    currentDocumentDate: Date;\r\n    selectedDocumentLength: number;\r\n    functionalCurrencyAmount: number;\r\n    statutoryCurrencyAmount: number;\r\n    cashCurrency: string;\r\n    functionalCurrency: string;\r\n    statutoryCurrency: string;\r\n    cashCurrencyRoeType: string;\r\n    functionalCurrencyRoeType: string;\r\n    statutoryCurrencyRoeType: string;\r\n    cashCurrencyRate: number;\r\n    functionalCurrencyRate: number;\r\n    statutoryCurrenyRate: number;\r\n    companyConfiguration: Company;\r\n    paymentDocumentDate: Date;\r\n    public model: DocumentMatchingRecord;\r\n    amountInUSD: number;\r\n    matchType: number;\r\n    gridContext = {\r\n        component: this,\r\n    };\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'This field is required')\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n    counterpartyValue: string;\r\n    matchCodeSelected: string;\r\n    transactionDocumentId: number;\r\n    isSearchDisabled: boolean;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    formattedInput: string;\r\n    isDataAvailable: boolean = false;\r\n    isCompanyFrozen: boolean;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        private foreignExchangeService: ForeignExchangeService,\r\n        private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService,\r\n        protected companyManager: CompanyManagerService,\r\n        private executionService: ExecutionService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.currentDocDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.functionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.statutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n        this.filteredCounterPartyList = this.masterData.counterparties;\r\n        this.currencyCtrl.setValue(this.functionalCurrency);\r\n        this.isSearchDisabled = true;\r\n        this.counterpartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.counterparties,\r\n                ['counterpartyCode', 'description', 'counterpartyID'],\r\n            );\r\n            if (this.counterpartyCtrl.valid) {\r\n                this.onCounterpartyIdSelected(this.counterpartyCtrl.value);\r\n            } else {\r\n                if (this.counterpartyCtrl.value !== null && this.counterpartyCtrl.value.length === 0) {\r\n                    this.docReferenceCtrl.enable();\r\n                    this.disableSearchButton();\r\n                }\r\n            }\r\n        });\r\n\r\n        this.filteredDepartment = [];\r\n        this.filteredDepartment = this.masterData.departments;\r\n        const departments = this.filteredDepartment.filter((a) => a.departmentId === 0);\r\n        if (departments.length === 0 || departments === undefined) {\r\n            this.filteredDepartment.push({\r\n                departmentId: 0, departmentCode: 'ALL', description: 'ALL Departments',\r\n                profitCenterId: null, companyId: null, companyCode: null,\r\n            });\r\n        }\r\n        this.departmentCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartment = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.departments,\r\n                ['departmentCode', 'description'],\r\n            );\r\n        });\r\n        const selectedDepartments = this.masterData.departments.filter(\r\n            (department) => department.departmentCode === 'ALL',\r\n        );\r\n        if (selectedDepartments.length > 0) {\r\n            this.departmentValue = null;\r\n            this.departmentCtrl.setValue(selectedDepartments[0].departmentCode);\r\n        }\r\n        this.filteredCurrencyList = this.masterData.currencies;\r\n        this.currencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.currencies,\r\n                ['currencyCode', 'description'],\r\n            );\r\n        });\r\n        this.executionService.getDocumentReferenceValues(this.matchType = MatchingType.createMatch)\r\n            .subscribe((data) => {\r\n                data.value.forEach((item) => this.documentReference.push(this.populateDocuments(item)));\r\n                this.filteredDocReferenceList = this.documentReference;\r\n            });\r\n        this.docReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDocReferenceList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.documentReference, ['documentReference'],\r\n            );\r\n            if (this.docReferenceCtrl.valid) {\r\n                if (this.docReferenceCtrl.value) {\r\n                    if (this.docReferenceCtrl.value.length === 0) {\r\n                        this.disableSearchButton();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.initializeGridColumns();\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.isCompanyFrozen = this.companyManager.getCompany(this.company).isFrozen;\r\n    }\r\n\r\n    canDeactivate() {\r\n        if ((this.counterpartyCtrl.dirty || this.departmentCtrl.dirty || this.clientNameCtrl.dirty ||\r\n            this.secDocReferenceCtrl.dirty || this.currencyCtrl.dirty || this.docReferenceCtrl.dirty) && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    populateDocuments(value: any) {\r\n        const documentsForMatching = new DocumentMatching();\r\n        documentsForMatching.documentReference = value.documentReference;\r\n        return documentsForMatching;\r\n    }\r\n    initializeGridColumns() {\r\n        this.documentMatchingGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.documentMatchingGridColumns = [\r\n            {\r\n                headerName: 'Transaction Document Id',\r\n                field: 'transactionDocumentId',\r\n                colId: 'transactionDocumentId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Secondary Document Reference',\r\n                field: 'secondaryRef',\r\n                colId: 'secondaryRef',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'DepartmentId',\r\n                field: 'departmentId',\r\n                colId: 'departmentId',\r\n                hide: true,\r\n\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'TransactionDirectionId',\r\n                field: 'transactionDirectionId',\r\n                colId: 'transactionDirectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Marking',\r\n                field: 'marking',\r\n                colId: 'marking',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Marking',\r\n                field: 'matchFlagCode',\r\n                colId: 'matchFlagCode',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Document Date',\r\n                field: 'documentDate',\r\n                colId: 'documentDate',\r\n                hide: false,\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'Value Date',\r\n                field: 'valueDate',\r\n                colId: 'valueDate',\r\n                hide: false,\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'DocumentAmount',\r\n                field: 'documentAmount',\r\n                colId: 'documentAmount',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Expense Code',\r\n                field: 'expenseCode',\r\n                colId: 'expenseCode',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Document Type',\r\n                field: 'documentType',\r\n                colId: 'documentType',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'JournalLineId',\r\n                field: 'lineId',\r\n                colId: 'lineId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'TotalAmount',\r\n                field: 'amount',\r\n                colId: 'amount',\r\n                type: 'numericColumn',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Debit',\r\n                field: 'debit',\r\n                colId: 'debit',\r\n                hide: false,\r\n                pinned: 'right',\r\n                editable: this.isDebitFieldEditable,\r\n                onCellValueChanged: this.onDebitValueChanged,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: true,\r\n                },\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Credit',\r\n                field: 'credit',\r\n                colId: 'credit',\r\n                hide: false,\r\n                pinned: 'right',\r\n                editable: this.isCreditFieldEditable,\r\n                onCellValueChanged: this.onCreditValueChanged,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: true,\r\n                },\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Document Type',\r\n                field: 'isCreditOrDebit',\r\n                colId: 'isCreditOrDebit',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                width: 40,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'right',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if ((params.column.colId === 'credit' || params.column.colId === 'debit') && !params.value) {\r\n            params.node.setDataValue(params.column.colId, params.oldValue);\r\n        }\r\n    }\r\n\r\n    isCreditFieldEditable(params) {\r\n        if (params.data.credit) {\r\n            params.node.setSelected(true);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    isDebitFieldEditable(params) {\r\n        if (params.data.debit) {\r\n            params.node.setSelected(true);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    setValidators() {\r\n        this.counterpartyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.counterparties,\r\n                    nameof<Counterparty>('counterpartyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n        this.docReferenceCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.documentReference,\r\n                    nameof<DocumentMatching>('documentReference'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ), Validators.required,\r\n            ]));\r\n        this.departmentCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                ), Validators.required,\r\n            ]));\r\n    }\r\n    onCreateMatchSearchButtonClicked() {\r\n        this.isLoading = true;\r\n        this.isDialogClosed = false;\r\n        if (this.departmentCtrl.value === '') {\r\n            const selectedDepartments = this.masterData.departments.filter(\r\n                (department) => department.departmentCode === 'ALL',\r\n            );\r\n            if (selectedDepartments.length > 0) {\r\n                this.departmentValue = null;\r\n                this.departmentCtrl.setValue(selectedDepartments[0].departmentCode);\r\n            }\r\n        } else if (!this.departmentCtrl.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            this.isLoading = false;\r\n            return;\r\n        }\r\n        if (this.counterpartyCtrl.valid && this.currencyCtrl.valid) {\r\n            if (this.gridApi) {\r\n                this.isDocumentsSelected = this.gridApi.getSelectedRows().length > 0 ? true : false;\r\n            }\r\n            if (this.isDocumentsSelected === false) {\r\n                this.documentIndex = 0;\r\n                this.index = 0;\r\n                if (this.docReferenceCtrl.value === '' || this.docReferenceCtrl.value === null) {\r\n                    this.getDocumentsToMatch();\r\n                } else {\r\n                    this.getDocumentToMatchByDocumentReference();\r\n                    this.isLoading = false;\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Cannot Search when document is selected',\r\n                );\r\n                this.isLoading = false;\r\n            }\r\n        } else {\r\n            this.isLoading = false;\r\n        }\r\n        this.disableSearchButton();\r\n    }\r\n    getDocumentsToMatch() {\r\n        this.executionService\r\n            .getDocumentsToMatch(\r\n                this.counterpartyId.toString(), this.departmentValue, this.currencyCtrl.value, this.isEdit, this.matchFlagCode)\r\n            .subscribe((data) => {\r\n                if (data && data.value.length > 0) {\r\n                    if (this.gridApi) {\r\n                        this.gridApi.setRowData([]);\r\n                    }\r\n                    this.documentMatching = data.value;\r\n                    this.initializeGridColumns();\r\n                    for (this.documentIndex = 0; this.documentIndex < data.value['length']; this.documentIndex++) {\r\n                        this.documentMatching[this.index].amount = data.value[this.index].amount;\r\n                        this.calculateDebitCreditAmounts();\r\n                        this.getDepartmentCodeValue();\r\n                        this.index++;\r\n                    }\r\n                    this.documentMatchingGridRows = this.documentMatching;\r\n                    this.isLoading = false;\r\n                    this.isDataAvailable = true;\r\n                    this.dataLength = this.documentMatchingGridRows.length;\r\n                } else {\r\n                    if (this.gridApi) {\r\n                        this.gridApi.setRowData([]);\r\n                    }\r\n                    this.isLoading = false;\r\n                    this.isDataAvailable = false;\r\n                }\r\n            });\r\n    }\r\n    getDocumentToMatchByDocumentReference() {\r\n        if (this.docReferenceCtrl.valid) {\r\n            this.executionService\r\n                .getDocumentToMatchByDocumentReference(this.docReferenceCtrl.value).subscribe((data) => {\r\n                    if (data && data.value.length > 0) {\r\n                        if (this.gridApi) {\r\n                            this.gridApi.setRowData([]);\r\n                        }\r\n                        this.documentMatching = data.value;\r\n                        this.initializeGridColumns();\r\n                        for (this.documentIndex = 0; this.documentIndex < data.value['length']; this.documentIndex++) {\r\n                            this.documentMatching[this.index].amount = data.value[this.index].amount;\r\n                            this.calculateDebitCreditAmounts();\r\n                            this.getDepartmentCodeValue();\r\n                            this.index++;\r\n                        }\r\n                        this.documentMatchingGridRows = this.documentMatching;\r\n                        this.isLoading = false;\r\n                        this.isDataAvailable = true;\r\n                        this.dataLength = this.documentMatchingGridRows.length;\r\n                    } else {\r\n                        if (this.gridApi) {\r\n                            this.gridApi.setRowData([]);\r\n                        }\r\n                        this.isLoading = false;\r\n                        this.isDataAvailable = false;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    getDepartmentCodeValue() {\r\n        const selectedDepartments = this.masterData.departments.filter(\r\n            (department) => department.departmentId === this.documentMatching[this.index].departmentId,\r\n        );\r\n        if (selectedDepartments.length > 0) {\r\n            this.documentMatching[this.index].departmentCode = selectedDepartments[0].departmentCode;\r\n        }\r\n    }\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            return param.value.toLocaleString(undefined, {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2,\r\n            });\r\n        }\r\n    }\r\n    onCreditValueChanged(params) {\r\n        params.data.totalAmount = (params.data.amount > 0) ? (params.data.amount) : ((-1) * params.data.amount);\r\n        if (ConvertToNumber(params.data.credit) > params.data.totalAmount) {\r\n            params.node.setDataValue('credit', -(params.data.amount));\r\n            params.node.setDataValue('documentAmount', params.data.amount);\r\n            params.node.setSelected(false);\r\n        } else {\r\n            if (params.node.selected !== false) {\r\n                params.node.setSelected(true);\r\n                params.data.documentAmount = (-1) * params.data.credit;\r\n                params.node.setDataValue('documentAmount', params.data.documentAmount);\r\n                params.context.component.totalCredit = 0;\r\n                const selectedRows = params.context.component.gridApi.getSelectedRows();\r\n                selectedRows.forEach(\r\n                    (selectedDocumentRow) => {\r\n                        params.context.component.totalCredit += ConvertToNumber(selectedDocumentRow.credit);\r\n                    },\r\n                );\r\n                params.context.component.totalBalance =\r\n                    params.context.component.totalCredit - params.context.component.totalDebit;\r\n                params.context.component.formattedInput = params.context.component.totalBalance.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    calculateDebitCreditAmounts() {\r\n        if (this.documentMatching[this.index].documentType === TransactionDocument.CashPayment\r\n            || this.documentMatching[this.index].documentType === TransactionDocument.SalesInvoice\r\n            || this.documentMatching[this.index].documentType === TransactionDocument.DebitNote\r\n            || this.documentMatching[this.index].documentType === TransactionDocument.JournalEntry) {\r\n            if (this.documentMatching[this.index].amount > 0) {\r\n                this.documentMatching[this.index].debit = this.documentMatching[this.index].amount;\r\n            } else {\r\n                this.documentMatching[this.index].credit = -this.documentMatching[this.index].amount;\r\n            }\r\n            this.documentMatching[this.index].documentAmount = this.documentMatching[this.index].amount;\r\n        } else {\r\n            if (this.documentMatching[this.index].amount > 0) {\r\n                this.documentMatching[this.index].credit = this.documentMatching[this.index].amount;\r\n            } else {\r\n                this.documentMatching[this.index].debit = -this.documentMatching[this.index].amount;\r\n            }\r\n            this.documentMatching[this.index].documentAmount = -this.documentMatching[this.index].amount;\r\n        }\r\n    }\r\n    onDebitValueChanged(params) {\r\n        if (ConvertToNumber(params.data.debit) > params.data.amount) {\r\n            params.node.setDataValue('debit', params.data.amount);\r\n            params.node.setDataValue('documentAmount', params.data.amount);\r\n            params.node.setSelected(false);\r\n        } else {\r\n            if (params.node.selected !== false) {\r\n                params.node.setSelected(true);\r\n\r\n                params.node.setDataValue('documentAmount', params.data.debit);\r\n                params.context.component.totalDebit = 0;\r\n                const selectedRows = params.context.component.gridApi.getSelectedRows();\r\n                selectedRows.forEach(\r\n                    (selectedDocumentRow) => {\r\n                        params.context.component.totalDebit += ConvertToNumber(selectedDocumentRow.debit);\r\n                    },\r\n                );\r\n                params.context.component.totalBalance =\r\n                    params.context.component.totalCredit - params.context.component.totalDebit;\r\n                params.context.component.formattedInput = params.context.component.totalBalance.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                });\r\n            } else {\r\n                params.node.setDataValue('debit', params.data.amount);\r\n                params.node.setDataValue('documentAmount', params.data.amount);\r\n            }\r\n        }\r\n    }\r\n    deselectNode(currentRowIndex) {\r\n        this.documentMatchingGridOptions.api.forEachNode((node) => {\r\n            if (Number(node.id) === currentRowIndex) {\r\n                this.documentMatchingGridOptions.api.deselectNode(node);\r\n            }\r\n        });\r\n    }\r\n    onCreateMatchRowSelected(event) {\r\n        this.functionalCurrencyAmount = 0;\r\n        this.statutoryCurrencyAmount = 0;\r\n        const currentRowIndex = event.rowIndex;\r\n        if (event.node.selected === false) {\r\n            this.isDocumentsSelected = false;\r\n\r\n            // Restoration of the initial value of the cell, in the case the user edited it\r\n            if (event.data.credit) {\r\n                event.node.setDataValue('credit', Math.abs(event.data.amount));\r\n            }\r\n            if (event.data.debit) {\r\n                event.node.setDataValue('debit', Math.abs(event.data.amount));\r\n            }\r\n        }\r\n        if (event.node.selected) {\r\n            this.isDocumentsSelected = true;\r\n            if (event.data.matchFlagCode) {\r\n                this.snackbarService.informationSnackBar('Document is preliminary marked and cannot be selected');\r\n                this.gridApi.deselectIndex(currentRowIndex);\r\n            }\r\n            if (event.data.credit) {\r\n                event.node.setDataValue('isCreditOrDebit', MatchingType.Credit);\r\n            }\r\n            if (event.data.debit) {\r\n                event.node.setDataValue('isCreditOrDebit', MatchingType.Debit);\r\n            }\r\n        }\r\n        this.totalCredit = 0;\r\n        this.totalDebit = 0;\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        selectedRows.forEach(\r\n            (selectedDocumentRow) => {\r\n                if (selectedDocumentRow.credit) {\r\n                    this.totalCredit = ConvertToNumber(this.totalCredit) + ConvertToNumber(selectedDocumentRow.credit);\r\n                }\r\n                if (selectedDocumentRow.debit) {\r\n                    this.totalDebit = ConvertToNumber(this.totalDebit) + ConvertToNumber(selectedDocumentRow.debit);\r\n                }\r\n                this.selectedDocumentLength = selectedRows.length;\r\n                this.documentDate = selectedDocumentRow.documentDate.toDateString();\r\n            });\r\n        this.totalBalance = this.totalCredit - this.totalDebit;\r\n        this.formattedInput = this.totalBalance.toLocaleString(undefined, {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2,\r\n        });\r\n        this.selectedDocumentsToMatch = this.gridApi.getSelectedRows();\r\n    }\r\n\r\n    onMatchSelectedButtonClicked() {\r\n        this.isSave = true;\r\n        if (this.gridApi) {\r\n            if (this.gridApi.getSelectedRows().length > 0) {\r\n                if (this.totalBalance === 0) {\r\n                    const matchDateDialog = this.dialog.open(CashMatchingDialogComponent, {\r\n                        data: {\r\n                            title: 'Cash Matching Dialog',\r\n                            text: 'Revaluation Document Date / Payment Document Date',\r\n                            okButton: 'Confirm',\r\n                            cancelButton: 'Cancel',\r\n                            value: this.documentDate,\r\n                        },\r\n                    });\r\n                    this.subscriptions.push(matchDateDialog.afterClosed().subscribe((answer) => {\r\n                        if (answer && answer['buttonClicked']) {\r\n                            this.paymentDocumentDate = answer['buttonValue'];\r\n                            this.matchDocuments();\r\n                        }\r\n                    }));\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Selected Items do not balance',\r\n                    );\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Select a document to match',\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    matchDocuments() {\r\n        this.model = new DocumentMatchingRecord();\r\n        this.populateEntity();\r\n        this.executionService.createMatchFlag(this.model)\r\n            .subscribe((data) => {\r\n                this.isDialogClosed = true;\r\n                this.matchCodeSelected = data.matchFlagCode as string;\r\n                if (data) {\r\n                    this.journalDocumentId = data.journalId;\r\n                    this.transactionDocumentId = data.transactionDocumentId;\r\n                    this.journalFieldShow = (data.journalId) ? true : false;\r\n                    this.gridApi.setRowData([]);\r\n                    this.counterpartyCtrl.reset();\r\n                    this.clientNameCtrl.patchValue(null);\r\n                    this.currencyCtrl.setValue(this.functionalCurrency);\r\n                    const selectedDepartments = this.masterData.departments.filter(\r\n                        (department) => department.departmentCode === 'ALL',\r\n                    );\r\n                    this.departmentCtrl.setValue(selectedDepartments[0].departmentCode);\r\n                    this.docReferenceCtrl.patchValue(null);\r\n                    this.secDocReferenceCtrl.patchValue(null);\r\n                    this.currentDocDateCtrl.patchValue(null);\r\n                    this.docReferenceCtrl.enable(); // ReversalRevalJournalCode\r\n                    let informationMessage: string = 'The match ' + data.matchFlagCode + ' has been created.';\r\n                    if (data.reversalRevalJournalCode) {\r\n                        informationMessage = informationMessage + '\\nThe Reval ' + data.reversalRevalJournalCode + ' has been created.';\r\n                    }\r\n                    this.snackbarService.informationAndCopySnackBar(informationMessage, informationMessage);\r\n                }\r\n                if (this.gridApi) {\r\n                    this.gridApi.setRowData([]);\r\n                }\r\n            },\r\n                (error) => {\r\n                    this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                },\r\n                () => {\r\n                });\r\n    }\r\n    populateEntity() {\r\n        this.model.counterpartyId = this.counterpartyId;\r\n        this.model.currencyCode = this.currencyCtrl.value;\r\n        this.model.functionalCurrency = this.functionalCurrency;\r\n        this.model.statutoryCurrency = this.statutoryCurrency;\r\n        this.model.paymentDocumentDate = this.paymentDocumentDate;\r\n        this.model.totalAmount = this.totalBalance;\r\n        this.model.documentMatchings = this.getDocumentMatching();\r\n        this.model.manualDocumentMatchings = this.getDocumentMatching();\r\n    }\r\n\r\n    getDocumentMatching() {\r\n        // The sign of amount and document amount should be the same\r\n        // If you want to change this line, please check with Dorine Boutten or Michael Durand\r\n        const documentMatchings: DocumentMatching[] = this.gridApi.getSelectedRows();\r\n        documentMatchings.forEach((doc) => {\r\n            if (Math.sign(doc.amount) !== Math.sign(doc.documentAmount)) {\r\n                doc.documentAmount = -doc.documentAmount;\r\n            }\r\n        });\r\n        return documentMatchings;\r\n    }\r\n    onCloseButtonClicked() {\r\n        this.isDialogClosed = false;\r\n    }\r\n    onGridReady(params) {\r\n        params.columnApi.autoSizeColumns();\r\n        params.columnDefs = this.documentMatchingGridColumns;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridService.sizeColumns(params);\r\n        window.onresize = () => {\r\n            this.gridService.sizeColumns(params);\r\n\r\n        };\r\n    }\r\n    onCounterpartyIdSelected(value: Counterparty) {\r\n        const counterparty = this.masterData.counterparties.filter(\r\n            (item) => item.counterpartyCode === value.counterpartyCode,\r\n        );\r\n        if (counterparty.length > 0) {\r\n            this.counterpartyId = counterparty[0].counterpartyID;\r\n            this.clientNameCtrl.patchValue(counterparty[0].description);\r\n            if (!this.docReferenceCtrl.value) {\r\n                this.docReferenceCtrl.disable();\r\n            }\r\n            this.disableSearchButton();\r\n        } else {\r\n            this.docReferenceCtrl.enable();\r\n        }\r\n        this.clientNameCtrl.disable();\r\n\r\n    }\r\n\r\n    clearDropdownControls() {\r\n        this.docReferenceCtrl.reset();\r\n    }\r\n\r\n    onDepartmentCodeSelected(departmentCode: string) {\r\n        const selectedDepartments = this.masterData.departments.filter(\r\n            (department) => department.departmentCode === departmentCode,\r\n        );\r\n        if (selectedDepartments.length > 0) {\r\n            this.departmentValue = selectedDepartments[0].departmentCode !== 'ALL' ?\r\n                selectedDepartments[0].departmentId : null;\r\n        }\r\n    }\r\n    onDocumentReferenceOptionSelected(documentReference: string) {\r\n        this.executionService.getDocumentToMatchByDocumentReference(documentReference)\r\n            .subscribe((data) => {\r\n                if (data && data.value) {\r\n                    let distinctCounterparty;\r\n                    let isDifferentCounterParties: boolean = false;\r\n                    data.value.forEach((row) => {\r\n                        if (!isDifferentCounterParties) {\r\n                            if (distinctCounterparty && distinctCounterparty !== row.counterpartyId) {\r\n                                isDifferentCounterParties = true;\r\n                                this.counterpartyCtrl.patchValue('');\r\n                                this.documentMatchingGridRows = null;\r\n                                this.snackbarService.throwErrorSnackBar('This Document has different Counterparties');\r\n                            } else {\r\n                                distinctCounterparty = row.counterpartyId;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (!isDifferentCounterParties) {\r\n                        this.documentSelectionModel = data.value[0];\r\n                        if (this.documentSelectionModel && this.documentSelectionModel.counterpartyId) {\r\n                            const counterparty = this.masterData.counterparties.filter(\r\n                                (item) => item.counterpartyID === this.documentSelectionModel.counterpartyId,\r\n                            );\r\n                            if (counterparty.length > 0) {\r\n                                this.counterpartyValue = counterparty[0].counterpartyCode;\r\n                                this.counterpartyCtrl.patchValue(counterparty[0]);\r\n                                this.clientNameCtrl.setValue(counterparty[0].description);\r\n                                this.disableSearchButton();\r\n                            }\r\n                        }\r\n                        if (this.documentSelectionModel && this.documentSelectionModel.departmentId) {\r\n                            const department = this.masterData.departments.filter(\r\n                                (item) => item.departmentId === this.documentSelectionModel.departmentId,\r\n                            );\r\n                            if (department.length > 0) {\r\n                                this.departmentCtrl.setValue(department[0].departmentCode);\r\n                                this.departmentValue = department[0].departmentId;\r\n                            }\r\n                        }\r\n                        if (this.documentSelectionModel && this.documentSelectionModel.currencyCode) {\r\n                            this.currencyCtrl.setValue(this.documentSelectionModel.currencyCode);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.counterpartyCtrl.reset();\r\n                this.clientNameCtrl.patchValue(null);\r\n                this.currencyCtrl.setValue(this.functionalCurrency);\r\n                const selectedDepartments = this.masterData.departments.filter(\r\n                    (department) => department.departmentCode === 'ALL',\r\n                );\r\n                this.departmentCtrl.setValue(selectedDepartments[0].departmentCode);\r\n                if (this.docReferenceCtrl.value) {\r\n                    this.docReferenceCtrl.patchValue(null);\r\n                }\r\n                this.secDocReferenceCtrl.patchValue(null);\r\n                this.currentDocDateCtrl.patchValue(null);\r\n                this.gridApi.setRowData([]);\r\n                this.docReferenceCtrl.enable();\r\n                this.totalBalance = null;\r\n                this.isDialogClosed = false;\r\n            }\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            counterpartyCtrl: this.counterpartyCtrl,\r\n            clientNameCtrl: this.clientNameCtrl,\r\n            docReferenceCtrl: this.docReferenceCtrl,\r\n            secDocReferenceCtrl: this.secDocReferenceCtrl,\r\n            departmentCtrl: this.departmentCtrl,\r\n            currencyCtrl: this.currencyCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if ((this.counterpartyCtrl.dirty || this.departmentCtrl.dirty || this.clientNameCtrl.dirty ||\r\n            this.secDocReferenceCtrl.dirty || this.currencyCtrl.dirty || this.docReferenceCtrl.dirty) && this.isSave === false) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    disableSearchButton() {\r\n        this.isSearchDisabled = ((!this.docReferenceCtrl.value) && (!this.counterpartyCtrl.value)) ? true : false;\r\n    }\r\n    onAccountingEntriesButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/financial/accounting/entries'],\r\n            {\r\n                queryParams:\r\n                {\r\n                    matchFlag: this.matchCodeSelected,\r\n                },\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<atlas-cash-matching-home></atlas-cash-matching-home>\\r\\n<div class=\\\"main-container\\\">\\r\\n\\r\\n    <mat-card *ngIf=\\\"isDialogClosed\\\">\\r\\n        <mat-card-header *ngIf=\\\"journalFieldShow\\\">\\r\\n            <mat-card-title>\\r\\n                <h3>Revaluation Journal\\r\\n                    <span class=\\\"total-figure-value\\\">{{selectedJournalValue}}\\r\\n                    </span> Reversed by <span class=\\\"total-figure-value\\\">{{journalDocumentId}}\\r\\n                    </span>\\r\\n                </h3>\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-subtitle>\\r\\n            <h3>Removal of Match Flag <span class=\\\"total-figure-value\\\">{{matchFlagSelected}}</span> completed\\r\\n            </h3>\\r\\n        </mat-card-subtitle>\\r\\n        <div class=\\\"button-container\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             fxLayoutGap=\\\"8px\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onCloseButtonClicked()\\\">\\r\\n                CLOSE </button>\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onAccountingEntriesButtonClicked()\\\">\\r\\n                GO TO ACC. ENTRIES\\r\\n            </button>\\r\\n\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n    <mat-card>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                Documents to unmatch\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\"\\r\\n                 fxFlex=\\\"15%\\\">\\r\\n                <div fxFlex=\\\"98%\\\">\\r\\n                    <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                             [fieldControl]=\\\"counterpartyCtrl\\\"\\r\\n                                                             [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                             label=\\\"Client Account\\\"\\r\\n                                                             displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                             [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                             [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                             gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                             (optionSelected)=\\\"onCounterpartyIdSelected($event)\\\">\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                </div>\\r\\n            </div>\\r\\n            <mat-form-field fxFlex=\\\"16%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Client Name\\\"\\r\\n                       [formControl]=\\\"clientNameCtrl\\\"\\r\\n                       label=\\\"Client Name\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Client Name\\\">\\r\\n            </mat-form-field>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"8%\\\"\\r\\n                 [class.isEmpty]=\\\"!departmentsCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"departmentsCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Department\\\"\\r\\n                           [required]=\\\"departmentsCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"departments\\\"\\r\\n                           [formControl]=\\\"departmentsCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           matTooltip=\\\"Depatment Code\\\">\\r\\n                    <mat-autocomplete #departments=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (optionSelected)=\\\"onDepartmentCodeSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let department of filteredDepartmentsList\\\"\\r\\n                                    [value]=\\\"department.departmentCode\\\">\\r\\n                            {{department.departmentCode}} | {{department.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"departmentsCtrl.hasError('required')\\\"> Required\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"departmentsCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"12%\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\"\\r\\n                 [class.isEmpty]=\\\"!currencyCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"currencyCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Currency\\\"\\r\\n                           [required]=\\\"currencyCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"currencies\\\"\\r\\n                           [formControl]=\\\"currencyCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           matTooltip=\\\"Currency\\\">\\r\\n                    <mat-autocomplete #currencies=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (optionSelected)=\\\"onCurrencyOptionSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let currency of filteredCurrencyList\\\"\\r\\n                                    [value]=\\\"currency.currencyCode\\\">{{currency.currencyCode}} |\\r\\n                            {{currency.description}}</mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"currencyCtrl.hasError('required')\\\"> Required\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"currencyCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <mat-form-field fxFlex=12%>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"DocumentReference\\\"\\r\\n                       [matAutocomplete]=\\\"documentReferences\\\"\\r\\n                       [formControl]=\\\"docReferenceCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Document Reference\\\">\\r\\n                <mat-autocomplete #documentReferences=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\"\\r\\n                                  (optionSelected)=\\\"onDocumentReferenceOptionSelected($event.option.value)\\\">\\r\\n                    <mat-option *ngFor=\\\"let docReference of filteredDocReferenceList\\\"\\r\\n                                [value]=\\\"docReference.documentReference\\\">\\r\\n                        {{docReference.documentReference}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"docReferenceCtrl.hasError('inDropdownList')\\\">\\r\\n                    Document Reference doesn't exist\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=14%>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Second Document Reference\\\"\\r\\n                       [formControl]=\\\"secDocReferenceCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Second Document Reference\\\">\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=12%>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Match Flag\\\"\\r\\n                       [matAutocomplete]=\\\"matchFlags\\\"\\r\\n                       [formControl]=\\\"matchFlagCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Match Flag\\\">\\r\\n                <mat-autocomplete #matchFlags=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\"\\r\\n                                  (optionSelected)=\\\"onMatchFlagOptionSelected($event.option.value)\\\">\\r\\n                    <mat-option *ngFor=\\\"let matchFlag of filteredMatchFlagList\\\"\\r\\n                                [value]=\\\"matchFlag.matchFlagCode\\\">\\r\\n                        {{matchFlag.matchFlagCode}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"matchFlagCtrl.hasError('inDropdownList')\\\">\\r\\n                    Match Code doesn't exist\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <button mat-icon-button\\r\\n                    [disabled]=\\\"isSearchDisabled\\\"\\r\\n                    (click)=\\\"onDeleteMatchSearchButtonClicked()\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\"\\r\\n         *ngIf=\\\"isDataAvailable\\\">\\r\\n        <mat-card fxFlex=100%>\\r\\n            <div ag-grid=\\\"documentMatchingGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [columnDefs]=\\\"documentMatchingGridColumns\\\"\\r\\n                                 [rowData]=\\\"documentMatchingGridRows\\\"\\r\\n                                 [gridOptions]=\\\"documentMatchingGridOptions\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (rowSelected)=\\\"onDeleteMatchRowSelected($event)\\\"\\r\\n                                 (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                 [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                                 rowSelection=\\\"multiple\\\"\\r\\n                                 [singleClickEdit]=\\\"true\\\"\\r\\n                                 [suppressRowClickSelection]=\\\"true\\\"\\r\\n                                 [suppressNoRowsOverlay]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 [enableFilter]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Balance : <span class=\\\"total-figure-value\\\">{{totalBalance}}\\r\\n                    </span></mat-card-subtitle>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <atlas-empty-state *ngIf=\\\"!isDataAvailable\\\"\\r\\n                       title=\\\"No Entries to display\\\"\\r\\n                       message=\\\"Edit the filters and generate the table again\\\"\\r\\n                       #emptyStateComponent></atlas-empty-state>\\r\\n    <div fxLayout=\\\"row \\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start \\\">\\r\\n            <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                    mat-button>\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start \\\"\\r\\n             *ngIf=\\\"isDataAvailable\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\">\\r\\n                <button (click)=\\\"onEditPaymentDocumentButtonClicked()\\\"\\r\\n                        mat-button>\\r\\n                    EDIT PAYMENT DOCUMENT DATE\\r\\n                </button>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onUnmatchButtonClicked()\\\"\\r\\n                        [disabled]=\\\"isCompanyFrozen\\\">\\r\\n                    UNMATCH SELECTED\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".matched-document {\\n  margin-right: 5%;\\n  float: left;\\n  padding-top: 18px;\\n  color: green; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { EmptyStateComponent } from '../../../../shared/components/empty-state/empty-state.component';\r\nimport { inDropdownListValidator } from '../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { Currency } from '../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { MasterDataProps } from '../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { MatchingType } from '../../../../shared/enums/matching-type.enum';\r\nimport { TransactionDocument } from '../../../../shared/enums/transaction-document.enum';\r\nimport { ConvertToNumber, CustomNumberMask } from '../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { DocumentMatching } from '../../../../shared/services/execution/dtos/document-matching';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { ForeignExchangeService } from '../../../../shared/services/http-services/foreign-exchange.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { DocumentMatchingRecord } from '../../../../shared/services/preaccounting/dtos/document-matching-record';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { nameof, UtilService } from '../../../../shared/services/util.service';\r\nimport { DeleteMatchingDialogComponent } from '../cash-matching-dialog/delete-matching-dialog/delete-matching-dialog.component';\r\nimport { PaymentDocumentDateDialogComponent } from '../cash-matching-dialog/payment-document-date-dialog/payment-document-date-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-delete-match-flag',\r\n    templateUrl: './delete-match-flag.component.html',\r\n    styleUrls: ['./delete-match-flag.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class DeleteMatchFlagComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('emptyStateComponent') emptyStateComponent: EmptyStateComponent;\r\n    counterpartyCtrl = new AtlasFormControl('Counterparty');\r\n    clientNameCtrl = new AtlasFormControl('ClientName');\r\n    departmentsCtrl = new AtlasFormControl('Department');\r\n    currencyCtrl = new AtlasFormControl('Currency');\r\n    docReferenceCtrl = new AtlasFormControl('DocumentReference');\r\n    secDocReferenceCtrl = new AtlasFormControl('SecondaryReference');\r\n    matchFlagCtrl = new AtlasFormControl('MatchFlag');\r\n    currentDocDateCtrl = new AtlasFormControl('CurrentDocumentDate');\r\n    filteredCounterPartyList: Counterparty[];\r\n    filteredDepartmentsList: Department[];\r\n    filteredCurrencyList: Currency[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    dataLength: number = 0;\r\n    documentMatching: DocumentMatching[];\r\n    selectedDocumentsToMatch: DocumentMatching[];\r\n\r\n    documentIndex: number;\r\n    index: number = 0;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    isEdit: boolean;\r\n    journalFieldShow: boolean = false;\r\n    matchFlagCode: number;\r\n    journalDocumentId: string;\r\n    isDialogClosed: boolean = false;\r\n    matchFlagId: number;\r\n    documentMatchingGridOptions: agGrid.GridOptions = {};\r\n    documentMatchingGridColumns: agGrid.ColDef[];\r\n    documentMatchingGridRows: DocumentMatching[];\r\n    documentReference: DocumentMatching[] = [];\r\n    matchFlagList: DocumentMatching[] = [];\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Counterparties,\r\n        MasterDataProps.Departments,\r\n        MasterDataProps.Currencies];\r\n    company: string;\r\n    counterpartyId: number;\r\n    departmentValue: number;\r\n    matchType: number;\r\n    totalBalance: number;\r\n    filteredDocReferenceList: DocumentMatching[];\r\n    filteredMatchFlagList: DocumentMatching[];\r\n    documentSelectionModel: DocumentMatching;\r\n    documentsDeleted: string[];\r\n\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'This field is required')\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n    isSearchDisabled: boolean;\r\n    isSave: boolean = false;\r\n    documentReferenceValue: string;\r\n    counterpartyValue: string;\r\n    matchFlagValue: string;\r\n    matchFlagSelected: string;\r\n    totalCredit: number;\r\n    totalDebit: number;\r\n    isDocumentsSelected: boolean = false;\r\n    selectedDocumentLength: number;\r\n    companyConfiguration: Company;\r\n    cashCurrency: string;\r\n    cashCurrencyRate: number;\r\n    cashCurrencyRoeType: string;\r\n    selectedJournalValue: string;\r\n    amountInUSD: number;\r\n    functionalCurrencyAmount: number;\r\n    statutoryCurrencyAmount: number;\r\n    statutoryCurrency: string;\r\n    functionalCurrency: string;\r\n    statutoryCurrencyRoeType: string;\r\n    statutoryCurrenyRate: number;\r\n    functionalCurrencyRoeType: string;\r\n    functionalCurrencyRate: number;\r\n    public model: DocumentMatchingRecord;\r\n    public paymentDocumentModel: DocumentMatchingRecord;\r\n    paymentDocumentDate: Date;\r\n    paymentDocumentDateString: string;\r\n    isDataAvailable: boolean = false;\r\n    isCompanyFrozen: boolean;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected datepipe: DatePipe,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        private router: Router,\r\n        protected utilService: UtilService,\r\n        protected dialog: MatDialog,\r\n        protected uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService,\r\n        private executionService: ExecutionService,\r\n        private foreignExchangeService: ForeignExchangeService,\r\n        protected companyManager: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n    }\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.currentDocDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.functionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.statutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n        this.filteredCounterPartyList = this.masterData.counterparties;\r\n        this.matchType = MatchingType.createMatch;\r\n        this.currencyCtrl.setValue(this.functionalCurrency);\r\n        this.isSearchDisabled = true;\r\n        this.counterpartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.counterparties,\r\n                ['counterpartyCode', 'description', 'counterpartyID'],\r\n            );\r\n            if (this.counterpartyCtrl.valid) {\r\n                this.onCounterpartyIdSelected(this.counterpartyCtrl.value);\r\n            } else {\r\n                if (this.counterpartyCtrl.value !== null && this.counterpartyCtrl.value.length === 0) {\r\n                    this.docReferenceCtrl.enable();\r\n                    this.matchFlagCtrl.enable();\r\n                }\r\n            }\r\n        });\r\n        this.filteredDepartmentsList = [];\r\n        this.filteredDepartmentsList = this.masterData.departments;\r\n        const departments = this.filteredDepartmentsList.filter((a) => a.departmentId === 0);\r\n        if (departments === undefined) {\r\n            this.filteredDepartmentsList.push({\r\n                departmentId: 0, departmentCode: 'ALL', description: 'ALL Departments',\r\n                profitCenterId: null, companyId: null, companyCode: null,\r\n            });\r\n        }\r\n\r\n        this.departmentsCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartmentsList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.departments,\r\n                ['departmentCode', 'description'],\r\n            );\r\n        });\r\n        const selectedDepartments = this.masterData.departments.filter(\r\n            (department) => department.departmentCode === 'ALL',\r\n        );\r\n        if (selectedDepartments.length > 0) {\r\n            this.departmentValue = null;\r\n            this.departmentsCtrl.setValue(selectedDepartments[0].departmentCode);\r\n        }\r\n        this.filteredCurrencyList = this.masterData.currencies;\r\n        this.currencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.currencies,\r\n                ['currencyCode', 'description'],\r\n            );\r\n        });\r\n        this.executionService.getDocumentReferenceValues(this.matchType = MatchingType.deleteMatch)\r\n            .subscribe((data) => {\r\n                data.value.forEach((item) => this.documentReference.push(this.populateDocuments(item)));\r\n                this.filteredDocReferenceList = this.documentReference;\r\n            });\r\n        this.docReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDocReferenceList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.documentReference, ['documentReference'],\r\n            );\r\n            if (this.docReferenceCtrl.valid) {\r\n                if (this.docReferenceCtrl.value) {\r\n                    if (this.docReferenceCtrl.value.length === 0) {\r\n                        this.disableSearchButton();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.getMatchFlagList();\r\n        this.calculateFxRate();\r\n        this.initializeGridColumns();\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.isCompanyFrozen = this.companyManager.getCompany(this.company).isFrozen;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if ((this.counterpartyCtrl.dirty || this.departmentsCtrl.dirty || this.clientNameCtrl.dirty || this.secDocReferenceCtrl.dirty || this.currencyCtrl.dirty || this.docReferenceCtrl.dirty || this.matchFlagCtrl.dirty) && this.isSave === false) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        if ((this.counterpartyCtrl.dirty || this.departmentsCtrl.dirty || this.clientNameCtrl.dirty || this.secDocReferenceCtrl.dirty || this.currencyCtrl.dirty || this.docReferenceCtrl.dirty || this.matchFlagCtrl.dirty) && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n    getMatchFlagList() {\r\n        this.executionService.getMatchFlag()\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    data.value.forEach((item) => this.matchFlagList.push(this.populateMatchFlag(item)));\r\n                    this.filteredMatchFlagList = this.matchFlagList;\r\n                }\r\n            });\r\n        this.matchFlagCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredMatchFlagList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.matchFlagList, ['matchFlagCode'],\r\n            );\r\n            if (this.matchFlagCtrl.valid) {\r\n                if (this.matchFlagCtrl.value) {\r\n                    if (this.matchFlagCtrl.value.length === 0) {\r\n                        this.disableSearchButton();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    calculateFxRate() {\r\n        this.foreignExchangeService.getForeignExchangeRate\r\n            (new Date(this.currentDocDateCtrl.value), this.functionalCurrency)\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.functionalCurrencyRate = data.rate != null ? Number(data.rate) : null; // TODO: use AtlasNumber\r\n                    this.functionalCurrencyRoeType = data.currencyRoeType;\r\n                }\r\n            });\r\n        this.foreignExchangeService.getForeignExchangeRate\r\n            (new Date(this.currentDocDateCtrl.value), this.statutoryCurrency)\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.statutoryCurrenyRate = data.rate != null ? Number(data.rate) : null; // TODO: use AtlasNumber\r\n                    this.statutoryCurrencyRoeType = data.currencyRoeType;\r\n                }\r\n            });\r\n    }\r\n\r\n    populateDocuments(value: any) {\r\n        const documentsForMatching = new DocumentMatching();\r\n        documentsForMatching.documentReference = value.documentReference;\r\n        return documentsForMatching;\r\n    }\r\n    populateMatchFlag(value: any) {\r\n        const matchFlagList = new DocumentMatching();\r\n        matchFlagList.matchFlagCode = value.matchFlagCode;\r\n        return matchFlagList;\r\n    }\r\n    initializeGridColumns() {\r\n        this.documentMatchingGridColumns = [\r\n            {\r\n                headerName: 'Transaction Document Id',\r\n                field: 'transactionDocumentId',\r\n                colId: 'transactionDocumentId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Secondary Document Reference',\r\n                field: 'secondaryRef',\r\n                colId: 'secondaryRef',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'DepartmentId',\r\n                field: 'departmentId',\r\n                colId: 'departmentId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Match Flag',\r\n                field: 'matchFlagCode',\r\n                colId: 'matchFlagCode',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Document Date',\r\n                field: 'documentDate',\r\n                colId: 'documentDate',\r\n                hide: false,\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'Value Date',\r\n                field: 'valueDate',\r\n                colId: 'valueDate',\r\n                hide: false,\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Payment Document Date',\r\n                field: 'paymentDocumentDate',\r\n                colId: 'paymentDocumentDate',\r\n                hide: true,\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'Expense Code',\r\n                field: 'expenseCode',\r\n                colId: 'expenseCode',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Document Type',\r\n                field: 'documentType',\r\n                colId: 'documentType',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'TotalAmount',\r\n                field: 'amount',\r\n                colId: 'amount',\r\n                type: 'numericColumn',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'TransactionDirection',\r\n                field: 'transactionDirection',\r\n                colId: 'transactionDirection',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Match Flag',\r\n                field: 'matchFlagCode',\r\n                colId: 'matchFlagCode',\r\n                hide: true,\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Debit',\r\n                field: 'debit',\r\n                colId: 'debit',\r\n                hide: false,\r\n                pinned: 'right',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.NumberFormatterForTotalInGrid.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Credit',\r\n                field: 'credit',\r\n                colId: 'credit',\r\n                hide: false,\r\n                pinned: 'right',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.NumberFormatterForTotalInGrid.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: 'JournalLineId',\r\n                field: 'lineId',\r\n                colId: 'lineId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'DocumentAmount',\r\n                field: 'documentAmount',\r\n                colId: 'documentAmount',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Document Type',\r\n                field: 'isCreditOrDebit',\r\n                colId: 'isCreditOrDebit',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Amount in Func CCY',\r\n                field: 'functionalCcyAmount',\r\n                colId: 'functionalCcyAmount',\r\n                hide: true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Amount in Stat CCY',\r\n                field: 'statutoryCcyAmount',\r\n                colId: 'statutoryCcyAmount',\r\n                hide: true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n            },\r\n            {\r\n                headerCheckboxSelection: false,\r\n                checkboxSelection: true,\r\n                width: 40,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'right',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if ((params.column.colId === 'credit' || params.column.colId === 'debit') && !params.value) {\r\n            params.node.setDataValue(params.column.colId, params.oldValue);\r\n        }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            return Number(param.value).toFixed(2);\r\n        }\r\n    }\r\n    setValidators() {\r\n        this.counterpartyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.counterparties,\r\n                    nameof<Counterparty>('counterpartyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n        this.docReferenceCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.documentReference,\r\n                    nameof<DocumentMatching>('documentReference'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.matchFlagCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.matchFlagList,\r\n                    nameof<DocumentMatching>('matchFlagCode'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.departmentsCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n    }\r\n    onDeleteMatchSearchButtonClicked() {\r\n        this.isSave = true;\r\n        this.isLoading = true;\r\n        this.isDialogClosed = false;\r\n        if (this.departmentsCtrl.value === '') {\r\n            const selectedDepartments = this.masterData.departments.filter(\r\n                (department) => department.departmentCode === 'ALL',\r\n            );\r\n            if (selectedDepartments.length > 0) {\r\n                this.departmentValue = null;\r\n                this.departmentsCtrl.setValue(selectedDepartments[0].departmentCode);\r\n            }\r\n        }\r\n        if (this.counterpartyCtrl.valid && this.currencyCtrl.valid) {\r\n            if (this.gridApi) {\r\n                this.isDocumentsSelected = this.gridApi.getSelectedRows().length > 0 ? true : false;\r\n            }\r\n\r\n            if (this.isDocumentsSelected === false) {\r\n                this.documentIndex = 0;\r\n                this.index = 0;\r\n                this.getDocumentsToUnmatch();\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Cannot Search when document is selected',\r\n                );\r\n                this.isLoading = false;\r\n            }\r\n        } else {\r\n            this.isLoading = false;\r\n        }\r\n        this.disableSearchButton();\r\n    }\r\n    getDocumentsToUnmatch() {\r\n        this.executionService\r\n            .getDocumentToUnmatch\r\n            (this.counterpartyId.toString(), this.departmentValue, this.currencyCtrl.value, this.docReferenceCtrl.value, this.matchFlagCtrl.value)\r\n            .subscribe((data) => {\r\n                if (data && data.value.length > 0) {\r\n                    this.documentMatching = data.value;\r\n                    this.initializeGridColumns();\r\n                    for (this.documentIndex = 0; this.documentIndex < data.value['length']; this.documentIndex++) {\r\n                        this.documentMatching[this.index].amount = data.value[this.index].amount;\r\n                        this.calculateDebitCreditAmounts();\r\n                        this.getDepartmentCodeValue();\r\n                        this.index++;\r\n                    }\r\n                    this.documentMatchingGridRows = this.documentMatching;\r\n                    this.isLoading = false;\r\n                    this.isDataAvailable = true;\r\n                    this.dataLength = this.documentMatchingGridRows.length;\r\n                } else {\r\n                    if (this.gridApi) {\r\n                        this.gridApi.setRowData([]);\r\n                    }\r\n                    this.isLoading = false;\r\n                    this.isDataAvailable = false;\r\n                }\r\n            });\r\n    }\r\n    getDocumentToUnmatchByDocumentReference() {\r\n        if (this.docReferenceCtrl.valid) {\r\n            this.executionService\r\n                .getDocumentToUnMatchbyDocumentReference(this.docReferenceCtrl.value).subscribe((data) => {\r\n                    if (data && data.value.length > 0) {\r\n                        this.documentMatching = data.value;\r\n                        this.initializeGridColumns();\r\n                        for (this.documentIndex = 0; this.documentIndex < data.value['length']; this.documentIndex++) {\r\n                            this.documentMatching[this.index].amount = data.value[this.index].amount;\r\n                            this.calculateDebitCreditAmounts();\r\n                            this.getDepartmentCodeValue();\r\n                            this.index++;\r\n                        }\r\n                        this.documentMatchingGridRows = this.documentMatching;\r\n                        this.isLoading = false;\r\n                        this.isDataAvailable = true;\r\n                        this.dataLength = this.documentMatchingGridRows.length;\r\n                    } else {\r\n                        if (this.gridApi) {\r\n                            this.gridApi.setRowData([]);\r\n                        }\r\n                        this.snackbarService.throwErrorSnackBar('No records are available for this search criteria.');\r\n                        this.isLoading = false;\r\n                        this.isDataAvailable = false;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    getDepartmentCodeValue() {\r\n        const selectedDepartments = this.masterData.departments.filter(\r\n            (department) => department.departmentId === this.documentMatching[this.index].departmentId,\r\n        );\r\n        if (selectedDepartments.length > 0) {\r\n            this.documentMatching[this.index].departmentCode = selectedDepartments[0].departmentCode;\r\n        }\r\n    }\r\n    calculateDebitCreditAmounts() {\r\n        if (this.documentMatching[this.index].documentType === TransactionDocument.CashPayment\r\n            || this.documentMatching[this.index].documentType === TransactionDocument.SalesInvoice\r\n            || this.documentMatching[this.index].documentType === TransactionDocument.DebitNote\r\n            || this.documentMatching[this.index].documentType === TransactionDocument.JournalEntry) {\r\n            if (this.documentMatching[this.index].amount >= 0) {\r\n                this.documentMatching[this.index].debit = this.documentMatching[this.index].amount;\r\n            } else {\r\n                this.documentMatching[this.index].credit = -this.documentMatching[this.index].amount;\r\n            }\r\n            this.documentMatching[this.index].documentAmount = this.documentMatching[this.index].amount;\r\n        } else {\r\n            if (this.documentMatching[this.index].amount >= 0) {\r\n                this.documentMatching[this.index].credit = this.documentMatching[this.index].amount;\r\n            } else {\r\n                this.documentMatching[this.index].debit = -this.documentMatching[this.index].amount;\r\n            }\r\n            this.documentMatching[this.index].documentAmount = -this.documentMatching[this.index].amount;\r\n        }\r\n    }\r\n    deselectNode(currentRowIndex) {\r\n        this.documentMatchingGridOptions.api.forEachNode((node) => {\r\n            if (Number(node.id) === currentRowIndex) {\r\n                this.documentMatchingGridOptions.api.deselectNode(node);\r\n            }\r\n        });\r\n    }\r\n    onDeleteMatchRowSelected(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        const currentRowIndex = event.rowIndex;\r\n        this.totalCredit = 0;\r\n        this.totalDebit = 0;\r\n        this.functionalCurrencyAmount = 0;\r\n        this.statutoryCurrencyAmount = 0;\r\n        selectedRows.forEach(\r\n            (selectedDocumentRow) => {\r\n                if (selectedDocumentRow.credit) {\r\n                    this.totalCredit = ConvertToNumber(this.totalCredit) + ConvertToNumber(selectedDocumentRow.credit);\r\n                }\r\n                if (selectedDocumentRow.debit) {\r\n                    this.totalDebit = ConvertToNumber(this.totalDebit) + ConvertToNumber(selectedDocumentRow.debit);\r\n                }\r\n            });\r\n        this.totalBalance = this.totalCredit - this.totalDebit;\r\n        this.selectedDocumentLength = selectedRows.length;\r\n        if (!event.node.isSelected()) {\r\n            this.isDocumentsSelected = false;\r\n            if (event.data.matchFlagCode === this.matchFlagSelected) {\r\n                this.selectedJournalValue = '';\r\n                this.gridApi.forEachNode((rowData) => {\r\n                    if (rowData.data.matchFlagCode === this.matchFlagSelected) {\r\n                        rowData.selectThisNode(false);\r\n                    }\r\n                });\r\n            }\r\n            this.gridApi.deselectNode(event.node);\r\n        } else {\r\n            if (selectedRows.length === 1) {\r\n                if (event.node.selected === true) {\r\n                    this.isDocumentsSelected = true;\r\n                    this.matchFlagSelected = event.data.matchFlagCode;\r\n                    this.matchFlagId = event.data.matchFlagId;\r\n                    if (event.data.paymentDocumentDate) {\r\n                        this.paymentDocumentDate = event.data.paymentDocumentDate.toDateString();\r\n                    } else {\r\n                        this.paymentDocumentDate = event.data.documentDate.toDateString();\r\n                    }\r\n                }\r\n            }\r\n            if (selectedRows.length > 1) {\r\n                if (event.data.documentType === TransactionDocument.JournalEntry) {\r\n                    this.selectedJournalValue = event.data.documentReference;\r\n                }\r\n                if (event.data.matchFlagCode !== this.matchFlagSelected) {\r\n                    this.snackbarService.informationSnackBar('Only one MatchFlag can be deleted at a time');\r\n                    this.gridApi.deselectIndex(currentRowIndex);\r\n                }\r\n            }\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (rowData.data.matchFlagCode === this.matchFlagSelected) {\r\n                    rowData.selectThisNode(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (event.node.selected) {\r\n            if (event.data.credit) {\r\n                event.node.setDataValue('isCreditOrDebit', MatchingType.Credit);\r\n                if (this.cashCurrency !== null && this.cashCurrency !== 'USD') {\r\n                    this.amountInUSD = (this.cashCurrencyRoeType === 'M') ? (event.data.credit * this.cashCurrencyRate)\r\n                        : (event.data.credit / this.cashCurrencyRate);\r\n                    this.amountInUSD = (event.data.amount > 0) ? -(this.amountInUSD) : (this.amountInUSD);\r\n                } else if (this.cashCurrency === 'USD') {\r\n                    this.amountInUSD = event.data.credit;\r\n                    this.amountInUSD = (event.data.amount > 0) ? -(this.amountInUSD) : (this.amountInUSD);\r\n                }\r\n                this.getFuncAndStatCCYValues();\r\n            }\r\n            if (event.data.debit) {\r\n                event.node.setDataValue('isCreditOrDebit', MatchingType.Debit);\r\n                if (this.cashCurrency !== null && this.cashCurrency !== 'USD') {\r\n                    this.amountInUSD = (this.cashCurrencyRoeType === 'M') ? (event.data.debit * this.cashCurrencyRate)\r\n                        : (event.data.debit / this.cashCurrencyRate);\r\n                } else if (this.cashCurrency === 'USD') {\r\n                    this.amountInUSD = event.data.debit;\r\n                }\r\n                this.getFuncAndStatCCYValues();\r\n            }\r\n            event.node.setDataValue('functionalCcyAmount', this.functionalCurrencyAmount);\r\n            event.node.setDataValue('statutoryCcyAmount', this.statutoryCurrencyAmount);\r\n            event.node.setDataValue('documentAmount', event.data.documentAmount);\r\n        } else {\r\n            event.node.setDataValue('functionalCcyAmount', null);\r\n            event.node.setDataValue('statutoryCcyAmount', null);\r\n            event.node.setDataValue('documentAmount', null);\r\n        }\r\n        this.selectedDocumentsToMatch = this.gridApi.getSelectedRows();\r\n    }\r\n\r\n    getFuncAndStatCCYValues() {\r\n        if (this.statutoryCurrency !== null && this.statutoryCurrency !== 'USD') {\r\n            this.statutoryCurrencyAmount = (this.statutoryCurrencyRoeType === 'D') ? (this.amountInUSD * this.statutoryCurrenyRate)\r\n                : (this.amountInUSD / this.statutoryCurrenyRate);\r\n        } else if (this.statutoryCurrency === 'USD') {\r\n            this.statutoryCurrencyAmount = this.amountInUSD;\r\n        }\r\n        if (this.functionalCurrency !== null && this.functionalCurrency !== 'USD') {\r\n            this.functionalCurrencyAmount = (this.functionalCurrencyRoeType === 'D')\r\n                ? (this.amountInUSD * this.functionalCurrencyRate) : (this.amountInUSD / this.functionalCurrencyRate);\r\n        } else if (this.functionalCurrency === 'USD') {\r\n            this.functionalCurrencyAmount = this.amountInUSD;\r\n        }\r\n    }\r\n\r\n    onCurrencyOptionSelected(currencyCode: string) {\r\n        this.cashCurrency = currencyCode;\r\n        this.foreignExchangeService.getForeignExchangeRate\r\n            (new Date(this.currentDocDateCtrl.value), this.cashCurrency)\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.cashCurrencyRate = data.rate != null ? Number(data.rate) : null; // TODO: use AtlasNumber\r\n                    this.cashCurrencyRoeType = data.currencyRoeType;\r\n                }\r\n            });\r\n    }\r\n    onEditPaymentDocumentButtonClicked() {\r\n        this.isSave = true;\r\n        if (this.gridApi) {\r\n            if (this.gridApi.getSelectedRows().length > 0) {\r\n                if (this.totalBalance === 0) {\r\n                    this.executionService.getDocumentToUnmatchByMatchFlag(this.matchFlagSelected).subscribe((data) => {\r\n                        if (data && data.value.length > 0) {\r\n                            this.documentMatching = data.value;\r\n                            this.paymentDocumentDateString = this.datepipe.transform(data.value[0].paymentDocumentDate.toDateString(), 'dd/MM/yyyy');\r\n                            if (data.value[0].paymentDocumentDate === null) {\r\n                                this.paymentDocumentDateString = this.datepipe.transform(data.value[0].documentDate.toDateString(), 'dd/MM/yyyy');\r\n                            }\r\n                            const editMatchDialog = this.dialog.open(PaymentDocumentDateDialogComponent, {\r\n                                data: {\r\n                                    title: 'Edit Payment Document Date',\r\n                                    text1: 'Documents Matched with the Match Flag',\r\n                                    text2: 'The Payment Document Date of the Documents are',\r\n                                    okButton: 'Confirm',\r\n                                    cancelButton: 'Cancel',\r\n                                    value1: this.matchFlagSelected,\r\n                                    value2: this.paymentDocumentDate,\r\n                                    value3: this.paymentDocumentDateString,\r\n                                },\r\n                            });\r\n                            this.subscriptions.push(editMatchDialog.afterClosed().subscribe((answer) => {\r\n                                if (answer && answer['buttonClicked']) {\r\n                                    this.paymentDocumentDate = answer['buttonValue'];\r\n                                    this.editPaymentDocumentDate();\r\n                                }\r\n                            }));\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Balance should be equal to zero',\r\n                    );\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Select Documents to Edit',\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    onUnmatchButtonClicked() {\r\n        this.isSave = true;\r\n        if (this.gridApi) {\r\n            if (this.gridApi.getSelectedRows().length > 0) {\r\n                if (this.totalBalance === 0) {\r\n                    this.executionService.getDocumentToUnmatchByMatchFlag(this.matchFlagSelected).subscribe((data) => {\r\n                        if (data && data.value.length > 0) {\r\n                            this.paymentDocumentDate = data.value[0].paymentDocumentDate;\r\n                            if (data.value[0].paymentDocumentDate === null) {\r\n                                this.paymentDocumentDate = data.value[0].documentDate;\r\n                            }\r\n                        }\r\n                        const unmatchDialog = this.dialog.open(DeleteMatchingDialogComponent, {\r\n                            data: {\r\n                                title: 'Delete Matching Dialog',\r\n                                text: 'The system will delete the Match Flag',\r\n                                okButton: 'PROCEED',\r\n                                cancelButton: 'DISCARD',\r\n                                value: this.matchFlagSelected,\r\n                            },\r\n                            width: '46%',\r\n                            height: '25%',\r\n                        });\r\n                        this.subscriptions.push(unmatchDialog.afterClosed().subscribe((answer) => {\r\n                            if (answer && answer['buttonClicked']) {\r\n                                this.matchFlagSelected = answer['buttonValue'];\r\n                                this.unmatchDocuments();\r\n                            }\r\n                        }));\r\n                    });\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Balance should be equal to zero',\r\n                    );\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Select a document to match',\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    unmatchDocuments() {\r\n        this.model = new DocumentMatchingRecord();\r\n        this.populateEntity();\r\n        this.executionService.deleteMatchFlag(this.model)\r\n            .subscribe((data) => {\r\n                if (this.gridApi) {\r\n                    this.gridApi.setRowData([]);\r\n                }\r\n                this.matchFlagCtrl.reset();\r\n                this.isDialogClosed = true;\r\n                if (data) {\r\n                    this.journalDocumentId = data.reversalRevalJournalCode;\r\n                    this.journalFieldShow = true;\r\n                    this.gridApi.setRowData([]);\r\n                    this.counterpartyCtrl.reset();\r\n                    this.clientNameCtrl.patchValue(null);\r\n                    this.currencyCtrl.setValue(this.functionalCurrency);\r\n                    const selectedDepartments = this.masterData.departments.filter(\r\n                        (department) => department.departmentCode === 'ALL',\r\n                    );\r\n                    this.departmentsCtrl.setValue(selectedDepartments[0].departmentCode);\r\n                    this.docReferenceCtrl.patchValue(null);\r\n                    this.secDocReferenceCtrl.patchValue(null);\r\n                    this.currentDocDateCtrl.patchValue(null);\r\n                    this.docReferenceCtrl.enable();\r\n                    this.matchFlagCtrl.enable();\r\n                }\r\n            });\r\n    }\r\n    editPaymentDocumentDate() {\r\n        this.paymentDocumentModel = new DocumentMatchingRecord();\r\n        this.populateEditFields();\r\n        this.executionService.updateDocumentMatching(this.paymentDocumentModel)\r\n            .subscribe((data) => {\r\n                this.snackbarService.informationAndCopySnackBar('Documents with Match Flag : ' + this.matchFlagSelected + ' is updated', this.matchFlagSelected);\r\n                if (this.gridApi) {\r\n                    this.gridApi.setRowData([]);\r\n                }\r\n                this.onDeleteMatchSearchButtonClicked();\r\n            });\r\n    }\r\n    populateEntity() {\r\n        this.model.matchFlagCode = this.matchFlagSelected;\r\n        this.model.matchFlagId = this.matchFlagId;\r\n        this.model.currencyCode = this.currencyCtrl.value;\r\n        this.model.functionalCurrency = this.functionalCurrency;\r\n        this.model.statutoryCurrency = this.statutoryCurrency;\r\n        this.model.paymentDocumentDate = this.paymentDocumentDate;\r\n        this.model.manualDocumentMatchings = this.gridApi.getSelectedRows();\r\n        this.model.documentMatchings = this.gridApi.getSelectedRows();\r\n        this.model.unmatchDocuments = this.gridApi.getSelectedRows();\r\n    }\r\n    populateEditFields() {\r\n        this.paymentDocumentModel.matchFlagCode = this.matchFlagSelected;\r\n        this.paymentDocumentModel.paymentDocumentDate = this.paymentDocumentDate;\r\n        this.paymentDocumentModel.matchFlagId = this.matchFlagId;\r\n    }\r\n    onCloseButtonClicked() {\r\n        this.isSave = true;\r\n        this.isDialogClosed = false;\r\n    }\r\n    onCounterpartyIdSelected(value: Counterparty) {\r\n        const counterparty = this.masterData.counterparties.filter(\r\n            (item) => item.counterpartyCode === value.counterpartyCode,\r\n        );\r\n        if (counterparty.length > 0) {\r\n            this.counterpartyId = counterparty[0].counterpartyID;\r\n            this.clientNameCtrl.patchValue(counterparty[0].description);\r\n            if (!this.docReferenceCtrl.value) {\r\n                this.docReferenceCtrl.disable();\r\n            }\r\n            if (!this.matchFlagCtrl.value) {\r\n                this.matchFlagCtrl.disable();\r\n            }\r\n            this.disableSearchButton();\r\n        } else {\r\n            this.docReferenceCtrl.enable();\r\n            this.matchFlagCtrl.enable();\r\n        }\r\n        this.clientNameCtrl.disable();\r\n    }\r\n    onDepartmentCodeSelected(departmentCode: string) {\r\n        const selectedDepartments = this.masterData.departments.filter(\r\n            (department) => department.departmentCode === departmentCode,\r\n        );\r\n        if (selectedDepartments.length > 0) {\r\n\r\n            this.departmentValue = selectedDepartments[0].departmentCode !== 'ALL' ?\r\n                selectedDepartments[0].departmentId : null;\r\n        }\r\n    }\r\n    onDocumentReferenceOptionSelected(documentReference: string) {\r\n        this.documentReferenceValue = documentReference;\r\n        this.executionService.getDocumentToUnMatchbyDocumentReference(this.documentReferenceValue)\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.documentSelectionModel = data.value[0];\r\n                    this.populateSearchFields(this.documentSelectionModel);\r\n                    if (this.documentSelectionModel && this.documentSelectionModel.departmentId) {\r\n                        const department = this.masterData.departments.filter(\r\n                            (item) => item.departmentId === this.documentSelectionModel.departmentId,\r\n                        );\r\n                        if (department.length > 0) {\r\n                            this.departmentsCtrl.setValue(department[0].departmentCode);\r\n                            this.departmentValue = department[0].departmentId;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    }\r\n    onMatchFlagOptionSelected(matchFlagCode: string) {\r\n        this.matchFlagValue = matchFlagCode;\r\n        this.executionService.getDocumentToUnmatchByMatchFlag(this.matchFlagValue)\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.documentSelectionModel = data.value[0];\r\n                    this.populateSearchFields(this.documentSelectionModel);\r\n                }\r\n            });\r\n    }\r\n    populateSearchFields(documentSelectionModel) {\r\n        this.documentSelectionModel = documentSelectionModel;\r\n        if (this.documentSelectionModel.counterpartyId) {\r\n            const counterparty = this.masterData.counterparties.filter(\r\n                (item) => item.counterpartyID === this.documentSelectionModel.counterpartyId,\r\n            );\r\n            if (counterparty.length > 0) {\r\n                this.counterpartyValue = counterparty[0].counterpartyCode;\r\n                this.counterpartyCtrl.setValue(counterparty[0]);\r\n                this.clientNameCtrl.setValue(counterparty[0].description);\r\n                this.disableSearchButton();\r\n            }\r\n        }\r\n        if (this.documentSelectionModel.currencyCode) {\r\n            this.onCurrencyOptionSelected(this.documentSelectionModel.currencyCode);\r\n            this.currencyCtrl.setValue(this.documentSelectionModel.currencyCode);\r\n        }\r\n    }\r\n    onGridReady(params) {\r\n        params.columnDefs = this.documentMatchingGridColumns;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridService.sizeColumns(params);\r\n        window.onresize = () => {\r\n            this.gridService.sizeColumns(params);\r\n        };\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.counterpartyCtrl.reset();\r\n                this.clientNameCtrl.patchValue(null);\r\n                this.currencyCtrl.setValue(this.functionalCurrency);\r\n                const selectedDepartments = this.masterData.departments.filter(\r\n                    (department) => department.departmentCode === 'ALL',\r\n                );\r\n                this.departmentsCtrl.setValue(selectedDepartments[0].departmentCode);\r\n                if (this.docReferenceCtrl.value) {\r\n                    this.docReferenceCtrl.patchValue(null);\r\n                }\r\n                if (this.matchFlagCtrl.value) {\r\n                    this.matchFlagCtrl.patchValue(null);\r\n                }\r\n                this.secDocReferenceCtrl.patchValue(null);\r\n                this.currentDocDateCtrl.patchValue(null);\r\n                this.gridApi.setRowData([]);\r\n                this.docReferenceCtrl.enable();\r\n                this.matchFlagCtrl.enable();\r\n                this.totalBalance = null;\r\n                this.isDialogClosed = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            counterpartyCtrl: this.counterpartyCtrl,\r\n            clientNameCtrl: this.clientNameCtrl,\r\n            docReferenceCtrl: this.docReferenceCtrl,\r\n            secDocReferenceCtrl: this.secDocReferenceCtrl,\r\n            matchFlagCtrl: this.matchFlagCtrl,\r\n            departmentsCtrl: this.departmentsCtrl,\r\n            currencyCtrl: this.currencyCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    disableSearchButton() {\r\n        this.isSearchDisabled = ((!this.docReferenceCtrl.value) && (!this.counterpartyCtrl.value) && (!this.matchFlagCtrl.value))\r\n            ? true : false;\r\n    }\r\n    onAccountingEntriesButtonClicked() {\r\n        const allColumnIds = [];\r\n        if (this.model.unmatchDocuments) {\r\n            this.model.unmatchDocuments.forEach((columnDefs) => {\r\n                allColumnIds.push(columnDefs.documentReference);\r\n            });\r\n\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n                '/financial/accounting/entries'],\r\n                {\r\n                    queryParams:\r\n                    {\r\n                        documentDeleted: allColumnIds,\r\n                    },\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    NumberFormatterForTotalInGrid(params) {\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Accounting Closure</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div>Last Month Closed: {{accountingLastMonthClosed | date : \\\"MMM y\\\"}}\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onUpdateAccountingSetup(true);\\\"\\r\\n                        [disabled]=\\\"isLastMonthDisable || buttonEditable\\\">REVERSE</button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div>Closable Period: {{accountingClosablePeriod | date : \\\"MMM y\\\"}}\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onUpdateAccountingSetup(false);\\\"\\r\\n                        [disabled]=\\\"isClosableMonthDisable || buttonEditable\\\">CLOSE</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AccountingSetup } from '../../../../../../shared/entities/accounting-setup.entity';\r\nimport { PermissionLevels } from '../../../../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    providers: [DatePipe],\r\n    selector: 'atlas-accounting-closure',\r\n    templateUrl: './accounting-closure.component.html',\r\n    styleUrls: ['./accounting-closure.component.scss'],\r\n})\r\nexport class AccountingClosureComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly accountClosureUpdate = new EventEmitter<string[]>();\r\n    accountingLastMonthClosed: Date;\r\n    accountingClosablePeriod: Date;\r\n    tempAccountingLastMonthClosed: Date;\r\n    accountingSetupModel: AccountingSetup;\r\n    isClosableMonthDisable: boolean = false;\r\n    isLastMonthDisable = false;\r\n    buttonEditable: boolean = false;\r\n    openPeriodCounter: number = 0;\r\n    company: string;\r\n    PermissionLevels = PermissionLevels;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected companyManager: CompanyManagerService,\r\n        private datePipe: DatePipe,\r\n        private route: ActivatedRoute,\r\n        private authorizationService: AuthorizationService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n    editAccountingClosurePrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'CloseRevAcc',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'CutOff',\r\n    };\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    initForm(entity: any) {\r\n        this.accountingSetupModel = entity as AccountingSetup;\r\n        if (this.accountingSetupModel.lastMonthClosed != null) {\r\n            this.accountingClosablePeriod = this.companyManager.getCurrentCompanyDate().toDate();\r\n            this.accountingLastMonthClosed = moment(this.accountingSetupModel.lastMonthClosed).toDate();\r\n            this.accountingClosablePeriod = moment(this.accountingLastMonthClosed).add(1, 'month').toDate();\r\n            this.validateAccountingClosure();\r\n        }\r\n        this.openPeriodCounter = this.accountingSetupModel.openPeriodCounter;\r\n        this.buttonEditable = this.checkIfUserHasRequiredPrivileges(this.editAccountingClosurePrivilege);\r\n    }\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel <= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    validateAccountingClosure() {\r\n        if ((moment(this.accountingClosablePeriod).month() ===\r\n            this.companyManager.getCurrentCompanyDate().month()) &&\r\n            (moment(this.accountingClosablePeriod).year() ===\r\n                this.companyManager.getCurrentCompanyDate().year())) {\r\n            this.isClosableMonthDisable = true;\r\n        }\r\n        const reopenMonthAttempts = this.accountingSetupModel.numberOfOpenPeriod - this.accountingSetupModel.openPeriodCounter;\r\n        if (reopenMonthAttempts === 1) {\r\n            this.isLastMonthDisable = true;\r\n        }\r\n    }\r\n    populateEntity(entity: any) {\r\n        const accountingSetup = entity as AccountingSetup;\r\n        accountingSetup.lastMonthClosed = this.tempAccountingLastMonthClosed ?\r\n            this.tempAccountingLastMonthClosed : this.accountingLastMonthClosed;\r\n        accountingSetup.openPeriodCounter = this.openPeriodCounter;\r\n        return accountingSetup;\r\n    }\r\n    onUpdateAccountingSetup(isLastMonthClosed: boolean) {\r\n        const accountingSetUpValidations: string[] = [];\r\n        this.tempAccountingLastMonthClosed = this.companyManager.getCurrentCompanyDate().toDate();\r\n        this.tempAccountingLastMonthClosed = (isLastMonthClosed ?\r\n            moment(this.accountingLastMonthClosed).add(-1, 'month')\r\n            : moment(this.accountingLastMonthClosed).add(1, 'month')).toDate();\r\n        const warningMessage = isLastMonthClosed ? 'Do you want to reverse the closure of' + ' ' +\r\n            this.datePipe.transform(this.accountingLastMonthClosed, 'MMM y') + ' ' + 'for accounting?' :\r\n            'Do you want to close' + ' ' +\r\n            this.datePipe.transform(this.accountingClosablePeriod, 'MMM y') + ' ' + 'for accounting?';\r\n        const titleDialog = isLastMonthClosed ? 'Accounting Reverse' : 'Accounting Closure';\r\n        accountingSetUpValidations.push(titleDialog);\r\n        accountingSetUpValidations.push(warningMessage);\r\n        accountingSetUpValidations.push(isLastMonthClosed ? 'accountingLastMonth' : 'accountingClosable');\r\n        this.accountClosureUpdate.emit(accountingSetUpValidations);\r\n        this.openPeriodCounter = isLastMonthClosed ? this.openPeriodCounter + 1 : 0;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Operations Closure</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div>Last Month Closed: {{operationsLastMonthClosed | date : \\\"MMM y\\\"}}\\r\\n                <span matTooltip=\\\"A period closed for Accounting, cannot be opened for Operations\\\"\\r\\n                      [matTooltipDisabled]=\\\"!isLastMonthDisable\\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onUpdateAccountingSetup(true)\\\"\\r\\n                            [disabled]=\\\"isLastMonthDisable || buttonReverseEditable\\\">REVERSE</button>\\r\\n                </span>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div>Closable Period: {{operationsClosablePeriod | date : \\\"MMM y\\\"}}\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onUpdateAccountingSetup(false)\\\"\\r\\n                        [disabled]=\\\"isClosableMonthDisable || buttonCloseEditable\\\">CLOSE</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AccountingSetup } from '../../../../../../shared/entities/accounting-setup.entity';\r\nimport { PermissionLevels } from '../../../../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    providers: [DatePipe],\r\n    selector: 'atlas-operations-closure',\r\n    templateUrl: './operations-closure.component.html',\r\n    styleUrls: ['./operations-closure.component.scss'],\r\n})\r\nexport class OperationsClosureComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly operationClosureUpdate = new EventEmitter<string[]>();\r\n    operationsLastMonthClosed: Date;\r\n    operationsClosablePeriod: Date;\r\n    tempOperationsLastMonthClosed: Date;\r\n    accountingSetupModel: AccountingSetup;\r\n    isLastMonthDisable: boolean = false;\r\n    isClosableMonthDisable: boolean = false;\r\n    buttonReverseEditable: boolean = false;\r\n    buttonCloseEditable: boolean = false;\r\n    company: string;\r\n    PermissionLevels = PermissionLevels;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        private datePipe: DatePipe,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected companyManager: CompanyManagerService,\r\n        private route: ActivatedRoute,\r\n        private authorizationService: AuthorizationService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n    editOperationsReversePrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'ReverseOp',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'CutOff',\r\n    };\r\n    editOperationsClosurePrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'CloseOp',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'CutOff',\r\n    };\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    initForm(entity: any) {\r\n        this.accountingSetupModel = entity as AccountingSetup;\r\n        if (this.accountingSetupModel.lastMonthClosedForOperation) {\r\n            this.operationsClosablePeriod = this.companyManager.getCurrentCompanyDate().toDate();\r\n            this.operationsLastMonthClosed = moment(this.accountingSetupModel.lastMonthClosedForOperation).toDate();\r\n            this.operationsClosablePeriod = moment(this.operationsLastMonthClosed).\r\n                add(1, 'month').toDate();\r\n            this.validateOperationClosure();\r\n        }\r\n        this.buttonReverseEditable = this.checkIfUserHasRequiredPrivileges(this.editOperationsReversePrivilege);\r\n        this.buttonCloseEditable = this.checkIfUserHasRequiredPrivileges(this.editOperationsClosurePrivilege);\r\n    }\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel <= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    validateOperationClosure() {\r\n        const lastMonthClosed = new Date(this.accountingSetupModel.lastMonthClosed);\r\n        const lastMonthClosedForOperation = new Date(this.accountingSetupModel.lastMonthClosedForOperation);\r\n        if ((lastMonthClosedForOperation.getMonth() === lastMonthClosed.getMonth()) &&\r\n            (lastMonthClosedForOperation.getFullYear() === lastMonthClosed.getFullYear())) {\r\n            this.isLastMonthDisable = true;\r\n        }\r\n        if ((moment(this.operationsClosablePeriod).month() ===\r\n            this.companyManager.getCurrentCompanyDate().month()) &&\r\n            (moment(this.operationsClosablePeriod).year() ===\r\n                this.companyManager.getCurrentCompanyDate().year())) {\r\n            this.isClosableMonthDisable = true;\r\n        }\r\n    }\r\n    populateEntity(entity: any) {\r\n        const accountingSetup = entity as AccountingSetup;\r\n        accountingSetup.lastMonthClosedForOperation = this.tempOperationsLastMonthClosed ?\r\n            this.tempOperationsLastMonthClosed : this.operationsLastMonthClosed;\r\n        return accountingSetup;\r\n    }\r\n    onUpdateAccountingSetup(isLastMonthClosed: boolean) {\r\n        const accountingSetUpValidations: string[] = [];\r\n        this.tempOperationsLastMonthClosed = this.companyManager.getCurrentCompanyDate().toDate();\r\n        this.tempOperationsLastMonthClosed = (isLastMonthClosed ?\r\n            moment(this.operationsLastMonthClosed).add(-1, 'month')\r\n            : moment(this.operationsLastMonthClosed).add(1, 'month')).toDate();\r\n        const warningMessage = isLastMonthClosed ? 'Do you want to reverse the closure of' + ' ' +\r\n            this.datePipe.transform(this.operationsLastMonthClosed, 'MMM y') + ' ' + 'for operations?' :\r\n            'Do you want to close' + ' ' +\r\n            this.datePipe.transform(this.operationsClosablePeriod, 'MMM y') + ' ' + 'for operations?';\r\n        const titleDialog = isLastMonthClosed ? 'Operations reverse' : 'Operations Closure';\r\n        accountingSetUpValidations.push(titleDialog);\r\n        accountingSetUpValidations.push(warningMessage);\r\n        accountingSetUpValidations.push(isLastMonthClosed ? 'oprtationLastMonth' : 'operationsClosable');\r\n        this.operationClosureUpdate.emit(accountingSetUpValidations);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start end\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onOpenClosureSettingsDialog()\\\"\\r\\n                [disabled]=\\\"isCompanyFrozen\\\">EDIT CLOSURE SETTINGS</button>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"49\\\">\\r\\n            <atlas-operations-closure #operationsClosureComponent\\r\\n                                      (operationClosureUpdate)=\\\"onUpdateAccountingSetup($event)\\\">\\r\\n            </atlas-operations-closure>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start right\\\"\\r\\n             fxFlex=\\\"49\\\">\\r\\n            <atlas-accounting-closure #accountingClosureComponent\\r\\n                                      (accountClosureUpdate)=\\\"onUpdateAccountingSetup($event)\\\">\\r\\n            </atlas-accounting-closure>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AccountingSetup } from '../../../../shared/entities/accounting-setup.entity';\r\nimport { PreaccountingService } from '../../../../shared/services/http-services/preaccounting.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UrlManagementService } from '../../../../shared/services/url-management.service';\r\nimport { AccountingClosureComponent } from './cards/accounting-closure/accounting-closure.component';\r\nimport { OperationsClosureComponent } from './cards/operations-closure/operations-closure.component';\r\nimport { CloseMonthEditDialogComponent } from './dialog-boxes/close-month-edit-dialog/close-month-edit-dialog.component';\r\nimport { CloseMonthWarningDialogComponent } from './dialog-boxes/close-month-warning-dialog/close-month-warning-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-close-month',\r\n    templateUrl: './close-month.component.html',\r\n    styleUrls: ['./close-month.component.scss'],\r\n})\r\nexport class CloseMonthComponent implements OnInit, OnDestroy {\r\n    @ViewChild('accountingClosureComponent') accountingClosureComponent: AccountingClosureComponent;\r\n    @ViewChild('operationsClosureComponent') operationsClosureComponent: OperationsClosureComponent;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    private formComponents: BaseFormComponent[] = [];\r\n    closeMonthsFormGroup: FormGroup;\r\n    accountingSetupModel: AccountingSetup;\r\n    private model: AccountingSetup;\r\n    company: string;\r\n    isCompanyFrozen: boolean;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected router: Router,\r\n        private route: ActivatedRoute,\r\n        private preaccountingService: PreaccountingService,\r\n        protected urlManagementService: UrlManagementService,\r\n        private cdr: ChangeDetectorRef, public dialog: MatDialog,\r\n        private titleService: TitleService, private companyManager: CompanyManagerService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.closeMonthsFormGroup = this.formBuilder.group({\r\n            accountingClosureComponent: this.accountingClosureComponent.getFormGroup(),\r\n            operationsClosureComponent: this.operationsClosureComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.accountingClosureComponent,\r\n            this.operationsClosureComponent,\r\n        );\r\n        this.cdr.detectChanges();\r\n        this.subscriptions.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n                this.formComponents.forEach((comp) => {\r\n                    comp.initForm(data);\r\n                });\r\n            }));\r\n        this.isCompanyFrozen = this.companyManager.getCompany(this.company).isFrozen;\r\n    }\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n    onUpdateAccountingSetup(validations: string[]) {\r\n        if (validations.length > 1) {\r\n            const openDialog = this.dialog.open(CloseMonthWarningDialogComponent, {\r\n                data: {\r\n                    title: validations[0],\r\n                    text: validations[1],\r\n                    okButton: 'Yes',\r\n                    noButton: 'No',\r\n                },\r\n            });\r\n            openDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.validateSetUpDetails(validations[2]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    validateSetUpDetails(validation: string) {\r\n        switch (validation) {\r\n            case 'accountingClosable':\r\n                if ((new Date(this.accountingSetupModel.lastMonthClosed).getMonth() ===\r\n                    new Date(this.accountingSetupModel.lastMonthClosedForOperation).getMonth()) &&\r\n                    (new Date(this.accountingSetupModel.lastMonthClosed).getFullYear() ===\r\n                        new Date(this.accountingSetupModel.lastMonthClosedForOperation).getFullYear())) {\r\n                    return this.showWarningMessage('Both accounting and operations period will be closed on this action.' +\r\n                        'Do you want to proceed?');\r\n                }\r\n            default:\r\n                this.saveAccountingSetUpDetails();\r\n                break;\r\n        }\r\n    }\r\n    showWarningMessage(message: string) {\r\n        const warningDialog = this.dialog.open(CloseMonthWarningDialogComponent, {\r\n            data: {\r\n                text: message,\r\n                okButton: 'Yes',\r\n                noButton: 'No',\r\n            },\r\n        });\r\n        warningDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.saveAccountingSetUpDetails(null, true);\r\n            }\r\n        });\r\n    }\r\n    saveAccountingSetUpDetails(accountingSetup?: AccountingSetup, isClosableSame?: boolean) {\r\n        this.getCloseMonthInfo();\r\n        if (accountingSetup) {\r\n            this.model.numberOfOpenPeriod = accountingSetup.numberOfOpenPeriod;\r\n            this.model.openPeriodCounter = accountingSetup.openPeriodCounter;\r\n            this.model.maximumNumberofOpenFinancialYears = accountingSetup.maximumNumberofOpenFinancialYears;\r\n            this.model.lastMonthofFinancialYear = accountingSetup.lastMonthofFinancialYear;\r\n            this.model.lastFinancialYearClosed = accountingSetup.lastFinancialYearClosed;\r\n        }\r\n        if (isClosableSame) {\r\n            this.model.lastMonthClosedForOperation = this.model.lastMonthClosed;\r\n        }\r\n        this.model.lastMonthClosed = new Date(new Date(this.model.lastMonthClosed).\r\n            setHours(this.model.lastMonthClosed.getHours() + 5, 30));\r\n        this.model.lastMonthClosedForOperation = new Date(new Date(this.model.lastMonthClosedForOperation).\r\n            setHours(this.model.lastMonthClosedForOperation.getHours() + 5, 30));\r\n        this.subscriptions.push(this.preaccountingService.updateAccountingSetupDetails(this.model)\r\n            .subscribe(\r\n                () => {\r\n                    this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/cut-off/close-month']);\r\n                },\r\n                (err) => {\r\n                    throw err;\r\n                }));\r\n    }\r\n    getCloseMonthInfo() {\r\n        this.model = new AccountingSetup();\r\n        this.formComponents.forEach((comp) => {\r\n            this.model = comp.populateEntity(this.model);\r\n        });\r\n        this.model.numberOfOpenPeriod = this.accountingSetupModel.numberOfOpenPeriod;\r\n        this.model.maximumNumberofOpenFinancialYears = this.accountingSetupModel.maximumNumberofOpenFinancialYears;\r\n        this.model.lastMonthofFinancialYear = this.accountingSetupModel.lastMonthofFinancialYear;\r\n        this.model.lastFinancialYearClosed = this.accountingSetupModel.lastFinancialYearClosed;\r\n\r\n    }\r\n\r\n    onOpenClosureSettingsDialog() {\r\n        const openDialog = this.dialog.open(CloseMonthEditDialogComponent, {\r\n            data: {\r\n                model: this.accountingSetupModel,\r\n                company: this.company,\r\n            },\r\n        });\r\n        openDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.saveAccountingSetUpDetails(answer);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<h2>Closure settings\\r\\n    <button mat-icon-button\\r\\n            mat-dialog-close\\r\\n            class=\\\"close-dialog-btn\\\">\\r\\n        <mat-icon aria-label=\\\"Closing button\\\">clear</mat-icon>\\r\\n    </button>\\r\\n</h2>\\r\\n\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\"\\r\\n                    fxLayout=\\\"column\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"150px\\\">\\r\\n        <mat-form-field fxFlex=\\\"40%\\\">\\r\\n            <mat-select placeholder=\\\"No of open periods\\\"\\r\\n                        [formControl]=\\\"numberOfOpenPeriodsCtrl\\\"\\r\\n                        [disabled]=\\\"closeMonthDialogEdit\\\">\\r\\n                <mat-option *ngFor=\\\"let periods of numberOfOpenPeriods\\\"\\r\\n                            [value]=\\\"periods\\\">{{periods}} </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\">\\r\\n        <h2 class=\\\"no-margin\\\">Accounting Periods Open</h2>\\r\\n    </div>\\r\\n    <div class=\\\"close-month-field\\\">\\r\\n        <mat-chip-list multiple\\r\\n                       fxFlex=\\\"100%\\\">\\r\\n            <mat-chip *ngFor=\\\"let periods of accountingPeriods\\\"\\r\\n                      [selectable]=\\\"false\\\">\\r\\n                {{periods | date : \\\"MMM y\\\"}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\">\\r\\n        <mat-form-field fxFlex=\\\"100%\\\">\\r\\n            <input matInput\\r\\n                   placeholder=\\\"Youngest Month\\\"\\r\\n                   autocomplete=\\\"off\\\"\\r\\n                   [formControl]=\\\"youngestMonthCtrl\\\"\\r\\n                   readonly>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\">\\r\\n        <mat-form-field fxFlex=\\\"60%\\\">\\r\\n            <mat-select placeholder=\\\"Maximum no. of open financial years\\\"\\r\\n                        [formControl]=\\\"numberOfOpenFinancialYearsCtrl\\\"\\r\\n                        [disabled]=\\\"closeMonthDialogEdit\\\">\\r\\n                <mat-option *ngFor=\\\"let periods of numberOfOpenFinancialYears\\\"\\r\\n                            [value]=\\\"periods\\\">{{periods}} </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <mat-form-field fxFlex=\\\"50%\\\">\\r\\n            <mat-select placeholder=\\\"Last Month of Financial Year\\\"\\r\\n                        [formControl]=\\\"lastMonthFinancialYearCtrl\\\"\\r\\n                        [disabled]=\\\"closeMonthDialogEdit\\\">\\r\\n                <mat-option *ngFor=\\\"let periods of lastMonthFinancialYears\\\"\\r\\n                            [value]=\\\"periods.monthId\\\">{{periods.description}} </mat-option>\\r\\n            </mat-select>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"155px\\\">\\r\\n        <mat-form-field fxFlex=\\\"100%\\\">\\r\\n            <input matInput\\r\\n                   placeholder=\\\"Last Financial Year Closed\\\"\\r\\n                   [formControl]=\\\"lastFinancialYearClosedCtrl\\\"\\r\\n                   readonly\\r\\n                   autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClick()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start end\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end start\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onSaveButtonClicked()\\\">\\r\\n                SAVE\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".mat-dialog-title {\\n  margin-bottom: 0; }\\n\\n.mat-dialog-content {\\n  width: 750px; }\\n\\n.close-month-field {\\n  margin: 8px 0 16px 0; }\\n\\nbutton {\\n  margin: 0; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { AccountingSetup } from '../../../../../../shared/entities/accounting-setup.entity';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { PermissionLevels } from '../../../../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { MonthOptions } from '../../../../../../shared/entities/month-options.entity';\r\nimport * as moment from 'moment';\r\n@Component({\r\n    providers: [DatePipe],\r\n    selector: 'atlas-close-month-edit-dialog',\r\n    templateUrl: './close-month-edit-dialog.component.html',\r\n    styleUrls: ['./close-month-edit-dialog.component.scss'],\r\n})\r\nexport class CloseMonthEditDialogComponent implements OnInit {\r\n    numberOfOpenPeriodsCtrl = new AtlasFormControl('numberOfOpenPeriods');\r\n    youngestMonthCtrl = new AtlasFormControl('youngestMonth');\r\n    numberOfOpenFinancialYearsCtrl = new AtlasFormControl('numberOfOpenFinancialYears');\r\n    lastMonthFinancialYearCtrl = new AtlasFormControl('lastMonthFinancialYear');\r\n    lastFinancialYearClosedCtrl = new AtlasFormControl('lastFinancialYearClosed');\r\n    closeMonthDialogEdit: boolean = false;\r\n    company: string;\r\n    PermissionLevels = PermissionLevels;\r\n    closeMonthDialogData: {\r\n        model: AccountingSetup;\r\n        company: string;\r\n    };\r\n    numberOfOpenPeriods: number[] = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\r\n    numberOfOpenFinancialYears: number[] = [2, 3];\r\n    lastMonthFinancialYears: MonthOptions[] = [\r\n        { monthId: 1, description: 'Jan' },\r\n        { monthId: 2, description: 'Feb' },\r\n        { monthId: 3, description: 'Mar' },\r\n        { monthId: 4, description: 'Apr' },\r\n        { monthId: 5, description: 'May' },\r\n        { monthId: 6, description: 'Jun' },\r\n        { monthId: 7, description: 'Jul' },\r\n        { monthId: 8, description: 'Aug' },\r\n        { monthId: 9, description: 'Sep' },\r\n        { monthId: 10, description: 'Oct' },\r\n        { monthId: 11, description: 'Nov' },\r\n        { monthId: 12, description: 'Dec' },\r\n    ];\r\n    accountingPeriods: Date[] = [];\r\n    constructor(\r\n        public closeMonthDialogRef: MatDialogRef<CloseMonthEditDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { model: AccountingSetup, company: string },\r\n        private datePipe: DatePipe,\r\n        protected dialog: MatDialog,\r\n        private route: ActivatedRoute,\r\n        private authorizationService: AuthorizationService,\r\n    ) {\r\n        this.closeMonthDialogData = data;\r\n    }\r\n    editClosureSettingsDialogPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'EditClosureSettingsDialog',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'CutOff',\r\n    };\r\n\r\n    ngOnInit() {\r\n\r\n        if (this.closeMonthDialogData.model) {\r\n            this.numberOfOpenPeriodsCtrl.patchValue(this.closeMonthDialogData.model.numberOfOpenPeriod);\r\n            this.numberOfOpenFinancialYearsCtrl.patchValue(this.closeMonthDialogData.model.maximumNumberofOpenFinancialYears);\r\n            this.lastMonthFinancialYearCtrl.patchValue(this.closeMonthDialogData.model.lastMonthofFinancialYear);\r\n\r\n            if (this.closeMonthDialogData.model.lastFinancialYearClosed &&\r\n                this.closeMonthDialogData.model.lastFinancialYearClosed !== 0\r\n            ) {\r\n                this.lastFinancialYearClosedCtrl.patchValue(this.closeMonthDialogData.model.lastFinancialYearClosed);\r\n            }\r\n            else {\r\n                this.lastFinancialYearClosedCtrl.patchValue(moment(new Date()).year());\r\n            }\r\n            this.updateAccountingPeriods(this.closeMonthDialogData.model.numberOfOpenPeriod);\r\n        }\r\n        this.numberOfOpenPeriodsCtrl.valueChanges.subscribe((value: number) => {\r\n            this.updateAccountingPeriods(value);\r\n        });\r\n        this.closeMonthDialogEdit = this.checkIfUserHasRequiredPrivileges(this.editClosureSettingsDialogPrivilege);\r\n    }\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.closeMonthDialogData.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.closeMonthDialogData.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel <= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    updateAccountingPeriods(numberOfMonths: number) {\r\n        this.accountingPeriods = [];\r\n        while (numberOfMonths !== 0) {\r\n            this.accountingPeriods.push(new Date(new Date(this.closeMonthDialogData.model.lastMonthClosed).\r\n                setMonth(new Date(this.closeMonthDialogData.model.lastMonthClosed).getMonth() + numberOfMonths)));\r\n            numberOfMonths = numberOfMonths - 1;\r\n        }\r\n        this.youngestMonthCtrl.patchValue(this.datePipe.transform(this.accountingPeriods[0], 'MMM y'));\r\n        this.accountingPeriods.reverse();\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.closeMonthDialogRef.close(false);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.getClosureSettings();\r\n        this.closeMonthDialogRef.close(this.closeMonthDialogData.model);\r\n    }\r\n\r\n    getClosureSettings() {\r\n        this.closeMonthDialogData.model.numberOfOpenPeriod = this.numberOfOpenPeriodsCtrl.value ? this.numberOfOpenPeriodsCtrl.value : null;\r\n        if (this.closeMonthDialogData.model !== this.numberOfOpenPeriodsCtrl.value) {\r\n            this.closeMonthDialogData.model.openPeriodCounter = 0;\r\n        }\r\n        this.closeMonthDialogData.model.maximumNumberofOpenFinancialYears = this.numberOfOpenFinancialYearsCtrl.value ? this.numberOfOpenFinancialYearsCtrl.value : null;\r\n        this.closeMonthDialogData.model.lastMonthofFinancialYear = this.lastMonthFinancialYearCtrl.value ? this.lastMonthFinancialYearCtrl.value : null;\r\n        this.closeMonthDialogData.model.lastFinancialYearClosed = this.lastFinancialYearClosedCtrl.value ? this.lastFinancialYearClosedCtrl.value : null;\r\n    }\r\n\r\n}\r\n","module.exports = \"<h1 mat-dialog-title\\r\\n    class=\\\"warning-uppercase\\\">{{dialogData.title}}</h1>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <p>{{dialogData.text}}</p>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions class=\\\"warning-dialog-actions\\\">\\r\\n\\r\\n    <button *ngIf=\\\"dialogData.noButton\\\"\\r\\n            mat-button\\r\\n            (click)=\\\"onClose()\\\">{{dialogData.noButton}}</button>\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button *ngIf=\\\"dialogData.okButton\\\"\\r\\n            mat-button\\r\\n            (click)=\\\"onCloseConfirm()\\\">{{dialogData.okButton}}</button>\\r\\n</mat-dialog-actions>\\r\\n\"","module.exports = \".warning-uppercase {\\n  text-transform: uppercase;\\n  margin-bottom: 0; }\\n\\nbutton {\\n  margin-top: 0; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-close-month-warning-dialog',\r\n    templateUrl: './close-month-warning-dialog.component.html',\r\n    styleUrls: ['./close-month-warning-dialog.component.scss'],\r\n})\r\nexport class CloseMonthWarningDialogComponent implements OnInit {\r\n\r\n    dialogData: {\r\n        title: string,\r\n        text: string,\r\n        okButton: string,\r\n        noButton: string,\r\n    };\r\n\r\n    constructor(\r\n        public thisDialogRef: MatDialogRef<CloseMonthWarningDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { title: string, text: string, noButton: string, okButton: string; },\r\n    ) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n    onClose() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n    onCloseConfirm() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\"\\r\\n         class=\\\"atlas-grid-card-title\\\">\\r\\n        <h2>Freezes</h2>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button mat-icon-button\\r\\n                (click)=\\\"$event.stopPropagation()\\\"\\r\\n                [matMenuTriggerFor]=\\\"menu\\\">\\r\\n            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n        </button>\\r\\n        <mat-menu #menu=\\\"matMenu\\\">\\r\\n            <div *ngIf=\\\"multipleSelection\\\">\\r\\n                <button *ngFor=\\\"let action of freezeGridContextualMenuActions\\\"\\r\\n                        mat-menu-item\\r\\n                        (click)=\\\"onBulkMenuActionClicked(action)\\\">\\r\\n                    <mat-icon>{{action.icon}}</mat-icon><span>{{ action.text }}</span>\\r\\n                </button>\\r\\n            </div>\\r\\n            <button mat-menu-item\\r\\n                    [matMenuTriggerFor]=\\\"exportMenu\\\"\\r\\n                    (mouseover)=\\\"OnExportButton()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\"\\r\\n             ag-grid=\\\"agGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             [rowData]=\\\"rowData\\\"\\r\\n                             enableColResize=true\\r\\n                             pagination=true\\r\\n                             singleClickEdit=true\\r\\n                             paginationPageSize=10\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             suppressRowClickSelection=true\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             [excelStyles]=\\\"excelStyles\\\"\\r\\n                             enableSorting=true\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             enableFilter\\r\\n                             (firstDataRendered)=\\\"onFirstDataRendered($event)\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".atlas-grid-card-header {\\n  min-height: 40px; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ColDef, ColumnApi, GridOptions } from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { FreezeType } from '../../../../../../shared/enums/freeze-type.enum';\r\nimport { FormatDatePipe } from '../../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { UiService } from '../../../../../../shared/services/ui.service';\r\nimport { AgContextualMenuComponent } from './../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgContextualMenuAction } from './../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from './../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Freeze } from './../../../../../../shared/entities/freeze.entity';\r\nimport { SnackbarService } from './../../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from './../../../../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-freeze-grid',\r\n    templateUrl: './freeze-grid.component.html',\r\n    styleUrls: ['./freeze-grid.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class FreezeGridComponent implements OnInit, OnDestroy {\r\n\r\n    @Input() freezeMenuActions: { [key: string]: string };\r\n    @Input() freezeGridContextualMenuActions: AgContextualMenuAction[] = [];\r\n    @Output() readonly menuActionClicked = new EventEmitter();\r\n    @Input() multipleSelection = false;\r\n    @Input() isLoading = false;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridOptions: GridOptions;\r\n    columnApi: ColumnApi;\r\n    checkExportedFormat: boolean = false;\r\n    excelStyles = [\r\n        {\r\n            id: 'dateFormat',\r\n            dataType: 'dateTime',\r\n            numberFormat: {\r\n                format: 'dd/mm/yyyy',\r\n            },\r\n        },\r\n    ];\r\n    userActiveDirectoryName: string;\r\n    columnDefs: ColDef[] = [\r\n        {\r\n            headerCheckboxSelection: true,\r\n            checkboxSelection: true,\r\n            width: 92,\r\n            colId: 'checkbox',\r\n            hide: !this.multipleSelection,\r\n        },\r\n        {\r\n            headerName: 'Date of freeze',\r\n            colId: 'freezeDate',\r\n            field: 'freezeDate',\r\n            valueFormatter: (params) => {\r\n                if (params.data) {\r\n                    return params.data.dataVersionTypeId === FreezeType.Monthly ?\r\n                        this.uiService.monthFormatter(params) : this.uiService.dateFormatter(params);\r\n                }\r\n            },\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.freezeDate);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'User',\r\n            colId: 'createdBy',\r\n            field: 'createdBy',\r\n        },\r\n        {\r\n            headerName: 'Date of run',\r\n            colId: 'startDateTime',\r\n            field: 'startDateTime',\r\n            valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.startDateTime);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Time of run',\r\n            colId: 'endDateTime',\r\n            field: 'endDateTime',\r\n            valueFormatter: this.uiService.timeFormatter,\r\n        },\r\n    ];\r\n\r\n    @Input() rowData: Freeze[] = [];\r\n    isNew = false;\r\n    company: string;\r\n    destroy$ = new Subject();\r\n\r\n    constructor(private uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        private formatDate: FormatDatePipe,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private snackBarService: SnackbarService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        this.company = route.snapshot.paramMap.get('company');\r\n        this.isNew = this.route.snapshot.data.isNew;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initMultipleSelection();\r\n        this.titleService.setTitle('View Frozen Database');\r\n    }\r\n\r\n    initMenuAction() {\r\n        if (this.freezeGridContextualMenuActions.length > 0 && !this.columnDefs.find((def) => def.colId === 'menuAction')) {\r\n            this.columnDefs.push(\r\n                {\r\n                    headerName: '',\r\n                    colId: 'menuAction',\r\n                    cellRendererFramework: AgContextualMenuComponent,\r\n                    cellRendererParams: {\r\n                        context: {\r\n                            componentParent: this,\r\n                        },\r\n                        menuActions: this.freezeGridContextualMenuActions,\r\n                    },\r\n                    cellClass: 'ag-contextual-menu',\r\n                    width: 92,\r\n                });\r\n            if (this.gridOptions && this.gridOptions.api) {\r\n                this.gridOptions.api.setColumnDefs(this.columnDefs);\r\n            }\r\n        }\r\n    }\r\n\r\n    initMultipleSelection() {\r\n        const checkboxColumn = this.columnDefs.find((col) => col.colId === 'checkbox');\r\n        if (checkboxColumn) {\r\n            checkboxColumn.hide = !this.multipleSelection;\r\n        }\r\n    }\r\n\r\n    populateGrid(rowData: Freeze[]) {\r\n        if (this.gridOptions && this.gridOptions.api) {\r\n            this.gridOptions.api.setRowData(rowData);\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.initMenuAction();\r\n        params.columnDefs = this.columnDefs;\r\n        this.gridOptions = params;\r\n        this.gridOptions.api.setRowData(this.rowData);\r\n        this.columnApi = params.columnApi;\r\n    }\r\n\r\n    onFirstDataRendered(params) {\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n\r\n    autoSizeGridHeader() {\r\n        if (this.gridOptions && this.gridOptions.api) { this.gridOptions.api.sizeColumnsToFit(); }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    handleAction(action: string, freeze: Freeze) {\r\n        this.menuActionClicked.emit([{ action, freeze }]);\r\n    }\r\n\r\n    OnExportButton() {\r\n        const dateFormat: FormatDatePipe = this.formatDate;\r\n        if (!this.checkExportedFormat) {\r\n            this.gridOptions.api.forEachNode((node) => {\r\n                if (node.data.endDateTime) {\r\n                    node.data.endDateTime = dateFormat.transformtime(node.data.endDateTime);\r\n                }\r\n            });\r\n            this.checkExportedFormat = true;\r\n        }\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = 'Freezes';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridOptions.api.exportDataAsExcel(params);\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'Freezes';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridOptions.api.exportDataAsCsv(params);\r\n    }\r\n\r\n    onBulkMenuActionClicked(action: AgContextualMenuAction) {\r\n        const selectedRows = this.gridOptions.api.getSelectedRows();\r\n        if (selectedRows.length === 0) {\r\n            this.snackBarService.informationSnackBar('Please select at least one freeze');\r\n        } else {\r\n            this.menuActionClicked.emit(selectedRows.map((freeze) => {\r\n                return { action: action.action, freeze };\r\n            }));\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"5%\\\"\\r\\n             fxFlex>\\r\\n            <h2 class=\\\"no-margin\\\">Display freezes</h2>\\r\\n            <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                     [formControl]=\\\"freezeTypeCtrl\\\"\\r\\n                                     aria-label=\\\"Date\\\"\\r\\n                                     (change)=\\\"onDataVersionTypeChanged($event.value)\\\">\\r\\n                <mat-button-toggle [value]=\\\"FreezeType.Daily\\\">Day Freeze</mat-button-toggle>\\r\\n                <mat-button-toggle [value]=\\\"FreezeType.Monthly\\\">Month Freeze</mat-button-toggle>\\r\\n            </mat-button-toggle-group>\\r\\n        </div>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <form [formGroup]=\\\"formGroup\\\">\\r\\n            <div class=\\\"min-height\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\"\\r\\n                     fxLayoutGap=\\\"5%\\\">\\r\\n                    <atlas-date-picker *ngIf=\\\"freezeTypeCtrl.value === FreezeType.Daily\\\"\\r\\n                                       isEditable=true\\r\\n                                       [errorMap]=\\\"dailyErrorMap\\\"\\r\\n                                       label=\\\"From\\\"\\r\\n                                       [fieldControl]=\\\"dateFromCtrl\\\">\\r\\n                    </atlas-date-picker>\\r\\n                    <atlas-month-date-picker *ngIf=\\\"freezeTypeCtrl.value === FreezeType.Monthly\\\"\\r\\n                                             isEditable=true\\r\\n                                             label=\\\"From\\\"\\r\\n                                             [errorMap]=\\\"monthlyErrorMap\\\"\\r\\n                                             [fieldControl]=\\\"dateFromCtrl\\\">\\r\\n                    </atlas-month-date-picker>\\r\\n\\r\\n                    <atlas-date-picker *ngIf=\\\"freezeTypeCtrl.value === FreezeType.Daily\\\"\\r\\n                                       isEditable=true\\r\\n                                       [errorMap]=\\\"dailyErrorMap\\\"\\r\\n                                       label=\\\"To\\\"\\r\\n                                       [fieldControl]=\\\"dateToCtrl\\\">\\r\\n                    </atlas-date-picker>\\r\\n                    <atlas-month-date-picker *ngIf=\\\"freezeTypeCtrl.value === FreezeType.Monthly\\\"\\r\\n                                             isEditable=true\\r\\n                                             label=\\\"To\\\"\\r\\n                                             [errorMap]=\\\"monthlyErrorMap\\\"\\r\\n                                             [fieldControl]=\\\"dateToCtrl\\\">\\r\\n                    </atlas-month-date-picker>\\r\\n                    <mat-slide-toggle *ngIf=\\\"toogleText\\\"\\r\\n                                      [formControl]=\\\"toggleFormControl\\\"\\r\\n                                      mat-raised-button>{{ toogleText }}\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n\\r\\n                <button type=\\\"submit\\\"\\r\\n                        (click)=\\\"onDisplayButtonClicked()\\\"\\r\\n                        mat-raised-button>\\r\\n                    Display\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"mat-card-content {\\n  margin-top: 10px; }\\n\\nmat-button-toggle {\\n  font-size: 14px; }\\n\\nmat-card-header {\\n  margin-bottom: 2%; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { FreezeType } from './../../../../../../shared/enums/freeze-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-freeze-header-filter',\r\n    templateUrl: './freeze-header-filter.component.html',\r\n    styleUrls: ['./freeze-header-filter.component.scss'],\r\n})\r\nexport class FreezeHeaderFilterComponent implements OnInit {\r\n\r\n    @Output() readonly displayButtonClicked = new EventEmitter();\r\n    @Input() readonly toogleText: string;\r\n\r\n    now: moment.Moment;\r\n    dailyDefault: moment.Moment;\r\n    dailyFromDefault: moment.Moment;\r\n    monthlyDefault: moment.Moment;\r\n    monthlyFromDefault: moment.Moment;\r\n    dateFromCtrl = new FormControl();\r\n    dateToCtrl = new FormControl();\r\n    freezeTypeCtrl = new FormControl();\r\n    toggleFormControl = new FormControl(true);\r\n    FreezeType = FreezeType;\r\n    company: string;\r\n    dailyErrorMap: Map<string, string> = new Map();\r\n    monthlyErrorMap: Map<string, string> = new Map();\r\n    formGroup: FormGroup;\r\n    defaultDataVersionType: FreezeType = FreezeType.Daily;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n    ) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n        this.dailyDefault = this.now.clone().subtract(1, 'days').endOf('day').subtract(1, 'seconds');\r\n        this.dailyFromDefault = this.now.clone().subtract(1, 'days').startOf('month');\r\n        this.monthlyDefault = this.getLastClosedPeriod();\r\n        this.monthlyFromDefault = this.getLastClosedPeriod(2);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getFormGroup();\r\n    }\r\n\r\n    getFormGroup(): FormGroup {\r\n        this.formGroup = this.formBuilder.group({\r\n            dateFromCtrl: this.dateFromCtrl,\r\n            dateToCtrl: this.dateToCtrl,\r\n            freezeTypeCtrl: this.freezeTypeCtrl,\r\n        });\r\n\r\n        this.setValidators();\r\n        this.setDefaultValues();\r\n\r\n        return this.formGroup;\r\n    }\r\n\r\n    setDefaultValues(): void {\r\n        this.freezeTypeCtrl.setValue(this.defaultDataVersionType);\r\n        this.onDataVersionTypeChanged(this.defaultDataVersionType);\r\n    }\r\n\r\n    setValidators() {\r\n        if (this.freezeTypeCtrl.value === FreezeType.Daily) {\r\n            this.dateFromCtrl.setValidators(\r\n                Validators.required);\r\n            this.dateToCtrl.setValidators(\r\n                Validators.required);\r\n        } else {\r\n            this.dateFromCtrl.setValidators(\r\n                Validators.required);\r\n            this.dateToCtrl.setValidators(\r\n                Validators.required);\r\n        }\r\n    }\r\n\r\n    onDisplayButtonClicked() {\r\n        this.displayButtonClicked.emit();\r\n    }\r\n\r\n    onDataVersionTypeChanged(dataVersionType: FreezeType) {\r\n        this.setValidators();\r\n        switch (dataVersionType) {\r\n            case FreezeType.Daily:\r\n                this.dateFromCtrl.patchValue(this.dailyFromDefault);\r\n                this.dateToCtrl.patchValue(this.dailyDefault);\r\n                break;\r\n            case FreezeType.Monthly:\r\n                this.dateFromCtrl.patchValue(this.monthlyFromDefault);\r\n                this.dateToCtrl.patchValue(this.monthlyDefault);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.displayButtonClicked.emit();\r\n    }\r\n\r\n    // Last closed period for operations. This is the last month which has been closed for any operations to be done by the user.\r\n    // It's the previous month currently. In the future it might come from the DB.\r\n    private getLastClosedPeriod(numberMonths: number = 1): moment.Moment {\r\n        const dateNow = this.now.clone();\r\n        return dateNow.subtract(numberMonths, 'months').endOf('month').subtract(1, 'seconds');\r\n    }\r\n\r\n    getDateFrom() {\r\n        return this.dateFromCtrl.valid ? this.dateFromCtrl.value : null;\r\n    }\r\n\r\n    getDateTo() {\r\n        const date = this.dateToCtrl.valid ? this.dateToCtrl.value : null;\r\n        if (this.freezeTypeCtrl.value === FreezeType.Monthly && date) {\r\n            return date.endOf('month').subtract(1, 'seconds');\r\n        }\r\n        return date;\r\n    }\r\n}\r\n","module.exports = \"<mat-card [ngClass]=\\\"{'hidden-during-loading':isSaving}\\\">\\r\\n    <mat-card-header>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"5%\\\"\\r\\n             fxFlex>\\r\\n            <h2 class=\\\"no-margin\\\">Create a freeze</h2>\\r\\n            <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                     [formControl]=\\\"freezeTypeCtrl\\\"\\r\\n                                     aria-label=\\\"Date\\\"\\r\\n                                     (change)=\\\"onDataVersionTypeChanged($event.value)\\\">\\r\\n                <mat-button-toggle [value]=\\\"FreezeType.Daily\\\">Day Freeze</mat-button-toggle>\\r\\n                <mat-button-toggle [value]=\\\"FreezeType.Monthly\\\">Month Freeze</mat-button-toggle>\\r\\n            </mat-button-toggle-group>\\r\\n        </div>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <form [formGroup]=\\\"formGroup\\\">\\r\\n            <div class=\\\"min-height\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     [class.isEmpty]=\\\"!dateCtrl.value\\\"\\r\\n                     *ngIf=\\\"freezeTypeCtrl.value === FreezeType.Daily\\\"\\r\\n                     [class.required-field]=\\\"true\\\">\\r\\n                    <atlas-date-picker isEditable=true\\r\\n                                       [errorMap]=\\\"dailyErrorMap\\\"\\r\\n                                       label=\\\"Date\\\"\\r\\n                                       required\\r\\n                                       [fieldControl]=\\\"dateCtrl\\\">\\r\\n                    </atlas-date-picker>\\r\\n                </div>\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     [class.isEmpty]=\\\"!dateCtrl.value\\\"\\r\\n                     *ngIf=\\\"freezeTypeCtrl.value === FreezeType.Monthly\\\"\\r\\n                     [class.required-field]=\\\"true\\\">\\r\\n                    <atlas-month-date-picker isEditable=true\\r\\n                                             required\\r\\n                                             label=\\\"Date\\\"\\r\\n                                             [errorMap]=\\\"monthlyErrorMap\\\"\\r\\n                                             [fieldControl]=\\\"dateCtrl\\\">\\r\\n                    </atlas-month-date-picker>\\r\\n                </div>\\r\\n                <button type=\\\"submit\\\"\\r\\n                        *ifAuthorized=\\\"'Financials.CutOff.CreateFreeze',company:this.company,level: PermissionLevels.ReadWrite\\\"\\r\\n                        (click)=\\\"onSaveButtonClicked()\\\"\\r\\n                        mat-raised-button\\r\\n                        [disabled]=\\\"isSaving || isFrozen\\\">\\r\\n                    Create\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<mat-card *ngIf=\\\"isSaving\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Freeze creation in progress</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"mat-button-toggle {\\n  font-size: 14px; }\\n\\nmat-card-header {\\n  margin-bottom: 2%; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { delay, finalize, mergeMap, retryWhen } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { FreezeType } from '../../../../../../shared/enums/freeze-type.enum';\r\nimport { PermissionLevels } from '../../../../../../shared/enums/permission-level.enum';\r\nimport { FreezeService } from '../../../../../../shared/services/http-services/freeze.service';\r\nimport { isBeforeDate } from '../../../../../../shared/validators/date-validators.validator';\r\nimport { ConfirmationDialogComponent } from './../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { SnackbarService } from './../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-freeze-header',\r\n    templateUrl: './freeze-header.component.html',\r\n    styleUrls: ['./freeze-header.component.scss'],\r\n})\r\nexport class FreezeHeaderComponent implements OnInit {\r\n    @Output() readonly freezeCreated = new EventEmitter<void>();\r\n\r\n    now: moment.Moment;\r\n    dailyDefault: moment.Moment;\r\n    monthlyDefault: moment.Moment;\r\n    dateCtrl = new FormControl();\r\n    freezeTypeCtrl = new FormControl();\r\n    FreezeType = FreezeType;\r\n    company: string;\r\n    dailyErrorMap: Map<string, string> = new Map();\r\n    monthlyErrorMap: Map<string, string> = new Map();\r\n    formGroup: FormGroup;\r\n    isSaving = false;\r\n    defaultDataVersionType: FreezeType = FreezeType.Daily;\r\n    PermissionLevels = PermissionLevels;\r\n    errorMessageReversed: string = 'A freeze database already exists. Do you wish to proceed and supersede? Please check if the accounting documents associated to the TA have been properly interfaced in order to avoid loss of any information. (Interface status has to be ‘cancelled’ or ‘completed’).';\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        private freezeService: FreezeService,\r\n        private dialog: MatDialog,\r\n        protected companyManager: CompanyManagerService,\r\n        private snackbarService: SnackbarService,\r\n    ) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.dailyErrorMap\r\n            .set('isDateValid', 'Cannot freeze for date greather or equal than today.');\r\n        this.monthlyErrorMap\r\n            .set('isDateValid', 'Cannot freeze for unclosed periods.');\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n        this.dailyDefault = this.now.clone().subtract(1, 'days').endOf('day').subtract(1, 'seconds');\r\n        this.monthlyDefault = this.getLastClosedPeriod();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getFormGroup();\r\n        const isFrozen: boolean = this.companyManager.getCompany(this.company).isFrozen;\r\n    }\r\n\r\n    getFormGroup(): FormGroup {\r\n        this.formGroup = this.formBuilder.group({\r\n            dateCtrl: this.dateCtrl,\r\n            freezeTypeCtrl: this.freezeTypeCtrl,\r\n        });\r\n\r\n        this.setValidators();\r\n        this.setDefaultValues();\r\n\r\n        return this.formGroup;\r\n    }\r\n\r\n    setDefaultValues(): void {\r\n        this.dateCtrl.setValue(this.dailyDefault);\r\n        this.freezeTypeCtrl.setValue(this.defaultDataVersionType);\r\n        this.onDataVersionTypeChanged(this.defaultDataVersionType);\r\n    }\r\n\r\n    setValidators() {\r\n        if (this.freezeTypeCtrl.value === FreezeType.Daily) {\r\n            this.dateCtrl.setValidators(\r\n                [isBeforeDate(this.companyManager.getCurrentCompanyDate().clone().subtract(1, 'days').endOf('day'), true),\r\n                Validators.required]);\r\n        } else {\r\n            this.dateCtrl.setValidators([\r\n                isBeforeDate(this.companyManager.getCurrentCompanyDate(), true, true),\r\n                Validators.required]);\r\n        }\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (!this.dateCtrl.valid && this.dateCtrl.hasError('isDateValid')) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Cannot freeze for date greater than current date',\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.dateCtrl.disable();\r\n        this.isSaving = true;\r\n        this.freezeService.checkFreezeExists(this.freezeTypeCtrl.value as FreezeType, this.getSelectedFreezeDate()).pipe(\r\n            finalize(() => {\r\n                this.dateCtrl.enable();\r\n            }),\r\n        ).subscribe((freeze) => {\r\n            if (freeze) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Freeze Creation',\r\n                        text: 'Snapshot already exists for this date/month. Do you wish to proceed and overwrite ?',\r\n                        okButton: 'Yes',\r\n                        cancelButton: 'No',\r\n                    },\r\n                });\r\n                confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.createFreeze();\r\n                    } else {\r\n                        this.isSaving = false;\r\n                    }\r\n                });\r\n            } else {\r\n                this.createFreeze();\r\n            }\r\n        });\r\n    }\r\n\r\n    getSelectedFreezeDate(): Date {\r\n        const freezeDate = this.dateCtrl.value;\r\n        if (this.freezeTypeCtrl.value === FreezeType.Monthly) {\r\n            freezeDate.endOf('month').subtract(1, 'seconds');\r\n        }\r\n        const dateWithoutTimeZone: Date = freezeDate.toDate();\r\n        dateWithoutTimeZone.setUTCHours(0, 0, 0, 0);\r\n        return dateWithoutTimeZone;\r\n    }\r\n\r\n    delayedRetry(delayMs: number, maxRetry = 1) {\r\n        let retries = maxRetry;\r\n\r\n        return (src: Observable<any>) => {\r\n            return src.pipe(\r\n                retryWhen((errors: Observable<any>) => errors.pipe(\r\n                    delay(delayMs),\r\n                    mergeMap((error) => retries-- > 0 ? of(error) : throwError(error)),\r\n                )),\r\n            );\r\n        };\r\n    }\r\n\r\n    createFreeze() {\r\n        const freezeDate = this.getSelectedFreezeDate();\r\n\r\n        this.isSaving = true;\r\n        this.freezeService.createFreeze(\r\n            this.freezeTypeCtrl.value as FreezeType, freezeDate).pipe(\r\n                this.delayedRetry(1, 0),\r\n                finalize(() => {\r\n                    this.isSaving = false;\r\n                }),\r\n            ).subscribe(\r\n                (monthEnd) => {\r\n                    if (monthEnd) {\r\n                        if (monthEnd[0].isMonthEnd && monthEnd[0].isReversed) {\r\n                            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'TA Refreeze Creation',\r\n                                    text: this.errorMessageReversed,\r\n                                    okButton: 'Proceed',\r\n                                    cancelButton: 'Cancel',\r\n                                },\r\n                            });\r\n                            confirmDialog.afterClosed().subscribe((answer) => {\r\n                                if (answer) {\r\n                                    this.freezeService.createFreeze(this.freezeTypeCtrl.value as FreezeType, freezeDate).subscribe(() => {\r\n                                        this.snackbarService.informationSnackBar('The Refreeze has been created');\r\n                                    });\r\n\r\n                                } else {\r\n                                    this.isSaving = false;\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        this.snackbarService.informationSnackBar('The freeze has been created');\r\n                        this.freezeCreated.emit();\r\n                    }\r\n                },\r\n                (err) => {\r\n                    if (err.status === 504) {\r\n                        // Timeout\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Freeze in progress',\r\n                                text: 'The creation of the freeze is taking a long time and is still in progress. '\r\n                                    + 'Please refresh in some time to see your freeze in the list.',\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n\r\n                    } else {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Error',\r\n                                text: err.error.detail && err.error.detail.length > 0 ?\r\n                                    err.error.detail : 'Error during the completion of the freeze creation',\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                    }\r\n                    this.freezeCreated.emit();\r\n                },\r\n            );\r\n    }\r\n\r\n    onDataVersionTypeChanged(dataVersionType: FreezeType) {\r\n        this.setValidators();\r\n        switch (dataVersionType) {\r\n            case FreezeType.Daily:\r\n                this.dateCtrl.patchValue(this.dailyDefault);\r\n                break;\r\n            case FreezeType.Monthly:\r\n                this.dateCtrl.patchValue(this.monthlyDefault);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Last closed period for operations. This is the last month which has been closed for any operations to be done by the user.\r\n    // It's the previous month currently. In the future it might come from the DB.\r\n    private getLastClosedPeriod(): moment.Moment {\r\n        const dateNow = this.now.clone();\r\n        return dateNow.subtract(1, 'months').endOf('month').subtract(1, 'seconds');\r\n    }\r\n}\r\n","module.exports = \"<atlas-financial-tab-group hasAddButton=true\\r\\n                           buttonText=\\\"CUT-OFF ACTIONS\\\">\\r\\n</atlas-financial-tab-group>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <atlas-freeze-header *ngIf=\\\"isNew\\\"\\r\\n                         (freezeCreated)=\\\"onCreated()\\\"></atlas-freeze-header>\\r\\n    <atlas-freeze-grid #grid\\r\\n                       [freezeMenuActions]=\\\"freezeMenuActions\\\"\\r\\n                       [freezeGridContextualMenuActions]=\\\"freezeGridContextualMenuActions\\\"\\r\\n                       (menuActionClicked)=\\\"onMenuActionClicked($event)\\\"\\r\\n                       [isLoading]=\\\"isLoading\\\"\\r\\n                       [rowData]=\\\"rowData\\\"></atlas-freeze-grid>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ICellRendererParams } from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { Subject } from 'rxjs';\r\nimport { finalize, map, takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { ConfirmationDialogComponent } from './../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AccountingSetup } from './../../../../shared/entities/accounting-setup.entity';\r\nimport { AgContextualMenuAction } from './../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { Freeze } from './../../../../shared/entities/freeze.entity';\r\nimport { FreezeType } from './../../../../shared/enums/freeze-type.enum';\r\nimport { ApiPaginatedCollection } from './../../../../shared/services/common/models';\r\nimport { FreezeService } from './../../../../shared/services/http-services/freeze.service';\r\nimport { PreaccountingService } from './../../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from './../../../../shared/services/snackbar.service';\r\nimport { TitleService } from './../../../../shared/services/title.service';\r\nimport { UiService } from './../../../../shared/services/ui.service';\r\nimport { FreezeGridComponent } from './cards/grid/freeze-grid.component';\r\n\r\n@Component({\r\n    selector: 'atlas-freeze',\r\n    templateUrl: './freeze.component.html',\r\n    styleUrls: ['./freeze.component.scss'],\r\n})\r\nexport class FreezeComponent implements OnInit {\r\n    @ViewChild('grid') freezeGridComponent: FreezeGridComponent;\r\n\r\n    company: string;\r\n    isNew: boolean;\r\n    closedMonthDate: Date;\r\n    isLoading = true;\r\n\r\n    freezeMenuActions: { [key: string]: string } = {\r\n        deleteFreeze: 'delete',\r\n    };\r\n    freezeGridContextualMenuActions: AgContextualMenuAction[] = [];\r\n    rowData: Freeze[] = [];\r\n    destroy$ = new Subject();\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected authorizationService: AuthorizationService,\r\n        protected preAccountingService: PreaccountingService,\r\n        protected freezeService: FreezeService,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        protected uiService: UiService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.isNew = this.route.snapshot.data.isNew;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getClosedMonth();\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n    }\r\n\r\n    initMenuAction() {\r\n        if (this.authorizationService.isPrivilegeAllowed(\r\n            this.company,\r\n            'CreateFreeze')) {\r\n            this.freezeGridContextualMenuActions.push({\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.freezeMenuActions.deleteFreeze,\r\n                disabled: this.isDeleteDisabled.bind(this),\r\n            });\r\n            this.freezeGridComponent.freezeGridContextualMenuActions = this.freezeGridContextualMenuActions;\r\n            this.freezeGridComponent.initMenuAction();\r\n        }\r\n    }\r\n\r\n    isDeleteDisabled(params: ICellRendererParams): boolean {\r\n        const freeze: Freeze = params.data;\r\n        if (!this.closedMonthDate) {\r\n            return true;\r\n        }\r\n        if (moment(this.closedMonthDate).year() < moment(freeze.freezeDate).year()) {\r\n            return false;\r\n        } else if (moment(this.closedMonthDate).month() < moment(freeze.freezeDate).month()\r\n            && moment(this.closedMonthDate).year() === moment(freeze.freezeDate).year()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getClosedMonth() {\r\n        this.preAccountingService.getAccountingSetupDetails().pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((detail: AccountingSetup) => {\r\n            this.closedMonthDate = detail.lastMonthClosed;\r\n            if (!this.isNew) {\r\n                this.initMenuAction();\r\n            }\r\n            this.getData();\r\n        });\r\n    }\r\n\r\n    getData() {\r\n        this.isLoading = true;\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => data.value),\r\n            finalize(() => {\r\n                this.isLoading = false;\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((freezeList: Freeze[]) => {\r\n            this.rowData = freezeList;\r\n            this.freezeGridComponent.populateGrid(freezeList);\r\n        });\r\n    }\r\n\r\n    onCreated() {\r\n        this.getData();\r\n    }\r\n\r\n    onMenuActionClicked(events: any[]) {\r\n        if (events) {\r\n            events.forEach((event) => {\r\n                const action = event.action;\r\n                const freeze = event.freeze;\r\n                switch (action) {\r\n                    case this.freezeMenuActions.deleteFreeze:\r\n                        const freezeDate = freeze.dataVersionTypeId === FreezeType.Monthly ?\r\n                            this.uiService.monthFormatter({ value: freeze.freezeDate }) :\r\n                            this.uiService.dateFormatter({ value: freeze.freezeDate });\r\n                        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Freeze Deletion',\r\n                                text: 'Do you wish to delete the freeze for the date ' + freezeDate,\r\n                                okButton: 'Yes',\r\n                                cancelButton: 'No',\r\n                            },\r\n                        });\r\n                        confirmDialog.afterClosed().subscribe((answer) => {\r\n                            if (answer) {\r\n                                this.freezeService.deleteFreeze(freeze.dataVersionId).pipe(\r\n                                    takeUntil(this.destroy$),\r\n                                ).subscribe(() => {\r\n                                    this.snackbarService.informationSnackBar('The freeze for the period '\r\n                                        + freezeDate + ' has been deleted.');\r\n                                    this.getData();\r\n                                });\r\n                            }\r\n                        });\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","module.exports = \"<atlas-financial-tab-group hasAddButton=true\\r\\n                           buttonText=\\\"CUT-OFF ACTIONS\\\">\\r\\n</atlas-financial-tab-group>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <atlas-freeze-header-filter (displayButtonClicked)=\\\"onDisplayButtonClicked()\\\"\\r\\n                                toogleText=\\\"Accounting data extraction\\\"\\r\\n                                #freezeHeaderFilterComponent>\\r\\n    </atlas-freeze-header-filter>\\r\\n    <atlas-freeze-grid #grid\\r\\n                       [freezeMenuActions]=\\\"freezeMenuActions\\\"\\r\\n                       [freezeGridContextualMenuActions]=\\\"freezeGridContextualMenuActions\\\"\\r\\n                       (menuActionClicked)=\\\"onMenuActionClicked($event)\\\"\\r\\n                       [rowData]=\\\"rowData\\\"\\r\\n                       [isLoading]=\\\"isLoading\\\"\\r\\n                       multipleSelection=true></atlas-freeze-grid>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ICellRendererParams } from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { Subject } from 'rxjs';\r\nimport { finalize, map, takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { ConfirmationDialogComponent } from './../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AccountingSetup } from './../../../../../shared/entities/accounting-setup.entity';\r\nimport { AgContextualMenuAction } from './../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { Freeze } from './../../../../../shared/entities/freeze.entity';\r\nimport { FreezeType } from './../../../../../shared/enums/freeze-type.enum';\r\nimport { ApiPaginatedCollection } from './../../../../../shared/services/common/models';\r\nimport { FreezeService } from './../../../../../shared/services/http-services/freeze.service';\r\nimport { PreaccountingService } from './../../../../../shared/services/http-services/preaccounting.service';\r\nimport { SecurityService } from './../../../../../shared/services/security.service';\r\nimport { SnackbarService } from './../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from './../../../../../shared/services/title.service';\r\nimport { UiService } from './../../../../../shared/services/ui.service';\r\nimport { FreezeGridComponent } from './../cards/grid/freeze-grid.component';\r\nimport { FreezeHeaderFilterComponent } from './../cards/header-filter/freeze-header-filter.component';\r\n\r\n@Component({\r\n    selector: 'atlas-freeze-recalculate',\r\n    templateUrl: './freeze-recalculate.component.html',\r\n    styleUrls: ['./freeze-recalculate.component.scss'],\r\n})\r\nexport class FreezeRecalculateComponent implements OnInit {\r\n    @ViewChild('grid') freezeGridComponent: FreezeGridComponent;\r\n    @ViewChild('freezeHeaderFilterComponent') freezeHeaderFilterComponent: FreezeHeaderFilterComponent;\r\n\r\n    company: string;\r\n    isNew: boolean;\r\n    closedMonthDate: Date;\r\n    isLoading = true;\r\n\r\n    freezeMenuActions: { [key: string]: string } = {\r\n        recalculate: 'recalculate',\r\n    };\r\n    freezeGridContextualMenuActions: AgContextualMenuAction[] = [];\r\n    rowData: Freeze[] = [];\r\n    destroy$ = new Subject();\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected authorizationService: AuthorizationService,\r\n        protected preAccountingService: PreaccountingService,\r\n        protected freezeService: FreezeService,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        protected uiService: UiService,\r\n        protected securityService: SecurityService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.getClosedMonth();\r\n        });\r\n    }\r\n\r\n    initMenuAction() {\r\n        if (this.authorizationService.isPrivilegeAllowed(\r\n            this.company,\r\n            'RecalculateFrozenDatabase')) {\r\n            this.freezeGridContextualMenuActions.push({\r\n                icon: 'settings_backup_restore',\r\n                text: 'Recalculate',\r\n                action: this.freezeMenuActions.recalculate,\r\n                disabled: this.isRecalculateDisabled.bind(this),\r\n            });\r\n            this.titleService.setTitle('Recalculate Frozen Database');\r\n            this.freezeGridComponent.freezeGridContextualMenuActions = this.freezeGridContextualMenuActions;\r\n            this.freezeGridComponent.initMenuAction();\r\n        }\r\n    }\r\n\r\n    isRecalculateDisabled(params: ICellRendererParams): boolean {\r\n        const freeze: Freeze = params.data;\r\n        return this.isMonthClosed(freeze, this.closedMonthDate ? moment(this.closedMonthDate) : null);\r\n    }\r\n\r\n    isMonthClosed(freeze: Freeze, closedMonthDate: Moment): boolean {\r\n        if (!this.closedMonthDate) {\r\n            return true;\r\n        }\r\n        if (closedMonthDate.year() < moment(freeze.freezeDate).year()) {\r\n            return false;\r\n        } else if (closedMonthDate.month() < moment(freeze.freezeDate).month()\r\n            && closedMonthDate.year() === moment(freeze.freezeDate).year()) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getClosedMonth() {\r\n        this.preAccountingService.getAccountingSetupDetails().pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((detail: AccountingSetup) => {\r\n            this.closedMonthDate = detail.lastMonthClosed;\r\n            this.initMenuAction();\r\n        });\r\n    }\r\n\r\n    getData() {\r\n        this.isLoading = true;\r\n        let dateFrom = null;\r\n        let dateTo = null;\r\n        let freezeType = null;\r\n        if (this.freezeHeaderFilterComponent) {\r\n            dateFrom = this.freezeHeaderFilterComponent.getDateFrom();\r\n            dateTo = this.freezeHeaderFilterComponent.getDateTo();\r\n            freezeType = this.freezeHeaderFilterComponent.freezeTypeCtrl.value;\r\n        }\r\n        this.freezeService.getFreezeList(dateFrom, dateTo, freezeType).pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => data.value),\r\n            finalize(() => {\r\n                this.isLoading = false;\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((freezeList: Freeze[]) => {\r\n            this.rowData = freezeList;\r\n            this.freezeGridComponent.populateGrid(freezeList);\r\n        });\r\n    }\r\n\r\n    onDisplayButtonClicked() {\r\n        this.getData();\r\n    }\r\n\r\n    onMenuActionClicked(events: any[]) {\r\n        if (events) {\r\n            events.forEach((event) => {\r\n                const action = event.action;\r\n                const freeze: Freeze = event.freeze;\r\n                const freezeDate = freeze.dataVersionTypeId === FreezeType.Monthly ?\r\n                    this.uiService.monthFormatter({ value: freeze.freezeDate }) :\r\n                    this.uiService.dateFormatter({ value: freeze.freezeDate });\r\n                switch (action) {\r\n                    case this.freezeMenuActions.recalculate:\r\n                        if (this.isMonthClosed(freeze, this.closedMonthDate ? moment(this.closedMonthDate) : null)) {\r\n                            this.snackbarService.throwErrorSnackBar('You cannot recalculate the freeze for the date '\r\n                                + freezeDate + ' because the month is closed');\r\n                        } else {\r\n                            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'Recalculate Frozen Database',\r\n                                    text: 'Are you sure you want to recalculate the frozen database for the date ' + freezeDate + ' ?',\r\n                                    okButton: 'Recalculate',\r\n                                    cancelButton: 'Cancel',\r\n                                },\r\n                            });\r\n                            confirmDialog.afterClosed().subscribe((answer) => {\r\n                                if (answer) {\r\n                                    let recalculateAccEntries = true;\r\n                                    if (this.freezeHeaderFilterComponent) {\r\n                                        recalculateAccEntries = this.freezeHeaderFilterComponent.toggleFormControl.value;\r\n                                    }\r\n                                    this.freezeService.recalculateFreeze(freeze.dataVersionId, recalculateAccEntries).subscribe(() => {\r\n                                        this.snackbarService.informationSnackBar('The freeze for the date ' + freezeDate\r\n                                            + ' has been recalculated');\r\n                                        this.getData();\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>End of month selection</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <atlas-dropdown-select fxFlex='30%'\\r\\n                                   [label]=\\\"'Database Snapshot'\\\"\\r\\n                                   [fieldControl]=\\\"snapshotsCtrl\\\"\\r\\n                                   isEditable=true\\r\\n                                   [options]=\\\"snapshotList\\\"\\r\\n                                   [errorMap]=\\\"snapshotErrorMap\\\"\\r\\n                                   displayProperty=\\\"freezeDate\\\"\\r\\n                                   [selectProperties]=\\\"['freezeDate']\\\"\\r\\n                                   (optionSelected)=\\\"onSnapshotSelected($event)\\\"></atlas-dropdown-select>\\r\\n\\r\\n            <atlas-dropdown-select fxFlex='30%'\\r\\n                                   [label]=\\\"'Type'\\\"\\r\\n                                   [fieldControl]=\\\"reportTypeCtrl\\\"\\r\\n                                   isEditable=true\\r\\n                                   [options]=\\\"reportTypeList\\\"\\r\\n                                   [errorMap]=\\\"reportTypeErrorMap\\\"\\r\\n                                   displayProperty=\\\"enumEntityValue\\\"\\r\\n                                   [selectProperties]=\\\"['enumEntityValue']\\\"\\r\\n                                   (optionSelected)=\\\"onReportTypeSelected($event)\\\"></atlas-dropdown-select>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { Freeze } from '../../../../../../shared/entities/freeze.entity';\r\nimport { FreezeDisplayView } from '../../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../../shared/services/common/models';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { FreezeService } from '../../../../../../shared/services/http-services/freeze.service';\r\nimport { monthEndReportType } from '../../../../../../shared/entities/month-end-report-type.entity'\r\n\r\n@Component({\r\n    selector: 'atlas-end-of-month-selection',\r\n    templateUrl: './end-of-month-selection.component.html',\r\n    styleUrls: ['./end-of-month-selection.component.scss'],\r\n})\r\nexport class EndOfMonthSelectionComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly snapshotTypeSelected = new EventEmitter<any>();\r\n    @Output() readonly snapshotDate = new EventEmitter<any>();\r\n    @Output() readonly snapshotMonth = new EventEmitter<string>();\r\n    @Output() readonly reportTypeSelected = new EventEmitter<any>();\r\n    @Output() readonly reportTypeDescriptionSelected = new EventEmitter<any>();\r\n    snapshotsCtrl = new AtlasFormControl('snapshots');\r\n    reportTypeCtrl = new AtlasFormControl('reportType');\r\n    formGroup: FormGroup;\r\n    selectedDB = 'Current Database';\r\n    selectedType = 'Realised Physicals';\r\n    snapshotList: FreezeDisplayView[] = [];\r\n    currentSnapshot = new FreezeDisplayView(-1, 'Current Database');\r\n    reportType: monthEndReportType;\r\n    snapshotErrorMap: Map<string, string> = new Map<string, string>();\r\n    destroy$ = new Subject();\r\n    reportTypeList: monthEndReportType[];\r\n    reportTypeErrorMap: Map<string, string> = new Map<string, string>();\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private freezeService: FreezeService,\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loadSnapshots();\r\n        this.snapshotTypeSelected.emit({ dataVersionIdSelected: 0 });\r\n        this.reportTypeList = this.route.snapshot.data.masterdata.monthEndReportType;\r\n        this.reportTypeSelected.emit({ reportTypeSelected: this.route.snapshot.data.masterdata.monthEndReportType[0].enumEntityId });\r\n        this.reportTypeDescriptionSelected.emit({ reportTypeDescriptionSelected: this.route.snapshot.data.masterdata.monthEndReportType[0].enumEntityValue });\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            snapshotsCtrl: this.snapshotsCtrl,\r\n            reportTypeCtrl: this.reportTypeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    initializeForm() {\r\n        this.formGroup = this.formBuilder.group({\r\n            snapshotsCtrl: this.snapshotsCtrl,\r\n            reportTypeCtrl: this.reportTypeCtrl,\r\n        });\r\n        this.setDefaultValues();\r\n\r\n        return this.formGroup;\r\n    }\r\n    setDefaultValues() {\r\n        this.snapshotsCtrl.patchValue(this.currentSnapshot);\r\n        this.reportTypeCtrl.patchValue(this.route.snapshot.data.masterdata.monthEndReportType[0]);\r\n    }\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.filter((freeze) => freeze.dataVersionTypeId === 2).map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate),\r\n                        freeze.freezeDate);\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.snapshotList = snapshots;\r\n            this.snapshotList.unshift(this.currentSnapshot);\r\n            this.initializeForm();\r\n        });\r\n\r\n    }\r\n\r\n    onSnapshotSelected(value: FreezeDisplayView) {\r\n        this.snapshotTypeSelected.emit({ dataVersionIdSelected: value.dataVersionId });\r\n        this.snapshotDate.emit({ snapshotSelectedDate: value.actualfreezeDate });\r\n        this.snapshotMonth.emit(value.freezeDate);\r\n\r\n    }\r\n\r\n    onReportTypeSelected(value: monthEndReportType) {\r\n        this.reportTypeSelected.emit({ reportTypeSelected: value.enumEntityId });\r\n        this.reportTypeDescriptionSelected.emit({ reportTypeDescriptionSelected: value.enumEntityValue });\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-form-field fxFlex=100%>\\r\\n        <input #input\\r\\n               matInput\\r\\n               [matAutocomplete]=\\\"autocomplete\\\"\\r\\n               [placeholder]=\\\"'Associated Client'\\\"\\r\\n               formControlName=\\\"formCtrl\\\"\\r\\n               (focus)=\\\"clearValueEvent()\\\"\\r\\n               (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n               (click)=\\\"openAutocompletePanel()\\\">\\r\\n        <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                          (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n            <mat-option *ngIf=\\\"allFilterOption.value.toString().startsWith(input.value)\\\"\\r\\n                        [value]=\\\"allFilterOption\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                    All\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n            <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                        [value]=\\\"object\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                    <span *ngIf=\\\"displayCode\\\">{{ object[valueProperty] }}</span>\\r\\n                    <span *ngIf=\\\"object[valueProperty] !== null && displayCode\\\"> | </span>\\r\\n                    <span>{{ object[displayProperty] }}</span>\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-associated-client-dropdown',\r\n    templateUrl: './associated-client-dropdown.component.html',\r\n    styleUrls: ['./associated-client-dropdown.component.scss'],\r\n})\r\nexport class AssociatedClientDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    @Input() allSelected = true;\r\n    formCtrl = new FormControl();\r\n    valueProperty: string = 'value';\r\n    displayProperty: string = 'desc';\r\n    allFilterOption: FilterValueGenerateEndMonth = {\r\n        value: 0,\r\n        desc: 'All',\r\n    };\r\n    valueIds: number[] = [];\r\n    constructor(private route: ActivatedRoute) { super(); }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n        this.initAssociatedClient(true);\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allFilterOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n    }\r\n\r\n    setValue() {\r\n        this.valueIds = [];\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allFilterOption.desc);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n        for (const val of this.selectedValues) {\r\n            this.valueIds.push(val['value']);\r\n        }\r\n    }\r\n    setSelectedValue(allSelected: boolean, associatedClients: FilterValueGenerateEndMonth[]) {\r\n        if (associatedClients) {\r\n            this.allSelected = allSelected;\r\n            this.selectedValues = associatedClients;\r\n            this.setValue();\r\n            this.filteredObjects = this.selectedValues;\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n\r\n    initAssociatedClient(isLoad = false) {\r\n        if (isLoad) {\r\n            this.selectedValues = this.objects;\r\n        }\r\n        this.setData();\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-form-field fxFlex=100%>\\r\\n        <input #input\\r\\n               matInput\\r\\n               [matAutocomplete]=\\\"autocomplete\\\"\\r\\n               [placeholder]=\\\"'Charter'\\\"\\r\\n               formControlName=\\\"formCtrl\\\"\\r\\n               (focus)=\\\"clearValueEvent()\\\"\\r\\n               (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n               (click)=\\\"openAutocompletePanel()\\\">\\r\\n        <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                          (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n            <mat-option *ngIf=\\\"allFilterOption.value.toString().startsWith(input.value)\\\"\\r\\n                        [value]=\\\"allFilterOption\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                    All\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n            <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                        [value]=\\\"object\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                    <span *ngIf=\\\"displayCode\\\">{{ object[valueProperty] }}</span>\\r\\n                    <span *ngIf=\\\"object[valueProperty] !== null && displayCode\\\"> | </span>\\r\\n                    <span>{{ object[displayProperty] }}</span>\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-dropdown',\r\n    templateUrl: './charter-dropdown.component.html',\r\n    styleUrls: ['./charter-dropdown.component.scss'],\r\n})\r\nexport class CharterDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    @Input() allSelected = true;\r\n    @Output() readonly charterSelectionChanged = new EventEmitter();\r\n    formCtrl = new FormControl();\r\n    valueProperty: string = 'value';\r\n    displayProperty: string = 'desc';\r\n    allFilterOption: FilterValueGenerateEndMonth = {\r\n        value: 0,\r\n        desc: 'All',\r\n    };\r\n    valueIds: number[] = [];\r\n    constructor(private route: ActivatedRoute) { super(); }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n        this.initCharter(true);\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allFilterOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n        this.charterSelectionChanged.emit();\r\n    }\r\n\r\n    setValue() {\r\n        this.valueIds = [];\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allFilterOption.desc);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n        for (const val of this.selectedValues) {\r\n            this.valueIds.push(val['value']);\r\n        }\r\n\r\n    }\r\n    setSelectedValue(allSelected: boolean, charters: FilterValueGenerateEndMonth[]) {\r\n        if (charters) {\r\n            this.allSelected = allSelected;\r\n            this.selectedValues = charters;\r\n            this.setValue();\r\n            this.filteredObjects = this.selectedValues;\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n\r\n    initCharter(isLoad = false) {\r\n        if (isLoad) {\r\n            this.selectedValues = this.objects;\r\n        }\r\n        this.setData();\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-form-field fxFlex=100%>\\r\\n        <input #input\\r\\n               matInput\\r\\n               [matAutocomplete]=\\\"autocomplete\\\"\\r\\n               [placeholder]=\\\"'Cost Type'\\\"\\r\\n               formControlName=\\\"formCtrl\\\"\\r\\n               (focus)=\\\"clearValueEvent()\\\"\\r\\n               (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n               (click)=\\\"openAutocompletePanel()\\\">\\r\\n        <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                          (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n            <mat-option *ngIf=\\\"allFilterOption.value.toString().startsWith(input.value)\\\"\\r\\n                        [value]=\\\"allFilterOption\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                    All\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n            <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                        [value]=\\\"object\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                    <span *ngIf=\\\"displayCode\\\">{{ object[valueProperty] }}</span>\\r\\n                    <span *ngIf=\\\"object[valueProperty] !== null && displayCode\\\"> | </span>\\r\\n                    <span>{{ object[displayProperty] }}</span>\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-type-dropdown',\r\n    templateUrl: './cost-type-dropdown.component.html',\r\n    styleUrls: ['./cost-type-dropdown.component.scss'],\r\n})\r\nexport class CostTypeDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    @Input() allSelected = true;\r\n    @Output() readonly costTypeSelectionChanged = new EventEmitter();\r\n    formCtrl = new FormControl();\r\n    valueProperty: string = 'value';\r\n    displayProperty: string = 'desc';\r\n    allFilterOption: FilterValueGenerateEndMonth = {\r\n        value: 0,\r\n        desc: 'All',\r\n    };\r\n    valueIds: number[] = [];\r\n    constructor(private route: ActivatedRoute) { super(); }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n        this.initCostType(true);\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allFilterOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n        this.costTypeSelectionChanged.emit();\r\n    }\r\n\r\n    setValue() {\r\n        this.valueIds = [];\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allFilterOption.desc);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n        for (const val of this.selectedValues) {\r\n            this.valueIds.push(val['value']);\r\n        }\r\n\r\n    }\r\n    setSelectedValue(allSelected: boolean, costTypes: FilterValueGenerateEndMonth[]) {\r\n        if (costTypes) {\r\n            this.allSelected = allSelected;\r\n            this.selectedValues = costTypes;\r\n            this.setValue();\r\n            this.filteredObjects = this.selectedValues;\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n\r\n    initCostType(isLoad = false) {\r\n        if (isLoad) {\r\n            this.selectedValues = this.objects;\r\n        }\r\n        this.setData();\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-form-field>\\r\\n        <input #input\\r\\n               matInput\\r\\n               [matAutocomplete]=\\\"autocomplete\\\"\\r\\n               [placeholder]=\\\"'Deal No.'\\\"\\r\\n               formControlName=\\\"formCtrl\\\"\\r\\n               (focus)=\\\"clearValueEvent()\\\"\\r\\n               (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n               (click)=\\\"openAutocompletePanel()\\\">\\r\\n        <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                          (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n            <mat-option *ngIf=\\\"allFilterOption.value.toString().toUpperCase().startsWith(input.value)\\\"\\r\\n                        [value]=\\\"allFilterOption\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                    All\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n            <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                        [value]=\\\"object\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                    <span *ngIf=\\\"displayCode\\\">{{ object[valueProperty] }}</span>\\r\\n                    <span *ngIf=\\\"object[valueProperty] !== null && displayCode\\\"> | </span>\\r\\n                    <span>{{ object[displayProperty] }}</span>\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-deal-number-dropdown',\r\n    templateUrl: './deal-number-dropdown.component.html',\r\n    styleUrls: ['./deal-number-dropdown.component.scss'],\r\n})\r\nexport class DealNumberDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    @Input() allSelected = true;\r\n    @Output() readonly dealNumberSelectionChanged = new EventEmitter();\r\n    formCtrl = new AtlasFormControl('formControl');\r\n    valueProperty: string = 'value';\r\n    displayProperty: string = 'desc';\r\n    allFilterOption: FilterValueGenerateEndMonth = {\r\n        value: 0,\r\n        desc: 'All',\r\n    };\r\n    valueIds: number[] = [];\r\n    constructor() { super(); }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n        this.initDealNumber(true);\r\n    }\r\n\r\n    initDealNumber(isLoad = false) {\r\n        if (isLoad) {\r\n            this.selectedValues = this.objects;\r\n        }\r\n        this.setData();\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allFilterOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n        this.dealNumberSelectionChanged.emit();\r\n    }\r\n\r\n    setValue() {\r\n        this.valueIds = [];\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allFilterOption.desc);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n        for (const val of this.selectedValues) {\r\n            this.valueIds.push(val['value']);\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n\r\n    setSelectedValue(allSelected: boolean, dealNumbers: FilterValueGenerateEndMonth[]) {\r\n        if (dealNumbers) {\r\n            this.allSelected = allSelected;\r\n            this.selectedValues = dealNumbers;\r\n            this.setValue();\r\n            this.filteredObjects = this.selectedValues;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-form-field>\\r\\n        <input #input\\r\\n               matInput\\r\\n               [matAutocomplete]=\\\"autocomplete\\\"\\r\\n               [placeholder]=\\\"'Dealt Ccy'\\\"\\r\\n               formControlName=\\\"formCtrl\\\"\\r\\n               (focus)=\\\"clearValueEvent()\\\"\\r\\n               (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n               (click)=\\\"openAutocompletePanel()\\\">\\r\\n        <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                          (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n            <mat-option *ngIf=\\\"allFilterOption.value.toString().toUpperCase().startsWith(input.value)\\\"\\r\\n                        [value]=\\\"allFilterOption\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                    All\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n            <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                        [value]=\\\"object\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                    <span *ngIf=\\\"displayCode\\\">{{ object[valueProperty] }}</span>\\r\\n                    <span *ngIf=\\\"object[valueProperty] !== null && displayCode\\\"> | </span>\\r\\n                    <span>{{ object[displayProperty] }}</span>\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-dealt-currency-dropdown',\r\n    templateUrl: './dealt-currency-dropdown.component.html',\r\n    styleUrls: ['./dealt-currency-dropdown.component.scss'],\r\n})\r\nexport class DealtCurrencyDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    @Input() allSelected = true;\r\n    @Output() readonly dealtCurrencySelectionChanged = new EventEmitter();\r\n    formCtrl = new AtlasFormControl('formControl');\r\n    valueProperty: string = 'value';\r\n    displayProperty: string = 'desc';\r\n    allFilterOption: FilterValueGenerateEndMonth = {\r\n        value: 0,\r\n        desc: 'All',\r\n    };\r\n    valueIds: number[] = [];\r\n    constructor() { super(); }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n        this.initDealtCurrency(true);\r\n    }\r\n\r\n    initDealtCurrency(isLoad = false) {\r\n        if (isLoad) {\r\n            this.selectedValues = this.objects;\r\n        }\r\n        this.setData();\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allFilterOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n        this.dealtCurrencySelectionChanged.emit();\r\n    }\r\n\r\n    setValue() {\r\n        this.valueIds = [];\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allFilterOption.desc);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n        for (const val of this.selectedValues) {\r\n            this.valueIds.push(val['value']);\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n\r\n    setSelectedValue(allSelected: boolean, dealtCurrency: FilterValueGenerateEndMonth[]) {\r\n        if (dealtCurrency) {\r\n            this.allSelected = allSelected;\r\n            this.selectedValues = dealtCurrency;\r\n            this.setValue();\r\n            this.filteredObjects = this.selectedValues;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-form-field>\\r\\n        <input #input\\r\\n               matInput\\r\\n               [matAutocomplete]=\\\"autocomplete\\\"\\r\\n               [placeholder]=\\\"'Department'\\\"\\r\\n               formControlName=\\\"formCtrl\\\"\\r\\n               (focus)=\\\"clearValueEvent()\\\"\\r\\n               (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n               (click)=\\\"openAutocompletePanel()\\\">\\r\\n        <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                          (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n            <mat-option *ngIf=\\\"allFilterOption.value.toString().toUpperCase().startsWith(input.value)\\\"\\r\\n                        [value]=\\\"allFilterOption\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                    All\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n            <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                        [value]=\\\"object\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                    <span *ngIf=\\\"displayCode\\\">{{ object[valueProperty] }}</span>\\r\\n                    <span *ngIf=\\\"object[valueProperty] !== null && displayCode\\\"> | </span>\\r\\n                    <span>{{ object[displayProperty] }}</span>\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-department-dropdown',\r\n    templateUrl: './department-dropdown.component.html',\r\n    styleUrls: ['./department-dropdown.component.scss'],\r\n})\r\nexport class DepartmentDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    @Input() allSelected = true;\r\n    @Output() readonly departmentSelectionChanged = new EventEmitter();\r\n    formCtrl = new FormControl();\r\n    valueProperty: string = 'value';\r\n    displayProperty: string = 'desc';\r\n    allFilterOption: FilterValueGenerateEndMonth = {\r\n        value: 0,\r\n        desc: 'All',\r\n    };\r\n    valueIds: number[] = [];\r\n    constructor(private route: ActivatedRoute) { super(); }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n        this.initDepartment(true);\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allFilterOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n        this.departmentSelectionChanged.emit();\r\n    }\r\n\r\n    setValue() {\r\n        this.valueIds = [];\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allFilterOption.desc);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n        for (const val of this.selectedValues) {\r\n            this.valueIds.push(val['value']);\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n\r\n    initDepartment(isLoad = false) {\r\n        if (isLoad) {\r\n            this.selectedValues = this.objects;\r\n        }\r\n        this.setData();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"column\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between center\\\">\\r\\n                    <atlas-department-dropdown (departmentSelectionChanged)=\\\"onDepartmentSelectionChanges()\\\"\\r\\n                                               #departmentDropdownComponent>\\r\\n                    </atlas-department-dropdown>\\r\\n                    <atlas-charter-dropdown (charterSelectionChanged)=\\\"onCharterSelectionChanges()\\\"\\r\\n                                            #charterDropdownComponent>\\r\\n                    </atlas-charter-dropdown>\\r\\n                    <atlas-cost-type-dropdown (costTypeSelectionChanged)=\\\"onCostTypeSelectionChanges()\\\"\\r\\n                                              #costTypeDropdownComponent>\\r\\n                    </atlas-cost-type-dropdown>\\r\\n                    <atlas-associated-client-dropdown #associatedClientDropdownComponent>\\r\\n                    </atlas-associated-client-dropdown>\\r\\n                    <button (click)=\\\"onApplyButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        APPLY\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <atlas-generate-end-of-month-tab-group (filtered)=\\\"filtered($event)\\\"\\r\\n                                           (stopPosting)=\\\"stopPosting($event)\\\"\\r\\n                                           (applyButton)=\\\"onApplyButtonClicked()\\\"\\r\\n                                           (tabIndexNumber)=\\\"onSelectedIndexChanged1($event)\\\"\\r\\n                                           (mappingErrorChange)=\\\"onMappingErrorChange($event)\\\"\\r\\n                                           [isFilterApplied]=\\\"isFilterApplied\\\"\\r\\n                                           #generateEndOfMonthTabGroup></atlas-generate-end-of-month-tab-group>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                    mat-button>\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onGeneratePostingsButtonClicked()\\\"\\r\\n                    [disabled]=\\\"disableButton || (isMappingError || isCurrentDatabase)\\\">\\r\\n                GENERATE POSTINGS\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FilterGem } from '../../../../../shared/entities/filter-gem.entity';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../shared/entities/filter-value-generate-end-month.entity';\r\nimport { PermissionLevels } from '../../../../../shared/enums/permission-level.enum';\r\nimport { ReportType } from '../../../../../shared/enums/report-type.enum';\r\nimport { OverviewGenerateEndOfMonthDisplayView } from '../../../../../shared/models/overview-generate-end-of-month-display-view';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { AssociatedClientDropdownComponent } from './associated-client-dropdown/associated-client-dropdown.component';\r\nimport { CharterDropdownComponent } from './charter-dropdown/charter-dropdown.component';\r\nimport { CostTypeDropdownComponent } from './cost-type-dropdown/cost-type-dropdown.component';\r\nimport { DepartmentDropdownComponent } from './department-dropdown/department-dropdown.component';\r\nimport { GenerateEndOfMonthTabGroupComponent } from './generate-end-of-month-tab-group/generate-end-of-month-tab-group.component';\r\n@Component({\r\n    selector: 'atlas-generate-end-of-month-summary',\r\n    templateUrl: './generate-end-of-month-summary.component.html',\r\n    styleUrls: ['./generate-end-of-month-summary.component.scss'],\r\n})\r\nexport class GenerateEndOfMonthSummaryComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('generateEndOfMonthTabGroup') generateEndOfMonthTabGroupComponent: GenerateEndOfMonthTabGroupComponent;\r\n    @ViewChild('departmentDropdownComponent') departmentDropdownComponent: DepartmentDropdownComponent;\r\n    @ViewChild('charterDropdownComponent') charterDropdownComponent: CharterDropdownComponent;\r\n    @ViewChild('costTypeDropdownComponent') costTypeDropdownComponent: CostTypeDropdownComponent;\r\n    @ViewChild('associatedClientDropdownComponent') associatedClientDropdownComponent: AssociatedClientDropdownComponent;\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    company: string;\r\n    PermissionLevels = PermissionLevels;\r\n    buttonEditable: boolean = false;\r\n    buttonDisableForPrevilage: boolean = false;\r\n    disableButton: boolean = false;\r\n    isCurrentDatabase: boolean = true;\r\n    isMappingError: boolean = true;\r\n    isUnRealisedPhysical: boolean = true;\r\n    dataVersionId: number;\r\n    dataVersionDate: Date;\r\n    dataVersionMonth: string;\r\n    reportType: number;\r\n    reportTypeDescription: string;\r\n    selectedDepartments: FilterValueGenerateEndMonth[] = [];\r\n    selectedCharter: FilterValueGenerateEndMonth[] = [];\r\n    selectedCostType: FilterValueGenerateEndMonth[] = [];\r\n    selectedAssociatedClient: FilterValueGenerateEndMonth[] = [];\r\n    originalOverviewGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    originalDetailsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    originalPostingsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    tabIndex: number = 0;\r\n    isFilterApplied: boolean = false;\r\n    isPostingButtonDisable: boolean;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authorizationService: AuthorizationService,\r\n        private companyManager: CompanyManagerService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n    generatePostingsPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'GeneratePostings',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'CutOff',\r\n    };\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle('Generate End of Month');\r\n        this.buttonDisableForPrevilage = this.checkIfUserHasRequiredPrivileges(this.generatePostingsPrivilege);\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.dataVersionId = Number(params['dataVersionId']);\r\n            this.buttonEditable = (params['isPostingButtonEditable']).toLowerCase() === 'true' ? true : false;\r\n            this.reportTypeDescription = (params['reportTypeDescription']);\r\n            this.dataVersionDate = (params['dataVersionDate']);\r\n            this.dataVersionMonth = (params['dataVersionMonth']);\r\n            this.reportType = Number(params['reportType']);\r\n\r\n        });\r\n        if ((this.dataVersionDate === null\r\n            || this.dataVersionDate === undefined)\r\n            && (this.dataVersionMonth === 'Current Database'\r\n                || this.dataVersionMonth === null\r\n                || this.dataVersionMonth === undefined)\r\n        ) {\r\n            this.isCurrentDatabase = true;\r\n        }\r\n        else {\r\n            this.isCurrentDatabase = false;\r\n        }\r\n        if (this.reportTypeDescription.indexOf('Unrealized') > 0) {\r\n            this.isUnRealisedPhysical = true;\r\n        }\r\n        else {\r\n            this.isUnRealisedPhysical = false;\r\n        }\r\n        this.dataVersionMonth = this.dataVersionMonth ? this.dataVersionMonth : 'Current Database';\r\n        this.generateEndOfMonthTabGroupComponent.reportType = this.reportType;\r\n        if (this.generateEndOfMonthTabGroupComponent.overviewTabComponent) {\r\n            this.generateEndOfMonthTabGroupComponent.overviewTabComponent.dataVersionID = this.dataVersionId;\r\n            this.generateEndOfMonthTabGroupComponent.overviewTabComponent.dataVersionDate = this.dataVersionDate;\r\n            this.generateEndOfMonthTabGroupComponent.overviewTabComponent.dataVersionMonth = this.dataVersionMonth;\r\n            this.generateEndOfMonthTabGroupComponent.overviewTabComponent.reportType = this.reportType;\r\n            this.generateEndOfMonthTabGroupComponent.overviewTabComponent.reportTypeDescription = this.reportTypeDescription;\r\n        }\r\n        if (this.generateEndOfMonthTabGroupComponent.postingsTabComponent) {\r\n            this.generateEndOfMonthTabGroupComponent.postingsTabComponent.dataVersionID = this.dataVersionId;\r\n            this.generateEndOfMonthTabGroupComponent.postingsTabComponent.dataVersionMonth = this.dataVersionMonth;\r\n            this.generateEndOfMonthTabGroupComponent.postingsTabComponent.reportType = this.reportType;\r\n            this.generateEndOfMonthTabGroupComponent.postingsTabComponent.reportTypeDescription = this.reportTypeDescription;\r\n        }\r\n        if (this.generateEndOfMonthTabGroupComponent.postingsTabComponent) {\r\n            this.generateEndOfMonthTabGroupComponent.detailsTabComponent.dataVersionID = this.dataVersionId;\r\n            this.generateEndOfMonthTabGroupComponent.detailsTabComponent.dataVersionMonth = this.dataVersionMonth;\r\n            this.generateEndOfMonthTabGroupComponent.detailsTabComponent.reportType = this.reportType;\r\n            this.generateEndOfMonthTabGroupComponent.detailsTabComponent.reportTypeDescription = this.reportTypeDescription;\r\n        }\r\n        if (this.generateEndOfMonthTabGroupComponent.unrealizedPostingsTabComponent) {\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedPostingsTabComponent.dataVersionID = this.dataVersionId;\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedPostingsTabComponent.dataVersionMonth = this.dataVersionMonth;\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedPostingsTabComponent.reportType = this.reportType;\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedPostingsTabComponent.reportTypeDescription = this.reportTypeDescription;\r\n        }\r\n        if (this.generateEndOfMonthTabGroupComponent.unrealizedDetailsTabComponent) {\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedDetailsTabComponent.dataVersionID = this.dataVersionId;\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedDetailsTabComponent.dataVersionMonth = this.dataVersionMonth;\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedDetailsTabComponent.reportType = this.reportType;\r\n            this.generateEndOfMonthTabGroupComponent.unrealizedDetailsTabComponent.reportTypeDescription = this.reportTypeDescription;\r\n        }\r\n\r\n        this.generateEndOfMonthTabGroupComponent.updateCurrentDatabaseBitValue(this.isCurrentDatabase);\r\n\r\n        if (this.buttonDisableForPrevilage) {\r\n            this.disableButton = true;\r\n        } else {\r\n            this.disableButton = this.buttonEditable;\r\n        }\r\n        if (this.reportType === ReportType.UnRealized) {\r\n            this.generateEndOfMonthTabGroupComponent.overviewTabComponent.getTradeCostListPosting(this.dataVersionId);\r\n        }\r\n    }\r\n    filtered(filter: FilterGem) {\r\n        this.departmentDropdownComponent.objects = this.getDistinctString(filter.departmentCode);\r\n        this.charterDropdownComponent.objects = this.getDistinctString(filter.charterCode);\r\n        this.costTypeDropdownComponent.objects = this.getDistinctString(filter.costType);\r\n        this.associatedClientDropdownComponent.objects = this.getDistinctString(filter.associatedClient);\r\n    }\r\n    stopPosting(generateMonthPosting: boolean) {\r\n        this.disableButton = generateMonthPosting;\r\n    }\r\n    getDistinctString(list: FilterValueGenerateEndMonth[]): FilterValueGenerateEndMonth[] {\r\n        const distinctList = [];\r\n        const filteredList: FilterValueGenerateEndMonth[] = [];\r\n        list.forEach((item) => {\r\n            if (distinctList.indexOf(item.desc) === -1) {\r\n                distinctList.push(item.desc);\r\n                filteredList.push(item);\r\n            }\r\n        });\r\n        return filteredList;\r\n    }\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel <= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    onDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/generate-end-of-month']);\r\n    }\r\n    onGeneratePostingsButtonClicked() {\r\n        this.generateEndOfMonthTabGroupComponent.overviewTabComponent.onGenerateTADocument();\r\n    }\r\n\r\n    onSelectedIndexChanged1(tabIndex: number) {\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    onApplyButtonClicked() {\r\n        if (this.departmentDropdownComponent.allSelected &&\r\n            this.charterDropdownComponent.allSelected &&\r\n            this.costTypeDropdownComponent.allSelected &&\r\n            this.associatedClientDropdownComponent.allSelected) {\r\n            this.isFilterApplied = false;\r\n            this.generateEndOfMonthTabGroupComponent.isFilterApplied = false;\r\n\r\n        } else {\r\n            this.isFilterApplied = true;\r\n            this.generateEndOfMonthTabGroupComponent.isFilterApplied = true;\r\n        }\r\n        this.selectedFilters();\r\n        if (this.reportType === ReportType.Realized) {\r\n            this.originalOverviewGridRows = this.generateEndOfMonthTabGroupComponent.overviewTabComponent.originalOverviewGridRows;\r\n            this.originalDetailsGridRows = this.generateEndOfMonthTabGroupComponent.detailsTabComponent.originalDetailsGridRows;\r\n            this.originalPostingsGridRows = this.generateEndOfMonthTabGroupComponent.postingsTabComponent.originalPostingsGridRows;\r\n\r\n            switch (this.tabIndex) {\r\n                case 0: {\r\n                    this.generateEndOfMonthTabGroupComponent.\r\n                        getFilteredData(0, this.applyFilter(this.originalOverviewGridRows));\r\n                    this.generateEndOfMonthTabGroupComponent.overviewTabComponent.\r\n                        calculateGrandTotal(this.applyFilter(this.originalOverviewGridRows));\r\n                    break;\r\n                }\r\n                case 1: {\r\n                    this.generateEndOfMonthTabGroupComponent.\r\n                        getFilteredData(1, this.applyFilter(this.originalDetailsGridRows));\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    this.generateEndOfMonthTabGroupComponent.\r\n                        getFilteredData(2, this.applyFilter(this.originalPostingsGridRows));\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n\r\n            this.originalDetailsGridRows = this.generateEndOfMonthTabGroupComponent.unrealizedDetailsTabComponent.originalDetailsGridRows;\r\n            this.originalPostingsGridRows = this.generateEndOfMonthTabGroupComponent.unrealizedPostingsTabComponent.originalPostingsGridRows;\r\n            switch (this.tabIndex) {\r\n\r\n                case 0: {\r\n                    this.generateEndOfMonthTabGroupComponent.\r\n                        getFilteredData(1, this.applyFilter(this.originalDetailsGridRows));\r\n                    break;\r\n                }\r\n                case 1: {\r\n                    this.generateEndOfMonthTabGroupComponent.\r\n                        getFilteredData(2, this.applyFilter(this.originalPostingsGridRows));\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    selectedFilters() {\r\n        this.selectedDepartments = this.departmentDropdownComponent.allSelected ? this.departmentDropdownComponent.objects :\r\n            this.departmentDropdownComponent.selectedValues;\r\n        this.selectedCharter = this.charterDropdownComponent.allSelected ? this.charterDropdownComponent.objects :\r\n            this.charterDropdownComponent.selectedValues;\r\n        this.selectedCostType = this.costTypeDropdownComponent.allSelected ? this.costTypeDropdownComponent.objects :\r\n            this.costTypeDropdownComponent.selectedValues;\r\n        this.selectedAssociatedClient = this.associatedClientDropdownComponent.allSelected ?\r\n            this.associatedClientDropdownComponent.objects :\r\n            this.associatedClientDropdownComponent.selectedValues;\r\n    }\r\n    applyFilter(filterRows: OverviewGenerateEndOfMonthDisplayView[]) {\r\n        if (this.isFilterApplied) {\r\n            const deptFilter: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n            const charterFilter: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n            const costTypeFilter: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n            const associatedClientFilter: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n            filterRows.filter((x) => {\r\n                const deptCode = this.selectedDepartments.find((y) => y.desc === x.departmentCode);\r\n                if (deptCode) {\r\n                    if (x.departmentCode === deptCode.desc) {\r\n                        deptFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n\r\n            filterRows = deptFilter;\r\n\r\n            filterRows.filter((x) => {\r\n                const charterCode = this.selectedCharter.find((y) => y.desc === x.charterCode);\r\n                if (charterCode) {\r\n                    if (x.charterCode === charterCode.desc) {\r\n                        charterFilter.push(x);\r\n                    }\r\n                } else {\r\n                    if (x.charterCode === null) {\r\n                        charterFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n\r\n            filterRows = charterFilter;\r\n\r\n            filterRows.filter((x) => {\r\n                const costTypeCode = this.selectedCostType.find((y) => y.desc === x.costType);\r\n                if (costTypeCode) {\r\n                    if (x.costType === costTypeCode.desc) {\r\n                        costTypeFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n\r\n            filterRows = costTypeFilter;\r\n            filterRows.filter((x) => {\r\n                const associatedClientCode = this.selectedAssociatedClient.find((y) => y.desc === x.associatedClient);\r\n                if (associatedClientCode) {\r\n                    if (x.associatedClient === associatedClientCode.desc) {\r\n                        associatedClientFilter.push(x);\r\n                    }\r\n                } else {\r\n                    if (x.associatedClient === null) {\r\n                        associatedClientFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n            filterRows = associatedClientFilter;\r\n            return filterRows;\r\n        } else {\r\n            filterRows = [];\r\n            return filterRows;\r\n        }\r\n    }\r\n\r\n    onDepartmentSelectionChanges() {\r\n        const deptFilter: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n        const charterFilter: FilterValueGenerateEndMonth[] = [];\r\n        const costTypeFilter: FilterValueGenerateEndMonth[] = [];\r\n        const associatedClientFilter: FilterValueGenerateEndMonth[] = [];\r\n        this.selectedFilters();\r\n        this.originalOverviewGridRows = this.generateEndOfMonthTabGroupComponent.overviewTabComponent.originalOverviewGridRows;\r\n        this.originalOverviewGridRows.filter((x) => {\r\n            const deptCode = this.selectedDepartments.find((y) => y.desc === x.departmentCode);\r\n            if (deptCode) {\r\n                if (x.departmentCode === deptCode.desc) {\r\n                    deptFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.charterDropdownComponent.formCtrl.reset();\r\n        this.costTypeDropdownComponent.formCtrl.reset();\r\n        this.associatedClientDropdownComponent.formCtrl.reset();\r\n        let count = 1;\r\n        deptFilter.forEach((x) => {\r\n            if (x.charterCode) {\r\n                const charter = new FilterValueGenerateEndMonth();\r\n                charter.desc = x.charterCode;\r\n                charter.value = count;\r\n                charterFilter.push(charter);\r\n            }\r\n            if (x.costType) {\r\n                const cost = new FilterValueGenerateEndMonth();\r\n                cost.desc = x.costType;\r\n                cost.value = count;\r\n                costTypeFilter.push(cost);\r\n            }\r\n            if (x.associatedClient) {\r\n                const client = new FilterValueGenerateEndMonth();\r\n                client.desc = x.associatedClient;\r\n                client.value = count;\r\n                associatedClientFilter.push(client);\r\n            }\r\n            count = count + 1;\r\n        });\r\n        this.charterDropdownComponent.objects = this.getDistinctString(charterFilter);\r\n        this.costTypeDropdownComponent.objects = this.getDistinctString(costTypeFilter);\r\n        this.associatedClientDropdownComponent.objects = this.getDistinctString(associatedClientFilter);\r\n        if (this.departmentDropdownComponent.allSelected) {\r\n            this.charterDropdownComponent.setSelectedValue(true, this.getDistinctString(charterFilter));\r\n            this.costTypeDropdownComponent.setSelectedValue(true, this.getDistinctString(costTypeFilter));\r\n            this.associatedClientDropdownComponent.setSelectedValue(true, this.getDistinctString(associatedClientFilter));\r\n\r\n        } else {\r\n            this.charterDropdownComponent.setSelectedValue(false, this.getDistinctString(charterFilter));\r\n            this.costTypeDropdownComponent.setSelectedValue(false, this.getDistinctString(costTypeFilter));\r\n            this.associatedClientDropdownComponent.setSelectedValue(false, this.getDistinctString(associatedClientFilter));\r\n        }\r\n\r\n    }\r\n    onCharterSelectionChanges() {\r\n        const charterFilter: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n        const costTypeFilter: FilterValueGenerateEndMonth[] = [];\r\n        const associatedClientFilter: FilterValueGenerateEndMonth[] = [];\r\n        this.selectedFilters();\r\n        this.originalOverviewGridRows = this.generateEndOfMonthTabGroupComponent.overviewTabComponent.originalOverviewGridRows;\r\n        this.originalPostingsGridRows = this.generateEndOfMonthTabGroupComponent.postingsTabComponent.originalPostingsGridRows;\r\n        this.originalOverviewGridRows.filter((x) => {\r\n            const charterCode = this.selectedCharter.find((y) => y.desc === x.charterCode);\r\n            if (charterCode) {\r\n                if (x.charterCode === charterCode.desc) {\r\n                    charterFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n        this.originalPostingsGridRows.filter((x) => {\r\n            const charterCode = this.selectedCharter.find((y) => y.desc === x.charterCode);\r\n            if (charterCode) {\r\n                if (x.charterCode === charterCode.desc) {\r\n                    charterFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n        this.costTypeDropdownComponent.formCtrl.reset();\r\n        this.associatedClientDropdownComponent.formCtrl.reset();\r\n        let count = 1;\r\n        charterFilter.forEach((x) => {\r\n            if (x.costType) {\r\n                const cost = new FilterValueGenerateEndMonth();\r\n                cost.desc = x.costType;\r\n                cost.value = count;\r\n                costTypeFilter.push(cost);\r\n            }\r\n            if (x.associatedClient) {\r\n                const client = new FilterValueGenerateEndMonth();\r\n                client.desc = x.associatedClient;\r\n                client.value = count;\r\n                associatedClientFilter.push(client);\r\n            }\r\n            count = count + 1;\r\n        });\r\n        this.costTypeDropdownComponent.objects = this.getDistinctString(costTypeFilter);\r\n        this.associatedClientDropdownComponent.objects = this.getDistinctString(associatedClientFilter);\r\n        if (this.charterDropdownComponent.allSelected) {\r\n            this.costTypeDropdownComponent.setSelectedValue(true, this.getDistinctString(costTypeFilter));\r\n            this.associatedClientDropdownComponent.setSelectedValue(true, this.getDistinctString(associatedClientFilter));\r\n\r\n        } else {\r\n            this.costTypeDropdownComponent.setSelectedValue(false, this.getDistinctString(costTypeFilter));\r\n            this.associatedClientDropdownComponent.setSelectedValue(false, this.getDistinctString(associatedClientFilter));\r\n        }\r\n    }\r\n\r\n    onCostTypeSelectionChanges() {\r\n        const costTypeFilter: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n        const associatedClientFilter: FilterValueGenerateEndMonth[] = [];\r\n        this.selectedFilters();\r\n        this.originalOverviewGridRows = this.generateEndOfMonthTabGroupComponent.overviewTabComponent.originalOverviewGridRows;\r\n        this.originalPostingsGridRows = this.generateEndOfMonthTabGroupComponent.postingsTabComponent.originalPostingsGridRows;\r\n        this.originalOverviewGridRows.filter((x) => {\r\n            const costTypeCode = this.selectedCostType.find((y) => y.desc === x.costType);\r\n            if (costTypeCode) {\r\n                if (x.costType === costTypeCode.desc) {\r\n                    costTypeFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n        this.originalPostingsGridRows.filter((x) => {\r\n            const costTypeCode = this.selectedCostType.find((y) => y.desc === x.costType);\r\n            if (costTypeCode) {\r\n                if (x.costType === costTypeCode.desc) {\r\n                    costTypeFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.associatedClientDropdownComponent.formCtrl.reset();\r\n        let count = 1;\r\n        costTypeFilter.forEach((x) => {\r\n            if (x.associatedClient) {\r\n                const client = new FilterValueGenerateEndMonth();\r\n                client.desc = x.associatedClient;\r\n                client.value = count;\r\n                associatedClientFilter.push(client);\r\n            }\r\n            count = count + 1;\r\n        });\r\n        this.associatedClientDropdownComponent.objects = this.getDistinctString(associatedClientFilter);\r\n        if (this.costTypeDropdownComponent.allSelected) {\r\n            this.associatedClientDropdownComponent.setSelectedValue(true, this.getDistinctString(associatedClientFilter));\r\n\r\n        } else {\r\n            this.associatedClientDropdownComponent.setSelectedValue(false, this.getDistinctString(associatedClientFilter));\r\n        }\r\n\r\n    }\r\n\r\n    onMappingErrorChange(value: boolean): void {\r\n        this.isMappingError = value;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div *ngIf=\\\"showErrorBanners && !isCurrentDataBase\\\">\\r\\n        <div *ngIf=\\\"clientAccountMappingErrorMessages.length > 0\\\">\\r\\n            <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                <div class=\\\"warning-circle-icon\\\">\\r\\n                    <mat-icon>warning_outline</mat-icon>\\r\\n                </div>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h4 class=\\\"no-margin\\\">Mapping Error for C2C code(s)</h4>\\r\\n                    </mat-card-title>\\r\\n\\r\\n                    <mat-card-subtitle>\\r\\n                        This document cannot be posted due to missing C2C(s) for\\r\\n                        {{clientAccountMappingErrorMessages}}. Please contact the accountant.\\r\\n                    </mat-card-subtitle>\\r\\n                    <button class=\\\"remove-button\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                    </button>\\r\\n                </mat-card-header>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n        <div *ngIf=\\\"costTypeMappingErrorMessages.length > 0\\\">\\r\\n            <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                <div class=\\\"warning-circle-icon\\\">\\r\\n                    <mat-icon>warning_outline</mat-icon>\\r\\n                </div>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h4 class=\\\"no-margin\\\">Mapping Error for Cost Type code(s)</h4>\\r\\n                    </mat-card-title>\\r\\n\\r\\n                    <mat-card-subtitle>\\r\\n                        This document cannot be posted due to missing cost type code(s) for\\r\\n                        {{costTypeMappingErrorMessages}}. Please contact the accountant.\\r\\n                    </mat-card-subtitle>\\r\\n                    <button class=\\\"remove-button\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                    </button>\\r\\n                </mat-card-header>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n        <div *ngIf=\\\"departmentMappingErrorMessages.length > 0\\\">\\r\\n            <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                <div class=\\\"warning-circle-icon\\\">\\r\\n                    <mat-icon>warning_outline</mat-icon>\\r\\n                </div>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h4 class=\\\"no-margin\\\">Mapping Error for Department code(s)</h4>\\r\\n                    </mat-card-title>\\r\\n\\r\\n                    <mat-card-subtitle>\\r\\n                        This document cannot be posted due to department code(s) for\\r\\n                        {{departmentMappingErrorMessages}}. Please contact the accountant.\\r\\n                    </mat-card-subtitle>\\r\\n                    <button class=\\\"remove-button\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                    </button>\\r\\n                </mat-card-header>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n        <div *ngIf=\\\"nominalAccountMappingErrorMessages.length > 0\\\">\\r\\n            <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                <div class=\\\"warning-circle-icon\\\">\\r\\n                    <mat-icon>warning_outline</mat-icon>\\r\\n                </div>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h4 class=\\\"no-margin\\\">Mapping Error for Nominal Account code(s)</h4>\\r\\n                    </mat-card-title>\\r\\n\\r\\n                    <mat-card-subtitle>\\r\\n                        This document cannot be posted due to missing nominal account(s) for\\r\\n                        {{nominalAccountMappingErrorMessages}}.Please contact the accountant.\\r\\n                    </mat-card-subtitle>\\r\\n                    <button class=\\\"remove-button\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                    </button>\\r\\n                </mat-card-header>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div>\\r\\n    <div [ngClass]=\\\"{'hidden-during-loading':isOverviewEnable()}\\\">\\r\\n        <mat-tab-group [selectedIndex]=\\\"tabIndex\\\"\\r\\n                       (selectedIndexChange)=onSelectedIndexChanged($event)>\\r\\n            <mat-tab label=\\\"Overview\\\"></mat-tab>\\r\\n            <mat-tab label=\\\"Details\\\"></mat-tab>\\r\\n            <mat-tab label=\\\"Postings\\\"></mat-tab>\\r\\n        </mat-tab-group>\\r\\n\\r\\n        <div class=\\\"content-tab\\\">\\r\\n            <mat-tab-group [selectedIndex]=\\\"tabIndex\\\">\\r\\n                <mat-tab>\\r\\n                    <atlas-overview-tab (filteredGrid)=\\\"filteredGrid($event)\\\"\\r\\n                                        (disableGeneratePosting)=\\\"disableGeneratePosting($event)\\\"\\r\\n                                        (applyButtonClicked)=\\\"applyButtonClicked()\\\"\\r\\n                                        (mappingError)=\\\"generateMappingErrorForMonthEnd($event)\\\"\\r\\n                                        #overviewTabComponent></atlas-overview-tab>\\r\\n                </mat-tab>\\r\\n                <mat-tab>\\r\\n                    <atlas-details-tab #detailsTabComponent\\r\\n                                       (mappingError)=\\\"generateMappingErrorForMonthEnd($event)\\\"\\r\\n                                       (applyButtonClicked)=\\\"applyButtonClicked()\\\"></atlas-details-tab>\\r\\n                </mat-tab>\\r\\n                <mat-tab>\\r\\n                    <atlas-postings-tab #postingsTabComponent\\r\\n                                        (mappingError)=\\\"generateMappingErrorForMonthEnd($event)\\\"\\r\\n                                        (applyButtonClicked)=\\\"applyButtonClicked()\\\"></atlas-postings-tab>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div [ngClass]=\\\"{'hidden-during-loading':!isOverviewEnable()}\\\">\\r\\n        <mat-tab-group [selectedIndex]=\\\"tabIndex\\\"\\r\\n                       (selectedIndexChange)=onSelectedIndexChanged($event)>\\r\\n\\r\\n            <mat-tab label=\\\"Details\\\"></mat-tab>\\r\\n            <mat-tab label=\\\"Postings\\\"></mat-tab>\\r\\n        </mat-tab-group>\\r\\n        <div class=\\\"content-tab\\\">\\r\\n            <mat-tab-group [selectedIndex]=\\\"tabIndex\\\">\\r\\n\\r\\n                <mat-tab>\\r\\n                    <atlas-details-tab #unrealizedDetailsTabComponent\\r\\n                                       (filteredGrid)=\\\"filteredGrid($event)\\\"\\r\\n                                       (mappingError)=\\\"generateMappingErrorForMonthEnd($event)\\\"\\r\\n                                       (applyButtonClicked)=\\\"applyButtonClicked()\\\"></atlas-details-tab>\\r\\n                </mat-tab>\\r\\n                <mat-tab>\\r\\n                    <atlas-postings-tab #unrealizedPostingsTabComponent\\r\\n                                        (mappingError)=\\\"generateMappingErrorForMonthEnd($event)\\\"\\r\\n                                        (applyButtonClicked)=\\\"applyButtonClicked()\\\"></atlas-postings-tab>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"mat-card.warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n  mat-card.warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n  mat-card.warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n  mat-card.warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n  button.remove-button.mat-button {\\n  position: absolute;\\n  right: 10px;\\n  bottom: 15px; }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FilterGem } from '../../../../../../shared/entities/filter-gem.entity';\r\nimport { ReportType } from '../../../../../../shared/enums/report-type.enum';\r\nimport { OverviewGenerateEndOfMonthDisplayView } from '../../../../../../shared/models/overview-generate-end-of-month-display-view';\r\nimport { DetailsTabComponent } from '../tabs/details-tab/details-tab.component';\r\nimport { OverviewTabComponent } from '../tabs/overview-tab/overview-tab.component';\r\nimport { PostingsTabComponent } from '../tabs/postings-tab/postings-tab.component';\r\nimport { TradeCostMonthEndMappingErrors } from '../../../../../../shared/entities/tradecost-monthend-mappingerrors-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-generate-end-of-month-tab-group',\r\n    templateUrl: './generate-end-of-month-tab-group.component.html',\r\n    styleUrls: ['./generate-end-of-month-tab-group.component.scss'],\r\n})\r\nexport class GenerateEndOfMonthTabGroupComponent implements OnInit {\r\n    @ViewChild('overviewTabComponent') overviewTabComponent: OverviewTabComponent;\r\n    @ViewChild('detailsTabComponent') detailsTabComponent: DetailsTabComponent;\r\n    @ViewChild('postingsTabComponent') postingsTabComponent: PostingsTabComponent;\r\n    @ViewChild('unrealizedDetailsTabComponent') unrealizedDetailsTabComponent: DetailsTabComponent;\r\n    @ViewChild('unrealizedPostingsTabComponent') unrealizedPostingsTabComponent: PostingsTabComponent;\r\n    @Output() readonly filtered = new EventEmitter<FilterGem>();\r\n    @Output() readonly stopPosting = new EventEmitter<boolean>();\r\n    @Output() readonly applyButton = new EventEmitter();\r\n    @Output() readonly tabIndexNumber = new EventEmitter();\r\n    @Output() readonly mappingErrorChange = new EventEmitter<boolean>();\r\n    isFilterApplied: boolean = false;\r\n    tabIndex: number = 0;\r\n    isCurrentDataBase = false;\r\n    company: string;\r\n    reportType: number;\r\n    showErrorBanners: boolean = false;\r\n    costTypeMappingErrorMessages: string[] = [];\r\n    departmentMappingErrorMessages: string[] = [];\r\n    nominalAccountMappingErrorMessages: string[] = [];\r\n    clientAccountMappingErrorMessages: string[] = [];\r\n\r\n    constructor(private route: ActivatedRoute) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        if (this.reportType === ReportType.Realized) {\r\n            this.onSelectedButtonChanged(this.tabIndex);\r\n        }\r\n        else {\r\n            this.onSelectedButtonChanged(this.tabIndex + 1);\r\n        }\r\n    }\r\n\r\n    isOverviewEnable() {\r\n        return ((this.reportType === ReportType.Realized) ? false : true);\r\n    }\r\n\r\n    filteredGrid(filter: FilterGem) {\r\n        this.filtered.emit(filter);\r\n    }\r\n\r\n    disableGeneratePosting(generateMonthPosting: boolean) {\r\n        this.stopPosting.emit(generateMonthPosting);\r\n    }\r\n\r\n    applyButtonClicked() {\r\n        this.applyButton.emit();\r\n    }\r\n\r\n    onSelectedIndexChanged(value: number) {\r\n        this.tabIndex = value;\r\n        this.tabIndexNumber.emit(this.tabIndex);\r\n        if (this.reportType === ReportType.Realized) {\r\n            this.onSelectedButtonChanged(this.tabIndex);\r\n        }\r\n        else {\r\n            this.onSelectedButtonChanged(this.tabIndex + 1);\r\n        }\r\n    }\r\n\r\n    onSelectedButtonChanged(tabIndex: number) {\r\n        switch (tabIndex) {\r\n            case 0:\r\n                this.overviewTabComponent.getTradeCostListOverview(null, this.isFilterApplied);\r\n                break;\r\n            case 1:\r\n                if (this.reportType === ReportType.Realized) {\r\n                    this.detailsTabComponent.getTradeCostListDetails(null, this.isFilterApplied);\r\n                }\r\n                else if (this.reportType === ReportType.UnRealized) {\r\n                    this.unrealizedDetailsTabComponent.getTradeCostListDetails(null, this.isFilterApplied);\r\n                }\r\n                break;\r\n            case 2:\r\n                if (this.reportType === ReportType.Realized) {\r\n                    this.postingsTabComponent.getTradeCostListPostings(null, this.isFilterApplied);\r\n                }\r\n                else if (this.reportType === ReportType.UnRealized) {\r\n                    this.unrealizedPostingsTabComponent.getTradeCostListPostings(null, this.isFilterApplied);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    getFilteredData(tabIndex: number, filteredGridRows?: OverviewGenerateEndOfMonthDisplayView[]) {\r\n        switch (tabIndex) {\r\n            case 0:\r\n                this.overviewTabComponent.getTradeCostListOverview(filteredGridRows, this.isFilterApplied);\r\n                break;\r\n            case 1:\r\n                if (this.reportType === ReportType.Realized) {\r\n                    this.detailsTabComponent.getTradeCostListDetails(filteredGridRows, this.isFilterApplied);\r\n                }\r\n                else if (this.reportType === ReportType.UnRealized) {\r\n                    this.unrealizedDetailsTabComponent.getTradeCostListDetails(filteredGridRows, this.isFilterApplied);\r\n                }\r\n                break;\r\n            case 2:\r\n                if (this.reportType === ReportType.Realized) {\r\n                    this.postingsTabComponent.getTradeCostListPostings(filteredGridRows, this.isFilterApplied);\r\n                }\r\n                else if (this.reportType === ReportType.UnRealized) {\r\n                    this.unrealizedPostingsTabComponent.getTradeCostListPostings(filteredGridRows, this.isFilterApplied);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    generateMappingErrorForMonthEnd(tradeCostMonthEndMappingErrors: TradeCostMonthEndMappingErrors[]): void {\r\n        var mappingErrors = tradeCostMonthEndMappingErrors.filter((t) => t.isMappingError);\r\n        this.clientAccountMappingErrorMessages = [];\r\n        this.departmentMappingErrorMessages = [];\r\n        this.costTypeMappingErrorMessages = [];\r\n        this.nominalAccountMappingErrorMessages = [];\r\n        if (mappingErrors && mappingErrors.length > 0) {\r\n            var errorMessage: string = '';\r\n            mappingErrors.forEach(e => {\r\n                if (e.c2CCodeIsInMappingError) {\r\n                    this.clientAccountMappingErrorMessages.push(e.accountingDocumentLineClientAccount);\r\n                }\r\n                if (e.costAlternativeCodeIsInMappingError) {\r\n                    this.costTypeMappingErrorMessages.push(e.accountingDocumentLineCostTypeCode);\r\n                }\r\n                if (e.departmentAlternativeCodeIsInMappingError) {\r\n                    this.departmentMappingErrorMessages.push(e.accountingDocumentLineDepartmentCode);\r\n                }\r\n                if (e.nominalAlternativeAccountIsInMappingError) {\r\n                    this.nominalAccountMappingErrorMessages.push(e.accountingDocumentLineAccountReference);\r\n                }\r\n            });\r\n\r\n            if (this.clientAccountMappingErrorMessages.length > 0) {\r\n                this.clientAccountMappingErrorMessages = this.clientAccountMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n            }\r\n            if (this.costTypeMappingErrorMessages.length > 0) {\r\n                this.costTypeMappingErrorMessages = this.costTypeMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n            }\r\n            if (this.departmentMappingErrorMessages.length > 0) {\r\n                this.departmentMappingErrorMessages = this.departmentMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n            }\r\n            if (this.nominalAccountMappingErrorMessages.length > 0) {\r\n                this.nominalAccountMappingErrorMessages = this.nominalAccountMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n            }\r\n\r\n            if (this.clientAccountMappingErrorMessages.length > 0\r\n                || this.costTypeMappingErrorMessages.length > 0\r\n                || this.departmentMappingErrorMessages.length > 0\r\n                || this.nominalAccountMappingErrorMessages.length > 0) {\r\n                this.showErrorBanners = true;\r\n            }\r\n            else {\r\n                this.showErrorBanners = false;\r\n            }\r\n        }\r\n        else {\r\n            this.showErrorBanners = false;\r\n        }\r\n        \r\n        this.mappingErrorChange.emit(this.showErrorBanners);\r\n    }\r\n\r\n    onWarningRemoveButtonClicked(params) {\r\n        if (params) {\r\n            params.currentTarget.parentElement.parentElement.remove();\r\n        }\r\n    }\r\n\r\n    updateCurrentDatabaseBitValue(value: boolean): void {\r\n        this.isCurrentDataBase = value;\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-form-field>\\r\\n        <input #input\\r\\n               matInput\\r\\n               [matAutocomplete]=\\\"autocomplete\\\"\\r\\n               [placeholder]=\\\"'Settlement Ccy'\\\"\\r\\n               formControlName=\\\"formCtrl\\\"\\r\\n               (focus)=\\\"clearValueEvent()\\\"\\r\\n               (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n               (click)=\\\"openAutocompletePanel()\\\">\\r\\n        <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                          (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n            <mat-option *ngIf=\\\"allFilterOption.value.toString().toUpperCase().startsWith(input.value)\\\"\\r\\n                        [value]=\\\"allFilterOption\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                    All\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n            <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                        [value]=\\\"object\\\">\\r\\n                <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                    <span *ngIf=\\\"displayCode\\\">{{ object[valueProperty] }}</span>\\r\\n                    <span *ngIf=\\\"object[valueProperty] !== null && displayCode\\\"> | </span>\\r\\n                    <span>{{ object[displayProperty] }}</span>\\r\\n                </mat-checkbox>\\r\\n            </mat-option>\\r\\n        </mat-autocomplete>\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-settlement-currency-dropdown',\r\n    templateUrl: './settlement-currency-dropdown.component.html',\r\n    styleUrls: ['./settlement-currency-dropdown.component.scss'],\r\n})\r\nexport class SettlementCurrencyDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n\r\n    @Input() objects: FilterValueGenerateEndMonth[] = [];\r\n    @Input() allSelected = true;\r\n    @Output() readonly settlementCurrencySelectionChanged = new EventEmitter();\r\n    formCtrl = new AtlasFormControl('formControl');\r\n    valueProperty: string = 'value';\r\n    displayProperty: string = 'desc';\r\n    allFilterOption: FilterValueGenerateEndMonth = {\r\n        value: 0,\r\n        desc: 'All',\r\n    };\r\n    valueIds: number[] = [];\r\n    constructor() { super(); }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n        this.initSettlementCurrency(true);\r\n    }\r\n\r\n    initSettlementCurrency(isLoad = false) {\r\n        if (isLoad) {\r\n            this.selectedValues = this.objects;\r\n        }\r\n        this.setData();\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allFilterOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n        this.settlementCurrencySelectionChanged.emit();\r\n    }\r\n\r\n    setValue() {\r\n        this.valueIds = [];\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allFilterOption.desc);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n        for (const val of this.selectedValues) {\r\n            this.valueIds.push(val['value']);\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n\r\n    setSelectedValue(allSelected: boolean, settlementCurrency: FilterValueGenerateEndMonth[]) {\r\n        if (settlementCurrency) {\r\n            this.allSelected = allSelected;\r\n            this.selectedValues = settlementCurrency;\r\n            this.setValue();\r\n            this.filteredObjects = this.selectedValues;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         fxLayoutWrap\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <mat-card-title>End of Month Details</mat-card-title>\\r\\n        <mat-chip-list class=\\\"chip-list\\\">\\r\\n            <mat-chip selected\\r\\n                      disabled>\\r\\n                {{dataVersionMonth}}\\r\\n            </mat-chip>\\r\\n            <mat-chip selected\\r\\n                      disabled>\\r\\n                {{reportTypeDescription}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end start\\\">\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"detailsGridOptions && detailsGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"detailsGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridId\\\"\\r\\n                                            [sharingEnabled]=\\\"false\\\"\\r\\n                                            [savingEnabled]=\\\"false\\\"\\r\\n                                            [hasColumnHandling]=\\\"false\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <atlas-grid-enlargement *ngIf=\\\"detailsGridOptions && detailsGridOptions.columnDefs\\\"\\r\\n                                    [gridOptions]=\\\"detailsGridOptions\\\"\\r\\n                                    [userPreferencesParameters]=\\\"gridPreferencesParameters\\\"\\r\\n                                    #gridZoom>\\r\\n            </atlas-grid-enlargement>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"detailsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"detailsGridColumns\\\"\\r\\n                             [rowData]=\\\"detailsGridRows\\\"\\r\\n                             [gridOptions]=\\\"detailsGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (firstDataRendered)=\\\"autosizeColumns()\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             [excelStyles]=\\\"excelStyles\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { FilterGem } from '../../../../../../../shared/entities/filter-gem.entity';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\nimport { TradeCostMonthEndMappingErrors } from '../../../../../../../shared/entities/tradecost-monthend-mappingerrors-entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { GenerateMonthEndEnum } from '../../../../../../../shared/enums/generate-month-end-type.enum';\r\nimport { ReportType } from '../../../../../../../shared/enums/report-type.enum';\r\nimport { OverviewGenerateEndOfMonthDisplayView } from '../../../../../../../shared/models/overview-generate-end-of-month-display-view';\r\nimport { FormatDatePipe } from '../../../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-details-tab',\r\n    templateUrl: './details-tab.component.html',\r\n    styleUrls: ['./details-tab.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class DetailsTabComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Input() filteredDetailsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    @Output() readonly applyButtonClicked = new EventEmitter();\r\n    detailsGridOptions: agGrid.GridOptions = {};\r\n    @Output() readonly filteredGrid = new EventEmitter<FilterGem>();\r\n    @Output() readonly mappingError = new EventEmitter<TradeCostMonthEndMappingErrors[]>();\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    detailsGridColumns: agGrid.ColDef[];\r\n    detailsGridRows: OverviewGenerateEndOfMonthDisplayView[] = [];\r\n    originalDetailsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    company: string;\r\n    isLoading: boolean;\r\n    length: number = 0;\r\n    userActiveDirectoryName: string;\r\n    excelStyles: any;\r\n    dataVersionID: number;\r\n    dataVersionMonth: string;\r\n    quantityWeightCode: string;\r\n    reportTypeDescription: string;\r\n    reportType: number;\r\n    model: FilterGem;\r\n\r\n    gridId = 'endOfMonthDetails';\r\n    gridPreferencesParameters: UserGridPreferencesParameters;\r\n\r\n    get reportTypeEnum() { return ReportType; }\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        private tradingService: TradingService,\r\n        private formatDate: FormatDatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.reportType !== ReportType.MTMOpenFx) {\r\n            this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n            const companyDetails = this.companyManager.getCurrentCompany();\r\n            this.quantityWeightCode = '(in ' + companyDetails.weightCode + ')';\r\n            this.company = this.companyManager.getCurrentCompanyId();\r\n            this.initializeGridColumns();\r\n            this.initDetailsGridRows();\r\n            this.initializeSortModel();\r\n\r\n            this.gridPreferencesParameters = {\r\n                company: this.company,\r\n                gridId: this.gridId,\r\n                gridOptions: null,\r\n                savingEnabled: false,\r\n                sharingEnabled: false,\r\n                showExport: true,\r\n                hasColumnHandling: false,\r\n            };\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.detailsGridOptions.columnDefs = this.detailsGridColumns;\r\n        this.gridApi = this.detailsGridOptions.api;\r\n        this.gridColumnApi = this.detailsGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.detailsGridOptions);\r\n\r\n    }\r\n\r\n    autosizeColumns() {\r\n        if (this.detailsGridOptions) {\r\n            this.gridService.sizeColumns(this.detailsGridOptions);\r\n        }\r\n    }\r\n\r\n    initializeSortModel() {\r\n        const defaultSortModel = [\r\n            {\r\n                colId: 'currencyCode',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                colId: 'departmentCode',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                colId: 'charterCode',\r\n                sort: 'asc',\r\n            },\r\n            {\r\n                colId: 'costType',\r\n                sort: 'asc',\r\n            },\r\n        ];\r\n\r\n        this.gridApi.setSortModel(defaultSortModel);\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.detailsGridColumns = [\r\n            {\r\n                headerName: 'Accrual Number',\r\n                field: 'accrualNumber',\r\n                colId: 'accrualNumber',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Contract',\r\n                field: 'contractNumber',\r\n                colId: 'contractNumber',\r\n                hide: false,\r\n                valueFormatter: this.contractFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: ' Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity ' + this.quantityWeightCode,\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n                valueFormatter: this.quantityFormatter.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n                valueFormatter: this.currencyFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Full Value',\r\n                field: 'fullValue',\r\n                colId: 'fullValue',\r\n                hide: (this.reportType === 1) ? false : true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: 'Invoiced Value',\r\n                field: 'invoicedAmount',\r\n                colId: 'invoicedAmount',\r\n                hide: false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: '% Actualized',\r\n                field: 'percentageActualized',\r\n                colId: 'percentageActualized',\r\n                hide: (this.reportType === 1) ? false : true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Accrued Amount',\r\n                field: 'accruedAmount',\r\n                colId: 'accruedAmount',\r\n                hide: (this.reportType === 1) ? false : true,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: 'Document Ref',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: (this.reportType !== 1) ? false : true,\r\n                valueFormatter: this.charterFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Document Date',\r\n                field: 'documentDate',\r\n                colId: 'documentDate',\r\n                hide: (this.reportType !== 1) ? false : true,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                cellClass: 'dateFormat',\r\n                valueGetter: (params) => {\r\n                    const dateFormat: FormatDatePipe = this.formatDate;\r\n                    const val = dateFormat.transformdate(params.data.documentDate);\r\n\r\n                    if (val) {\r\n                        if (val.indexOf('/') < 0) {\r\n                            return val;\r\n                        } else {\r\n                            const split = val.split('/');\r\n                            return split[2] + '-' + split[1] + '-' + split[0];\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Associated Client',\r\n                field: 'associatedClient',\r\n                colId: 'associatedClient',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Inhouse/External',\r\n                field: 'inhouseOrExternal',\r\n                colId: 'inhouseOrExternal',\r\n                hide: (this.reportType !== 1) ? false : true,\r\n                valueFormatter: this.charterFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charterCode',\r\n                colId: 'charterCode',\r\n                hide: false,\r\n                valueFormatter: this.charterFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'BL Date',\r\n                field: 'blDate',\r\n                colId: 'blDate',\r\n                hide: (this.reportType === 1) ? false : true,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                cellClass: 'dateFormat',\r\n                valueGetter: (params) => {\r\n                    const dateFormat: FormatDatePipe = this.formatDate;\r\n                    const val = dateFormat.transformdate(params.data.blDate);\r\n\r\n                    if (val) {\r\n                        if (val.indexOf('/') < 0) {\r\n                            return val;\r\n                        } else {\r\n                            const split = val.split('/');\r\n                            return split[2] + '-' + split[1] + '-' + split[0];\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    initDetailsGridRows() {\r\n        this.detailsGridRows = [];\r\n    }\r\n\r\n    getTradeCostListDetails(filteredDetailsGridRows?: OverviewGenerateEndOfMonthDisplayView[], isFilteredApplied: boolean = false) {\r\n        if (filteredDetailsGridRows && isFilteredApplied === true) {\r\n            this.detailsGridRows = filteredDetailsGridRows;\r\n        } else {\r\n            this.tradingService.getTradeCostList(this.reportType, GenerateMonthEndEnum.Details, this.dataVersionID)\r\n                .subscribe((data) => {\r\n                    if (data && data.value.length > 0) {\r\n                        const mappingErrorDetails = data.value[0].tradeCostMonthEndMappingErrors;\r\n                        this.mappingError.emit(mappingErrorDetails);\r\n                    }\r\n                    this.detailsGridRows = data.value.map((CostTrade) => {\r\n                        return new OverviewGenerateEndOfMonthDisplayView(CostTrade, this.reportType);\r\n                    });\r\n                    if (this.reportType === 2) {\r\n\r\n                        this.model = new FilterGem();\r\n                        this.model.departmentCode = [];\r\n                        this.model.charterCode = [];\r\n                        this.model.costType = [];\r\n                        this.model.associatedClient = [];\r\n                        let count = 1;\r\n                        this.detailsGridRows.forEach((x) => {\r\n                            if (x.departmentCode) {\r\n                                const dept = new FilterValueGenerateEndMonth();\r\n                                dept.desc = x.departmentCode;\r\n                                dept.value = count;\r\n                                this.model.departmentCode.push(dept);\r\n                            }\r\n                            if (x.charterCode) {\r\n                                const charter = new FilterValueGenerateEndMonth();\r\n                                charter.desc = x.charterCode;\r\n                                charter.value = count;\r\n                                this.model.charterCode.push(charter);\r\n                            }\r\n                            if (x.costType) {\r\n                                const cost = new FilterValueGenerateEndMonth();\r\n                                cost.desc = x.costType;\r\n                                cost.value = count;\r\n                                this.model.costType.push(cost);\r\n                            }\r\n                            if (x.associatedClient) {\r\n                                const client = new FilterValueGenerateEndMonth();\r\n                                client.desc = x.associatedClient;\r\n                                client.value = count;\r\n                                this.model.associatedClient.push(client);\r\n                            }\r\n                            count = count + 1;\r\n                        });\r\n                        this.detailsGridRows.forEach((x) => {\r\n                            if (x.postingCostType) {\r\n                                const cost = new FilterValueGenerateEndMonth();\r\n                                cost.desc = x.postingCostType;\r\n                                cost.value = count;\r\n                                this.model.costType.push(cost);\r\n                            }\r\n                            count = count + 1;\r\n                        });\r\n                        this.filteredGrid.emit(this.model);\r\n                    }\r\n                    this.isLoading = false;\r\n                    this.originalDetailsGridRows = this.detailsGridRows;\r\n                    if (isFilteredApplied) {\r\n                        this.applyButtonClicked.emit();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    stringFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 10); }\r\n    }\r\n\r\n    currencyFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 3); }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 2);\r\n        }\r\n    }\r\n\r\n    quantityFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 3);\r\n        }\r\n    }\r\n\r\n    charterFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 15); }\r\n    }\r\n\r\n    dateValueFormatter(param): string {\r\n        if (param.value) { return this.formatDate.transform(param.value); }\r\n    }\r\n\r\n    contractFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 12); }\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = 'EndofMonthDetails';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'EndofMonthDetails';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"20px\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h2 class=\\\"no-margin\\\">End of Month Details</h2>\\r\\n        <mat-chip-list class=\\\"chip-list\\\">\\r\\n            <mat-chip selected\\r\\n                      disabled>\\r\\n                {{dataVersionMonth}}\\r\\n            </mat-chip>\\r\\n            <mat-chip selected\\r\\n                      disabled>{{reportTypeDescription}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n        <span class=\\\"fill-space\\\"></span><button mat-icon-button\\r\\n                [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n        </button>\\r\\n        <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"fxDealDetailsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"fxDealDetailsGridColumns\\\"\\r\\n                             [rowData]=\\\"fxDealDetailsGridRows\\\"\\r\\n                             [gridOptions]=\\\"fxDealDetailsGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             [excelStyles]=\\\"excelStyles\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { BaseFormComponent } from '../../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { FilterGem } from '../../../../../../../../shared/entities/filter-gem.entity';\r\nimport { FxDealGenerateEndOfMonthDisplayView } from '../../../../../../../../shared/models/fx-deal-generate-end-of-month-display-view';\r\nimport { FormatDatePipe } from '../../../../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../../../../shared/services/http-services/trading.service';\r\nimport { UiService } from '../../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-detail-tab-fx-deal-month-end',\r\n    templateUrl: './fx-deal-month-end.component.html',\r\n    styleUrls: ['./fx-deal-month-end.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class DetailTabFxDealMonthEndComponent extends BaseFormComponent implements OnInit {\r\n    @Input() filteredDetailsGridRows: FxDealGenerateEndOfMonthDisplayView[];\r\n    @Output() readonly applyButtonClicked = new EventEmitter();\r\n    @Output() readonly filteredGrid = new EventEmitter<FilterGem>();\r\n    fxDealDetailsGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    fxDealDetailsGridColumns: agGrid.ColDef[];\r\n    fxDealDetailsGridRows: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n    originalDetailsGridRows: FxDealGenerateEndOfMonthDisplayView[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    company: string;\r\n    isLoading: boolean;\r\n    length: number = 0;\r\n    userActiveDirectoryName: string;\r\n    excelStyles: any;\r\n    dataVersionId: number;\r\n    dataVersionMonth: string;\r\n    quantityWeightCode: string;\r\n    reportTypeDescription: string;\r\n    reportType: number;\r\n    model: FilterGem;\r\n    exportFileName: string = 'EndOfMonthDetails';\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        private formatDate: FormatDatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n            {\r\n                id: 'leftAlignment',\r\n                alignment: {\r\n                    horizontal: 'Left', vertical: 'Bottom',\r\n                },\r\n            },\r\n            {\r\n                id: \"twoDecimalPlaces\",\r\n                numberFormat: { format: \"#,##0.00\" },\r\n\r\n            },\r\n            {\r\n                id: \"fourDecimalPlaces\",\r\n                numberFormat: { format: \"#,##0.0000\" },\r\n            }\r\n        ];\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        const companyDetails = this.companyManager.getCurrentCompany();\r\n        this.quantityWeightCode = '(in ' + companyDetails.weightCode + ')';\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.fxDealDetailsGridColumns;\r\n        this.fxDealDetailsGridOptions = params;\r\n        this.gridApi = this.fxDealDetailsGridOptions.api;\r\n        this.gridColumnApi = this.fxDealDetailsGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.fxDealDetailsGridOptions);\r\n\r\n        window.onresize = () => {\r\n            this.gridService.sizeColumns(this.fxDealDetailsGridOptions);\r\n        };\r\n    }\r\n\r\n    prepareData(detailsData) {\r\n        this.fxDealDetailsGridRows = [];\r\n        if (detailsData) {\r\n            detailsData.forEach((row) => {\r\n                this.fxDealDetailsGridRows.push(row);\r\n            });\r\n            this.fxDealDetailsGridOptions.api.setRowData(this.fxDealDetailsGridRows);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.fxDealDetailsGridColumns = [\r\n            {\r\n                headerName: 'Accrual Number',\r\n                field: 'accrualNumber',\r\n                colId: 'accrualNumber',\r\n                cellClass: 'leftAlignment',\r\n\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                cellClass: 'leftAlignment',\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Deal No.',\r\n                field: 'dealNumber',\r\n                colId: 'dealNumber',\r\n                cellClass: 'leftAlignment',\r\n            },\r\n            {\r\n                headerName: ' Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Deal Ccy',\r\n                field: 'dealCurrency',\r\n                colId: 'dealCurrency',\r\n                valueFormatter: this.currencyFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Settlement Ccy',\r\n                field: 'settlementCurrency',\r\n                colId: 'settlementCurrency',\r\n                valueFormatter: this.currencyFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Deal Amount',\r\n                field: 'dealAmount',\r\n                colId: 'dealAmount',\r\n                type: 'numericColumn',\r\n                cellClass: 'twoDecimalPlaces',\r\n                cellStyle: { 'text-align': 'right' },\r\n                valueFormatter: (params) => this.amountFormatter(params),\r\n\r\n            },\r\n            {\r\n                headerName: 'Settlement Amount',\r\n                field: 'settlementAmount',\r\n                colId: 'settlementAmount',\r\n                cellClass: 'twoDecimalPlaces',\r\n                cellStyle: { 'text-align': 'right' },\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Associated Client',\r\n                field: 'associatedClient',\r\n                colId: 'associatedClient',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Maturity Date',\r\n                field: 'maturityDate',\r\n                colId: 'maturityDate',\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                cellClass: ['dateFormat', 'leftAlignment'],\r\n                valueGetter: (params) => {\r\n                    const dateFormat: FormatDatePipe = this.formatDate;\r\n                    const val = dateFormat.transformdate(params.data.maturityDate);\r\n                    if (val) {\r\n                        if (val.indexOf('/') < 0) {\r\n                            return val;\r\n                        } else {\r\n                            const split = val.split('/');\r\n                            return split[2] + '-' + split[1] + '-' + split[0];\r\n                        }\r\n                    }\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: 'Market Ccy RoE Dealt',\r\n                field: 'marketCcyRoeDealt',\r\n                colId: 'marketCcyRoeDealt',\r\n                cellClass: 'fourDecimalPlaces',\r\n                cellStyle: { 'text-align': 'right' },\r\n                valueFormatter: this.roeFormatter.bind(this),\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Market Ccy RoE Settlement',\r\n                field: 'marketCcyRoeSettlement',\r\n                colId: 'marketCcyRoeSettlement',\r\n                cellClass: 'fourDecimalPlaces',\r\n                cellStyle: { 'text-align': 'right' },\r\n                valueFormatter: this.roeFormatter.bind(this),\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Variation Margin',\r\n                field: 'variationMargin',\r\n                colId: 'variationMargin',\r\n                cellClass: 'twoDecimalPlaces',\r\n                cellStyle: { 'text-align': 'right' },\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                type: 'numericColumn',\r\n            },\r\n        ];\r\n    }\r\n\r\n    stringFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 10); }\r\n    }\r\n\r\n    currencyFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 3); }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 2);\r\n        }\r\n    }\r\n\r\n    roeFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 4);\r\n        }\r\n    }\r\n\r\n    dateValueFormatter(param): string {\r\n        if (param.value) { return this.formatDate.transform(param.value); }\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = this.exportFileName;\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = this.exportFileName;\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"column\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between center\\\">\\r\\n                    <atlas-department-dropdown #departmentDropdownComponent\\r\\n                                               (departmentSelectionChanged)=\\\"onDepartmentSelectionChanges()\\\">\\r\\n                    </atlas-department-dropdown>\\r\\n                    <atlas-dealt-currency-dropdown #dealtCurrencyDropdownComponent\\r\\n                                                   (dealtCurrencySelectionChanged)=\\\"onDealNumberSelectionChanges()\\\">\\r\\n                    </atlas-dealt-currency-dropdown>\\r\\n                    <atlas-settlement-currency-dropdown #settlementCurrencyDropdownComponent\\r\\n                                                        (settlementCurrencySelectionChanged)=\\\"onSettlementCurrencySelectionChanges()\\\">\\r\\n                    </atlas-settlement-currency-dropdown>\\r\\n                    <atlas-deal-number-dropdown #dealNumberDropdownComponent>\\r\\n                    </atlas-deal-number-dropdown>\\r\\n                    <button (click)=\\\"onApplyButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        APPLY\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <div>\\r\\n          <div *ngIf=\\\"isMappingError && !isCurrentDatabase\\\">\\r\\n            <div *ngIf=\\\"clientAccountMappingErrorMessages.length > 0\\\">\\r\\n                <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                    <div class=\\\"warning-circle-icon\\\">\\r\\n                        <mat-icon>warning_outline</mat-icon>\\r\\n                    </div>\\r\\n                    <mat-card-header>\\r\\n                        <mat-card-title>\\r\\n                            <h4 class=\\\"no-margin\\\">Mapping Error for C2C code(s)</h4>\\r\\n                        </mat-card-title>\\r\\n    \\r\\n                        <mat-card-subtitle>\\r\\n                            This document cannot be posted due to missing C2C(s) for\\r\\n                            {{clientAccountMappingErrorMessages}}. Please contact the accountant.\\r\\n                        </mat-card-subtitle>\\r\\n                        <button class=\\\"remove-button\\\"\\r\\n                                mat-button\\r\\n                                (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                        </button>\\r\\n                    </mat-card-header>\\r\\n                </mat-card>\\r\\n            </div>\\r\\n    \\r\\n            <div *ngIf=\\\"costTypeMappingErrorMessages.length > 0\\\">\\r\\n                <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                    <div class=\\\"warning-circle-icon\\\">\\r\\n                        <mat-icon>warning_outline</mat-icon>\\r\\n                    </div>\\r\\n                    <mat-card-header>\\r\\n                        <mat-card-title>\\r\\n                            <h4 class=\\\"no-margin\\\">Mapping Error for Cost Type code(s)</h4>\\r\\n                        </mat-card-title>\\r\\n    \\r\\n                        <mat-card-subtitle>\\r\\n                            This document cannot be posted due to missing cost type code(s) for\\r\\n                            {{costTypeMappingErrorMessages}}. Please contact the accountant.\\r\\n                        </mat-card-subtitle>\\r\\n                        <button class=\\\"remove-button\\\"\\r\\n                                mat-button\\r\\n                                (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                        </button>\\r\\n                    </mat-card-header>\\r\\n                </mat-card>\\r\\n            </div>\\r\\n    \\r\\n            <div *ngIf=\\\"departmentMappingErrorMessages.length > 0\\\">\\r\\n                <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                    <div class=\\\"warning-circle-icon\\\">\\r\\n                        <mat-icon>warning_outline</mat-icon>\\r\\n                    </div>\\r\\n                    <mat-card-header>\\r\\n                        <mat-card-title>\\r\\n                            <h4 class=\\\"no-margin\\\">Mapping Error for Department code(s)</h4>\\r\\n                        </mat-card-title>\\r\\n    \\r\\n                        <mat-card-subtitle>\\r\\n                            This document cannot be posted due to department code(s) for\\r\\n                            {{departmentMappingErrorMessages}}. Please contact the accountant.\\r\\n                        </mat-card-subtitle>\\r\\n                        <button class=\\\"remove-button\\\"\\r\\n                                mat-button\\r\\n                                (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                        </button>\\r\\n                    </mat-card-header>\\r\\n                </mat-card>\\r\\n            </div>\\r\\n    \\r\\n            <div *ngIf=\\\"nominalAccountMappingErrorMessages.length > 0\\\">\\r\\n                <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                    <div class=\\\"warning-circle-icon\\\">\\r\\n                        <mat-icon>warning_outline</mat-icon>\\r\\n                    </div>\\r\\n                    <mat-card-header>\\r\\n                        <mat-card-title>\\r\\n                            <h4 class=\\\"no-margin\\\">Mapping Error for Nominal Account code(s)</h4>\\r\\n                        </mat-card-title>\\r\\n    \\r\\n                        <mat-card-subtitle>\\r\\n                            This document cannot be posted due to missing nominal account(s) for\\r\\n                            {{nominalAccountMappingErrorMessages}}.Please contact the accountant.\\r\\n                        </mat-card-subtitle>\\r\\n                        <button class=\\\"remove-button\\\"\\r\\n                                mat-button\\r\\n                                (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                        </button>\\r\\n                    </mat-card-header>\\r\\n                </mat-card>\\r\\n            </div>\\r\\n    \\r\\n        </div>\\r\\n    </div>\\r\\n    <div>\\r\\n        <mat-tab-group [selectedIndex]=\\\"tabIndex\\\"\\r\\n                       (selectedIndexChange)=\\\"onSelectedIndexChanged($event)\\\">\\r\\n\\r\\n            <mat-tab label=\\\"Details\\\"></mat-tab>\\r\\n            <mat-tab label=\\\"Postings\\\"></mat-tab>\\r\\n        </mat-tab-group>\\r\\n        <div class=\\\"content-tab\\\">\\r\\n            <mat-tab-group [selectedIndex]=\\\"tabIndex\\\">\\r\\n\\r\\n                <mat-tab>\\r\\n                    <atlas-detail-tab-fx-deal-month-end #fxDealDetail>\\r\\n                    </atlas-detail-tab-fx-deal-month-end>\\r\\n                </mat-tab>\\r\\n                <mat-tab>\\r\\n                    <atlas-posting-tab-fx-deal-month-end #fxDealPosting>\\r\\n                    </atlas-posting-tab-fx-deal-month-end>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                    mat-button>\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onGeneratePostingsButtonClicked()\\\"\\r\\n                    [disabled]=\\\"disableButton || (isMappingError || isCurrentDatabase)\\\">\\r\\n                GENERATE POSTINGS\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { FilterGem } from '../../../../../../../shared/entities/filter-gem.entity';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\nimport { PermissionLevels } from '../../../../../../../shared/enums/permission-level.enum';\r\nimport { FxDealGenerateEndOfMonthDisplayView } from '../../../../../../../shared/models/fx-deal-generate-end-of-month-display-view';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\nimport { DealNumberDropdownComponent } from '../../deal-number-dropdown/deal-number-dropdown.component';\r\nimport { DealtCurrencyDropdownComponent } from '../../dealt-currency-dropdown/dealt-currency-dropdown.component';\r\nimport { DepartmentDropdownComponent } from '../../department-dropdown/department-dropdown.component';\r\nimport { SettlementCurrencyDropdownComponent } from '../../settlement-currency-dropdown/settlement-currency-dropdown.component';\r\nimport { DetailTabFxDealMonthEndComponent } from '../details-tab/fx-deal-details-month-end/fx-deal-month-end.component';\r\nimport { PostingTabFxDealMonthEndComponent } from '../postings-tab/fx-deal-postings-month-end/fx-deal-month-end.component';\r\nimport { FXDealMonthEndTemporaryAdjustmentListCommand } from '../../../../../../../shared/services/execution/dtos/fxdeal-month-end-temporary-adjustment-list-command';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { TradeCostMonthEndMappingErrors } from '../../../../../../../shared/entities/tradecost-monthend-mappingerrors-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-fx-deal-month-end-summary',\r\n    templateUrl: './fx-deal-month-end-summary.component.html',\r\n    styleUrls: ['./fx-deal-month-end-summary.component.scss'],\r\n})\r\nexport class FxDealMonthEndSummaryComponent implements OnInit {\r\n    @ViewChild('fxDealPosting') fxDealPosting: PostingTabFxDealMonthEndComponent;\r\n    @ViewChild('fxDealDetail') fxDealDetail: DetailTabFxDealMonthEndComponent;\r\n    @ViewChild('departmentDropdownComponent') departmentDropdownComponent: DepartmentDropdownComponent;\r\n    @ViewChild('dealNumberDropdownComponent') dealNumberDropdownComponent: DealNumberDropdownComponent;\r\n    @ViewChild('dealtCurrencyDropdownComponent') dealtCurrencyDropdownComponent: DealtCurrencyDropdownComponent;\r\n    @ViewChild('settlementCurrencyDropdownComponent') settlementCurrencyDropdownComponent: SettlementCurrencyDropdownComponent;\r\n    @Output() readonly tabIndexNumber = new EventEmitter();\r\n    @Output() readonly disableGeneratePosting = new EventEmitter<boolean>();\r\n    company: string;\r\n    PermissionLevels = PermissionLevels;\r\n    buttonEditable: boolean = false;\r\n    buttonDisableForPrevilage: boolean = false;\r\n    disableButton: boolean = false;\r\n    dataVersionId: number;\r\n    dataVersionDate: Date;\r\n    dataVersionMonth: string;\r\n    currentDataBase: string ='Current Database';\r\n    reportType: number;\r\n    reportTypeDescription: string;\r\n    tabIndex: number = 0;\r\n    isFilterApplied: boolean = false;\r\n    isPostingButtonDisable: boolean;\r\n    filterModel: FilterGem;\r\n    generatePosting: boolean = true;\r\n    selectedDepartments: FilterValueGenerateEndMonth[] = [];\r\n    selectedDealNumbers: FilterValueGenerateEndMonth[] = [];\r\n    selectedDealtCurrencies: FilterValueGenerateEndMonth[] = [];\r\n    selectedSettlementCurrencies: FilterValueGenerateEndMonth[] = [];\r\n    monthEndData: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n    private generateMonthEndSubscription: Subscription;\r\n    isCurrentDatabase: boolean = true;\r\n    isMappingError: boolean = false;\r\n    costTypeMappingErrorMessages: string[];\r\n    departmentMappingErrorMessages: string[];\r\n    nominalAccountMappingErrorMessages: string[];\r\n    clientAccountMappingErrorMessages: string[];\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        private executionService: ExecutionService,\r\n        private snackbarService: SnackbarService,\r\n        private authorizationService: AuthorizationService,\r\n        private companyManager: CompanyManagerService,\r\n        private tradingService: TradingService) { }\r\n    generatePostingsPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'GeneratePostings',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'CutOff',\r\n    };\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.buttonDisableForPrevilage = this.checkIfUserHasRequiredPrivileges(this.generatePostingsPrivilege);\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.dataVersionId = Number(params['dataVersionId']);\r\n            this.buttonEditable = (params['isPostingButtonEditable']).toLowerCase() === 'true' ? true : false;\r\n            this.reportTypeDescription = (params['reportTypeDescription']);\r\n            this.dataVersionDate = (params['dataVersionDate']);\r\n            this.dataVersionMonth = (params['dataVersionMonth']);\r\n            this.reportType = Number(params['reportType']);\r\n        });\r\n        this.dataVersionMonth = this.dataVersionMonth ? this.dataVersionMonth : 'Current Database';\r\n        if (this.buttonDisableForPrevilage) {\r\n            this.disableButton = true;\r\n        } else {\r\n            this.disableButton = this.buttonEditable;\r\n        }\r\n        if ((this.dataVersionDate === null\r\n            || this.dataVersionDate === undefined)\r\n            && (this.dataVersionMonth === this.currentDataBase\r\n                || this.dataVersionMonth === null\r\n                || this.dataVersionMonth === undefined)\r\n        ) {\r\n            this.isCurrentDatabase = true;\r\n        }\r\n        else {\r\n            this.isCurrentDatabase = false;\r\n        }\r\n        this.getMonthEndFxDealDetails();\r\n        if (this.fxDealDetail) {\r\n            this.fxDealDetail.dataVersionId = this.dataVersionId;\r\n            this.fxDealDetail.dataVersionMonth = this.dataVersionMonth;\r\n            this.fxDealDetail.reportType = this.reportType;\r\n            this.fxDealDetail.reportTypeDescription = this.reportTypeDescription;\r\n        }\r\n        if (this.fxDealPosting) {\r\n            this.fxDealPosting.dataVersionID = this.dataVersionId;\r\n            this.fxDealPosting.dataVersionMonth = this.dataVersionMonth;\r\n            this.fxDealPosting.reportType = this.reportType;\r\n            this.fxDealPosting.reportTypeDescription = this.reportTypeDescription;\r\n        }\r\n    }\r\n\r\n    onWarningRemoveButtonClicked(params) {\r\n        if (params) {\r\n            params.currentTarget.parentElement.parentElement.remove();\r\n        }\r\n    }\r\n\r\n    getMonthEndFxDealDetails() {\r\n        this.tradingService.getFxDealForMonthEnd(this.dataVersionId)\r\n            .subscribe((data) => {\r\n                const result = [] = data.value;\r\n                this.monthEndData = data.value;\r\n                if (this.monthEndData.length>0) {\r\n                    this.generateMappingErrorForMonthEnd(this.monthEndData[0].fxDealMonthEndMappingErrors);\r\n                }\r\n                this.fxDealDetail.prepareData(data.value);\r\n                this.fxDealPosting.prepareData(data.value);\r\n                this.filterModel = new FilterGem();\r\n                let count = 1;\r\n                this.filterModel.departmentCode = [];\r\n                this.filterModel.dealCurrency = [];\r\n                this.filterModel.settlementCurrency = [];\r\n                this.filterModel.dealNumber = [];\r\n                result.forEach((x) => {\r\n                    if (x.departmentCode) {\r\n                        const dept = new FilterValueGenerateEndMonth();\r\n                        dept.desc = x.departmentCode;\r\n                        dept.value = count;\r\n                        this.filterModel.departmentCode.push(dept);\r\n                    }\r\n                    if (x.dealCurrency) {\r\n                        const dealCurrency = new FilterValueGenerateEndMonth();\r\n                        dealCurrency.desc = x.dealCurrency;\r\n                        dealCurrency.value = count;\r\n                        this.filterModel.dealCurrency.push(dealCurrency);\r\n                    }\r\n                    if (x.settlementCurrency) {\r\n                        const settlementCurrency = new FilterValueGenerateEndMonth();\r\n                        settlementCurrency.desc = x.settlementCurrency;\r\n                        settlementCurrency.value = count;\r\n                        this.filterModel.settlementCurrency.push(settlementCurrency);\r\n                    }\r\n                    if (x.dealNumber) {\r\n                        const dealNumber = new FilterValueGenerateEndMonth();\r\n                        dealNumber.desc = x.dealNumber;\r\n                        dealNumber.value = count;\r\n                        this.filterModel.dealNumber.push(dealNumber);\r\n                    }\r\n                    count = count + 1;\r\n                });\r\n                this.filtered(this.filterModel);\r\n            });\r\n    }\r\n\r\n    selectedFilters() {\r\n        this.selectedDepartments = this.departmentDropdownComponent.allSelected ? this.departmentDropdownComponent.objects :\r\n            this.departmentDropdownComponent.selectedValues;\r\n        this.selectedDealNumbers = this.dealNumberDropdownComponent.allSelected ? this.dealNumberDropdownComponent.objects :\r\n            this.dealNumberDropdownComponent.selectedValues;\r\n        this.selectedDealtCurrencies = this.dealtCurrencyDropdownComponent.allSelected ? this.dealtCurrencyDropdownComponent.objects :\r\n            this.dealtCurrencyDropdownComponent.selectedValues;\r\n        this.selectedSettlementCurrencies = this.settlementCurrencyDropdownComponent.allSelected ?\r\n            this.settlementCurrencyDropdownComponent.objects :\r\n            this.settlementCurrencyDropdownComponent.selectedValues;\r\n    }\r\n\r\n    applyFilter(filterRows: FxDealGenerateEndOfMonthDisplayView[]) {\r\n        if (this.isFilterApplied) {\r\n            const deptFilter: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n            const dealNoFilter: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n            const dealCcyFilter: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n            const settlementCcyFilter: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n            filterRows.filter((x) => {\r\n                const deptCode = this.selectedDepartments.find((y) => y.desc === x.departmentCode);\r\n                if (deptCode) {\r\n                    if (x.departmentCode === deptCode.desc) {\r\n                        deptFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n            filterRows = deptFilter;\r\n            filterRows.filter((x) => {\r\n                const dealNumber = this.selectedDealNumbers.find((y) => y.desc === x.dealNumber);\r\n                if (dealNumber) {\r\n                    if (x.dealNumber === dealNumber.desc) {\r\n                        dealNoFilter.push(x);\r\n                    }\r\n                } else {\r\n                    if (x.dealNumber === null) {\r\n                        dealNoFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n            filterRows = dealNoFilter;\r\n            filterRows.filter((x) => {\r\n                const dealCurrency = this.selectedDealtCurrencies.find((y) => y.desc === x.dealCurrency);\r\n                if (dealCurrency) {\r\n                    if (x.dealCurrency === dealCurrency.desc) {\r\n                        dealCcyFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n            filterRows = dealCcyFilter;\r\n            filterRows.filter((x) => {\r\n                const settlementCurrency = this.selectedSettlementCurrencies.find((y) => y.desc === x.settlementCurrency);\r\n                if (settlementCurrency) {\r\n                    if (x.settlementCurrency === settlementCurrency.desc) {\r\n                        settlementCcyFilter.push(x);\r\n                    }\r\n                } else {\r\n                    if (x.settlementCurrency === null) {\r\n                        settlementCcyFilter.push(x);\r\n                    }\r\n                }\r\n            });\r\n            filterRows = settlementCcyFilter;\r\n            return filterRows;\r\n        } else {\r\n            filterRows = this.monthEndData;\r\n            return filterRows;\r\n        }\r\n    }\r\n\r\n    onDepartmentSelectionChanges() {\r\n        const deptFilter: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n        const dealNoFilter: FilterValueGenerateEndMonth[] = [];\r\n        const dealCcyFilter: FilterValueGenerateEndMonth[] = [];\r\n        const settlementCcyFilter: FilterValueGenerateEndMonth[] = [];\r\n        this.selectedFilters();\r\n        this.monthEndData.filter((x) => {\r\n            const deptCode = this.selectedDepartments.find((y) => y.desc === x.departmentCode);\r\n            if (deptCode) {\r\n                if (x.departmentCode === deptCode.desc) {\r\n                    deptFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.dealNumberDropdownComponent.formCtrl.reset();\r\n        this.dealtCurrencyDropdownComponent.formCtrl.reset();\r\n        this.settlementCurrencyDropdownComponent.formCtrl.reset();\r\n        let count = 1;\r\n        deptFilter.forEach((x) => {\r\n            if (x.dealNumber) {\r\n                const dealNo = new FilterValueGenerateEndMonth();\r\n                dealNo.desc = x.dealNumber;\r\n                dealNo.value = count;\r\n                dealNoFilter.push(dealNo);\r\n            }\r\n            if (x.dealCurrency) {\r\n                const dealCcy = new FilterValueGenerateEndMonth();\r\n                dealCcy.desc = x.dealCurrency;\r\n                dealCcy.value = count;\r\n                dealCcyFilter.push(dealCcy);\r\n            }\r\n            if (x.settlementCurrency) {\r\n                const settlementCcy = new FilterValueGenerateEndMonth();\r\n                settlementCcy.desc = x.settlementCurrency;\r\n                settlementCcy.value = count;\r\n                settlementCcyFilter.push(settlementCcy);\r\n            }\r\n            count = count + 1;\r\n        });\r\n        this.dealNumberDropdownComponent.objects = this.getDistinctString(dealNoFilter);\r\n        this.dealtCurrencyDropdownComponent.objects = this.getDistinctString(dealCcyFilter);\r\n        this.settlementCurrencyDropdownComponent.objects = this.getDistinctString(settlementCcyFilter);\r\n        if (this.departmentDropdownComponent.allSelected) {\r\n            this.dealNumberDropdownComponent.setSelectedValue(true, this.getDistinctString(dealNoFilter));\r\n            this.dealtCurrencyDropdownComponent.setSelectedValue(true, this.getDistinctString(dealCcyFilter));\r\n            this.settlementCurrencyDropdownComponent.setSelectedValue(true, this.getDistinctString(settlementCcyFilter));\r\n        } else {\r\n            this.dealNumberDropdownComponent.setSelectedValue(false, this.getDistinctString(dealNoFilter));\r\n            this.dealtCurrencyDropdownComponent.setSelectedValue(false, this.getDistinctString(dealCcyFilter));\r\n            this.settlementCurrencyDropdownComponent.setSelectedValue(false, this.getDistinctString(settlementCcyFilter));\r\n        }\r\n    }\r\n\r\n    onDealNumberSelectionChanges() {\r\n        const dealCurrencyFilter: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n        const settlementCurrencyFilter: FilterValueGenerateEndMonth[] = [];\r\n        const dealNumberFilter: FilterValueGenerateEndMonth[] = [];\r\n        this.selectedFilters();\r\n        this.monthEndData.filter((x) => {\r\n            const dealCurrency = this.selectedDealtCurrencies.find((y) => y.desc === x.dealCurrency);\r\n            if (dealCurrency) {\r\n                if (x.dealCurrency === dealCurrency.desc) {\r\n                    dealCurrencyFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n        this.settlementCurrencyDropdownComponent.formCtrl.reset();\r\n        this.dealNumberDropdownComponent.formCtrl.reset();\r\n        let count = 1;\r\n        dealCurrencyFilter.forEach((x) => {\r\n            if (x.settlementCurrency) {\r\n                const settlementCcy = new FilterValueGenerateEndMonth();\r\n                settlementCcy.desc = x.settlementCurrency;\r\n                settlementCcy.value = count;\r\n                settlementCurrencyFilter.push(settlementCcy);\r\n            }\r\n            if (x.dealNumber) {\r\n                const dealNo = new FilterValueGenerateEndMonth();\r\n                dealNo.desc = x.dealNumber;\r\n                dealNo.value = count;\r\n                dealNumberFilter.push(dealNo);\r\n            }\r\n            count = count + 1;\r\n        });\r\n        this.settlementCurrencyDropdownComponent.objects = this.getDistinctString(settlementCurrencyFilter);\r\n        this.dealNumberDropdownComponent.objects = this.getDistinctString(dealNumberFilter);\r\n        if (this.dealtCurrencyDropdownComponent.allSelected) {\r\n            this.settlementCurrencyDropdownComponent.setSelectedValue(true, this.getDistinctString(settlementCurrencyFilter));\r\n            this.dealNumberDropdownComponent.setSelectedValue(true, this.getDistinctString(dealNumberFilter));\r\n\r\n        } else {\r\n            this.settlementCurrencyDropdownComponent.setSelectedValue(false, this.getDistinctString(settlementCurrencyFilter));\r\n            this.dealNumberDropdownComponent.setSelectedValue(false, this.getDistinctString(dealNumberFilter));\r\n        }\r\n    }\r\n\r\n    onSettlementCurrencySelectionChanges() {\r\n        const settlementCurrencyFilter: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n        const dealNumberFilter: FilterValueGenerateEndMonth[] = [];\r\n        this.selectedFilters();\r\n        this.monthEndData.filter((x) => {\r\n            const settlementCcy = this.selectedSettlementCurrencies.find((y) => y.desc === x.settlementCurrency);\r\n            if (settlementCcy) {\r\n                if (x.settlementCurrency === settlementCcy.desc) {\r\n                    settlementCurrencyFilter.push(x);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.dealNumberDropdownComponent.formCtrl.reset();\r\n        let count = 1;\r\n        settlementCurrencyFilter.forEach((x) => {\r\n            if (x.dealNumber) {\r\n                const dealNo = new FilterValueGenerateEndMonth();\r\n                dealNo.desc = x.dealNumber;\r\n                dealNo.value = count;\r\n                dealNumberFilter.push(dealNo);\r\n            }\r\n            count = count + 1;\r\n        });\r\n        this.dealNumberDropdownComponent.objects = this.getDistinctString(dealNumberFilter);\r\n        if (this.settlementCurrencyDropdownComponent.allSelected) {\r\n            this.dealNumberDropdownComponent.setSelectedValue(true, this.getDistinctString(dealNumberFilter));\r\n\r\n        } else {\r\n            this.dealNumberDropdownComponent.setSelectedValue(false, this.getDistinctString(dealNumberFilter));\r\n        }\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel <= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onSelectedIndexChanged(value: number) {\r\n        this.tabIndex = value;\r\n        this.tabIndexNumber.emit(this.tabIndex);\r\n    }\r\n\r\n    filtered(filter: FilterGem) {\r\n        this.departmentDropdownComponent.objects = this.getDistinctString(filter.departmentCode);\r\n        this.dealNumberDropdownComponent.objects = this.getDistinctString(filter.dealNumber);\r\n        this.dealtCurrencyDropdownComponent.objects = this.getDistinctString(filter.dealCurrency);\r\n        this.settlementCurrencyDropdownComponent.objects = this.getDistinctString(filter.settlementCurrency);\r\n    }\r\n    stopPosting(generateMonthPosting: boolean) {\r\n        this.disableButton = generateMonthPosting;\r\n    }\r\n\r\n    getDistinctString(list: FilterValueGenerateEndMonth[]): FilterValueGenerateEndMonth[] {\r\n        const distinctList = [];\r\n        const filteredList: FilterValueGenerateEndMonth[] = [];\r\n        list.forEach((item) => {\r\n            if (distinctList.indexOf(item.desc) === -1) {\r\n                distinctList.push(item.desc);\r\n                filteredList.push(item);\r\n            }\r\n        });\r\n        return filteredList;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/generate-end-of-month']);\r\n    }\r\n\r\n    onGeneratePostingsButtonClicked() {\r\n        this.onGenerateFxDealDocument();\r\n    }\r\n\r\n    onGenerateFxDealDocument() {\r\n        if (this.monthEndData && this.monthEndData.length > 0) {\r\n            const genetateMonthEndTACommand = new FXDealMonthEndTemporaryAdjustmentListCommand();\r\n            genetateMonthEndTACommand.dataVersionId = this.dataVersionId;\r\n            genetateMonthEndTACommand.dataVersionDate = this.dataVersionDate;\r\n            genetateMonthEndTACommand.reportType = this.reportType;\r\n            this.generateMonthEndSubscription = this.executionService\r\n                .SaveFxDealMonthEndTemporaryAdjustment(genetateMonthEndTACommand)\r\n                .subscribe(((data) => {\r\n                    this.disableGeneratePosting.emit(this.generatePosting);\r\n                    this.snackbarService.informationAndCopySnackBar('The following Accrual and autoreversal have been created:' + data.monthEndTAReferenceNumber, data.monthEndTAReferenceNumber);\r\n                }),\r\n                );\r\n\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Please wait! Data is loading...');\r\n        }\r\n    }\r\n\r\n    onSelectedIndexChanged1(tabIndex: number) {\r\n        this.tabIndex = tabIndex;\r\n    }\r\n\r\n    onApplyButtonClicked() {\r\n        if (this.departmentDropdownComponent.allSelected &&\r\n            this.dealNumberDropdownComponent.allSelected &&\r\n            this.dealtCurrencyDropdownComponent.allSelected &&\r\n            this.settlementCurrencyDropdownComponent.allSelected) {\r\n            this.isFilterApplied = false;\r\n        } else {\r\n            this.isFilterApplied = true;\r\n        }\r\n        this.selectedFilters();\r\n        const filteredData = this.applyFilter(this.monthEndData);\r\n        this.fxDealDetail.prepareData(filteredData);\r\n        this.fxDealPosting.prepareData(filteredData);\r\n    }\r\n\r\n    generateMappingErrorForMonthEnd(tradeCostMonthEndMappingErrors: TradeCostMonthEndMappingErrors[]): void {\r\n        var mappingErrors = tradeCostMonthEndMappingErrors.filter((mappingError) => mappingError.isMappingError);\r\n        this.clientAccountMappingErrorMessages = [];\r\n        this.departmentMappingErrorMessages = [];\r\n        this.costTypeMappingErrorMessages = [];\r\n        this.nominalAccountMappingErrorMessages = [];\r\n        if (mappingErrors && mappingErrors.length > 0) {\r\n            mappingErrors.forEach(error => {\r\n                if (error.c2CCodeIsInMappingError) {\r\n                    this.clientAccountMappingErrorMessages.push(error.accountingDocumentLineClientAccount);\r\n                }\r\n                if (error.costAlternativeCodeIsInMappingError) {\r\n                    this.costTypeMappingErrorMessages.push(error.accountingDocumentLineCostTypeCode);\r\n                }\r\n                if (error.departmentAlternativeCodeIsInMappingError) {\r\n                    this.departmentMappingErrorMessages.push(error.accountingDocumentLineDepartmentCode);\r\n                }\r\n                if (error.nominalAlternativeAccountIsInMappingError) {\r\n                    this.nominalAccountMappingErrorMessages.push(error.accountingDocumentLineAccountReference);\r\n                }\r\n            });\r\n\r\n            if (this.clientAccountMappingErrorMessages.length > 0) {\r\n                this.clientAccountMappingErrorMessages = this.clientAccountMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n                this.isMappingError = true;\r\n            }\r\n            if (this.costTypeMappingErrorMessages.length > 0) {\r\n                this.costTypeMappingErrorMessages = this.costTypeMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n                this.isMappingError = true;\r\n            }\r\n            if (this.departmentMappingErrorMessages.length > 0) {\r\n                this.departmentMappingErrorMessages = this.departmentMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n                this.isMappingError = true;\r\n            }\r\n            if (this.nominalAccountMappingErrorMessages.length > 0) {\r\n                this.nominalAccountMappingErrorMessages = this.nominalAccountMappingErrorMessages.filter((x, i, a) => x && a.indexOf(x) === i);\r\n                this.isMappingError = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"20px\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h2 class=\\\"no-margin\\\">End of Month Overview</h2>\\r\\n        <mat-chip-list class=\\\"chip-list\\\">\\r\\n            <mat-chip selected\\r\\n                      disabled>\\r\\n                {{dataVersionMonth}}\\r\\n            </mat-chip>\\r\\n            <mat-chip selected\\r\\n                      disabled>{{reportTypeDescription}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n        <span class=\\\"fill-space\\\"></span><button mat-icon-button\\r\\n                [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n        </button>\\r\\n        <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"overviewGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"overviewGridColumns\\\"\\r\\n                             [rowData]=\\\"overviewGridRows\\\"\\r\\n                             [gridOptions]=\\\"overviewGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [pagination]=\\\"false\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [defaultColDef]=\\\"defaultColDef\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             [groupMultiAutoColumn]=\\\"true\\\"\\r\\n                             [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\"\\r\\n                             [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\"\\r\\n                 fxLayoutGap=\\\"1%\\\"\\r\\n                 class=\\\"footer-label\\\">\\r\\n                <h2>Grand Total</h2>\\r\\n                <h2>{{formattedInput}} </h2>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".footer-label {\\n  padding-top: 20px; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { FilterGem } from '../../../../../../../shared/entities/filter-gem.entity';\r\nimport { FilterValueGenerateEndMonth } from '../../../../../../../shared/entities/filter-value-generate-end-month.entity';\r\nimport { GenerateMonthEndEnum } from '../../../../../../../shared/enums/generate-month-end-type.enum';\r\nimport { ReportType } from '../../../../../../../shared/enums/report-type.enum'\r\nimport { OverviewGenerateEndOfMonthDisplayView } from '../../../../../../../shared/models/overview-generate-end-of-month-display-view';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { MonthEndTemporaryAdjustmentListCommand } from '../../../../../../../shared/services/execution/dtos/month-end-temporary-adjustment-list-command';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../../shared/services/http-services/execution.service';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { TradeCostMonthEndMappingErrors } from '../../../../../../../shared/entities/tradecost-monthend-mappingerrors-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-overview-tab',\r\n    templateUrl: './overview-tab.component.html',\r\n    styleUrls: ['./overview-tab.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class OverviewTabComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @Output() readonly filteredGrid = new EventEmitter<FilterGem>();\r\n    @Output() readonly applyButtonClicked = new EventEmitter();\r\n    @Output() readonly disableGeneratePosting = new EventEmitter<boolean>();\r\n    @Output() readonly mappingError = new EventEmitter<TradeCostMonthEndMappingErrors[]>();\r\n    @Input() filteredOverviewGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    overviewGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    overviewGridColumns: agGrid.ColDef[];\r\n    overviewGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    originalOverviewGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    postingsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    dataLength: number = 0;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    company: string;\r\n    defaultColDef: any;\r\n    rowGroupPanelShow: string;\r\n    totalAmount: number;\r\n    userActiveDirectoryName: string;\r\n    private generateMonthEndSubscription: Subscription;\r\n    model: FilterGem;\r\n    dataVersionID: number;\r\n    dataVersionDate: Date;\r\n    dataVersionMonth: string;\r\n    formattedInput: string;\r\n    generatePosting = true;\r\n    reportType: number;\r\n    reportTypeDescription: string;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        private tradingService: TradingService,\r\n        private authorizationService: AuthorizationService,\r\n        private executionService: ExecutionService,\r\n        private snackbarService: SnackbarService,\r\n        private datePipe: DatePipe,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.initializeGridColumns();\r\n        this.initOverviewGridRows();\r\n        this.initializSortModel();\r\n    }\r\n    onGridReady(params) {\r\n        params.columnDefs = this.overviewGridColumns;\r\n        this.overviewGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridService.sizeColumns(this.overviewGridOptions);\r\n\r\n        window.onresize = () => {\r\n            this.gridService.sizeColumns(this.overviewGridOptions);\r\n        };\r\n    }\r\n\r\n    initializSortModel() {\r\n        let defaultSortModel = [\r\n            {\r\n                colId: \"currencyCode\",\r\n                sort: \"asc\"\r\n            },\r\n            {\r\n                colId: \"departmentCode\",\r\n                sort: \"asc\"\r\n            },\r\n            {\r\n                colId: \"charterCode\",\r\n                sort: \"asc\"\r\n            },\r\n            {\r\n                colId: \"costType\",\r\n                sort: \"asc\"\r\n            }\r\n        ];\r\n\r\n        this.gridApi.setSortModel(defaultSortModel);\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.overviewGridColumns = [\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                enableRowGroup: true,\r\n                hide: true,\r\n                rowGroup: true,\r\n                valueFormatter: this.currencyFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                enableRowGroup: true,\r\n                hide: true,\r\n                rowGroup: true,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charterCode',\r\n                colId: 'charterCode',\r\n                enableRowGroup: true,\r\n                hide: true,\r\n                rowGroup: true,\r\n                valueFormatter: this.charterFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: ' Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                enableRowGroup: true,\r\n                hide: true,\r\n                rowGroup: true,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Associated Client',\r\n                field: 'associatedClient',\r\n                colId: 'associatedClient',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Sum of Accrued Amount',\r\n                field: 'accruedAmount',\r\n                colId: 'accruedAmount',\r\n                hide: false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                aggFunc: 'sum',\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n        ];\r\n        this.rowGroupPanelShow = 'always';\r\n        this.defaultColDef = { sortable: true };\r\n\r\n    }\r\n\r\n    initOverviewGridRows() {\r\n        this.overviewGridRows = [];\r\n    }\r\n\r\n    getTradeCostListOverview(filteredOverviewGridRows?: OverviewGenerateEndOfMonthDisplayView[], isFilteredApplied: boolean = false) {\r\n        if (filteredOverviewGridRows && isFilteredApplied === true) {\r\n            this.overviewGridRows = filteredOverviewGridRows;\r\n        } else {\r\n            this.getTradeCostListPosting(this.dataVersionID);\r\n            this.tradingService.getTradeCostList(this.reportType, GenerateMonthEndEnum.Overview, this.dataVersionID)\r\n                .subscribe((data) => {\r\n                    if (data && data.value.length > 0) {\r\n                        var mappingErrorDetails = data.value[0].tradeCostMonthEndMappingErrors;\r\n                        this.mappingError.emit(mappingErrorDetails);\r\n                    }\r\n                    this.overviewGridRows = data.value.map((CostTrade) => {\r\n                        return new OverviewGenerateEndOfMonthDisplayView(CostTrade, this.reportType);\r\n                    });\r\n                    this.model = new FilterGem();\r\n                    this.model.departmentCode = [];\r\n                    this.model.charterCode = [];\r\n                    this.model.costType = [];\r\n                    this.model.associatedClient = [];\r\n                    let count = 1;\r\n                    this.overviewGridRows.forEach((x) => {\r\n                        if (x.departmentCode) {\r\n                            const dept = new FilterValueGenerateEndMonth();\r\n                            dept.desc = x.departmentCode;\r\n                            dept.value = count;\r\n                            this.model.departmentCode.push(dept);\r\n                        }\r\n                        if (x.charterCode) {\r\n                            const charter = new FilterValueGenerateEndMonth();\r\n                            charter.desc = x.charterCode;\r\n                            charter.value = count;\r\n                            this.model.charterCode.push(charter);\r\n                        }\r\n                        if (x.costType) {\r\n                            const cost = new FilterValueGenerateEndMonth();\r\n                            cost.desc = x.costType;\r\n                            cost.value = count;\r\n                            this.model.costType.push(cost);\r\n                        }\r\n                        if (x.associatedClient) {\r\n                            const client = new FilterValueGenerateEndMonth();\r\n                            client.desc = x.associatedClient;\r\n                            client.value = count;\r\n                            this.model.associatedClient.push(client);\r\n                        }\r\n                        count = count + 1;\r\n                    });\r\n                    this.overviewGridRows.forEach((x) => {\r\n                        if (x.postingCostType) {\r\n                            const cost = new FilterValueGenerateEndMonth();\r\n                            cost.desc = x.postingCostType;\r\n                            cost.value = count;\r\n                            this.model.costType.push(cost);\r\n                        }\r\n                        count = count + 1;\r\n                    });\r\n                    this.filteredGrid.emit(this.model);\r\n                    this.isLoading = false;\r\n                    this.calculateGrandTotal(this.overviewGridRows);\r\n                    this.originalOverviewGridRows = this.overviewGridRows;\r\n                    if (isFilteredApplied) {\r\n                        this.applyButtonClicked.emit();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    calculateGrandTotal(amounts: OverviewGenerateEndOfMonthDisplayView[]) {\r\n        this.totalAmount = 0;\r\n        amounts.forEach(\r\n            (amount) => {\r\n                this.totalAmount = (this.totalAmount + amount.accruedAmount);\r\n                this.formattedInput = this.totalAmount.toLocaleString();\r\n                return this.formattedInput;\r\n            },\r\n        );\r\n    }\r\n\r\n    currencyFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 3); }\r\n    }\r\n\r\n    charterFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 15); }\r\n    }\r\n\r\n    stringFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 10); }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 2);\r\n        }\r\n    }\r\n\r\n    onGenerateTADocument() {\r\n        if (this.postingsGridRows) {\r\n            if (this.postingsGridRows.length > 0) {\r\n                const genetateMonthEndTACommand = new MonthEndTemporaryAdjustmentListCommand();\r\n                genetateMonthEndTACommand.dataVersionId = this.dataVersionID;\r\n                genetateMonthEndTACommand.dataVersionDate = this.dataVersionDate;\r\n                genetateMonthEndTACommand.reportType = this.reportType;\r\n                this.generateMonthEndSubscription = this.executionService\r\n                    .SaveMonthEndTemporaryAdjustment(genetateMonthEndTACommand)\r\n                    .subscribe(((data) => {\r\n                        this.disableGeneratePosting.emit(this.generatePosting);\r\n                        this.snackbarService.informationAndCopySnackBar('The following Accrual and autoreversal have been created:' + data.monthEndTAReferenceNumber, data.monthEndTAReferenceNumber);\r\n                    }),\r\n                    );\r\n            }\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Please wait! Data is loading...');\r\n        }\r\n\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.generateMonthEndSubscription) {\r\n            this.generateMonthEndSubscription.unsubscribe();\r\n        }\r\n    }\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: String = 'EndofMonthOverview';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: String = 'EndofMonthOverview';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n\r\n    getTradeCostListPosting(dataVersionId: number) {\r\n        this.tradingService.getTradeCostList(this.reportType, GenerateMonthEndEnum.Postings, this.dataVersionID)\r\n            .subscribe((data) => {\r\n                this.postingsGridRows = data.value.map((CostTrade) => {\r\n                    return new OverviewGenerateEndOfMonthDisplayView(CostTrade, this.reportType);\r\n\r\n                });\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"20px\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h2 class=\\\"no-margin\\\">End of Month Postings</h2>\\r\\n        <mat-chip-list class=\\\"chip-list\\\">\\r\\n            <mat-chip selected\\r\\n                      disabled>\\r\\n                {{dataVersionMonth}}\\r\\n            </mat-chip>\\r\\n            <mat-chip selected\\r\\n                      disabled>{{reportTypeDescription}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n        <span class=\\\"fill-space\\\"></span><button mat-icon-button\\r\\n                [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n        </button>\\r\\n        <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"detailsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"fxDealPostingsGridColumns\\\"\\r\\n                             [rowData]=\\\"fxDealPostingsGridRows\\\"\\r\\n                             [gridOptions]=\\\"fxDealPostingsGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             [excelStyles]=\\\"excelStyles\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { BaseFormComponent } from '../../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { FilterGem } from '../../../../../../../../shared/entities/filter-gem.entity';\r\nimport { FxDealGenerateEndOfMonthDisplayView } from '../../../../../../../../shared/models/fx-deal-generate-end-of-month-display-view';\r\nimport { FormatDatePipe } from '../../../../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../../../../shared/services/http-services/trading.service';\r\nimport { UiService } from '../../../../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-posting-tab-fx-deal-month-end',\r\n    templateUrl: './fx-deal-month-end.component.html',\r\n    styleUrls: ['./fx-deal-month-end.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class PostingTabFxDealMonthEndComponent extends BaseFormComponent implements OnInit {\r\n    @Input() filteredDetailsGridRows: FxDealGenerateEndOfMonthDisplayView[];\r\n    @Output() readonly applyButtonClicked = new EventEmitter();\r\n    @Output() readonly filteredGrid = new EventEmitter<FilterGem>();\r\n    fxDealPostingsGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    fxDealPostingsGridColumns: agGrid.ColDef[];\r\n    fxDealPostingsGridRows: FxDealGenerateEndOfMonthDisplayView[] = [];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    company: string;\r\n    isLoading: boolean;\r\n    length: number = 0;\r\n    userActiveDirectoryName: string;\r\n    excelStyles: any;\r\n    dataVersionID: number;\r\n    dataVersionMonth: string;\r\n    quantityWeightCode: string;\r\n    reportTypeDescription: string;\r\n    reportType: number;\r\n    model: FilterGem;\r\n    exportFileName: string = 'EndOfMonthPostings';\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        private formatDate: FormatDatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n            {\r\n                id: 'leftAlignment',\r\n                alignment: {\r\n                    horizontal: 'Left', vertical: 'Bottom',\r\n                },\r\n            },\r\n            {\r\n                id: \"twoDecimalPlaces\",\r\n                numberFormat: { format: \"#,##0.00\" },\r\n\r\n            },\r\n        ];\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        const companyDetails = this.companyManager.getCurrentCompany();\r\n        this.quantityWeightCode = '(in ' + companyDetails.weightCode + ')';\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.fxDealPostingsGridColumns;\r\n        this.fxDealPostingsGridOptions = params;\r\n        this.gridApi = this.fxDealPostingsGridOptions.api;\r\n        this.gridColumnApi = this.fxDealPostingsGridOptions.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.gridService.sizeColumns(this.fxDealPostingsGridOptions);\r\n        window.onresize = () => {\r\n            this.gridService.sizeColumns(this.fxDealPostingsGridOptions);\r\n        };\r\n    }\r\n\r\n    prepareData(postingData) {\r\n        this.fxDealPostingsGridRows = [];\r\n        if (postingData) {\r\n            const firstRow = [];\r\n            const secondRow = [];\r\n            postingData.forEach((data) => {\r\n                firstRow.push(new FxDealGenerateEndOfMonthDisplayView(data));\r\n            });\r\n            postingData.forEach((data) => {\r\n                secondRow.push(new FxDealGenerateEndOfMonthDisplayView(data));\r\n            });\r\n            firstRow.forEach((row) => {\r\n                row.variationMargin = -row.variationMargin;\r\n                row.accountNumber = row.line1NominalAccountCode;\r\n                row.accountDescription = row.line1NominalAccountDesc;\r\n                this.fxDealPostingsGridRows.push(row);\r\n            });\r\n            secondRow.forEach((row) => {\r\n                row.accountNumber = row.line2NominalAccountCode;\r\n                row.accountDescription = row.line2NominalAccountDesc;\r\n                this.fxDealPostingsGridRows.push(row);\r\n            });\r\n            this.fxDealPostingsGridOptions.api.setRowData(this.fxDealPostingsGridRows);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.fxDealPostingsGridColumns = [\r\n            {\r\n                headerName: 'Accrual Number',\r\n                field: 'accrualNumber',\r\n                colId: 'accrualNumber',\r\n                sort: 'asc',\r\n                cellClass: 'leftAlignment',\r\n                minWidth: 180,\r\n            },\r\n            {\r\n                headerName: 'Nom. Account',\r\n                field: 'accountNumber',\r\n                colId: 'accountNumber',\r\n                cellClass: 'leftAlignment',\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Nom. Description',\r\n                field: 'accountDescription',\r\n                colId: 'accountDescription',\r\n                width: 300,\r\n            },\r\n            {\r\n                headerName: ' Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n                maxWidth: 250,\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                cellClass: 'leftAlignment',\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Deal No.',\r\n                field: 'dealNumber',\r\n                colId: 'dealNumber',\r\n                cellClass: 'leftAlignment',\r\n            },\r\n            {\r\n                headerName: 'Associated Client',\r\n                field: 'associatedClient',\r\n                colId: 'associatedClient',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Func Ccy',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                valueFormatter: this.currencyFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Variation Margin',\r\n                field: 'variationMargin',\r\n                colId: 'variationMargin',\r\n                cellClass: 'twoDecimalPlaces',\r\n                cellStyle: { 'text-align': 'right' },\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                type: 'numericColumn',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = this.exportFileName;\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = this.exportFileName;\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n\r\n    stringFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 10); }\r\n    }\r\n\r\n    currencyFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 3); }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 2);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"20px\\\">\\r\\n        <h2 class=\\\"no-margin\\\">End of Month Postings</h2>\\r\\n        <mat-chip-list class=\\\"chip-list\\\">\\r\\n            <mat-chip selected\\r\\n                      disabled>\\r\\n                {{dataVersionMonth}}\\r\\n            </mat-chip>\\r\\n            <mat-chip selected\\r\\n                      disabled>\\r\\n                {{reportTypeDescription}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end start\\\">\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"postingsGridOptions && postingsGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"postingsGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridId\\\"\\r\\n                                            [sharingEnabled]=\\\"false\\\"\\r\\n                                            [savingEnabled]=\\\"false\\\"\\r\\n                                            [hasColumnHandling]=\\\"false\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <atlas-grid-enlargement *ngIf=\\\"postingsGridOptions && postingsGridOptions.columnDefs\\\"\\r\\n                                    [gridOptions]=\\\"postingsGridOptions\\\"\\r\\n                                    [userPreferencesParameters]=\\\"gridPreferencesParameters\\\"\\r\\n                                    #gridZoom>\\r\\n            </atlas-grid-enlargement>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"detailsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"postingsGridColumns\\\"\\r\\n                             [rowData]=\\\"postingsGridRows\\\"\\r\\n                             [gridOptions]=\\\"postingsGridOptions\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (firstDataRendered)=\\\"autosizeColumns()\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [animateRows]=\\\"true\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { GenerateMonthEndEnum } from '../../../../../../../shared/enums/generate-month-end-type.enum';\r\nimport { ReportType } from '../../../../../../../shared/enums/report-type.enum';\r\nimport { OverviewGenerateEndOfMonthDisplayView } from '../../../../../../../shared/models/overview-generate-end-of-month-display-view';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { TradeCostMonthEndMappingErrors } from '../../../../../../../shared/entities/tradecost-monthend-mappingerrors-entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-postings-tab',\r\n    templateUrl: './postings-tab.component.html',\r\n    styleUrls: ['./postings-tab.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class PostingsTabComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Input() filteredPostingsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    @Output() readonly applyButtonClicked = new EventEmitter();\r\n    @Output() readonly mappingError = new EventEmitter<TradeCostMonthEndMappingErrors[]>();\r\n    postingsGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    postingsGridColumns: agGrid.ColDef[];\r\n    postingsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    originalPostingsGridRows: OverviewGenerateEndOfMonthDisplayView[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    company: string;\r\n    isLoading: boolean;\r\n    length: number = 0;\r\n    userActiveDirectoryName: string;\r\n    dataVersionID: number;\r\n    gridPreferencesParameters: UserGridPreferencesParameters;\r\n    gridId: string = 'endOfMonthPostings';\r\n\r\n    dataVersionMonth: string;\r\n    reportType: number;\r\n    reportTypeDescription: string;\r\n    quantityWeightCode: string;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        private tradingService: TradingService,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.reportType !== ReportType.MTMOpenFx) {\r\n            this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n            const companyDetails = this.companyManager.getCurrentCompany();\r\n            this.quantityWeightCode = '(in ' + companyDetails.weightCode + ')';\r\n            this.company = this.companyManager.getCurrentCompanyId();\r\n            this.initializeGridColumns();\r\n            this.initPostingsGridRows();\r\n\r\n            this.gridPreferencesParameters = {\r\n                company: this.company,\r\n                gridId: this.gridId,\r\n                gridOptions: null,\r\n                savingEnabled: false,\r\n                sharingEnabled: false,\r\n                showExport: true,\r\n                hasColumnHandling: false,\r\n            };\r\n        }\r\n    }\r\n    onGridReady(params) {\r\n        this.postingsGridOptions.columnDefs = this.postingsGridColumns;\r\n        this.gridApi = this.postingsGridOptions.api;\r\n        this.gridColumnApi = this.postingsGridOptions.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autosizeColumns();\r\n    }\r\n\r\n    autosizeColumns() {\r\n        if (this.postingsGridOptions) {\r\n            this.gridService.sizeColumns(this.postingsGridOptions);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.postingsGridColumns = [\r\n            {\r\n                colId: 'sectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                colId: 'costId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Accrual Number',\r\n                field: 'accrualNumber',\r\n                colId: 'accrualNumber',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Nom. Account',\r\n                field: 'accountNumber',\r\n                colId: 'accountNumber',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'description',\r\n                colId: 'description',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: ' Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charterCode',\r\n                colId: 'charterCode',\r\n                hide: false,\r\n                valueFormatter: this.charterFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Contract',\r\n                field: 'contractNumber',\r\n                colId: 'contractNumber',\r\n                hide: false,\r\n                valueFormatter: this.contractFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Associated Account',\r\n                field: 'associatedClient',\r\n                colId: 'associatedClient',\r\n                hide: false,\r\n                valueFormatter: this.stringFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n                valueFormatter: this.currencyFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'accruedAmount',\r\n                colId: 'accruedAmount',\r\n                hide: false,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: 'Quantity ' + this.quantityWeightCode,\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n                hide: false,\r\n                valueFormatter: this.quantityFormatter.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: 'Inhouse/External',\r\n                field: 'inhouseOrExternal',\r\n                colId: 'inhouseOrExternal',\r\n                hide: (this.reportType !== 1) ? false : true,\r\n                valueFormatter: this.charterFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    initPostingsGridRows() {\r\n        this.postingsGridRows = [];\r\n    }\r\n\r\n    getTradeCostListPostings(filteredPostingsGridRows?: OverviewGenerateEndOfMonthDisplayView[], isFilteredApplied: boolean = false) {\r\n        if (filteredPostingsGridRows && isFilteredApplied === true) {\r\n            this.postingsGridRows = filteredPostingsGridRows;\r\n        } else {\r\n            this.tradingService.getTradeCostList(this.reportType, GenerateMonthEndEnum.Postings, this.dataVersionID)\r\n                .subscribe((data) => {\r\n                    if (data && data.value.length > 0) {\r\n                        var mappingErrorDetails = data.value[0].tradeCostMonthEndMappingErrors;\r\n                        this.mappingError.emit(mappingErrorDetails);\r\n                    }\r\n                    this.postingsGridRows = data.value.map((CostTrade) => {\r\n                        return new OverviewGenerateEndOfMonthDisplayView(CostTrade, this.reportType);\r\n                    });\r\n                    this.isLoading = false;\r\n                    this.originalPostingsGridRows = this.postingsGridRows;\r\n                    if (isFilteredApplied) {\r\n                        this.applyButtonClicked.emit();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    stringFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 10); }\r\n    }\r\n\r\n    charterFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 15); }\r\n    }\r\n\r\n    contractFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 12); }\r\n    }\r\n\r\n    currencyFormatter(param) {\r\n        if (param.value) { return String(param.value).substr(0, 3); }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 2);\r\n        }\r\n    }\r\n\r\n    quantityFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 3);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"100\\\">\\r\\n            <atlas-end-of-month-selection #endOfMonthSelectionComponent\\r\\n                                          (snapshotTypeSelected)=\\\"onsnapshotTypeChange($event)\\\"\\r\\n                                          (snapshotDate)=\\\"onsnapshotDate($event)\\\"\\r\\n                                          (snapshotMonth)=\\\"onsnapshotMonth($event)\\\"\\r\\n                                          (reportTypeSelected)=\\\"onReportTypeSelected($event)\\\"\\r\\n                                          (reportTypeDescriptionSelected)=\\\"onReportTypeDescriptionSelected($event)\\\">\\r\\n            </atlas-end-of-month-selection>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                    mat-button>\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onNextButtonClicked()\\\"\\r\\n                    [disabled]=\\\"isCompanyFrozen\\\">\\r\\n                NEXT\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AccountingSetup } from '../../../../shared/entities/accounting-setup.entity';\r\nimport { ReportType } from '../../../../shared/enums/report-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { PreaccountingService } from '../../../../shared/services/http-services/preaccounting.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { EndOfMonthSelectionComponent } from '../generate-end-of-month/cards/end-of-month-selection/end-of-month-selection.component';\r\n@Component({\r\n    selector: 'atlas-generate-end-of-month',\r\n    templateUrl: './generate-end-of-month.component.html',\r\n    styleUrls: ['./generate-end-of-month.component.scss'],\r\n})\r\nexport class GenerateEndOfMonthComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('endOfMonthSelectionComponent') EndOfMonthSelectionComponent: EndOfMonthSelectionComponent;\r\n    formComponents: BaseFormComponent[] = [];\r\n    subscriptions: Subscription[] = [];\r\n    dataVersionId: number;\r\n    snapShotSelectedDate: string;\r\n    snapShotSelectedMonth: string;\r\n    isPostingButtonEditable: boolean = false;\r\n    accountingSetupModel: AccountingSetup;\r\n    company: string;\r\n    lastAccoutingDate: string;\r\n    monthDifference: number;\r\n    isPostingExist: boolean = true;\r\n    createFormGroup: FormGroup;\r\n    reportType: number;\r\n    reportTypeDescription: string;\r\n    isCompanyFrozen: boolean = false;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private router: Router,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private preaccountingService: PreaccountingService,\r\n        private companyManager: CompanyManagerService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.subscriptions.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n            }));\r\n        this.createFormGroup = this.formBuilder.group({\r\n            EndOfMonthSelectionComponent: this.EndOfMonthSelectionComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.EndOfMonthSelectionComponent);\r\n        this.isCompanyFrozen = this.companyManager.getCompany(this.company).isFrozen;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.createFormGroup.controls.EndOfMonthSelectionComponent.get('snapshotsCtrl').reset();\r\n                this.createFormGroup.controls.EndOfMonthSelectionComponent.get('snapshotsCtrl').setValue(-1, 'Current Database');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    onNextButtonClicked() {\r\n        if (this.dataVersionId === 0) {\r\n            this.isPostingButtonEditable = true;\r\n            this.callSummaryRoute();\r\n        } else {\r\n            const momentLastMonthClosed: moment.Moment = moment(this.accountingSetupModel.lastMonthClosed);\r\n            const momentSelectedDate: moment.Moment = moment(this.snapShotSelectedDate);\r\n            this.monthDifference = momentSelectedDate.diff(momentLastMonthClosed, 'months');\r\n            if (this.monthDifference <= 0) {\r\n                this.isPostingButtonEditable = true;\r\n                this.popupForAccounting();\r\n            } else {\r\n                this.isPostingButtonEditable = false;\r\n                this.preaccountingService.\r\n                    GetTADocmentDetails(this.dataVersionId, this.reportType).subscribe((message) => {\r\n                        this.isPostingExist = message;\r\n                        if (this.isPostingExist) {\r\n                            this.popupForPosting();\r\n                        } else {\r\n                            this.callSummaryRoute();\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    onsnapshotTypeChange(model: any) {\r\n        this.dataVersionId = model.dataVersionIdSelected;\r\n    }\r\n    onReportTypeSelected(model: any) {\r\n        this.reportType = model.reportTypeSelected;\r\n    }\r\n    onReportTypeDescriptionSelected(model: any) {\r\n        this.reportTypeDescription = model.reportTypeDescriptionSelected;\r\n    }\r\n    onsnapshotDate(model: any) {\r\n        this.snapShotSelectedDate = model.snapshotSelectedDate;\r\n    }\r\n\r\n    onsnapshotMonth(model: string) {\r\n        this.snapShotSelectedMonth = model;\r\n    }\r\n    popupForAccounting() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                text: 'This month is closed for accounting. No accounting transactions will be produced. Do you want to proceed?',\r\n                okButton: 'CONFIRM',\r\n                cancelButton: 'CANCEL',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.callSummaryRoute();\r\n            }\r\n        });\r\n    }\r\n\r\n    popupForPosting() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                text: 'Posting for this month have already been created, do you want to proceed?',\r\n                okButton: 'CONFIRM',\r\n                cancelButton: 'CANCEL',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.callSummaryRoute();\r\n            }\r\n        });\r\n    }\r\n\r\n    callSummaryRoute() {\r\n        if (this.reportType !== ReportType.MTMOpenFx) {\r\n            this.router.navigate(\r\n                ['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/generate-end-of-month/summary'],\r\n                {\r\n                    queryParams: {\r\n                        dataVersionId: this.dataVersionId,\r\n                        reportTypeDescription: this.reportTypeDescription,\r\n                        dataVersionDate: this.snapShotSelectedDate,\r\n                        dataVersionMonth: this.snapShotSelectedMonth,\r\n                        isPostingButtonEditable: this.isPostingButtonEditable,\r\n                        reportType: this.reportType,\r\n\r\n                    },\r\n                    skipLocationChange: true,\r\n                });\r\n        } else {\r\n            this.router.navigate(\r\n                ['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/fx-deal-generate-end-of-month/summary'],\r\n                {\r\n                    queryParams: {\r\n                        dataVersionId: this.dataVersionId,\r\n                        reportTypeDescription: this.reportTypeDescription,\r\n                        dataVersionDate: this.snapShotSelectedDate,\r\n                        dataVersionMonth: this.snapShotSelectedMonth,\r\n                        isPostingButtonEditable: this.isPostingButtonEditable,\r\n                        reportType: this.reportType,\r\n                    },\r\n                    skipLocationChange: true,\r\n                });\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<h1 mat-dialog-title>YEP Generated documents </h1>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoading\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\">\\r\\n        <div>\\r\\n            <div fxLayout=\\\"row\\\">\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n            <div class=\\\"info\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n\\r\\n                <div>\\r\\n                    <p><B>Documents</B> </p>\\r\\n                    <div *ngFor=\\\"let document of documentsGenerated\\\">\\r\\n                        <h3>{{document.reportName}}</h3>\\r\\n                        <mat-divider></mat-divider>\\r\\n                        <mat-chip-list class=\\\"chip-list\\\">\\r\\n                            <mat-chip selected\\r\\n                                      disabled\\r\\n                                      *ngFor=\\\"let response of document.yearEndProcessResponses\\\">\\r\\n                                {{response.documentReference}}\\r\\n                            </mat-chip>\\r\\n                        </mat-chip-list>\\r\\n                        <mat-divider></mat-divider>\\r\\n                    </div>\\r\\n                    <B>have been generated</B>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onOkButtonClicked()\\\">CLOSE</button>\\r\\n\\r\\n</mat-dialog-actions>\"","module.exports = \".mat-dialog-title {\\n  margin-bottom: 16px; }\\n\\n.manual-import p {\\n  font-weight: bold;\\n  font-size: 14px; }\\n\\n.mat-divider {\\n  margin-top: 16px;\\n  margin-bottom: 16px; }\\n\\nbutton {\\n  margin: 0; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-generate-end-of-year-warning-message',\r\n    templateUrl: './generate-end-of-year-warning-message.component.html',\r\n    styleUrls: ['./generate-end-of-year-warning-message.component.scss']\r\n})\r\nexport class GenerateEndOfYearWarningMessageComponent extends BaseFormComponent implements OnInit {\r\n    isLoading = true;\r\n    dialogData: any;\r\n    documentsGenerated: string[] = [];\r\n    constructor(public thisDialogRef: MatDialogRef<GenerateEndOfYearWarningMessageComponent>,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isLoading = false;\r\n        if (this.dialogData && this.dialogData.length > 0) {\r\n            this.documentsGenerated = this.dialogData;\r\n        }\r\n    }\r\n\r\n    onOkButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         class=\\\"margin-top\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutGap=\\\"6px\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             class=\\\"margin-yep\\\">\\r\\n            <div fxFlex=\\\"18%\\\">\\r\\n                <h5>\\r\\n                    Run Year End Process for\\r\\n                </h5>\\r\\n            </div>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <atlas-year-picker [isEditable]=\\\"true\\\"\\r\\n                                   label=\\\"Year\\\"\\r\\n                                   [max]=\\\"maxYear\\\"\\r\\n                                   [errorMap]=\\\"yearErrorMap\\\"\\r\\n                                   [fieldControl]=\\\"yearCtrl\\\">\\r\\n                </atlas-year-picker>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"10%\\\"\\r\\n                 class=\\\"margin-fn\\\">\\r\\n                <mat-slide-toggle (click)=\\\"onFinalRunButtonClicked()\\\"\\r\\n                                  [formControl]=\\\"\\r\\n                              finalRunCtrl\\\">Final Run</mat-slide-toggle>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"15%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"reserveAccountCtrl\\\"\\r\\n                                                         label=\\\"B/S Reserve Account\\\"\\r\\n                                                         [options]=\\\"filteredReserveAccounts\\\"\\r\\n                                                         displayProperty=\\\"accountNumber\\\"\\r\\n                                                         [errorMap]=\\\"reserveAccountErrorMap\\\"\\r\\n                                                         [selectProperties]=\\\"['accountNumber','mainAccountTitle']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for DealNominal Account\\\"\\r\\n                                                         gridId=\\\"nominalAccountsGrid\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onDisplayPLClearanceButtonClicked()\\\">\\r\\n                    Display P&L Clearance\\r\\n                </button>\\r\\n            </div>\\r\\n            <div>\\r\\n                <button mat-raised-button\\r\\n                        [disabled]=\\\"!isDisplayButtonClicked\\\"\\r\\n                        (click)=\\\"onPostingButtonClicked()\\\">\\r\\n                    Generate Posting\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div ag-grid=\\\"yearEndGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             class=\\\"margin-top\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material grid-size\\\"\\r\\n                             [rowData]=\\\"yearEndGridRows\\\"\\r\\n                             [columnDefs]=\\\"yearEndGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"20\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </div>\"","module.exports = \".margin-top {\\n  margin-top: 45px; }\\n\\n.margin-yep {\\n  margin-top: 20px; }\\n\\n.margin-fn {\\n  margin-top: 15px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { MatDatepicker, MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { inDropdownListValidator } from '../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../shared/entities/nominal-account.entity';\r\nimport { YearEndProcessDisplayView } from '../../../../shared/models/year-end-process-display-view';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { YearEndProcessCommand } from '../../../../shared/services/execution/year-end-process-command';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { nameof } from '../../../../shared/services/util.service';\r\nimport { GenerateEndOfYearWarningMessageComponent } from './cards/generate-end-of-year-warning-message/generate-end-of-year-warning-message.component';\r\n\r\n@Component({\r\n    selector: 'atlas-generate-end-of-year',\r\n    templateUrl: './generate-end-of-year.component.html',\r\n    styleUrls: ['./generate-end-of-year.component.scss'],\r\n})\r\nexport class GenerateEndOfYearComponent implements OnInit {\r\n    yearCtrl = new AtlasFormControl('year');\r\n    finalRunCtrl = new AtlasFormControl('finalRunCtrl');\r\n    reserveAccountCtrl = new AtlasFormControl('reserveAccountCtrl');\r\n    filteredNominalAccounts: NominalAccount[];\r\n    filteredReserveAccounts: NominalAccount[];\r\n    masterdata: MasterData;\r\n    maxYear = new Date(2019, 12, 31);\r\n    company: string;\r\n    yearEndGridOptions: agGrid.GridOptions = {};\r\n    yearEndGridRows: YearEndProcessDisplayView[];\r\n    yearEndGridColumns: agGrid.ColDef[];\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    year: number;\r\n    isDisplayButtonClicked: boolean = false;\r\n    isFinalRunEnable: boolean = false;\r\n    isCompanyFrozen: boolean = false;\r\n\r\n    yearErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n\r\n    reserveAccountErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');\r\n\r\n    constructor(protected route: ActivatedRoute,\r\n        private companyManager: CompanyManagerService,\r\n        private executionService: ExecutionService,\r\n        protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        public gridService: AgGridService) {\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        let value: NominalAccount;\r\n        value = this.masterdata.nominalAccounts.find((e) => e.accountNumber === '32001000');\r\n        this.reserveAccountCtrl.patchValue(value.accountNumber);\r\n        this.filteredNominalAccounts = this.masterdata.nominalAccounts.filter((e) => e.accountType !== 'P');\r\n        this.filteredNominalAccounts = this.filteredNominalAccounts.map(\r\n            (nominal) => {\r\n                nominal.accountNumber = nominal.accountNumber;\r\n                nominal.mainAccountTitle = nominal.shortDescription;\r\n                return nominal;\r\n            });\r\n\r\n        this.filteredReserveAccounts = this.filteredNominalAccounts;\r\n        this.setValidators();\r\n        this.initializeGridColumns();\r\n        this.isCompanyFrozen = this.companyManager.getCompany(this.company).isFrozen;\r\n    }\r\n\r\n    onFinalRunButtonClicked() {\r\n        this.isFinalRunEnable = this.isFinalRunEnable ? false : true;\r\n    }\r\n    onGridReady(params) {\r\n\r\n        this.yearEndGridOptions.api = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        params.columnDefs = this.yearEndGridColumns;\r\n        this.yearEndGridOptions = params;\r\n        this.gridService.sizeColumns(params);\r\n    }\r\n\r\n    initializeGridColumns() {\r\n\r\n        this.yearEndGridColumns = [\r\n            {\r\n                headerName: 'Nominal Account',\r\n                field: 'accountNumber',\r\n                colId: 'accountNumber',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n\r\n            {\r\n                headerName: 'Account Description',\r\n                field: 'mainAccountTitle',\r\n                colId: 'mainAccountTitle',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Ccy',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n                editable: false,\r\n\r\n            },\r\n            {\r\n                headerName: 'USD EQ',\r\n                field: 'valueInFunctionalCurrency',\r\n                colId: 'valueInFunctionalCurrency',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'CHF EQ',\r\n                field: 'valueInStatutoryCurrency',\r\n                colId: 'valueInStatutoryCurrency',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentId',\r\n                colId: 'departmentId',\r\n                hide: false,\r\n                editable: false,\r\n                valueFormatter: this.departmentFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    departmentFormatter(params) {\r\n        const department = this.masterdata.departments.find((dept) => dept.departmentId === params.value);\r\n        return department ? department.description : '';\r\n    }\r\n\r\n    setValidators() {\r\n        this.reserveAccountCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.masterdata.nominalAccounts,\r\n                nameof<NominalAccount>('accountNumber'),\r\n            ),\r\n            ]),\r\n        );\r\n        this.yearCtrl.setValidators(Validators.required);\r\n    }\r\n\r\n    onDisplayPLClearanceButtonClicked() {\r\n\r\n        if (this.yearCtrl.value) {\r\n            this.year = this.yearCtrl.value._i.year;\r\n            this.executionService\r\n                .GetYearEndProcessLines(this.year)\r\n                .subscribe(((data) => {\r\n                    if (data.value) {\r\n                        this.yearEndGridRows = data.value;\r\n                        if (!this.isCompanyFrozen) {\r\n                            this.isDisplayButtonClicked = true;\r\n\r\n                        }\r\n\r\n                    }\r\n                }),\r\n                );\r\n        }\r\n    }\r\n\r\n    onPostingButtonClicked() {\r\n        const yearEndProcessCommand = new YearEndProcessCommand();\r\n        yearEndProcessCommand.year = this.year;\r\n        yearEndProcessCommand.isFinalRun = this.isFinalRunEnable;\r\n        if (this.reserveAccountCtrl.value) {\r\n            const nominalAccount = this.filteredNominalAccounts.find((value) =>\r\n                value.accountNumber === this.reserveAccountCtrl.value);\r\n            if (nominalAccount) {\r\n                yearEndProcessCommand.bsReserveAccountId = nominalAccount.nominalAccountId;\r\n            }\r\n        }\r\n        this.executionService\r\n            .GenerateYearEndProcessPostingReport(yearEndProcessCommand)\r\n            .subscribe(((data) => {\r\n                if (data) {\r\n                    const accountingImportReportMsgDialog = this.dialog.open(GenerateEndOfYearWarningMessageComponent, {\r\n                        data,\r\n                        width: '80%',\r\n                        height: '80%',\r\n                    });\r\n                }\r\n            }),\r\n            );\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav mat-tab-nav-bar>\\r\\n            <div>\\r\\n                <a mat-tab-link\\r\\n                   *ifAuthorized=\\\"routeLinks[0].privilege,company:this.company\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLinks[0])\\\">\\r\\n                    {{ routeLinks[0].label }}\\r\\n                </a>\\r\\n            </div>\\r\\n            <div *ngFor=\\\"let routeLink of routeLinks | slice:2\\\">\\r\\n                <a mat-tab-link\\r\\n                   *ifAuthorized=\\\"routeLink.privilege,company:this.company\\\"\\r\\n                   [routerLink]=\\\"routeLink.link\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLink)\\\">\\r\\n                    {{ routeLink.label }}\\r\\n                </a>\\r\\n            </div>\\r\\n            <div>\\r\\n                <button mat-button\\r\\n                        class=\\\"report-option\\\"\\r\\n                        [matMenuTriggerFor]=\\\"fxReport\\\">\\r\\n                    <a mat-tab-link\\r\\n                       *ifAuthorized=\\\"routeLinks[0].privilege,company:this.company\\\"\\r\\n                       routerLinkActive\\r\\n                       #rla=\\\"routerLinkActive\\\"\\r\\n                       [active]=\\\"isActive(routeLinks[0])\\\">\\r\\n                        {{ routeLinks[1].label }}\\r\\n                    </a>\\r\\n                </button>\\r\\n                <mat-menu #fxReport=\\\"matMenu\\\"\\r\\n                          [overlapTrigger]=\\\"false\\\"\\r\\n                          xPosition=\\\"after\\\">\\r\\n                    <button mat-menu-item\\r\\n                            (click)=\\\"onExchangeButtonClicked()\\\">Exchange Rate Reports</button>\\r\\n                </mat-menu>\\r\\n            </div>\\r\\n        </nav>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".header-tab {\\n  margin-bottom: 0px;\\n  margin-top: -19px;\\n  background-color: white !important; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n.mat-menu-content {\\n  padding-top: 0 !important; }\\n\\n.floating-menu {\\n  top: -1px; }\\n\\n::ng-deep.dark-tab.mat-tab-nav-bar.mat-primary,\\n.dark-tab .mat-tab-link,\\n.dark-tab .mat-tab-label .mat-tab-label-content {\\n  text-transform: none !important;\\n  color: #332f30 !important;\\n  opacity: 0.6; }\\n\\n.report-option {\\n  margin-top: 0px;\\n  height: 100%;\\n  color: #332f30 !important; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-market-data-tab-group',\r\n    templateUrl: './market-data-tab-group.component.html',\r\n    styleUrls: ['./market-data-tab-group.component.scss'],\r\n})\r\nexport class MarketDataTabGroupComponent implements OnInit {\r\n    routeLinks = [\r\n        {\r\n            label: 'EXCHANGE RATES',\r\n            index: 0,\r\n            privilege: 'Financials.AccountingEntries',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/fx/rates',\r\n        },\r\n        {\r\n            label: 'REPORTS',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/reporting/globalreports/historicalrates',\r\n            index: 1,\r\n            privilege: 'Financials',\r\n        },\r\n        {\r\n            label: 'MARKET PRICES',\r\n            index: 2,\r\n            privilege: 'Financials.AccountingEntries.CreateDeleteMatchFlag',\r\n        },\r\n        {\r\n            label: 'CASH MARKET PRICES',\r\n            index: 3,\r\n            privilege: 'Financials.POSTINGMGT',\r\n        },\r\n    ];\r\n    activeLinkIndex = 0;\r\n    company: string;\r\n\r\n    constructor(private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        private route: ActivatedRoute) {\r\n        this.activeLinkIndex = this.routeLinks.indexOf(this.routeLinks.find((tab) => this.router.url.includes(tab.link)));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    isActive(routeLink: any) {\r\n        return this.activeLinkIndex === routeLink.index;\r\n    }\r\n    onExchangeButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/reporting/globalreports/historicalrates/']);\r\n\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"20px\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h2 class=\\\"no-margin\\\">FX Rates</h2>\\r\\n        <span class=\\\"fill-space\\\"></span> <button mat-icon-button\\r\\n                [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n        </button>\\r\\n        <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n        <div fxFlex=\\\"3%\\\">\\r\\n            <div *ngIf=\\\"selectedViewParams.type === ForeignExchangeRateViewMode.Daily\\\">\\r\\n                <button mat-icon-button\\r\\n                        *ifAuthorized=\\\"'Financials.MarketData',company:company, level: PermissionLevels.ReadWrite\\\"\\r\\n                        matTooltip=\\\"Edit\\\"\\r\\n                        (click)=\\\"onEditButtonClicked()\\\">\\r\\n                    <mat-icon [ngClass]=\\\"{'is-selected':editMode}\\\">edit</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"agGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             [rowData]=\\\"rowData\\\"\\r\\n                             enableColResize=true\\r\\n                             pagination=true\\r\\n                             singleClickEdit=true\\r\\n                             paginationPageSize=10\\r\\n                             enableSorting=true\\r\\n                             domLayout=autoHeight\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [rowClassRules]=\\\"rowClassRules\\\"\\r\\n                             [excelStyles]=\\\"excelStyles\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".is-selected {\\n  color: #185b9d; }\\n\\n.atlas-grid-card-header {\\n  min-height: 40px; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CellValueChangedEvent, ColDef, ColumnApi, GridOptions } from 'ag-grid-community';\r\nimport { finalize, map } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { FormatDatePipe } from '../../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CellEditorAtlasNumericComponent } from './../../../../../../shared/components/cell-editor-numeric/cell-editor-atlas-numeric/cell-editor-atlas-numeric.component';\r\nimport { ConfirmationDialogComponent } from './../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AtlasAgGridParam } from './../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasNumber } from './../../../../../../shared/entities/atlas-number.entity';\r\nimport { ForeignExchangeRateDisplayView } from './../../../../../../shared/entities/foreign-exchange-rate-display-view.entity';\r\nimport { ForeignExchangeRate } from './../../../../../../shared/entities/foreign-exchange/foreign-exchange-rate.entity';\r\nimport { ForeignExchangeRateCreationMode } from './../../../../../../shared/enums/foreign-exchange-rate-creationmode.enum';\r\nimport { ForeignExchangeRateViewMode } from './../../../../../../shared/enums/foreign-exchange-rate-viewmode.enum';\r\nimport { PermissionLevels } from './../../../../../../shared/enums/permission-level.enum';\r\nimport { CustomNumberMask } from './../../../../../../shared/numberMask';\r\nimport { ApiCollection } from './../../../../../../shared/services/common/models';\r\nimport { ForeignExchangeService } from './../../../../../../shared/services/http-services/foreign-exchange.service';\r\nimport { SnackbarService } from './../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from './../../../../../../shared/services/ui.service';\r\nimport { FxRatesSelectedType } from './../../../../../entities/fx-rates-selected-type.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-foreign-exchange-rates-grid',\r\n    templateUrl: './foreign-exchange-rates-grid.component.html',\r\n    styleUrls: ['./foreign-exchange-rates-grid.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class ForeignExchangeRatesGridComponent implements OnInit {\r\n    selectedViewParams: FxRatesSelectedType = new FxRatesSelectedType();\r\n    company: string;\r\n    editMode = false;\r\n\r\n    @Output() readonly editClicked = new EventEmitter<boolean>();\r\n\r\n    // Grid variables\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridOptions: GridOptions;\r\n    columnApi: ColumnApi;\r\n    userActiveDirectoryName: string;\r\n    checkExportedFormat: boolean = false;\r\n    excelStyles: any;\r\n    PermissionLevels = PermissionLevels;\r\n    gridComponents = {\r\n        atlasNumericCellEditor: CellEditorAtlasNumericComponent,\r\n    };\r\n    cellEditorParamsPositif = {\r\n        displayMask: CustomNumberMask(12, 10, false),\r\n        isRightAligned: false,\r\n    };\r\n    cellEditorParamsPositifAndNegatif = {\r\n        displayMask: CustomNumberMask(12, 10, true),\r\n        isRightAligned: false,\r\n    };\r\n    rowClassRules = {\r\n        bold: (params) => {\r\n            return params.data.highlight;\r\n        },\r\n    };\r\n\r\n    columnDefs: ColDef[] = [\r\n        {\r\n            headerName: 'Currency',\r\n            colId: 'currencyCode',\r\n            field: 'currencyCode',\r\n        },\r\n        {\r\n            headerName: 'Description',\r\n            colId: 'description',\r\n            field: 'currencyDescription',\r\n        },\r\n        {\r\n            headerName: 'Rate Type',\r\n            colId: 'rateType',\r\n            field: 'rateType',\r\n        },\r\n        {\r\n            headerName: 'Date',\r\n            colId: 'date',\r\n            field: 'date',\r\n            valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.date);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'ROE to USD',\r\n            colId: 'exchangeRate',\r\n            field: 'exchangeRate',\r\n            cellEditor: 'atlasNumericCellEditor',\r\n            cellEditorParams: this.cellEditorParamsPositif,\r\n            editable: this.isCellEditable.bind(this),\r\n            cellStyle: { textAlign: 'left' },\r\n        },\r\n        {\r\n            headerName: '1 month',\r\n            colId: 'oneMonthForwardPeriodPoints',\r\n            field: 'oneMonthForwardPeriodPoints',\r\n            cellEditor: 'atlasNumericCellEditor',\r\n            cellEditorParams: this.cellEditorParamsPositifAndNegatif,\r\n            editable: this.isCellEditable.bind(this),\r\n            cellStyle: { textAlign: 'left' },\r\n        },\r\n        {\r\n            headerName: '2 month',\r\n            colId: 'twoMonthsForwardPeriodPoints',\r\n            field: 'twoMonthsForwardPeriodPoints',\r\n            cellEditor: 'atlasNumericCellEditor',\r\n            cellEditorParams: this.cellEditorParamsPositifAndNegatif,\r\n            editable: this.isCellEditable.bind(this),\r\n            cellStyle: { textAlign: 'left' },\r\n        },\r\n        {\r\n            headerName: '3 month',\r\n            colId: 'threeMonthsForwardPeriodPoints',\r\n            field: 'threeMonthsForwardPeriodPoints',\r\n            cellEditor: 'atlasNumericCellEditor',\r\n            cellEditorParams: this.cellEditorParamsPositifAndNegatif,\r\n            editable: this.isCellEditable.bind(this),\r\n            cellStyle: { textAlign: 'left' },\r\n        },\r\n        {\r\n            headerName: '6 month',\r\n            colId: 'sixMonthsForwardPeriodPoints',\r\n            field: 'sixMonthsForwardPeriodPoints',\r\n            cellEditor: 'atlasNumericCellEditor',\r\n            cellEditorParams: this.cellEditorParamsPositifAndNegatif,\r\n            editable: this.isCellEditable.bind(this),\r\n            cellStyle: { textAlign: 'left' },\r\n        },\r\n        {\r\n            headerName: '1 year',\r\n            colId: 'oneYearForwardPeriodPoints',\r\n            field: 'oneYearForwardPeriodPoints',\r\n            cellEditor: 'atlasNumericCellEditor',\r\n            cellEditorParams: this.cellEditorParamsPositifAndNegatif,\r\n            editable: this.isCellEditable.bind(this),\r\n            cellStyle: { textAlign: 'left' },\r\n        },\r\n        {\r\n            headerName: '2 year',\r\n            colId: 'twoYearForwardPeriodPoints',\r\n            field: 'twoYearForwardPeriodPoints',\r\n            cellEditor: 'atlasNumericCellEditor',\r\n            cellEditorParams: this.cellEditorParamsPositifAndNegatif,\r\n            editable: this.isCellEditable.bind(this),\r\n            cellStyle: { textAlign: 'left' },\r\n        },\r\n        {\r\n            headerName: 'Time',\r\n            colId: 'time',\r\n            field: 'time',\r\n        },\r\n        {\r\n            headerName: 'Creation Mode',\r\n            colId: 'creationMode',\r\n            field: 'creationMode',\r\n        },\r\n        {\r\n            headerName: 'Last Amended by',\r\n            colId: 'lastAmendmentBy',\r\n            field: 'lastAmendmentBy',\r\n        },\r\n        {\r\n            headerName: 'Last Amended on',\r\n            colId: 'lastAmendmentOn',\r\n            field: 'lastAmendmentOn',\r\n            valueFormatter: this.uiService.dateFormatter,\r\n            cellClass: 'dateFormat',\r\n            valueGetter: (params) => {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const val = dateFormat.transformdate(params.data.lastAmendmentOn);\r\n\r\n                if (val) {\r\n                    if (val.indexOf('/') < 0) {\r\n                        return val;\r\n                    } else {\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    ];\r\n\r\n    fxRates: ForeignExchangeRateDisplayView[] = [];\r\n    rowData: ForeignExchangeRateDisplayView[] = [];\r\n    ForeignExchangeRateViewMode = ForeignExchangeRateViewMode;\r\n\r\n    isLoading = true;\r\n\r\n    constructor(private uiService: UiService,\r\n        private foreignExchangeService: ForeignExchangeService,\r\n        private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService,\r\n        private formatDate: FormatDatePipe,\r\n        private datePipe: DatePipe,\r\n        protected dialog: MatDialog,\r\n        private authorizationService: AuthorizationService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n        this.company = route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.columnDefs;\r\n        this.gridOptions = params;\r\n        this.gridOptions.api.setRowData(this.rowData);\r\n        this.columnApi = params.columnApi;\r\n\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    autoSizeGridHeader() {\r\n        this.columnApi.autoSizeColumns(this.columnDefs.map((column) => column.field));\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGridHeader();\r\n    }\r\n\r\n    updateGrid(selectedViewParams: FxRatesSelectedType): void {\r\n        const dataHasToBeLoaded = this.selectedViewParams.date !== selectedViewParams.date ||\r\n            this.selectedViewParams.type !== selectedViewParams.type;\r\n        this.selectedViewParams = selectedViewParams;\r\n        if (dataHasToBeLoaded) {\r\n            this.getData();\r\n        } else {\r\n            this.viewChanged();\r\n        }\r\n    }\r\n\r\n    /* dateHide(): void {\r\n         if (this.gridOptions && this.gridOptions.columnApi) {\r\n             this.columnDefs.filter((column) => column.colId === 'date')\r\n                 .map((column) => column.hide = this.selectedViewParams.type === ForeignExchangeRateViewMode.Daily);\r\n             this.gridOptions.columnApi.setColumnVisible('date', this.selectedViewParams.type !== ForeignExchangeRateViewMode.Daily);\r\n         }\r\n     }*/\r\n\r\n    getData(dataToHilight: ForeignExchangeRate[] = []) {\r\n        this.isLoading = true;\r\n        this.rowData = [];\r\n        this.foreignExchangeService.getForeignExchangeRates(this.selectedViewParams.date.toDate(), this.selectedViewParams.type, this.selectedViewParams.inactiveCurrencies)\r\n            .pipe(\r\n                map((result: ApiCollection<ForeignExchangeRate>) => {\r\n                    this.fxRates = result.value\r\n                        .map((foreignExchangeRate: ForeignExchangeRate) => {\r\n                            const rateLoaded = new ForeignExchangeRateDisplayView(foreignExchangeRate);\r\n                            if (dataToHilight.filter((data) => data.currencyCode === rateLoaded.currencyCode).length > 0) {\r\n                                rateLoaded.highlight = true;\r\n                            }\r\n                            return rateLoaded;\r\n                        });\r\n                }),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                })).subscribe(() => {\r\n                    this.viewChanged();\r\n                });\r\n    }\r\n\r\n    viewChanged() {\r\n        this.rowData = !this.selectedViewParams.inactiveCurrencies ?\r\n            this.fxRates.filter((rate) => !rate.isInactive) : this.fxRates;\r\n\r\n        if (this.gridOptions && this.gridOptions.api) {\r\n            this.gridOptions.api.setRowData(this.rowData);\r\n        }\r\n    }\r\n\r\n    isCellEditable(params): boolean {\r\n        if (!this.editMode || params.colDef.colId === 'exchangeRate') {\r\n            return this.editMode;\r\n        }\r\n\r\n        let result = false;\r\n\r\n        const rowData: ForeignExchangeRateDisplayView = params.data;\r\n        if (rowData.exchangeRate) {\r\n            const exchangeRate = new AtlasNumber(rowData.exchangeRate);\r\n            if (exchangeRate.strictlyBiggerThan(0)) {\r\n                result = true;\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n\r\n    onEditButtonClicked() {\r\n        this.editMode = !this.editMode;\r\n        this.editClicked.emit(this.editMode);\r\n        if (this.editMode) {\r\n            this.viewChanged();\r\n        } else {\r\n            this.getData();\r\n        }\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.editMode = false;\r\n\r\n        const rowsToSave: ForeignExchangeRate[] = this.rowData\r\n            .filter((row: ForeignExchangeRateDisplayView) => row.isTouched)\r\n            .map((row: ForeignExchangeRateDisplayView) => {\r\n                const rate: ForeignExchangeRate = {\r\n                    currencyCode: row.currencyCode,\r\n                    currencyDescription: row.currencyDescription,\r\n                    currencyRoeType: row.rateType,\r\n                    date: this.selectedViewParams.date.toDate(),\r\n                    rate: row.exchangeRate,\r\n                    fwdMonth1: row.oneMonthForwardPeriodPoints,\r\n                    fwdMonth2: row.twoMonthsForwardPeriodPoints,\r\n                    fwdMonth3: row.threeMonthsForwardPeriodPoints,\r\n                    fwdMonth6: row.sixMonthsForwardPeriodPoints,\r\n                    fwdYear1: row.oneYearForwardPeriodPoints,\r\n                    fwdYear2: row.twoYearForwardPeriodPoints,\r\n                    currencyIsDeactivated: row.isInactive,\r\n                    createdBy: null,\r\n                    createdDateTime: null,\r\n                    modifiedBy: null,\r\n                    modifiedDateTime: null,\r\n                    creationMode: ForeignExchangeRateCreationMode[ForeignExchangeRateCreationMode.Manual],\r\n                    time: null,\r\n                };\r\n                return rate;\r\n            });\r\n\r\n        this.foreignExchangeService.importForeignExchangeRates(rowsToSave).subscribe(() => {\r\n            this.getData(rowsToSave);\r\n        });\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.editMode = false;\r\n                this.getData();\r\n            }\r\n        });\r\n    }\r\n\r\n    onCellValueChanged(event: CellValueChangedEvent) {\r\n        const row = event.data;\r\n        const isBiggerThanZero = (new AtlasNumber(row.exchangeRate)).strictlyBiggerThan(0);\r\n\r\n        if (!row.exchangeRate || !isBiggerThanZero) {\r\n            row.oneMonthForwardPeriodPoints = null;\r\n            row.oneYearForwardPeriodPoints = null;\r\n            row.sixMonthsForwardPeriodPoints = null;\r\n            row.threeMonthsForwardPeriodPoints = null;\r\n            row.twoMonthsForwardPeriodPoints = null;\r\n            row.twoYearForwardPeriodPoints = null;\r\n        }\r\n        row.isTouched = true;\r\n\r\n        this.gridOptions.api.setRowData(this.fxRates);\r\n    }\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = 'FX Rates';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridOptions.api.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'FX Rates';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridOptions.api.exportDataAsCsv(params);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start start\\\">\\r\\n            <h2>View Options</h2>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start end\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <div *ngIf=\\\"foreignExchangeTypeCtrl.value === ForeignExchangeRateViewMode.Daily\\\">\\r\\n                <atlas-file-upload-dialog-box *ifAuthorized=\\\"'Financials.MarketData',company:company, level: PermissionLevels.ReadWrite\\\"\\r\\n                                              #fileUploadDialogBoxComponent\\r\\n                                              [docType]=\\\"selectedDocType\\\"\\r\\n                                              (documentSelected)=\\\"ondocumentSelected($event)\\\">\\r\\n                </atlas-file-upload-dialog-box>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div class=\\\"min-height\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                     [formControl]=\\\"foreignExchangeTypeCtrl\\\"\\r\\n                                     aria-label=\\\"Date / Period rates to be maintained\\\"\\r\\n                                     [disabled]=\\\"editMode\\\">\\r\\n                <mat-button-toggle [value]=\\\"ForeignExchangeRateViewMode.Spot\\\"\\r\\n                                   [disabled]=\\\"editMode\\\">{{ForeignExchangeRateViewMode.Spot}}</mat-button-toggle>\\r\\n                <mat-button-toggle [value]=\\\"ForeignExchangeRateViewMode.Daily\\\"\\r\\n                                   [disabled]=\\\"editMode\\\">{{ForeignExchangeRateViewMode.Daily}}</mat-button-toggle>\\r\\n                <mat-button-toggle [value]=\\\"ForeignExchangeRateViewMode.Monthly\\\"\\r\\n                                   [disabled]=\\\"editMode\\\">{{ForeignExchangeRateViewMode.Monthly}}</mat-button-toggle>\\r\\n            </mat-button-toggle-group>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 [class.isEmpty]=\\\"!dateCtrl.value\\\"\\r\\n                 *ngIf=\\\"foreignExchangeTypeCtrl.value === ForeignExchangeRateViewMode.Daily\\\"\\r\\n                 [class.required-field]=\\\"dateCtrl.isRequired\\\">\\r\\n                <atlas-date-picker isEditable=true\\r\\n                                   [disabled]=\\\"editMode\\\"\\r\\n                                   label=\\\"Date\\\"\\r\\n                                   [fieldControl]=\\\"dateCtrl\\\">\\r\\n                </atlas-date-picker>\\r\\n            </div>\\r\\n            <atlas-month-date-picker *ngIf=\\\"foreignExchangeTypeCtrl.value === ForeignExchangeRateViewMode.Monthly\\\"\\r\\n                                     isEditable=true\\r\\n                                     [disabled]=\\\"editMode\\\"\\r\\n                                     label=\\\"Date\\\"\\r\\n                                     [fieldControl]=\\\"dateCtrl\\\">\\r\\n            </atlas-month-date-picker>\\r\\n\\r\\n            <mat-slide-toggle [formControl]=\\\"inactiveCurrenciesCtrl\\\"\\r\\n                              [disabled]=\\\"editMode\\\"\\r\\n                              mat-raised-button>Inactive Currencies\\r\\n            </mat-slide-toggle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".min-height {\\n  min-height: 57px; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { ManualImportReport } from '../../../../../../shared/entities/manualImportReport.entity';\r\nimport { WarningErrorMsgDialogComponent } from '../../../warning-error-msg-dialog/warning-error-msg-dialog.component';\r\nimport { FileUploadDialogBoxComponent } from './../../../../../../shared/components/file-upload-dialog-box/file-upload-dialog-box.component';\r\nimport { AtlasFormControl } from './../../../../../../shared/entities/atlas-form-control';\r\nimport { ForeignExchangeRateViewMode } from './../../../../../../shared/enums/foreign-exchange-rate-viewmode.enum';\r\nimport { PermissionLevels } from './../../../../../../shared/enums/permission-level.enum';\r\nimport { ForeignExchangeService } from './../../../../../../shared/services/http-services/foreign-exchange.service';\r\nimport { SnackbarService } from './../../../../../../shared/services/snackbar.service';\r\nimport { FxRatesSelectedType } from './../../../../../entities/fx-rates-selected-type.entity';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-foreign-exchange-rates-select-types',\r\n    templateUrl: './foreign-exchange-rates-select-types.component.html',\r\n    styleUrls: ['./foreign-exchange-rates-select-types.component.scss'],\r\n})\r\nexport class ForeignExchangeRatesSelectTypesComponent implements OnInit {\r\n    @ViewChild('fileUploadDialogBoxComponent') fileUploadDialogBoxComponent: FileUploadDialogBoxComponent;\r\n    dateCtrl = new AtlasFormControl('Date', this.companyManager.getCurrentCompanyDate(), Validators.required);\r\n    foreignExchangeTypeCtrl = new AtlasFormControl('ForeignExchangeTypeCtrl');\r\n    inactiveCurrenciesCtrl = new AtlasFormControl('InactiveCurrencies');\r\n    ForeignExchangeRateViewMode = ForeignExchangeRateViewMode;\r\n    company: string;\r\n    formGroup: FormGroup;\r\n    selectedDocType = '.csv';\r\n    selectedFile: File;\r\n    progressbar: boolean;\r\n    objectKeys = Object.keys;\r\n    disableConfirmImport: boolean = false;\r\n    PermissionLevels = PermissionLevels;\r\n    @Input() editMode = false;\r\n    @Output() readonly selectedViewParams = new EventEmitter<FxRatesSelectedType>();\r\n\r\n    constructor(\r\n        private router: Router,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        private foreignExchangeService: ForeignExchangeService,\r\n    ) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getFormGroup();\r\n    }\r\n\r\n    getFormGroup(): FormGroup {\r\n        this.formGroup = this.formBuilder.group({\r\n            dateCtrl: this.dateCtrl,\r\n            foreignExchangeTypeCtrl: this.foreignExchangeTypeCtrl,\r\n            inactiveCurrenciesCtrl: this.inactiveCurrenciesCtrl,\r\n        });\r\n\r\n        this.setDefaultValues();\r\n\r\n        this.formGroup.valueChanges.subscribe(() => {\r\n            if ((this.foreignExchangeTypeCtrl.value === ForeignExchangeRateViewMode.Daily ||\r\n                this.foreignExchangeTypeCtrl.value === ForeignExchangeRateViewMode.Monthly) &&\r\n                !this.dateCtrl.valid) {\r\n                return;\r\n            }\r\n            this.selectedViewParams.emit(this.getValuesFromForm());\r\n        });\r\n\r\n        // we need to emit one during initialization\r\n        this.selectedViewParams.emit(this.getValuesFromForm());\r\n\r\n        return this.formGroup;\r\n    }\r\n\r\n    setDefaultValues(): void {\r\n        const selectedViewParams: FxRatesSelectedType = new FxRatesSelectedType();\r\n\r\n        this.dateCtrl.setValue(selectedViewParams.date);\r\n        this.foreignExchangeTypeCtrl.setValue(selectedViewParams.type);\r\n        this.inactiveCurrenciesCtrl.setValue(selectedViewParams.inactiveCurrencies);\r\n    }\r\n\r\n    getValuesFromForm(): FxRatesSelectedType {\r\n        const selectedViewParams: FxRatesSelectedType = new FxRatesSelectedType();\r\n\r\n        selectedViewParams.date = moment(this.dateCtrl.value);\r\n        selectedViewParams.type = this.foreignExchangeTypeCtrl.value;\r\n        selectedViewParams.inactiveCurrencies = this.inactiveCurrenciesCtrl.value;\r\n\r\n        return selectedViewParams;\r\n    }\r\n\r\n    onImportExchangeRatesClicked() {\r\n        this.fileUploadDialogBoxComponent.docType = this.selectedDocType;\r\n    }\r\n\r\n    ondocumentSelected(file: File) {\r\n        const fileName = file.name;\r\n        let importId: string;\r\n        const fileType = fileName.substr(fileName.lastIndexOf('.') + 1);\r\n        if (fileType === 'csv') {\r\n            this.foreignExchangeService.fileUpload(file).subscribe((data: ManualImportReport) => {\r\n                this.progressbar = false;\r\n                if (data) {\r\n                    importId = data.importId;\r\n                    const goodDataResult = this.objectKeys(data.goodData.lineNumberWithCurrency);\r\n\r\n                    if (data.warningData.length === 0 && goodDataResult.length === 0 && data.blockerData.length > 0) {\r\n                        this.disableConfirmImport = true;\r\n                        data.disableConfirmImport = this.disableConfirmImport;\r\n                    } else {\r\n                        this.disableConfirmImport = false;\r\n                        data.disableConfirmImport = this.disableConfirmImport;\r\n                    }\r\n                    const manualImportReportMsgDialog = this.dialog.open(WarningErrorMsgDialogComponent, {\r\n                        data,\r\n                        width: '80%',\r\n                        height: '80%',\r\n                    });\r\n                    manualImportReportMsgDialog.afterClosed().subscribe((answer) => {\r\n                        if (answer) {\r\n                            if (answer.toBeImported) {\r\n                                this.foreignExchangeService.confirmImport(importId).subscribe(() => { });\r\n                                const goodDataResult = this.objectKeys(data.goodData.lineNumberWithCurrency);\r\n                                const result = this.objectKeys(data.blockerData.length);\r\n\r\n                                if (data.blockerData.length > 0 && (data.warningData.length > 0 || goodDataResult.length > 0)) {\r\n                                    this.snackbarService.informationSnackBar('Import was successful. Please note that some rates could not have been imported.');\r\n                                } else if (data.blockerData.length === 0 && (goodDataResult.length > 0 || data.warningData.length > 0)) {\r\n                                    this.snackbarService.informationSnackBar('Import was successful.');\r\n                                } else if (goodDataResult.length === 0 && data.warningData.length === 0) {\r\n                                    this.snackbarService.informationSnackBar('Import was unsuccessful.');\r\n                                }\r\n                            } else {\r\n                                this.foreignExchangeService.cancelImport(importId).subscribe(() => { });\r\n                            }\r\n                            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n                                '/financial/fx/rates']);\r\n\r\n                            this.progressbar = false;\r\n                        } else {\r\n                            manualImportReportMsgDialog.close();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Only csv files are allowed to be selected');\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","module.exports = \"<atlas-financial-tab-group></atlas-financial-tab-group>\\r\\n<atlas-market-data-tab-group></atlas-market-data-tab-group>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <atlas-foreign-exchange-rates-select-types (selectedViewParams)=\\\"onSelectedViewParamsChanged($event)\\\"\\r\\n                                               [editMode]=\\\"editMode\\\"></atlas-foreign-exchange-rates-select-types>\\r\\n    <atlas-foreign-exchange-rates-grid #grid\\r\\n                                       (editClicked)=\\\"onEditButtonClicked($event)\\\"></atlas-foreign-exchange-rates-grid>\\r\\n\\r\\n    <div *ngIf=\\\"editMode\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"space-between start\\\">\\r\\n        <button type=\\\"button\\\"\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                mat-button>Discard</button>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button type=\\\"submit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\"\\r\\n                mat-raised-button>Save</button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FxRatesSelectedType } from './../../../entities/fx-rates-selected-type.entity';\r\nimport { ForeignExchangeRatesGridComponent } from './cards/grid/foreign-exchange-rates-grid.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { MatDialog } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-foreign-exchange-rates',\r\n    templateUrl: './foreign-exchange-rates.component.html',\r\n    styleUrls: ['./foreign-exchange-rates.component.scss'],\r\n})\r\nexport class ForeignExchangeRatesComponent implements OnInit {\r\n    @ViewChild('grid') foreignExchangeRatesGridComponent: ForeignExchangeRatesGridComponent;\r\n    editMode = false;\r\n\r\n    constructor(protected dialog: MatDialog) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onSelectedViewParamsChanged(selectedViewParams: FxRatesSelectedType) {\r\n        this.foreignExchangeRatesGridComponent.updateGrid(selectedViewParams);\r\n    }\r\n\r\n    onEditButtonClicked(editMode: boolean) {\r\n        this.editMode = editMode;\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.editMode = false;\r\n        this.foreignExchangeRatesGridComponent.onSaveButtonClicked();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.editMode = false;\r\n                this.foreignExchangeRatesGridComponent.onDiscardButtonClicked();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n}\r\n","module.exports = \"<h1 mat-dialog-title>Import Exchange Rates</h1>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoading\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         *ngIf=\\\"!isLoading\\\">\\r\\n        <div class=\\\"manual-import information-banner-card\\\">\\r\\n            <div class=\\\"error\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <div *ngIf=\\\"data.blockerData.length > 0\\\">\\r\\n                    <div fxLayoutAlign=\\\"start center\\\"\\r\\n                         fxLayout=\\\"row\\\">\\r\\n                        <div class=\\\"error-circle-icon\\\"\\r\\n                             fxLayout=\\\"column\\\">\\r\\n                            <mat-icon>remove_circle</mat-icon>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\">\\r\\n                            <h4>Blocked for Import</h4>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div *ngFor=\\\"let data of dialogData.blockerData\\\">\\r\\n                        <p>{{data.errorMessage}}</p>\\r\\n                        <mat-chip-list class=\\\"chip-list\\\">\\r\\n                            <mat-chip selected\\r\\n                                      disabled\\r\\n                                      *ngFor=\\\"let key of objectKeys(data.lineNumberWithCurrency)\\\">\\r\\n                                {{'L.No: ' + key + ' - Currency: ' + data.lineNumberWithCurrency[key]}}\\r\\n                            </mat-chip>\\r\\n                        </mat-chip-list>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n            <div class=\\\"warning\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <div *ngIf=\\\"data.warningData.length> 0\\\">\\r\\n                    <div fxLayoutAlign=\\\"start center\\\"\\r\\n                         fxLayout=\\\"row\\\">\\r\\n                        <div class=\\\"warning-circle-icon\\\"\\r\\n                             fxLayout=\\\"column\\\">\\r\\n                            <mat-icon>warning_outline</mat-icon>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\">\\r\\n                            <h4>Warning for Import</h4>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div *ngFor=\\\"let data of dialogData.warningData\\\">\\r\\n                        <p>{{data.errorMessage}} </p>\\r\\n                        <mat-chip-list class=\\\"chip-list\\\">\\r\\n                            <mat-chip selected\\r\\n                                      disabled\\r\\n                                      *ngFor=\\\"let key of objectKeys(data.lineNumberWithCurrency)\\\">\\r\\n                                {{'L.No: ' + key + ' - Currency: ' + data.lineNumberWithCurrency[key]}}\\r\\n                            </mat-chip>\\r\\n                        </mat-chip-list>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n            <div class=\\\"info\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <div *ngIf=\\\"goodDataCount > 0\\\">\\r\\n                    <div fxLayoutAlign=\\\"start center\\\"\\r\\n                         fxLayout=\\\"row\\\">\\r\\n                        <div class=\\\"info-circle-green-icon\\\"\\r\\n                             fxLayout=\\\"column\\\">\\r\\n                            <mat-icon>check_circle</mat-icon>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\">\\r\\n                            <h4>Ready for Import</h4>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                        <p>{{dialogData.goodData.errorMessage}} </p>\\r\\n                        <mat-chip-list class=\\\"chip-list\\\">\\r\\n                            <mat-chip selected\\r\\n                                      disabled\\r\\n                                      *ngFor=\\\"let key of objectKeys(dialogData.goodData.lineNumberWithCurrency)\\\">\\r\\n                                {{'L.No: ' + key + ' - Currency: ' + dialogData.goodData.lineNumberWithCurrency[key]}}\\r\\n                            </mat-chip>\\r\\n                        </mat-chip-list>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n\\r\\n    <button mat-button\\r\\n            (click)=\\\"onDiscardButtonClicked()\\\">Discard</button>\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-button\\r\\n            disabled=\\\"{{this.dialogData.disableConfirmImport}}\\\"\\r\\n            (click)=\\\"onConfirmButtonClicked()\\\">Confirm Import</button>\\r\\n\\r\\n</mat-dialog-actions>\"","module.exports = \".mat-dialog-title {\\n  margin-bottom: 16px; }\\n\\n.manual-import p {\\n  font-weight: bold;\\n  font-size: 14px; }\\n\\n.mat-divider {\\n  margin-top: 16px;\\n  margin-bottom: 16px; }\\n\\nbutton {\\n  margin: 0; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ManualImportWarningErrorMsg } from '../../../../shared/entities/manualImport-warning-error-msg.entity';\r\nimport { ManualImportReport } from '../../../../shared/entities/manualImportReport.entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\n@Component({\r\n    selector: 'atlas-warning-error-msg-dialog',\r\n    templateUrl: './warning-error-msg-dialog.component.html',\r\n    styleUrls: ['./warning-error-msg-dialog.component.scss'],\r\n})\r\nexport class WarningErrorMsgDialogComponent extends BaseFormComponent implements OnInit {\r\n\r\n    isLoading = true;\r\n    objectKeys = Object.keys;\r\n    dialogData: ManualImportReport;\r\n    goodDataCount: number;\r\n    constructor(public thisDialogRef: MatDialogRef<WarningErrorMsgDialogComponent>,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        @Inject(MAT_DIALOG_DATA) public data: ManualImportReport,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isLoading = false;\r\n        this.goodDataCount = Object.keys(this.dialogData.goodData.lineNumberWithCurrency).length;\r\n        this.getDataFromObjects();\r\n    }\r\n\r\n    getDataFromObjects() {\r\n\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close({ toBeImported: false });\r\n    }\r\n\r\n    onConfirmButtonClicked() {\r\n        this.thisDialogRef.close({ toBeImported: true });\r\n    }\r\n\r\n}\r\n","module.exports = \"<atlas-financial-tab-group #tabGroup>\\r\\n</atlas-financial-tab-group>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-expansion-panel disabled=true>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n\\r\\n        </div>\\r\\n    </mat-expansion-panel>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { FinancialTabGroupComponent } from './../tab-group/financial-tab-group.component';\r\n\r\n@Component({\r\n    selector: 'atlas-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n    @ViewChild('tabGroup') tabGroupComponent: FinancialTabGroupComponent;\r\n\r\n    company: string;\r\n    isLoading = true;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authorizationService: AuthorizationService) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        const numberOfTabs = this.tabGroupComponent.routeLinks.length;\r\n        let i = 0;\r\n        while (i < numberOfTabs) {\r\n            const route = this.tabGroupComponent.routeLinks[i];\r\n            const privileges = route.privilege ? route.privilege.split('.') : [];\r\n            const privilege = privileges.length > 0 ? privileges[privileges.length - 1] : '';\r\n            if (privilege !== '' && this.authorizationService.isPrivilegeAllowed(\r\n                this.company,\r\n                privilege)) {\r\n                i = numberOfTabs;\r\n                this.router.navigate([route.link]);\r\n            }\r\n            i = i + 1;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <div>\\r\\n            <mat-tab-group [selectedIndex]=\\\"tabIndex\\\"\\r\\n                           (selectedIndexChange)=onSelectedIndexChanged($event)>\\r\\n                <mat-tab label=\\\"Functional Errors\\\"></mat-tab>\\r\\n                <mat-tab label=\\\"Technical Errors\\\"></mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n        <div class=\\\"content-tab\\\">\\r\\n            <mat-tab-group [selectedIndex]=\\\"tabIndex\\\">\\r\\n                <mat-tab>\\r\\n                    <atlas-functional-errors #functionalErrorsComponent></atlas-functional-errors>\\r\\n                </mat-tab>\\r\\n                <mat-tab>\\r\\n                    <atlas-technical-errors #technicalErrorsComponent></atlas-technical-errors>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { InterfaceStatus } from '../../../../shared/enums/interface-status.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { AccountingInterfaceService } from '../../../../shared/services/http-services/accounting-interface.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { FunctionalErrorsComponent } from '../functional-errors/functional-errors.component';\r\nimport { TechnicalErrorsComponent } from '../technical-errors/technical-errors.component';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-error-management',\r\n    templateUrl: './accounting-error-management.component.html',\r\n    styleUrls: ['./accounting-error-management.component.scss'],\r\n})\r\nexport class AccountingErrorManagementComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild(FunctionalErrorsComponent) functionalErrorsComponent: FunctionalErrorsComponent;\r\n    @ViewChild(TechnicalErrorsComponent) technicalErrorsComponent: TechnicalErrorsComponent;\r\n    tabIndex: number = 0;\r\n    company: string;\r\n    accountingErrorFormGroup: FormGroup;\r\n    private formComponents: BaseFormComponent[] = [];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private accountingInterfaceService: AccountingInterfaceService,\r\n        protected formBuilder: FormBuilder,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.tabIndex = 0;\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.tabIndex = Number(params['index']);\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.functionalErrorsComponent,\r\n            this.technicalErrorsComponent,\r\n        );\r\n        this.getListOfErrors();\r\n    }\r\n\r\n    onSelectedIndexChanged(value: number) {\r\n        this.tabIndex = value;\r\n        if (this.tabIndex === 0) {\r\n            this.functionalErrorsComponent.getListOfErrors();\r\n        } else if (this.tabIndex === 1) {\r\n            this.technicalErrorsComponent.getListOfErrors();\r\n        }\r\n    }\r\n\r\n    getListOfErrors() {\r\n        this.accountingInterfaceService.listErrorsForErrorManagement()\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    const functionalErrors = data.value.filter((errorRows) =>\r\n                        errorRows.interfaceStatusId === InterfaceStatus.NotPosted);\r\n                    const technicalErrors = data.value.filter((errorRows) =>\r\n                        errorRows.interfaceStatusId === InterfaceStatus.Rejected ||\r\n                        errorRows.interfaceStatusId === InterfaceStatus.TransmitError);\r\n                    this.functionalErrorsComponent.getFunctionalErrors(functionalErrors);\r\n                    this.technicalErrorsComponent.getTechnicalErrors(technicalErrors);\r\n                }\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div *ngIf=\\\"isLoading\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"interfaceErrorsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\"width: 100%; height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"interfaceErrorsGridRows\\\"\\r\\n                             [columnDefs]=\\\"interfaceErrorsGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             rowSelection='multiple'\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onRefreshButtonClicked()\\\">\\r\\n            REFRESH\\r\\n        </button>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start end\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\">\\r\\n                <button mat-raised-button\\r\\n                        *ifAuthorized=\\\"'Financials.InterfaceErrors.TagCancel', company:company, level: PermissionLevels.ReadWrite\\\"\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                    TAG TO CANCEL\\r\\n                </button>\\r\\n                <button mat-raised-button\\r\\n                        *ifAuthorized=\\\"'Financials.InterfaceErrors.ResendNotPosted', company:company, level: PermissionLevels.ReadWrite\\\"\\r\\n                        (click)=\\\"onResendButtonClicked()\\\">\\r\\n                    TAG TO RESEND\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InterfaceStatus } from '../../../../shared/enums/interface-status.enum';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { AccountingInterfaceService } from '../../../../shared/services/http-services/accounting-interface.service';\r\nimport { AccountingInterfaceError } from '../../../../shared/services/Interface/dto/accounting-interface-error';\r\nimport { UpdateInterfaceError } from '../../../../shared/services/Interface/dto/update-interface-error';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-functional-errors',\r\n    templateUrl: './functional-errors.component.html',\r\n    styleUrls: ['./functional-errors.component.scss'],\r\n})\r\nexport class FunctionalErrorsComponent extends BaseFormComponent implements OnInit {\r\n    interfaceErrorsGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    interfaceErrorsGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    company: string;\r\n    componentId: string = 'interfaceFunctionalErrors';\r\n    interfaceErrorsGridRows: AccountingInterfaceError[];\r\n    isAnyRowSelected: boolean = false;\r\n    selectedDocRefs: AccountingInterfaceError;\r\n    functionalErrorForm: FormGroup;\r\n    updateInterfaceError: UpdateInterfaceError[];\r\n\r\n    PermissionLevels = PermissionLevels;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private accountingInterfaceService: AccountingInterfaceService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        private snackbarService: SnackbarService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.isLoading = true;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.interfaceErrorsGridColumns;\r\n        this.interfaceErrorsGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeGrid();\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGrid();\r\n    }\r\n\r\n    autoSizeGrid() {\r\n        if (this.gridColumnApi) {\r\n            const allColumnIds = [];\r\n            if (this.interfaceErrorsGridColumns) {\r\n                this.interfaceErrorsGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.interfaceErrorsGridColumns = [\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: false,\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'TransactionDocumentId',\r\n                field: 'transactionDocumentId',\r\n                colId: 'transactionDocumentId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'AccountingId',\r\n                field: 'accountingId',\r\n                colId: 'accountingId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'TransactionDocumentTypeId',\r\n                field: 'transactionDocumentTypeId',\r\n                colId: 'transactionDocumentTypeId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Sent Date to BO',\r\n                field: 'boInterfaceDate',\r\n                colId: 'boInterfaceDate',\r\n            },\r\n            {\r\n                headerName: 'Received Date from BO',\r\n                field: 'backInterfaceDate',\r\n                colId: 'backInterfaceDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Profile',\r\n                field: 'profile',\r\n                colId: 'profile',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'BO Doc ID',\r\n                field: 'boDocID',\r\n                colId: 'boDocID',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'BO Journal ID',\r\n                field: 'boJournalID',\r\n                colId: 'boJournalID',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'InterfaceStatusId',\r\n                field: 'interfaceStatusId',\r\n                colId: 'interfaceStatusId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Status',\r\n                field: 'status',\r\n                colId: 'status',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Accrual Number',\r\n                field: 'accrualNumber',\r\n                colId: 'accrualNumber',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Error Description',\r\n                field: 'errorDescription',\r\n                colId: 'errorDescription',\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getFunctionalErrors(data: AccountingInterfaceError[]) {\r\n        if (data) {\r\n            this.interfaceErrorsGridRows = data;\r\n            this.initializeGridColumns();\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.isAnyRowSelected = selectedRows.length > 0;\r\n    }\r\n\r\n    onRefreshButtonClicked() {\r\n        this.getListOfErrors();\r\n        this.snackbarService.informationSnackBar('Grid is refreshed with the latest data');\r\n    }\r\n\r\n    getListOfErrors() {\r\n        this.accountingInterfaceService.listErrorsForErrorManagement()\r\n            .subscribe((errorData) => {\r\n                if (errorData) {\r\n                    const functionalErrors = errorData.value.filter((errorRows) =>\r\n                        errorRows.interfaceStatusId === InterfaceStatus.NotPosted);\r\n                    this.getFunctionalErrors(functionalErrors);\r\n                }\r\n            });\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.updateAccountingErrorStatus(InterfaceStatus[InterfaceStatus.NotInterfaced]);\r\n    }\r\n\r\n    onResendButtonClicked() {\r\n        this.updateAccountingErrorStatus(InterfaceStatus[InterfaceStatus.InterfaceReady]);\r\n    }\r\n\r\n    updateAccountingErrorStatus(status: string) {\r\n        if (!this.isAnyRowSelected) {\r\n            this.snackbarService.informationSnackBar('Select at least one accounting error to resend');\r\n        } else {\r\n            const selectedRows = this.gridApi.getSelectedRows();\r\n            this.updateInterfaceError = selectedRows.map((item) => {\r\n                return {\r\n                    documentReference: item.documentReference, transactionDocumentId: item.transactionDocumentId,\r\n                    accountingId: item.accountingId, transactionDocumentTypeId: item.transactionDocumentTypeId,\r\n                };\r\n            });\r\n            this.isLoading = true;\r\n            this.accountingInterfaceService.updateAccountingErrorStatus(this.updateInterfaceError, status)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.accountingInterfaceService.listErrorsForErrorManagement()\r\n                            .subscribe((errorData) => {\r\n                                if (errorData) {\r\n                                    const functionalErrors = errorData.value.filter((errorRows) =>\r\n                                        errorRows.interfaceStatusId === InterfaceStatus.NotPosted);\r\n                                    this.getFunctionalErrors(functionalErrors);\r\n                                }\r\n                                if (status === InterfaceStatus[InterfaceStatus.Rejected]) {\r\n                                    this.snackbarService.informationSnackBar('Document status is updated to Rejected');\r\n                                } else {\r\n                                    this.snackbarService.informationSnackBar('Document successfully sent to accounting interface');\r\n                                }\r\n                            });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div *ngIf=\\\"isLoading\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"interfaceErrorsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\"width: 100%; height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"interfaceErrorsGridRows\\\"\\r\\n                             [columnDefs]=\\\"interfaceErrorsGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             rowSelection='multiple'\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onRefreshButtonClicked()\\\">\\r\\n            REFRESH\\r\\n        </button>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start end\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\">\\r\\n                <button mat-raised-button\\r\\n                        *ifAuthorized=\\\"'Financials.InterfaceErrors.TagCancel', company:company, level: PermissionLevels.ReadWrite\\\"\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                    TAG TO CANCEL\\r\\n                </button>\\r\\n                <button mat-raised-button\\r\\n                        *ifAuthorized=\\\"'Financials.InterfaceErrors.ResendError', company:company, level: PermissionLevels.ReadWrite\\\"\\r\\n                        (click)=\\\"onResendButtonClicked()\\\">\\r\\n                    TAG TO RESEND\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InterfaceStatus } from '../../../../shared/enums/interface-status.enum';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { AccountingInterfaceService } from '../../../../shared/services/http-services/accounting-interface.service';\r\nimport { AccountingInterfaceError } from '../../../../shared/services/Interface/dto/accounting-interface-error';\r\nimport { UpdateInterfaceError } from '../../../../shared/services/Interface/dto/update-interface-error';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-technical-errors',\r\n    templateUrl: './technical-errors.component.html',\r\n    styleUrls: ['./technical-errors.component.scss'],\r\n})\r\nexport class TechnicalErrorsComponent extends BaseFormComponent implements OnInit {\r\n    interfaceErrorsGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    interfaceErrorsGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    company: string;\r\n    componentId: string = 'interfaceTechnicalErrors';\r\n    interfaceErrorsGridRows: AccountingInterfaceError[];\r\n    isAnyRowSelected: boolean = false;\r\n    selectedDocRefs: AccountingInterfaceError;\r\n    updateInterfaceError: UpdateInterfaceError[];\r\n    technicalErrorForm: FormGroup;\r\n\r\n    PermissionLevels = PermissionLevels;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private accountingInterfaceService: AccountingInterfaceService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        private snackbarService: SnackbarService,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.isLoading = true;\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.interfaceErrorsGridColumns;\r\n        this.interfaceErrorsGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeGrid();\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeGrid();\r\n    }\r\n\r\n    autoSizeGrid() {\r\n        if (this.gridColumnApi) {\r\n            const allColumnIds = [];\r\n            if (this.interfaceErrorsGridColumns) {\r\n                this.interfaceErrorsGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.interfaceErrorsGridColumns = [\r\n            {\r\n                headerName: 'Document Reference',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: false,\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                minWidth: 200,\r\n                maxWidth: 200,\r\n            },\r\n            {\r\n                headerName: 'TransactionDocumentId',\r\n                field: 'transactionDocumentId',\r\n                colId: 'transactionDocumentId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'AccountingId',\r\n                field: 'accountingId',\r\n                colId: 'accountingId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'TransactionDocumentTypeId',\r\n                field: 'transactionDocumentTypeId',\r\n                colId: 'transactionDocumentTypeId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Sent Date to BO',\r\n                field: 'boInterfaceDate',\r\n                colId: 'boInterfaceDate',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Received Date from BO',\r\n                field: 'backInterfaceDate',\r\n                colId: 'backInterfaceDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Profile',\r\n                field: 'profile',\r\n                colId: 'profile',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'BO Doc ID',\r\n                field: 'boDocID',\r\n                colId: 'boDocID',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'BO Journal ID',\r\n                field: 'boJournalID',\r\n                colId: 'boJournalID',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'InterfaceStatusId',\r\n                field: 'interfaceStatusId',\r\n                colId: 'interfaceStatusId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Status',\r\n                field: 'status',\r\n                colId: 'status',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Accrual Number',\r\n                field: 'accrualNumber',\r\n                colId: 'accrualNumber',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Error Description',\r\n                field: 'errorDescription',\r\n                colId: 'errorDescription',\r\n                hide: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getTechnicalErrors(data: AccountingInterfaceError[]) {\r\n        if (data) {\r\n            this.interfaceErrorsGridRows = data;\r\n            this.autoSizeGrid();\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.isAnyRowSelected = selectedRows.length > 0;\r\n    }\r\n\r\n    onRefreshButtonClicked() {\r\n        this.getListOfErrors();\r\n        this.snackbarService.informationSnackBar('Grid is refreshed with the latest data');\r\n    }\r\n\r\n    getListOfErrors() {\r\n        this.accountingInterfaceService.listErrorsForErrorManagement()\r\n            .subscribe((errorData) => {\r\n                if (errorData) {\r\n                    const technicalErrors = errorData.value.filter((errorRows) =>\r\n                        errorRows.interfaceStatusId === InterfaceStatus.Rejected ||\r\n                        errorRows.interfaceStatusId === InterfaceStatus.TransmitError);\r\n                    this.getTechnicalErrors(technicalErrors);\r\n                }\r\n            });\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.updateAccountingErrorStatus(InterfaceStatus[InterfaceStatus.NotInterfaced]);\r\n    }\r\n\r\n    onResendButtonClicked() {\r\n        this.updateAccountingErrorStatus(InterfaceStatus[InterfaceStatus.InterfaceReady]);\r\n    }\r\n\r\n    updateAccountingErrorStatus(status: string) {\r\n        if (!this.isAnyRowSelected) {\r\n            this.snackbarService.informationSnackBar('Select at least one accounting error to resend');\r\n        } else {\r\n            const selectedRows = this.gridApi.getSelectedRows();\r\n            this.updateInterfaceError = selectedRows.map((item) => {\r\n                return {\r\n                    documentReference: item.documentReference, transactionDocumentId: item.transactionDocumentId,\r\n                    accountingId: item.accountingId, transactionDocumentTypeId: item.transactionDocumentTypeId,\r\n                };\r\n            });\r\n\r\n            this.isLoading = true;\r\n            this.accountingInterfaceService.updateAccountingErrorStatus(this.updateInterfaceError, status)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.accountingInterfaceService.listErrorsForErrorManagement()\r\n                            .subscribe((errorData) => {\r\n                                if (errorData) {\r\n                                    const technicalErrors = errorData.value.filter((errorRows) =>\r\n                                        errorRows.interfaceStatusId === InterfaceStatus.Rejected ||\r\n                                        errorRows.interfaceStatusId === InterfaceStatus.TransmitError);\r\n                                    this.getTechnicalErrors(technicalErrors);\r\n                                }\r\n                                if (status === InterfaceStatus[InterfaceStatus.Rejected]) {\r\n                                    this.snackbarService.informationSnackBar('Document status is updated to Rejected');\r\n                                } else {\r\n                                    this.snackbarService.informationSnackBar('Document successfully sent to accounting interface');\r\n                                }\r\n                            });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<header class=\\\"header-background-creation\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoadingassignOnLoad\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div class=\\\"create-toggle-control\\\"\\r\\n             *ngIf=\\\"!isLoadingassignOnLoad\\\">\\r\\n            <mat-button-toggle-group *ngIf=\\\"!isSummaryView\\\"\\r\\n                                     name=\\\"toggleStyle\\\"\\r\\n                                     aria-label=\\\"Contract Document\\\"\\r\\n                                     [formControl]='accountingEntryTypeCtrl'\\r\\n                                     [value]=\\\"accountingDocTypeSelected\\\"\\r\\n                                     [disabled]=\\\"isSummaryView\\\"\\r\\n                                     (change)=\\\"accountingEntryTypeChanged($event)\\\">\\r\\n                <mat-button-toggle value=\\\"regularJournal\\\">Regular Journal</mat-button-toggle>\\r\\n                <mat-button-toggle value=\\\"accrual\\\">Accrual</mat-button-toggle>\\r\\n                <mat-button-toggle value=\\\"mtm\\\">MTM</mat-button-toggle>\\r\\n            </mat-button-toggle-group>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"!isLoadingassignOnLoad\\\"\\r\\n             class=\\\"create-accounting-document-fields\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"8px\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\">\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     [class.isEmpty]=\\\"!docDateFormCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"docDateFormCtrl.isRequired\\\"\\r\\n                     fxFlex=\\\"15\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               [matDatepicker]=\\\"documentDatePicker\\\"\\r\\n                               placeholder=\\\"Document date\\\"\\r\\n                               [matTooltip]=\\\"'Document date'\\\"\\r\\n                               [required]=\\\"docDateFormCtrl.isRequired\\\"\\r\\n                               [disabled]=\\\"isSummaryView\\\"\\r\\n                               (dateChange)=\\\"documentDateChanged($event)\\\"\\r\\n                               [formControl]='docDateFormCtrl'\\r\\n                               autocomplete=\\\"off\\\">\\r\\n                        <mat-datepicker-toggle matSuffix\\r\\n                                               [for]=\\\"documentDatePicker\\\"></mat-datepicker-toggle>\\r\\n                        <mat-datepicker #documentDatePicker></mat-datepicker>\\r\\n                        <mat-error *ngIf=\\\"docDateFormCtrl.hasError('required')\\\">\\r\\n                            This field is required\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"docDateFormCtrl.isRequired\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                    [class.isEmpty]=\\\"!valueDateFormCtrl.value\\\"\\r\\n                    [class.required-field]=\\\"valueDateFormCtrl.isRequired\\\"\\r\\n                    fxFlex=\\\"15\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                            [matDatepicker]=\\\"valueDatePicker\\\"\\r\\n                            placeholder=\\\"Value Date\\\"\\r\\n                            value=\\\"valueDatePicker\\\"\\r\\n                            [disabled]=\\\"isSummaryView\\\"\\r\\n                            [formControl]='valueDateFormCtrl'\\r\\n                            autocomplete=\\\"off\\\">\\r\\n                        <mat-datepicker-toggle matSuffix\\r\\n                                            [for]=\\\"valueDatePicker\\\"></mat-datepicker-toggle>\\r\\n                        <mat-datepicker #valueDatePicker></mat-datepicker>\\r\\n                        <mat-hint class=\\\"value-date-warning\\\"\\r\\n                                *ngIf=\\\"isValueDateBeforeDocumentDate()\\\">Value date is before the document date\\r\\n                        </mat-hint>\\r\\n                        <mat-hint *ngIf=\\\"valueDateFormCtrl.isRequired\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     fxFlex=\\\"15\\\"\\r\\n                     [class.isEmpty]=\\\"!accPeriodFormCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"accPeriodFormCtrl.isRequired\\\">\\r\\n                    <atlas-month-date-picker #monthDatePicker\\r\\n                                             class=\\\"month-date-picker\\\"\\r\\n                                             [fieldControl]=\\\"accPeriodFormCtrl\\\"\\r\\n                                             isEditable=true\\r\\n                                             [disabled]=\\\"isSummaryView\\\"\\r\\n                                             (monthChanged)=\\\"accountPeriodChanged($event)\\\"\\r\\n                                             [label]=\\\"'Accounting Period'\\\">\\r\\n                    </atlas-month-date-picker>\\r\\n                </div>\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"15\\\"\\r\\n                                                         class=\\\"contextual-search-for-currency\\\"\\r\\n                                                         [isEditable]=\\\"!isSummaryView\\\"\\r\\n                                                         [fieldControl]=\\\"currencyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCurrencyList\\\"\\r\\n                                                         label=\\\"Currency\\\"\\r\\n                                                         displayProperty=\\\"currencyCode\\\"\\r\\n                                                         tooltip=\\\"description\\\"\\r\\n                                                         [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Currency\\\"\\r\\n                                                         gridId=\\\"currenciesGrid\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start end\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <div>\\r\\n            <atlas-accounting-file-upload-dialog-box #accountingFileUploadDialogBoxComponent\\r\\n                                                     [docType]=\\\"selectedDocType\\\"\\r\\n                                                     (documentSelected)=\\\"ondocumentSelected($event)\\\">\\r\\n            </atlas-accounting-file-upload-dialog-box>\\r\\n        </div>\\r\\n    </div>\\r\\n</header>\\r\\n\\r\\n<mat-toolbar class=\\\"menu-bar\\\"\\r\\n             *ngIf=\\\"!isLoadingassignOnLoad && isSummaryView\\\">\\r\\n    <div>\\r\\n        <button mat-menu-item\\r\\n                [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n            <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n        </button>\\r\\n        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n</mat-toolbar>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <div *ngIf=\\\"!isSummaryView &&  !isLoadingassignOnLoad\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"10px\\\"\\r\\n         class=\\\"add-line-container\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\">\\r\\n            <h6>Add new lines:</h6>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\"\\r\\n             fxFlex=\\\"2\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"addNewLineCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onAddAccountingLineButtonClicked(addNewLineCtrl.value)\\\">PROCEED</button>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoadingassign\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-around start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxFlex=\\\"98.5\\\">\\r\\n            <mat-card>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\">\\r\\n                    <mat-card-title class=\\\"atlas-grid-card-title mat-card-title\\\">Accounting Entries</mat-card-title>\\r\\n                    <atlas-grid-enlargement *ngIf=\\\"agGridOptions\\\"\\r\\n                                            [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                            [userPreferencesParameters]=\\\"gridPreferencesParameters\\\"\\r\\n                                            (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                            #gridZoom>\\r\\n                    </atlas-grid-enlargement>\\r\\n                </div>\\r\\n                <mat-card-content>\\r\\n                    <div *ngIf=\\\"accountCreationConfiguration?.length > 0\\\"\\r\\n                         ag-grid=\\\"agGridOptions\\\">\\r\\n                        <ag-grid-angular class=\\\"ag-theme-material atr-ag-grid\\\"\\r\\n                                         [rowData]=\\\"createAccountingDocumentLines\\\"\\r\\n                                         [columnDefs]=\\\"columnDefs\\\"\\r\\n                                         domLayout=\\\"autoHeight\\\"\\r\\n                                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                         [pagination]=\\\"true\\\"\\r\\n                                         [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                         [paginationPageSize]=\\\"15\\\"\\r\\n                                         [suppressDragLeaveHidesColumns]=\\\"true\\\"\\r\\n                                         [suppressMovable]=\\\"true\\\"\\r\\n                                         [enableSorting]=\\\"true\\\"\\r\\n                                         [enableColResize]=\\\"false\\\"\\r\\n                                         [singleClickEdit]=true\\r\\n                                         [enableRangeSelection]=\\\"true\\\"\\r\\n                                         (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                         [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                                         [processCellForClipboard]=\\\"processCellForClipboard\\\"\\r\\n                                         [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                        </ag-grid-angular>\\r\\n                    </div>\\r\\n                    <span class=\\\"fill-space\\\"></span>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start end\\\"\\r\\n                         class=\\\"total-amount-content\\\">\\r\\n                        <mat-card-subtitle class=\\\"total-figure\\\">Total Amount: <span\\r\\n                                  class=\\\"total-figure-value\\\">{{formatAmountValue(totalAmount)}}\\r\\n                            </span> </mat-card-subtitle>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         *ngIf=\\\"!isLoadingassignOnLoad\\\"\\r\\n         fxLayoutAlign=\\\"end\\\">\\r\\n        <div  fxLayout=\\\"column\\\"\\r\\n              class=\\\"value-legs-total-figure\\\">\\r\\n            <mat-slide-toggle class=\\\"mat-toggle-creation\\\"\\r\\n                              *ifAuthorized=\\\"'Financials.POSTINGMGT.PostingInterface',company:this.company\\\"\\r\\n                              [formControl]=\\\"interfaceCtrl\\\"\\r\\n                              [disabled]=\\\"isSummaryView\\\">To interface</mat-slide-toggle>\\r\\n\\r\\n            <mat-slide-toggle class=\\\"mat-toggle-creation\\\"\\r\\n                              *ifAuthorized=\\\"'Financials.POSTINGMGT.AUTHORIZEPOSTING',company:this.company\\\"\\r\\n                              [formControl]=\\\"authForCtrl\\\"\\r\\n                              [disabled]=\\\"isSummaryView\\\">Authorize for posting</mat-slide-toggle>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         *ngIf=\\\"!isLoadingassignOnLoad\\\">\\r\\n        <button mat-button\\r\\n                class='mat-button-discard'\\r\\n                *ngIf=\\\"!isLoadingassign\\\"\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button *ngIf=\\\"!isSummaryView && !isLoadingassign\\\"\\r\\n                mat-raised-button\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".mat-select-style {\\n  width: 200px;\\n  margin-top: 30px;\\n  margin-bottom: 30px;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 16px;\\n  font-weight: 500; }\\n\\nmat-toolbar.mat-toolbar {\\n  height: 40px !important; }\\n\\n.create-toggle-control {\\n  margin-bottom: 1%; }\\n\\n.value-legs-total-figure {\\n  margin-top: 8px; }\\n\\n.month-date-picker,\\n.total-amount-content,\\n.contextual-search-for-currency {\\n  width: 100%; }\\n\\n.total-amount-content {\\n  margin-top: 14px; }\\n\\n.contextual-search-for-currency {\\n  margin-right: 8px; }\\n\\n.add-line-container {\\n  height: 28px;\\n  margin-left: 10px; }\\n\\n.value-date-warning {\\n  color: #ec8d2d; }\\n\\n:host ::ng-deep .ag-theme-material .mat-form-field-appearance-legacy .mat-form-field-wrapper {\\n  padding-bottom: 0px !important; }\\n\"","import { DatePipe, Location } from '@angular/common';\r\nimport { Component, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AgGridContextualSearchComponent } from '../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { CellEditorNumericComponent } from '../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { inDropdownListValidator } from '../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { SectionSearchResult } from '../../../../shared/dtos/section-search-result';\r\nimport { TransactionDocumentSearchResult } from '../../../../shared/dtos/transaction-document-search-result';\r\nimport { AccountLineType } from '../../../../shared/entities/account-line-type.entity';\r\nimport { AccountingSetup } from '../../../../shared/entities/accounting-setup.entity';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { AtlasNumber } from '../../../../shared/entities/atlas-number.entity';\r\nimport { Charter } from '../../../../shared/entities/charter.entity';\r\nimport { Commodity } from '../../../../shared/entities/commodity.entity';\r\nimport { CostType } from '../../../../shared/entities/cost-type.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { Currency } from '../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { ListAndSearchFilter } from '../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ManualJournalLine } from '../../../../shared/entities/manual-journal-document-line.entity';\r\nimport { ManualJournalDocument } from '../../../../shared/entities/manual-journal-document.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { PostingDocumentType } from '../../../../shared/enums/posting-document-type.enum';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { CharterDataLoader } from '../../../../shared/services/execution/charter-data-loader';\r\nimport { ManualJournalResponse } from '../../../../shared/services/execution/dtos/manual-journal-response';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { PreaccountingService } from '../../../../shared/services/http-services/preaccounting.service';\r\nimport { TradeDataLoader } from '../../../../shared/services/list-and-search/trade-data-loader';\r\nimport { TransactionDocumentDataLoader } from '../../../../shared/services/preaccounting/transaction-document-data-loader';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { nameof, UtilService } from '../../../../shared/services/util.service';\r\nimport { isDateTwoBeforeDateOne } from '../../../../shared/validators/date-validators.validator';\r\nimport { AccountingFileUploadDialogBoxComponent } from '../accounting-file-upload/accounting-file-upload-dialog-box/accounting-file-upload-dialog-box.component';\r\nimport { ItemConfigurationProperties } from './../../../..//shared/entities/form-configuration.entity';\r\nimport { AgContextualMenuComponent } from './../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridAccrualNumberComponent } from './../../../../shared/components/ag-grid-accrual-number/ag-grid-accrual-number.component';\r\nimport { FxDealSearchResult } from './../../../../shared/dtos/fxDeal-search-result';\r\nimport { AccountingImportReport } from './../../../../shared/entities/accountingImportReport.entity';\r\nimport { Company } from './../../../../shared/entities/company.entity';\r\nimport { NominalAccount } from './../../../../shared/entities/nominal-account.entity';\r\nimport { Province } from './../../../../shared/entities/province.entity';\r\nimport { Branch } from './../../../../shared/entities/branch.entity';\r\nimport { FxDealDataLoader } from './../../../../shared/services/list-and-search/fxDeal-data-loader';\r\nimport { AllNumberMask, CustomNumberMask } from './../../../../shared/numberMask';\r\nimport { AccountingDocumentService } from './../../../../shared/services/http-services/accounting-document.service';\r\nimport { FormConfigurationService } from './../../../../shared/services/http-services/form-configuration.service';\r\nimport { AccountingEditBaseComponent } from './../accounting-edit-base/accounting-edit-base.component';\r\nimport { AccountingWarningErrorMsgDialogComponent } from './accounting-warning-error-msg-dialog/accounting-warning-error-msg-dialog.component';\r\nimport { GridEnlargementComponent } from '../../../../shared/components/grid-enlargement/grid-enlargement.component';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-creation',\r\n    templateUrl: './accounting-creation.component.html',\r\n    styleUrls: ['./accounting-creation.component.scss'],\r\n    providers: [TradeDataLoader, CharterDataLoader, TransactionDocumentDataLoader, FxDealDataLoader, DatePipe],\r\n})\r\nexport class AccountingCreationComponent extends AccountingEditBaseComponent implements OnInit, OnDestroy {\r\n    @ViewChild('accountingFileUploadDialogBoxComponent') accountingFileUploadDialogBoxComponent: AccountingFileUploadDialogBoxComponent;\r\n    @ViewChild('gridZoom') gridEnlargementComponent: GridEnlargementComponent;\r\n    accountingEntryTypeCtrl = new AtlasFormControl('accountingEntryTypeCtrl');\r\n    docDateFormCtrl = new AtlasFormControl('docDateFormCtrl');\r\n    valueDateFormCtrl = new AtlasFormControl('valueDateFormCtrl');\r\n    accPeriodFormCtrl = new AtlasFormControl('accPeriodFormCtrl');\r\n    currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n    addNewLineCtrl = new AtlasFormControl('addNewLineCtrl');\r\n    interfaceCtrl = new AtlasFormControl('interfaceCtrl');\r\n    authForCtrl = new AtlasFormControl('authForCtrl');\r\n    createDocumentFormGroup: FormGroup;\r\n\r\n    createAccountingDocumentLines: ManualJournalLine[] = [];\r\n    manualJournalDocument: ManualJournalDocument;\r\n    accountingDocTypeSelected: string = 'regularJournal';\r\n    accrualDocTypeSelected: string = 'accrual';\r\n    accrualNumberColumn: string = 'accrualNumber';\r\n    dealNumberColumn: string = 'dealNumber';\r\n    settlementCurrencyColumn: string = 'settlementCurrency';\r\n    clientAccountColumn: string = 'clientAccountId';\r\n    secondaryDocumentReferenceColumn: string = 'secondaryDocumentReference';\r\n    externalDocumentReferenceColumn: string = 'externalDocumentReference';\r\n    costCenterColumn: string = 'costCenter';\r\n    provinceColumn: string = 'provinceId';\r\n    branchColumn: string = 'branchId';\r\n    amountColumn: string = 'amount';\r\n    quantityColumn: string = 'quantity';\r\n    requiredString: string = 'Required*';\r\n    nominalAccount: string = 'accountReferenceId';\r\n    isAccrualSelected: boolean = false;\r\n    isMtmSelected: boolean = false;\r\n    isSave: boolean = false;\r\n    noErrorMessage: string = 'noError';\r\n    createLineMenu: string = 'createLineMenu';\r\n    isLoadingassign: boolean = false;\r\n    screenName: string = 'ManualDocumentCreation';\r\n    userActiveDirectoryName: string;\r\n\r\n    filteredNominalAccountList: NominalAccount[];\r\n    filteredCurrencyList: Currency[];\r\n    filteredSettlementCurrencyList: Currency[];\r\n    filteredDepartmentList: Department[];\r\n    filteredCommodityList: Commodity[];\r\n    filteredCostTypeList: CostType[];\r\n    filteredCounterpartyList: Counterparty[];\r\n    filteredCharterList: Charter[];\r\n    filteredProvinceList: Province[];\r\n    filteredBranchList: Branch[]\r\n    filteredDocuments: TransactionDocumentSearchResult[];\r\n    filteredContracts: SectionSearchResult[];\r\n    filteredFxDeals: FxDealSearchResult[];\r\n    filteredCharter: Charter[];\r\n    nominalAccountFound: NominalAccount;\r\n    filteredAccountLineType: AccountLineType[];\r\n    filteredAccountLineTypeForMtm: AccountLineType[] = [];\r\n    mappingFields = new Array();\r\n    isLoadingassignOnLoad: boolean = true;\r\n    accountLineTypes: AccountLineType[];\r\n    accountingSetupModel: AccountingSetup;\r\n    accountLineTypesForMandatoryClientAccount: AccountLineType[];\r\n    createAccountingDocumentGridContextualMenuActions: AgContextualMenuAction[];\r\n    masterdata: MasterData;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    defaultLines: number = 20;\r\n    accountingDate: Date;\r\n    totalAmount: number = 0;\r\n    operationsLastMonthClosed: Date;\r\n    lastMonthClosed: Date;\r\n    monthNameForlastMonthClosed: string;\r\n    monthNameForoperationsLastMonthClosed: string;\r\n    documentDateSelected: Date;\r\n    isSummaryView: boolean = false;\r\n    accountCreationConfiguration: ItemConfigurationProperties[] = new Array<ItemConfigurationProperties>();\r\n    selectedAccountingDate: _moment.Moment = this.companyManager.getCurrentCompanyDate();\r\n    postOpClosedPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'POSTOPCLOSED',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'POSTINGMGT',\r\n    };\r\n    monthNames: string[] = ['January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n    currencyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'This field is required')\r\n        .set('inDropdownList', 'Invalid entry. Currency not in the list.');\r\n\r\n    createDocumentMenuActions: { [key: string]: string } = {\r\n        copyDocumentLine: 'copy',\r\n        deleteDocumentLine: 'delete',\r\n    };\r\n\r\n    subscription: Subscription[] = [];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    columnDefs: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    company: string;\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n    companyConfiguration: Company;\r\n    selectedDocType = '.csv';\r\n    selectedFile: File;\r\n    progressbar: boolean;\r\n    objectKeys = Object.keys;\r\n    disableConfirmImport: boolean = false;\r\n    gridPreferencesParameters: UserGridPreferencesParameters;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected companyManager: CompanyManagerService,\r\n        private uiService: UiService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public tradeDataLoader: TradeDataLoader,\r\n        public fxDealLoader: FxDealDataLoader,\r\n        public charterDataLoader: CharterDataLoader,\r\n        public transactionDocumentDataLoader: TransactionDocumentDataLoader,\r\n        private snackbarService: SnackbarService,\r\n        private executionService: ExecutionService,\r\n        private preaccountingService: PreaccountingService,\r\n        protected dialog: MatDialog,\r\n        private router: Router,\r\n        private location: Location,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        private formConfigurationService: FormConfigurationService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n        private accountingDocumentService: AccountingDocumentService,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.formConfigurationService.getMandatoryFieldsConfigurationForFinancial().subscribe((templates) => {\r\n            this.accountCreationConfiguration = templates.value;\r\n          \r\n\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.accountingEntryTypeCtrl.patchValue(this.accountingDocTypeSelected);\r\n        this.docDateFormCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.accPeriodFormCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.interfaceCtrl.patchValue(true);\r\n        this.authForCtrl.patchValue(false);\r\n        this.addNewLineCtrl.patchValue(1);\r\n        this.filteredNominalAccountList = this.masterdata.nominalAccounts.map(\r\n            (nominal) => {\r\n                nominal.accountNumber = nominal.accountNumber;\r\n                nominal.mainAccountTitle = nominal.shortDescription;\r\n                return nominal;\r\n            });\r\n        this.filteredCurrencyList = this.masterdata.currencies;\r\n        this.filteredSettlementCurrencyList = this.filteredCurrencyList;\r\n        this.filteredDepartmentList = this.masterdata.departments;\r\n        this.filteredCommodityList = this.masterdata.commodities;\r\n        this.filteredCostTypeList = this.masterdata.costTypes;\r\n        this.filteredCounterpartyList = this.masterdata.counterparties;\r\n        this.filteredAccountLineType = this.masterdata.accountLineTypes;\r\n        this.filteredProvinceList = this.masterdata.provinces;\r\n        this.filteredBranchList = this.masterdata.branches;\r\n        this.transactionDocumentDataLoader.getData().subscribe((documents) => {\r\n            this.filteredDocuments = documents;\r\n        });\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.filteredCharter = charter;\r\n        });\r\n\r\n        const filterList: ListAndSearchFilter[] = [];\r\n        this.tradeDataLoader.getData(filterList).subscribe((trade) => {\r\n            this.filteredContracts = trade.value;\r\n        });\r\n        this.fxDealLoader.getData(filterList).subscribe((fxDeal) => {\r\n            this.filteredFxDeals = fxDeal.value;\r\n        });\r\n        this.currencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.currencies,\r\n                ['currencyCode', 'description'],\r\n            );\r\n        });\r\n\r\n        this.subscriptions.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n                if (this.accountingSetupModel) {\r\n                    this.operationsLastMonthClosed = moment(this.accountingSetupModel.lastMonthClosedForOperation).toDate();\r\n                    this.lastMonthClosed = moment(this.accountingSetupModel.lastMonthClosed).toDate();\r\n                    this.monthNameForlastMonthClosed = this.monthNames[this.lastMonthClosed.getMonth()];\r\n                    this.monthNameForoperationsLastMonthClosed = this.monthNames[this.operationsLastMonthClosed.getMonth()];\r\n                }\r\n            }));\r\n\r\n        this.init();\r\n        this.initializeGridColumns();\r\n        this.setValidators();\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        const defaultCurrency = this.masterdata.currencies.find(\r\n            (fb) => fb.currencyCode === this.companyConfiguration.functionalCurrencyCode,\r\n        );\r\n        this.currencyCtrl.setValue(\r\n            defaultCurrency,\r\n        );\r\n        this.getFormGroup();\r\n        \r\n        });\r\n    }\r\n\r\n    init() {\r\n        this.createAccountingDocumentGridContextualMenuActions = [\r\n            {\r\n                icon: 'content_copy',\r\n                text: 'Copy Line',\r\n                action: this.createDocumentMenuActions.copyDocumentLine,\r\n            },\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete Line',\r\n                action: this.createDocumentMenuActions.deleteDocumentLine,\r\n            },\r\n        ];\r\n\r\n        this.gridPreferencesParameters = {\r\n            company: null,\r\n            gridId: null,\r\n            gridOptions: null,\r\n            savingEnabled: false,\r\n            sharingEnabled: false,\r\n            showExport: false,\r\n        };\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.createDocumentFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty && !this.isSummaryView) {\r\n                return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.createDocumentFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty && !this.isSummaryView) {\r\n                $event.returnValue = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.createDocumentFormGroup = this.formBuilder.group({\r\n            currencyCtrl: this.currencyCtrl,\r\n            docDateFormCtrl: this.docDateFormCtrl,\r\n            valueDateFormCtrl: this.valueDateFormCtrl,\r\n            accPeriodFormCtrl: this.accPeriodFormCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    documentDateChanged(event) {\r\n        this.documentDateSelected = (event.value as _moment.Moment).toDate();\r\n        const accPeriodDate = (this.accPeriodFormCtrl.value as _moment.Moment).toDate();\r\n        if (accPeriodDate.getFullYear() < this.documentDateSelected.getFullYear()\r\n            || (accPeriodDate.getFullYear() <= this.documentDateSelected.getFullYear()\r\n                && accPeriodDate.getMonth() < this.documentDateSelected.getMonth())) {\r\n            this.snackbarService.throwErrorSnackBar('A/c period should not be before doc. Date');\r\n        } else {\r\n            let throwErrorNotOpenMonth = false;\r\n            let throwErrorAccountingPeriod = false;\r\n            const isSameMonthAndYearThanOperationsLastMonthClosed = event.value.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.value.month() === this.operationsLastMonthClosed.getMonth();\r\n            const isLessOrEqualToLastMonthClosed = (event.value.year() === this.lastMonthClosed.getFullYear()\r\n                && event.value.month() <= this.lastMonthClosed.getMonth())\r\n                || (event.value.year() < this.lastMonthClosed.getFullYear());\r\n            const isSameYearLessMonthThanOperationsLastMonthClosed = event.value.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.value.month() < this.operationsLastMonthClosed.getMonth();\r\n            const isAccountingAndOperationMonthSame = this.operationsLastMonthClosed.getFullYear() === this.lastMonthClosed.getFullYear()\r\n                && this.operationsLastMonthClosed.getMonth() === this.lastMonthClosed.getMonth();\r\n            // Regular Journal Rules\r\n            if (!this.isAccrualSelected && !this.isMtmSelected) {\r\n                // Date within a closed period\r\n                if (isLessOrEqualToLastMonthClosed) {\r\n                    throwErrorAccountingPeriod = true;\r\n                    if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                        if (isAccountingAndOperationMonthSame) {\r\n                            this.accPeriodFormCtrl.patchValue(moment(new Date(new Date(this.operationsLastMonthClosed).\r\n                                setMonth(this.operationsLastMonthClosed.getMonth() + 1))));\r\n                        } else {\r\n                            this.accPeriodFormCtrl.patchValue(moment(this.accountingSetupModel.lastMonthClosedForOperation));\r\n                        }\r\n                    } else {\r\n                        this.accPeriodFormCtrl.patchValue(this.companyManager.getCurrentCompanyDate());\r\n                    } // Date within the last month closed for operation\r\n                } else if (isSameMonthAndYearThanOperationsLastMonthClosed) {\r\n                    if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                        this.accPeriodFormCtrl.patchValue(moment(this.accountingSetupModel.lastMonthClosedForOperation));\r\n                    } else {\r\n                        throwErrorAccountingPeriod = true;\r\n                        this.accPeriodFormCtrl.patchValue(moment(new Date(new Date(this.operationsLastMonthClosed).\r\n                            setMonth(this.operationsLastMonthClosed.getMonth() + 1))));\r\n                    }  // Date between last closed accounting period – last month closed for operation\r\n                } else if (this.checkIfBetweenLastClosedAndOperations(event.value)) {\r\n                    if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                        this.accPeriodFormCtrl.patchValue(event.value);\r\n                    } else {\r\n                        this.accPeriodFormCtrl.patchValue(moment(new Date(new Date(this.operationsLastMonthClosed).\r\n                            setMonth(this.operationsLastMonthClosed.getMonth() + 1))));\r\n                    }\r\n                } else if (!this.checkIfBetweenLastClosedAndOperations(event.value) &&\r\n                    isSameYearLessMonthThanOperationsLastMonthClosed) {\r\n                    throwErrorNotOpenMonth = true;\r\n                } // Accrual Document date Rules\r\n            } else {\r\n                const todayDate = this.companyManager.getCurrentCompanyDate();\r\n                if (isLessOrEqualToLastMonthClosed) {\r\n                    this.snackbarService.informationSnackBar('Document date cannot be in a closed period');\r\n                    this.docDateFormCtrl.patchValue('');\r\n                } else if ((event.value <= this.companyManager.getCurrentCompanyDate() || event.value.month() === todayDate.month()) &&\r\n                    !(event.value.date() === new Date(event.value.year(), event.value.month() + 1, 0).getDate())) {\r\n                    this.snackbarService.throwErrorSnackBar('Document date must be a last month day');\r\n                    this.docDateFormCtrl.patchValue('');\r\n                } else if (event.value.year() === todayDate.year() && event.value.month() > todayDate.month()) {\r\n                    this.snackbarService.throwErrorSnackBar('Document date cannot be in the future');\r\n                    this.docDateFormCtrl.patchValue('');\r\n                } else if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n                    this.checkIfBetweenLastClosedAndOperations(event.value)) {\r\n                    throwErrorAccountingPeriod = true;\r\n                    this.accPeriodFormCtrl.patchValue(event.value);\r\n                } else if (!this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n                    isSameMonthAndYearThanOperationsLastMonthClosed) {\r\n                    throwErrorNotOpenMonth = true;\r\n                    this.docDateFormCtrl.patchValue('');\r\n                } else if (!this.checkIfBetweenLastClosedAndOperations(event.value) &&\r\n                    isSameYearLessMonthThanOperationsLastMonthClosed) {\r\n                    this.docDateFormCtrl.patchValue('');\r\n                    this.accPeriodFormCtrl.patchValue('');\r\n                    throwErrorNotOpenMonth = true;\r\n                } else {\r\n                    this.accPeriodFormCtrl.patchValue(event.value);\r\n                }\r\n            }\r\n            if (throwErrorNotOpenMonth) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n            }\r\n            if (throwErrorAccountingPeriod) {\r\n                this.snackbarService.informationSnackBar('Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + ' ; please check the accounting period');\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfBetweenLastClosedAndOperations(date: _moment.Moment): boolean {\r\n        let matchingMonthFound: boolean = false;\r\n        for (let i = 1; i <= this.accountingSetupModel.numberOfOpenPeriod; i++) {\r\n            if (!matchingMonthFound) {\r\n                if (date.year() === this.lastMonthClosed.getFullYear() &&\r\n                    this.lastMonthClosed.getMonth() + i < 12 && date.month() === this.lastMonthClosed.getMonth() + i) {\r\n                    matchingMonthFound = true;\r\n                } else if (date.year() === this.lastMonthClosed.getFullYear() + 1 &&\r\n                    this.lastMonthClosed.getMonth() + i >= 12 && date.month() === this.lastMonthClosed.getMonth() + i - 12) {\r\n                    matchingMonthFound = true;\r\n                }\r\n            }\r\n        }\r\n        return matchingMonthFound;\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto): boolean {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel === userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    accountPeriodChanged(event) {\r\n        const docDate = (this.docDateFormCtrl.value as _moment.Moment).toDate();\r\n        const accPeriodDate = (event as _moment.Moment).toDate();\r\n        if (accPeriodDate.getFullYear() < docDate.getFullYear()\r\n            || (accPeriodDate.getFullYear() <= docDate.getFullYear()\r\n                && accPeriodDate.getMonth() < docDate.getMonth())) {\r\n            this.snackbarService.throwErrorSnackBar('A/c period should not be before doc. Date');\r\n        } else {\r\n\r\n            const lastDateOfMonth = this.companyManager.getCurrentCompanyDate();\r\n            let throwErrorClosedMonth = false;\r\n            let throwErrorAccountingPeriod = false;\r\n            const isSameMonthAndYearThanOperationLastClosedMonth = event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.month() === this.operationsLastMonthClosed.getMonth();\r\n            const isBeforeOperationLastClosedMonth = event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.month() < this.operationsLastMonthClosed.getMonth();\r\n            const isLessOrEqualToLastMonthClosed = (event.year() === this.lastMonthClosed.getFullYear()\r\n                && event.month() <= this.lastMonthClosed.getMonth())\r\n                || event.year() < this.lastMonthClosed.getFullYear();\r\n            // Acounting Period Rules for Regular Journal\r\n            if (!this.isAccrualSelected && !this.isMtmSelected) {\r\n                if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                    if (isLessOrEqualToLastMonthClosed) {\r\n                        throwErrorAccountingPeriod = true;\r\n                    } else if (isSameMonthAndYearThanOperationLastClosedMonth) {\r\n                        this.snackbarService.informationSnackBar('Please check document date and accounting period');\r\n                    } else if ((!this.checkIfBetweenLastClosedAndOperations(event)) && isBeforeOperationLastClosedMonth) {\r\n                        throwErrorClosedMonth = true;\r\n                    }\r\n                } else {\r\n                    if (isSameMonthAndYearThanOperationLastClosedMonth || isLessOrEqualToLastMonthClosed) {\r\n                        throwErrorAccountingPeriod = true;\r\n                    } else if ((!this.checkIfBetweenLastClosedAndOperations(event)) && isBeforeOperationLastClosedMonth) {\r\n                        throwErrorClosedMonth = true;\r\n                    }\r\n                } // Acounting Period Rules for Accrual\r\n\r\n            } else {\r\n                if (isLessOrEqualToLastMonthClosed) {\r\n                    throwErrorClosedMonth = true;\r\n                } else {\r\n                    if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                        if (!((event.year() === lastDateOfMonth.year() && event.month() === lastDateOfMonth.month()) ||\r\n                            (isSameMonthAndYearThanOperationLastClosedMonth) ||\r\n                            (this.checkIfBetweenLastClosedAndOperations(event)))) {\r\n                            throwErrorClosedMonth = true;\r\n                        }\r\n                    } else if (!this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                        if (isSameMonthAndYearThanOperationLastClosedMonth || isLessOrEqualToLastMonthClosed) {\r\n                            throwErrorClosedMonth = true;\r\n                        }\r\n                        if (!this.checkIfBetweenLastClosedAndOperations(event) && isBeforeOperationLastClosedMonth) {\r\n                            throwErrorClosedMonth = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (throwErrorClosedMonth) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n                this.accPeriodFormCtrl.patchValue('');\r\n            }\r\n            if (throwErrorAccountingPeriod) {\r\n                this.snackbarService.informationSnackBar('Not allowed: Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; please check the accounting period');\r\n                this.accPeriodFormCtrl.patchValue('');\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions.columnDefs = this.columnDefs;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.createAccountingDocumentLines = [];\r\n        this.agGridApi.setRowData([]);\r\n        this.agGridColumnApi.setColumnVisible(this.accrualNumberColumn, false);\r\n        this.agGridColumnApi.setColumnVisible(this.dealNumberColumn, false);\r\n        this.agGridColumnApi.setColumnVisible(this.settlementCurrencyColumn, false);\r\n        this.agGridColumnApi.setColumnVisible(this.provinceColumn, this.companyConfiguration.isProvinceEnable);\r\n        this.agGridColumnApi.setColumnVisible(this.branchColumn, this.companyConfiguration.isProvinceEnable);\r\n        this.onAddAccountingLineButtonClicked(this.defaultLines);\r\n\r\n        this.gridService.sizeColumns(this.agGridOptions);\r\n        this.isLoadingassignOnLoad = false;\r\n    }\r\n\r\n    processCellForClipboard(params) {\r\n        if (!params.value || !params.column.colDef.cellRendererParams) {\r\n            return params.value;\r\n        }\r\n        let value = params.value;\r\n        const cellRenderedParams = params.column.colDef.cellRendererParams(null);\r\n        const object = cellRenderedParams.valueProperty ? cellRenderedParams.options\r\n            .find((option) => option[cellRenderedParams.valueProperty] === value) : null;\r\n        value = typeof value !== 'string' && cellRenderedParams.displayProperty ? value[cellRenderedParams.displayProperty] : value;\r\n        if (object && cellRenderedParams.displayCode && cellRenderedParams.codeProperty) {\r\n            return object[cellRenderedParams.codeProperty];\r\n        }\r\n        return cellRenderedParams.displayProperty && object ? object[cellRenderedParams.displayProperty] : value;\r\n    }\r\n\r\n    accountingEntryTypeChanged(event) {        \r\n        this.filteredAccountLineTypeForMtm = [];\r\n        if (event.value === this.accountingDocTypeSelected) {\r\n            this.isAccrualSelected = false;\r\n            this.isMtmSelected = false;\r\n            this.docDateFormCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n            this.accPeriodFormCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n            this.agGridColumnApi.setColumnVisible(this.accrualNumberColumn, false);\r\n            this.agGridColumnApi.setColumnVisible(this.clientAccountColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.secondaryDocumentReferenceColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.externalDocumentReferenceColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.costCenterColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.dealNumberColumn, false);\r\n            this.agGridColumnApi.setColumnVisible(this.settlementCurrencyColumn, false);\r\n        } else if (event.value === this.accrualDocTypeSelected) {\r\n            this.isAccrualSelected = true;\r\n            this.isMtmSelected = false;\r\n            const lastDateOfMonth = this.companyManager.getCurrentCompanyDate();\r\n            const previousMonth = lastDateOfMonth.subtract(1, 'months');\r\n            this.docDateFormCtrl.patchValue(previousMonth.endOf('month'));\r\n            this.accPeriodFormCtrl.patchValue(lastDateOfMonth);\r\n            this.agGridColumnApi.setColumnVisible(this.accrualNumberColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.clientAccountColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.secondaryDocumentReferenceColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.externalDocumentReferenceColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.costCenterColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.dealNumberColumn, false);\r\n            this.agGridColumnApi.setColumnVisible(this.settlementCurrencyColumn, false);\r\n        }\r\n        else {\r\n            const lastDateOfMonth = this.companyManager.getCurrentCompanyDate();\r\n            this.isMtmSelected = true;\r\n            this.isAccrualSelected = false;\r\n            const previousMonth = lastDateOfMonth.subtract(1, 'months');\r\n            this.docDateFormCtrl.patchValue(previousMonth.endOf('month'));\r\n            this.accPeriodFormCtrl.patchValue(lastDateOfMonth);\r\n            this.agGridColumnApi.setColumnVisible(this.dealNumberColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.settlementCurrencyColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.accrualNumberColumn, true);\r\n            this.agGridColumnApi.setColumnVisible(this.clientAccountColumn, false);\r\n            this.agGridColumnApi.setColumnVisible(this.secondaryDocumentReferenceColumn, false);\r\n            this.agGridColumnApi.setColumnVisible(this.externalDocumentReferenceColumn, false);\r\n            this.agGridColumnApi.setColumnVisible(this.costCenterColumn, false);\r\n            if (this.filteredAccountLineType && this.filteredAccountLineType.length > 0) {\r\n                this.filteredAccountLineType.forEach((account) => {\r\n                    if (account.accountLineTypeCode === 'L' || account.accountLineTypeCode == 'B') {\r\n                        this.filteredAccountLineTypeForMtm.push(account);\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n        this.agGridColumnApi.setColumnVisible(this.provinceColumn, this.companyConfiguration.isProvinceEnable);\r\n        this.agGridColumnApi.setColumnVisible(this.branchColumn, this.companyConfiguration.isProvinceEnable);\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onAddAccountingLineButtonClicked(numberOfLines: number) {\r\n        for (let count = 1; count <= numberOfLines; count++) {\r\n            const newItem = new ManualJournalLine();\r\n            this.createAccountingDocumentLines.push(newItem);\r\n            this.agGridApi.updateRowData({ add: [newItem] });\r\n        }\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.isSave = true;\r\n        this.agGridApi.stopEditing();\r\n        if (this.createDocumentFormGroup.valid) {\r\n            const errorMessage = this.validateGridData();\r\n            if (errorMessage === this.noErrorMessage) {\r\n                this.checkAccrualNumber();\r\n            } else if (errorMessage === '') {\r\n                this.snackbarService.throwErrorSnackBar('Please fill atleast one grid row');\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(errorMessage);\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');\r\n        }\r\n    }\r\n\r\n     validateGridData(): string {\r\n        let isAnyRowDirty: boolean;\r\n        let isRowDataValid: boolean = true;\r\n        let isNotValid: boolean;\r\n        let errorMessage: string = this.noErrorMessage;\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty && isRowDataValid) {\r\n                isAnyRowDirty = true;\r\n                isRowDataValid = true;\r\n                let columnList = this.accountCreationConfiguration.filter((x) => x.isMandatory);                        \r\n                columnList.forEach((column) => {\r\n                    if (isRowDataValid) \r\n                    {                          \r\n                        isRowDataValid = this.validateGrid(column.id, rowData);\r\n\r\n                        if (rowData.data.quantity && rowData.data.quantity < 0) {\r\n                            errorMessage = 'The Quantity cannot be negative.';\r\n                        } else if ((this.isAccrualSelected || this.isMtmSelected) && (!rowData.data.accrualNumber)) {\r\n                            errorMessage = 'Accrual numbers are mandatory';\r\n                        } else if (this.authForCtrl.value && this.totalAmount !== 0) {\r\n                            errorMessage = 'Total amount should be zero';\r\n                        } \r\n                        else if (!isRowDataValid) {                           \r\n                                errorMessage = 'Grid data is invalid. Please resolve the errors.';                            \r\n                        }\r\n                    \r\n\r\n                        if (this.companyConfiguration && this.companyConfiguration.isProvinceEnable) {\r\n                            if (this.isNullEmptyOrRequiredString(rowData.data.provinceId)\r\n                                || this.isNullEmptyOrRequiredString(rowData.data.branchId)) {\r\n                                errorMessage = 'Grid data is invalid. Please resolve the errors.';\r\n                            }   \r\n                               \r\n                        }\r\n                    }\r\n                     \r\n                    \r\n                });\r\n            }\r\n                       \r\n        });\r\n        return isAnyRowDirty? errorMessage:'';\r\n    }    \r\n\r\n    isNullEmptyOrRequiredString(value) {\r\n\r\n        return value === null || value === '' || value === this.requiredString;\r\n    }\r\n\r\n    \r\n    checkAccrualNumber() {\r\n        if (!this.authForCtrl.value) {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Warning Message',\r\n                    text: 'The document is not authorized for posting : Continue with Save ?',\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.afterValidationChecksPassed();\r\n                }\r\n            });\r\n        } else {\r\n            const groupByAccrual = [];\r\n            let isValid: boolean = true;\r\n\r\n            this.agGridApi.forEachNode((document) => {\r\n                groupByAccrual[document.data.accrualNumber] = groupByAccrual[document.data.accrualNumber] || [];\r\n                groupByAccrual[document.data.accrualNumber].push({ amount: !document.data.fullAmount ? Number(document.data.amount) : document.data.fullAmount });\r\n            });\r\n            groupByAccrual.forEach((array) => {\r\n                if (isValid) {\r\n                    let totalSubAmount: number = 0;\r\n                    array.forEach((element) => { totalSubAmount = totalSubAmount + element.amount; });\r\n                    if (totalSubAmount !== 0) {\r\n                        isValid = false;\r\n                        this.snackbarService.throwErrorSnackBar(\r\n                            'Accrual numbers : Invalid format. Rows flagged with the same accrual numbers must be balanced (Amount=0.00)');\r\n                    }\r\n                }\r\n            });\r\n            if (isValid) {\r\n                this.afterValidationChecksPassed();\r\n            }\r\n        }\r\n    }\r\n\r\n    afterValidationChecksPassed() {\r\n        this.createAccountingDocumentLines = this.getGridData();\r\n        if (this.createAccountingDocumentLines) {\r\n            this.createAccountingDocumentLines.forEach((docLine) => {\r\n                if (docLine.accountReferenceId && typeof docLine.accountReferenceId !== 'number') {\r\n                    const accountReferenceId = this.masterdata.nominalAccounts.find((c) => c.accountNumber === docLine.accountReferenceId.toString());\r\n                    if (accountReferenceId) {\r\n                        docLine.accountReferenceId = accountReferenceId.nominalAccountId;\r\n                    }\r\n                }\r\n                if (docLine.clientAccountId && typeof docLine.clientAccountId !== 'number') {\r\n                    const clientAccountId = this.masterdata.counterparties.find((c) => c.counterpartyCode === docLine.clientAccountId.toString());\r\n                    if (clientAccountId) {\r\n                        docLine.clientAccountId = clientAccountId.counterpartyID;\r\n                    }\r\n                }\r\n                if (docLine.costTypeId && typeof docLine.costTypeId !== 'number') {\r\n                    const costTypeId = this.masterdata.costTypes.find((c) => c.costTypeCode === docLine.costTypeId.toString());\r\n                    if (costTypeId) {\r\n                        docLine.costTypeId = costTypeId.costTypeId;\r\n                    }\r\n                }\r\n                if (docLine.associatedAccountId && typeof docLine.associatedAccountId !== 'number') {\r\n                    const associatedAccountId = this.masterdata.counterparties.find((associatedAcc) =>\r\n                        associatedAcc.counterpartyCode === docLine.associatedAccountId.toString());\r\n                    if (associatedAccountId) {\r\n                        docLine.associatedAccountId = associatedAccountId.counterpartyID;\r\n                    }\r\n                }\r\n                if (docLine.accountLineTypeId && typeof docLine.accountLineTypeId !== 'number') {\r\n                    const accountLineType = this.masterdata.accountLineTypes.find((accountLine) =>\r\n                        accountLine.accountLineTypeCode === docLine.accountLineTypeId.toString());\r\n                    if (accountLineType) {\r\n                        docLine.accountLineTypeId = accountLineType.accountLineTypeId;\r\n                    }\r\n                }\r\n                if (docLine.departmentId && typeof docLine.departmentId !== 'number') {\r\n                    const department = this.masterdata.departments.find((dept) =>\r\n                        dept.departmentCode === docLine.departmentId.toString());\r\n                    if (department) {\r\n                        docLine.departmentId = department.departmentId;\r\n                    }\r\n                }\r\n                if (docLine.sectionId && typeof docLine.sectionId !== 'number') {\r\n                    const contracts = this.filteredContracts.find((contract) =>\r\n                        contract.contractLabel === docLine.sectionId.toString());\r\n                    if (contracts) {\r\n                        docLine.sectionId = contracts.sectionId;\r\n                    }\r\n                }\r\n                if (docLine.commodityId && typeof docLine.commodityId !== 'number') {\r\n                    const commoditymatched = this.filteredCommodityList.find((commodity) =>\r\n                        commodity.commodityCode === docLine.commodityId.toString());\r\n                    if (commoditymatched) {\r\n                        docLine.commodityId = commoditymatched.commodityId.toString();\r\n                    }\r\n                }\r\n\r\n                if (docLine.charterId && typeof docLine.charterId !== 'number') {\r\n                    const charterMatched = this.filteredCharter.find((charter) =>\r\n                        charter.charterCode === docLine.charterId.toString());\r\n                    if (charterMatched) {\r\n                        docLine.charterId = charterMatched.charterId;\r\n                    }\r\n                }\r\n                if (docLine.provinceId && typeof docLine.provinceId !== 'number') {\r\n                    const provinceId = this.masterdata.provinces.find((province) =>\r\n                        province.stateCode === docLine.provinceId.toString());\r\n                    if (provinceId) {\r\n                        docLine.provinceId = provinceId.provinceId;\r\n                    }\r\n                }\r\n\r\n            });\r\n        }\r\n        const manualJournalDocument: ManualJournalDocument = new ManualJournalDocument(this.createAccountingDocumentLines);\r\n        manualJournalDocument.valueDate = this.valueDateFormCtrl.value;\r\n        manualJournalDocument.documentDate = this.documentDateSelected ? this.documentDateSelected : this.docDateFormCtrl.value;\r\n        manualJournalDocument.currencyCode = this.currencyCtrl.value.currencyCode;\r\n        manualJournalDocument.accountingPeriod = this.accPeriodFormCtrl.value;\r\n        manualJournalDocument.authorizedForPosting = this.authForCtrl.value;\r\n        manualJournalDocument.toInterface = this.interfaceCtrl.value;\r\n        manualJournalDocument.transactionDocumentTypeId = (this.isAccrualSelected === true || this.isMtmSelected) ? PostingDocumentType.TA : PostingDocumentType.JL;\r\n        manualJournalDocument.taTypeId = (this.isMtmSelected) ? 3 : null;\r\n        this.requiredString = '';\r\n        this.manualJournalDocument = manualJournalDocument;\r\n        this.isLoadingassign = true;\r\n        this.subscription.push(this.executionService.createManualJournal(this.manualJournalDocument).subscribe((data) => {\r\n            this.isSummaryView = true;\r\n            this.isLoadingassign = false;\r\n            this.initializeGridColumns();\r\n            this.agGridColumnApi.setColumnVisible(this.createLineMenu, false);\r\n            if ((data.costAlternativeCode && data.departmentAlternativeCode\r\n                && data.nominalAlternativeAccount) || !manualJournalDocument.toInterface) {\r\n                if (this.isAccrualSelected || this.isMtmSelected) {\r\n                    this.authForCtrl.value === true ?\r\n                        this.snackbarService.informationAndCopySnackBar(\r\n                            'Accrual and autoreversal '\r\n                            + data.documentReference + ' has been created',\r\n                            data.documentReference) :\r\n                        this.snackbarService.informationAndCopySnackBar(\r\n                            'Accrual ' + data.documentReference\r\n                            + ' has been created',\r\n                            data.documentReference);\r\n                } else {\r\n                    this.snackbarService.informationAndCopySnackBar('Regular journal '\r\n                        + data.documentReference + ' has been created', data.documentReference);\r\n                }\r\n            } else {\r\n                this.showMappingErrorMessage(data);\r\n            }\r\n\r\n        }));\r\n    }\r\n\r\n    showMappingErrorMessage(data: ManualJournalResponse) {\r\n        if (!data.costAlternativeCode) {\r\n            this.mappingFields.push('\"Cost Alternative Code\"');\r\n        }\r\n        if (!data.departmentAlternativeCode) {\r\n            this.mappingFields.push('\"Department Alternative Code\"');\r\n        }\r\n        if (!data.nominalAlternativeAccount) {\r\n            this.mappingFields.push('\"Nominal Account\"');\r\n        }\r\n        if (!data.c2CCode) {\r\n            this.mappingFields.push('\"C2C Code\"');\r\n        }\r\n        const mappingErrorFields = this.mappingFields.join(', ');\r\n        const message = 'The document ' + data.documentReference +\r\n            ' will not be sent to the accounting interface because the accounting interface code for '\r\n            + mappingErrorFields + ' is/are not filled in. Please contact the accountant';\r\n        this.snackbarService.informationAndCopySnackBar(message, message);\r\n    }\r\n\r\n    getValueForCell(currentValue, list: any[], propertyToCompare: string, returnProperty) {\r\n        const filteredObject = ((currentValue === null ||\r\n            currentValue.trim() === '') ? null :\r\n            list.find((obj) =>\r\n                obj[propertyToCompare] ? obj[propertyToCompare].toUpperCase() === currentValue.toUpperCase() : false));\r\n        if (filteredObject) {\r\n            return filteredObject[returnProperty];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getGridData(): ManualJournalLine[] {\r\n        const accountingDocumentLines = new Array<ManualJournalLine>();\r\n        let isRowDataValid: boolean;\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty) {\r\n                isRowDataValid = false;\r\n                this.columnDefs.forEach((column) => {\r\n                    if (!isRowDataValid) {\r\n                        isRowDataValid = this.validateEmpty(column.colId, rowData);\r\n                    }\r\n                });\r\n                if (isRowDataValid) {\r\n                    rowData.data.amount = rowData.data.fullAmount ? rowData.data.fullAmount : rowData.data.amount;\r\n\r\n                    rowData.data.quantity = rowData.data.fullQuantity ? rowData.data.fullQuantity : rowData.data.quantity;\r\n\r\n                    accountingDocumentLines.push(rowData.data);\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        return accountingDocumentLines;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        if (!this.isSummaryView) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Discard Changes',\r\n                    text: 'You have some modification pending. Close and lose changes?',\r\n                    okButton: 'Ok',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.router.navigate(\r\n                        ['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries'],\r\n                    );\r\n                }\r\n            });\r\n\r\n        } else {\r\n            if (!this.authForCtrl.value) {\r\n                this.router.navigate(\r\n                    ['/' + this.companyManager.getCurrentCompanyId() + '/financial/posting/management'],\r\n                );\r\n            } else {\r\n                this.router.navigate(\r\n                    ['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries'],\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    isValueDateBeforeDocumentDate() {\r\n        const result = isDateTwoBeforeDateOne(\r\n            this.documentDateSelected ? this.documentDateSelected : this.docDateFormCtrl.value,\r\n            this.valueDateFormCtrl.value);\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.currencyCtrl.setValidators(Validators.compose([Validators.required]));\r\n\r\n        if (this.accountCreationConfiguration.length > 0) {\r\n            if (this.isRequired('accountingPeriod')) {\r\n                this.accPeriodFormCtrl.setValidators(Validators.compose([Validators.required]));\r\n            }\r\n           \r\n            this.docDateFormCtrl.setValidators(Validators.compose([Validators.required]));\r\n            \r\n            if (this.isRequired('valueDate')) {\r\n                this.valueDateFormCtrl.setValidators(Validators.compose([Validators.required]));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    formatPrice(value: number) {\r\n        const indexOf = value.toString().indexOf('.');\r\n        if (indexOf !== -1) {\r\n            const remainingLength = value.toString().length - indexOf;\r\n            if (remainingLength > 3) {\r\n                return value.toString().substr(0, indexOf + 3);\r\n            }\r\n        }\r\n        return value.toString();\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            if (params.colDef) {\r\n                const columnChanged: string = params.colDef.field;\r\n                if (columnChanged === this.quantityColumn) {\r\n                    params.data.fullQuantity = params.newValue;\r\n                    params.data.quantity = params.newValue;\r\n                    if (params.newValue < 0) {\r\n                        this.snackbarService.throwErrorSnackBar('The Quantity cannot be negative.');\r\n                    }\r\n                }\r\n                if (columnChanged === this.amountColumn) {\r\n\r\n                    params.data.fullAmount = params.newValue;\r\n                    params.data.amount = params.newValue;\r\n                    this.totalAmount = 0;\r\n                    const totalAmountAtlasNumber = new AtlasNumber('0');\r\n                    this.agGridApi.forEachNode((rownode) => {\r\n                        if (rownode.data.fullAmount === 0) {\r\n                            rownode.data.fullAmount = null;\r\n                        }\r\n                        if (rownode.data.fullAmount) {\r\n                            this.calculateTotalAmount();\r\n                        }\r\n                    });\r\n                    if (Number(params.newValue) === 0) {\r\n                        this.snackbarService.throwErrorSnackBar('Amount cannot be zero');\r\n                    }\r\n                } else if (columnChanged === this.nominalAccount) {\r\n                    if (this.nominalAccountFound && this.nominalAccountFound.clientAccountMandatory === 1) {\r\n                        if (params.data && !params.data.clientAccountId) {\r\n                            params.node.setDataValue('clientAccountId', this.requiredString);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'Nom. Account',\r\n                colId: 'accountReferenceId',\r\n                field: 'accountReferenceId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'nominalAccountsGrid',\r\n                        isRequired: this.isRequired('accountReferenceId'),\r\n                        options: this.filteredNominalAccountList,\r\n                        displayProperty: 'accountNumber',\r\n                        codeProperty: 'accountNumber',\r\n                        descriptionProperty: 'detailedDescription',\r\n                        valueProperty: 'nominalAccountId',\r\n                        lightBoxTitle: 'Results for Nominal Accounts',\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onNominalAccountSelected.bind(this),\r\n                tooltip: (params) => this.getTooltip(\r\n                    params, 'detailedDescription', 'accountNumber', this.filteredNominalAccountList),\r\n\r\n            },\r\n            {\r\n                headerName: 'Cli. account',\r\n                colId: 'clientAccountId',\r\n                field: 'clientAccountId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isClientAccountRequired = false;\r\n                    if (params.data && params.data.clientAccountId === '') {\r\n                        isClientAccountRequired = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.filteredCounterpartyList,\r\n                        isRequired: isClientAccountRequired,\r\n                        displayProperty: 'counterpartyCode',\r\n                        codeProperty: 'counterpartyCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'counterpartyID',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onClientAccountSelected.bind(this),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'counterpartyCode', this.filteredCounterpartyList),\r\n            },\r\n            {\r\n                headerName: 'Associated Acc.',\r\n                colId: 'associatedAccountId',\r\n                field: 'associatedAccountId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.filteredCounterpartyList,\r\n                        // isRequired: (this.isMtmSelected) ? this.isRequired('associatedAccountId') : false,\r\n                        isRequired: this.isRequired('associatedAccountId'),\r\n                        displayProperty: 'counterpartyCode',\r\n                        codeProperty: 'counterpartyCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'counterpartyID',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onClientAccountSelected.bind(this),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'counterpartyCode', this.filteredCounterpartyList),\r\n            },\r\n            {\r\n                headerName: 'Acc. L. Type',\r\n                colId: 'accountLineTypeId',\r\n                field: 'accountLineTypeId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'accountLineTypeGrid',\r\n                        options: (this.isMtmSelected) ? this.filteredAccountLineTypeForMtm : this.filteredAccountLineType,\r\n                        isRequired: this.isRequired('accountLineTypeId'),\r\n                        displayProperty: 'accountLineTypeCode',\r\n                        codeProperty: 'accountLineTypeCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'accountLineTypeId',\r\n                        lightBoxTitle: 'Results for  Account Line Type',\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                        filterContextualSearchFunction: this.filterAccountLineTypes.bind(this),\r\n                    };\r\n                },\r\n                onCellValueChanged: this.setProvinceAndBranchValue.bind(this),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'accountLineTypeCode', this.filteredAccountLineType),\r\n\r\n            },\r\n            {\r\n                headerName: 'Cost types',\r\n                colId: 'costTypeId',\r\n                field: 'costTypeId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        isEditable: true,\r\n                        gridId: 'costTypesGrid',\r\n                        isRequired: this.isRequired('costTypeId'),\r\n                        displayProperty: 'costTypeCode',\r\n                        codeProperty: 'costTypeCode',\r\n                        descriptionProperty: 'name',\r\n                        valueProperty: 'costTypeId',\r\n                        lightBoxTitle: 'Results for Cost',\r\n                        options: this.filteredCostTypeList,\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.setProvinceAndBranchValue.bind(this),\r\n                tooltip: (params) => this.getTooltip(params, 'name', 'costTypeCode', this.filteredCostTypeList),\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                colId: 'amount',\r\n                field: 'amount',\r\n                type: 'numericColumn',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                editable: this.isGridEditable.bind(this),\r\n                valueFormatter: this.numberFormatter,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(15, 10, true),\r\n                    isRightAligned: false,\r\n                },\r\n                onCellValueChanged: this.setProvinceAndBranchValue.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                colId: 'narrative',\r\n                field: 'narrative',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                editable: this.isGridEditable.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Dept',\r\n                colId: 'departmentId',\r\n                field: 'departmentId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'departmentsGrid',\r\n                        isRequired: this.isRequired('departmentId'),\r\n                        displayProperty: 'departmentCode',\r\n                        codeProperty: 'departmentCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'departmentId',\r\n                        lightBoxTitle: 'Results for Departments',\r\n                        options: this.filteredDepartmentList,\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.setProvinceAndBranchValue.bind(this),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'departmentCode', this.filteredDepartmentList),\r\n            },\r\n            {\r\n                headerName: 'Sec. Doc. Ref',\r\n                colId: 'secondaryDocumentReference',\r\n                field: 'secondaryDocumentReference',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'transactionDocumentGrid',\r\n                        isRequired: this.isRequired('secondaryDocumentReference'),\r\n                        valueProperty: 'docRef',\r\n                        displayProperty: 'docRef',\r\n                        lightBoxTitle: 'Results for Transaction Documents',\r\n                        options: this.filteredDocuments,\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value : null;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Ext. Doc. Ref',\r\n                colId: 'externalDocumentReference',\r\n                field: 'externalDocumentReference',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                editable: this.isGridEditable.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Contract ref.',\r\n                colId: 'sectionId',\r\n                field: 'sectionId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isContractRefEditable = false;\r\n                    if (params.data && (params.data.dealNumber === '' || params.data.dealNumber === null)) {\r\n                        isContractRefEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (this.isGridEditable() && isContractRefEditable),\r\n                        },\r\n                        gridId: 'tradeList',\r\n                        isRequired: isContractRefEditable ? this.isRequired('sectionId') : false,\r\n                        displayProperty: 'contractLabel',\r\n                        valueProperty: 'sectionId',\r\n                        lightBoxTitle: 'Results for Contracts',\r\n                        dataLoader: this.tradeDataLoader,\r\n                        options: this.filteredContracts,\r\n                        showContextualSearchIcon: (!this.isSummaryView && isContractRefEditable),\r\n                    };\r\n                },\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value : null;\r\n                },\r\n                onCellValueChanged: this.onContractSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Deal No.',\r\n                colId: 'dealNumber',\r\n                field: 'dealNumber',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isDealNumberEditable = false;\r\n                    if (params.data && (params.data.sectionId === '' || params.data.sectionId === null)) {\r\n                        isDealNumberEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (this.isGridEditable() && isDealNumberEditable),\r\n                        },\r\n                        gridId: 'fxDealList',\r\n                        isRequired: (isDealNumberEditable)?this.isRequired('dealNumber'):false,\r\n                        displayProperty: 'dealNumber',\r\n                        valueProperty: 'dealNumber',\r\n                        lightBoxTitle: 'Results for FxDeals',\r\n                        dataLoader: this.fxDealLoader,\r\n                        options: this.filteredFxDeals,\r\n                        showContextualSearchIcon: (!this.isSummaryView && isDealNumberEditable),\r\n                    };\r\n\r\n                },\r\n                onCellValueChanged: this.onDealNumberSelected.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value : null;\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: 'Settlement Ccy.',\r\n                colId: 'settlementCurrency',\r\n                field: 'settlementCurrency',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isSettlementCurrencyEditable = false;\r\n                    if (params.data && (params.data.sectionId === '' || params.data.sectionId === null)) {\r\n                        isSettlementCurrencyEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (isSettlementCurrencyEditable && this.isGridEditable()),\r\n                        },\r\n                        gridId: 'currenciesGrid',\r\n                        isRequired: (isSettlementCurrencyEditable)? this.isRequired('settlementCurrency') : false,\r\n                        displayProperty: 'currencyCode',\r\n                        codeProperty: 'currencyCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'currencyCode',\r\n                        lightBoxTitle: 'Results for Currencies',\r\n                        options: this.filteredSettlementCurrencyList,\r\n                        showContextualSearchIcon: (!this.isSummaryView && isSettlementCurrencyEditable),\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => this.onValueSelected(\r\n                    params, 'currencyCode', 'Currency', 'currencyCode',\r\n                    this.filteredCurrencyList, this.requiredString),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'currencyCode', this.filteredCurrencyList),\r\n            },\r\n            {\r\n                headerName: 'Province',\r\n                colId: 'provinceId',\r\n                field: 'provinceId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'provincesMasterData',\r\n                        isRequired: this.companyConfiguration && this.companyConfiguration.isProvinceEnable,\r\n                        displayProperty: 'stateCode',\r\n                        codeProperty: 'stateCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'provinceId',\r\n                        lightBoxTitle: 'Results for Provinces',\r\n                        options: this.filteredProvinceList,\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'stateCode', this.filteredProvinceList),\r\n            },\r\n            {\r\n                headerName: 'Branch',\r\n                colId: 'branchId',\r\n                field: 'branchId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'branchMasterData',\r\n                        isRequired: this.companyConfiguration && this.companyConfiguration.isProvinceEnable,\r\n                        displayProperty: 'branchCode',\r\n                        codeProperty: 'branchCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'branchId',\r\n                        lightBoxTitle: 'Results for Branch',\r\n                        options: this.filteredBranchList,\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'branchCode', this.filteredBranchList),\r\n            },\r\n            {\r\n                headerName: 'Cmy',\r\n                colId: 'commodityId',\r\n                field: 'commodityId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isCommodityEditable = false;\r\n                    if (params.data && (params.data.dealNumber === '' || params.data.dealNumber === null)) {\r\n                        isCommodityEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (this.isGridEditable() && isCommodityEditable),\r\n                        },\r\n                        gridId: 'commodityGrid',\r\n                        isRequired: isCommodityEditable ? this.isRequired('commodityId') : false,\r\n                        displayProperty: 'commodityCode',\r\n                        codeProperty: 'commodityCode',\r\n                        descriptionProperty: 'commodityDescription',\r\n                        valueProperty: 'commodityId',\r\n                        lightBoxTitle: 'Results for Commodities',\r\n                        options: this.filteredCommodityList,\r\n                        showContextualSearchIcon: (!this.isSummaryView && isCommodityEditable),\r\n                    };\r\n                },\r\n                tooltip: (params) => this.getTooltip(params, 'commodityDescription', 'commodityCode', this.filteredCommodityList),\r\n            },\r\n            {\r\n                headerName: 'Qty',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                editable: this.isGridEditable.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, true),\r\n                    isRightAligned: false,\r\n                },\r\n                tooltip: (params) => {\r\n                    return params.value;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                colId: 'charterId',\r\n                field: 'charterId',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(),\r\n                        },\r\n                        gridId: 'charterGrid',\r\n                        isRequired: this.isRequired('charterId'),\r\n                        displayProperty: 'charterCode',\r\n                        codeProperty: 'charterCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'charterId',\r\n                        lightBoxTitle: 'Results for Charters',\r\n                        options: this.filteredCharter,\r\n                        showContextualSearchIcon: !this.isSummaryView,\r\n                    };\r\n                },\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'charterCode', this.filteredCharter),\r\n            },\r\n            {\r\n                headerName: 'CC-1',\r\n                colId: 'costCenter',\r\n                field: 'costCenter',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                editable: this.isGridEditable.bind(this),\r\n            },\r\n            {\r\n                colId: 'accrualNumber',\r\n\r\n                field: 'accrualNumber',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                editable: this.isGridEditable.bind(this),\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: AllNumberMask(),\r\n                },\r\n                headerComponentFramework: AgGridAccrualNumberComponent,\r\n                headerComponentParams: {\r\n                    headerName: 'Accrual n°',\r\n                },\r\n            },\r\n            {\r\n                headerName: '',\r\n                colId: 'createLineMenu',\r\n                suppressToolPanel: true,\r\n                lockPosition: true,\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    menuActions: this.createAccountingDocumentGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 60,\r\n            },\r\n        ];\r\n    }\r\n\r\n    filterCostTypes(value: any, options: any[], rowData: any): any[] {\r\n        // filter cost that have the same nominal account\r\n        const filterCostTypeOnAccountType = [];\r\n        // when there is accountReferenceId in params\r\n        if (rowData && rowData.accountReferenceId) {\r\n            const filteredNominalAccount = this.filteredNominalAccountList.find((nominalAccount) =>\r\n                nominalAccount.nominalAccountId === rowData.accountReferenceId);\r\n            options.filter((costType) => {\r\n                // find mathcing nominal account for cost type\r\n                const matchingNominalAccount = costType.nominalAccountCode === filteredNominalAccount.accountNumber ||\r\n                    costType.otherAcc === filteredNominalAccount.accountNumber;\r\n                if (matchingNominalAccount) {\r\n                    filterCostTypeOnAccountType.push(costType);\r\n                }\r\n            });\r\n            options = filterCostTypeOnAccountType.length > 0 ? filterCostTypeOnAccountType : this.filteredCostTypeList;\r\n        }\r\n        return options;\r\n    }\r\n\r\n    filterAccountLineTypes(value: any, options: any[], rowData: any): any[] {\r\n        let accountLineTypeList = [];\r\n        accountLineTypeList = options;\r\n        if (rowData.accountReferenceId) {\r\n            const nominalAccountSelected = this.filteredNominalAccountList.find(\r\n                (nominalAccount) => nominalAccount.nominalAccountId\r\n                    === rowData.accountReferenceId);\r\n            if (nominalAccountSelected) {\r\n                if (this.isMtmSelected) {\r\n                    if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Bank');\r\n                    } else {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Ledger');\r\n                    }\r\n                } else {\r\n                    if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Customer' || accountType.description === 'Vendor');\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        options = accountLineTypeList;\r\n        return options;\r\n    }\r\n\r\n    isGridEditable(): boolean {\r\n        if (!this.isSummaryView) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isRequired(params: string): boolean {\r\n        if (this.accountCreationConfiguration.length > 0) {            \r\n            const result = this.accountCreationConfiguration[this.accountCreationConfiguration.findIndex((x) => x.id === params)];\r\n            if(result && !this.isSummaryView)\r\n            {\r\n                return result.isMandatory;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    formatQuantity(params) {\r\n        if (params.value) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params.value);\r\n\r\n        }\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            if(params.colDef.colId === 'accrualNumber')\r\n            {\r\n                return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n            }\r\n            else if (this.isRequired(params.colDef.colId)) {\r\n                return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }    \r\n\r\n        return params.value;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n    handleAction(action: string, documentLine: ManualJournalLine) {\r\n        switch (action) {\r\n            case this.createDocumentMenuActions.copyDocumentLine:\r\n                const newManualLine: ManualJournalLine = new ManualJournalLine(documentLine);\r\n                this.createAccountingDocumentLines.push(newManualLine);\r\n                this.agGridApi.updateRowData({ add: [newManualLine] });\r\n                this.calculateTotalAmount();\r\n                this.snackbarService.informationSnackBar('Row added successfully at the end of the grid');\r\n                break;\r\n            case this.createDocumentMenuActions.deleteDocumentLine:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Document Line Deletion',\r\n                        text: 'Are you sure you want to delete this line?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                const confirmationDeleteSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        const itemIndex = this.createAccountingDocumentLines.lastIndexOf(documentLine);\r\n                        this.createAccountingDocumentLines.splice(itemIndex, 1);\r\n                        this.agGridApi.updateRowData({ remove: [documentLine] });                        \r\n                        this.gridEnlargementComponent.refreshGrid();\r\n                        this.calculateTotalAmount();\r\n                    }\r\n                });\r\n                this.subscriptions.push(confirmationDeleteSubscription);\r\n                break;\r\n            default: this.assertUnreachable(action);\r\n        }\r\n    }\r\n\r\n    calculateTotalAmount() {\r\n        this.totalAmount = 0;\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.amount) {\r\n                this.totalAmount = Math.round((this.totalAmount + Number(rowData.data.amount)) * 100) / 100;\r\n                rowData.data.isDirty = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    assertUnreachable(x): never {\r\n        throw new Error('Unknown action');\r\n    }\r\n\r\n    onContractSelected(params) {\r\n        if (params.data && params.data.sectionId && !this.isSummaryView) {\r\n            this.initializeGridColumns();\r\n        }\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            const selectedNominalAccount = this.filteredContracts.find(\r\n                (contract) => contract.contractLabel.toUpperCase() === params.newValue.toUpperCase(),\r\n            );\r\n            if (!selectedNominalAccount) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Contract reference does not exist');\r\n                params.node.setDataValue('sectionId', '');\r\n            } else {\r\n                params.node.setDataValue('departmentId', selectedNominalAccount.departmentCode);\r\n                params.node.setDataValue('commodityId', selectedNominalAccount.commodity1);\r\n                params.node.setDataValue('charterId', selectedNominalAccount.charterReference);\r\n            }\r\n        }\r\n    }\r\n\r\n    onNominalAccountSelected(params) {\r\n        if (params.data && !this.isSummaryView && params.data.accountReferenceId) {\r\n            const selectedNominalAccount = this.filteredNominalAccountList.find((nomAcc) =>\r\n                nomAcc.nominalAccountId === params.data.accountReferenceId);\r\n            if (selectedNominalAccount && selectedNominalAccount.clientAccountMandatory === 1) {\r\n                if (this.isMtmSelected) {\r\n                    params.node.setDataValue('accountLineTypeId', 'B');\r\n                }\r\n                if (!params.data.clientAccountId) {\r\n                    params.node.setDataValue('clientAccountId', '');\r\n                }\r\n            } else {\r\n                if (this.isMtmSelected) {\r\n                    params.node.setDataValue('accountLineTypeId', 'L');\r\n                }\r\n            }\r\n            if (params.data.costTypeId) {\r\n                params.node.setDataValue('costTypeId', '');\r\n            }\r\n        }\r\n        this.setProvinceAndBranchValue(params);\r\n    }\r\n\r\n    setProvinceAndBranchValue(params: any) {\r\n        if (!this.isSummaryView && this.companyConfiguration.isProvinceEnable) {\r\n            if (!this.checkNullOrEmpty(params.node.data.accountReferenceId)\r\n                || !this.checkNullOrEmpty(params.node.data.accountLineTypeId)\r\n                || !this.checkNullOrEmpty(params.node.data.amount)\r\n                || !this.checkNullOrEmpty(params.node.data.costTypeId)\r\n                || !this.checkNullOrEmpty(params.node.data.departmentId)\r\n                || !this.checkNullOrEmpty(params.node.data.fullAmount)\r\n            ) {\r\n                if (this.checkNullOrEmpty(params.node.data.provinceId)) {\r\n                    const selectedProvince = this.filteredProvinceList.find(\r\n                        (p) => p.provinceId === this.companyConfiguration.defaultProvinceId,\r\n                    );\r\n\r\n                    if (selectedProvince) {\r\n                        params.node.setDataValue('provinceId', selectedProvince.provinceId);\r\n                    }\r\n                }\r\n\r\n                if (this.checkNullOrEmpty(params.node.data.branchId)) {\r\n                    const selectedBranch = this.filteredBranchList.find(\r\n                        (p) => p.branchId === this.companyConfiguration.defaultBranchId,\r\n                    );\r\n\r\n                    if (selectedBranch) {\r\n                        params.node.setDataValue('branchId', selectedBranch.branchId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkNullOrEmpty(value: any): boolean {\r\n        if (value === null || value === undefined || value === '') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    onClientAccountSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue !== this.requiredString) {\r\n            const selectedClientAccount = this.filteredCounterpartyList.find(\r\n                (clientAccount) => clientAccount.counterpartyID === params.newValue,\r\n            );\r\n            if (!selectedClientAccount) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Client Account does not exist');\r\n                params.colDef.colId === 'clientAccountId' ?\r\n                    params.node.setDataValue('clientAccountId', params.oldValue) :\r\n                    params.node.setDataValue('associatedAccountId', '');\r\n            }\r\n        }\r\n\r\n        if (params.colDef.colId === 'clientAccountId' && !this.isSummaryView) {\r\n            params.node.setDataValue('associatedAccountId', params.data.clientAccountId);\r\n        }\r\n    }\r\n\r\n    onValueSelected(params, columnId: string, valueName: string, code: string, list: any[],\r\n        requiredString: string, includeEmpty: boolean = false) {\r\n        if (params.newValue !== '' && ((includeEmpty && params.newValue === '') || (params.newValue && params.oldValue !== params.newValue))) {\r\n            const selected = list.find(\r\n                (obj) => obj[code] ? obj[code].toUpperCase() === params.newValue.toUpperCase() : false,\r\n            );\r\n            if (!selected) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : ' + valueName + ' does not exist');\r\n                params.node.setDataValue(columnId, requiredString);\r\n            }\r\n        }\r\n    }\r\n\r\n    onAmountChanged(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            params.data.fullAmount = params.newValue;\r\n        }\r\n    }\r\n\r\n    onQuantityChanged(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            params.data.fullQuantity = params.newValue;\r\n        }\r\n    }\r\n\r\n    OnExportButton() {\r\n        this.agGridApi.forEachNode((node) => {\r\n            if (node.data.accountReferenceId && typeof node.data.accountReferenceId === 'number') {\r\n                const nominalAccount = this.filteredNominalAccountList.find((nominalAcc) =>\r\n                    nominalAcc.nominalAccountId === node.data.accountReferenceId);\r\n                if (nominalAccount) {\r\n                    node.data.accountReferenceId = nominalAccount.accountNumber;\r\n                }\r\n            }\r\n            if (node.data.clientAccountId && typeof node.data.clientAccountId === 'number') {\r\n                const clientAccount = this.filteredCounterpartyList.find((client) =>\r\n                    client.counterpartyID === node.data.clientAccountId);\r\n                if (clientAccount) {\r\n                    node.data.clientAccountId = clientAccount.counterpartyCode;\r\n                }\r\n            }\r\n            if (node.data.associatedAccountId && typeof node.data.associatedAccountId === 'number') {\r\n                const associatedAccount = this.filteredCounterpartyList.find((associatedAcc) =>\r\n                    associatedAcc.counterpartyID === node.data.associatedAccountId);\r\n                if (associatedAccount) {\r\n                    node.data.associatedAccountId = associatedAccount.counterpartyCode;\r\n                }\r\n            }\r\n            if (node.data.accountLineTypeId && typeof node.data.accountLineTypeId === 'number') {\r\n                const accountLineType = this.filteredAccountLineType.find((accountLine) =>\r\n                    accountLine.accountLineTypeId === node.data.accountLineTypeId);\r\n                if (accountLineType) {\r\n                    node.data.accountLineTypeId = accountLineType.accountLineTypeCode;\r\n                }\r\n            }\r\n            if (node.data.costTypeId && typeof node.data.costTypeId === 'number') {\r\n                const costType = this.filteredCostTypeList.find((cost) =>\r\n                    cost.costTypeId === node.data.costTypeId);\r\n                if (costType) {\r\n                    node.data.costTypeId = costType.costTypeCode;\r\n                }\r\n            }\r\n            if (node.data.departmentId && typeof node.data.departmentId === 'number') {\r\n                const department = this.filteredDepartmentList.find((dept) =>\r\n                    dept.departmentId === node.data.departmentId);\r\n                if (department) {\r\n                    node.data.departmentId = department.departmentCode;\r\n                }\r\n            }\r\n            if (node.data.sectionId && typeof node.data.sectionId === 'number') {\r\n                const contracts = this.filteredContracts.find((contract) =>\r\n                    contract.sectionId === node.data.sectionId);\r\n                if (contracts) {\r\n                    node.data.sectionId = contracts.contractLabel;\r\n                }\r\n            }\r\n            if (node.data.commodityId && typeof node.data.commodityId === 'number') {\r\n                const commoditymatched = this.filteredCommodityList.find((commodity) =>\r\n                    commodity.commodityId === node.data.commodityId);\r\n                if (commoditymatched) {\r\n                    node.data.commodityId = commoditymatched.commodityCode;\r\n                }\r\n            }\r\n            if (node.data.charterId && typeof node.data.charterId === 'number') {\r\n                const charterMatched = this.filteredCharter.find((charter) =>\r\n                    charter.charterId === node.data.charterId);\r\n                if (charterMatched) {\r\n                    node.data.charterId = charterMatched.charterCode;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        this.OnExportButton();\r\n        this.agGridOptions.api.exportDataAsExcel(this.getExportParams('.xlsx'));\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        this.OnExportButton();\r\n        this.agGridOptions.api.exportDataAsCsv(this.getExportParams('.csv'));\r\n    }\r\n\r\n    getExportParams(fileExtension) {\r\n        const today = new Date();\r\n        const currentDate = this.datePipe.transform(today, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: currentDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + fileExtension,\r\n        };\r\n        return params;\r\n    }\r\n\r\n    onLoadPreviousPageButtonClicked() {\r\n        this.location.back();\r\n    }\r\n\r\n    validateGrid(colId: string, rowData: any) {\r\n            if(colId == \"valueDate\" || colId == \"accountingPeriod\" || colId == \"paymentDocumentDate\")\r\n            {\r\n                return true;\r\n            }    \r\n            else if((this.isAccrualSelected || this.isMtmSelected) && colId == \"accrualNumber\")\r\n            {\r\n                if (rowData.data[colId]\r\n                    && rowData.data[colId].toString().trim() != ''\r\n                    && rowData.data[colId].toString().trim() != 'Required*') {\r\n                    return true;\r\n                }\r\n            }\r\n            else if(this.isRequired(colId) && this.isMtmSelected)        \r\n            {\r\n               \r\n                if (colId=='sectionId' || (rowData.data[colId]\r\n                    && rowData.data[colId].toString().trim() != ''\r\n                    && rowData.data[colId].toString().trim() != 'Required*')) {\r\n                    return true;\r\n                }\r\n               \r\n            }\r\n            else if(this.isRequired(colId) &&  !this.isMtmSelected)        \r\n            {\r\n                if ((colId=='settlementCurrency' || colId == 'dealNumber' || colId === \"accrualNumber\")  \r\n                    || (rowData.data[colId]               \r\n                    && rowData.data[colId].toString().trim() != ''\r\n                    && rowData.data[colId].toString().trim() != 'Required*')) {\r\n                    return true;\r\n                }\r\n            }\r\n            else if(!this.isRequired(colId))\r\n            {\r\n                return true;\r\n            }\r\n        return false;\r\n    }\r\n\r\n    validateEmpty(colId: string, rowData: any) {\r\n        if (rowData.data[colId] && rowData.data[colId] !== null\r\n            && rowData.data[colId].toString().trim() !== '' && rowData.data[colId] !== 'Required*') {\r\n            if (colId === 'amount' && rowData.data[colId] === 0) {\r\n                return false;\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        if (params && params.value && !isNaN(params.value)) {\r\n            return Math.floor(params.value).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n        }\r\n        return null;\r\n    }\r\n\r\n    formatAmountValue(value) {\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(value);\r\n    }\r\n    onDealNumberSelected(params) {\r\n        if (params.data && params.data.dealNumber && !this.isSummaryView) {\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    ondocumentSelected(file: File) {\r\n        let setDataValue: AccountingImportReport;\r\n        const fileName = file.name;\r\n        const fileType = fileName.substr(fileName.lastIndexOf('.') + 1);\r\n        if (fileType === 'csv') {\r\n            this.progressbar = false;\r\n            this.accountingDocumentService.fileUpload(file, this.isAccrualSelected, this.isMtmSelected).subscribe((data: AccountingImportReport) => {\r\n                if (data) {\r\n                    setDataValue = data;\r\n                    const goodDataResult = this.objectKeys(data.goodData.lineNumber);\r\n                    const blockerDataResult = this.objectKeys(data.goodData.lineNumber);\r\n                    if (goodDataResult.length === 0 && data.blockerData.length > 0) {\r\n                        this.disableConfirmImport = true;\r\n                        data.disableConfirmImport = this.disableConfirmImport;\r\n                    } else {\r\n                        this.disableConfirmImport = false;\r\n                        data.disableConfirmImport = this.disableConfirmImport;\r\n                    }\r\n                    const accountingImportReportMsgDialog = this.dialog.open(AccountingWarningErrorMsgDialogComponent, {\r\n                        data,\r\n                        width: '80%',\r\n                        height: '80%',\r\n                    });\r\n                    accountingImportReportMsgDialog.afterClosed().subscribe((answer) => {\r\n                        if (answer) {\r\n                            if (answer.toBeImported) {\r\n                                const goodDataResult = this.objectKeys(data.goodData.lineNumber);\r\n                                const setRowValue = data.goodDataList;\r\n                                const result = this.objectKeys(data.blockerData.length);\r\n                                this.agGridApi.setRowData(setRowValue);\r\n                                this.agGridApi.forEachNode((rowData) => {\r\n                                    rowData.data.isDirty = true;\r\n                                    this.totalAmount = this.totalAmount + Number(rowData.data.amount);\r\n                                });\r\n\r\n                                if (data.blockerData.length > 0 && (goodDataResult.length > 0)) {\r\n                                    this.snackbarService.informationSnackBar('Import was successful');\r\n                                } else if (data.blockerData.length === 0 && (goodDataResult.length > 0)) {\r\n                                    this.snackbarService.informationSnackBar('Import was successful.');\r\n                                } else if (goodDataResult.length === 0) {\r\n                                    this.snackbarService.informationSnackBar('Import was unsuccessful.');\r\n                                }\r\n                                this.progressbar = false;\r\n                            } else {\r\n                                this.snackbarService.informationSnackBar('Import was unsuccessful.');\r\n                                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entry/new']);\r\n                            }\r\n                        } else {\r\n                            accountingImportReportMsgDialog.close();\r\n                            this.snackbarService.informationSnackBar('Import was unsuccessful.');\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Only csv files are allowed to be selected');\r\n        }\r\n\r\n    }\r\n}\r\n","module.exports = \"<h1 mat-dialog-title>Import Accounting Line </h1>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoading\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         *ngIf=\\\"!isLoading\\\">\\r\\n        <div class=\\\"manual-import information-banner-card\\\">\\r\\n            <div fxLayout=\\\"row\\\">\\r\\n                <div *ngIf=\\\"dialogData.blockerData.length > 0\\\">\\r\\n                    <div class=\\\"error-circle-icon\\\"\\r\\n                         fxLayout=\\\"column\\\">\\r\\n                        <mat-icon>remove_circle</mat-icon>\\r\\n                    </div>\\r\\n                    <div *ngFor=\\\"let data of dialogData.blockerData\\\">\\r\\n                        <p>{{data.errorMessage}}</p>\\r\\n                        <mat-chip-list class=\\\"chip-list\\\">\\r\\n                            <mat-chip selected\\r\\n                                      disabled\\r\\n                                      *ngFor=\\\"let key of data.lineNumber\\\">\\r\\n                                {{'Line number: ' + key }}\\r\\n                            </mat-chip>\\r\\n                        </mat-chip-list>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <mat-divider></mat-divider>\\r\\n            <div class=\\\"info\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 *ngIf=\\\"goodDataCount > 0\\\">\\r\\n                <div class=\\\"info-circle-icon\\\"\\r\\n                     fxLayout=\\\"column\\\">\\r\\n                    <mat-icon>check_circle</mat-icon>\\r\\n                </div>\\r\\n                <div>\\r\\n                    <p>{{dialogData.goodData.errorMessage}} </p>\\r\\n                    <mat-chip-list class=\\\"chip-list\\\">\\r\\n                        <mat-chip selected\\r\\n                                  disabled\\r\\n                                  *ngFor=\\\"let key of dialogData.goodData.lineNumber\\\">\\r\\n                            {{'Line number: ' + key }}\\r\\n                        </mat-chip>\\r\\n                    </mat-chip-list>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n\\r\\n    <button mat-button\\r\\n            (click)=\\\"onDiscardButtonClicked()\\\">Discard</button>\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-button\\r\\n            disabled=\\\"{{this.dialogData.disableConfirmImport}}\\\"\\r\\n            (click)=\\\"onConfirmButtonClicked()\\\">Confirm Import</button>\\r\\n\\r\\n</mat-dialog-actions>\"","module.exports = \".mat-dialog-title {\\n  margin-bottom: 16px; }\\n\\n.manual-import p {\\n  font-weight: bold;\\n  font-size: 14px; }\\n\\n.mat-divider {\\n  margin-top: 16px;\\n  margin-bottom: 16px; }\\n\\nbutton {\\n  margin: 0; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { AccountingImportReport } from '../../../../../shared/entities/accountingImportReport.entity';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-warning-error-msg-dialog',\r\n    templateUrl: './accounting-warning-error-msg-dialog.component.html',\r\n    styleUrls: ['./accounting-warning-error-msg-dialog.component.scss']\r\n})\r\nexport class AccountingWarningErrorMsgDialogComponent extends BaseFormComponent implements OnInit {\r\n\r\n    isLoading = true;\r\n    objectKeys = Object.keys;\r\n    dialogData: AccountingImportReport;\r\n    warningDataCount: number;\r\n    goodDataCount: number;\r\n    constructor(public thisDialogRef: MatDialogRef<AccountingWarningErrorMsgDialogComponent>,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        @Inject(MAT_DIALOG_DATA) public data: AccountingImportReport,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isLoading = false;\r\n        this.goodDataCount = Object.keys(this.dialogData.goodData.lineNumber).length;\r\n        this.getDataFromObjects();\r\n    }\r\n\r\n    getDataFromObjects() {\r\n\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close({ toBeImported: false });\r\n\r\n    }\r\n\r\n    onConfirmButtonClicked() {\r\n        this.thisDialogRef.close({ toBeImported: true });\r\n    }\r\n\r\n}\r\n","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { BaseFormComponent } from './../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from './../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-edit-base',\r\n    templateUrl: './accounting-edit-base.component.html',\r\n})\r\nexport class AccountingEditBaseComponent extends BaseFormComponent implements OnInit {\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    getTooltip(params, description: string, valueProperty: string, list: any[]) {\r\n        if (params.value && (typeof params.value === 'string' || typeof params.value === 'number')) {\r\n            const selected = list.find(\r\n                (obj) => obj[valueProperty] ? obj[valueProperty].toString().toUpperCase() === params.value.toString().toUpperCase() : false);\r\n            if (selected) {\r\n                return selected[description];\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-around start\\\"\\r\\n                        class=\\\"button-details\\\">\\r\\n        <mat-card fxFlex=\\\"100%\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"100\\\"\\r\\n                                                         class=\\\"contextual-search-for-currency\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"documentCtrl\\\"\\r\\n                                                         label=\\\"Document\\\"\\r\\n                                                         [options]=\\\"filteredDocumentReferences\\\"\\r\\n                                                         displayProperty=\\\"documentReference\\\"\\r\\n                                                         [selectProperties]=\\\"['documentReference']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Document\\\"\\r\\n                                                         gridId=\\\"documentReferenceGrid\\\"\\r\\n                                                         (valueChange)='valueChanged($event)'\\r\\n                                                         (optionSelected)=\\\"valueChanged($event)\\\"\\r\\n                                                         (keyup.enter)=\\\"OnChangeValue($event)\\\"\\r\\n                                                         isSearchBar=\\\"true\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n    </mat-card>\\r\\n        </div>\\r\\n        <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                               [gridCode]=\\\"gridCode\\\"\\r\\n                               gridTitle=\\\"Accounting Entries\\\"\\r\\n                               [company]=\\\"company\\\"\\r\\n                               [dataLoader]=\\\"financialsEditDocumentDataLoader\\\"\\r\\n                               #listAndSearchComponent>\\r\\n        </atlas-list-and-search>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class='mat-buttons'>\\r\\n            <div fxFlex=\\\"90\\\">\\r\\n                <button mat-button\\r\\n                        class='mat-button-discard'\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\">DISCARD</button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"6\\\">\\r\\n                <button mat-raised-button\\r\\n                        [disabled]=\\\"isEditDisable\\\"\\r\\n                        (click)=\\\"onEditClicked()\\\">\\r\\n                    EDIT\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n</div>\"","module.exports = \".summary-header {\\n  margin-left: 10px; }\\n\"","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AccountingEntriesSearchResult } from '../../../../../shared/dtos/accountingEntries-search-result';\r\nimport { DocumentReferenceSearchResult } from '../../../../../shared/dtos/list-and-search/document-reference-search-result';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { ReversalAccountingDocument } from '../../../../../shared/entities/reversal-accounting-document.entity';\r\nimport { ReversalDocumentDisplayView } from '../../../../../shared/models/reversal-document-display-view';\r\nimport { TransactionDetailDisplayView } from '../../../../../shared/models/transaction-detail-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { AllDocumentReferenceDataLoader } from '../../../../../shared/services/preaccounting/all-document-reference-data-loader';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { UrlManagementService } from '../../../../../shared/services/url-management.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { MasterData } from './../../../../../shared/entities/masterdata.entity';\r\nimport { TitleService } from './../../../../../shared/services/title.service';\r\nimport { AccountingEditBaseComponent } from './../../accounting-edit-base/accounting-edit-base.component';\r\nimport { FinancialsEditDocumentDataLoader } from './../../../../../shared/services/list-and-search/financials-edit-document-data-loader';\r\nimport { ListAndSearchFilter } from './../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchComponent } from './../../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { ColumnConfigurationProperties } from './../../../../../shared/entities/grid-column-configuration.entity';\r\n@Component({\r\n    selector: 'atlas-accounting-edit-summary',\r\n    templateUrl: './accounting-edit-summary.component.html',\r\n    styleUrls: ['./accounting-edit-summary.component.scss'],\r\n    providers: [AllDocumentReferenceDataLoader, FinancialsEditDocumentDataLoader],\r\n})\r\nexport class AccountingEditSummaryComponent extends AccountingEditBaseComponent implements OnInit {\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    reverseDocumentGridCols: agGrid.ColDef[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    company: string;\r\n    filteredDocumentReferences: DocumentReferenceSearchResult[];\r\n    allDocumentReferences: DocumentReferenceSearchResult[];\r\n    searchTerm: string;\r\n    searchForm: FormGroup;\r\n    accountingId: number;\r\n    accountingDocumentLine: AccountingEntriesSearchResult[];\r\n    documentRefData: ReversalDocumentDisplayView[];\r\n    accountingDocumentData: ReversalAccountingDocument;\r\n    documentCtrl = new AtlasFormControl('documentCtrl');\r\n    editDocumentFormGroup: FormGroup;\r\n    private getAccountingLinesByDocumentIdSubscription: Subscription;\r\n    private getTransactionDetailSunscription: Subscription;\r\n    transactionData: TransactionDetailDisplayView[];\r\n    transactionDocumentId: number;\r\n    documentReference: string;\r\n    transactionDocumentTypeId: number;\r\n    disableButton: boolean = true;\r\n    subscription: Subscription[] = [];\r\n    isEditDisable: boolean = true;\r\n    isSave: boolean = false;\r\n    masterdata: MasterData;\r\n    filterList: ListAndSearchFilter[] = [];\r\n    gridCode = 'accountingLineByIdGrid';\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected utilService: UtilService,\r\n        public documentReferenceDataLoader: AllDocumentReferenceDataLoader,\r\n        private formBuilder: FormBuilder,\r\n        private snackbarService: SnackbarService,\r\n        private preaccountingService: PreaccountingService,\r\n        private uiService: UiService,\r\n        private urlManagementService: UrlManagementService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected dialog: MatDialog,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n        public financialsEditDocumentDataLoader: FinancialsEditDocumentDataLoader,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.searchForm = this.formBuilder.group({\r\n            searchReferenceCtrl: ['', Validators.required],\r\n        });\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.documentReferenceDataLoader.getData().subscribe((documents) => {\r\n            this.filteredDocumentReferences = documents;\r\n            this.allDocumentReferences = documents;\r\n        });\r\n\r\n        this.documentCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDocumentReferences = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.allDocumentReferences,\r\n                ['documentReference'],\r\n            );\r\n        });\r\n\r\n        this.getFormGroup();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.editDocumentFormGroup = this.formBuilder.group({\r\n            documentCtrl: this.documentCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions.columnDefs = this.reverseDocumentGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.agGridOptions);\r\n        this.agGridApi.setRowData([]);\r\n    }\r\n\r\n    displayNotFoundError() {\r\n        this.agGridApi.setRowData([]);\r\n        this.accountingId = null;\r\n        this.documentReference = null;\r\n        this.accountingDocumentLine = [];\r\n        this.snackbarService.throwErrorSnackBar('Document reference not existing');\r\n    }\r\n\r\n    OnChangeValue(refrerence) {\r\n        this.searchTerm = this.documentCtrl.value;\r\n        if (this.filteredDocumentReferences && this.searchTerm) {\r\n            if (typeof this.searchTerm === 'object') {\r\n                this.accountingId = this.documentCtrl.value.accountingId;\r\n                this.documentReference = this.documentCtrl.value.documentReference;\r\n            } else {\r\n                const documentSelected = this.filteredDocumentReferences.filter((searchData) =>\r\n                    searchData.documentReference.toUpperCase() === this.searchTerm.toUpperCase());\r\n\r\n                if (documentSelected.length === 0) {\r\n                    this.displayNotFoundError();\r\n                } else {\r\n                    this.accountingId = documentSelected[0].accountingId;\r\n                    this.documentReference = documentSelected[0].documentReference;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.accountingId) {\r\n            this.getTransactionDetailSunscription = this.preaccountingService.getTransactionDetail(this.accountingId).pipe(\r\n                map((data) => {\r\n\r\n                    this.transactionData = data.value.map((transactionData) => {\r\n                        return new TransactionDetailDisplayView(transactionData);\r\n                    });\r\n                    if (this.transactionData) {\r\n                        this.transactionDocumentId = this.transactionData[0].transactionDocumentId;\r\n                        this.transactionDocumentTypeId = this.transactionData[0].transactionDocumentTypeId;\r\n                    }\r\n                }))\r\n                .subscribe();\r\n\r\n            this.financialsEditDocumentDataLoader.getData(this.filterList, this.accountingId).subscribe((document) => {\r\n                if (document) {\r\n                    this.listAndSearchComponent.agGridRows = document.value;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.getTransactionDetailSunscription) {\r\n            this.getTransactionDetailSunscription.unsubscribe();\r\n        }\r\n        if (this.getAccountingLinesByDocumentIdSubscription) {\r\n            this.getAccountingLinesByDocumentIdSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    valueChanged(value) {\r\n        this.documentCtrl.patchValue(value);\r\n        this.isEditDisable = false;\r\n        this.OnChangeValue(value);\r\n    }\r\n    onEditClicked() {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/edit/document/' + this.accountingId]);\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/accounting/entries/']);\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.editDocumentFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.editDocumentFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n}\r\n","module.exports = \"<header class=\\\"header-background mat-elevation-z2\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutGap=\\\"40px\\\">\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"20\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Document Date\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{documentDate}}\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]='docDateFormCtrl'>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"20\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Original Value Date\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{originalValueDate}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"20\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"GL Date\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{glDate}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-form-field class=\\\"value-date-control\\\"\\r\\n                                fxFlex=\\\"40%\\\">\\r\\n                    <input matInput\\r\\n                           [matDatepicker]=\\\"valueDatePicker\\\"\\r\\n                           placeholder=\\\"Value Date\\\"\\r\\n                           value=\\\"valueDatePicker\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]='valueDateFormCtrl'>\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"valueDatePicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #valueDatePicker></mat-datepicker>\\r\\n                    <mat-error *ngIf=\\\"valueDateFormCtrl.hasError('valid')\\\">\\r\\n                        Invalid Value Date\\r\\n                    </mat-error>\\r\\n                    <mat-hint class=\\\"value-date-warning\\\"\\r\\n                              *ngIf=\\\"isValueDateBeforeDocumentDate()\\\">Value date is before the\\r\\n                        document date\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutGap=\\\"40px\\\"\\r\\n             class=\\\"no-padding-fields\\\">\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"20\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Accounting Period\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{accountingPeriod}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"20\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Currency\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{currency}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"dmsidFormCtrl\\\"\\r\\n                                  [textMask]=\\\"{mask:mask}\\\"\\r\\n                                  label=\\\"DMSID\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</header>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div ag-grid=\\\"accountingLineGridOptions\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\"\\r\\n                 class=\\\" table-title atlas-grid-card-header\\\">\\r\\n                <mat-card-title>\\r\\n                    Accounting lines\\r\\n                </mat-card-title>\\r\\n                <div>\\r\\n                    <button mat-icon-button\\r\\n                            [matMenuTriggerFor]=\\\"displayedColumnsMenu\\\">\\r\\n                        <mat-icon>menu</mat-icon>\\r\\n                    </button>\\r\\n                    <div>\\r\\n                        <mat-menu #displayedColumnsMenu=\\\"matMenu\\\">\\r\\n                            <div *ngFor=\\\"let col of columnDefs\\\">\\r\\n                                <mat-checkbox [checked]=\\\"!col.hide\\\"\\r\\n                                              (click)=\\\"showOrHideColum($event, col)\\\"\\r\\n                                              *ngIf=\\\"(!col.headerName =='') \\\">{{col.headerName}}</mat-checkbox>\\r\\n                            </div>\\r\\n                        </mat-menu>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <ag-grid-angular class=\\\"ag-theme-material atr-ag-grid\\\"\\r\\n                             [rowData]=\\\"accountingDocumentLine\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [singleClickEdit]=true\\r\\n                             [enableColResize]=\\\"false\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             [processCellForClipboard]=\\\"processCellForClipboard\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div  fxLayout=\\\"column\\\"\\r\\n              fxFlex=15\\r\\n              fxLayoutAlign=\\\"space-around start\\\"\\r\\n              *ngIf=\\\"false\\\"\\r\\n              class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"mat-buttons\\\">\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <button mat-button\\r\\n                    class='mat-button-discard'\\r\\n                    (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"submitForm()\\\">\\r\\n                SAVE\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\\r\\n\"","module.exports = \".ag-grid-style {\\n  width: 100%;\\n  height: 100%; }\\n\\n.header-background {\\n  min-height: 110px; }\\n\\n.header-content {\\n  padding: 16px 30px 0px 30px; }\\n\\n.mat-form-field {\\n  display: inline-flex !important; }\\n\\n.mat-button-discard {\\n  margin-left: 30px; }\\n\\n.value-date-warning {\\n  color: #ec8d2d; }\\n\"","import { DatePipe, Location } from '@angular/common';\r\nimport { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AgGridContextualSearchComponent } from '../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { SectionSearchResult } from '../../../../shared/dtos/section-search-result';\r\nimport { AccountLineType } from '../../../../shared/entities/account-line-type.entity';\r\nimport { AccountingDocumentLine } from '../../../../shared/entities/accounting-document-line.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../shared/entities/charter.entity';\r\nimport { CostType } from '../../../../shared/entities/cost-type.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { ListAndSearchFilter } from '../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../shared/entities/nominal-account.entity';\r\nimport { PostingManagement } from '../../../../shared/entities/posting-management.entity';\r\nimport { PostingManagementDisplayView } from '../../../../shared/models/posting-management-display-view';\r\nimport { CustomNumberMask } from '../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../shared/services/execution/charter-data-loader';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { PreaccountingService } from '../../../../shared/services/http-services/preaccounting.service';\r\nimport { TradeDataLoader } from '../../../../shared/services/list-and-search/trade-data-loader';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { UrlManagementService } from '../../../../shared/services/url-management.service';\r\nimport { isDateTwoBeforeDateOne } from '../../../../shared/validators/date-validators.validator';\r\nimport { AccountingEditBaseComponent } from './../accounting-edit-base/accounting-edit-base.component';\r\nimport { PostingDocumentType } from '../../../../shared/enums/posting-document-type.enum';\r\nimport { FormConfigurationService } from '../../../../shared/services/http-services/form-configuration.service';\r\nimport { ItemConfigurationProperties } from '../../../../shared/entities/form-configuration.entity';\r\n\r\nconst moment = _moment;\r\n@Component({\r\n    selector: 'atlas-accounting-edit',\r\n    templateUrl: './accounting-edit.component.html',\r\n    styleUrls: ['./accounting-edit.component.scss'],\r\n    providers: [CharterDataLoader, TradeDataLoader, DatePipe],\r\n})\r\n\r\nexport class AccountingEditComponent extends AccountingEditBaseComponent implements OnInit, OnDestroy {\r\n\r\n    valueDateFormCtrl = new AtlasFormControl('valueDateFormCtrl');\r\n    docDateFormCtrl = new AtlasFormControl(\"docDateFormCtrl\");\r\n    dmsidFormCtrl = new AtlasFormControl('dmsidFormCtrl');\r\n    company: string;\r\n    accountingId: number;\r\n    columnDefs: agGrid.ColDef[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    filteredCounterpartyList: Counterparty[];\r\n    filteredAccountLineType: AccountLineType[];\r\n    filteredCharter: Charter[];\r\n    filteredDepartments: Department[];\r\n    filteredContracts: SectionSearchResult[];\r\n    filteredCostTypes: CostType[];\r\n    masterdata: MasterData;\r\n    documentDate: string;\r\n    originalValueDate: string;\r\n    editDocumentFormGroup: FormGroup;\r\n    glDate: string;\r\n    currency: string;\r\n    accountingPeriod: any;\r\n    isNarrativeValid: boolean = true;\r\n    documentDateFormat: Date;\r\n    isCostCenterValid: boolean = true;\r\n    isSave: boolean = false;\r\n    isMtmSelecetd: boolean = false;\r\n    documentRefData: PostingManagementDisplayView[];\r\n    private getAccountinglinesSubscription: Subscription;\r\n    accountingDocumentLine: AccountingDocumentLine[];\r\n    filteredNominalAccountList: NominalAccount[];\r\n    filteredAccountLineTypeForMtm: AccountLineType[] = [];\r\n    accountingDocumentData: PostingManagement;\r\n    mask = CustomNumberMask(12, 10, true);\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    accountCreationConfiguration: ItemConfigurationProperties[] = new Array<ItemConfigurationProperties>();\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private preaccountingService: PreaccountingService,\r\n        public charterDataLoader: CharterDataLoader,\r\n        protected snackbarService: SnackbarService,\r\n        protected formBuilder: FormBuilder,\r\n        protected router: Router,\r\n        private location: Location,\r\n        public tradeDataLoader: TradeDataLoader,\r\n        protected dialog: MatDialog,\r\n        private datePipe: DatePipe,\r\n        private urlManagementService: UrlManagementService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected lockService: LockService,\r\n        public gridService: AgGridService,\r\n        private formConfigurationService: FormConfigurationService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.formConfigurationService.getMandatoryFieldsConfigurationForFinancial().subscribe((templates) => {\r\n            this.accountCreationConfiguration = templates.value;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.accountingId = Number(this.route.snapshot.paramMap.get('accountingId'));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterpartyList = this.masterdata.counterparties;\r\n        this.filteredAccountLineType = this.masterdata.accountLineTypes;\r\n        this.filteredNominalAccountList = this.masterdata.nominalAccounts.filter(\r\n            (nominal) => nominal.accountNumber = nominal.accountNumber);\r\n        this.filteredDepartments = this.masterdata.departments;\r\n        this.filteredCostTypes = this.masterdata.costTypes;\r\n        if (this.filteredAccountLineType && this.filteredAccountLineType.length > 0) {\r\n            this.filteredAccountLineType.forEach((account) => {\r\n                if (account.accountLineTypeCode === 'L' || account.accountLineTypeCode == 'B') {\r\n                    this.filteredAccountLineTypeForMtm.push(account);\r\n                }\r\n            });\r\n        }\r\n        const filterList: ListAndSearchFilter[] = [];\r\n        this.tradeDataLoader.getData(filterList).subscribe((trade) => {\r\n            this.filteredContracts = trade.value;\r\n        });\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.filteredCharter = charter;\r\n        });\r\n        this.initView();\r\n        this.getFormGroup();\r\n        this.setValidation();\r\n        this.disableControl();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n       \r\n\r\n        });\r\n    }\r\n    setValidation()\r\n    {  \r\n        if (this.isRequired('valueDate')) \r\n        {\r\n            this.valueDateFormCtrl.setValidators(Validators.compose([Validators.required]));\r\n        }\r\n    }\r\n\r\n    disableControl()\r\n    {\r\n        if (!this.isEditable('valueDate')) \r\n        {\r\n            this.valueDateFormCtrl.disable();\r\n        }     \r\n    }\r\n\r\n    initView() {\r\n\r\n        this.subscriptions.push(this.lockService.lockAccountingDocument(this.accountingId, LockFunctionalContext.AccountingDocumentEdition)\r\n            .subscribe(\r\n                () => {\r\n                    this.getAccountinglinesSubscription = this.preaccountingService.getAccoutingDocumentData(this.accountingId).pipe(\r\n                        map((data) => {\r\n                            this.documentRefData = data.value.map((docRef) => {\r\n                                return new PostingManagementDisplayView(docRef);\r\n                            });\r\n                            if (this.documentRefData) {\r\n                                this.accountingDocumentData = this.documentRefData[0];\r\n                                if (this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.TA && this.accountingDocumentData.taTypeId === 3) {\r\n                                    this.isMtmSelecetd = true;\r\n                                }\r\n                                this.accountingDocumentLine = this.accountingDocumentData.accountingDocumentLines;\r\n                                this.initializeGridColumns();\r\n                                this.assignValuesToControl();\r\n                                this.startLockRefresh(this.accountingId, this.accountingDocumentData.documentReference);\r\n                            }\r\n\r\n                        }))\r\n                        .subscribe();\r\n                },\r\n                (err) => {\r\n                    const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Lock',\r\n                            text: err.error.detail,\r\n                            okButton: 'Got it',\r\n                        },\r\n                    });\r\n                    this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/accounting/entries']);\r\n                }));\r\n\r\n    }\r\n    getFormGroup() {\r\n        this.editDocumentFormGroup = this.formBuilder.group({\r\n            valueDateFormCtrl: this.valueDateFormCtrl,\r\n            dmsidFormCtrl: this.dmsidFormCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n    initializeGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'Posting Number',\r\n                field: 'postingLineNumber',\r\n                colId: 'postingLineNumber',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Nom. Account',\r\n                field: 'accountReference',\r\n                colId: 'accountReference',\r\n                hide: false,\r\n                editable: false,\r\n                tooltip: (params) => this.getTooltip(\r\n                    params, 'detailedDescription', 'accountNumber', this.filteredNominalAccountList),\r\n            },\r\n            {\r\n                headerName: 'Cli. account',\r\n                colId: 'clientAccountId',\r\n                field: 'clientAccountId',\r\n                valueFormatter: this.clientAccountTypeFormatter.bind(this),\r\n                hide: false,\r\n                editable: false,\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'counterpartyID', this.filteredCounterpartyList),\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                colId: 'amount',\r\n                field: 'amount',\r\n                hide: false,\r\n                type: 'numericColumn',\r\n                valueFormatter: this.numberFormatter.bind(this),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                colId: 'departmentId',\r\n                field: 'departmentId',\r\n                valueFormatter: this.departmentCodeFormatter.bind(this),\r\n                hide: false,\r\n                editable:false,\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'departmentId', this.masterdata.departments),\r\n            },\r\n            {\r\n\r\n                headerName: 'Cost types',\r\n                colId: 'costTypeId',\r\n                field: 'costTypeId',\r\n                hide: false,\r\n                valueFormatter: this.costTypesFormatter.bind(this),\r\n                editable: false,\r\n                tooltip: (params) => this.getTooltip(params, 'name', 'costTypeId', this.masterdata.costTypes),\r\n            },\r\n            {\r\n                headerName: 'Contract Number',\r\n                colId: 'sectionReference',\r\n                field: 'sectionReference',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Associated Acc.',\r\n                colId: 'associatedAccountCode',\r\n                field: 'associatedAccountCode',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isEditable('associatedAccountId'),\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.filteredCounterpartyList,\r\n                        isRequired: this.isRequired('associatedAccountId'),\r\n                        isEditable: this.isEditable('associatedAccountId'),\r\n                        displayProperty: 'counterpartyCode',\r\n                        codeProperty: 'counterpartyCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'counterpartyCode',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: this.isEditable('associatedAccountId'),\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onAssociatedAccountSelected.bind(this),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'counterpartyCode', this.filteredCounterpartyList),\r\n            },\r\n            {\r\n                headerName: 'Acc. L. Type',\r\n                colId: 'accountLineTypeId',\r\n                field: 'accountLineTypeId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (this.isMtmSelecetd) ? false : this.isEditable('accountLineTypeId'),\r\n                        },\r\n                        gridId: 'accountLineTypeGrid',\r\n                        options: (this.isMtmSelecetd) ? this.filteredAccountLineTypeForMtm : this.filteredAccountLineType,\r\n                        isRequired: this.isRequired('accountLineTypeId'),\r\n                        isEditable: (this.isMtmSelecetd) ? false : this.isEditable('accountLineTypeId'),\r\n                        displayProperty: 'accountLineTypeCode',\r\n                        descriptionProperty: 'description',\r\n                        codeProperty: 'accountLineTypeCode',\r\n                        valueProperty: 'accountLineTypeId',\r\n                        lightBoxTitle: 'Results for  Account Line Type',\r\n                        showContextualSearchIcon: (this.isMtmSelecetd) ? false : this.isEditable('accountLineTypeId'),\r\n                        filterContextualSearchFunction: this.filterAccountLineTypes.bind(this),\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => { },\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'accountLineTypeId', this.filteredAccountLineType),\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                colId: 'charterId',\r\n                field: 'charterId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isEditable('charterId'),\r\n                        },\r\n                        gridId: 'charterGrid',\r\n                        colId: 'charterId',\r\n                        isEditable: this.isEditable('charterId'),\r\n                        isRequired: this.isRequired('charterId'),\r\n                        displayProperty: 'charterCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'charterId',\r\n                        codeProperty: 'charterCode',\r\n                        lightBoxTitle: 'Results for Charters',\r\n                        dataLoader: this.charterDataLoader,\r\n                        options: this.filteredCharter,\r\n                        showContextualSearchIcon: this.isEditable('charterId'),\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onCharterSelected.bind(this),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'charterId', this.filteredCharter),\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                colId: 'narrative',\r\n                field: 'narrative',\r\n                onCellValueChanged: this.onNarrativeValueChanged.bind(this),\r\n                hide: false,\r\n                editable: this.isEditable('narrative'),\r\n                cellRenderer: this.requiredCell.bind(this),\r\n\r\n            },\r\n            {\r\n                headerName: 'CC-1',\r\n                colId: 'costCenter',\r\n                field: 'costCenter',\r\n                hide: false,\r\n                onCellValueChanged: this.onCostCenterValueChanged.bind(this),\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                editable: this.isEditable('costCenter'),\r\n\r\n            },\r\n        ];\r\n\r\n    }\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    processCellForClipboard(params) {\r\n        if (!params.value || !params.column.colDef.cellRendererParams) {\r\n            return params.value;\r\n        }\r\n        let value = params.value;\r\n        const cellRenderedParams = params.column.colDef.cellRendererParams(null);\r\n        const object = cellRenderedParams.valueProperty ? cellRenderedParams.options\r\n            .find((option) => option[cellRenderedParams.valueProperty] === value) : null;\r\n        value = typeof value !== 'string' && cellRenderedParams.displayProperty ? value[cellRenderedParams.displayProperty] : value;\r\n        if (object && cellRenderedParams.displayCode && cellRenderedParams.codeProperty) {\r\n            return object[cellRenderedParams.codeProperty];\r\n        }\r\n        return cellRenderedParams.displayProperty && object ? object[cellRenderedParams.displayProperty] : value;\r\n    }\r\n\r\n    accountLineValueFormatter(params) {\r\n        if (params.value && typeof params.value !== 'string') {\r\n            const value: string = this.filteredAccountLineType.find(\r\n                (accountLine) => accountLine.accountLineTypeId === params.value).accountLineTypeCode;\r\n            params.value = value;\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onCharterSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            const selectedCharter = this.filteredCharter.filter(\r\n                (charter) => charter.charterCode.toUpperCase() === params.newValue.toUpperCase(),\r\n            );\r\n            if (selectedCharter.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : It is not an existing charter');\r\n                params.node.setDataValue('charterId', '');\r\n            }\r\n        }\r\n    }\r\n\r\n    onAssociatedAccountSelected(params) {\r\n        {\r\n            if (params.newValue && params.oldValue !== params.newValue) {\r\n                const selectedClientAccount = this.filteredCounterpartyList.filter(\r\n                    (clientAccount) => clientAccount.counterpartyCode.toUpperCase() === params.newValue.toUpperCase(),\r\n                );\r\n                if (selectedClientAccount.length === 0) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed : ' + 'Value does not exist');\r\n                    params.node.setDataValue('associatedAccountCode', '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    filterAccountLineTypes(value: any, options: any[], rowData: any): any[] {\r\n        let accountLineTypeList = [];\r\n        accountLineTypeList = options;\r\n        if (rowData.accountReferenceId && typeof rowData.accountReferenceId === 'string') {\r\n            const nominalAccountSelected = this.filteredNominalAccountList.find(\r\n                (nominalAccount) => nominalAccount.accountNumber.toUpperCase()\r\n                    === rowData.accountReferenceId.toUpperCase());\r\n\r\n            if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n\r\n                accountLineTypeList = options.filter((accountType) =>\r\n                    accountType.description === 'Customer' || accountType.description === 'Vendor');\r\n            }\r\n        }\r\n\r\n        options = accountLineTypeList;\r\n        return this.filterAccountLineTypesOnEdit(options, rowData);\r\n    }\r\n\r\n    filterAccountLineTypesOnEdit(options: any[], rowData: any): any[] {\r\n        let accountLineTypeList = [];\r\n        accountLineTypeList = options;\r\n        if (rowData.accountReference && typeof rowData.accountReference === 'string') {\r\n            const nominalAccountSelected = this.filteredNominalAccountList.find(\r\n                (nominalAccount) => nominalAccount.accountNumber.toUpperCase()\r\n                    === rowData.accountReference.toUpperCase());\r\n\r\n            if (nominalAccountSelected) {\r\n                if (this.isMtmSelecetd) {\r\n                    if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Bank');\r\n                    }\r\n                    else {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Ledger');\r\n                    }\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n\r\n                    accountLineTypeList = options.filter((accountType) =>\r\n                        accountType.description === 'Customer' || accountType.description === 'Vendor');\r\n                }\r\n            }\r\n        }\r\n        options = accountLineTypeList;\r\n        return options;\r\n    }\r\n\r\n    departmentCodeFormatter(params) {\r\n        if (params.value) {\r\n            const departement = this.filteredDepartments.find((x) => x.departmentId === params.value);\r\n            return departement ? departement.departmentCode : '';\r\n        } else { return ''; }\r\n    }\r\n\r\n    costTypesFormatter(params) {\r\n        if (params.value) {\r\n            const costType = this.filteredCostTypes.find((x) => x.costTypeId === params.value);\r\n            return costType ? costType.costTypeCode : '';\r\n        } else { return ''; }\r\n    }\r\n\r\n    clientAccountTypeFormatter(params) {\r\n        if (params.value) {\r\n            const counterparty = this.filteredCounterpartyList.find((x) => x.counterpartyID === params.value);\r\n            return counterparty ? counterparty.counterpartyCode : '';\r\n        } else { return ''; }\r\n    }\r\n\r\n    onNarrativeValueChanged(params) {\r\n        this.isNarrativeValid = true;\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue.length > 130) {\r\n            this.isNarrativeValid = false;\r\n            this.snackbarService.throwErrorSnackBar('Length of narrative can not be more than 130 chars');\r\n        }\r\n    }\r\n    onCostCenterValueChanged(params) {\r\n        this.isCostCenterValid = true;\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue.length > 10) {\r\n            this.isCostCenterValid = false;\r\n            this.snackbarService.throwErrorSnackBar('Length of CC-1 can not be more than 10 chars');\r\n        }\r\n    }\r\n\r\n    submitForm() {\r\n        this.isSave = true;\r\n        this.agGridApi.stopEditing();\r\n        if (this.editDocumentFormGroup.valid) {\r\n            const errorMessage = this.validateGridData();\r\n            if (errorMessage === '') {\r\n                this.getGridData();\r\n                this.accountingDocumentData.valueDate = this.valueDateFormCtrl.value;\r\n                this.accountingDocumentData.dmsId = this.dmsidFormCtrl.value;\r\n                this.accountingDocumentData.accountingDocumentLines.forEach((accountLine) => {\r\n                    accountLine.postingLineId = accountLine.postingLineNumber;\r\n                })\r\n                this.preaccountingService\r\n                    .updateAccoutingDocuments(this.accountingDocumentData, false)\r\n                    .subscribe(\r\n                        (data) => {\r\n                            this.snackbarService.informationSnackBar('Accounting Document updated');\r\n                            this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/accounting/entries']);\r\n                        },\r\n                        (error) => {\r\n                            console.error(error);\r\n                        });\r\n\r\n            } else { this.snackbarService.throwErrorSnackBar(errorMessage); }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');\r\n        }\r\n    }\r\n\r\n    validateGridData(): string {\r\n        let isRowDataValid: Boolean = false;\r\n        if (!this.isNarrativeValid || !this.isCostCenterValid) {\r\n            return 'Grid data is invalid. Please resolve the errors.';\r\n        }\r\n        let errorMessage = '';\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (!isRowDataValid)\r\n            {\r\n                let item = [];\r\n                item = this.getRequiredColumn()\r\n                item.forEach((column) => {\r\n                    if (!isRowDataValid) {\r\n                        isRowDataValid = this.validateEmpty(column.id, rowData);\r\n                    }\r\n                });\r\n                if (isRowDataValid) {\r\n                    errorMessage = 'Grid data is invalid. Please resolve the errors.';                \r\n                }\r\n            }\r\n        });\r\n        return errorMessage;\r\n    }\r\n\r\n    getRequiredColumn() {\r\n        let item = [];\r\n        item = this.accountCreationConfiguration.filter((x) => x.isEditable);\r\n        return item;\r\n    }\r\n\r\n    validateEmpty(colId: string, rowData: any) {\r\n        if (this.isRequired(colId)) {\r\n            if (rowData.data[colId] && rowData.data[colId].toString().trim() !=''  && rowData.data[colId].toString().trim() !== 'Required*') {\r\n                return false;\r\n            } \r\n            else if(colId == \"valueDate\" || colId == \"accountingPeriod\" || colId == \"paymentDocumentDate\")\r\n            {\r\n                return false;\r\n            }\r\n            return true;                     \r\n        }        \r\n        return false;\r\n    }\r\n\r\n    getGridData() {\r\n        this.accountingDocumentData.accountingDocumentLines.forEach((accountingLineElement) => {\r\n\r\n            accountingLineElement.associatedAccountId = (accountingLineElement.associatedAccountCode === null ||\r\n                accountingLineElement.associatedAccountCode.trim() === '') ? null :\r\n                this.filteredCounterpartyList.find((client) =>\r\n                    client.counterpartyCode.toUpperCase() === accountingLineElement.associatedAccountCode.toUpperCase()).counterpartyID;\r\n\r\n            if (typeof accountingLineElement.accountLineTypeId === 'string'\r\n                && String(accountingLineElement.accountLineTypeId).length === 1) {\r\n                const accountLineTypeId = String(accountingLineElement.accountLineTypeId);\r\n                accountingLineElement.accountLineTypeId = (accountLineTypeId === null ||\r\n                    accountLineTypeId.trim() === '') ? null :\r\n                    this.filteredAccountLineType.find((accountType) =>\r\n                        accountType.accountLineTypeCode.toUpperCase() === accountLineTypeId.toUpperCase()).accountLineTypeId;\r\n            } else if (typeof accountingLineElement.accountLineTypeId === 'string') {\r\n                const accountLineTypeId = String(accountingLineElement.accountLineTypeId);\r\n                accountingLineElement.accountLineTypeId = (accountLineTypeId === null ||\r\n                    accountLineTypeId.trim() === '') ? null :\r\n                    this.filteredAccountLineType.find((accountType) =>\r\n                        accountType.description.toUpperCase() === accountLineTypeId.toUpperCase()).accountLineTypeId;\r\n            }\r\n\r\n            if (typeof accountingLineElement.charterId === 'string') {\r\n                const charterAssigned = String(accountingLineElement.charterId);\r\n                accountingLineElement.charterId = (charterAssigned === null ||\r\n                    charterAssigned.trim() === '') ? null :\r\n                    this.filteredCharter.find((charter) =>\r\n                        charter.charterCode.toUpperCase() === charterAssigned.toUpperCase()).charterId;\r\n\r\n            }\r\n            accountingLineElement.accountReferenceId = (accountingLineElement.accountReference === null ||\r\n                accountingLineElement.accountReference.trim() === '') ? null :\r\n                this.filteredNominalAccountList.find((nominal) =>\r\n                    nominal.accountNumber.toUpperCase() === accountingLineElement.accountReference.toUpperCase()).nominalAccountId;\r\n\r\n            accountingLineElement.sectionId = (accountingLineElement.sectionReference === null ||\r\n                accountingLineElement.sectionReference.trim() === '') ? null :\r\n                this.filteredContracts.find((contract) =>\r\n                    contract.contractLabel.toUpperCase() === accountingLineElement.sectionReference.toUpperCase()).sectionId;\r\n\r\n        });\r\n\r\n    }\r\n\r\n    onLoadPreviousPageButtonClicked() {\r\n        this.isSave = true;\r\n        this.location.back();\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/edit/document/summary']);\r\n            }\r\n        });\r\n    }\r\n    assignValuesToControl() {\r\n        this.documentDate = this.accountingDocumentData.documentDate ?\r\n            this.datePipe.transform(this.accountingDocumentData.documentDate, 'dd/MM/yyyy').toString().toUpperCase() : null;\r\n        this.originalValueDate = this.accountingDocumentData.originalValueDate ?\r\n            this.datePipe.transform(this.accountingDocumentData.originalValueDate, 'dd/MM/yyyy').toString().toUpperCase() : null;\r\n        this.glDate = this.accountingDocumentData.glDate ?\r\n            this.datePipe.transform(this.accountingDocumentData.glDate, 'dd/MM/yyyy').toString().toUpperCase() : null;\r\n        this.accountingPeriod = this.accountingDocumentData.accountingPeriod ?\r\n            this.datePipe.transform(this.accountingDocumentData.accountingPeriod, 'MMM yyyy').toString().toUpperCase() : null;\r\n        this.currency = this.accountingDocumentData.currencyCode;\r\n        this.valueDateFormCtrl.patchValue(this.accountingDocumentData.valueDate);\r\n        this.dmsidFormCtrl.patchValue(this.accountingDocumentData.dmsId);\r\n        this.initializeGridColumns();\r\n\r\n    }\r\n\r\n    startLockRefresh(accountingId: number, documentReference: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Accounting Document';\r\n        resourceInformation.resourceId = accountingId;\r\n        resourceInformation.resourceCode = documentReference;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.editDocumentFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty) {\r\n                $event.returnValue = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.editDocumentFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty) {\r\n                return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.subscriptions.push(this.lockService.unlockAccountingDocument(\r\n            this.accountingId, LockFunctionalContext.AccountingDocumentEdition)\r\n            .subscribe(() => {\r\n                this.subscriptions.forEach((subscription: Subscription) => {\r\n                    subscription.unsubscribe();\r\n                });\r\n            }));\r\n    }\r\n\r\n    //Format Amount in 2 decimal\r\n    numberFormatter(params) {\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n\r\n    isValueDateBeforeDocumentDate() {\r\n        if (this.documentDate && this.valueDateFormCtrl.value) {\r\n            this.documentDateFormat = moment(this.documentDate).toDate();\r\n            const result = isDateTwoBeforeDateOne(this.accountingDocumentData.documentDate, this.valueDateFormCtrl.value);\r\n            if (result) {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    // To Validate if Field is Editable\r\n    isEditable(params: string): boolean {\r\n        if (this.accountCreationConfiguration.length > 0) {\r\n            const result = this.accountCreationConfiguration[this.accountCreationConfiguration.findIndex((x) => x.id === params)];\r\n            if(result.isEditable)\r\n            {\r\n                return result.isEditable;\r\n            }   \r\n        }\r\n        return false;\r\n    }\r\n\r\n    // To Validate if Field is required\r\n    isRequired(params: string): boolean {\r\n        if (this.accountCreationConfiguration.length > 0) {\r\n            const result = this.accountCreationConfiguration[this.accountCreationConfiguration.findIndex((x) => x.id === params)];\r\n            if(result)\r\n            {\r\n                return result.isMandatory;\r\n            }           \r\n        }\r\n        return false;\r\n    }\r\n\r\n    //Apply CSS if Field is required.\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '' ) {           \r\n            if (this.isRequired(params.colDef.colId)) {\r\n                return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        return params.value;\r\n    }\r\n}\r\n","module.exports = \"<atlas-accounting-tab-group></atlas-accounting-tab-group>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-slide-toggle [(ngModel)]=\\\"dataLoader.includeDocumentMatchingInformation\\\">Include Document Matching Information\\r\\n    </mat-slide-toggle>\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"documentReferenceCtrl\\\"\\r\\n                       placeholder=\\\"Document Reference\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #message>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"contractNoCtrl\\\"\\r\\n                       placeholder=\\\"Contract Number\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #action>\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                           (loadDataStarted)=\\\"getAccountingEntriesByMatchFlag(); getAccountingEntriesByDocumentReference();\\\"\\r\\n                           [gridCode]=\\\"gridCode\\\"\\r\\n                           [gridTitle]=\\\"'Accounting Entries'\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [pageSize]=\\\"100\\\"\\r\\n                           [loadOnInit]=\\\"loadOnInit\\\"\\r\\n                           (dataLoaded)=\\\"onDataLoadClicked($event)\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n</div>\\r\\n\"","module.exports = \":host ::ng-deep.ag-menu {\\n  overflow-y: overlay !important; }\\n\\n.list-and-search-height {\\n  height: calc((100vh * 2 / 3) - 60px); }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { ListAndSearchComponent } from '../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { ListAndSearchFilter } from '../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchFilterType } from '../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { AccountingEntriesDataLoader } from '../../../../shared/services/list-and-search/accountingEntries-data-loader';\r\nimport { TransactionDocumentTypes } from '../../../../shared/enums/transaction-document-type.enum';\r\nimport { PostingDocumentType } from '../../../../shared/enums/posting-document-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-entries-component',\r\n    providers: [AccountingEntriesDataLoader],\r\n    templateUrl: './accounting-entries-component.component.html',\r\n    styleUrls: ['./accounting-entries-component.component.scss'],\r\n})\r\nexport class AccountingEntriesComponent implements OnInit {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    gridCode = 'accountingEntriesGrid';\r\n    company: string;\r\n    yepDocumentType: string = 'Year End Document';\r\n    documentReferenceCtrl: FormControl = new FormControl();\r\n    contractNoCtrl: FormControl = new FormControl();\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    matchFlag: string;\r\n    documentReference: string;\r\n    documentDeleted: string[];\r\n    loadOnInit = false;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: AccountingEntriesDataLoader) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.matchFlag = (params['matchFlag']);\r\n        });\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.documentDeleted = (params['documentDeleted']);\r\n        });\r\n        this.documentReference = this.route.snapshot.paramMap.get('invoiceReference');\r\n\r\n        if (this.documentReference && this.listAndSearchComponent && !this.loadOnInit) {\r\n            // when document reference is specified, we need to load the data\r\n            this.documentReferenceCtrl.setValue(this.documentReference);\r\n            this.onQuickSearchButtonClicked();\r\n        }\r\n    }\r\n\r\n    onDataLoadClicked(event){\r\n        const yepData = event.filter((data)=> data.documentType === this.yepDocumentType);\r\n        const otherDocData = event.filter((data)=> data.documentType != this.yepDocumentType);\r\n        \r\n        if(yepData){\r\n            yepData.forEach((row) =>{\r\n        if(row.documentDate.getDate() === 1){\r\n            row.accountingPeriod = 'ADJ ' + 'Opening ' + row.documentDate.getFullYear();\r\n            }\r\n            else{\r\n                row.accountingPeriod = 'ADJ ' + 'Closing ' + row.documentDate.getFullYear(); \r\n            }\r\n            })\r\n        }\r\n        const finalData = [];\r\n        finalData.push(otherDocData);\r\n        finalData.push(yepData);\r\n        this.listAndSearchComponent.agGridApi.setRowData(finalData);\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        this.additionalFilters = [];\r\n        const documentLabelField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'DocumentReference');\r\n        const sectionLabelField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'SecondaryReference');\r\n        const contractLabelField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'ContractSectionCode');\r\n\r\n        if (!this.listAndSearchComponent) {\r\n            return;\r\n        } else {\r\n            if (this.documentReferenceCtrl.value && this.documentReferenceCtrl.value.toString().length > 0) {\r\n                const filterDocsRef = new ListAndSearchFilter();\r\n                let filterDocRef;\r\n                let filterSecDocRef;\r\n                if (documentLabelField) {\r\n                    filterDocRef = new ListAndSearchFilter();\r\n                    filterDocRef.fieldId = documentLabelField.fieldId;\r\n                    filterDocRef.fieldName = documentLabelField.fieldName;\r\n                    filterDocRef.predicate = {\r\n                        filterType: ListAndSearchFilterType.Text,\r\n                        operator: 'eq',\r\n                        value1: this.documentReference ? this.documentReference + '%' : this.documentReferenceCtrl.value + '%',\r\n                    };\r\n                    filterDocRef.isActive = true;\r\n                }\r\n                if (sectionLabelField) {\r\n                    filterSecDocRef = new ListAndSearchFilter();\r\n                    filterSecDocRef.fieldId = sectionLabelField.fieldId;\r\n                    filterSecDocRef.fieldName = sectionLabelField.fieldName;\r\n                    filterSecDocRef.predicate = {\r\n                        filterType: ListAndSearchFilterType.Text,\r\n                        operator: 'eq',\r\n                        value1: this.documentReferenceCtrl.value + '%',\r\n                    };\r\n                    filterSecDocRef.isActive = true;\r\n                }\r\n                if (documentLabelField || sectionLabelField) {\r\n                    if (documentLabelField && sectionLabelField) {\r\n                        filterDocsRef.logicalOperator = 'or';\r\n                        filterDocsRef.clauses = [filterDocRef, filterSecDocRef];\r\n                        this.additionalFilters.push(filterDocsRef);\r\n                    } else {\r\n                        this.additionalFilters.push(filterDocRef ? filterDocRef : filterSecDocRef);\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (this.contractNoCtrl.value && contractLabelField) {\r\n                const filterContractNo = new ListAndSearchFilter();\r\n                filterContractNo.fieldId = contractLabelField.fieldId;\r\n                filterContractNo.fieldName = contractLabelField.fieldName;\r\n                filterContractNo.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.contractNoCtrl.value + '%',\r\n                };\r\n                filterContractNo.isActive = true;\r\n                this.additionalFilters.push(filterContractNo);\r\n            }\r\n        }\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n    getAccountingEntriesByMatchFlag() {\r\n        if (this.matchFlag) {\r\n            const MatchFlagLabelField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'MatchFlag');\r\n            const filterMatchFlagCode = new ListAndSearchFilter();\r\n            filterMatchFlagCode.fieldId = MatchFlagLabelField.fieldId;\r\n            filterMatchFlagCode.fieldName = MatchFlagLabelField.fieldName;\r\n            filterMatchFlagCode.predicate = {\r\n                filterType: ListAndSearchFilterType.Text,\r\n                operator: 'eq',\r\n                value1: this.matchFlag + '%',\r\n            };\r\n            filterMatchFlagCode.isActive = true;\r\n            this.additionalFilters.push(filterMatchFlagCode);\r\n\r\n        }\r\n\r\n        if (this.documentReference && this.documentReference.length > 0) {\r\n            this.documentReferenceCtrl.setValue(this.documentReference);\r\n            const documentLabelField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'DocumentReference');\r\n            const sectionLabelField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'SecondaryReference');\r\n            if (this.documentReferenceCtrl.value && this.documentReferenceCtrl.value.toString().length > 0) {\r\n                const filterDocsRef = new ListAndSearchFilter();\r\n                let filterDocRef;\r\n                let filterSecDocRef;\r\n                if (documentLabelField) {\r\n                    filterDocRef = new ListAndSearchFilter();\r\n                    filterDocRef.fieldId = documentLabelField.fieldId;\r\n                    filterDocRef.fieldName = documentLabelField.fieldName;\r\n                    filterDocRef.predicate = {\r\n                        filterType: ListAndSearchFilterType.Text,\r\n                        operator: 'eq',\r\n                        value1: this.documentReferenceCtrl.value + '%',\r\n                    };\r\n                    filterDocRef.isActive = true;\r\n                }\r\n                if (sectionLabelField) {\r\n                    filterSecDocRef = new ListAndSearchFilter();\r\n                    filterSecDocRef.fieldId = sectionLabelField.fieldId;\r\n                    filterSecDocRef.fieldName = sectionLabelField.fieldName;\r\n                    filterSecDocRef.predicate = {\r\n                        filterType: ListAndSearchFilterType.Text,\r\n                        operator: 'eq',\r\n                        value1: this.documentReferenceCtrl.value + '%',\r\n                    };\r\n                    filterSecDocRef.isActive = true;\r\n                }\r\n                if (documentLabelField || sectionLabelField) {\r\n                    if (documentLabelField && sectionLabelField) {\r\n                        filterDocsRef.logicalOperator = 'or';\r\n                        filterDocsRef.clauses = [filterDocRef, filterSecDocRef];\r\n                        this.additionalFilters.push(filterDocsRef);\r\n                    } else {\r\n                        this.additionalFilters.push(filterDocRef ? filterDocRef : filterSecDocRef);\r\n                    }\r\n                }\r\n                this.documentReference = null;\r\n            }\r\n        }\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n    }\r\n    getAccountingEntriesByDocumentReference() {\r\n        if (this.documentDeleted) {\r\n            const documentReferenceLabelField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'DocumentReference');\r\n            const filterdocumentReference = new ListAndSearchFilter();\r\n            filterdocumentReference.fieldId = documentReferenceLabelField.fieldId;\r\n            filterdocumentReference.fieldName = documentReferenceLabelField.fieldName;\r\n            filterdocumentReference.predicate = {\r\n                filterType: ListAndSearchFilterType.Text,\r\n                operator: 'in',\r\n                value1: this.documentDeleted.toString(),\r\n            };\r\n            filterdocumentReference.isActive = true;\r\n            this.additionalFilters.push(filterdocumentReference);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <h2>Document Information for {{docReference}}</h2>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <div class=\\\"accounting-document-fields\\\"\\r\\n                 fxFlex=\\\"85%\\\">\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\">\\r\\n                        <div class=\\\"custom-form\\\"\\r\\n                             fxFlex=\\\"30%\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput\\r\\n                                       [matDatepicker]=\\\"frompicker\\\"\\r\\n                                       placeholder=\\\"Document Date\\\"\\r\\n                                       autocomplete=\\\"off\\\"\\r\\n                                       [formControl]='docDateFormCtrl'>\\r\\n                                <mat-datepicker-toggle matSuffix\\r\\n                                                       [for]=\\\"frompicker\\\"></mat-datepicker-toggle>\\r\\n                                <mat-datepicker #frompicker></mat-datepicker>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                            <input matInput\\r\\n                                   [matDatepicker]=\\\"valueDatePicker\\\"\\r\\n                                   placeholder=\\\"Value Date\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]='valueDateFormCtrl'>\\r\\n                            <mat-datepicker-toggle matSuffix\\r\\n                                                   [for]=\\\"frompicker\\\"></mat-datepicker-toggle>\\r\\n                            <mat-datepicker #valueDatePicker></mat-datepicker>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <br />\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\">\\r\\n                        <div class=\\\"custom-form\\\"\\r\\n                             fxFlex=\\\"30%\\\">\\r\\n\\r\\n                            <atlas-month-date-picker #monthDatePicker\\r\\n                                                     fxFlex=\\\"30%\\\"\\r\\n                                                     class=\\\"month-date-picker\\\"\\r\\n                                                     [fieldControl]=\\\"accPeriodFormCtrl\\\"\\r\\n                                                     [label]=\\\"'Accounting Period'\\\"></atlas-month-date-picker>\\r\\n                        </div>\\r\\n                        <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Currency\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]='currencyCtrl'>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <mat-card>\\r\\n\\r\\n        <ag-grid-angular class=\\\"ag-theme-material atr-ag-grid\\\"\\r\\n                         [rowData]=\\\"accountingDocumentLine\\\"\\r\\n                         [columnDefs]=\\\"columnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"false\\\"\\r\\n                         [rowStyle]=\\\"rowStyle\\\"\\r\\n                         [enableRangeSelection]=\\\"true\\\"\\r\\n                         [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n        </ag-grid-angular>\\r\\n        <div  fxLayout=\\\"column\\\"\\r\\n              fxLayoutAlign=\\\"space-around end\\\">\\r\\n            <div fxFlex=\\\"33\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure \\\">Amount : <span\\r\\n                          class=\\\"total-figure-value\\\">{{formatValue(amount)}}\\r\\n                    </span></mat-card-subtitle>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         class='mat-buttons'>\\r\\n        <div fxFlex=\\\"90\\\">\\r\\n            <button mat-button\\r\\n                    class='mat-button-discard'\\r\\n                    (click)=\\\"onDiscardButtonClicked()\\\">DISCARD</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".accounting-document-fields {\\n  width: 100%; }\\n\\n.month-date-picker {\\n  width: 100%;\\n  display: inline-flex; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AccountingDocumentLine } from '../../../../../shared/entities/accounting-document-line.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { PostingManagement } from '../../../../../shared/entities/posting-management.entity';\r\nimport { PostingDocumentType } from '../../../../../shared/enums/posting-document-type.enum';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../../shared/services/execution/charter-data-loader';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-manual-journal-accrual-view',\r\n    templateUrl: './manual-journal-accrual-view.component.html',\r\n    styleUrls: ['./manual-journal-accrual-view.component.scss'],\r\n    providers: [CharterDataLoader],\r\n})\r\nexport class ManualJournalAccrualViewComponent extends BaseFormComponent implements OnInit {\r\n\r\n    subscriptions: Subscription[] = [];\r\n    accountingId: number;\r\n    viewAccountingLines: PostingManagement[] = [];\r\n    columnDefs: agGrid.ColDef[];\r\n    rowStyle: any;\r\n    accountingDocumentData: PostingManagement;\r\n    amount: number = 0;\r\n    docReference: string;\r\n    currencyControl: Currency;\r\n    filteredCurrencyList: Currency[];\r\n    masterdata: MasterData;\r\n    accountingDocumentLine: AccountingDocumentLine[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    amountFormat: string = 'en-US';\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    accountDocumentFormGroup: FormGroup;\r\n    filteredCharter: Charter[];\r\n    isAccrual: boolean;\r\n    accrualNumberColumn: string = 'accrualNumber';\r\n\r\n    docDateFormCtrl = new AtlasFormControl('docDateFormCtrl');\r\n    valueDateFormCtrl = new AtlasFormControl('valueDateFormCtrl');\r\n    accPeriodFormCtrl = new AtlasFormControl('accPeriodFormCtrl');\r\n    currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n\r\n    constructor(private preaccountingService: PreaccountingService,\r\n        private route: ActivatedRoute,\r\n        private uiService: UiService,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public charterDataLoader: CharterDataLoader,\r\n        protected router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.accountingId = Number(this.route.snapshot.paramMap.get('accountingId'));\r\n        this.subscriptions.push(this.preaccountingService.getAccoutingDocumentData(this.accountingId).subscribe((data) => {\r\n            if (data) {\r\n                this.initializeGridColumns();\r\n                this.charterDataLoader.getData().subscribe((charter) => {\r\n                    this.filteredCharter = charter;\r\n                });\r\n                this.filteredCurrencyList = this.masterdata.currencies;\r\n                this.viewAccountingLines = data.value;\r\n                this.accountingDocumentData = this.viewAccountingLines[0];\r\n                this.titleService.setTitle(this.accountingDocumentData.documentReference + ' - ' + this.route.snapshot.data.title);\r\n                this.currencyControl = this.filteredCurrencyList.find((currency) =>\r\n                    currency.currencyCode === this.accountingDocumentData.currencyCode);\r\n                this.accountingDocumentLine = this.accountingDocumentData.accountingDocumentLines;\r\n                this.isAccrual = (this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.TA) ? true : false;\r\n                this.getFormGroup();\r\n                this.initializeGridColumns();\r\n                this.assignValuesToControl();\r\n                this.accountDocumentFormGroup.disable();\r\n                this.agGridApi.setColumnDefs(this.columnDefs);\r\n                this.agGridColumnApi.setColumnVisible(this.accrualNumberColumn, this.isAccrual ? true : false);\r\n            }\r\n        }));\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.accountDocumentFormGroup = this.formBuilder.group({\r\n            currencyCtrl: this.currencyCtrl,\r\n            docDateFormCtrl: this.docDateFormCtrl,\r\n            valueDateFormCtrl: this.valueDateFormCtrl,\r\n            accPeriodFormCtrl: this.accPeriodFormCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    assignValuesToControl() {\r\n        this.amount = 0;\r\n        this.docReference = this.accountingDocumentData.documentReference;\r\n        this.docDateFormCtrl.patchValue(this.accountingDocumentData.documentDate);\r\n        this.valueDateFormCtrl.patchValue(this.accountingDocumentData.valueDate);\r\n        this.accPeriodFormCtrl.patchValue(moment(this.accountingDocumentData.accountingPeriod));\r\n\r\n        this.currencyCtrl.patchValue(this.currencyControl ? this.currencyControl.currencyCode : null);\r\n        this.accountingDocumentData.accountingDocumentLines.forEach((rowData) => {\r\n            this.amount += rowData.amount;\r\n        });\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries']);\r\n    }\r\n\r\n    formatValue(amount: number): string {\r\n        if (isNaN(amount) || amount === null) { return ''; }\r\n        return new Intl.NumberFormat(this.amountFormat, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(amount);\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'Nominal acc.',\r\n                colId: 'accountReference',\r\n                field: 'accountReference',\r\n            },\r\n            {\r\n                headerName: 'Cli. account',\r\n                colId: 'clientAccountId',\r\n                field: 'clientAccountId',\r\n                valueFormatter: this.clientAccountIdFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Associated Acc.',\r\n                colId: 'associatedAccountCode',\r\n                field: 'associatedAccountCode',\r\n            },\r\n            {\r\n                headerName: 'Acc. L. Type',\r\n                colId: 'accountLineTypeId',\r\n                field: 'accountLineTypeId',\r\n                valueFormatter: this.accountLineTypeIdFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost types',\r\n                colId: 'costTypeId',\r\n                field: 'costTypeId',\r\n                valueFormatter: this.costTypeIdFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                colId: 'amount',\r\n                field: 'amount',\r\n                valueFormatter: this.currencyFormatterInGrid.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                colId: 'narrative',\r\n                field: 'narrative',\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                colId: 'departmentId',\r\n                field: 'departmentId',\r\n                valueFormatter: this.departmentIdFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Sec. Doc. ref',\r\n                colId: 'secondaryDocumentReference',\r\n                field: 'secondaryDocumentReference',\r\n            },\r\n            {\r\n                headerName: 'Ext. Doc. Ref',\r\n                colId: 'extDocReference',\r\n                field: 'extDocReference',\r\n            },\r\n            {\r\n                headerName: 'Contract ref.',\r\n                colId: 'sectionReference',\r\n                field: 'sectionReference',\r\n            },\r\n            {\r\n                headerName: 'Commodity',\r\n                colId: 'commodityId',\r\n                field: 'commodityId',\r\n                valueFormatter: this.commodityIdFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                colId: 'charterId',\r\n                field: 'charterId',\r\n                valueFormatter: this.charterIdFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost Center',\r\n                colId: 'costCenter',\r\n                field: 'costCenter',\r\n            },\r\n            {\r\n                headerName: 'Accrual Number',\r\n                colId: 'accrualNumber',\r\n                field: 'accrualNumber',\r\n            },\r\n        ];\r\n        this.rowStyle = { 'border-bottom': '1px solid #e0e0e0 !important' };\r\n    }\r\n\r\n    clientAccountIdFormatter(params): string {\r\n        if (params.value && this.masterdata.counterparties) {\r\n            const counterpartiesList = this.masterdata.counterparties.find((x) => x.counterpartyID === params.value);\r\n            if (counterpartiesList) {\r\n                return counterpartiesList.counterpartyCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    accountLineTypeIdFormatter(params): string {\r\n        if (params.value && this.masterdata.accountLineTypes) {\r\n            const accountLineTypesList = this.masterdata.accountLineTypes.find((x) => x.accountLineTypeId === params.value);\r\n            if (accountLineTypesList) {\r\n                return accountLineTypesList.accountLineTypeCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    costTypeIdFormatter(params): string {\r\n        if (params.value && this.masterdata.costTypes) {\r\n            const costTypesList = this.masterdata.costTypes.find((x) => x.costTypeId === params.value);\r\n            if (costTypesList) {\r\n                return costTypesList.costTypeCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    departmentIdFormatter(params): string {\r\n        if (params.value && this.masterdata.departments) {\r\n            const departmentsList = this.masterdata.departments.find((x) => x.departmentId === params.value);\r\n            if (departmentsList) {\r\n                return departmentsList.departmentCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    commodityIdFormatter(params): string {\r\n        if (params.value && this.masterdata.commodities) {\r\n            const commoditiesList = this.masterdata.commodities.find((x) => x.commodityId === params.value);\r\n            if (commoditiesList) {\r\n                return commoditiesList.commodityCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    charterIdFormatter(params): string {\r\n        if (params.value && this.filteredCharter) {\r\n            const charterList = this.filteredCharter.find((x) => x.charterId === params.value);\r\n            if (charterList) {\r\n                return charterList.charterCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    currencyFormatterInGrid(params) {\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.amountFormat, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"fileUpload\\\">\\r\\n    <input class=\\\"hidden-during-loading\\\" type=\\\"file\\\" accept=\\\"docType\\\"\\r\\n                                                     (change)=\\\"onFileSelected($event.target.files)\\\"\\r\\n                                                     #fileUpload>\\r\\n\\r\\n    <button mat-raised-button class=\\\"fab-text-button\\\" (click)=\\\"fileUpload.click()\\\"\\r\\n                                                      color=\\\"accent\\\">\\r\\n        <mat-icon class=\\\"mdc-fab__icon material-icons\\\">add</mat-icon>\\r\\n        Import\\r\\n    </button>\\r\\n</div>\"","module.exports = \".mat-dialog-content {\\n  width: 500px; }\\n\\n.printing-input-container {\\n  margin-top: 2%; }\\n\\n.error-message {\\n  color: #df5a4d;\\n  font-size: 0.8em; }\\n\"","import { Component, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n@Component({\r\n    selector: 'atlas-accounting-file-upload-dialog-box',\r\n    templateUrl: './accounting-file-upload-dialog-box.component.html',\r\n    styleUrls: ['./accounting-file-upload-dialog-box.component.scss']\r\n})\r\nexport class AccountingFileUploadDialogBoxComponent implements OnInit {\r\n    @Input() docType: string;\r\n    @Output() documentSelected = new EventEmitter<File>();\r\n\r\n    constructor(protected snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onFileSelected(files: FileList) {\r\n        if (files.length === 0) {\r\n            return;\r\n        }\r\n        const file: File = files[0];\r\n        this.documentSelected.emit(file);\r\n        event.stopPropagation();\r\n    }\r\n}\r\n\r\n","module.exports = \"<atlas-financial-tab-group></atlas-financial-tab-group>\\r\\n<div class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav mat-tab-nav-bar>\\r\\n\\r\\n            <div *ngIf=\\\"documentActionsPrivilege\\\">\\r\\n                <a mat-tab-link\\r\\n                   *ifAuthorized=\\\"routeLinks[0].privilege,company:this.company\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [matMenuTriggerFor]=\\\"export\\\"\\r\\n                   [active]=\\\"isActive(routeLinks[0])\\\">\\r\\n                    {{ routeLinks[0].label }}\\r\\n                </a>\\r\\n                <mat-menu #export=\\\"matMenu\\\"\\r\\n                          [overlapTrigger]=\\\"false\\\"\\r\\n                          xPosition=\\\"after\\\">\\r\\n                    <div *ngFor=\\\"let routeLinkChild of routeLinks[0].routeLinksChildren\\\">\\r\\n                        <a mat-tab-link\\r\\n                           *ifAuthorized=\\\"routeLinkChild.privilege,company:this.company\\\"\\r\\n                           [routerLink]=\\\"routeLinkChild.link\\\"\\r\\n                           routerLinkActive\\r\\n                           #rla=\\\"routerLinkActive\\\"\\r\\n                           [active]=\\\"isActive(routeLinkChild)\\\">\\r\\n                            {{ routeLinkChild.label }}\\r\\n                        </a>\\r\\n                    </div>\\r\\n                </mat-menu>\\r\\n            </div>\\r\\n            <div *ngFor=\\\"let routeLink of routeLinks | slice:1\\\">\\r\\n                <a mat-tab-link\\r\\n                   *ifAuthorized=\\\"routeLink.privilege,company:this.company\\\"\\r\\n                   [routerLink]=\\\"routeLink.link\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLink)\\\">\\r\\n                    {{ routeLink.label }}\\r\\n                </a>\\r\\n            </div>\\r\\n            <a mat-tab-link\\r\\n               [matMenuTriggerFor]=\\\"reports\\\">\\r\\n                Reports\\r\\n            </a>\\r\\n            <mat-menu #reports=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <span *ngFor=\\\"let item of filteredTemplates\\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"OnReportClick(item)\\\">\\r\\n                        {{item.name}}\\r\\n                    </button>\\r\\n                </span>\\r\\n            </mat-menu>\\r\\n        </nav>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".header-tab {\\n  margin-bottom: 0px;\\n  margin-top: -18px;\\n  background-color: white !important; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n.mat-menu-content {\\n  padding-top: 0 !important; }\\n\\n.floating-menu {\\n  top: -1px; }\\n\\n::ng-deep.dark-tab.mat-tab-nav-bar.mat-primary,\\n.dark-tab .mat-tab-link,\\n.dark-tab .mat-tab-label .mat-tab-label-content {\\n  text-transform: none !important;\\n  color: #332f30 !important; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { GenericReportViewerComponent } from '../../../../shared/components/generic-report-viewer/generic-report-viewer.component';\r\nimport { PhysicalDocumentTemplate } from '../../../../shared/entities/document-template.entity';\r\nimport { DocumentService } from '../../../../shared/services/http-services/document.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\n@Component({\r\n    selector: 'atlas-accounting-tab-group',\r\n    templateUrl: './accounting-tab-group.component.html',\r\n    styleUrls: ['./accounting-tab-group.component.scss'],\r\n})\r\nexport class AccountingTabGroupComponent implements OnInit {\r\n    editAccOrJournalDocumentPrivilege: boolean = true;\r\n    editDocumentPrivilege: boolean = true;\r\n    reverseDocumentPrivilege: boolean = true;\r\n    documentActionsPrivilege: boolean = true;\r\n    filteredTemplates: PhysicalDocumentTemplate[] = new Array<PhysicalDocumentTemplate>();\r\n    routeLinks = [\r\n        {\r\n            label: 'Document Actions',\r\n            index: 0,\r\n            privilege: 'Financials.AccountingEntries',\r\n            routeLinksChildren: [\r\n                {\r\n                    label: 'Create a document',\r\n                    link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entry/new',\r\n                    index: 0,\r\n                    privilege: 'Financials.AccountingEntries.CreateEditDocument',\r\n                },\r\n                {\r\n                    label: 'Edit a document',\r\n                    link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/edit/document/summary',\r\n                    index: 1,\r\n                    privilege: 'Financials.AccountingEntries.EditAccountingEntries',\r\n                },\r\n                {\r\n                    label: 'Reverse document',\r\n                    link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/reverse/document',\r\n                    index: 2,\r\n                    privilege: 'Financials.AccountingEntries.ReverseDocument',\r\n                },\r\n\r\n            ],\r\n        },\r\n        {\r\n            label: 'Create / Delete Match',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/create/matching',\r\n            index: 1,\r\n            privilege: 'Financials.AccountingEntries.CreateDeleteMatchFlag',\r\n        },\r\n        {\r\n            label: 'Posting Management',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/posting/management',\r\n            index: 2,\r\n            privilege: 'Financials.POSTINGMGT',\r\n        },\r\n        {\r\n            label: 'Interface Errors',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/errormanagement/',\r\n            index: 3,\r\n            privilege: 'Financials.InterfaceErrors',\r\n        },\r\n    ];\r\n    activeLinkIndex = -1;\r\n    company: string;\r\n\r\n    constructor(private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        private authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected documentService: DocumentService) {\r\n        this.activeLinkIndex = this.routeLinks.indexOf(this.routeLinks.find((tab) => this.router.url.includes(tab.link)));\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        const documentType = 76;\r\n        this.documentService.getTemplates(documentType, 'AccountingEntries').subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n        });\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Financials')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'AccountingEntries')) {\r\n                this.editAccOrJournalDocumentPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CreateEditDocument');\r\n                this.editDocumentPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'EditAccountingEntries');\r\n                this.reverseDocumentPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'ReverseDocument');\r\n                this.documentActionsPrivilege = (this.editAccOrJournalDocumentPrivilege\r\n                    || this.editDocumentPrivilege || this.reverseDocumentPrivilege);\r\n            }\r\n        });\r\n    }\r\n\r\n    OnReportClick(data: any) {\r\n\r\n        const openTradepnlReportDialog = this.dialog.open(GenericReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: data.name,\r\n                reportPath: data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n\r\n    }\r\n\r\n    isActive(routeLink: any) {\r\n        return this.activeLinkIndex === routeLink.index;\r\n    }\r\n\r\n}\r\n","module.exports = \"<h1 class=\\\"no-margin\\\">Authorize documents for posting </h1>\\r\\n\\r\\n<div *ngIf=\\\"isTopCardVisible\\\"\\r\\n     fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start start\\\"\\r\\n     class=\\\"dialog-top-card\\\">\\r\\n    <div class=\\\"authorize-posting-dialog\\\"\\r\\n         fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\">\\r\\n        <div class=\\\"question-circle-icon\\\">\\r\\n            <mat-icon>help</mat-icon>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\">\\r\\n        <h2 fxLayoutAlign=\\\"start center\\\"\\r\\n            class=\\\"no-margin\\\">\\r\\n            Some documents cannot be authorized for posting\\r\\n        </h2>\\r\\n        <div class=\\\"content-font\\\"\\r\\n             *ngIf=\\\"isTopCardVisible\\\">\\r\\n\\r\\n            <p *ngFor=\\\"let document of validateAccountingDocument\\\">\\r\\n                {{document.documentReference}} : {{document.reason}}\\r\\n            </p>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<p *ngIf=\\\"isBottomCardVisible\\\">\\r\\n    The following documents will be authorized for posting:\\r\\n</p>\\r\\n\\r\\n<div *ngIf=\\\"isBottomCardVisible\\\">\\r\\n    <mat-chip-list multiple>\\r\\n        <mat-chip *ngFor=\\\"let document of passedAccountingDocument\\\"\\r\\n                  [selected]=\\\"true\\\">\\r\\n            <mat-icon>cancel</mat-icon>\\r\\n            {{document.documentReference}}\\r\\n        </mat-chip>\\r\\n    </mat-chip-list>\\r\\n</div>\\r\\n\\r\\n<mat-dialog-actions>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onDiscardButtonClicked()\\\">Discard</button>\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-button\\r\\n            *ngIf=\\\"isBottomCardVisible\\\"\\r\\n            (click)=\\\"onConfirmButtonClicked()\\\">Proceed</button>\\r\\n</mat-dialog-actions>\\r\\n\"","module.exports = \".dialog-top-card {\\n  margin-top: 2px; }\\n\\n.question-circle-icon {\\n  width: 50px;\\n  height: 50px;\\n  margin-right: 8px; }\\n\\n.question-circle-icon .mat-icon {\\n    height: 30px;\\n    width: 30px;\\n    padding: 10px;\\n    font-size: 30px; }\\n\\n.content-padding {\\n  padding-top: 16px; }\\n\\n.content-font {\\n  font-size: 15px;\\n  font-weight: initial;\\n  display: -ms-inline-grid;\\n  display: inline-grid;\\n  color: rgba(0, 0, 0, 0.54);\\n  margin-bottom: 0px; }\\n\\n.content-font p {\\n    margin-top: 8px;\\n    margin-bottom: 0; }\\n\\n.mat-button {\\n  margin: 0; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { PostingManagementDisplayView } from '../../../../shared/models/posting-management-display-view';\r\nimport { PreaccountingService } from '../../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-authorize-posting-dialog',\r\n    templateUrl: './authorize-posting-dialog.component.html',\r\n    styleUrls: ['./authorize-posting-dialog.component.scss'],\r\n})\r\nexport class AuthorizePostingDialogComponent implements OnInit {\r\n\r\n    isTopCardVisible: boolean = true;\r\n    isBottomCardVisible: boolean = true;\r\n    authorizePostingSubscription: Subscription;\r\n    validateAccountingDocument: PostingManagementDisplayView[];\r\n    passedAccountingDocument: PostingManagementDisplayView[];\r\n\r\n    constructor(private snackbarService: SnackbarService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private preaccountingService: PreaccountingService,\r\n        public thisDialogRef: MatDialogRef<AuthorizePostingDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {\r\n        this.validateAccountingDocument = data.validateAccountingDocument;\r\n        this.passedAccountingDocument = data.passedAccountingDocument;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isTopCardVisible = this.validateAccountingDocument.length === 0 ? false : true;\r\n        this.isBottomCardVisible = this.passedAccountingDocument.length === 0 ? false : true;\r\n    }\r\n\r\n    onConfirmButtonClicked() {\r\n        this.authorizePostingSubscription = this.preaccountingService.authorizeForPosting(this.passedAccountingDocument)\r\n            .subscribe(() => {\r\n            }, (error) => {\r\n                console.error(error);\r\n                this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n            });\r\n\r\n        this.thisDialogRef.close(null);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close(null);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.authorizePostingSubscription) {\r\n            this.authorizePostingSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<header class=\\\"header-background-creation\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <h2>Document Reference: {{docReference}}</h2>\\r\\n            <mat-chip-list>\\r\\n                <mat-chip [ngClass]=\\\"statusClassApplied\\\"\\r\\n                          selected\\r\\n                          disabled>\\r\\n                    {{docStatus}}\\r\\n                </mat-chip>\\r\\n                <mat-chip *ngIf=\\\"!isMappingErrorStatus && showErrorMessage\\\"\\r\\n                          [ngClass]=\\\"errormsg\\\"\\r\\n                          selected\\r\\n                          disabled>\\r\\n                    {{errorMessage}}\\r\\n                </mat-chip>\\r\\n            </mat-chip-list>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxLayoutGap=\\\"16px\\\"\\r\\n             class=\\\"charter-global-info\\\">\\r\\n            <div>\\r\\n                <mat-form-field class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Created By\\\"\\r\\n                           disabled\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           value=\\\"{{createdBy}}\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"70\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           value=\\\"{{creationDate}}\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-form-field class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Amended By\\\"\\r\\n                           disabled\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           value=\\\"{{modifiedBy ? modifiedBy : ' '}}\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"40\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           value=\\\"{{modifiedDate ? modifiedDate : ' '}}\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</header>\\r\\n<mat-toolbar class=\\\"menu-bar\\\">\\r\\n    <div class=\\\"toolbar-div\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxFlex=\\\"30\\\">\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"export\\\"\\r\\n                    class=\\\"menu-bar-button\\\">Export\\r\\n            </button>\\r\\n            <mat-menu #export=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onExportButtonClickedAsExcel()\\\">Export As Excel</button>\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onExportButtonClickedAsCSV()\\\">Export As CSV</button>\\r\\n            </mat-menu>\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Financials.POSTINGMGT.DELETEACCOUNTINGDOCUMENT',company:this.company\\\"\\r\\n                    disabled={{isViewMode}}\\r\\n                    (click)=\\\"onDeleteClicked()\\\"\\r\\n                    class=\\\"menu-bar-button\\\">Delete Document\\r\\n            </button>\\r\\n        </div>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\"\\r\\n             fxFlex=\\\"20\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <a matTooltip=\\\"Back\\\"\\r\\n               *ngIf=\\\"!isViewMode\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\"\\r\\n                          (click)=\\\"onLoadPreviousPageButtonClicked()\\\">arrow_back</mat-icon>\\r\\n            </a>\\r\\n\\r\\n            <a matTooltip=\\\"Save\\\"\\r\\n               *ngIf=\\\"!isViewMode\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\"\\r\\n                          (click)=\\\"submitForm()\\\">save</mat-icon>\\r\\n            </a>\\r\\n            <span *ifAuthorized=\\\"'Financials.POSTINGMGT', company:company, level: PermissionLevels.ReadWrite\\\">\\r\\n                <div *ngIf=\\\"editPostingManagementPrivilege && isMappingErrorStatus && !isAlreadyAuthorized && !isAccOrJournalType\\\"\\r\\n                     class=\\\"menu-bar-action-icon\\\">\\r\\n                    <a (click)=\\\"onEditClicked()\\\"\\r\\n                       matTooltip=\\\"Edit\\\">\\r\\n                        <mat-icon class=\\\"white-icon\\\">edit</mat-icon>\\r\\n                    </a>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"!isMappingErrorStatus && !isAccOrJournalType && readWritePrivilege && !isAlreadyAuthorized\\\"\\r\\n                     class=\\\"menu-bar-action-icon\\\">\\r\\n                    <a (click)=\\\"onEditClicked()\\\"\\r\\n                       matTooltip=\\\"Edit\\\">\\r\\n                        <mat-icon class=\\\"white-icon\\\">edit</mat-icon>\\r\\n                    </a>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\" isAccOrJournalType && editAccOrJournalDcoumentPrivilege && !isAlreadyAuthorized\\\"\\r\\n                     class=\\\"menu-bar-action-icon\\\">\\r\\n                    <a (click)=\\\"onEditClicked()\\\"\\r\\n                       matTooltip=\\\"Edit\\\">\\r\\n                        <mat-icon class=\\\"white-icon\\\">edit</mat-icon>\\r\\n                    </a>\\r\\n                </div>\\r\\n            </span>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-toolbar>\\r\\n<div class=\\\"main-container\\\">\\r\\n    <div *ngIf=\\\"showErrorBanners\\\">\\r\\n        <div *ngFor=\\\"let errorMessage of mappingErrorMessages\\\">\\r\\n            <mat-card class=\\\"warning-card warning-banner-card\\\">\\r\\n                <div class=\\\"warning-circle-icon\\\">\\r\\n                    <mat-icon>warning_outline</mat-icon>\\r\\n                </div>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h4 class=\\\"no-margin\\\">Mapping Error {{errorMessage.split(' ')[0]}}</h4>\\r\\n                    </mat-card-title>\\r\\n\\r\\n                    <mat-card-subtitle>\\r\\n                        {{errorMessage}}\\r\\n                    </mat-card-subtitle>\\r\\n                    <button class=\\\"remove-button\\\"\\r\\n                            mat-button\\r\\n                            (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n                    </button>\\r\\n                </mat-card-header>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-card>\\r\\n        <h2>Document Information</h2>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <div class=\\\"accounting-document-fields\\\"\\r\\n                 fxFlex=\\\"85%\\\">\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between center\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\"\\r\\n                         fxFlex=\\\"90%\\\">\\r\\n                        <div class=\\\"custom-form\\\"\\r\\n                             fxFlex=\\\"30%\\\"\\r\\n                             [class.isEmpty]=\\\"!docDateFormCtrl.value\\\"\\r\\n                             [class.required-field]=\\\"docDateFormCtrl.isRequired\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput\\r\\n                                       [matDatepicker]=\\\"frompicker\\\"\\r\\n                                       placeholder=\\\"Document Date\\\"\\r\\n                                       (dateChange)=\\\"documentDateChanged($event)\\\"\\r\\n                                       value=\\\"frompicker\\\"\\r\\n                                       autocomplete=\\\"off\\\"\\r\\n                                       [formControl]='docDateFormCtrl'>\\r\\n                                <mat-datepicker-toggle matSuffix\\r\\n                                                       [for]=\\\"frompicker\\\"></mat-datepicker-toggle>\\r\\n                                <mat-datepicker #frompicker></mat-datepicker>\\r\\n                                <mat-error *ngIf=\\\"docDateFormCtrl.hasError('required')\\\">\\r\\n                                    This field is required\\r\\n                                </mat-error>\\r\\n                                <mat-hint\\r\\n                                          *ngIf=\\\"docDateFormCtrl.isRequired && !isViewMode && !isCashDocumentType && !this.isAlreadyAuthorized && !isInvoiceDocumentType\\\">\\r\\n                                    Required *\\r\\n                                </mat-hint>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <mat-form-field class=\\\"value-date-control\\\"\\r\\n                                        fxFlex=\\\"40%\\\">\\r\\n                            <input matInput\\r\\n                                   [matDatepicker]=\\\"valueDatePicker\\\"\\r\\n                                   placeholder=\\\"Value Date\\\"\\r\\n                                   value=\\\"valueDatePicker\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]='valueDateFormCtrl'>\\r\\n                            <mat-datepicker-toggle matSuffix\\r\\n                                                   [for]=\\\"valueDatePicker\\\"></mat-datepicker-toggle>\\r\\n                            <mat-datepicker #valueDatePicker></mat-datepicker>\\r\\n                            <mat-hint class=\\\"value-date-warning\\\"\\r\\n                                      *ngIf=\\\" !isViewMode && isValueDateBeforeDocumentDate()\\\">Value date is before the\\r\\n                                document date\\r\\n                            </mat-hint>\\r\\n                        </mat-form-field>\\r\\n\\r\\n                        <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                            <input matInput\\r\\n                                   [matDatepicker]=\\\"glDatePicker\\\"\\r\\n                                   placeholder=\\\"GL Date\\\"\\r\\n                                   value=\\\"glDatePicker\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]='glDateFormCtrl'>\\r\\n                            <mat-datepicker-toggle matSuffix\\r\\n                                                   [for]=\\\"glDatePicker\\\"></mat-datepicker-toggle>\\r\\n                            <mat-datepicker #glDatePicker></mat-datepicker>\\r\\n                        </mat-form-field>\\r\\n\\r\\n                    </div>\\r\\n                    <br />\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\">\\r\\n\\r\\n                        <atlas-month-date-picker #monthDatePicker\\r\\n                                                 fxFlex=\\\"30%\\\"\\r\\n                                                 class=\\\"month-date-picker\\\"\\r\\n                                                 [fieldControl]=\\\"accPeriodFormCtrl\\\"\\r\\n                                                 isEditable=\\\"!isViewMode\\\"\\r\\n                                                 (monthChanged)=\\\"accountPeriodChanged($event)\\\"\\r\\n                                                 [label]=\\\"'Accounting Period'\\\"></atlas-month-date-picker>\\r\\n\\r\\n                        <atlas-masterdata-user-preferences-input [isEditable]=\\\"!isViewMode\\\"\\r\\n                                                                 [fieldControl]=\\\"currencyCtrl\\\"\\r\\n                                                                 [options]=\\\"filteredCurrencyList\\\"\\r\\n                                                                 label=\\\"Currency\\\"\\r\\n                                                                 displayProperty=\\\"currencyCode\\\"\\r\\n                                                                 tooltip=\\\"description\\\"\\r\\n                                                                 [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                                                 [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                                                 lightBoxTitle=\\\"Results for Currency\\\"\\r\\n                                                                 gridId=\\\"currenciesGrid\\\">\\r\\n                        </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n\\r\\n\\r\\n    <mat-card>\\r\\n        <div *ngIf=\\\"!isViewMode; else ViewMode\\\"\\r\\n             ag-grid=\\\"accountingLineGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor atr-ag-grid\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\"\\r\\n                 class=\\\" table-title atlas-grid-card-header\\\">\\r\\n                <div class=\\\"adjust-weight-title\\\">\\r\\n                    <h2>Accounting lines</h2>\\r\\n                </div>\\r\\n                <div>\\r\\n                    <button mat-icon-button\\r\\n                            [matMenuTriggerFor]=\\\"displayedColumnsMenu\\\">\\r\\n                        <mat-icon>menu</mat-icon>\\r\\n                    </button>\\r\\n                    <div>\\r\\n                        <mat-menu #displayedColumnsMenu=\\\"matMenu\\\">\\r\\n                            <div *ngFor=\\\"let col of columnDefs\\\">\\r\\n                                <mat-checkbox [checked]=\\\"!col.hide\\\"\\r\\n                                              (click)=\\\"showOrHideColum($event, col)\\\"\\r\\n                                              *ngIf=\\\"(!col.headerName =='') \\\">{{col.headerName}}</mat-checkbox>\\r\\n                            </div>\\r\\n                        </mat-menu>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"!isViewMode && isAccOrJournalType\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\"\\r\\n                 class=\\\"add-line-container\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <h6>Add new lines:</h6>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\"\\r\\n                     fxFlex=\\\"2\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               class=\\\"input-newline\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]=\\\"addNewLineCtrl\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onAddAccountingLineButtonClicked(addNewLineCtrl.value)\\\">PROCEED</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <ag-grid-angular class=\\\"ag-theme-material atr-ag-grid\\\"\\r\\n                             [rowData]=\\\"accountingDocumentLine\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (columnVisible)=\\\"onAddOrDeleteColumn($event)\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [singleClickEdit]=true\\r\\n                             [enableColResize]=\\\"false\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [rowStyle]=\\\"rowStyle\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             [processCellForClipboard]=\\\"processCellForClipboard\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <ng-template #ViewMode>\\r\\n            <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                                   [gridCode]=\\\"gridCode\\\"\\r\\n                                   gridTitle=\\\"Accounting Lines\\\"\\r\\n                                   [company]=\\\"company\\\"\\r\\n                                   [dataLoader]=\\\"accountingLinesDataLoader\\\"\\r\\n                                   #listAndSearchComponent>\\r\\n            </atlas-list-and-search>\\r\\n        </ng-template>\\r\\n\\r\\n\\r\\n        <div  fxLayout=\\\"column\\\"\\r\\n              fxFlex=15\\r\\n              fxLayoutAlign=\\\"space-around start\\\"\\r\\n              *ngIf=\\\"false\\\"\\r\\n              class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n\\r\\n        <div  fxLayout=\\\"column\\\"\\r\\n              fxLayoutAlign=\\\"space-around end\\\">\\r\\n            <div fxFlex=\\\"33\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure \\\">Amount : <span\\r\\n                          class=\\\"total-figure-value\\\">{{formatValue(amount)}}\\r\\n                    </span></mat-card-subtitle>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"33\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Functional ccy. equivalent : <span\\r\\n                          class=\\\"total-figure-value\\\">{{formatValue(functionalAmount)}}\\r\\n                    </span>\\r\\n                </mat-card-subtitle>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"33\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure \\\">Statutory ccy. equivalent : <span\\r\\n                          class=\\\"total-figure-value\\\">{{formatValue(statutoryAmount)}}\\r\\n\\r\\n                    </span> </mat-card-subtitle>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\">\\r\\n        <div fxFlex=85>\\r\\n\\r\\n        </div>\\r\\n        <div *ngIf=!isViewMode \\r\\n             fxLayout=\\\"column\\\"\\r\\n             fxFlex=18\\r\\n             fxLayoutAlign=\\\"space-around start\\\">\\r\\n            <div>\\r\\n                <mat-slide-toggle (click)=\\\"onToInterfaceButtonClicked()\\\"\\r\\n                                  *ifAuthorized=\\\"'Financials.POSTINGMGT.PostingInterface',company:this.company\\\"\\r\\n                                  [formControl]=\\\"\\r\\n                                  interfaceCtrl\\\">To interface</mat-slide-toggle>\\r\\n            </div>\\r\\n            <div>\\r\\n                <mat-slide-toggle *ifAuthorized=\\\"'Financials.POSTINGMGT.AUTHORIZEPOSTING',company:this.company\\\"\\r\\n                                  (change)=\\\"\\r\\n                                  toggleAuthorizeButton()\\\"\\r\\n                                  [formControl]=\\\"authForCtrl\\\">Authorize for posting</mat-slide-toggle>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         class='mat-buttons'>\\r\\n        <div fxFlex=\\\"90\\\">\\r\\n            <button mat-button\\r\\n                    class='mat-button-discard'\\r\\n                    (click)=\\\"onCancelButtonClicked()\\\">DISCARD</button>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"6\\\" *ngIf=!isViewMode >\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"submitForm()\\\">\\r\\n                SAVE\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\"","module.exports = \"::ng-deep.ag-layout-auto-height.ag-body-container {\\n  min-height: 100px !important; }\\n\\n.ag-grid-style {\\n  width: 100%;\\n  height: 100%; }\\n\\n.mat-button-user-margin {\\n  display: block;\\n  width: 24px;\\n  height: 24px;\\n  background: #53c234;\\n  padding: 10px;\\n  text-align: center;\\n  border-radius: 50%;\\n  color: white;\\n  font-weight: bold; }\\n\\n.accounting-document-fields {\\n  width: 100%; }\\n\\n.accounting-document-buttons {\\n  width: 10%; }\\n\\n.value-legs-total-figure {\\n  margin-top: 8px;\\n  margin-right: 20px; }\\n\\n.button-accounting-doc {\\n  margin: 20%; }\\n\\n.document-margin {\\n  margin-top: 1%;\\n  margin-left: 35px;\\n  margin-right: 30px; }\\n\\n.month-date-picker {\\n  width: 100%;\\n  display: inline-flex; }\\n\\n.table-title {\\n  background-color: white; }\\n\\n.header-background-creation {\\n  background: top/contain url(/assets/img/luke-waves.svg) no-repeat;\\n  background-position-x: right;\\n  background-color: white;\\n  min-height: 130px; }\\n\\n.mat-toolbar {\\n  height: 56px !important;\\n  background-color: white !important; }\\n\\n.menu-bar-button {\\n  width: 100% !important; }\\n\\n::ng-deep.mat-slide-toggle-label {\\n  flex-direction: row !important; }\\n\\n.value-legs-total-figure {\\n  margin-top: 8px; }\\n\\n.mat-button-discard {\\n  margin-left: 25px; }\\n\\n.contextual-search-for-currency {\\n  width: 100%; }\\n\\n.value-date-warning {\\n  color: #ec8d2d; }\\n\\n.value-date-control {\\n  width: 200px !important; }\\n\\n.add-line-container {\\n  margin-left: 10px; }\\n\\n.mat-error-message-chip {\\n  background-color: #DF5A4D !important; }\\n\\n.mat-neutral-message-chip {\\n  background-color: #CAE8DC !important; }\\n\\nmat-card.warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n\\nmat-card.warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n\\nmat-card.warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n\\nmat-card.warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n\\nbutton.remove-button.mat-button {\\n  position: absolute;\\n  right: 10px;\\n  bottom: 15px; }\\n\\n:host ::ng-deep .ag-theme-material .mat-form-field-appearance-legacy .mat-form-field-wrapper {\\n  padding-bottom: 0px !important; }\\n\\n:host ::ng-deep .input-newline {\\n  padding-bottom: 12px; }\\n\"","import { Location } from '@angular/common';\r\nimport { Component, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { CommonMethods } from '../../../../..//execution/services/execution-cash-common-methods';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridAccrualNumberComponent } from '../../../../../shared/components/ag-grid-accrual-number/ag-grid-accrual-number.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { FxDealSearchResult } from '../../../../../shared/dtos/fxDeal-search-result';\r\nimport { SectionSearchResult } from '../../../../../shared/dtos/section-search-result';\r\nimport { TransactionDocumentSearchResult } from '../../../../../shared/dtos/transaction-document-search-result';\r\nimport { AccountLineType } from '../../../../../shared/entities/account-line-type.entity';\r\nimport { AccountingDocumentLine } from '../../../../../shared/entities/accounting-document-line.entity';\r\nimport { AccountingDocumentStatusToDeletedCommand } from '../../../../../shared/entities/accounting-document-status-deleted.entity';\r\nimport { AccountingDocumentStatus } from '../../../../../shared/entities/accounting-document-status.entity';\r\nimport { AccountingSetup } from '../../../../../shared/entities/accounting-setup.entity';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { Commodity } from '../../../../../shared/entities/commodity.entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { CostType } from '../../../../../shared/entities/cost-type.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../../shared/entities/nominal-account.entity';\r\nimport { PaymentTerm } from '../../../../../shared/entities/payment-term.entity';\r\nimport { PostingManagement } from '../../../../../shared/entities/posting-management.entity';\r\nimport { Province } from '../../../../../shared/entities/province.entity';\r\nimport { Vat } from '../../../../../shared/entities/vat.entity';\r\nimport { AccountLineTypes } from '../../../../../shared/enums/account-line-type.enum';\r\nimport { PermissionLevels } from '../../../../../shared/enums/permission-level.enum';\r\nimport { PostingDocumentTAType } from '../../../../../shared/enums/posting-document-tatype.enum';\r\nimport { PostingDocumentType } from '../../../../../shared/enums/posting-document-type.enum';\r\nimport { PostingStatus } from '../../../../../shared/enums/posting-status.enum';\r\nimport { PostingManagementDisplayView } from '../../../../../shared/models/posting-management-display-view';\r\nimport { AllNumberMask, CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { CharterDataLoader } from '../../../../../shared/services/execution/charter-data-loader';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { FxDealDataLoader } from '../../../../../shared/services/list-and-search/fxDeal-data-loader';\r\nimport { TradeDataLoader } from '../../../../../shared/services/list-and-search/trade-data-loader';\r\nimport { TransactionDocumentDataLoader } from '../../../../../shared/services/preaccounting/transaction-document-data-loader';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { UrlManagementService } from '../../../../../shared/services/url-management.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { isDateTwoBeforeDateOne } from '../../../../../shared/validators/date-validators.validator';\r\nimport { PostingAccountLinesDataLoader } from '../../../../../shared/services/list-and-search/posting-acoount-lines-data-loader';\r\nimport { ListAndSearchComponent } from '../../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { ItemConfigurationProperties } from '../../../../../shared/entities/form-configuration.entity';\r\nimport { FormConfigurationService } from '../../../../../shared/services/http-services/form-configuration.service';\r\n\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-document-information-component',\r\n    templateUrl: './accounting-document-information-component.component.html',\r\n    styleUrls: ['./accounting-document-information-component.component.scss'],\r\n    providers: [TransactionDocumentDataLoader, TradeDataLoader, CharterDataLoader, FxDealDataLoader, PostingAccountLinesDataLoader],\r\n})\r\nexport class AccountingDocumentInformationComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    subscriptions: Subscription[] = [];\r\n    columnDefs: agGrid.ColDef[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    rowStyle: any;\r\n    savingInProgress = false;\r\n    isSave: boolean = false;\r\n    isMtmSelected: boolean = false;\r\n    filteredFxDeals: FxDealSearchResult[];\r\n    filteredProvinceList: Province[];\r\n    accountingId: number;\r\n    documentRefData: PostingManagementDisplayView[];\r\n    accountingDocumentLine: AccountingDocumentLine[];\r\n    filteredCostTypeList: CostType[];\r\n    docDateFormCtrl = new AtlasFormControl('docDateFormCtrl');\r\n    valueDateFormCtrl = new AtlasFormControl('valueDateFormCtrl');\r\n    accPeriodFormCtrl = new AtlasFormControl('accPeriodFormCtrl');\r\n    glDateFormCtrl = new AtlasFormControl('glDateFormCtrl');\r\n    currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n    interfaceCtrl = new AtlasFormControl('interfaceCtrl');\r\n    authForCtrl = new AtlasFormControl('authForCtrl');\r\n    addNewLineCtrl = new AtlasFormControl('addNewLineCtrl');\r\n    filteredNominalAccountList: NominalAccount[];\r\n    filteredCounterpartyList: Counterparty[];\r\n    filteredDepartmentList: Department[];\r\n    filteredCommodityList: Commodity[];\r\n    filtererdPaymentList: PaymentTerm[];\r\n    filteredSettlementCurrencyList: Currency[];\r\n    filteredAccountLineTypeForMtm: AccountLineType[] = [];\r\n    filteredVatsList: Vat[];\r\n    isAccrualDocument: boolean = false;\r\n    filteredDocuments: TransactionDocumentSearchResult[];\r\n    accountingSetupModel: AccountingSetup;\r\n    masterdata: MasterData;\r\n    authorisedForPosting: boolean;\r\n    filteredCurrencyList: Currency[];\r\n    amountColumn: string = 'amount';\r\n    clientAccountColumn: string = 'clientAccountId';\r\n    secondaryDocumentReferenceColumn: string = 'secondaryDocumentReference';\r\n    externalDocumentReferenceColumn: string = 'extDocReference';\r\n    costCenterColumn: string = 'costCenter';\r\n    provinceColumn: string = 'provinceId';\r\n\r\n    editDocumentFormGroup: FormGroup;\r\n    isAccOrJournalType: boolean = false;\r\n    nominalAccount: string = 'accountReference';\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n\r\n    filteredAccountLineType: AccountLineType[];\r\n    filteredContracts: SectionSearchResult[];\r\n    filteredCharter: Charter[];\r\n    nominalAccountFound: NominalAccount;\r\n    docReference: string;\r\n    taTypeId: number;\r\n    docStatus: string;\r\n    creationDate: string;\r\n    createdBy: string;\r\n    modifiedDate: string;\r\n    modifiedBy: string;\r\n    errorMessage: string;\r\n    isViewMode: boolean = true;\r\n    isAlreadyAuthorized: boolean = false;\r\n    accountingDocumentData: PostingManagement;\r\n    amount: number;\r\n    decimalOptionValue: number = 2;\r\n    amountFormat: string = 'en-US';\r\n    statutoryCurrencyColumn: string = 'statutoryCurrency';\r\n    functionalCurrencyColumn: string = 'functionalCurrency';\r\n    amountValue: string = 'amount';\r\n    requiredString: string = 'Required*';\r\n    statutoryAmount: number;\r\n    functionalAmount: number;\r\n    currencyControl: Currency;\r\n    editLineMenu: string = 'editLineMenu';\r\n    accrualNumberColumn: string = 'accrualNumber';\r\n    paymentTermColumn: string = 'paymentTermId';\r\n    vatIdColumn: string = 'vatId';\r\n    errormsg: string;\r\n    statusClassApplied: string;\r\n    showErrorMessage: boolean = true;\r\n    accountingDocumentId: string = 'accountingDocumentId';\r\n    dealNumberColumn: string = 'dealNumber';\r\n    settlementCurrencyColumn: string = 'settlementCurrency';\r\n    editAccountingDocumentGridContextualMenuActions: AgContextualMenuAction[];\r\n\r\n    accountingDocumentGridContextualMenuActions: AgContextualMenuAction[];\r\n    accountingDocumentMenuActions: { [key: string]: string } = {\r\n        exportDocument: 'export',\r\n    };\r\n    excelSheetName: string = 'Document Lines';\r\n    contractDate: Date;\r\n    isAuthorizedControlenabled: boolean = false;\r\n    isToInterfaceControlenabled: boolean = true;\r\n    isCashDocumentType: boolean;\r\n    isCashDocumentAuthorized: boolean = true;\r\n    isInvoiceDocumentType: boolean = true;\r\n    operationsLastMonthClosed: Date;\r\n    monthNameForlastMonthClosed: string;\r\n    monthNames: string[] = ['January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December'];\r\n    currencyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'This field is required')\r\n        .set('inDropdownList', 'Invalid entry. Currency not in the list.');\r\n    isDocumentStatusHeld: boolean;\r\n    counterPartyAccountingCategory: string = 'C';\r\n    company: string;\r\n    companyConfiguration: Company;\r\n    postOpClosedPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'POSTOPCLOSED',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'POSTINGMGT',\r\n    };\r\n    lastMonthClosed: Date;\r\n    monthNameForoperationsLastMonthClosed: string;\r\n    editDocumentMenuActions: { [key: string]: string } = {\r\n        copyDocumentLine: 'copy',\r\n        deleteDocumentLine: 'delete',\r\n    };\r\n    date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    isMappingErrorStatus: boolean = false;\r\n    mappingErrorMessages: string[] = [];\r\n    showErrorBanners: boolean = false;\r\n    editPostingManagementPrivilege = false;\r\n    readWritePrivilege = false;\r\n    editAccOrJournalDcoumentPrivilege = false;\r\n    functionalCurrencyHeader: string = 'Functional Currency in ';\r\n    statutoryCurrencyHeader: string = 'Statutory Currency in ';\r\n    PermissionLevels = PermissionLevels;\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    destroy$ = new Subject();\r\n    gridCode = \"accountingDocByIdGrid\";\r\n    accountCreationConfiguration: ItemConfigurationProperties[] = new Array<ItemConfigurationProperties>();\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private urlManagementService: UrlManagementService,\r\n        protected router: Router,\r\n        private preaccountingService: PreaccountingService,\r\n        protected snackbarService: SnackbarService,\r\n        protected deleteConfirmationDialog: MatDialog,\r\n        protected companyManager: CompanyManagerService,\r\n        public tradeDataLoader: TradeDataLoader,\r\n        public charterDataLoader: CharterDataLoader,\r\n        private authorizationService: AuthorizationService,\r\n        protected dialog: MatDialog,\r\n        private location: Location,\r\n        public transactionDocumentDataLoader: TransactionDocumentDataLoader,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private uiService: UiService,\r\n        public fxDealLoader: FxDealDataLoader,\r\n        protected securityService: SecurityService,\r\n        protected lockService: LockService,\r\n        private titleService: TitleService,\r\n        public gridService: AgGridService,\r\n        private formConfigurationService: FormConfigurationService,\r\n        public accountingLinesDataLoader: PostingAccountLinesDataLoader,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.formConfigurationService.getMandatoryFieldsConfigurationForFinancial().subscribe((templates) => {\r\n            this.accountCreationConfiguration = templates.value;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.functionalCurrencyHeader = (this.companyConfiguration.functionalCurrencyCode) ?\r\n            this.functionalCurrencyHeader + this.companyConfiguration.functionalCurrencyCode : this.functionalCurrencyHeader;\r\n        this.statutoryCurrencyHeader = (this.companyConfiguration.statutoryCurrencyCode) ?\r\n            this.statutoryCurrencyHeader + this.companyConfiguration.statutoryCurrencyCode : this.statutoryCurrencyHeader;\r\n\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Financials')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'POSTINGMGT')) {\r\n                this.editPostingManagementPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'EditPostingManagement');\r\n                this.readWritePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'POSTINGMGT');\r\n            }\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Financials')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'AccountingEntries')) {\r\n                this.editAccOrJournalDcoumentPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CreateEditDocument');\r\n            }\r\n        });\r\n        this.accountingId = Number(this.route.snapshot.paramMap.get('accountingId'));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCurrencyList = this.masterdata.currencies;\r\n        this.filteredSettlementCurrencyList = this.filteredCurrencyList;\r\n        this.filteredCounterpartyList = this.masterdata.counterparties;\r\n        this.filteredAccountLineType = this.masterdata.accountLineTypes;\r\n        this.filteredCostTypeList = this.masterdata.costTypes;\r\n        this.filteredDepartmentList = this.masterdata.departments;\r\n        this.filteredCommodityList = this.masterdata.commodities;\r\n        this.filtererdPaymentList = this.masterdata.paymentTerms;\r\n        this.filteredVatsList = this.masterdata.vats;\r\n        this.filteredProvinceList = this.masterdata.provinces;\r\n        this.addNewLineCtrl.patchValue(1);\r\n        if (this.filteredAccountLineType && this.filteredAccountLineType.length > 0) {\r\n            this.filteredAccountLineType.forEach((account) => {\r\n                if (account.accountLineTypeCode === 'L' || account.accountLineTypeCode == 'B') {\r\n                    this.filteredAccountLineTypeForMtm.push(account);\r\n                }\r\n            });\r\n        }\r\n        this.filteredNominalAccountList = this.masterdata.nominalAccounts;\r\n        this.init();\r\n        this.transactionDocumentDataLoader.getData().subscribe((documents) => {\r\n            this.filteredDocuments = documents;\r\n        });\r\n        const filterList: ListAndSearchFilter[] = [];\r\n        this.tradeDataLoader.getData(filterList).subscribe((trade) => {\r\n            this.filteredContracts = trade.value;\r\n        });\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.filteredCharter = charter;\r\n        });\r\n        this.fxDealLoader.getData(filterList).subscribe((fxDeal) => {\r\n            this.filteredFxDeals = fxDeal.value;\r\n        });\r\n        this.subscriptions.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n                this.operationsLastMonthClosed = new Date(new\r\n                    Date(this.accountingSetupModel.lastMonthClosedForOperation).toDateString());\r\n                this.lastMonthClosed = new Date(new\r\n                    Date(this.accountingSetupModel.lastMonthClosed).toDateString());\r\n                this.monthNameForlastMonthClosed = this.monthNames[this.lastMonthClosed.getMonth()];\r\n                this.monthNameForoperationsLastMonthClosed = this.monthNames[this.operationsLastMonthClosed.getMonth()];\r\n            }));\r\n        this.initView();\r\n        this.disableControls();\r\n        this.getFormGroup();\r\n        this.setValidators();\r\n        });\r\n    }\r\n\r\n    init() {\r\n        this.accountingDocumentGridContextualMenuActions = [{\r\n            icon: 'import_export',\r\n            text: 'Export',\r\n            action: this.accountingDocumentMenuActions.exportDocument,\r\n        },\r\n        ];\r\n        this.editAccountingDocumentGridContextualMenuActions = [\r\n            {\r\n                icon: 'content_copy',\r\n                text: 'Copy Line',\r\n                action: this.editDocumentMenuActions.copyDocumentLine,\r\n            },\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete Line',\r\n                action: this.editDocumentMenuActions.deleteDocumentLine,\r\n            },\r\n        ];\r\n\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.editDocumentFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    processCellForClipboard(params) {\r\n        if (!params.value || !params.column.colDef.cellRendererParams) {\r\n            return params.value;\r\n        }\r\n        let value = params.value;\r\n        const cellRenderedParams = params.column.colDef.cellRendererParams(null);\r\n        const object = cellRenderedParams.valueProperty ? cellRenderedParams.options\r\n            .find((option) => option[cellRenderedParams.valueProperty] === value) : null;\r\n        value = typeof value !== 'string' && cellRenderedParams.displayProperty ? value[cellRenderedParams.displayProperty] : value;\r\n        if (object && cellRenderedParams.displayCode && cellRenderedParams.codeProperty) {\r\n            return object[cellRenderedParams.codeProperty];\r\n        }\r\n        return cellRenderedParams.displayProperty && object ? object[cellRenderedParams.displayProperty] : value;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.editDocumentFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    disableControls() {\r\n        this.currencyCtrl.disable();\r\n        this.docDateFormCtrl.disable();\r\n        //this.valueDateFormCtrl.disable();\r\n        this.accPeriodFormCtrl.disable();\r\n        this.glDateFormCtrl.disable();\r\n         if (!this.isEditable('valueDate')) \r\n        {\r\n            this.valueDateFormCtrl.disable();\r\n        }\r\n\r\n       \r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onAddOrDeleteColumn(event) {\r\n        const cols = this.columnDefs.filter((col) => col.colId === event.column.colId);\r\n        if (cols.length !== 1) { return; }\r\n        cols[0].hide = !event.visible;\r\n    }\r\n\r\n    initView() {\r\n        this.subscriptions.push(this.preaccountingService.getAccoutingDocumentData(this.accountingId).pipe(\r\n            map((data) => {\r\n                this.documentRefData = data.value.map((docRef) => {\r\n                    return new PostingManagementDisplayView(docRef);\r\n                });\r\n                this.accountingDocumentData = this.documentRefData[0];\r\n\r\n                this.isAccOrJournalType = this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.TA\r\n                    || this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.JL;\r\n                this.isAccrualDocument = this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.TA;\r\n                this.currencyControl = this.filteredCurrencyList\r\n                    .find((currency) => currency.currencyCode === this.accountingDocumentData.currencyCode);\r\n                this.isCashDocumentType = this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.CP\r\n                    || this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.CI;\r\n                this.isCashDocumentAuthorized = (this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.CP\r\n                    || this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.CI)\r\n                    && this.accountingDocumentData.statusId === PostingStatus.Authorized;\r\n                this.isInvoiceDocumentType = this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.PI\r\n                    || this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.SI\r\n                    || this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.CN\r\n                    || this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.DN;\r\n                this.isDocumentStatusHeld = this.accountingDocumentData.statusId === PostingStatus.Held;\r\n                this.isMappingErrorStatus = this.accountingDocumentData.statusId === PostingStatus.MappingError;\r\n                if (this.isMappingErrorStatus) {\r\n                    this.displayErrorMessages();\r\n                }\r\n                this.accountingDocumentLine = this.accountingDocumentData.accountingDocumentLines;\r\n                this.initializeGridColumns();\r\n                this.assignValuesToControl();\r\n                this.initializeStatusClass();\r\n                if (!this.isViewMode) {\r\n                    this.agGridColumnApi.setColumnVisible(\r\n                        this.editLineMenu,\r\n                        !this.isViewMode && this.isAccOrJournalType && !this.isAlreadyAuthorized);\r\n                    this.agGridColumnApi.setColumnVisible(this.accrualNumberColumn, this.isAccrualDocument ? true : false);\r\n                    this.agGridColumnApi.setColumnVisible(this.paymentTermColumn, this.isInvoiceDocumentType ? true : false);\r\n                    this.agGridColumnApi.setColumnVisible(this.vatIdColumn, this.isInvoiceDocumentType ? true : false);\r\n                    this.agGridColumnApi.setColumnVisible(this.statutoryCurrencyColumn, this.isDocumentStatusHeld ? true : false);\r\n                    this.agGridColumnApi.setColumnVisible(this.functionalCurrencyColumn, this.isDocumentStatusHeld ? true : false);\r\n                    this.agGridColumnApi.setColumnVisible(this.dealNumberColumn, false);\r\n                    this.agGridColumnApi.setColumnVisible(this.settlementCurrencyColumn, false);\r\n                    this.agGridColumnApi.setColumnVisible(this.provinceColumn, false);\r\n                }\r\n\r\n                if (this.documentRefData[0].taTypeId === 3 && this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.TA) {\r\n                    this.isMtmSelected = true;\r\n                    this.showHideMtmColumn();\r\n                }\r\n                if (!this.isViewMode) {\r\n                    if (this.accountingDocumentData.transactionDocumentTypeId == PostingDocumentType.TA) {\r\n                        this.currencyCtrl.disable();\r\n                    }\r\n                    if (this.accountingDocumentData.taTypeId == PostingDocumentTAType.MonthEndTA) {\r\n                        this.docDateFormCtrl.disable();\r\n                        this.valueDateFormCtrl.disable();\r\n                        this.accPeriodFormCtrl.disable();\r\n                        this.glDateFormCtrl.disable();\r\n                    }\r\n                    this.startLockRefresh(this.accountingId, this.docReference);\r\n                    this.titleService.setTitle(this.docReference + ' - Edit');\r\n                } else {\r\n                    this.titleService.setTitle(this.docReference + ' - View');\r\n                }\r\n            }))\r\n            .subscribe());\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.editDocumentFormGroup = this.formBuilder.group({\r\n            currencyCtrl: this.currencyCtrl,\r\n            docDateFormCtrl: this.docDateFormCtrl,\r\n            valueDateFormCtrl: this.valueDateFormCtrl,\r\n            accPeriodFormCtrl: this.accPeriodFormCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    showOrHideColum(event, col: agGrid.ColDef) {\r\n        this.isSave = true;\r\n        this.agGridColumnApi.setColumnVisible(col.colId, (col.hide || false));\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.columnDefs = [\r\n            {\r\n                headerName: 'Nominal acc.',\r\n                colId: 'accountReference',\r\n                field: 'accountReference',\r\n                onCellValueChanged: this.onNominalAccountSelected.bind(this),\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: () => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable(),\r\n                        },\r\n                        gridId: 'nominalAccountsGrid',\r\n                        options: this.filteredNominalAccountList,\r\n                        isRequired: (!this.isViewMode) ? true : false,\r\n                        displayProperty: 'accountNumber',\r\n                        valueProperty: 'accountNumber',\r\n                        lightBoxTitle: 'Results for Nominal Accounts',\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode,\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Cli. account',\r\n                colId: 'clientAccountId',\r\n                field: 'clientAccountId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                onCellValueChanged: this.onClientAccountIdSelected.bind(this),\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable(),\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.filteredCounterpartyList,\r\n                        isRequired: false,\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyID',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode,\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Associated Acc.',\r\n                colId: 'associatedAccountCode',\r\n                field: 'associatedAccountCode',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                onCellValueChanged: this.onClientAccountCodeSelected.bind(this),\r\n                cellRendererParams: () => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable() && this.isEditable('associatedAccountId'),\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.filteredCounterpartyList,\r\n                        isEditable: this.isColumnEditable() && this.isEditable('associatedAccountId'),\r\n                        isRequired: this.isRequired('associatedAccountId'),\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyCode',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode &&  this.isEditable('associatedAccountId'),\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Acc. L. Type',\r\n                colId: 'accountLineTypeId',\r\n                field: 'accountLineTypeId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable() && this.isEditable('accountLineTypeId'),\r\n                        },\r\n                        gridId: 'accountLineTypeGrid',\r\n                        options: (this.isMtmSelected) ? this.filteredAccountLineTypeForMtm : this.filteredAccountLineType,\r\n                        isEditable: this.isColumnEditable() && this.isEditable('accountLineTypeId'),\r\n                        isRequired: this.isRequired('accountLineTypeId'),\r\n                        displayProperty: 'accountLineTypeCode',\r\n                        valueProperty: 'accountLineTypeId',\r\n                        lightBoxTitle: 'Results for  Account Line Type',\r\n                        nominalAccountList: this.filteredNominalAccountList,\r\n                        filterContextualSearchFunction: this.filterAccountLineTypes.bind(this),\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode &&  this.isEditable('accountLineTypeId'),\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onAccountLineTypeSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost types',\r\n                colId: 'costTypeId',\r\n                field: 'costTypeId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable(),\r\n                        },\r\n                        gridId: 'costTypesGrid',\r\n                        isRequired: (!this.isViewMode) ? true : false,\r\n                        displayProperty: 'costTypeCode',\r\n                        valueProperty: 'costTypeId',\r\n                        lightBoxTitle: 'Results for Cost',\r\n                        options: this.filteredCostTypeList,\r\n                        nominalAccountList: this.filteredNominalAccountList,\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onCostTypeSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                colId: 'amount',\r\n                field: 'amount',\r\n                editable: this.makeColumnEditable.bind(this),\r\n                cellRenderer: this.requiredCellForCostAmount.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, true),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: this.statutoryCurrencyHeader,\r\n                colId: 'statutoryCurrency',\r\n                field: 'statutoryCurrency',\r\n                editable: this.makeColumnEditable.bind(this),\r\n                valueFormatter: this.currencyFormatterInGrid.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: this.functionalCurrencyHeader,\r\n                colId: 'functionalCurrency',\r\n                field: 'functionalCurrency',\r\n                editable: this.makeColumnEditable.bind(this),\r\n                valueFormatter: this.currencyFormatterInGrid.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                colId: 'narrative',\r\n                field: 'narrative',\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                editable: this.makeColumnEditable.bind(this) && this.isEditable('narrative'),\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                colId: 'departmentId',\r\n                field: 'departmentId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable(),\r\n                        },\r\n                        gridId: 'departmentsGrid',\r\n                        isRequired: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode,\r\n                        displayProperty: 'departmentCode',\r\n                        valueProperty: 'departmentId',\r\n                        lightBoxTitle: 'Results for Departments',\r\n                        options: this.filteredDepartmentList,\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onDepartmentSelected.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value : null;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Sec. Doc. ref',\r\n                colId: 'secondaryDocumentReference',\r\n                field: 'secondaryDocumentReference',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: () => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable(),\r\n                        },\r\n                        gridId: 'transactionDocumentGrid',\r\n                        isRequired: false,\r\n                        displayProperty: 'docRef',\r\n                        valueProperty: 'docRef',\r\n                        lightBoxTitle: 'Results for Transaction Documents',\r\n                        dataLoader: this.transactionDocumentDataLoader,\r\n                        options: this.filteredDocuments,\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onDocumentSelected.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value.docRef : null;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Ext. Doc. Ref',\r\n                colId: 'extDocReference',\r\n                field: 'extDocReference',\r\n                editable: this.makeColumnEditable.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Contract ref.',\r\n                colId: 'sectionReference',\r\n                field: 'sectionReference',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isContractRefEditable = false;\r\n                    if (params.data && (params.data.dealNumber === '' || params.data.dealNumber === null)) {\r\n                        isContractRefEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (this.isColumnEditable() && isContractRefEditable),\r\n                        },\r\n                        gridId: 'tradeList',\r\n                        isRequired: false,\r\n                        displayProperty: 'contractLabel',\r\n                        valueProperty: 'contractLabel',\r\n                        lightBoxTitle: 'Results for Contracts',\r\n                        dataLoader: this.tradeDataLoader,\r\n                        option: this.filteredContracts,\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode && isContractRefEditable,\r\n                    };\r\n                },\r\n\r\n                onCellValueChanged: this.onContractSelected.bind(this),\r\n            },\r\n\r\n            {\r\n                headerName: 'Commodity',\r\n                colId: 'commodityId',\r\n                field: 'commodityId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isCommodityEditable = false;\r\n                    if (params.data && (params.data.dealNumber === '' || params.data.dealNumber === null)) {\r\n                        isCommodityEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (this.isColumnEditable() && isCommodityEditable),\r\n                        },\r\n                        isEditable: true,\r\n                        gridId: 'commodityGrid',\r\n                        isRequiredField: false,\r\n                        displayProperty: 'commodityCode',\r\n                        valueProperty: 'commodityId',\r\n                        lightBoxTitle: 'Results for Commodities',\r\n                        options: this.filteredCommodityList,\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode && isCommodityEditable,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onCommoditySelected.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value.commodityDescription : null;\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                tooltip: (params) => {\r\n                    return this.validateQuantity(params);\r\n                },\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, true),\r\n                    isRightAligned: false,\r\n                },\r\n                editable: this.makeColumnEditable.bind(this),\r\n                valueFormatter: this.quantityFormatterInGrid.bind(this),\r\n                cellStyle: { textAlign: 'right' },\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                colId: 'charterId',\r\n                field: 'charterId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable() && this.isEditable('charterId'),\r\n                        },\r\n                        isEditable: this.isColumnEditable() && this.isEditable('charterId'),\r\n                        gridId: 'charterGrid',\r\n                        isRequired : this.isRequired('charterId'),\r\n                        isRequiredField: false,\r\n                        displayProperty: 'charterCode',\r\n                        valueProperty: 'charterId',\r\n                        lightBoxTitle: 'Results for Charters',\r\n                        dataLoader: this.charterDataLoader,\r\n                        options: this.filteredCharter,\r\n                        showContextualSearchIcon: !this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode && this.isEditable('charterId'),\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onCharterSelected.bind(this),\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value.description : null;\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: 'Cost Center',\r\n                colId: 'costCenter',\r\n                field: 'costCenter',\r\n                editable: this.makeColumnEditable.bind(this) && this.isEditable('costCenter'),\r\n                cellRenderer: this.requiredCell.bind(this),                \r\n            },\r\n            {\r\n                headerName: 'Payment terms',\r\n                colId: 'paymentTermId',\r\n                field: 'paymentTermId',\r\n                editable: this.makeColumnEditable.bind(this),\r\n                valueFormatter: this.paymentTermFormatter.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: () => {\r\n                    return {\r\n                        values: this.filtererdPaymentList.map((paymentTerm) => paymentTerm.paymentTermsId),\r\n                        displayPropertyName: 'paymentTermsCode',\r\n                        valuePropertyName: 'paymentTermsId',\r\n                        displayFormat: 'paymentTermsCode',\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Tax code',\r\n                colId: 'vatId',\r\n                field: 'vatId',\r\n                editable: this.makeColumnEditable.bind(this),\r\n                valueFormatter: this.vatCodeFormatter.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: () => {\r\n                    return {\r\n                        values: this.filteredVatsList.map((vats) => vats.vatId),\r\n                        displayPropertyName: 'vatCode',\r\n                        valuePropertyName: 'vatId',\r\n                        displayFormat: 'vatCode',\r\n                    };\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: 'Settlement Ccy.',\r\n                colId: 'settlementCurrency',\r\n                field: 'settlementCurrency',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let issettlementCurrencyEditable = false;\r\n                    if (params.data && (params.data.sectionReference === '' || params.data.sectionReference === null)) {\r\n                        issettlementCurrencyEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable() && issettlementCurrencyEditable,\r\n                        },\r\n                        gridId: 'currenciesGrid',\r\n                        isRequired: false,\r\n                        displayProperty: 'currencyCode',\r\n                        codeProperty: 'currencyCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'currencyCode',\r\n                        lightBoxTitle: 'Results for Currencies',\r\n                        options: this.filteredSettlementCurrencyList,\r\n                        showContextualSearchIcon: (!this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode && issettlementCurrencyEditable),\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onContractSelected.bind(this),\r\n\r\n            },\r\n\r\n            {\r\n                headerName: 'Province',\r\n                colId: 'provinceId',\r\n                field: 'provinceId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isColumnEditable(),\r\n                        },\r\n                        gridId: 'provincesMasterData',\r\n                        isRequired: false,\r\n                        displayProperty: 'stateCode',\r\n                        codeProperty: 'stateCode',\r\n                        descriptionProperty: 'description',\r\n                        valueProperty: 'provinceId',\r\n                        lightBoxTitle: 'Results for Provinces',\r\n                        options: this.filteredProvinceList,\r\n                        showContextualSearchIcon: (!this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode),\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onContractSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Deal No.',\r\n                colId: 'dealNumber',\r\n                field: 'dealNumber',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    let isDealNumberEditable = false;\r\n                    if (params.data && (params.data.sectionReference === '' || params.data.sectionReference === null)) {\r\n                        isDealNumberEditable = true;\r\n                    }\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: (this.isColumnEditable() && isDealNumberEditable),\r\n                        },\r\n                        gridId: 'fxDealList',\r\n                        isRequired: false,\r\n                        displayProperty: 'dealNumber',\r\n                        valueProperty: 'dealNumber',\r\n                        lightBoxTitle: 'Results for FxDeals',\r\n                        dataLoader: this.fxDealLoader,\r\n                        options: this.filteredFxDeals,\r\n                        showContextualSearchIcon: (!this.isCashDocumentType && !this.isAlreadyAuthorized\r\n                            && !this.isInvoiceDocumentType && !this.isViewMode && isDealNumberEditable),\r\n                    };\r\n\r\n                },\r\n                onCellValueChanged: this.onContractSelected.bind(this),\r\n\r\n            },\r\n            {\r\n                colId: 'accrualNumber',\r\n                field: 'accrualNumber',\r\n                editable: false,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: AllNumberMask(),\r\n                },\r\n                headerComponentFramework: AgGridAccrualNumberComponent,\r\n                headerComponentParams: {\r\n                    headerName: 'Accrual n°',\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: '',\r\n                colId: 'editLineMenu',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    menuActions: this.editAccountingDocumentGridContextualMenuActions,\r\n\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 60,\r\n            },\r\n        ];\r\n        this.rowStyle = { 'border-bottom': '1px solid #e0e0e0 !important' };\r\n    }\r\n\r\n    quantityFormatterInGrid(param) {\r\n        if (param && param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 3);\r\n        }\r\n    }\r\n\r\n    formatValue(amount: number): string {\r\n        if (isNaN(amount) || amount === null) { return ''; }\r\n        return new Intl.NumberFormat(this.amountFormat, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(amount);\r\n    }\r\n\r\n    assignValuesToControl() {\r\n        this.amount = 0;\r\n        this.statutoryAmount = 0;\r\n        this.functionalAmount = 0;\r\n        this.errorMessage = this.accountingDocumentData.errorMessage;\r\n        if (!this.errorMessage) {\r\n            this.showErrorMessage = false;\r\n        } else {\r\n            this.errormsg = 'mat-error-message-chip';\r\n        }\r\n        this.docReference = this.accountingDocumentData.documentReference;\r\n        this.docStatus = PostingStatus[this.accountingDocumentData.statusId];\r\n        this.createdBy = this.accountingDocumentData.createdBy;\r\n        this.creationDate = this.accountingDocumentData.createdDateTime ? this.accountingDocumentData.createdDateTime.toDateString() : '';\r\n        this.modifiedBy = this.accountingDocumentData.modifiedBy;\r\n        this.modifiedDate = this.accountingDocumentData.modifiedDateTime ? this.accountingDocumentData.modifiedDateTime.toDateString() : '';\r\n        this.docDateFormCtrl.patchValue(this.accountingDocumentData.documentDate);\r\n        this.valueDateFormCtrl.patchValue(this.accountingDocumentData.valueDate);\r\n        this.glDateFormCtrl.patchValue((this.isAccOrJournalType) ? null : this.accountingDocumentData.glDate);\r\n        this.accPeriodFormCtrl.patchValue(moment(this.accountingDocumentData.accountingPeriod));\r\n        this.interfaceCtrl.patchValue(this.accountingDocumentData.toInterface);\r\n        this.currencyCtrl.patchValue(this.currencyControl);\r\n        if (!this.isCashDocumentType && !this.isAlreadyAuthorized && !this.isInvoiceDocumentType && !this.isViewMode) {\r\n            this.currencyCtrl.enable();\r\n        } else {\r\n            this.currencyCtrl.disable();\r\n        }\r\n        this.accountingDocumentData.accountingDocumentLines.forEach((rowData) => {\r\n            this.amount = Math.round((this.amount + Number(rowData.amount)) * 100) / 100;\r\n\r\n            if (this.isDocumentStatusHeld) {\r\n                this.statutoryAmount = Math.round((this.statutoryAmount + Number(rowData.statutoryCurrency)) * 100) / 100;\r\n            }\r\n            if (this.isDocumentStatusHeld) {\r\n                this.functionalAmount = Math.round((this.functionalAmount + Number(rowData.functionalCurrency)) * 100) / 100;\r\n            }\r\n        });\r\n        this.isAlreadyAuthorized = this.accountingDocumentData.statusId === PostingStatus.Authorized ? true : false;\r\n    }\r\n\r\n    validateQuantity(params): string {\r\n        let tooltipMessage: string = null;\r\n        const reg = new RegExp('^[0-9.]*$');\r\n        const validQuantity = String(params.value).match(reg);\r\n        if (params.colDef) {\r\n            if (!validQuantity) {\r\n                tooltipMessage = 'Not allowed. Only numeric values allowed';\r\n                params.data.isQuantityValid = false;\r\n            } else {\r\n                tooltipMessage = null;\r\n                params.data.isQuantityValid = true;\r\n            }\r\n        }\r\n        return tooltipMessage;\r\n    }\r\n\r\n    validateTaxCode(params): string {\r\n        let tooltipMessage: string = null;\r\n\r\n        if (params.colDef) {\r\n            if (params.data.accountingCategory === this.counterPartyAccountingCategory) {\r\n                tooltipMessage = 'Tax code could not be added on a counterparty leg';\r\n                params.data.isTaxCodeValid = false;\r\n            } else {\r\n                tooltipMessage = null;\r\n                params.data.isTaxCodeValid = true;\r\n            }\r\n        }\r\n        return tooltipMessage;\r\n    }\r\n\r\n    onEditClicked() {\r\n        this.lockService.isLockedAccountingDocument(this.accountingId)\r\n            .pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                if (lock.isLocked) {\r\n                    this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Lock',\r\n                            text: lock.message,\r\n                            okButton: 'Got it',\r\n                        },\r\n                    });\r\n                } else {\r\n                    this.lockService.lockAccountingDocument(this.accountingId, LockFunctionalContext.AccountingDocumentEdition)\r\n                        .pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n\r\n                            this.isSave = true;\r\n                            this.isViewMode = false;\r\n                            if (!this.isCashDocumentType && !this.isAlreadyAuthorized && !this.isInvoiceDocumentType && !this.isViewMode) {\r\n                                this.enableControls();\r\n                            }\r\n                            this.init();\r\n                            this.initView();\r\n                            this.agGridApi.refreshCells();\r\n                        });\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    startLockRefresh(accountingId: number, documentReference: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Accounting Document';\r\n        resourceInformation.resourceId = accountingId;\r\n        resourceInformation.resourceCode = documentReference;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    enableControls() {\r\n        if (this.isEditable('valueDate')) \r\n        {\r\n            this.valueDateFormCtrl.enable();\r\n        }        \r\n        this.currencyCtrl.enable();\r\n        this.docDateFormCtrl.enable();        \r\n        this.accPeriodFormCtrl.enable();\r\n        this.glDateFormCtrl.enable();\r\n    }\r\n\r\n    makeColumnEditable(params): boolean {\r\n        if (this.isColumnEditable()) {\r\n            params.data.isEditable = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isColumnEditable() {\r\n        if (this.isViewMode === false && !this.isCashDocumentType && !this.isAlreadyAuthorized && !this.isInvoiceDocumentType && this.accountingDocumentData.taTypeId !== PostingDocumentTAType.MonthEndTA) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    vatCodeFormatter(params): string {\r\n        if (params.value && this.masterdata.vats) {\r\n            const vatList = this.masterdata.vats.find((x) => x.vatId === params.value);\r\n            if (vatList) {\r\n                return vatList.vatCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    paymentTermFormatter(params): string {\r\n        if (params.value && this.masterdata.paymentTerms) {\r\n            const paymentTermsList = this.masterdata.paymentTerms.find((x) => x.paymentTermsId === params.value);\r\n            if (paymentTermsList) {\r\n                return paymentTermsList.paymentTermCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    currencyFormatter(amount: number): string {\r\n        if (amount === null) { return ''; }\r\n        return new Intl.NumberFormat(this.amountFormat, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(amount);\r\n    }\r\n\r\n    currencyFormatterInGrid(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.amountFormat, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(param.value);\r\n    }\r\n\r\n    getValuesforControls() {\r\n        this.accountingDocumentData.documentDate = this.docDateFormCtrl.value;\r\n        this.accountingDocumentData.valueDate = this.valueDateFormCtrl.value;\r\n        if (this.glDateFormCtrl.value) {\r\n            this.accountingDocumentData.glDate = this.glDateFormCtrl.value;\r\n        }\r\n        this.accountingDocumentData.accountingPeriod = this.accPeriodFormCtrl.value;\r\n        this.accountingDocumentData.currencyCode = this.currencyCtrl.value.currencyCode;\r\n        this.accountingDocumentData.toInterface = this.interfaceCtrl.value;\r\n    }\r\n\r\n    onActionButtonClicked() {\r\n        this.agGridOptions.api.forEachNode((node) => {\r\n\r\n            if (this.masterdata.departments && node.data.departmentId) {\r\n                const departement = this.masterdata.departments.find((dept) =>\r\n                    dept.departmentId === node.data.departmentId);\r\n                node.data.departmentId = departement ? departement.description : null;\r\n            }\r\n            if (this.masterdata.costTypes && node.data.costTypeId) {\r\n                const costType = this.masterdata.costTypes.find((cost) =>\r\n                    cost.costTypeId === node.data.costTypeId);\r\n                node.data.costTypeId = costType ? costType.costTypeCode : null;\r\n            }\r\n            if (this.masterdata.vats && node.data.vatId) {\r\n                const vatSelected = this.masterdata.vats.find((vat) =>\r\n                    vat.vatId === node.data.vatId);\r\n                node.data.vatId = vatSelected ? vatSelected.vatCode : null;\r\n            }\r\n            if (this.masterdata.commodities && node.data.commodityId) {\r\n                const commoditySelected = this.masterdata.commodities.find((commodity) =>\r\n                    commodity.commodityId === node.data.commodityId);\r\n                node.data.commodityId = commoditySelected ? commoditySelected.commodityCode : null;\r\n            }\r\n            if (this.masterdata.paymentTerms && node.data.paymentTermsId) {\r\n                const paymentTermSelected = this.masterdata.paymentTerms.find((paymentTerm) =>\r\n                    paymentTerm.paymentTermsId === node.data.paymentTermsId);\r\n                node.data.paymentTermsId = paymentTermSelected ? paymentTermSelected.paymentTermCode : null;\r\n            }\r\n\r\n        });\r\n\r\n        const params = {\r\n            sheetName: this.excelSheetName,\r\n        };\r\n\r\n        this.agGridOptions.api.exportDataAsExcel(params);\r\n    }\r\n\r\n    onDeleteClicked() {\r\n        this.isSave = true;\r\n        if (this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.TA ||\r\n            this.accountingDocumentData.transactionDocumentTypeId === PostingDocumentType.JL) {\r\n            const confirmDialog = this.deleteConfirmationDialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Accounting Document Deletion',\r\n                    text: 'You are about to delete the document. This action is irreversible. Continue ?',\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    const accountingDocumentStatusToDeleted: AccountingDocumentStatusToDeletedCommand\r\n                        = new AccountingDocumentStatusToDeletedCommand();\r\n                    const accountingDocuments: AccountingDocumentStatus[] = [];\r\n                    const accountingDocumentElement: AccountingDocumentStatus = new AccountingDocumentStatus();\r\n                    accountingDocumentElement.accountingId = this.accountingDocumentData.accountingId;\r\n                    accountingDocumentElement.documentType = this.accountingDocumentData.transactionDocumentTypeId;\r\n                    accountingDocumentElement.statusId = this.accountingDocumentData.statusId;\r\n                    accountingDocuments.push(accountingDocumentElement);\r\n                    accountingDocumentStatusToDeleted.accountingDocuments = accountingDocuments;\r\n                    this.preaccountingService.deleteAccountingDocument(accountingDocumentStatusToDeleted).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Accounting document deleted successfully');\r\n\r\n                    });\r\n\r\n                    this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/posting/management']);\r\n                } else {\r\n                    confirmDialog.close();\r\n\r\n                }\r\n            });\r\n\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Not allowed. Invoices/cash cannot be deleted');\r\n        }\r\n    }\r\n\r\n    toggleAuthorizeButton() {\r\n        this.isAuthorizedControlenabled = !this.isAuthorizedControlenabled;\r\n    }\r\n\r\n    onToInterfaceButtonClicked() {\r\n        this.isToInterfaceControlenabled = this.interfaceCtrl.value ? true : false;\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.isSave = true;\r\n        if (!this.isViewMode) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Discard Changes',\r\n                    text: 'You have some modification pending. Close and lose changes?',\r\n                    okButton: 'Ok',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/posting/management']);\r\n                }\r\n            });\r\n        } else {\r\n            this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/posting/management']);\r\n        }\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if ((!params.value || params.value === '') && !this.isViewMode && this.isAccOrJournalType) {\r\n\r\n            if (params.colDef.colId === 'narrative' || params.colDef.colId ==='costCenter' ) {\r\n                if (this.isRequired(params.colDef.colId)) {\r\n                    return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n                }\r\n            } else {\r\n                return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n            }\r\n        }\r\n        if (params.colDef.colId === 'accountLineTypeId') {\r\n            if (params.value && typeof params.value !== 'string') {\r\n                const value: AccountLineType = this.filteredAccountLineType.find(\r\n                    (accountLine) => accountLine.accountLineTypeId === params.value);\r\n                params.setValue(value ? value.accountLineTypeCode : null);\r\n            }\r\n            return params.value;\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    requiredCellForCostAmount(params) {\r\n        if ((!params.value || params.value === '') && !this.isViewMode && this.isAccOrJournalType) {\r\n            return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n        }\r\n        if (params.colDef.colId === 'accountLineTypeId') {\r\n            if (params.value && typeof params.value !== 'string') {\r\n                const value: AccountLineType = this.filteredAccountLineType.find(\r\n                    (accountLine) => accountLine.accountLineTypeId === params.value);\r\n                params.setValue(value ? value.accountLineTypeCode : null);\r\n            }\r\n            return params.value;\r\n        }\r\n        params.value = (this.decimalFormatter(\r\n            params.value,\r\n            this.decimalOptionValue,\r\n            this.amountFormat));\r\n        return params.value;\r\n    }\r\n\r\n    decimalFormatter(input, decimaloption: number, format: string) {\r\n        const formattedInput = new Intl.NumberFormat(format, { minimumFractionDigits: 2, maximumFractionDigits: decimaloption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    onContractSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            const selectedNominalAccount = this.filteredContracts.find(\r\n                (contract) => contract.contractLabel.toUpperCase() === params.newValue.toUpperCase(),\r\n            );\r\n            if (selectedNominalAccount) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Contract reference does not exist');\r\n                params.node.setDataValue('sectionId', '');\r\n            } else {\r\n                params.node.setDataValue('departmentId', selectedNominalAccount.departmentDescription);\r\n                params.node.setDataValue('commodityId', selectedNominalAccount.commodity1);\r\n                params.node.setDataValue('charterId', selectedNominalAccount.charterReference);\r\n            }\r\n        }\r\n    }\r\n\r\n    onNominalAccountSelected(params) {\r\n        if (params.newValue === '' || (params.newValue && params.oldValue !== params.newValue)) {\r\n            this.nominalAccountFound = null;\r\n            const nominalAccountSelected = this.filteredNominalAccountList.find(\r\n                (nominalAccount) => nominalAccount.accountNumber.toUpperCase() === params.newValue.toUpperCase(),\r\n            );\r\n            if (nominalAccountSelected) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Nominal Account does not exist');\r\n                params.node.setDataValue('accountReference', this.requiredString);\r\n                this.nominalAccountFound = null;\r\n            } else {\r\n                this.nominalAccountFound = nominalAccountSelected;\r\n            }\r\n        }\r\n        if (!this.isViewMode && this.isMtmSelected && params.data.accountReference) {\r\n            const nominalAccountSelected = this.filteredNominalAccountList.find(\r\n                (nominalAccount) => nominalAccount.accountNumber\r\n                    === params.data.accountReference);\r\n            if (nominalAccountSelected) {\r\n                if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n                    params.node.setDataValue('accountLineTypeId', AccountLineTypes.Bank);\r\n                } else {\r\n                    params.node.setDataValue('accountLineTypeId', AccountLineTypes.Ledger);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onClientAccountCodeSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue !== this.requiredString) {\r\n            const selectedClientAccount = this.filteredCounterpartyList.filter(\r\n                (clientAccount) => clientAccount.counterpartyCode.toUpperCase() === params.newValue.toUpperCase(),\r\n            );\r\n            if (selectedClientAccount.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : ' + params.colDef.headerName + ' does not exist');\r\n                params.node.setDataValue('associatedAccountCode', '');\r\n            }\r\n        }\r\n    }\r\n\r\n    onClientAccountIdSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue !== this.requiredString) {\r\n            const selectedClientAccount = this.filteredCounterpartyList.filter(\r\n                (clientAccount) => clientAccount.counterpartyID === params.newValue,\r\n            );\r\n            if (selectedClientAccount.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : ' + params.colDef.headerName + ' does not exist');\r\n                params.node.setDataValue('clientAccountId', params.oldValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    onCostTypeSelected(params) {\r\n        if (params.newValue === '' || (params.newValue && params.oldValue !== params.newValue)) {\r\n            const selectedCostType = this.filteredCostTypeList.filter(\r\n                (costType) => costType.costTypeId === params.newValue,\r\n            );\r\n            if (selectedCostType.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Cost Type does not exist');\r\n                params.node.setDataValue('costTypeId', this.requiredString);\r\n            }\r\n        }\r\n    }\r\n\r\n    onAccountLineTypeSelected(params) {\r\n        if (params.newValue === '' || (params.newValue && params.oldValue !== params.newValue)) {\r\n            const selectedAccountLineType = this.filteredAccountLineType.filter(\r\n                (accountLineType) => accountLineType.accountLineTypeId === params.newValue,\r\n            );\r\n            if (selectedAccountLineType.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Account Line Type does not exist');\r\n                params.node.setDataValue('accountLineTypeId', this.requiredString);\r\n            }\r\n        }\r\n    }\r\n    onDepartmentSelected(params) {\r\n        if (params.newValue === '' || (params.newValue && params.oldValue !== params.newValue)) {\r\n            const selectedDepartment = this.filteredDepartmentList.filter(\r\n                (department) => department.departmentId === params.newValue,\r\n            );\r\n            if (selectedDepartment.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Department does not exist');\r\n                params.node.setDataValue('departmentId', this.requiredString);\r\n            }\r\n        }\r\n    }\r\n\r\n    onCommoditySelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            const selectedCommodity = this.filteredCommodityList.filter(\r\n                (commodity) => commodity.commodityId === params.newValue,\r\n            );\r\n            if (selectedCommodity.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Commodity does not exist');\r\n                params.node.setDataValue('commodityId', null);\r\n            }\r\n        }\r\n    }\r\n\r\n    onCharterSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            const selectedCharter = this.filteredCharter.filter(\r\n                (charter) => charter.charterId === params.newValue,\r\n            );\r\n            if (selectedCharter.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Charter does not exist');\r\n                params.node.setDataValue('charterId', null);\r\n            }\r\n        }\r\n    }\r\n\r\n    onDocumentSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            const selectedNominalAccount = this.filteredDocuments.filter(\r\n                (document) => document.docRef.toUpperCase() === params.newValue.toUpperCase(),\r\n            );\r\n            if (selectedNominalAccount.length === 0) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Document reference does not exist');\r\n                params.node.setDataValue('SecondaryDocumentReference', '');\r\n            }\r\n        }\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        this.amount = 0;\r\n        this.statutoryAmount = 0;\r\n        this.functionalAmount = 0;\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n            if (params.colDef) {\r\n                const columnChanged: string = params.colDef.field;\r\n                if (columnChanged === this.amountColumn || columnChanged === this.statutoryCurrencyColumn\r\n                    || columnChanged === this.functionalCurrencyColumn) {\r\n                    this.amount = 0;\r\n\r\n                    this.agGridApi.forEachNode((rownode) => {\r\n                        if (rownode.data.amount === 0) {\r\n                            rownode.data.amount = null;\r\n                        }\r\n                        if (rownode.data.amount || rownode.data.statutoryCurrency || rownode.data.functionalCurrency) {\r\n                            this.amount = Math.round((this.amount + Number(rownode.data.amount)) * 100) / 100;\r\n                            if (this.isDocumentStatusHeld) {\r\n                                this.functionalAmount = Math.round(\r\n                                    (this.functionalAmount + Number(rownode.data.functionalCurrency)) * 100) / 100;\r\n                                this.statutoryAmount = Math.round(\r\n                                    (this.statutoryAmount + Number(rownode.data.statutoryCurrency)) * 100) / 100;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (Number(params.newValue) === 0) {\r\n                        this.snackbarService.throwErrorSnackBar(params.colDef.headerName + ' cannot be zero');\r\n                    }\r\n                } else if (columnChanged === this.nominalAccount) {\r\n                    if (this.nominalAccountFound && this.nominalAccountFound.clientAccountMandatory === 1) {\r\n                        if (params.data && !params.data.clientAccountId) {\r\n                            params.node.setDataValue('clientAccountId', this.requiredString);\r\n                        }\r\n                    }\r\n                }\r\n                if (this.amount !== 0) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed : Sum of amount should be zero');\r\n                }\r\n                if (this.statutoryAmount !== 0) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed : Sum of Statutory currency should be zero');\r\n                }\r\n                if (this.functionalAmount !== 0) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed : Sum of Functional Currency should be zero');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isRowDirty(rowData) {\r\n        let isRowDataValid: boolean = false;\r\n        this.columnDefs.forEach((column) => {\r\n            if (!isRowDataValid) {\r\n                isRowDataValid = this.validateEmpty(column.colId, rowData);\r\n            }\r\n        });\r\n        return isRowDataValid;\r\n    }\r\n\r\n    getRequiredColumn() {\r\n        let item = [];\r\n        item = this.accountCreationConfiguration.filter((x) => x.isMandatory);\r\n        return item;\r\n    }\r\n\r\n\r\n    validateGridData(): string {\r\n        let errorMessage: string = '';\r\n        let isRowDataValid: boolean;\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty || this.isRowDirty(rowData)) {\r\n                isRowDataValid = false;\r\n                if (!rowData.data[this.accountingDocumentId]) {\r\n                    isRowDataValid = true;\r\n                    let addNewRowCheck: boolean = true;\r\n                    let columnConfiguration = this.getRequiredColumn();\r\n                    columnConfiguration.forEach((column) => {\r\n                        if (isRowDataValid) {\r\n                            let isValidateEmpty: boolean = false;\r\n                            isValidateEmpty = this.validateEmpty(column.id, rowData);\r\n                            if (!isValidateEmpty) {\r\n                                addNewRowCheck = isValidateEmpty;\r\n                            }\r\n                            isRowDataValid = isValidateEmpty;\r\n                        }\r\n                    });\r\n                    isRowDataValid = !addNewRowCheck;\r\n                } else {\r\n                    let columnConfiguration = this.getRequiredColumn();\r\n                    columnConfiguration.forEach((column) => {\r\n                        if (!isRowDataValid) {\r\n                            isRowDataValid = this.validateEmpty(column.id, rowData);\r\n                        }\r\n                    });\r\n                }\r\n                                    \r\n                if ((this.isAccrualDocument || this.isMtmSelected) && (!rowData.data.accrualNumber)) \r\n                {\r\n                    errorMessage = 'Accrual numbers are mandatory';\r\n                } else if (this.amount !== 0) {\r\n                    errorMessage = 'Total Amount should be zero';\r\n                } else if (this.statutoryAmount !== 0) {\r\n                    errorMessage = 'Total Statutory Currency should be zero';\r\n                } else if (this.functionalAmount !== 0) {\r\n                    errorMessage = 'Total Functional Currency should be zero';\r\n                }\r\n                else if (isRowDataValid)\r\n                {\r\n                    errorMessage = 'Grid data is invalid. Please resolve the errors.';\r\n                }\r\n            }\r\n        });\r\n        return errorMessage;\r\n    }\r\n\r\n    getGridData(): AccountingDocumentLine[] {\r\n        const accountingDocumentLines = new Array<AccountingDocumentLine>();\r\n        let isRowDataValid: boolean;\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty || this.isRowDirty(rowData)) {\r\n                isRowDataValid = false;\r\n                if (!rowData.data[this.accountingDocumentId]) {\r\n                    isRowDataValid = true;\r\n                    let addNewRowCheck: boolean = true; \r\n                    let columnConfiguration = this.getRequiredColumn();\r\n                    columnConfiguration.forEach((column) => {\r\n                        if (isRowDataValid) {\r\n                            let isValidateEmpty: boolean = false;\r\n                            isValidateEmpty = this.validateEmpty(column.id, rowData);\r\n                            if (!isValidateEmpty) {\r\n                                addNewRowCheck = isValidateEmpty;\r\n                            }\r\n                            isRowDataValid = isValidateEmpty;\r\n                        }\r\n                    });\r\n                    isRowDataValid = !addNewRowCheck;\r\n                } else {\r\n                    let columnConfiguration = this.getRequiredColumn();\r\n                    columnConfiguration.forEach((column) => {\r\n                        if (!isRowDataValid) {\r\n                            isRowDataValid = this.validateEmpty(column.id, rowData);\r\n                        }\r\n                    });\r\n                }\r\n                if (isRowDataValid) {\r\n                    const accountingDocumentLineElement = new AccountingDocumentLine();\r\n                    accountingDocumentLineElement.accountingDocumentLineId = rowData.data.accountingDocumentLineId;\r\n                    accountingDocumentLineElement.accountReferenceId = null;\r\n                    if (rowData.data.accountReference) {\r\n                        const account = this.filteredNominalAccountList.find((nominal) =>\r\n                            nominal.accountNumber.toUpperCase() === rowData.data.accountReference.toUpperCase());\r\n                        accountingDocumentLineElement.accountReferenceId = account ? account.nominalAccountId : null;\r\n                    }\r\n\r\n                    accountingDocumentLineElement.clientAccountId = rowData.data.clientAccountId;\r\n\r\n                    accountingDocumentLineElement.associatedAccountId = null;\r\n                    if (rowData.data.associatedAccountCode) {\r\n                        const counterparty: Counterparty = this.filteredCounterpartyList.find((client) =>\r\n                            client.counterpartyCode.toUpperCase() === rowData.data.associatedAccountCode.toUpperCase());\r\n                        accountingDocumentLineElement.associatedAccountId = counterparty ? counterparty.counterpartyID : null;\r\n                    }\r\n\r\n                    accountingDocumentLineElement.accountLineTypeId = rowData.data.accountLineTypeId;\r\n                    accountingDocumentLineElement.costTypeId = rowData.data.costTypeId;\r\n                    accountingDocumentLineElement.amount = rowData.data.amount;\r\n                    accountingDocumentLineElement.statutoryCurrency = rowData.data.statutoryCurrency;\r\n                    accountingDocumentLineElement.functionalCurrency = rowData.data.functionalCurrency;\r\n                    accountingDocumentLineElement.narrative = rowData.data.narrative;\r\n                    accountingDocumentLineElement.departmentId = rowData.data.departmentId;\r\n                    accountingDocumentLineElement.provinceId = rowData.data.provinceId;\r\n                    accountingDocumentLineElement.settlementCurrency = rowData.data.settlementCurrency;\r\n                    accountingDocumentLineElement.dealNumber = rowData.data.dealNumber;\r\n                    accountingDocumentLineElement.secondaryDocumentReference = rowData.data.secondaryDocumentReference;\r\n                    accountingDocumentLineElement.clientReference = rowData.data.extDocReference;\r\n\r\n                    if (typeof rowData.data.sectionReference === 'number') {\r\n                        accountingDocumentLineElement.sectionId = rowData.data.sectionId;\r\n                    } else {\r\n                        accountingDocumentLineElement.sectionId = (rowData.data.sectionReference === null ||\r\n                            rowData.data.sectionReference.trim() === '') ? null :\r\n                            this.filteredContracts.find((contract) =>\r\n                                contract.contractLabel.toUpperCase() === rowData.data.sectionReference.toUpperCase()).sectionId;\r\n                    }\r\n\r\n                    accountingDocumentLineElement.commodityId = rowData.data.commodityId;\r\n                    accountingDocumentLineElement.quantity = rowData.data.quantity;\r\n                    accountingDocumentLineElement.charterId = rowData.data.charterId;\r\n                    accountingDocumentLineElement.costCenter = rowData.data.costCenter;\r\n                    accountingDocumentLineElement.paymentTermId = rowData.data.paymentTermId;\r\n                    accountingDocumentLineElement.vatId = rowData.data.vatId;\r\n                    accountingDocumentLineElement.accrualNumber = rowData.data.accrualNumber;\r\n                    accountingDocumentLineElement.journalLineId = rowData.data.journalLineId;\r\n\r\n                    accountingDocumentLines.push(accountingDocumentLineElement);\r\n                } else {\r\n                    this.agGridApi.updateRowData({ remove: [rowData.data] });\r\n                }\r\n            } else {\r\n                this.agGridApi.updateRowData({ remove: [rowData.data] });\r\n            }\r\n        },\r\n        );\r\n        return accountingDocumentLines;\r\n    }\r\n\r\n    isRequired(params: string): boolean {\r\n        if (this.accountCreationConfiguration.length > 0) {            \r\n            const result = this.accountCreationConfiguration[this.accountCreationConfiguration.findIndex((x) => x.id === params)];\r\n            if(result)\r\n            {\r\n                return result.isMandatory;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isEditable(params: string): boolean {\r\n        if (this.accountCreationConfiguration.length > 0) {            \r\n            const result = this.accountCreationConfiguration[this.accountCreationConfiguration.findIndex((x) => x.id === params)];\r\n            if(result)\r\n            {\r\n                return result.isEditable;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    setValidators() {\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.currencyCtrl.setValidators(Validators.compose([Validators.required]));\r\n        this.accPeriodFormCtrl.setValidators(Validators.compose([Validators.required]));\r\n        this.docDateFormCtrl.setValidators(Validators.compose([Validators.required]));        \r\n       \r\n        if (this.isRequired('valueDate')) \r\n        {\r\n            this.valueDateFormCtrl.setValidators(Validators.compose([Validators.required]));\r\n        }\r\n\r\n       \r\n    }\r\n    isValueDateBeforeDocumentDate() {\r\n        const result = isDateTwoBeforeDateOne(this.docDateFormCtrl.value, this.valueDateFormCtrl.value);\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    accountPeriodChanged(event) {\r\n        const lastDateOfMonth = this.companyManager.getCurrentCompanyDate();\r\n        // Acounting Period Rules for Regular Journal\r\n        if (!this.isAccrualDocument) {\r\n            if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                if ((event.year() === this.lastMonthClosed.getFullYear() && event.month() <= this.lastMonthClosed.getMonth())\r\n                    || (event.year() < this.lastMonthClosed.getFullYear())) {\r\n                    this.snackbarService.informationSnackBar('Not allowed: Last closed accounting period is ' +\r\n                        this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                        this.monthNameForoperationsLastMonthClosed + '; please check the accounting period');\r\n                    this.accPeriodFormCtrl.patchValue('');\r\n                } else if (event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                    event.month() === this.operationsLastMonthClosed.getMonth()) {\r\n                    this.snackbarService.informationSnackBar('Please check document date and accounting period');\r\n                } else if ((!this.checkIfBetweenLastClosedAndOperations(event)) &&\r\n                    (event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                        event.month() < this.operationsLastMonthClosed.getMonth())) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                        this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                        this.monthNameForoperationsLastMonthClosed\r\n                        + '; The document date and the accounting period must be in an open month');\r\n                    this.accPeriodFormCtrl.patchValue('');\r\n                }\r\n            } else {\r\n                if ((event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                    event.month() === this.operationsLastMonthClosed.getMonth()) ||\r\n                    (event.year() === this.lastMonthClosed.getFullYear() && event.month() <= this.lastMonthClosed.getMonth())\r\n                    || (event.year() < this.lastMonthClosed.getFullYear())) {\r\n                    this.snackbarService.informationSnackBar('Not allowed: Last closed accounting period is ' +\r\n                        this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                        this.monthNameForoperationsLastMonthClosed + '; please check the accounting period');\r\n                    this.accPeriodFormCtrl.patchValue('');\r\n                } else if ((!this.checkIfBetweenLastClosedAndOperations(event)) &&\r\n                    (event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                        event.month() < this.operationsLastMonthClosed.getMonth())) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                        this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                        this.monthNameForoperationsLastMonthClosed\r\n                        + '; The document date and the accounting period must be in an open month');\r\n                    this.accPeriodFormCtrl.patchValue('');\r\n                }\r\n            } // Acounting Period Rules for Accrual\r\n        } else {\r\n            const isLessOrEqualToLastMonthClosed = (event.year() === this.lastMonthClosed.getFullYear()\r\n                && event.month() <= this.lastMonthClosed.getMonth())\r\n                || event.year() < this.lastMonthClosed.getFullYear();\r\n            if (isLessOrEqualToLastMonthClosed) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n                this.accPeriodFormCtrl.patchValue('');\r\n            } else {\r\n                if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                    if (!((event.year() === lastDateOfMonth.year() && event.month() === lastDateOfMonth.month()) ||\r\n                        (event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                            event.month() === this.operationsLastMonthClosed.getMonth()) ||\r\n                        (this.checkIfBetweenLastClosedAndOperations(event)))) {\r\n                        this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                            this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                            this.monthNameForoperationsLastMonthClosed\r\n                            + '; The document date and the accounting period must be in an open month');\r\n                        this.accPeriodFormCtrl.patchValue('');\r\n                    }\r\n                } else if (!(this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) &&\r\n                    event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                    event.month() === this.operationsLastMonthClosed.getMonth() ||\r\n                    (event.year() === this.lastMonthClosed.getFullYear() && event.month() <= this.lastMonthClosed.getMonth())\r\n                    || (event.year() < this.lastMonthClosed.getFullYear())) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                        this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                        this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n                    this.accPeriodFormCtrl.patchValue('');\r\n                } else if (!this.checkIfBetweenLastClosedAndOperations(event) &&\r\n                    (event.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                        event.month() < this.operationsLastMonthClosed.getMonth())) {\r\n                    this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                        this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                        this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n                    this.accPeriodFormCtrl.patchValue('');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto): boolean {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel === userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    checkIfBetweenLastClosedAndOperations(date: _moment.Moment): boolean {\r\n        let matchingMonthFound: boolean = false;\r\n        for (let i = 1; i <= this.accountingSetupModel.numberOfOpenPeriod; i++) {\r\n            if (!matchingMonthFound) {\r\n                if (date.year() === this.lastMonthClosed.getFullYear() &&\r\n                    this.lastMonthClosed.getMonth() + i < 12 && date.month() === this.lastMonthClosed.getMonth() + i) {\r\n                    matchingMonthFound = true;\r\n                } else if (date.year() === this.lastMonthClosed.getFullYear() + 1 &&\r\n                    this.lastMonthClosed.getMonth() + i >= 12 && date.month() === this.lastMonthClosed.getMonth() + i - 12) {\r\n                    matchingMonthFound = true;\r\n                }\r\n            }\r\n        }\r\n        return matchingMonthFound;\r\n    }\r\n\r\n    documentDateChanged(event) {\r\n        const isAccountingAndOperationMonthSame = this.operationsLastMonthClosed.getFullYear() === this.lastMonthClosed.getFullYear()\r\n            && this.operationsLastMonthClosed.getMonth() === this.lastMonthClosed.getMonth();\r\n        // Regular Journal Rules\r\n        if (!this.isAccrualDocument) {\r\n            // Date within a closed period\r\n            if ((event.value.year() === this.lastMonthClosed.getFullYear() && event.value.month() <= this.lastMonthClosed.getMonth())\r\n                || (event.value.year() < this.lastMonthClosed.getFullYear())) {\r\n                this.snackbarService.informationSnackBar('Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; please check the accounting period');\r\n                if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                    if (isAccountingAndOperationMonthSame) {\r\n                        this.accPeriodFormCtrl.patchValue(moment(new Date(new Date(this.operationsLastMonthClosed).\r\n                            setMonth(this.operationsLastMonthClosed.getMonth() + 1))));\r\n                    } else {\r\n                        this.accPeriodFormCtrl.patchValue(moment(this.accountingSetupModel.lastMonthClosedForOperation));\r\n                    }\r\n                } else {\r\n                    this.accPeriodFormCtrl.patchValue(this.companyManager.getCurrentCompanyDate());\r\n                } // Date within the last month closed for operation\r\n            } else if (event.value.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.value.month() === this.operationsLastMonthClosed.getMonth()) {\r\n                if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                    this.accPeriodFormCtrl.patchValue(moment(this.accountingSetupModel.lastMonthClosedForOperation));\r\n                } else {\r\n                    this.snackbarService.informationSnackBar('Last closed accounting period is ' +\r\n                        this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                        this.monthNameForoperationsLastMonthClosed + ' ; please check the accounting period');\r\n                    this.accPeriodFormCtrl.patchValue(moment(new Date(new Date(this.operationsLastMonthClosed).\r\n                        setMonth(this.operationsLastMonthClosed.getMonth() + 1))));\r\n                } // Date between last closed accounting period – last month closed for operation\r\n            } else if (this.checkIfBetweenLastClosedAndOperations(event.value)) {\r\n                if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege)) {\r\n                    this.accPeriodFormCtrl.patchValue(event.value);\r\n                } else {\r\n                    this.accPeriodFormCtrl.patchValue(moment(new Date(new Date(this.operationsLastMonthClosed).\r\n                        setMonth(this.operationsLastMonthClosed.getMonth() + 1))));\r\n                }\r\n            } else if (!this.checkIfBetweenLastClosedAndOperations(event.value) &&\r\n                event.value.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.value.month() < this.operationsLastMonthClosed.getMonth()) {\r\n                this.snackbarService.throwErrorSnackBar('Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n            } // Accrual Document date Rules\r\n        } else {\r\n            const todayDate = this.companyManager.getCurrentCompanyDate();\r\n            if ((event.value.year() === this.lastMonthClosed.getFullYear() && event.value.month() <= this.lastMonthClosed.getMonth())\r\n                || (event.value.year() < this.lastMonthClosed.getFullYear())) {\r\n                this.snackbarService.informationSnackBar('Document date cannot be in a closed period');\r\n                this.docDateFormCtrl.patchValue('');\r\n            } else if ((event.value <= this.companyManager.getCurrentCompanyDate() || event.value.month() === todayDate.month()) &&\r\n                !(event.value.date() === new Date(event.value.year(), event.value.month() + 1, 0).getDate())) {\r\n                this.snackbarService.throwErrorSnackBar('Document date must be a last month day');\r\n                this.docDateFormCtrl.patchValue('');\r\n            } else if (event.value.year() === todayDate.year() && event.value.month() > todayDate.month()) {\r\n                this.snackbarService.throwErrorSnackBar('Document date cannot be in the future');\r\n                this.docDateFormCtrl.patchValue('');\r\n            } else if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n                this.checkIfBetweenLastClosedAndOperations(event.value)) {\r\n                this.snackbarService.informationSnackBar('Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; please check the accounting period');\r\n                this.accPeriodFormCtrl.patchValue(event.value);\r\n            } else if (!this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n                event.value.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.value.month() === this.operationsLastMonthClosed.getMonth()) {\r\n                this.snackbarService.informationSnackBar('Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + 'The document date and the accounting period must be in an open month');\r\n                this.docDateFormCtrl.patchValue('');\r\n            } else if (!this.checkIfBetweenLastClosedAndOperations(event.value) &&\r\n                event.value.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                event.value.month() < this.operationsLastMonthClosed.getMonth()) {\r\n                this.docDateFormCtrl.patchValue('');\r\n                this.accPeriodFormCtrl.patchValue('');\r\n                this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n            } else {\r\n                this.accPeriodFormCtrl.patchValue(event.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    checkAccrualNumber() {\r\n        if (!this.isAuthorizedControlenabled) {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Warning Message',\r\n                    text: 'The document is not authorized for posting : Continue with Save ?',\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.afterValidationChecksPassed();\r\n                } else if (!answer && (this.isCashDocumentType || this.isInvoiceDocumentType)) {\r\n                    this.disableControls();\r\n                }\r\n            });\r\n        } else {\r\n            const groupByAccrual = [];\r\n            let isValid: boolean = true;\r\n\r\n            this.agGridApi.forEachNode((document) => {\r\n                groupByAccrual[document.data.accrualNumber] = groupByAccrual[document.data.accrualNumber] || [];\r\n                groupByAccrual[document.data.accrualNumber].push({ amount: document.data.amount });\r\n            });\r\n            groupByAccrual.forEach((array) => {\r\n                if (isValid) {\r\n                    let totalSubAmount: number = 0;\r\n                    array.forEach((element) => { totalSubAmount = totalSubAmount + element.amount; });\r\n                    if (totalSubAmount !== 0) {\r\n                        isValid = false;\r\n                        this.snackbarService.throwErrorSnackBar('Accrual numbers : Invalid format. '\r\n                            + 'Rows flagged with the same accrual numbers must be balanced (Amount=0.00)');\r\n                    }\r\n                }\r\n            });\r\n            if (isValid) {\r\n                this.afterValidationChecksPassed();\r\n            }\r\n        }\r\n    }\r\n\r\n    submitForm() {\r\n        this.isSave = true;\r\n        this.agGridApi.stopEditing();\r\n        this.enableControls();\r\n        if (this.editDocumentFormGroup.valid) {\r\n            const errorMessage = this.validateGridData();\r\n            if (errorMessage === '') {\r\n                this.checkAccrualNumber();\r\n            } else { this.snackbarService.throwErrorSnackBar(errorMessage); }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');\r\n        }\r\n    }\r\n\r\n    afterValidationChecksPassed() {\r\n        this.accountingDocumentData.accountingDocumentLines = this.getGridData();\r\n        this.getValuesforControls();\r\n        this.preaccountingService\r\n            .updateAccoutingDocuments(this.accountingDocumentData, this.isAuthorizedControlenabled)\r\n            .subscribe(\r\n                () => {\r\n                    if (this.isAuthorizedControlenabled) {\r\n                        this.subscriptions.push(this.preaccountingService.authorizeForPosting(this.documentRefData).subscribe(\r\n                            () => {\r\n                                this.snackbarService.informationSnackBar('Accounting Document updated');\r\n                                this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId()\r\n                                    + '/financial/posting/management']);\r\n                            },\r\n                            (error) => {\r\n                                console.error(error);\r\n\r\n                            },\r\n                        ));\r\n                    } else {\r\n                        this.snackbarService.informationSnackBar('Accounting Document updated');\r\n                        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/posting/management']);\r\n                    }\r\n\r\n                });\r\n\r\n    }\r\n    onExportButtonClickedAsExcel() {\r\n        this.agGridOptions.api.exportDataAsExcel();\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        this.agGridOptions.api.exportDataAsCsv();\r\n    }\r\n\r\n    onLoadPreviousPageButtonClicked() {\r\n        this.isSave = true;\r\n        this.location.back();\r\n    }\r\n\r\n    onAddAccountingLineButtonClicked(numberOfLines: number) {\r\n        this.isSave = true;\r\n        for (let count = 1; count <= numberOfLines; count++) {\r\n            const newItem = new AccountingDocumentLine();\r\n            newItem.clientAccountId = null;\r\n            newItem.associatedAccountCode = null;\r\n            newItem.secondaryDocumentReference = null;\r\n            newItem.sectionReference = null;\r\n            newItem.commodityId = null;\r\n            newItem.charterId = null;\r\n            newItem.accountReference = null;\r\n            newItem.accountLineTypeId = null;\r\n            newItem.costTypeId = null;\r\n            newItem.departmentId = null;\r\n            newItem.amount = null;\r\n            this.agGridApi.updateRowData({ add: [newItem] });\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    handleAction(action: string, documentLine: AccountingDocumentLine) {\r\n        switch (action) {\r\n            case this.editDocumentMenuActions.copyDocumentLine:\r\n                const newManualLine: AccountingDocumentLine = new AccountingDocumentLine(documentLine);\r\n                this.agGridApi.updateRowData({ add: [newManualLine] });\r\n                this.calculateTotalAmount();\r\n                this.snackbarService.informationSnackBar('Row added successfully at the end of the grid');\r\n                break;\r\n            case this.editDocumentMenuActions.deleteDocumentLine:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Document Line Deletion',\r\n                        text: 'Are you sure you want to delete this line?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                const confirmationDeleteSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.agGridApi.updateRowData({ remove: [documentLine] });\r\n                        this.calculateTotalAmount();\r\n                    }\r\n                });\r\n                this.subscriptions.push(confirmationDeleteSubscription);\r\n                break;\r\n            default: throw new Error('Unknown action');\r\n        }\r\n\r\n    }\r\n\r\n    calculateTotalAmount() {\r\n        this.amount = 0;\r\n        this.statutoryAmount = 0;\r\n        this.functionalAmount = 0;\r\n        this.agGridApi.forEachNode((rowData) => {\r\n            if (rowData.data.amount) {\r\n                this.amount = Math.round((this.amount + Number(rowData.data.amount)) * 100) / 100;\r\n            }\r\n            if (rowData.data.statutoryCurrency && this.isDocumentStatusHeld) {\r\n                this.statutoryAmount = Math.round((this.statutoryAmount + Number(rowData.data.statutoryCurrency)) * 100) / 100;\r\n            }\r\n            if (rowData.data.functionalCurrency && this.isDocumentStatusHeld) {\r\n                this.functionalAmount = Math.round((this.functionalAmount + Number(rowData.data.functionalCurrency)) * 100) / 100;\r\n            }\r\n        });\r\n    }\r\n\r\n    initializeStatusClass() {\r\n        if (this.accountingDocumentData.statusId === PostingStatus.MappingError\r\n            || this.accountingDocumentData.statusId === PostingStatus.Held) {\r\n            this.statusClassApplied = 'mat-error-message-chip';\r\n        } else if (this.accountingDocumentData.statusId === PostingStatus.Incomplete\r\n            || this.accountingDocumentData.statusId === PostingStatus.Deleted) {\r\n            this.statusClassApplied = 'mat-neutral-message-chip';\r\n        } else if (this.accountingDocumentData.statusId === PostingStatus.Authorized) {\r\n            this.statusClassApplied = 'mat-success status-chip';\r\n        }\r\n\r\n    }\r\n    validateEmpty(colId: string, rowData: any) {\r\n        if(colId == \"valueDate\" || colId == \"accountingPeriod\" || colId == \"paymentDocumentDate\")\r\n        {\r\n            return true;\r\n        }    \r\n        else if((this.isAccrualDocument || this.isMtmSelected) && colId == \"accrualNumber\")\r\n        {\r\n            if (rowData.data[colId]\r\n                && rowData.data[colId].toString().trim() != ''\r\n                && rowData.data[colId].toString().trim() != 'Required*') {\r\n                return false;\r\n            }\r\n        }\r\n        else if(this.isRequired(colId) && this.isMtmSelected)        \r\n        {\r\n           \r\n            if (colId=='sectionId' || (rowData.data[colId]\r\n                && rowData.data[colId].toString().trim() != ''\r\n                && rowData.data[colId].toString().trim() != 'Required*')) {\r\n                return false;\r\n            }\r\n           \r\n        }\r\n        else if(this.isRequired(colId) &&  !this.isMtmSelected)        \r\n        {\r\n            if ((colId=='settlementCurrency' || colId == 'dealNumber' || colId === \"accrualNumber\")  \r\n                || (rowData.data[colId]               \r\n                && rowData.data[colId].toString().trim() != ''\r\n                && rowData.data[colId].toString().trim() != 'Required*')) {\r\n                return false;\r\n            }\r\n        }\r\n        else if(!this.isRequired(colId))\r\n        {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    displayErrorMessages() {\r\n        if (this.accountingDocumentData.errorMessage) {\r\n            const messages = this.accountingDocumentData.errorMessage.split(';');\r\n            this.showErrorBanners = true;\r\n            messages.forEach((message) => {\r\n                if (message) {\r\n                    this.mappingErrorMessages.push(message);\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n    onWarningRemoveButtonClicked(params) {\r\n        if (params) {\r\n            params.currentTarget.parentElement.parentElement.remove();\r\n        }\r\n    }\r\n    showHideMtmColumn() {\r\n        this.agGridColumnApi.setColumnVisible(this.dealNumberColumn, true);\r\n        this.agGridColumnApi.setColumnVisible(this.settlementCurrencyColumn, true);\r\n        this.agGridColumnApi.setColumnVisible(this.provinceColumn, true);\r\n        this.agGridColumnApi.setColumnVisible(this.accrualNumberColumn, true);\r\n        this.agGridColumnApi.setColumnVisible(this.clientAccountColumn, false);\r\n        this.agGridColumnApi.setColumnVisible(this.secondaryDocumentReferenceColumn, false);\r\n        this.agGridColumnApi.setColumnVisible(this.externalDocumentReferenceColumn, false);\r\n        this.agGridColumnApi.setColumnVisible(this.costCenterColumn, false);\r\n        this.initializeGridColumns();\r\n    }\r\n    filterAccountLineTypes(value: any, options: any[], rowData: any): any[] {\r\n        let accountLineTypeList = [];\r\n        accountLineTypeList = options;\r\n        if (rowData.accountReference) {\r\n            const nominalAccountSelected = this.filteredNominalAccountList.find(\r\n                (nominalAccount) => nominalAccount.accountNumber\r\n                    === rowData.accountReference);\r\n            if (nominalAccountSelected) {\r\n                if (this.isMtmSelected) {\r\n                    if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Bank');\r\n                    } else {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Ledger');\r\n                    }\r\n                } else {\r\n                    if (nominalAccountSelected && nominalAccountSelected.clientAccountMandatory === 1) {\r\n                        accountLineTypeList = options.filter((accountType) =>\r\n                            accountType.description === 'Customer' || accountType.description === 'Vendor');\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        options = accountLineTypeList;\r\n        return options;\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <atlas-filter-set-display (filtersChanged)=\\\"onFilterSetDetailsChange($event)\\\"\\r\\n                                  [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                                  [gridCode]=\\\"gridCode\\\"\\r\\n                                  [company]=\\\"company\\\">\\r\\n        </atlas-filter-set-display>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"mat-elevation-z1 padding-small\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\" table-title atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">\\r\\n                {{dataLength}} {{\\r\\n dataLength > 1 ? 'Accounting Documents' : 'Accounting\\r\\n                Document'\\r\\n                }}\\r\\n            </h2>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <span class=\\\"span-title\\\">Refresh every :</span>\\r\\n            <span>\\r\\n                <mat-select class=\\\"mat-select-style\\\"\\r\\n                            [formControl]=\\\"refreshOptionsCtrl\\\"\\r\\n                            [(value)]=\\\"selected\\\">\\r\\n                    <mat-option value=\\\"10\\\" (click)=\\\"refreshOptionSelectionChanged(this)\\\">\\r\\n                        10 Seconds</mat-option>\\r\\n                    <mat-option value=\\\"20\\\" (click)=\\\"refreshOptionSelectionChanged(this)\\\">20 Seconds</mat-option>\\r\\n                </mat-select>\\r\\n            </span>\\r\\n            <button mat-button\\r\\n                    title=\\\"Stop Refresh\\\"\\r\\n                    (click)=\\\"onStopRefreshClicked()\\\"\\r\\n                    [disabled]=\\\"isStopRefreshButtonDisable\\\"\\r\\n                    class=\\\"mat-button-user-margin\\\">\\r\\n                Stop Refresh\\r\\n            </button>\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Financials.POSTINGMGT.AUTHORIZEPOSTING',company:this.company\\\"\\r\\n                    title=\\\"Authorize for Posting\\\"\\r\\n                    (click)=\\\"onAuthorizeClicked()\\\"\\r\\n                    class=\\\"mat-button-user-margin\\\">\\r\\n                Authorize for posting\\r\\n            </button>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"postingManagementGridOptions && postingManagementGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"postingManagementGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"!isLoading\\\">\\r\\n            <div ag-grid=\\\"postingManagementGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                <ag-grid-angular class=\\\"ag-theme-material grid-size\\\"\\r\\n                                 [rowData]=\\\"postingManagementGridRows\\\"\\r\\n                                 [columnDefs]=\\\"columnDefs\\\"\\r\\n                                 [gridOptions]=\\\"postingManagementGridOptions\\\"\\r\\n                                 (columnVisible)=\\\"onAddOrDeleteColumn($event)\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (rowSelected)=\\\"onRowSelected($event)\\\"\\r\\n                                 (rowClicked)=\\\"onRowClicked($event)\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [rowClassRules]=\\\"rowClassRules\\\"\\r\\n                                 [paginationPageSize]=\\\"20\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowSelection]=\\\"rowSelection\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end\\\">\\r\\n                <div *ifAuthorized=\\\"'Financials.POSTINGMGT.STARTPOSTING',company:this.company\\\">\\r\\n                    <mat-slide-toggle  mat-raised-button\\r\\n                                       class=\\\"mat-toggle-posting\\\"\\r\\n                                       [checked]=\\\"isPostingProcessActive\\\"\\r\\n                                       (change)=\\\"toggleStartStopPostingProcess()\\\">\\r\\n                        The Posting Process is stopped\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\"","module.exports = \".table-title {\\n  background-color: white; }\\n\\n.loading {\\n  background-color: white;\\n  padding-top: 2%;\\n  padding-bottom: 2%; }\\n\\n.dropdown-width {\\n  width: 50px; }\\n\\n.grid-size {\\n  height: 100%; }\\n\\n.span-title {\\n  margin-top: 10px;\\n  margin-right: 4px;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 14px;\\n  font-weight: 500; }\\n\\nbutton.mat-button-user-margin {\\n  margin-top: 4px; }\\n\\n.toggle-button {\\n  position: relative;\\n  bottom: 40px;\\n  padding-left: 12px; }\\n\\n.mat-select-style {\\n  width: 100px;\\n  margin-top: 10px;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 14px;\\n  font-weight: 500; }\\n\\n.mat-toggle-posting::ng-deep.mat-slide-toggle-label {\\n  flex-direction: row-reverse !important; }\\n\\n.mat-toggle-posting::ng-deep.mat-slide-toggle-content {\\n  margin-right: 8px !important; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog, MatPaginator, MatSort } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { interval, Subject, Subscription } from 'rxjs';\r\nimport { finalize, map, takeUntil } from 'rxjs/operators';\r\nimport { isNumber, isString } from 'util';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridHyperlinkComponent } from '../../../../shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component';\r\nimport { AgGridUserPreferencesComponent } from '../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { PostingStatus } from '../../../../shared/enums/posting-status.enum';\r\nimport { PostingManagementDisplayView } from '../../../../shared/models/posting-management-display-view';\r\nimport { FormatDatePipe } from '../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { PreaccountingService } from '../../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { UrlManagementService } from '../../../../shared/services/url-management.service';\r\nimport { AuthorizePostingDialogComponent } from '../authorize-posting-dialog/authorize-posting-dialog.component';\r\nimport { ListAndSearchFilter } from '../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { GridConfigurationProviderService } from '../../../../shared/services/grid-configuration-provider.service';\r\nimport { UserGridPreferencesParameters } from '../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../shared/entities/grid-column-configuration.entity';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { FilterSetDisplayComponent } from '../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { ListAndSearchFilterDto } from '../../../../shared/dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { ExecutionActionsService } from '../../../../execution/services/execution-actions.service';\r\n\r\n@Component({\r\n    selector: 'atlas-posting-management',\r\n    templateUrl: './posting-management.component.html',\r\n    styleUrls: ['./posting-management.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class PostingManagementComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplayComponent') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    @ViewChild(MatPaginator) paginator: MatPaginator;\r\n    @ViewChild(MatSort) sort: MatSort;\r\n    company: string;\r\n    PostingManagementDisplay: PostingManagementDisplayView[];\r\n    postingManagementGridColumns: agGrid.ColDef[];\r\n    dataLength = 0;\r\n    masterdata: MasterData;\r\n    isHide: boolean = true;\r\n    selected: string = '10';\r\n    interval: Subscription;\r\n    postingManagementGridOptions: agGrid.GridOptions = {};\r\n    postingManagementGridRows: PostingManagementDisplayView[];\r\n    postingManagementGridContextualMenuActions: AgContextualMenuAction[];\r\n    editAccountingDocumentGridContextualMenuActions: AgContextualMenuAction[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    userActiveDirectoryName: string;\r\n    rowSelection: string = 'multiple';\r\n    refreshOptionsCtrl = new AtlasFormControl('pricingOptions');\r\n    accountingDocuments: PostingManagementDisplayView[];\r\n    isPostingProcessActive: boolean = false;\r\n    postingProcessSubscription: Subscription;\r\n    editDocumentMenuActions: { [key: string]: string } = {\r\n        copyDocumentLine: 'view',\r\n    };\r\n    excelSheetName: string = 'Posting Management';\r\n    excelStyles: any;\r\n    isStopRefreshButtonDisable: boolean = false;\r\n    isLoading = true;\r\n    isRefreshing = false;\r\n    isStartPostingaMgmtPrivilege: boolean = true;\r\n\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    destroy$ = new Subject();\r\n    gridCode = \"postingRecordsGrid\";\r\n    hasGridSharing = false;\r\n    columnDefs: agGrid.ColDef[];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    count: number = 0;\r\n    savedFilters: ListAndSearchFilter[];\r\n    filters: ListAndSearchFilter[] = [];\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    gridPreferences: UserGridPreferencesParameters = new UserGridPreferencesParameters();\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected companyManager: CompanyManagerService,\r\n        private formBuilder: FormBuilder,\r\n        private urlManagementService: UrlManagementService,\r\n        protected router: Router,\r\n        private preaccountingService: PreaccountingService,\r\n        private authorizationService: AuthorizationService,\r\n        private snackbarService: SnackbarService,\r\n        private uiService: UiService,\r\n        public executionActionsService: ExecutionActionsService,\r\n        private formatDate: FormatDatePipe,\r\n        private datePipe: DatePipe,\r\n        protected utilService: UtilService,\r\n        protected lockService: LockService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService, ) {\r\n\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    editEstimatedColumnsPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'POSTINGMGT',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: null,\r\n    };\r\n    gridContext = {\r\n        editPrivileges: false,\r\n    };\r\n    rowClassRules = {\r\n        'ag-grid-row-gray-background': (params) => {\r\n            if (params.data) {\r\n                if (params.data.statusId === PostingStatus.Authorized) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        },\r\n    };\r\n\r\n    ngOnInit() {\r\n        if (this.authorizationService.isPrivilegeAllowed(this.company, 'Financials')\r\n            && this.authorizationService.isPrivilegeAllowed(this.company, 'POSTINGMGT')) {\r\n            this.isStartPostingaMgmtPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'STARTPOSTING');\r\n            if (this.isStartPostingaMgmtPrivilege) {\r\n                this.getStartStopPostingProcessActiveStatus();\r\n            }\r\n        }\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.refreshOptionsCtrl.patchValue(this.selected);\r\n        this.loadGridConfiguration();\r\n        this.getAllposingDocument();\r\n        this.route.paramMap\r\n            .pipe(\r\n                map((params) => params.get('company')),\r\n            )\r\n            .subscribe((company) => {\r\n                this.company = company;\r\n            });\r\n\r\n        const intervalValue = Number(this.refreshOptionsCtrl.value);\r\n        this.init();\r\n        this.refreshGrid(intervalValue);\r\n    }\r\n\r\n    init() {\r\n        this.editAccountingDocumentGridContextualMenuActions = [\r\n            {\r\n                icon: 'content_copy',\r\n                text: 'View Summary',\r\n                action: this.editDocumentMenuActions.copyDocumentLine,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, rowSelected: PostingManagementDisplayView) {\r\n        switch (action) {\r\n            case this.editDocumentMenuActions.copyDocumentLine:\r\n                if (rowSelected.invoiceId) {\r\n                    const invoiceOption = rowSelected.invoiceId.toString();\r\n                    const invoiceType = rowSelected.invoiceTypeId;\r\n                    this.router.navigate(\r\n                        ['/' + this.companyManager.getCurrentCompanyId() +\r\n                            '/execution/invoicing/summary/' + encodeURIComponent(invoiceOption)],\r\n                        {\r\n                            queryParams: { invoiceType },\r\n\r\n                        });\r\n\r\n                }\r\n                if (rowSelected.cashId) {\r\n                    const costDirectionId = rowSelected.costDirectionId;\r\n                    const cashId = rowSelected.cashId;\r\n                    this.router.navigate(\r\n                        ['/' + this.companyManager.getCurrentCompanyId() + '/execution/cash/display/'\r\n                            + costDirectionId + '/', cashId],\r\n                    );\r\n                }\r\n                break;\r\n            default: throw new Error('Unknown action');\r\n        }\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.postingManagementGridColumns;\r\n\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridService.sizeColumns(this.postingManagementGridOptions);\r\n    }\r\n    onGridSizeChanged(params) {\r\n        this.gridService.sizeColumns(params);\r\n    }\r\n\r\n    getAllposingDocument() {\r\n        this.initView();\r\n\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]): void {\r\n        this.executionActionsService.EditCriteriaRetainFilter = filters;\r\n        this.filters = filters;\r\n        if (this.count === 1) {\r\n            this.filters = this.savedFilters;\r\n            this.savedFilters = null;\r\n            this.count = 0;\r\n        }\r\n        if (this.savedFilters && this.count === 0) {\r\n            if (this.filterSetDisplayComponent) {\r\n                this.count = 1;\r\n                const localFilters: ListAndSearchFilterDto[] = this.savedFilters.map((filter: ListAndSearchFilter) => {\r\n                    return new ListAndSearchFilterDto(filter);\r\n                });\r\n                this.filterSetDisplayComponent.loadFilters(localFilters);\r\n            }\r\n        } else {\r\n            this.getAllposingDocument();\r\n        }\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n\r\n                this.gridPreferences = {\r\n                    company: this.company,\r\n                    gridId: this.gridCode,\r\n                    gridOptions: this.postingManagementGridOptions,\r\n                    sharingEnabled: this.hasGridSharing,\r\n                };\r\n            });\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                pinned: 'left',\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n            });\r\n\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                hide: !config.isVisible,\r\n            };\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n\r\n            return columnDef;\r\n        }));\r\n\r\n        if (this.postingManagementGridOptions) {\r\n            this.postingManagementGridOptions.columnDefs = this.columnDefs;\r\n            if (this.postingManagementGridOptions.columnApi) {\r\n                this.postingManagementGridOptions.columnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n    }\r\n\r\n    initView() {\r\n        if (this.isRefreshing) {\r\n            return;\r\n        }\r\n        this.isRefreshing = true;\r\n        this.stopLockRefresh();\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe();\r\n        const postingId: number = 1;\r\n        if (this.filters) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.preaccountingService.getAllPostingManagement(filters)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe((data) => {\r\n                    this.postingManagementGridRows = data.value;\r\n                    this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    onEditButtonClicked() {\r\n        this.gridContext.editPrivileges = true;\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel >= userCompanyPrivilege.permission) {\r\n                this.isHide = false;\r\n            }\r\n            this.dataLength = this.postingManagementGridRows.length;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    postingStatusFormatter(params) {\r\n        if (params.value) {\r\n            return PostingStatus[params.value].toString();\r\n        }\r\n    }\r\n\r\n    toolTipValue(params) {\r\n        return params.value;\r\n    }\r\n\r\n    departmentFormatter(params) {\r\n        const department = this.masterdata.departments.find((dept) => dept.departmentId === params.value);\r\n        return department ? department.description : '';\r\n    }\r\n\r\n    dateFormatterHour(params) {\r\n        if (params.value) {\r\n            const authorizedDate = new Date(params.value);\r\n            return this.padStart(authorizedDate.getHours(), 2) + ':' + this.padStart(authorizedDate.getMinutes(), 2);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    padStart(num: number, size: number): string {\r\n        let s = num + '';\r\n        while (s.length < size) {\r\n            s = '0' + s;\r\n        }\r\n        return s;\r\n    }\r\n\r\n    currencyFormatter(params) {\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n\r\n    onAuthorizeClicked() {\r\n        this.interval.unsubscribe();\r\n        this.accountingDocuments = this.postingManagementGridOptions.api.getSelectedRows();\r\n        if (this.accountingDocuments.length > 0) {\r\n            this.accountingDocuments.forEach((document) => {\r\n                document.reason = '';\r\n                if (document.statusId === PostingStatus.Authorized) {\r\n                    document.reason = 'Accounting Document is already authorized.';\r\n                } else if (document.total > 0) {\r\n                    document.reason = 'Unbalanced document.';\r\n                } else if (document.documentDate > this.companyManager.getCurrentCompanyDate().toDate()) {\r\n                    document.reason = 'Future document date';\r\n                }\r\n            });\r\n\r\n            const validateAccountingDocument = this.accountingDocuments.filter((doc) =>\r\n                doc.reason !== '');\r\n            const passedAccountingDocument = this.accountingDocuments.filter((doc) =>\r\n                doc.reason === '');\r\n\r\n            const accountingDocumentSectionDialog = this.dialog.open(AuthorizePostingDialogComponent, {\r\n                panelClass: 'authorize-posting-dialog',\r\n                data: { validateAccountingDocument, passedAccountingDocument },\r\n            });\r\n            accountingDocumentSectionDialog.afterClosed().subscribe(() => {\r\n                this.initView();\r\n                if (this.isStopRefreshButtonDisable === false) {\r\n                    const intervalValue = Number(this.refreshOptionsCtrl.value);\r\n                    this.refreshGrid(intervalValue);\r\n                }\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('No Contract Selected.');\r\n        }\r\n\r\n    }\r\n\r\n    startLockRefresh(accountingId: number, documentReference: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Accounting Document';\r\n        resourceInformation.resourceId = accountingId;\r\n        resourceInformation.resourceCode = documentReference;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.interval.unsubscribe();\r\n        this.stopLockRefresh();\r\n        if (this.postingProcessSubscription) {\r\n            this.postingProcessSubscription.unsubscribe();\r\n        }\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n\r\n    refreshOptionSelectionChanged(event) {\r\n        this.isStopRefreshButtonDisable = false;\r\n        this.interval.unsubscribe();\r\n        this.refreshGrid(Number(event.selected));\r\n\r\n    }\r\n    refreshGrid(intervalValue) {\r\n        const source = interval(intervalValue * 1000);\r\n        this.interval = source.subscribe(() => {\r\n            this.getAllposingDocument();\r\n        });\r\n    }\r\n\r\n    onAddOrDeleteColumn(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n    }\r\n\r\n    onRowClicked(rowSelected, event) {\r\n        if (rowSelected.data) {\r\n            this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/financial/posting/accountingdocument/viewedit', rowSelected.data.accountingId]);\r\n        }\r\n    }\r\n\r\n\r\n    getStartStopPostingProcessActiveStatus() {\r\n        this.postingProcessSubscription = this.preaccountingService.getPostingProcessStatus()\r\n            .subscribe((result) => {\r\n                this.isPostingProcessActive = result;\r\n            }, (error) => {\r\n                console.error(error);\r\n                this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n            });\r\n\r\n    }\r\n\r\n    toggleStartStopPostingProcess() {\r\n        this.isPostingProcessActive = !this.isPostingProcessActive;\r\n\r\n        this.postingProcessSubscription = this.preaccountingService.startStopPostingProcess(this.isPostingProcessActive)\r\n            .subscribe((result) => {\r\n                if (result) {\r\n                    this.snackbarService.throwErrorSnackBar('Posting Process is started successfully.');\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar('Posting Process is stopped successfully.');\r\n                }\r\n\r\n            }, (error) => {\r\n                console.error(error);\r\n                this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n            });\r\n    }\r\n    onStopRefreshClicked() {\r\n        this.interval.unsubscribe();\r\n        if (this.postingProcessSubscription) {\r\n            this.postingProcessSubscription.unsubscribe();\r\n        }\r\n        this.isStopRefreshButtonDisable = true;\r\n    }\r\n\r\n    onRowSelected(event) {\r\n        this.grantLock(Number(event.data.accountingId), event.node);\r\n    }\r\n\r\n    grantLock(accountingId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(accountingId)) {\r\n                this.locking.push(accountingId);\r\n                this.lockService.isLockedAccountingDocument(accountingId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.postingManagementGridOptions.api.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== accountingId);\r\n                    } else {\r\n                        this.lockService.lockAccountingDocument(accountingId, LockFunctionalContext.AccountingDocumentAuthorizeForPosting).pipe(takeUntil(this.destroy$)).subscribe((lockState) => {\r\n                            this.refeshResourceInformation();\r\n                            this.locking = this.locking.filter((id) => id !== accountingId);\r\n                        });\r\n\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(accountingId)) {\r\n                this.unlocking.push(accountingId);\r\n                this.refeshResourceInformation();\r\n                if (this.resourcesInformation.filter((rsc) => rsc.resourceId === accountingId).length === 0) {\r\n                    this.lockService.unlockAccountingDocument(accountingId, LockFunctionalContext.AccountingDocumentAuthorizeForPosting).pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n                        node.setRowSelectable(true);\r\n                        this.unlocking = this.unlocking.filter((id) => id !== accountingId);\r\n                    });\r\n                } else {\r\n                    node.setRowSelectable(true);\r\n                    this.unlocking = this.unlocking.filter((id) => id !== accountingId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.postingManagementGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Accounting Document';\r\n                resourceInformation.resourceId = node.data.accountingId;\r\n                resourceInformation.resourceCode = node.data.documentReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     class=\\\"quick-sum-div-height\\\"\\r\\n     fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div fxLayout=\\\"column \\\"\\r\\n         fxLayoutAlign=\\\"start \\\">\\r\\n        <h3>Original document reference: [{{this.documentReference}}]</h3>\\r\\n    </div>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     class=\\\"quick-sum-div-height\\\"\\r\\n     fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div class=\\\"create-accounting-document-fields\\\">\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Document Date\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly=\\\"true\\\"\\r\\n                               [formControl]='docDateFromCtrl'>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Value Date\\\"\\r\\n                               readonly=\\\"true\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]='valueDateFormCtrl'>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               [matDatepicker]=\\\"reverseDatePicker\\\"\\r\\n                               placeholder=\\\"Reverse Document Date\\\"\\r\\n                               [matTooltip]=\\\"'Reverse Document Date'\\\"\\r\\n                               (dateChange)=\\\"validateReversalDate()\\\"\\r\\n                               [required]=\\\"true\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]='reverseDateFormCtrl'>\\r\\n                        <mat-datepicker-toggle matSuffix\\r\\n                                               [for]=\\\"reverseDatePicker\\\"></mat-datepicker-toggle>\\r\\n                        <mat-datepicker #reverseDatePicker></mat-datepicker>\\r\\n                        <mat-hint>\\r\\n                            <div class=\\\"reverse-date-error\\\"\\r\\n                                 *ngIf=\\\"this.isReversalDateBefore\\\">\\r\\n                                Not allowed. Reversal doc. date prior to original document date.\\r\\n                            </div>\\r\\n                            <div class=\\\"reverse-date-error\\\"\\r\\n                                 *ngIf=\\\"this.isReversalDateNotInLastDay && isAccrualDocument\\\">\\r\\n                                Reversal doc. date must be a last month day.\\r\\n                            </div>\\r\\n                            <div class=\\\"reverse-date-error\\\"\\r\\n                                 *ngIf=\\\"this.isReversalDateAfter\\\">\\r\\n                                Not allowed. Reversal doc. cannot be in the future.\\r\\n                            </div>\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Accounting Period\\\"\\r\\n                               [formControl]='accPeriodFormCtrl'\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly=\\\"true\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <mat-form-field>\\r\\n                        <mat-label>Currency</mat-label>\\r\\n                        <input matInput\\r\\n                               [formControl]='currencyCtrl'\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly=\\\"true\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between start\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxFlex=\\\"98.5\\\">\\r\\n        <div ag-grid=\\\"reverseDocumntGridOptions\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material grid-size\\\"\\r\\n                             [rowData]=\\\"accountingDocumentLine\\\"\\r\\n                             [columnDefs]=\\\"reverseDocumentCreateGridCols\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"false\\\"\\r\\n                             [paginationPageSize]=\\\"20\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter=\\\"false\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start end\\\"\\r\\n             class=\\\"total-amount-content\\\">\\r\\n            <mat-card-subtitle class=\\\"total-figure\\\">Total Amount:\\r\\n                <span class=\\\"total-figure-value\\\">{{totalAmount}}</span> </mat-card-subtitle>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     class=\\\"quick-sum-div-height\\\"\\r\\n     fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div fxLayout=\\\"column \\\"\\r\\n         *ifAuthorized=\\\"'Financials.POSTINGMGT.AUTHORIZEPOSTING',company:this.company\\\"\\r\\n         fxLayoutAlign=\\\"start\\\">\\r\\n        <mat-slide-toggle [formControl]=\\\"interfaceCtrl\\\">To Interface</mat-slide-toggle>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".reverse-date-warning {\\n  color: #ec8d2d; }\\n\\n.reverse-date-error {\\n  color: #df5a4d; }\\n\"","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AccountingDocumentLine } from '../../../../../shared/entities/accounting-document-line.entity';\r\nimport { AccountingSetup } from '../../../../../shared/entities/accounting-setup.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CostType } from '../../../../../shared/entities/cost-type.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { PostingManagement } from '../../../../../shared/entities/posting-management.entity';\r\nimport { PermissionLevels } from '../../../../../shared/enums/permission-level.enum';\r\nimport { PostingDocumentType } from '../../../../../shared/enums/posting-document-type.enum';\r\nimport { PostingManagementDisplayView } from '../../../../../shared/models/posting-management-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { isDateTwoBeforeDateOne } from '../../../../../shared/validators/date-validators.validator';\r\n\r\n@Component({\r\n    selector: 'atlas-reverse-document-create',\r\n    templateUrl: './reverse-document-create.component.html',\r\n    styleUrls: ['./reverse-document-create.component.scss']\r\n})\r\n\r\nexport class ReverseDocumentCreateComponent implements OnInit, OnDestroy {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    reverseDocumentCreateGridCols: agGrid.ColDef[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    currentStep: number = 0;\r\n    company: string;\r\n    accountingDocumentLine: AccountingDocumentLine[];\r\n    documentRefData: PostingManagementDisplayView[];\r\n    accountingDocumentData: PostingManagement;\r\n    docDateFromCtrl = new AtlasFormControl('docDateFromCtrl');\r\n    valueDateFormCtrl = new AtlasFormControl('valueDateFormCtrl');\r\n    accPeriodFormCtrl = new AtlasFormControl('accPeriodFormCtrl');\r\n    currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n    reverseDateFormCtrl = new AtlasFormControl('reverseDateFormCtrl');\r\n    interfaceCtrl = new AtlasFormControl('interfaceCtrl');\r\n    warningMessage: string;\r\n    isWarningMessage: boolean;\r\n    isReversalDateBefore: boolean;\r\n    isReversalDateNotInLastDay: boolean;\r\n    isReversalDateAfter: boolean;\r\n    isAccrualDocument: boolean = false;\r\n    totalAmount: number = 0;\r\n    private getAccountingLinesByAccountingIdSubscription: Subscription;\r\n    @Input() accountingId: number;\r\n    @Input() documentReference: string;\r\n    @Input() transactionDocumentId: number;\r\n    @Input() transactionDocumentTypeId: number;\r\n    @Output() notifyParentForDisableNextButton: EventEmitter<boolean> = new EventEmitter(true);\r\n    masterdata: MasterData;\r\n    costTypes: CostType[];\r\n    departments: Department[];\r\n    amountFormat: string = 'en-US';\r\n    subscription: Subscription[] = [];\r\n\r\n    accountingDocDetail: PostingManagement;\r\n    accountingSetupModel: AccountingSetup;\r\n    operationsLastMonthClosed: Date;\r\n    lastMonthClosed: Date;\r\n    isAnyAmountColumnZero: boolean = false;\r\n    monthNameForlastMonthClosed: string;\r\n    monthNameForoperationsLastMonthClosed: string;\r\n    documentDateSelected: Date;\r\n    monthNames: string[] = ['January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December'];\r\n    postOpClosedPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'POSTOPCLOSED',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'POSTINGMGT',\r\n    };\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authorizationService: AuthorizationService,\r\n        private executionService: ExecutionService,\r\n        protected companyManager: CompanyManagerService,\r\n        private snackbarService: SnackbarService,\r\n        private preaccountingService: PreaccountingService,\r\n        protected dialog: MatDialog,\r\n        public gridService: AgGridService, ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.interfaceCtrl.patchValue(true);\r\n        this.subscription.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n                this.operationsLastMonthClosed = new Date(new\r\n                    Date(this.accountingSetupModel.lastMonthClosedForOperation).toDateString());\r\n                this.lastMonthClosed = new Date(new\r\n                    Date(this.accountingSetupModel.lastMonthClosed).toDateString());\r\n                this.monthNameForlastMonthClosed = this.monthNames[this.lastMonthClosed.getMonth()];\r\n                this.monthNameForoperationsLastMonthClosed = this.monthNames[this.operationsLastMonthClosed.getMonth()];\r\n            }));\r\n\r\n        this.initializeGridColumns();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n    }\r\n\r\n    getAccountingLinesByAccountingId() {\r\n        if (this.accountingId) {\r\n            this.getAccountingLinesByAccountingIdSubscription = (this.preaccountingService.getAccoutingDocumentAllData(this.transactionDocumentId).pipe(\r\n                map((data) => {\r\n                    this.documentRefData = data.value.map((docRef) => {\r\n                        return new PostingManagementDisplayView(docRef);\r\n                    });\r\n                    this.accountingDocumentData = this.documentRefData[0];\r\n                    if (this.accountingDocumentData) {\r\n                        this.accountingDocumentLine = this.accountingDocumentData.accountingDocumentLines;\r\n                        this.assignValuesToControl();\r\n                    }\r\n                }))\r\n                .subscribe());\r\n\r\n            (this.preaccountingService.getAccoutingDocumentAllData(this.transactionDocumentId).pipe(\r\n                map((data) => {\r\n                    const documentRefData = data.value.map((docRef) => {\r\n                        return new PostingManagementDisplayView(docRef);\r\n                    });\r\n                    this.accountingDocDetail = documentRefData[0];\r\n                    if (this.transactionDocumentTypeId === PostingDocumentType.TA) {\r\n                        this.isAccrualDocument = true;\r\n                        this.validateReversalDate();\r\n                    }\r\n                }))\r\n                .subscribe());\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.reverseDocumentCreateGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.agGridApi.setRowData([]);\r\n    }\r\n\r\n    getDefaultValue(params) {\r\n        return 0;\r\n    }\r\n\r\n    currencyFormatterInGrid(params) {\r\n        if (params.value > 0) {\r\n            params.value = -Math.abs(params.value);\r\n        }\r\n        else {\r\n            params.value = Math.abs(params.value);\r\n        }\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n\r\n    currencyFormatterForTotalInGrid(totalAmount: number) {\r\n        return (params) => {\r\n\r\n            if (params.value > 0) {\r\n                params.value = -Math.abs(params.value);\r\n            }\r\n            else {\r\n                params.value = Math.abs(params.value);\r\n            }\r\n\r\n            this.totalAmount += params.value;\r\n            if (isNaN(params.value) || params.value === null) { return ''; }\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n\r\n        }\r\n    }\r\n\r\n    costTypeFormatter(params): string {\r\n        if (params.value && this.masterdata.costTypes) {\r\n            const costTypeList = this.masterdata.costTypes.find((x) => x.costTypeId === params.value);\r\n            if (costTypeList) {\r\n                return costTypeList.costTypeCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    accountLineTypeFormatter(params): string {\r\n        if (params.value && this.masterdata.accountLineTypes) {\r\n            const accountLineTypes = this.masterdata.accountLineTypes.find((x) => x.accountLineTypeId === params.value);\r\n            if (accountLineTypes) {\r\n                return accountLineTypes.accountLineTypeCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    departmentValueFormatter(params): string {\r\n        if (params.value && this.masterdata.departments) {\r\n            const department = this.masterdata.departments.find((x) => x.departmentId === params.value);\r\n            if (department) {\r\n                return department.departmentCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    commodityFormatter(params): string {\r\n        if (params.value && this.masterdata.commodities) {\r\n            const commodityList = this.masterdata.commodities.find((x) => x.commodityId === params.value);\r\n            if (commodityList) {\r\n                return commodityList.commodityCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    paymentTermFormatter(params): string {\r\n        if (params.value && this.masterdata.paymentTerms) {\r\n            const paymentTermsList = this.masterdata.paymentTerms.find((x) => x.paymentTermsId === params.value);\r\n            if (paymentTermsList) {\r\n                return paymentTermsList.paymentTermCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    vatCodeFormatter(params): string {\r\n        if (params.value && this.masterdata.vats) {\r\n            const vatList = this.masterdata.vats.find((x) => x.vatId === params.value);\r\n            if (vatList) {\r\n                return vatList.vatCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.reverseDocumentCreateGridCols = [\r\n            {\r\n                headerName: 'Nominal acc.',\r\n                colId: 'accountReference',\r\n                field: 'accountReference',\r\n            },\r\n            {\r\n                headerName: 'Associated Acc.',\r\n                colId: 'associatedAccountCode',\r\n                field: 'associatedAccountCode',\r\n            },\r\n            {\r\n                headerName: 'Acc. L. Type',\r\n                colId: 'accountLineTypeId',\r\n                field: 'accountLineTypeId',\r\n                valueFormatter: this.accountLineTypeFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost types',\r\n                colId: 'costTypeId',\r\n                field: 'costTypeId',\r\n                valueFormatter: this.costTypeFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                colId: 'amount',\r\n                field: 'amount',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.currencyFormatterForTotalInGrid(this.totalAmount)\r\n            },\r\n            {\r\n                headerName: 'Statutory currency',\r\n                colId: 'statutoryCurrency',\r\n                field: 'statutoryCurrency',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.currencyFormatterInGrid.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Functional currency',\r\n                colId: 'functionalCurrency',\r\n                field: 'functionalCurrency',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.currencyFormatterInGrid.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                colId: 'narrative',\r\n                field: 'narrative',\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                colId: 'departmentId',\r\n                field: 'departmentId',\r\n                valueFormatter: this.departmentValueFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Sec. Doc. ref',\r\n                colId: 'secDocReference',\r\n                field: 'secDocReference',\r\n            },\r\n            {\r\n                headerName: 'Ext. Doc. Ref',\r\n                colId: 'extDocReference',\r\n                field: 'extDocReference',\r\n            },\r\n            {\r\n                headerName: 'Contract ref.',\r\n                colId: 'clientReference',\r\n                field: 'clientReference',\r\n            },\r\n\r\n            {\r\n                headerName: 'Commodity',\r\n                colId: 'commodityId',\r\n                field: 'commodityId',\r\n                valueFormatter: this.commodityFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                colId: 'charter',\r\n                field: 'charter',\r\n            },\r\n            {\r\n                headerName: 'Cost Center',\r\n                colId: 'costCenter',\r\n                field: 'costCenter',\r\n            },\r\n\r\n            {\r\n                headerName: 'Payment terms',\r\n                colId: 'paymentTermId',\r\n                field: 'paymentTermId',\r\n                valueFormatter: this.paymentTermFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Tax code',\r\n                colId: 'vatId',\r\n                field: 'vatId',\r\n                valueFormatter: this.vatCodeFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: '',\r\n                hide: true,\r\n                width: 40,\r\n            },\r\n        ];\r\n    }\r\n\r\n    assignValuesToControl() {\r\n        this.docDateFromCtrl.patchValue(_moment(this.accountingDocumentData.documentDate).format(\"DD/MM/YYYY\"));\r\n        const valueDate = _moment(this.accountingDocumentData.valueDate, \"DD-MM-YYYY\");\r\n        if (valueDate.isValid()) {\r\n            this.valueDateFormCtrl.patchValue(_moment(this.accountingDocumentData.valueDate).format(\"DD/MM/YYYY\"));\r\n        }\r\n        this.accPeriodFormCtrl.patchValue(_moment(this.accountingDocumentData.accountingPeriod).format(\"MM/YYYY\"));\r\n        this.currencyCtrl.patchValue(this.accountingDocumentData.currencyCode);\r\n    }\r\n\r\n    isReverseDateBeforeDocumentDate() {\r\n        const dateOne = _moment(this.docDateFromCtrl.value, \"DD-MM-YYYY\");\r\n        const dateTwo = _moment(this.reverseDateFormCtrl.value, \"DD-MM-YYYY\");\r\n        if (dateOne.isValid() && dateTwo.isValid()) {\r\n            const result = isDateTwoBeforeDateOne(dateOne.toDate(), dateTwo.toDate());\r\n            if (result) {\r\n                this.isReversalDateBefore = true;\r\n                this.notifyParentForDisableNextButton.emit(true);\r\n                return result;\r\n            }\r\n            else {\r\n                this.isReversalDateBefore = false;\r\n                this.notifyParentForDisableNextButton.emit(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    isReverseDateAfterCurrentAtlasDate() {\r\n        const dateOne = _moment(this.reverseDateFormCtrl.value, \"DD-MM-YYYY\");\r\n        const dateTwo = _moment(this.companyManager.getCurrentCompanyDate().toDate(), \"DD-MM-YYYY\");\r\n        if (dateOne.isValid() && dateTwo.isValid()) {\r\n            const result = isDateTwoBeforeDateOne(dateOne.toDate(), dateTwo.toDate());\r\n            if (result) {\r\n                this.isReversalDateAfter = true;\r\n                this.notifyParentForDisableNextButton.emit(true);\r\n                return result;\r\n            }\r\n            else {\r\n                this.isReversalDateAfter = false;\r\n                this.notifyParentForDisableNextButton.emit(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    isReverseDateInOtherMonth() {\r\n        const dateOneMonth = _moment(this.docDateFromCtrl.value, \"DD-MM-YYYY\");\r\n        const dateTwoMonth = _moment(this.reverseDateFormCtrl.value, 'DD-MM-YYYY');\r\n        const documentDate = _moment(this.accountingDocDetail.documentDate);\r\n        let valueToPatchForAccPeriod = dateTwoMonth;\r\n        if (dateOneMonth.isValid() && dateTwoMonth.isValid()) {\r\n            const result = (dateOneMonth.toDate().getMonth() == dateTwoMonth.toDate().getMonth())\r\n            if (!result) {\r\n                this.isWarningMessage = true;\r\n                if (this.transactionDocumentTypeId === PostingDocumentType.TA) {\r\n                    this.warningMessage = 'The document will be posted on ' + documentDate.format(\"MM\") + \"/\" + documentDate.format(\"YYYY\");\r\n                    valueToPatchForAccPeriod = documentDate;\r\n                }\r\n                else {\r\n                    this.warningMessage = 'The document will be posted on ' + dateTwoMonth.format(\"MM\") + \"/\" + dateTwoMonth.format(\"YYYY\");\r\n                    valueToPatchForAccPeriod = dateTwoMonth;\r\n                }\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Warning',\r\n                        text: this.warningMessage,\r\n                        okButton: 'Ok',\r\n                    },\r\n                });\r\n                confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.accPeriodFormCtrl.patchValue(_moment(valueToPatchForAccPeriod).format(\"MM/YYYY\"));\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.accPeriodFormCtrl.patchValue(_moment(valueToPatchForAccPeriod).format(\"MM/YYYY\"));\r\n                this.isWarningMessage = false;\r\n                this.warningMessage = \"\";\r\n            }\r\n        } else {\r\n            this.isWarningMessage = false;\r\n            this.warningMessage = '';\r\n        }\r\n    }\r\n\r\n    validateReversalDate() {\r\n        let result: boolean = false;\r\n        let docResult: boolean = false;\r\n        this.isWarningMessage = true;\r\n        this.warningMessage = '';\r\n        this.isReversalDateAfter = false;\r\n        this.isReversalDateBefore = false;\r\n        this.isReversalDateNotInLastDay = false;\r\n\r\n        if (this.transactionDocumentTypeId === PostingDocumentType.TA) {\r\n            docResult = this.checkIfDocumentIsValid();\r\n            if (docResult) {\r\n                result = this.isReverseDateBeforeDocumentDate();\r\n                if (!result) {\r\n                    result = this.isReverseDateAfterCurrentAtlasDate();\r\n                }\r\n                this.isReverseDateInOtherMonth();\r\n            }\r\n            else {\r\n                this.notifyParentForDisableNextButton.emit(true);\r\n            }\r\n        }\r\n        else {\r\n            result = this.isReverseDateBeforeDocumentDate();\r\n            if (!result) {\r\n                result = this.isReverseDateAfterCurrentAtlasDate();\r\n            }\r\n            this.isReverseDateInOtherMonth();\r\n        }\r\n\r\n        const docDate = _moment(this.docDateFromCtrl.value, \"DD-MM-YYYY\");\r\n        const reversalDate = _moment(this.reverseDateFormCtrl.value, \"DD-MM-YYYY\");\r\n        if (docDate.isValid() == false || reversalDate.isValid() == false) {\r\n            this.notifyParentForDisableNextButton.emit(true);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onOkButtonClicked() {\r\n        //this.dialog.close(null);\r\n    }\r\n\r\n    checkIfDocumentIsValid(): boolean {\r\n        let isProceed = true;\r\n        const todayDate = this.companyManager.getCurrentCompanyDate();\r\n        const documentDate = _moment(this.accountingDocDetail.documentDate);\r\n        const reverseDate = _moment(this.reverseDateFormCtrl.value, \"DD-MM-YYYY\");\r\n        let throwErrorNotOpenMonth = false;\r\n        let throwErrorAccountingPeriod = false;\r\n        if (reverseDate.isValid()) {\r\n            const isSameMonthAndYearThanOperationsLastMonthClosed = reverseDate.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                reverseDate.month() === this.operationsLastMonthClosed.getMonth();\r\n            const isLessOrEqualToLastMonthClosed = (reverseDate.year() === this.lastMonthClosed.getFullYear()\r\n                && reverseDate.month() <= this.lastMonthClosed.getMonth())\r\n                || (reverseDate.year() < this.lastMonthClosed.getFullYear());\r\n            const isSameYearLessMonthThanOperationsLastMonthClosed = reverseDate.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n                reverseDate.month() < this.operationsLastMonthClosed.getMonth();\r\n            if (isLessOrEqualToLastMonthClosed) {\r\n                this.snackbarService.informationSnackBar('Not allowed. [' + this.documentReference + '] can not be reversed as the period is closed');\r\n                this.reverseDateFormCtrl.patchValue('');\r\n                isProceed = false;\r\n            } else if (reverseDate < documentDate && documentDate.month() !== reverseDate.month()) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed. Reversal doc. date prior to original document date.');\r\n                this.isReversalDateBefore = true;\r\n                this.isReversalDateNotInLastDay = false;\r\n                this.reverseDateFormCtrl.patchValue('');\r\n                isProceed = false;\r\n            } else if (!(reverseDate.date() === new Date(reverseDate.year(), reverseDate.month() + 1, 0).getDate())) {\r\n                this.snackbarService.throwErrorSnackBar('Document date must be a last month day');\r\n                this.isReversalDateBefore = false;\r\n                this.isReversalDateNotInLastDay = true;\r\n                this.reverseDateFormCtrl.patchValue('');\r\n                isProceed = false;\r\n            } else if (reverseDate.year() === todayDate.year() && reverseDate.month() > todayDate.month()) {\r\n                this.snackbarService.throwErrorSnackBar('Document date cannot be in the future');\r\n                this.reverseDateFormCtrl.patchValue('');\r\n                isProceed = false;\r\n            } else if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n                this.checkIfBetweenLastClosedAndOperations(reverseDate)) {\r\n                throwErrorAccountingPeriod = true;\r\n                isProceed = true;\r\n            } else if (!this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n                isSameMonthAndYearThanOperationsLastMonthClosed) {\r\n                throwErrorNotOpenMonth = true;\r\n                this.reverseDateFormCtrl.patchValue('');\r\n                isProceed = false;\r\n            } else if (!this.checkIfBetweenLastClosedAndOperations(reverseDate) &&\r\n                isSameYearLessMonthThanOperationsLastMonthClosed) {\r\n                this.reverseDateFormCtrl.patchValue('');\r\n                throwErrorNotOpenMonth = true;\r\n                isProceed = false;\r\n            }\r\n\r\n            if (throwErrorNotOpenMonth) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n            }\r\n            if (throwErrorAccountingPeriod) {\r\n                this.snackbarService.informationSnackBar('Last closed accounting period is ' +\r\n                    this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                    this.monthNameForoperationsLastMonthClosed + ' ; please check the accounting period');\r\n            }\r\n        }\r\n        else {\r\n            isProceed = false;\r\n        }\r\n        this.notifyParentForDisableNextButton.emit(!isProceed);\r\n        return isProceed;\r\n    }\r\n\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto): boolean {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel === userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    checkIfBetweenLastClosedAndOperations(date: _moment.Moment): boolean {\r\n        let matchingMonthFound: boolean = false;\r\n        for (let i = 1; i <= this.accountingSetupModel.numberOfOpenPeriod; i++) {\r\n            if (!matchingMonthFound) {\r\n                if (date.year() === this.lastMonthClosed.getFullYear() &&\r\n                    this.lastMonthClosed.getMonth() + i < 12 && date.month() === this.lastMonthClosed.getMonth() + i) {\r\n                    matchingMonthFound = true;\r\n                } else if (date.year() === this.lastMonthClosed.getFullYear() + 1 &&\r\n                    this.lastMonthClosed.getMonth() + i >= 12 && date.month() === this.lastMonthClosed.getMonth() + i - 12) {\r\n                    matchingMonthFound = true;\r\n                }\r\n            }\r\n        }\r\n        return matchingMonthFound;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.getAccountingLinesByAccountingIdSubscription) {\r\n            this.getAccountingLinesByAccountingIdSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         class=\\\"quick-sum-div-height\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\">\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start \\\">\\r\\n            <h3>Original document [{{this.documentReference}}], reversed by Reversal document:\\r\\n                [{{this.reversedDocumentReference}}]</h3>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end\\\">\\r\\n            <button mat-icon-button\\r\\n                    [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n                <i class=\\\"material-icons\\\">more_vert</i>\\r\\n            </button>\\r\\n            <mat-menu #menu1=\\\"matMenu\\\">\\r\\n                <button mat-menu-item\\r\\n                        [matMenuTriggerFor]=\\\"exportMenu\\\"\\r\\n                        (mouseover)=\\\"OnExportButton()\\\">\\r\\n                    <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n                </button>\\r\\n            </mat-menu>\\r\\n            <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                    <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n                </button>\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                    <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n                </button>\\r\\n            </mat-menu>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         class=\\\"quick-sum-div-height\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\">\\r\\n        <div class=\\\"create-accounting-document-fields\\\">\\r\\n            <div fxLayout=\\\"column\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\"\\r\\n                     fxLayoutGap=\\\"10px\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Document Date\\\"\\r\\n                               [formControl]='docDateFromCtrl'\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly=\\\"true\\\">\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Value Date\\\"\\r\\n                               readonly=\\\"true\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]='valueDateFormCtrl'>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\"\\r\\n                     fxLayoutGap=\\\"10px\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Accounting Period\\\"\\r\\n                               readonly=\\\"true\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]='accPeriodFormCtrl'>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field>\\r\\n                        <mat-label>Currency</mat-label>\\r\\n                        <input matInput\\r\\n                               [formControl]='currencyCtrl'\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               readonly=\\\"true\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxFlex=\\\"98.5\\\">\\r\\n            <div ag-grid=\\\"reverseDocumntSummaryGridOptions\\\">\\r\\n                <ag-grid-angular class=\\\"ag-theme-material grid-size\\\"\\r\\n                                 [rowData]=\\\"accountingDocumentLine\\\"\\r\\n                                 [columnDefs]=\\\"reverseDocumentSummaryGridCols\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [pagination]=\\\"false\\\"\\r\\n                                 [paginationPageSize]=\\\"20\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 enableFilter=\\\"false\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start end\\\"\\r\\n                 class=\\\"total-amount-content\\\">\\r\\n                <mat-card-subtitle class=\\\"total-figure\\\">Total Amount:\\r\\n                    <span class=\\\"total-figure-value\\\">{{totalAmount}}</span> </mat-card-subtitle>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { AccountingDocumentLine } from '../../../../../shared/entities/accounting-document-line.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CostType } from '../../../../../shared/entities/cost-type.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { PostingManagement } from '../../../../../shared/entities/posting-management.entity';\r\nimport { PostingDocumentType } from '../../../../../shared/enums/posting-document-type.enum';\r\nimport { PostingManagementDisplayView } from '../../../../../shared/models/posting-management-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-reverse-document-summary',\r\n    templateUrl: './reverse-document-summary.component.html',\r\n    styleUrls: ['./reverse-document-summary.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class ReverseDocumentSummaryComponent implements OnInit, OnDestroy {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    reverseDocumentSummaryGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    currentStep: number = 0;\r\n    company: string;\r\n    accountingDocumentLine: AccountingDocumentLine[];\r\n    documentRefData: PostingManagementDisplayView[];\r\n    accountingDocumentData: PostingManagement;\r\n    docDateFromCtrl = new AtlasFormControl('docDateFromCtrl');\r\n    valueDateFormCtrl = new AtlasFormControl('valueDateFormCtrl');\r\n    accPeriodFormCtrl = new AtlasFormControl('accPeriodFormCtrl');\r\n    currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n    totalAmount: number = 0;\r\n    private getAccountingLinesByAccountingIdSubscription: Subscription;\r\n    @Input() accountingId: number;\r\n    @Input() documentReferenceId: number;\r\n    @Input() documentReference: string;\r\n    @Input() reversedDocumentReference: string;\r\n    @Input() transactionDocumentTypeId: number;\r\n    masterdata: MasterData;\r\n    costTypes: CostType[];\r\n    departments: Department[];\r\n    amountFormat: string = 'en-US';\r\n    userActiveDirectoryName: string;\r\n    screenName: string = 'ReverseDocumentSummary';\r\n    reverseDocumentDate: Date;\r\n    accountingPeriod: Date;\r\n    transactionDocumentIdFromRoute: number;\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private preaccountingService: PreaccountingService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService) {\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.totalAmount = 0;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.transactionDocumentIdFromRoute = Number(this.route.snapshot.paramMap.get('transactionDocumentId'));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.initializeGridColumns();\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        if (this.transactionDocumentIdFromRoute) {\r\n            this.documentReferenceId = this.transactionDocumentIdFromRoute;\r\n            this.route.queryParams.subscribe((params) => {\r\n                this.reversedDocumentReference = params['originalReference'];\r\n                this.documentReference = params['documentReference'];\r\n                this.titleService.setTitle(this.reversedDocumentReference + '- Reverse Summary View');\r\n            });\r\n            this.getAccountingLinesByAccountingId();\r\n        }\r\n    }\r\n\r\n    getAccountingLinesByAccountingId() {\r\n        if (this.accountingId || this.transactionDocumentIdFromRoute) {\r\n            this.getAccountingLinesByAccountingIdSubscription = (this.preaccountingService.getAccoutingDocumentAllData(this.documentReferenceId).pipe(\r\n                map((data) => {\r\n                    this.documentRefData = data.value.map((docRef) => {\r\n                        return new PostingManagementDisplayView(docRef);\r\n                    });\r\n                    this.accountingDocumentData = this.documentRefData[0];\r\n                    if (this.accountingDocumentData) {\r\n                        this.accountingDocumentLine = this.accountingDocumentData.accountingDocumentLines;\r\n                        this.assignValuesToControl();\r\n                    }\r\n                }))\r\n                .subscribe());\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.reverseDocumentSummaryGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.agGridApi.setRowData([]);\r\n    }\r\n\r\n    currencyFormatterInGrid(params) {\r\n        if (params.value > 0) {\r\n            params.value = -Math.abs(params.value);\r\n        } else {\r\n            params.value = Math.abs(params.value);\r\n        }\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n\r\n    currencyFormatterForTotalInGrid(totalAmount: number) {\r\n        return (params) => {\r\n\r\n            if (params.value > 0) {\r\n                params.value = -Math.abs(params.value);\r\n            } else {\r\n                params.value = Math.abs(params.value);\r\n            }\r\n\r\n            this.totalAmount += params.value;\r\n            if (isNaN(params.value) || params.value === null) { return ''; }\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n        };\r\n    }\r\n\r\n    costTypeFormatter(params): string {\r\n        if (params.value && this.masterdata.costTypes) {\r\n            const costTypeList = this.masterdata.costTypes.find((x) => x.costTypeId === params.value);\r\n            if (costTypeList) {\r\n                return costTypeList.costTypeCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    departmentValueFormatter(params): string {\r\n        if (params.value && this.masterdata.departments) {\r\n            return this.masterdata.departments.find((x) => x.departmentId === params.value).description;\r\n\r\n        }\r\n        return '';\r\n    }\r\n\r\n    commodityFormatter(params): string {\r\n        if (params.value && this.masterdata.commodities) {\r\n            const commodityList = this.masterdata.commodities.find((x) => x.commodityId === params.value);\r\n            if (commodityList) {\r\n                return commodityList.commodityCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    accountLineTypeFormatter(params): string {\r\n        if (params.value && this.masterdata.accountLineTypes) {\r\n            const accountLineTypes = this.masterdata.accountLineTypes.find((x) => x.accountLineTypeId === params.value);\r\n            if (accountLineTypes) {\r\n                return accountLineTypes.accountLineTypeCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    paymentTermFormatter(params): string {\r\n        if (params.value && this.masterdata.paymentTerms) {\r\n            const paymentTermsList = this.masterdata.paymentTerms.find((x) => x.paymentTermsId === params.value);\r\n            if (paymentTermsList) {\r\n                return paymentTermsList.paymentTermCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    vatCodeFormatter(params): string {\r\n        if (params.value && this.masterdata.vats) {\r\n            const vatList = this.masterdata.vats.find((x) => x.vatId === params.value);\r\n            if (vatList) {\r\n                return vatList.vatCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.reverseDocumentSummaryGridCols = [\r\n            {\r\n                headerName: 'Nominal acc.',\r\n                colId: 'accountReference',\r\n                field: 'accountReference',\r\n            },\r\n            {\r\n                headerName: 'Associated Acc.',\r\n                colId: 'associatedAccountCode',\r\n                field: 'associatedAccountCode',\r\n            },\r\n            {\r\n                headerName: 'Acc. L. Type',\r\n                colId: 'accountLineTypeId',\r\n                field: 'accountLineTypeId',\r\n                valueFormatter: this.accountLineTypeFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cost types',\r\n                colId: 'costTypeId',\r\n                field: 'costTypeId',\r\n                valueFormatter: this.costTypeFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                colId: 'amount',\r\n                type: 'numericColumn',\r\n                field: 'amount',\r\n                valueFormatter: this.currencyFormatterForTotalInGrid(this.totalAmount),\r\n            },\r\n            {\r\n                headerName: 'Statutory currency',\r\n                colId: 'statutoryCurrency',\r\n                field: 'statutoryCurrency',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.currencyFormatterInGrid.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Functional currency',\r\n                colId: 'functionalCurrency',\r\n                field: 'functionalCurrency',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.currencyFormatterInGrid.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                colId: 'narrative',\r\n                field: 'narrative',\r\n            },\r\n            {\r\n                headerName: 'Department',\r\n                colId: 'departmentId',\r\n                field: 'departmentId',\r\n                valueFormatter: this.departmentValueFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Sec. Doc. ref',\r\n                colId: 'secDocReference',\r\n                field: 'secDocReference',\r\n            },\r\n            {\r\n                headerName: 'Ext. Doc. Ref',\r\n                colId: 'extDocReference',\r\n                field: 'extDocReference',\r\n            },\r\n            {\r\n                headerName: 'Contract ref.',\r\n                colId: 'clientReference',\r\n                field: 'clientReference',\r\n            },\r\n\r\n            {\r\n                headerName: 'Commodity',\r\n                colId: 'commodityId',\r\n                field: 'commodityId',\r\n                valueFormatter: this.commodityFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                colId: 'charter',\r\n                field: 'charter',\r\n            },\r\n            {\r\n                headerName: 'Cost Center',\r\n                colId: 'costCenter',\r\n                field: 'costCenter',\r\n            },\r\n\r\n            {\r\n                headerName: 'Payment terms',\r\n                colId: 'paymentTermId',\r\n                field: 'paymentTermId',\r\n                valueFormatter: this.paymentTermFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Tax code',\r\n                colId: 'vatId',\r\n                field: 'vatId',\r\n                valueFormatter: this.vatCodeFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: '',\r\n                hide: true,\r\n                width: 40,\r\n            },\r\n        ];\r\n    }\r\n\r\n    assignValuesToControl() {\r\n        if (this.transactionDocumentTypeId !== PostingDocumentType.TA) {\r\n            this.docDateFromCtrl.patchValue(_moment(this.reverseDocumentDate).format('DD/MM/YYYY'));\r\n        } else {\r\n            this.docDateFromCtrl.patchValue(_moment(this.accountingDocumentData.documentDate).format('DD/MM/YYYY'));\r\n        }\r\n        const valueDate = _moment(this.accountingDocumentData.valueDate, 'DD-MM-YYYY');\r\n        if (valueDate.isValid()) {\r\n            this.valueDateFormCtrl.patchValue(_moment(this.accountingDocumentData.valueDate).format('DD/MM/YYYY'));\r\n        }\r\n        this.accPeriodFormCtrl.patchValue(this.accountingPeriod ? this.accountingPeriod : _moment(this.accountingDocumentData.accountingPeriod).format('MM/YYYY'));\r\n        this.currencyCtrl.patchValue(this.accountingDocumentData.currencyCode);\r\n    }\r\n\r\n    OnExportButton() {\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        this.agGridOptions.api.exportDataAsExcel(this.getExportParams('.xlsx'));\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        this.agGridOptions.api.exportDataAsCsv(this.getExportParams('.csv'));\r\n    }\r\n\r\n    getExportParams(fileExtension) {\r\n        const now = new Date();\r\n        const currentDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: currentDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + fileExtension,\r\n        };\r\n        return params;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.getAccountingLinesByAccountingIdSubscription) {\r\n            this.getAccountingLinesByAccountingIdSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n\\r\\n    <h2>Accounting document reversal</h2>\\r\\n\\r\\n    <mat-horizontal-stepper [linear]\\r\\n                            (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                            #stepper>\\r\\n        <ng-template matStepperIcon=\\\"edit\\\">\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </ng-template>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Selection</ng-template>\\r\\n            <atlas-cash-selection-form-component #selectionFormComponent>\\r\\n            </atlas-cash-selection-form-component>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start start\\\">\\r\\n                <mat-card fxFlex=\\\"100%\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"start none\\\"\\r\\n                         class=\\\"search\\\">\\r\\n                        <atlas-masterdata-user-preferences-input fxFlex=\\\"100%\\\"\\r\\n                                                                 class=\\\"contextual-search-for-currency\\\"\\r\\n                                                                 isEditable=\\\"true\\\"\\r\\n                                                                 [fieldControl]=\\\"documentCtrl\\\"\\r\\n                                                                 label=\\\"Document\\\"\\r\\n                                                                 [options]=\\\"filteredDocumentReferences\\\"\\r\\n                                                                 displayProperty=\\\"documentReference\\\"\\r\\n                                                                 [selectProperties]=\\\"['documentReference']\\\"\\r\\n                                                                 lightBoxTitle=\\\"Results for Document\\\"\\r\\n                                                                 gridId=\\\"documentReferenceGrid\\\"\\r\\n                                                                 (valueChange)='valueChanged($event)'\\r\\n                                                                 (optionSelected)=\\\"valueChanged($event)\\\"\\r\\n                                                                 (keyup.enter)=\\\"OnChangeValue($event)\\\"\\r\\n                                                                 isSearchBar=\\\"true\\\">\\r\\n                        </atlas-masterdata-user-preferences-input>\\r\\n                    </div>\\r\\n                </mat-card>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\">\\r\\n                <mat-card fxFlex=\\\"100\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between\\\"\\r\\n                         class=\\\"atlas-grid-card-header\\\">\\r\\n                        <span class=\\\"fill-space\\\"> </span>\\r\\n                    </div>\\r\\n                    <h2 class=\\\"header-accounting-entries\\\">{{noOfAccountingEntries}} Accounting Entries Found</h2>\\r\\n                    <div ag-grid=\\\"reverseDocumntGridOptions\\\">\\r\\n                        <ag-grid-angular class=\\\"ag-theme-material grid-size\\\"\\r\\n                                         [rowData]=\\\"accountingDocumentLine\\\"\\r\\n                                         [columnDefs]=\\\"reverseDocumentGridCols\\\"\\r\\n                                         domLayout=\\\"autoHeight\\\"\\r\\n                                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                         [pagination]=\\\"false\\\"\\r\\n                                         [paginationPageSize]=\\\"20\\\"\\r\\n                                         [enableSorting]=\\\"true\\\"\\r\\n                                         [enableColResize]=\\\"true\\\"\\r\\n                                         enableFilter=\\\"false\\\"\\r\\n                                         [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                        </ag-grid-angular>\\r\\n                    </div>\\r\\n                </mat-card>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onSelectionDiscardButtonClicked()\\\">\\r\\n                        CANCEL\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"start \\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start \\\">\\r\\n                        <button mat-raised-button\\r\\n                                [disabled]=\\\"this.accountingDocumentLine == null || this.accountingDocumentLine.length == 0 || this.disableNextButton\\\"\\r\\n                                (click)=\\\"onSelectionNextButtonClicked()\\\">\\r\\n                            Next\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Create</ng-template>\\r\\n            <atlas-reverse-document-create #reverseDocumentCreateComponent\\r\\n                                           (notifyParentForDisableNextButton)=\\\"getDisabledState($event)\\\"\\r\\n                                           [accountingId]='accountingId'\\r\\n                                           [transactionDocumentId]='transactionDocumentId'\\r\\n                                           [transactionDocumentTypeId]='transactionDocumentTypeId'\\r\\n                                           [documentReference]='documentReference'>\\r\\n            </atlas-reverse-document-create>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between start\\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onCreateCancelButtonClicked()\\\">\\r\\n                            CANCEL\\r\\n                        </button>\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onCreatePreviousButtonClicked()\\\">\\r\\n                            Previous\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"end center\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                [disabled]=\\\"disableButton\\\"\\r\\n                                (click)=\\\"onCreateNextButtonClicked()\\\">\\r\\n                            Next\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n        <mat-step>\\r\\n            <ng-template matStepLabel>Summary</ng-template>\\r\\n            <atlas-reverse-document-summary #revervseDocumentSummaryComponent\\r\\n                                            [accountingId]='accountingId'\\r\\n                                            [transactionDocumentTypeId]='transactionDocumentTypeId'\\r\\n                                            [documentReferenceId]='transactionDocumentId'\\r\\n                                            [documentReference]='documentReference'\\r\\n                                            [reversedDocumentReference]='reversedDocumentReference'>\\r\\n            </atlas-reverse-document-summary>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\"\\r\\n                 class=\\\"button-details\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\">\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column \\\"\\r\\n                     fxLayoutAlign=\\\"end center\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onSummaryFinishButtonClicked()\\\">\\r\\n                            Finish\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-step>\\r\\n    </mat-horizontal-stepper>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\\r\\n\"","module.exports = \".contextual-search-for-document {\\n  width: 400px; }\\n\\n.mat-stepper-horizontal {\\n  background-color: transparent; }\\n\\n.header-accounting-entries {\\n  margin-left: 20px; }\\n\"","import { Component, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatMenuTrigger, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AccountingEntriesSearchResult } from '../../../../shared/dtos/accountingEntries-search-result';\r\nimport { DocumentReferenceSearchResult } from '../../../../shared/dtos/list-and-search/document-reference-search-result';\r\nimport { AccountingSetup } from '../../../../shared/entities/accounting-setup.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { CreateTransactionDocument } from '../../../../shared/entities/create-transaction-document.entity';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { ManualJournalLine } from '../../../../shared/entities/manual-journal-document-line.entity';\r\nimport { ManualJournalDocument } from '../../../../shared/entities/manual-journal-document.entity';\r\nimport { PostingManagement } from '../../../../shared/entities/posting-management.entity';\r\nimport { ReversalAccountingDocument } from '../../../../shared/entities/reversal-accounting-document.entity';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { PostingDocumentType } from '../../../../shared/enums/posting-document-type.enum';\r\nimport { ReversalDocumentDisplayView } from '../../../../shared/models/reversal-document-display-view';\r\nimport { TransactionDetailDisplayView } from '../../../../shared/models/transaction-detail-display-view';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { PreaccountingService } from '../../../../shared/services/http-services/preaccounting.service';\r\nimport { DocumentReferenceDataLoader } from '../../../../shared/services/preaccounting/document-reference-data-loader';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { ReverseDocumentCreateComponent } from './reverse-document-create/reverse-document-create.component';\r\nimport { ReverseDocumentSummaryComponent } from './reverse-document-summary/reverse-document-summary.component';\r\n\r\n@Component({\r\n    selector: 'atlas-reverse-document',\r\n    templateUrl: './reverse-document.component.html',\r\n    styleUrls: ['./reverse-document.component.scss'],\r\n    providers: [DocumentReferenceDataLoader],\r\n})\r\n\r\nexport class ReverseDocumentComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild(ReverseDocumentCreateComponent) childReverseDocumentCreateComponent: ReverseDocumentCreateComponent;\r\n    @ViewChild(ReverseDocumentSummaryComponent) childReverseDocumentSummaryComponent: ReverseDocumentSummaryComponent;\r\n    reverseDocumentGridCols: agGrid.ColDef[];\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    currentStep: number = 0;\r\n    company: string;\r\n    filteredDocumentReferences: DocumentReferenceSearchResult[];\r\n    allDocumentReferences: DocumentReferenceSearchResult[];\r\n    searchTerm: string;\r\n    searchForm: FormGroup;\r\n    accountingId: number;\r\n    accountingDocumentLine: AccountingEntriesSearchResult[];\r\n    documentRefData: ReversalDocumentDisplayView[];\r\n    accountingDocumentData: ReversalAccountingDocument;\r\n    documentCtrl = new AtlasFormControl('documentCtrl');\r\n    createDocumentFormGroup: FormGroup;\r\n    private getAccountingLinesByDocumentIdSubscription: Subscription;\r\n    private getTransactionDetailSunscription: Subscription;\r\n    transactionData: TransactionDetailDisplayView[];\r\n    transactionDocumentId: number;\r\n    documentReference: string;\r\n    reversedDocumentReference: string;\r\n    reversedTransactionDocumentId: number;\r\n    transactionDocumentTypeId: number;\r\n    disableButton: boolean = true;\r\n    disableNextButton: boolean = true;\r\n    isSave: boolean = false;\r\n    createAccountingDocumentLines: ManualJournalLine[] = [];\r\n    reverseManualJournalDocument: ManualJournalDocument;\r\n    createTransactionDocument: CreateTransactionDocument;\r\n    subscription: Subscription[] = [];\r\n    noOfAccountingEntries: number = 0;\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n\r\n    warningMessage: string;\r\n    isWarningMessage: boolean;\r\n    isReversalDateBefore: boolean;\r\n    isReversalDateAfter: boolean;\r\n    isAccrualDocument: boolean = false;\r\n\r\n    accountingDocDetail: PostingManagement;\r\n    accountingSetupModel: AccountingSetup;\r\n    operationsLastMonthClosed: Date;\r\n    lastMonthClosed: Date;\r\n    isAnyAmountColumnZero: boolean = false;\r\n    actionResult: boolean = false;\r\n    monthNameForlastMonthClosed: string;\r\n    monthNameForoperationsLastMonthClosed: string;\r\n    documentDateSelected: Date;\r\n    monthNames: string[] = ['January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December'];\r\n    postOpClosedPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'POSTOPCLOSED',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'POSTINGMGT',\r\n    };\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected utilService: UtilService,\r\n        public documentReferenceDataLoader: DocumentReferenceDataLoader,\r\n        private formBuilder: FormBuilder,\r\n        private snackbarService: SnackbarService,\r\n        private uiService: UiService,\r\n        private preaccountingService: PreaccountingService,\r\n        private executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected dialog: MatDialog,\r\n        private authorizationService: AuthorizationService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected lockService: LockService,\r\n        private titleService: TitleService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.searchForm = this.formBuilder.group({\r\n            searchReferenceCtrl: ['', Validators.required],\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.initializeGridColumns();\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n\r\n        this.documentReferenceDataLoader.getData().subscribe((documents) => {\r\n            this.filteredDocumentReferences = documents;\r\n            this.allDocumentReferences = documents;\r\n        });\r\n\r\n        this.documentCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDocumentReferences = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.allDocumentReferences,\r\n                ['documentReference'],\r\n            );\r\n        });\r\n\r\n        this.subscription.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n                this.operationsLastMonthClosed = new Date(new\r\n                    Date(this.accountingSetupModel.lastMonthClosedForOperation).toDateString());\r\n                this.lastMonthClosed = new Date(new\r\n                    Date(this.accountingSetupModel.lastMonthClosed).toDateString());\r\n                this.monthNameForlastMonthClosed = this.monthNames[this.lastMonthClosed.getMonth()];\r\n                this.monthNameForoperationsLastMonthClosed = this.monthNames[this.operationsLastMonthClosed.getMonth()];\r\n            }));\r\n\r\n        this.getFormGroup();\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.createDocumentFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.createDocumentFormGroup = this.formBuilder.group({\r\n            documentCtrl: this.documentCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.reverseDocumentGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.agGridApi.setRowData([]);\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.reverseDocumentGridCols = [\r\n            {\r\n                headerName: 'Doc. Ref.',\r\n                field: 'documentReference',\r\n                colId: 'documentReference',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Posting Line No',\r\n                field: 'postingLineId',\r\n                colId: 'postingLineId',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Nom. Account',\r\n                field: 'nomAccount',\r\n                colId: 'nomAccount',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Match Flag',\r\n                field: 'matchFlag',\r\n                colId: 'matchFlag',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Client Ref.',\r\n                field: 'clientReference',\r\n                colId: 'clientReference',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costType',\r\n                colId: 'costType',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Cost Center',\r\n                field: 'costCenter',\r\n                colId: 'costCenter',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'DMS ID',\r\n                field: 'dmsId',\r\n                colId: 'dmsId',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'amount',\r\n                colId: 'amount',\r\n                type: 'numericColumn',\r\n                valueFormatter: this.NumberFormatterForTotalInGrid.bind(this),\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Dept',\r\n                field: 'department',\r\n                colId: 'department',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Associate A/c',\r\n                field: 'associatedAccountCode',\r\n                colId: 'associatedAccountCode',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Payment Terms',\r\n                field: 'paymentTerm',\r\n                colId: 'paymentTerm',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract No',\r\n                field: 'contractSectionCode',\r\n                colId: 'contractSectionCode',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Sec. Ref.',\r\n                field: 'sectionReference',\r\n                colId: 'sectionReference',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Ccy',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Acc. Period',\r\n                field: 'accountingPeriod',\r\n                colId: 'accountingPeriod',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Doc. Date',\r\n                field: 'documentDate',\r\n                colId: 'documentDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Value Date',\r\n                field: 'valueDate',\r\n                colId: 'valueDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Posted Date',\r\n                field: 'postedDate',\r\n                colId: 'postedDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Functional Currency',\r\n                field: 'functionalCurrency',\r\n                colId: 'functionalCurrency',\r\n                hide: false,\r\n                editable: false,\r\n                type: 'numericColumn',\r\n                valueFormatter: this.NumberFormatterForTotalInGrid.bind(this)\r\n            },\r\n            {\r\n                headerName: 'Statutory Currency',\r\n                field: 'statutoryCurrency',\r\n                colId: 'statutoryCurrency',\r\n                hide: false,\r\n                editable: false,\r\n                type: 'numericColumn',\r\n                valueFormatter: this.NumberFormatterForTotalInGrid.bind(this)\r\n            },\r\n            {\r\n                headerName: 'Secure Payment',\r\n                field: 'securePayment',\r\n                colId: 'securePayment',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'VAT TurnOver',\r\n                field: 'vatTurnover',\r\n                colId: 'vatTurnover',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Account Category',\r\n                field: 'accountCategory',\r\n                colId: 'accountCategory',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Province',\r\n                field: 'province',\r\n                colId: 'province',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Pre-match',\r\n                field: 'preMatch',\r\n                colId: 'preMatch',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Interface Status',\r\n                field: 'interfaceStatus',\r\n                colId: 'interfaceStatus',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Original Ref.',\r\n                field: 'originalReferenceId',\r\n                colId: 'originalReferenceId',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Payee',\r\n                field: 'payee',\r\n                colId: 'payee',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'R.O.E.',\r\n                field: 'roe',\r\n                colId: 'roe',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'ROE Type M/D',\r\n                field: 'roeType',\r\n                colId: 'roeType',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Commodity',\r\n                field: 'commodity',\r\n                colId: 'commodity',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Accrual Number',\r\n                field: 'accuralNumber',\r\n                colId: 'accuralNumber',\r\n                type: 'numericColumn',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Back Office Doc ID',\r\n                field: 'backOfficeDocId',\r\n                colId: 'backOfficeDocId',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'GL Date(BL Date)',\r\n                field: 'glDate',\r\n                colId: 'glDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Back Office Posting Date',\r\n                field: 'backOfficePostingDate',\r\n                colId: 'backOfficePostingDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Document Type',\r\n                field: 'documentType',\r\n                colId: 'documentType',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Payment Trax ID',\r\n                field: 'paymentTraxId',\r\n                colId: 'paymentTraxId',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'ptime',\r\n                field: 'postedTime',\r\n                colId: 'postedTime',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Setup User',\r\n                field: 'setupUser',\r\n                colId: 'setupUser',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Setup Date',\r\n                field: 'setupDate',\r\n                colId: 'setupDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Setup Time',\r\n                field: 'setupTime',\r\n                colId: 'setupTime',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Original Value Date',\r\n                field: 'originalValueDate',\r\n                colId: 'originalValueDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Tax Code',\r\n                field: 'vatCode',\r\n                colId: 'vatCode',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Match Date',\r\n                field: 'matchDate',\r\n                colId: 'matchDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Match Time',\r\n                field: 'matchTime',\r\n                colId: 'matchTime',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Payment Document date',\r\n                field: 'paymentDocumentdate',\r\n                colId: 'paymentDocumentdate',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Inhouse/External',\r\n                field: 'inhouseExternal',\r\n                colId: 'inhouseExternal',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Account Line Type',\r\n                field: 'accountLineType',\r\n                colId: 'accountLineType',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charter',\r\n                colId: 'charter',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Cmy Description',\r\n                field: 'contractCommodityDescription',\r\n                colId: 'contractCommodityDescription',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Cmy Type',\r\n                field: 'contractCommodityType',\r\n                colId: 'contractCommodityType',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract IncoTerms',\r\n                field: 'contractIncoTerms',\r\n                colId: 'contractIncoTerms',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract BL Date',\r\n                field: 'contractBLDate',\r\n                colId: 'contractBLDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Client Group A/c',\r\n                field: 'clientGroupAccount',\r\n                colId: 'clientGroupAccount',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Group No',\r\n                field: 'contractGroupNumber',\r\n                colId: 'contractGroupNumber',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Port Origin',\r\n                field: 'contractPortOrigin',\r\n                colId: 'contractPortOrigin',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Port Dest',\r\n                field: 'contractPortDestination',\r\n                colId: 'contractPortDestination',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract IncoTerm Port',\r\n                field: 'contractIntercomPort',\r\n                colId: 'contractIntercomPort',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Shipping Period',\r\n                field: 'contractShippingPeriod',\r\n                colId: 'contractShippingPeriod',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Trader',\r\n                field: 'contractTrader',\r\n                colId: 'contractTrader',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Vessel',\r\n                field: 'contractVessel',\r\n                colId: 'contractVessel',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Contract Vessel IMO',\r\n                field: 'contractVesselImo',\r\n                colId: 'contractVesselImo',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Accounting Date',\r\n                field: 'accountingDate',\r\n                colId: 'accountingDate',\r\n                hide: false,\r\n                valueFormatter: (params) => this.uiService.dateFormatter(params),\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Weight (in MT)',\r\n                field: 'weight',\r\n                colId: 'weight',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n        ];\r\n    }\r\n\r\n    onSelectionDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        this.onCancelWarning();\r\n    }\r\n\r\n    onSelectionNextButtonClicked() {\r\n        this.lockService.isLockedAccountingDocument(this.accountingId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n                    this.lockService.lockAccountingDocument(this.accountingId, LockFunctionalContext.AccountingDocumentReversal).pipe(takeUntil(this.destroy$)).subscribe((lockState) => {\r\n                        this.childReverseDocumentCreateComponent.getAccountingLinesByAccountingId();\r\n                        if (this.currentStep === 0) {\r\n                            this.stepper.next();\r\n                        }\r\n                        this.startLockRefresh(this.accountingId, this.documentReference);\r\n                        this.titleService.setTitle(this.documentReference + ' - Create Reversal');\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    validateReversalDate() {\r\n        let docResult: boolean = false;\r\n        if (this.transactionDocumentTypeId === PostingDocumentType.TA) {\r\n            docResult = this.checkIfDocumentIsValid();\r\n        } else {\r\n            docResult = true;\r\n        }\r\n        return docResult;\r\n    }\r\n\r\n    checkIfDocumentIsValid(): boolean {\r\n        let isProceed = true;\r\n        const todayDate = this.companyManager.getCurrentCompanyDate();\r\n        const documentDate = _moment(this.accountingDocumentData.accountingDocumentLines[0].documentDate);\r\n        let throwErrorNotOpenMonth = false;\r\n        let throwErrorAccountingPeriod = false;\r\n        const isSameMonthAndYearThanOperationsLastMonthClosed = documentDate.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n            documentDate.month() === this.operationsLastMonthClosed.getMonth();\r\n        const isLessOrEqualToLastMonthClosed = (documentDate.year() === this.lastMonthClosed.getFullYear()\r\n            && documentDate.month() <= this.lastMonthClosed.getMonth())\r\n            || (documentDate.year() < this.lastMonthClosed.getFullYear());\r\n        const isSameYearLessMonthThanOperationsLastMonthClosed = documentDate.year() === this.operationsLastMonthClosed.getFullYear() &&\r\n            documentDate.month() < this.operationsLastMonthClosed.getMonth();\r\n        if (isLessOrEqualToLastMonthClosed) {\r\n            this.snackbarService.informationSnackBar('Not allowed. [' + this.documentReference + '] can not be reversed as the period is closed');\r\n            isProceed = false;\r\n        } else if ((documentDate <= this.companyManager.getCurrentCompanyDate() || documentDate.month() === todayDate.month()) &&\r\n            !(documentDate.date() === new Date(documentDate.year(), documentDate.month() + 1, 0).getDate())) {\r\n            this.snackbarService.throwErrorSnackBar('Document date must be a last month day');\r\n            isProceed = false;\r\n        } else if (documentDate.year() === todayDate.year() && documentDate.month() > todayDate.month()) {\r\n            this.snackbarService.throwErrorSnackBar('Document date cannot be in the future');\r\n            isProceed = false;\r\n        } else if (this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n            this.checkIfBetweenLastClosedAndOperations(documentDate)) {\r\n            throwErrorAccountingPeriod = true;\r\n            isProceed = true;\r\n        } else if (!this.checkIfUserHasRequiredPrivileges(this.postOpClosedPrivilege) &&\r\n            isSameMonthAndYearThanOperationsLastMonthClosed) {\r\n            throwErrorNotOpenMonth = true;\r\n            isProceed = false;\r\n        } else if (!this.checkIfBetweenLastClosedAndOperations(documentDate) &&\r\n            isSameYearLessMonthThanOperationsLastMonthClosed) {\r\n            throwErrorNotOpenMonth = true;\r\n            isProceed = false;\r\n        }\r\n\r\n        if (throwErrorNotOpenMonth) {\r\n            this.snackbarService.throwErrorSnackBar('Not allowed: Last closed accounting period is ' +\r\n                this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                this.monthNameForoperationsLastMonthClosed + '; The document date and the accounting period must be in an open month');\r\n        }\r\n        if (throwErrorAccountingPeriod) {\r\n            this.snackbarService.informationSnackBar('Last closed accounting period is ' +\r\n                this.monthNameForlastMonthClosed + ' and Last month closed for operation is ' +\r\n                this.monthNameForoperationsLastMonthClosed + ' ; please check the accounting period');\r\n        }\r\n\r\n        return isProceed;\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto): boolean {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel === userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    checkIfBetweenLastClosedAndOperations(date: _moment.Moment): boolean {\r\n        let matchingMonthFound: boolean = false;\r\n        for (let i = 1; i <= this.accountingSetupModel.numberOfOpenPeriod; i++) {\r\n            if (!matchingMonthFound) {\r\n                if (date.year() === this.lastMonthClosed.getFullYear() &&\r\n                    this.lastMonthClosed.getMonth() + i < 12 && date.month() === this.lastMonthClosed.getMonth() + i) {\r\n                    matchingMonthFound = true;\r\n                } else if (date.year() === this.lastMonthClosed.getFullYear() + 1 &&\r\n                    this.lastMonthClosed.getMonth() + i >= 12 && date.month() === this.lastMonthClosed.getMonth() + i - 12) {\r\n                    matchingMonthFound = true;\r\n                }\r\n            }\r\n        }\r\n        return matchingMonthFound;\r\n    }\r\n\r\n    onCreateCancelButtonClicked() {\r\n        this.isSave = true;\r\n        this.onCancelWarning();\r\n    }\r\n\r\n    onCreatePreviousButtonClicked() {\r\n        this.isSave = true;\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onCreateNextButtonClicked() {\r\n        this.childReverseDocumentSummaryComponent.getAccountingLinesByAccountingId();\r\n        this.createTransactionDocument = new CreateTransactionDocument();\r\n        this.createTransactionDocument.transactionDocumentTypeId = this.transactionDocumentTypeId;\r\n        this.createTransactionDocument.transactionDocumentId = this.transactionDocumentId;\r\n        this.createTransactionDocument.documentDate = this.transactionDocumentTypeId !== PostingDocumentType.TA ? _moment(this.childReverseDocumentCreateComponent.reverseDateFormCtrl.value, 'DD-MM-YYYY').toDate() : _moment(this.childReverseDocumentCreateComponent.docDateFromCtrl.value, 'DD-MM-YYYY').toDate();\r\n        this.createTransactionDocument.currencyCode = this.childReverseDocumentCreateComponent.currencyCtrl.value;\r\n        this.createTransactionDocument.authorizedForPosting = false;\r\n        this.createTransactionDocument.toInterface = this.childReverseDocumentCreateComponent.interfaceCtrl.value;\r\n\r\n        this.childReverseDocumentSummaryComponent.reverseDocumentDate = _moment(this.childReverseDocumentCreateComponent.reverseDateFormCtrl.value, 'DD-MM-YYYY').toDate();\r\n        this.childReverseDocumentSummaryComponent.accountingPeriod = this.childReverseDocumentCreateComponent.accPeriodFormCtrl.value;\r\n\r\n        this.createTransactionDocument.physicalDocumentId =\r\n\r\n            this.subscription.push(this.executionService.CreateTransactionDocument(this.createTransactionDocument).subscribe((data) => {\r\n                this.reversedDocumentReference = data.documentReference;\r\n                this.reversedTransactionDocumentId = data.transactionDocumentId;\r\n            }));\r\n\r\n        this.stepper.next();\r\n        this.titleService.setTitle(this.documentReference + ' - Summary Accounting Document Reversal');\r\n    }\r\n\r\n    onSummaryFinishButtonClicked() {\r\n        this.isSave = true;\r\n        // this.preaccountingService.createAccountingDocument(this.reversedTransactionDocumentId).subscribe((data) => {\r\n        //     this.router.navigate([this.company + '/financial/accounting/entries']);\r\n        // });\r\n\r\n        this.router.navigate([this.company + '/financial/accounting/entries']);\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    displayNotFoundError() {\r\n        this.agGridApi.setRowData([]);\r\n        this.accountingId = null;\r\n        this.documentReference = null;\r\n        this.accountingDocumentLine = [];\r\n        this.snackbarService.throwErrorSnackBar('Document reference not existing');\r\n    }\r\n\r\n    OnChangeValue(refrerence) {\r\n        this.searchTerm = this.documentCtrl.value;\r\n        if (this.filteredDocumentReferences && this.searchTerm) {\r\n            if (typeof this.searchTerm === 'object') {\r\n                this.accountingId = this.documentCtrl.value.accountingId;\r\n                this.documentReference = this.documentCtrl.value.documentReference;\r\n            } else {\r\n                const documentSelected = this.filteredDocumentReferences.filter((searchData) =>\r\n                    searchData.documentReference.toUpperCase() === this.searchTerm.toUpperCase());\r\n\r\n                if (documentSelected.length === 0) {\r\n                    this.displayNotFoundError();\r\n                } else {\r\n                    this.accountingId = documentSelected[0].accountingId;\r\n                    this.documentReference = documentSelected[0].documentReference;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.accountingId) {\r\n            this.getTransactionDetailSunscription = this.preaccountingService.getTransactionDetail(this.accountingId).pipe(\r\n                map((data) => {\r\n                    this.transactionData = data.value.map((transactionData) => {\r\n                        return new TransactionDetailDisplayView(transactionData);\r\n                    });\r\n                    if (this.transactionData && this.transactionData.length > 0) {\r\n                        this.transactionDocumentId = this.transactionData[0].transactionDocumentId;\r\n                        this.transactionDocumentTypeId = this.transactionData[0].transactionDocumentTypeId;\r\n                    }\r\n                }))\r\n                .subscribe();\r\n\r\n            this.getAccountingLinesByDocumentIdSubscription = (this.preaccountingService.getAccoutingLinesAllData(this.accountingId).pipe(\r\n                map((data) => {\r\n                    this.documentRefData = data.value.map((docRef) => {\r\n                        return new ReversalDocumentDisplayView(docRef);\r\n                    });\r\n                    this.accountingDocumentData = this.documentRefData[0];\r\n                    if (this.accountingDocumentData) {\r\n                        this.accountingDocumentLine = this.accountingDocumentData.accountingDocumentLines;\r\n                        this.noOfAccountingEntries = this.accountingDocumentLine.length;\r\n                        if (this.accountingDocumentLine && this.accountingDocumentLine.length > 0) {\r\n                            const isValid = this.validateReversalDate();\r\n                            if (isValid) {\r\n                                this.disableNextButton = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }))\r\n                .subscribe());\r\n        }\r\n    }\r\n\r\n    getDisabledState(value) {\r\n        this.disableButton = value;\r\n    }\r\n\r\n    startLockRefresh(accountingId: number, documentReference: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Accounting Document';\r\n        resourceInformation.resourceId = accountingId;\r\n        resourceInformation.resourceCode = documentReference;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        if (this.getTransactionDetailSunscription) {\r\n            this.getTransactionDetailSunscription.unsubscribe();\r\n        }\r\n        if (this.getAccountingLinesByDocumentIdSubscription) {\r\n            this.getAccountingLinesByDocumentIdSubscription.unsubscribe();\r\n        }\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n\r\n    onCancelWarning() {\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Warning',\r\n                text: 'Reversal is not done.',\r\n                okButton: 'Ok',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate([this.company + '/financial/accounting/entries']);\r\n            }\r\n        });\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.createDocumentFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n    valueChanged(value) {\r\n        this.documentCtrl.patchValue(value);\r\n        this.OnChangeValue(value);\r\n    }\r\n\r\n    NumberFormatterForTotalInGrid(params) {\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav mat-tab-nav-bar\\r\\n             matToolbarHighlight>\\r\\n            <div *ngFor=\\\"let routeLink of routeLinks\\\">\\r\\n                <a mat-tab-link\\r\\n                   *ifAuthorized=\\\"routeLink.privilege,company:this.company\\\"\\r\\n                   [routerLink]=\\\"routeLink.link\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLink)\\\">\\r\\n                    {{ routeLink.label }}\\r\\n                </a>\\r\\n            </div>\\r\\n        </nav>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <atlas-floating-action-button *ngIf=\\\"hasAddButton\\\"\\r\\n                                      [fabTitle]=\\\"fabTitle\\\"\\r\\n                                      [fabType]=\\\"fabType\\\"\\r\\n                                      [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                      [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                                      (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n        </atlas-floating-action-button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".header-tab {\\n  margin-bottom: 19px; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n.mat-menu-content {\\n  padding-top: 0 !important; }\\n\\n.floating-menu {\\n  top: -1px;\\n  min-height: 400px; }\\n\\n.dark-tab .mat-tab-nav-bar {\\n  border-bottom: 0; }\\n\\n::ng-deep .mat-menu-content-min-height-290 > div:first-child {\\n  min-height: 290px; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-financial-tab-group',\r\n    templateUrl: './financial-tab-group.component.html',\r\n    styleUrls: ['./financial-tab-group.component.scss'],\r\n})\r\nexport class FinancialTabGroupComponent implements OnInit {\r\n\r\n    routeLinks = [\r\n\r\n        {\r\n            label: 'ACCOUNTING ENTRIES',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries',\r\n            index: 0,\r\n            privilege: 'Financials',\r\n            title: 'Financials - Accounting Entries',\r\n        },\r\n        {\r\n            label: 'CUT-OFF',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/freeze/new',\r\n            index: 1,\r\n            privilege: 'Financials.CutOff',\r\n            title: 'Financials - Cut-Off',\r\n        },\r\n        {\r\n            label: 'Market Data',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/financial/fx/rates',\r\n            index: 2,\r\n            privilege: 'Financials.MarketData',\r\n            title: 'Financials - Market Data',\r\n        },\r\n\r\n    ];\r\n    activeLinkIndex = -1;\r\n    company: string;\r\n    PermissionLevels = PermissionLevels;\r\n    buttonEditable: boolean = false;\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoaded: boolean = false;\r\n\r\n    hasCreateFreezePrivilege: boolean = false;\r\n    hasViewFrozenDBPrivilege: boolean = false;\r\n    hasRecalculatePrivilege: boolean = false;\r\n    hasGenEOfYPrivilege: boolean = false;\r\n\r\n    @Input() hasAddButton: boolean = false;\r\n    @Input() buttonText: string = '';\r\n    @Output() readonly buttonClicked = new EventEmitter<void>();\r\n\r\n    constructor(private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        private authorizationService: AuthorizationService,\r\n        private route: ActivatedRoute,\r\n        private titleService: TitleService) {\r\n        this.activeLinkIndex = this.routeLinks.indexOf(this.routeLinks.find((tab) => this.router.url.includes(tab.link)));\r\n    }\r\n    editGenerateEndOfMonthPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'GenerateEndOfMonth',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Financials',\r\n        privilegeParentLevelTwo: 'CutOff',\r\n    };\r\n\r\n    ngOnInit() {\r\n        this.titleService.setTitle('Financials');\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.buttonEditable = this.checkIfUserHasRequiredPrivileges(this.editGenerateEndOfMonthPrivilege);\r\n        this.initFABActions();\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel <= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    isActive(routeLink: any) {\r\n        if (this.activeLinkIndex === routeLink.index) {\r\n            this.titleService.setTitle(this.routeLinks[this.activeLinkIndex].title);\r\n        }\r\n        return this.activeLinkIndex === routeLink.index;\r\n    }\r\n\r\n    onAddButtonClicked(): void {\r\n        this.buttonClicked.emit();\r\n    }\r\n\r\n    onFreezeButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/freeze/new']);\r\n    }\r\n\r\n    onFreezeViewButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/freeze']);\r\n    }\r\n\r\n    onFreezeRecalculateButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/freeze/recalculate']);\r\n    }\r\n\r\n    onCloseMonthButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/close-month']);\r\n    }\r\n\r\n    onGenerateEndOfMonthButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/generate-end-of-month']);\r\n    }\r\n\r\n    onGenerateEndOfYearButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/cut-off/generate-end-of-year']);\r\n    }\r\n\r\n    initFABActions() {\r\n        this.fabTitle = 'Cut-Off Actions';\r\n        this.fabType = FABType.ExtendedMenu;\r\n\r\n        const actionCreateFreeze: FloatingActionButtonActions = {\r\n            icon: 'ac_unit',\r\n            text: 'Create a freeze',\r\n            action: 'createFreeze',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n\r\n        const actionViewFrozenDB: FloatingActionButtonActions = {\r\n            icon: 'ac_unit',\r\n            text: 'View Frozen Database',\r\n            action: 'viewFrozenDb',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n\r\n        const actionRecalc: FloatingActionButtonActions = {\r\n            icon: 'settings_backup_restore',\r\n            text: 'Recalculate Frozen Database',\r\n            action: 'recalculate',\r\n            disabled: false,\r\n            index: 2,\r\n        };\r\n\r\n        const actionClose: FloatingActionButtonActions = {\r\n            icon: 'calendar_today',\r\n            text: 'Close Month',\r\n            action: 'closeMonth',\r\n            disabled: false,\r\n            index: 3,\r\n        };\r\n\r\n        const actionGenerateMonth: FloatingActionButtonActions = {\r\n            icon: 'calendar_today',\r\n            text: 'Generate End of Month',\r\n            action: 'generateEOM',\r\n            disabled: false,\r\n            index: 4,\r\n        };\r\n\r\n        const actionGenerateYear: FloatingActionButtonActions = {\r\n            icon: 'calendar_today',\r\n            text: 'Generate End of Year',\r\n            action: 'generateEOY',\r\n            disabled: false,\r\n            index: 5,\r\n        };\r\n\r\n        this.checkPrivileges();\r\n\r\n        if (this.hasCreateFreezePrivilege) {\r\n            this.fabMenuActions.push(actionCreateFreeze);\r\n        }\r\n\r\n        if (this.hasViewFrozenDBPrivilege) {\r\n            this.fabMenuActions.push(actionViewFrozenDB);\r\n        }\r\n\r\n        if (this.hasRecalculatePrivilege) {\r\n            this.fabMenuActions.push(actionRecalc);\r\n        }\r\n\r\n        this.fabMenuActions.push(actionClose);\r\n\r\n        if (this.buttonEditable) {\r\n            actionGenerateMonth.disabled = true;\r\n        }\r\n        this.fabMenuActions.push(actionGenerateMonth);\r\n\r\n        if (this.hasGenEOfYPrivilege) {\r\n            this.fabMenuActions.push(actionGenerateYear);\r\n        }\r\n\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    checkPrivileges() {\r\n        if (this.authorizationService.isPrivilegeAllowed(this.company, 'Financials')) {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'CreateFreeze', PermissionLevels.ReadWrite)) {\r\n                this.hasCreateFreezePrivilege = true;\r\n            }\r\n\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'FrozenDatabase', PermissionLevels.ReadWrite)) {\r\n                this.hasViewFrozenDBPrivilege = true;\r\n            }\r\n\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'RecalculateFrozenDatabase', PermissionLevels.ReadWrite)) {\r\n                this.hasRecalculatePrivilege = true;\r\n            }\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'GenerateEndOfYear', PermissionLevels.ReadWrite)) {\r\n                this.hasGenEOfYPrivilege = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'createFreeze': {\r\n                this.onFreezeButtonClicked();\r\n                break;\r\n            }\r\n            case 'actionCreateFrozenDB': {\r\n                this.onFreezeViewButtonClicked();\r\n                break;\r\n            }\r\n            case 'recalculate': {\r\n                this.onFreezeRecalculateButtonClicked();\r\n                break;\r\n            }\r\n            case 'closeMonth': {\r\n                this.onCloseMonthButtonClicked();\r\n                break;\r\n            }\r\n            case 'generateEOM': {\r\n                this.onGenerateEndOfMonthButtonClicked();\r\n                break;\r\n            }\r\n            case 'generateEOY': {\r\n                this.onGenerateEndOfYearButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as moment from 'moment';\r\nimport { ForeignExchangeRateViewMode } from './../../shared/enums/foreign-exchange-rate-viewmode.enum';\r\n\r\nexport class FxRatesSelectedType {\r\n    date: moment.Moment;\r\n    type: ForeignExchangeRateViewMode;\r\n    inactiveCurrencies: boolean;\r\n\r\n    constructor() {\r\n        this.date = moment.utc();\r\n        this.type = ForeignExchangeRateViewMode.Spot;\r\n        this.inactiveCurrencies = false;\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DateAdapter, MatButtonModule, MatCardModule, MatDialogModule, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { TextMaskModule } from 'angular2-text-mask';\r\nimport { AgGridAccrualNumberComponent } from '../shared/components/ag-grid-accrual-number/ag-grid-accrual-number.component';\r\nimport { AgGridContextualSearchComponent } from '../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { MasterdataInputComponent } from '../shared/components/form-components/masterdata/masterdata-input/masterdata-input.component';\r\nimport { MaterialModule } from '../shared/material.module';\r\nimport { ATLAS_DATE_FORMATS, SharedModule } from '../shared/shared.module';\r\nimport { CashMatchingDialogComponent } from './components/cash-matching/cash-matching-dialog/cash-matching-dialog/cash-matching-dialog.component';\r\nimport { DeleteMatchingDialogComponent } from './components/cash-matching/cash-matching-dialog/delete-matching-dialog/delete-matching-dialog.component';\r\nimport { DocumentDateDialogComponent } from './components/cash-matching/cash-matching-dialog/document-date-dialog/document-date-dialog.component';\r\nimport { PaymentDocumentDateDialogComponent } from './components/cash-matching/cash-matching-dialog/payment-document-date-dialog/payment-document-date-dialog.component';\r\nimport { CashMatchingHomeComponent } from './components/cash-matching/cash-matching-home/cash-matching-home.component';\r\nimport { CreateMatchFlagComponent } from './components/cash-matching/create-match-flag/create-match-flag.component';\r\nimport { DeleteMatchFlagComponent } from './components/cash-matching/delete-match-flag/delete-match-flag.component';\r\nimport { AccountingClosureComponent } from './components/cut-off/close-month/cards/accounting-closure/accounting-closure.component';\r\nimport { OperationsClosureComponent } from './components/cut-off/close-month/cards/operations-closure/operations-closure.component';\r\nimport { CloseMonthComponent } from './components/cut-off/close-month/close-month.component';\r\nimport { CloseMonthEditDialogComponent } from './components/cut-off/close-month/dialog-boxes/close-month-edit-dialog/close-month-edit-dialog.component';\r\nimport { CloseMonthWarningDialogComponent } from './components/cut-off/close-month/dialog-boxes/close-month-warning-dialog/close-month-warning-dialog.component';\r\nimport { FreezeGridComponent } from './components/cut-off/freeze/cards/grid/freeze-grid.component';\r\nimport { FreezeHeaderFilterComponent } from './components/cut-off/freeze/cards/header-filter/freeze-header-filter.component';\r\nimport { FreezeHeaderComponent } from './components/cut-off/freeze/cards/header/freeze-header.component';\r\nimport { FreezeComponent } from './components/cut-off/freeze/freeze.component';\r\nimport { FreezeRecalculateComponent } from './components/cut-off/freeze/recalculate/freeze-recalculate.component';\r\nimport { EndOfMonthSelectionComponent } from './components/cut-off/generate-end-of-month/cards/end-of-month-selection/end-of-month-selection.component';\r\nimport { AssociatedClientDropdownComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/associated-client-dropdown/associated-client-dropdown.component';\r\nimport { CharterDropdownComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/charter-dropdown/charter-dropdown.component';\r\nimport { CostTypeDropdownComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/cost-type-dropdown/cost-type-dropdown.component';\r\nimport { DepartmentDropdownComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/department-dropdown/department-dropdown.component';\r\nimport { GenerateEndOfMonthSummaryComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-summary.component';\r\nimport { GenerateEndOfMonthTabGroupComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-tab-group/generate-end-of-month-tab-group.component';\r\nimport { DetailsTabComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/details-tab.component';\r\nimport { DetailTabFxDealMonthEndComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/details-tab/fx-deal-details-month-end/fx-deal-month-end.component';\r\nimport { FxDealMonthEndSummaryComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/fx-deal-month-end-summary/fx-deal-month-end-summary.component';\r\nimport { OverviewTabComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/overview-tab/overview-tab.component';\r\nimport { PostingTabFxDealMonthEndComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/fx-deal-postings-month-end/fx-deal-month-end.component';\r\nimport { PostingsTabComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/postings-tab/postings-tab.component';\r\nimport { GenerateEndOfMonthComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month.component';\r\nimport { GenerateEndOfYearComponent } from './components/cut-off/generate-end-of-year/generate-end-of-year.component';\r\nimport { MarketDataTabGroupComponent } from './components/foreign-exchange/market-data-tab-group/market-data-tab-group.component';\r\nimport { ForeignExchangeRatesGridComponent } from './components/foreign-exchange/rates/cards/grid/foreign-exchange-rates-grid.component';\r\nimport { ForeignExchangeRatesSelectTypesComponent } from './components/foreign-exchange/rates/cards/select-types/foreign-exchange-rates-select-types.component';\r\nimport { ForeignExchangeRatesComponent } from './components/foreign-exchange/rates/foreign-exchange-rates.component';\r\nimport { WarningErrorMsgDialogComponent } from './components/foreign-exchange/warning-error-msg-dialog/warning-error-msg-dialog.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { AccountingErrorManagementComponent } from './components/interface/accounting-error-management/accounting-error-management.component';\r\nimport { FunctionalErrorsComponent } from './components/interface/functional-errors/functional-errors.component';\r\nimport { TechnicalErrorsComponent } from './components/interface/technical-errors/technical-errors.component';\r\nimport { AccountingCreationComponent } from './components/posting-process/accounting-creation/accounting-creation.component';\r\nimport { AccountingEditBaseComponent } from './components/posting-process/accounting-edit-base/accounting-edit-base.component';\r\nimport { AccountingEditSummaryComponent } from './components/posting-process/accounting-edit/accounting-edit-summary/accounting-edit-summary.component';\r\nimport { AccountingEditComponent } from './components/posting-process/accounting-edit/accounting-edit.component';\r\nimport { AccountingEntriesComponent } from './components/posting-process/accounting-entries-component/accounting-entries-component.component';\r\nimport { ManualJournalAccrualViewComponent } from './components/posting-process/accounting-entries-component/manual-journal-accrual-view/manual-journal-accrual-view.component';\r\nimport { AccountingTabGroupComponent } from './components/posting-process/accounting-tab-group/accounting-tab-group.component';\r\nimport { AuthorizePostingDialogComponent } from './components/posting-process/authorize-posting-dialog/authorize-posting-dialog.component';\r\nimport { AccountingDocumentInformationComponent } from './components/posting-process/posting-management/accounting-document-information-component/accounting-document-information-component.component';\r\nimport { PostingManagementComponent } from './components/posting-process/posting-management/posting-management.component';\r\nimport { ReverseDocumentCreateComponent } from './components/posting-process/reverse-document/reverse-document-create/reverse-document-create.component';\r\nimport { ReverseDocumentSummaryComponent } from './components/posting-process/reverse-document/reverse-document-summary/reverse-document-summary.component';\r\nimport { ReverseDocumentComponent } from './components/posting-process/reverse-document/reverse-document.component';\r\nimport { FinancialTabGroupComponent } from './components/tab-group/financial-tab-group.component';\r\nimport { FinancialRoutingModule } from './financial.route';\r\nimport { DealtCurrencyDropdownComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/dealt-currency-dropdown/dealt-currency-dropdown.component';\r\nimport { SettlementCurrencyDropdownComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/settlement-currency-dropdown/settlement-currency-dropdown.component';\r\nimport { DealNumberDropdownComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/deal-number-dropdown/deal-number-dropdown.component';\r\n\r\nimport { AccountingFileUploadDialogBoxComponent } from './components/posting-process/accounting-file-upload/accounting-file-upload-dialog-box/accounting-file-upload-dialog-box.component';\r\nimport { AccountingWarningErrorMsgDialogComponent } from './components/posting-process/accounting-creation/accounting-warning-error-msg-dialog/accounting-warning-error-msg-dialog.component';\r\nimport { GenerateEndOfYearWarningMessageComponent } from './components/cut-off/generate-end-of-year/cards/generate-end-of-year-warning-message/generate-end-of-year-warning-message.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        FinancialRoutingModule,\r\n        AgGridModule.withComponents([]),\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        RouterModule,\r\n        SharedModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        TextMaskModule,\r\n    ],\r\n    entryComponents: [\r\n        AccountingDocumentInformationComponent,\r\n        CloseMonthEditDialogComponent,\r\n        CloseMonthWarningDialogComponent,\r\n        AuthorizePostingDialogComponent,\r\n        AccountingFileUploadDialogBoxComponent,\r\n        CashMatchingDialogComponent,\r\n        PaymentDocumentDateDialogComponent,\r\n        DocumentDateDialogComponent,\r\n        DeleteMatchingDialogComponent,\r\n        AgGridContextualSearchComponent,\r\n        AgGridAccrualNumberComponent,\r\n        MasterdataInputComponent,\r\n        AccountingWarningErrorMsgDialogComponent,\r\n        GenerateEndOfYearWarningMessageComponent,\r\n\r\n    ],\r\n    declarations: [\r\n        HomeComponent,\r\n        ForeignExchangeRatesComponent,\r\n        ForeignExchangeRatesSelectTypesComponent,\r\n        ForeignExchangeRatesGridComponent,\r\n        FinancialTabGroupComponent,\r\n        FreezeComponent,\r\n        FreezeHeaderComponent,\r\n        FreezeGridComponent,\r\n        PostingManagementComponent,\r\n        AccountingEntriesComponent,\r\n        AccountingTabGroupComponent,\r\n        AccountingCreationComponent,\r\n        CloseMonthComponent,\r\n        OperationsClosureComponent,\r\n        AccountingClosureComponent,\r\n        AccountingDocumentInformationComponent,\r\n        CloseMonthEditDialogComponent,\r\n        CloseMonthWarningDialogComponent,\r\n        AuthorizePostingDialogComponent,\r\n        AccountingFileUploadDialogBoxComponent,\r\n        GenerateEndOfMonthComponent,\r\n        EndOfMonthSelectionComponent,\r\n        GenerateEndOfMonthSummaryComponent,\r\n        OverviewTabComponent,\r\n        DetailsTabComponent,\r\n        PostingsTabComponent,\r\n        CashMatchingHomeComponent,\r\n        CreateMatchFlagComponent,\r\n        DeleteMatchFlagComponent,\r\n        CashMatchingDialogComponent,\r\n        DocumentDateDialogComponent,\r\n        GenerateEndOfMonthTabGroupComponent,\r\n        ReverseDocumentComponent,\r\n        ReverseDocumentCreateComponent,\r\n        ReverseDocumentSummaryComponent,\r\n        FreezeRecalculateComponent,\r\n        FreezeHeaderFilterComponent,\r\n        DeleteMatchingDialogComponent,\r\n        DepartmentDropdownComponent,\r\n        CharterDropdownComponent,\r\n        CostTypeDropdownComponent,\r\n        AssociatedClientDropdownComponent,\r\n        AccountingEditComponent,\r\n        AccountingEditSummaryComponent,\r\n        PaymentDocumentDateDialogComponent,\r\n        AccountingErrorManagementComponent,\r\n        FunctionalErrorsComponent,\r\n        TechnicalErrorsComponent,\r\n        ManualJournalAccrualViewComponent,\r\n        MarketDataTabGroupComponent,\r\n        WarningErrorMsgDialogComponent,\r\n        AccountingEditBaseComponent,\r\n        GenerateEndOfYearComponent,\r\n        DetailTabFxDealMonthEndComponent,\r\n        PostingTabFxDealMonthEndComponent,\r\n        FxDealMonthEndSummaryComponent,\r\n        AccountingWarningErrorMsgDialogComponent,\r\n        DealtCurrencyDropdownComponent,\r\n        SettlementCurrencyDropdownComponent,\r\n        DealNumberDropdownComponent,\r\n        GenerateEndOfYearWarningMessageComponent,\r\n    ],\r\n    providers: [\r\n        { provide: MAT_DATE_LOCALE, useValue: 'en' },\r\n        { provide: DateAdapter, useClass: MomentDateAdapter },\r\n        { provide: MAT_DATE_FORMATS, useValue: ATLAS_DATE_FORMATS },\r\n    ],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class FinancialModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { WarningErrorMsgDialogComponent } from '../financial/components/foreign-exchange/warning-error-msg-dialog/warning-error-msg-dialog.component';\r\nimport { MasterDataProps } from '../shared/entities/masterdata-props.entity';\r\nimport { CanDeactivateGuard } from '../shared/guards/can-deactivate-guard.service';\r\nimport { SecurityGuard } from '../shared/guards/security.guard';\r\nimport { CompanyDateResolver } from '../shared/resolvers/company-date.resolver';\r\nimport { FormConfigurationResolver } from '../shared/resolvers/form-configuration.resolver';\r\nimport { MasterDataResolver } from '../shared/resolvers/masterdata.resolver';\r\nimport { CreateMatchFlagComponent } from './components/cash-matching/create-match-flag/create-match-flag.component';\r\nimport { DeleteMatchFlagComponent } from './components/cash-matching/delete-match-flag/delete-match-flag.component';\r\nimport { CloseMonthComponent } from './components/cut-off/close-month/close-month.component';\r\nimport { FreezeComponent } from './components/cut-off/freeze/freeze.component';\r\nimport { FreezeRecalculateComponent } from './components/cut-off/freeze/recalculate/freeze-recalculate.component';\r\nimport { GenerateEndOfMonthSummaryComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/generate-end-of-month-summary.component';\r\nimport { FxDealMonthEndSummaryComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month-summary/tabs/fx-deal-month-end-summary/fx-deal-month-end-summary.component';\r\nimport { GenerateEndOfMonthComponent } from './components/cut-off/generate-end-of-month/generate-end-of-month.component';\r\nimport { GenerateEndOfYearComponent } from './components/cut-off/generate-end-of-year/generate-end-of-year.component';\r\nimport { ForeignExchangeRatesComponent } from './components/foreign-exchange/rates/foreign-exchange-rates.component';\r\nimport * as Financial from './components/home/home.component';\r\nimport { AccountingErrorManagementComponent } from './components/interface/accounting-error-management/accounting-error-management.component';\r\nimport { AccountingCreationComponent } from './components/posting-process/accounting-creation/accounting-creation.component';\r\nimport { AccountingEditSummaryComponent } from './components/posting-process/accounting-edit/accounting-edit-summary/accounting-edit-summary.component';\r\nimport { AccountingEditComponent } from './components/posting-process/accounting-edit/accounting-edit.component';\r\nimport { AccountingEntriesComponent } from './components/posting-process/accounting-entries-component/accounting-entries-component.component';\r\nimport { ManualJournalAccrualViewComponent } from './components/posting-process/accounting-entries-component/manual-journal-accrual-view/manual-journal-accrual-view.component';\r\nimport { AccountingDocumentInformationComponent } from './components/posting-process/posting-management/accounting-document-information-component/accounting-document-information-component.component';\r\nimport { PostingManagementComponent } from './components/posting-process/posting-management/posting-management.component';\r\nimport { ReverseDocumentSummaryComponent } from './components/posting-process/reverse-document/reverse-document-summary/reverse-document-summary.component';\r\nimport { ReverseDocumentComponent } from './components/posting-process/reverse-document/reverse-document.component';\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'home',\r\n    },\r\n    {\r\n        path: 'home',\r\n        component: Financial.HomeComponent,\r\n        canActivate: [SecurityGuard],\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'accounting/entries',\r\n        component: AccountingEntriesComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'AccountingEntries',\r\n            title: 'Financials', isHomePage: true, privilegeLevel1Name: 'Financials',\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'accounting/entries/:invoiceReference',\r\n        component: AccountingEntriesComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'AccountingEntries',\r\n            title: 'Financials', isHomePage: false, privilegeLevel1Name: 'Financials',\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'fx/rates',\r\n        component: ForeignExchangeRatesComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'ForeignExchangeRates',\r\n            title: 'Financials', isHomePage: true, privilegeLevel1Name: 'Financials',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Financials',\r\n                    permission: 1,\r\n                    parentLevelOne: 'MarketData',\r\n                    parentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/close-month',\r\n        component: CloseMonthComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'CloseMonth',\r\n            title: 'Close Month',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/generate-end-of-month',\r\n        component: GenerateEndOfMonthComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'GenerateEndOfMonth',\r\n            title: 'Generate End of Month',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.MonthEndReportType,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/generate-end-of-year',\r\n        component: GenerateEndOfYearComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'GenerateEndOfYear',\r\n            title: 'Generate End of Year',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.MonthEndReportType,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.Departments,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/generate-end-of-month/summary',\r\n        component: GenerateEndOfMonthSummaryComponent,\r\n        canActivate: [SecurityGuard],\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/freeze',\r\n        component: FreezeComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'FreezeView',\r\n            title: 'View frozen database', isHomePage: false, privilegeLevel1Name: null,\r\n            isNew: false,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'FrozenDatabase',\r\n                    permission: 2,\r\n                    parentLevelOne: 'CutOff',\r\n                    parentLevelTwo: 'Financials',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/freeze/new',\r\n        component: FreezeComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'Freeze',\r\n            title: 'Financials', isHomePage: true, privilegeLevel1Name: 'Financials',\r\n            isNew: true,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CutOff',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Financials',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/freeze/recalculate',\r\n        component: FreezeRecalculateComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'Freeze',\r\n            title: 'Financials', isHomePage: true, icon: 'Financials',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'RecalculateFrozenDatabase',\r\n                    permission: 2,\r\n                    parentLevelOne: 'CutOff',\r\n                    parentLevelTwo: 'Financials',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'posting/management',\r\n        component: PostingManagementComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'PostingmanagementView',\r\n            title: 'Posting Management', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'POSTINGMGT',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Financials',\r\n                    privilegeParentLevelTwo: null,\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'reverse/document',\r\n        component: ReverseDocumentComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'reverseDocument',\r\n            formId: 'reverseDocument',\r\n            title: 'Reverse Document', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ReverseDocument',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Financials',\r\n                    privilegeParentLevelTwo: 'AccountingEntries',\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.AccountLineType,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'create/matching',\r\n        component: CreateMatchFlagComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'createMatching',\r\n            formId: 'cashMatching',\r\n            title: 'Create Match Flag', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'delete/matching',\r\n        component: DeleteMatchFlagComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'cashmatching',\r\n            formId: 'cashMatching',\r\n            title: 'Delete Match Flag', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'posting/accountingdocument/viewedit/:accountingId',\r\n        component: AccountingDocumentInformationComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'AccountDocumentView',\r\n            title: 'Accounting Document', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'AccountingEntries',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Financials',\r\n                    privilegeParentLevelTwo: null,\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.AccountLineType,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.Province,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'accounting/entry/new',\r\n        component: AccountingCreationComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'CreateEntries',\r\n            title: 'Create document', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateEditDocument',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Financials',\r\n                    privilegeParentLevelTwo: 'AccountingEntries',\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.AccountLineType,\r\n                MasterDataProps.Province,\r\n                MasterDataProps.Branches\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'edit/document/summary',\r\n        component: AccountingEditSummaryComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'editDocumentSummary',\r\n            formId: 'editDocumentSummary',\r\n            title: 'Edit Document Summary', isHomePage: false, icon: '',\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Vats,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'EditAccountingEntries',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Financials',\r\n                    privilegeParentLevelTwo: 'AccountingEntries',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'edit/document/:accountingId',\r\n        component: AccountingEditComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'editDocument',\r\n            title: 'Edit Document', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.AccountLineType,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Vats,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'financial/fx/rates/',\r\n        component: WarningErrorMsgDialogComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'WarningErrorMsgDialogComponent',\r\n            title: 'Warning Error Management', isHomePage: false, privilegeLevel1Name: null,\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'accounting/errormanagement',\r\n        component: AccountingErrorManagementComponent,\r\n        canActivate: [SecurityGuard],\r\n        data:\r\n        {\r\n            animation: 'AccountingErrorManagement',\r\n            title: 'Accounting Error Management', isHomePage: false, privilegeLevel1Name: null,\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'accounting/entry/view/:accountingId',\r\n        component: ManualJournalAccrualViewComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data:\r\n        {\r\n            animation: 'ManualJournalAccrualView',\r\n            title: 'Manual Journal Accrual View', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'AccountingEntries',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Financials',\r\n                    privilegeParentLevelTwo: null,\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.AccountLineType,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Vats,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'reverse/document/summary/:transactionDocumentId',\r\n        component: ReverseDocumentSummaryComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'reverseDocument',\r\n            title: 'Reverse Summary', isHomePage: false, privilegeLevel1Name: null,\r\n            formId: 'ReverseSummary',\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.AccountLineType,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ReverseDocument',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Financials',\r\n                    privilegeParentLevelTwo: 'AccountingEntries',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'cut-off/fx-deal-generate-end-of-month/summary',\r\n        component: FxDealMonthEndSummaryComponent,\r\n        canActivate: [SecurityGuard],\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n    providers: [],\r\n})\r\nexport class FinancialRoutingModule { }\r\n","export class AccountingDocumentLine {\r\n    accountReference: string;\r\n    associatedAccountCode: string;\r\n    accountLineType: string;\r\n    costTypeId: number;\r\n    amount: number;\r\n    statutoryCurrency: number;\r\n    functionalCurrency: number;\r\n    narrative: string;\r\n    departmentId: number;\r\n    secondaryDocumentReference: string;\r\n    extDocReference: string;\r\n    clientReference: string;\r\n    commodityId: number;\r\n    quantity: number;\r\n    charterId: number;\r\n    costCenter: string;\r\n    paymentTermId: number;\r\n    vatId: number;\r\n    accrualNumber: number;\r\n    ///we ned to add AccountingLineId\r\n\r\n    accountingDocumentLineId: number;\r\n    accountReferenceId: number;\r\n    clientAccountId: number;\r\n    associatedAccountId: number;\r\n    accountLineTypeId: number;\r\n    sectionId: number;\r\n    sectionReference: string;\r\n    postingLineNumber: number;\r\n    dealNumber: string;\r\n    settlementCurrency: string;\r\n    provinceId?: number;\r\n    journalLineId?: number;\r\n    postingLineId: number;\r\n\r\n    constructor(accountingLine: AccountingDocumentLine = null) {\r\n        if (accountingLine !== null) {\r\n            this.accountingDocumentLineId = null;\r\n            this.accountReferenceId = accountingLine.accountReferenceId;\r\n            this.clientAccountId = accountingLine.clientAccountId;\r\n            this.associatedAccountId = accountingLine.associatedAccountId;\r\n            this.accountLineTypeId = accountingLine.accountLineTypeId;\r\n            this.costTypeId = accountingLine.costTypeId;\r\n            this.amount = accountingLine.amount;\r\n            this.statutoryCurrency = accountingLine.statutoryCurrency;\r\n            this.functionalCurrency = accountingLine.functionalCurrency;\r\n            this.narrative = accountingLine.narrative;\r\n            this.departmentId = accountingLine.departmentId;\r\n            this.secondaryDocumentReference = accountingLine.secondaryDocumentReference;\r\n            this.clientReference = accountingLine.clientReference;\r\n            this.sectionId = accountingLine.sectionId;\r\n            this.commodityId = accountingLine.commodityId;\r\n            this.quantity = accountingLine.quantity;\r\n            this.charterId = accountingLine.charterId;\r\n            this.costCenter = accountingLine.costCenter;\r\n            this.paymentTermId = accountingLine.paymentTermId;\r\n            this.vatId = accountingLine.vatId;\r\n            this.accrualNumber = accountingLine.accrualNumber;\r\n            this.accountReference = accountingLine.accountReference;\r\n            this.associatedAccountCode = accountingLine.associatedAccountCode;\r\n            this.extDocReference = accountingLine.extDocReference;\r\n            this.sectionReference = accountingLine.sectionReference;\r\n            this.dealNumber = accountingLine.dealNumber;\r\n            this.settlementCurrency = accountingLine.settlementCurrency;\r\n            this.provinceId = accountingLine.provinceId;\r\n            this.journalLineId = accountingLine.journalLineId;\r\n            this.postingLineId = accountingLine.postingLineId;\r\n        }\r\n    }\r\n\r\n}\r\n","import { AccountingDocumentStatus } from './accounting-document-status.entity';\r\n\r\nexport class AccountingDocumentStatusToDeletedCommand {\r\n    accountingDocuments: AccountingDocumentStatus[];\r\n}","import { PostingDocumentType } from '../enums/posting-document-type.enum';\r\nimport { PostingStatus } from '../enums/posting-status.enum';\r\n\r\nexport class AccountingDocumentStatus {\r\n    accountingId: number;\r\n    statusId: PostingStatus;\r\n    documentType: PostingDocumentType;\r\n}   ","export class AccountingSetup {\r\n    lastMonthClosed: Date;\r\n    lastMonthClosedForOperation: Date;\r\n    numberOfOpenPeriod: number;\r\n    openPeriodCounter: number;\r\n    maximumNumberofOpenFinancialYears: number;\r\n    lastMonthofFinancialYear: number;\r\n    lastFinancialYearClosed: number;\r\n}\r\n","import { AccountImportWarningErrorMsg } from './accountingImport-warning-error-msg.entity';\r\nimport { AccountingImportList } from './accounting-import-list.entity';\r\n\r\nexport class AccountingImportReport {\r\n    blockerData: AccountImportWarningErrorMsg[] = [];\r\n    goodData: AccountImportWarningErrorMsg;\r\n    goodDataList: AccountingImportList[] = [];\r\n    disableConfirmImport: Boolean;\r\n}\r\n","export class CreateTransactionDocument {\r\n    company: string;\r\n    transactionDocumentTypeId: number;\r\n    transactionDocumentId: number;\r\n    documentDate: Date;\r\n    currencyCode: string;\r\n    authorizedForPosting: boolean;\r\n    physicalDocumentId: number;\r\n    toInterface: boolean;\r\n}\r\n","import { FilterValueGenerateEndMonth } from './filter-value-generate-end-month.entity';\r\n\r\nexport class FilterGem {\r\n    departmentCode: FilterValueGenerateEndMonth[];\r\n    charterCode: FilterValueGenerateEndMonth[];\r\n    costType: FilterValueGenerateEndMonth[];\r\n    associatedClient: FilterValueGenerateEndMonth[];\r\n    dealCurrency: FilterValueGenerateEndMonth[];\r\n    settlementCurrency: FilterValueGenerateEndMonth[];\r\n    dealNumber: FilterValueGenerateEndMonth[];\r\n}\r\n","export class FilterValueGenerateEndMonth {\r\n    value: number;\r\n    desc: string;\r\n}\r\n","import { ForeignExchangeRate } from './foreign-exchange/foreign-exchange-rate.entity';\r\n\r\nexport class ForeignExchangeRateDisplayView {\r\n    currencyCode: string;\r\n    currencyDescription: string;\r\n    rateType: string;\r\n    date: Date;\r\n    exchangeRate: string;\r\n    oneMonthForwardPeriodPoints: string;\r\n    twoMonthsForwardPeriodPoints: string;\r\n    threeMonthsForwardPeriodPoints: string;\r\n    sixMonthsForwardPeriodPoints: string;\r\n    oneYearForwardPeriodPoints: string;\r\n    twoYearForwardPeriodPoints: string;\r\n    isInactive: boolean;\r\n    isTouched = false;\r\n    highlight = false;\r\n    lastAmendmentOn: Date;\r\n    lastAmendmentBy: string;\r\n    creationMode: string;\r\n    time: string;\r\n\r\n    constructor(foreignExchangeRate: ForeignExchangeRate) {\r\n        this.currencyCode = foreignExchangeRate.currencyCode;\r\n        this.rateType = foreignExchangeRate.currencyRoeType;\r\n        this.date = foreignExchangeRate.date;\r\n        this.exchangeRate = foreignExchangeRate.rate;\r\n        this.oneMonthForwardPeriodPoints = foreignExchangeRate.fwdMonth1;\r\n        this.twoMonthsForwardPeriodPoints = foreignExchangeRate.fwdMonth2;\r\n        this.threeMonthsForwardPeriodPoints = foreignExchangeRate.fwdMonth3;\r\n        this.sixMonthsForwardPeriodPoints = foreignExchangeRate.fwdMonth6;\r\n        this.oneYearForwardPeriodPoints = foreignExchangeRate.fwdYear1;\r\n        this.twoYearForwardPeriodPoints = foreignExchangeRate.fwdYear2;\r\n        this.isInactive = foreignExchangeRate.currencyIsDeactivated;\r\n        this.currencyDescription = foreignExchangeRate.currencyDescription;\r\n        this.lastAmendmentOn = foreignExchangeRate.modifiedBy ? foreignExchangeRate.modifiedDateTime : foreignExchangeRate.createdDateTime;\r\n        this.lastAmendmentBy = foreignExchangeRate.modifiedBy ? foreignExchangeRate.modifiedBy : foreignExchangeRate.createdBy;\r\n        this.creationMode = foreignExchangeRate.creationMode;\r\n        this.time = this.lastAmendmentOn ? this.lastAmendmentOn.toISOString().substr(11, 8) : '';\r\n    }\r\n}\r\n","export enum LockFunctionalContext {\r\n    TradeEdit = 100,\r\n    RelativeTradeEdit = 101,\r\n    TradeApproval = 102,\r\n    TradeSplit = 103,\r\n    TradeTranche = 104,\r\n    RelativeTradeSplit = 105,\r\n    RelativeTradeTranche = 106,\r\n    TradeAssignment = 107,\r\n    TradeDeassignment = 108,\r\n    BulkEdition = 109,\r\n    BulkApproval = 110,\r\n    TradeReassignment = 111,\r\n    TradeMerge = 112,\r\n    TradeBulkClosure = 113,\r\n    FxDeal = 114,\r\n    CharterEdit = 200,\r\n    CharterDeletion = 201,\r\n    CharterBulkClosure = 202,\r\n    ContractInvoicing = 300,\r\n    CostInvoicing = 301,\r\n    GoodsAndCostsInvoicing = 302,\r\n    WashoutInvoicing = 303,\r\n    ReversalInvoicing = 304,\r\n    Allocation = 400,\r\n    RelativeAllocation = 401,\r\n    Deallocation = 402,\r\n    BulkAllocation = 403,\r\n    BulkDeallocation = 404,\r\n    RelativeDeallocation = 403,\r\n    CostMatrixEdition = 500,\r\n    CostMatrixDeletion = 501,\r\n    MasterDataEdition = 600,\r\n    UserAccountEdition = 700,\r\n    UserAccountDeletion = 701,\r\n    UserProfileEdition = 800,\r\n    UserProfileDeletion = 801,\r\n    AccountingDocumentEdition = 900,\r\n    AccountingDocumentAuthorizeForPosting = 901,\r\n    AccountingDocumentReversal = 902,\r\n    CashDocumentEdition = 1000,\r\n    CashDocumentDeletion = 1001,\r\n}\r\n","export class ManualJournalLine {\r\n    journalLineId: number;\r\n    dataVersionId: number;\r\n    journalDocumentId: number;\r\n    accountReferenceId: number;\r\n    clientAccountId: number;\r\n    associatedAccountId: number;\r\n    accountLineTypeId: number;\r\n    costTypeId: number;\r\n    amount: number;\r\n    narrative: string;\r\n    departmentId: number;\r\n    secondaryDocumentReference: string;\r\n    externalDocumentReference: string;\r\n    sectionId: number;\r\n    commodityId: string;\r\n    quantity: number;\r\n    costCenter: string;\r\n    accrualNumber: number;\r\n    charterId: number;\r\n    fullAmount: number;\r\n    fullQuantity: number;\r\n    dealNumber: string;\r\n    settlementCurrency: string;\r\n    provinceId?: number;\r\n    branchId?: number;\r\n\r\n    constructor(manualLine: ManualJournalLine = null) {\r\n        this.accountReferenceId = manualLine !== null ? manualLine.accountReferenceId : null;\r\n        this.clientAccountId = manualLine !== null ? manualLine.clientAccountId : null;\r\n        this.associatedAccountId = manualLine !== null ? manualLine.associatedAccountId : null;\r\n        this.accountLineTypeId = manualLine !== null ? manualLine.accountLineTypeId : null;\r\n        this.costTypeId = manualLine !== null ? manualLine.costTypeId : null;\r\n        this.amount = manualLine !== null ? manualLine.amount : null;\r\n        this.narrative = manualLine !== null ? manualLine.narrative : null;\r\n        this.departmentId = manualLine !== null ? manualLine.departmentId : null;\r\n        this.secondaryDocumentReference = manualLine !== null ? manualLine.secondaryDocumentReference : null;\r\n        this.externalDocumentReference = manualLine !== null ? manualLine.externalDocumentReference : null;\r\n        this.sectionId = manualLine !== null ? manualLine.sectionId : null;\r\n        this.commodityId = manualLine !== null ? manualLine.commodityId : null;\r\n        this.quantity = manualLine !== null ? manualLine.quantity : null;\r\n        this.costCenter = manualLine !== null ? manualLine.costCenter : null;\r\n        this.accrualNumber = manualLine !== null ? manualLine.accrualNumber : null;\r\n        this.charterId = manualLine !== null ? manualLine.charterId : null;\r\n        this.fullAmount = manualLine !== null ? manualLine.fullAmount : null;\r\n        this.fullQuantity = manualLine !== null ? manualLine.fullQuantity : null;\r\n        this.dealNumber = manualLine !== null ? manualLine.dealNumber : null;\r\n        this.settlementCurrency = manualLine !== null ? manualLine.settlementCurrency : null;\r\n        this.provinceId = manualLine !== null ? manualLine.provinceId : null;\r\n        this.branchId = manualLine !== null ? manualLine.branchId : null;\r\n    }\r\n}\r\n","import { ManualJournalLine } from './manual-journal-document-line.entity';\r\n\r\nexport class ManualJournalDocument {\r\n    journalId: number;\r\n    dataVersionId: number;\r\n    transactionDocumentId: number;\r\n    valueDate: Date;\r\n    accountingPeriod: Date;\r\n    currencyCode: string;\r\n    transactionDocumentTypeId: number;\r\n    taTypeId: number;\r\n    authorizedForPosting: boolean;\r\n    physicalDocumentId: number;\r\n    documentReference: string;\r\n    yearNumber: number;\r\n    year: number;\r\n    documentDate: Date;\r\n    toInterface: boolean;\r\n    manualJournalLines: ManualJournalLine[];\r\n    c2CCode: string;\r\n    nominalAlternativeAccount: string;\r\n    costAlternativeCode: string;\r\n    departmentAlternativeCode: string;\r\n    taxInterfaceCode: string;\r\n\r\n    constructor(manualJournalLines: ManualJournalLine[] = null) {\r\n        this.manualJournalLines = manualJournalLines;\r\n    }\r\n}\r\n","import { ManualImportWarningErrorMsg } from './manualImport-warning-error-msg.entity';\r\n\r\nexport class ManualImportReport {\r\n    importId: string;\r\n    fxRateStageIds: number[] = [];\r\n    blockerData: ManualImportWarningErrorMsg[] = [];\r\n    warningData: ManualImportWarningErrorMsg[] = [];\r\n    goodData: ManualImportWarningErrorMsg;\r\n    disableConfirmImport: Boolean;\r\n}\r\n","export enum AccountLineTypes {\r\n    Customer = 1,\r\n    Vendor = 2,\r\n    Ledger = 3,\r\n    Bank = 4,\r\n}\r\n","export enum GenerateMonthEndEnum {\r\n    Overview = 1,\r\n    Details = 2,\r\n    Postings = 3,\r\n}","export enum MatchingType {\r\n    createMatch = 1,\r\n    deleteMatch = 2,\r\n    Credit = 'Cr',\r\n    Debit = 'Dr',\r\n}\r\n","export enum PostingDocumentTAType {\r\n    ManualTA = 1,\r\n    MonthEndTA = 2\r\n}","export enum PostingDocumentType {\r\n\r\n    PI = 1,\r\n    SI = 2,\r\n    CN = 3,\r\n    DN = 4,\r\n    CP = 5,\r\n    CI = 6,\r\n    TA = 7,\r\n    MC = 8,\r\n    JL = 9,\r\n    FJ = 10,\r\n    YE = 11\r\n}\r\n","export enum PostingStatus {\r\n    Incomplete = 1,\r\n    Held = 2,\r\n    MappingError = 3,\r\n    Authorized = 4,\r\n    Posted = 5,\r\n    Deleted = 6,\r\n}\r\n","export enum ReportType {\r\n    Realized = 1,\r\n    UnRealized = 2,\r\n    MTMOpenFx = 3,\r\n}\r\n","import { FxDealGenerateEndOfMonth } from '../entities/fx-deal-generate-end-of-month.entity';\r\nimport { TradeCostMonthEndMappingErrors } from '../entities/tradecost-monthend-mappingerrors-entity';\r\n\r\nexport class FxDealGenerateEndOfMonthDisplayView {\r\n    dealNumber: string;\r\n    accrualNumber: number;\r\n    costType: string;\r\n    departmentCode: string;\r\n    dealCurrency: string;\r\n    settlementCurrency: string;\r\n    associatedClient: string;\r\n    dealAmount: number;\r\n    settlementAmount: number;\r\n    marketCcyRoeDealt: number;\r\n    maturityDate: Date;\r\n    marketCcyRoeSettlement: number;\r\n    variationMargin: number;\r\n    accountNumber: string;\r\n    accountDescription: string;\r\n    currencyCode: string;\r\n    line1NominalAccountCode: string;\r\n    line2NominalAccountCode: string;\r\n    line1NominalAccountDesc: string;\r\n    line2NominalAccountDesc: string;\r\n    fxDealMonthEndMappingErrors: TradeCostMonthEndMappingErrors[];\r\n    constructor(fxDeal: FxDealGenerateEndOfMonth) {\r\n        if (fxDeal) {\r\n            this.costType = fxDeal.costType;\r\n            this.departmentCode = fxDeal.departmentCode;\r\n            this.associatedClient = fxDeal.associatedClient;\r\n            this.accrualNumber = fxDeal.accrualNumber;\r\n            this.dealNumber = fxDeal.dealNumber;\r\n            this.dealCurrency = fxDeal.dealCurrency;\r\n            this.settlementCurrency = fxDeal.settlementCurrency;\r\n            this.dealAmount = fxDeal.dealAmount;\r\n            this.maturityDate = fxDeal.maturityDate;\r\n            this.settlementAmount = fxDeal.settlementAmount;\r\n            this.marketCcyRoeDealt = fxDeal.marketCcyRoeDealt;\r\n            this.marketCcyRoeSettlement = fxDeal.marketCcyRoeSettlement;\r\n            this.variationMargin = fxDeal.variationMargin;\r\n            this.accountNumber = fxDeal.accountNumber;\r\n            this.accountDescription = fxDeal.accountDescription;\r\n            this.currencyCode = fxDeal.currencyCode;\r\n            this.line1NominalAccountCode = fxDeal.line1NominalAccountCode;\r\n            this.line2NominalAccountCode = fxDeal.line2NominalAccountCode;\r\n            this.line1NominalAccountDesc = fxDeal.line1NominalAccountDesc;\r\n            this.line2NominalAccountDesc = fxDeal.line2NominalAccountDesc;\r\n            this.fxDealMonthEndMappingErrors=fxDeal.fxDealMonthEndMappingErrors;\r\n        }\r\n    }\r\n}\r\n","import { OverviewGenerateEndOfMonth } from '../entities/overview-generate-end-of-month.entity';\r\nimport { Cost } from '../entities/cost.entity';\r\n\r\nexport class OverviewGenerateEndOfMonthDisplayView {\r\n    charterCode: string;\r\n    costType: string;\r\n    currencyCode: string;\r\n    departmentCode: string;\r\n    associatedClient: string;\r\n    fullValue: number;\r\n    invoicedAmount: number;\r\n    accruedAmount: number;\r\n    blDate: Date;\r\n    percentageActualized: number;\r\n    quantity: number;\r\n    contractNumber: string;\r\n    accrualNumber: number;\r\n    accountNumber: string;\r\n    description: string;\r\n    sectionId: number;\r\n    costId: number;\r\n    accountLineTypeId: number;\r\n    postingCostType: string;\r\n    documentReference: string;\r\n    documentDate: Date;\r\n    inhouseOrExternal: string;\r\n    constructor(CostTrade: OverviewGenerateEndOfMonth, reportType: number) {\r\n        if (CostTrade) {\r\n            this.costType = CostTrade.costType;\r\n            this.charterCode = CostTrade.charterCode;\r\n            this.currencyCode = CostTrade.currencyCode;\r\n            this.departmentCode = CostTrade.departmentCode;\r\n            this.associatedClient = CostTrade.associatedClient;\r\n            this.fullValue = CostTrade.fullValue;\r\n            this.invoicedAmount = CostTrade.invoicedAmount;\r\n            this.accruedAmount = (reportType === 1) ? ((CostTrade.accountLineTypeId !== 3) ?\r\n                (-1 * (CostTrade.fullValue - CostTrade.invoicedAmount)) : (CostTrade.fullValue - CostTrade.invoicedAmount))\r\n                : ((CostTrade.isOriginal === 0 ? ((CostTrade.fullValue - CostTrade.invoicedAmount))\r\n                    : (-1 * (CostTrade.fullValue - CostTrade.invoicedAmount))));\r\n            this.blDate = CostTrade.blDate;\r\n            this.percentageActualized = CostTrade.percentageActualized;\r\n            this.quantity = CostTrade.quantity;\r\n            this.contractNumber = CostTrade.contractNumber;\r\n            this.accrualNumber = CostTrade.accrualNumber;\r\n            this.accountNumber = CostTrade.accountNumber;\r\n            this.description = CostTrade.description;\r\n            this.sectionId = CostTrade.sectionId;\r\n            this.costId = CostTrade.costId;\r\n            this.accountLineTypeId = CostTrade.accountLineTypeId;\r\n            this.postingCostType = CostTrade.postingCostType;\r\n            this.documentReference = CostTrade.documentReference;\r\n            this.documentDate = CostTrade.documentDate;\r\n            this.inhouseOrExternal = CostTrade.inhouseOrExternal;\r\n\r\n        }\r\n    }\r\n\r\n}\r\n","import { AccountingDocumentLine } from '../entities/accounting-document-line.entity';\r\nimport { PostingManagement } from '../entities/posting-management.entity';\r\nimport { PostingDocumentType } from '../enums/posting-document-type.enum';\r\nimport { PostingStatus } from '../enums/posting-status.enum';\r\n\r\nexport class PostingManagementDisplayView {\r\n    accountingId: number;\r\n    documentReference: string;\r\n    documentDate: Date;\r\n    associatedAcc: string;\r\n    statusId: PostingStatus;\r\n    errorMessage: string;\r\n    amount: number;\r\n    currency: string;\r\n    departmentId: number;\r\n    authorizedOn: Date;\r\n    authorizedAt: string;\r\n    authorizedBy: string;\r\n    createdDateTime: Date;\r\n    createdBy: string;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    valueDate: Date;\r\n    glDate: Date;\r\n    accountingPeriod: Date;\r\n    currencyCode: string;\r\n    reason: string;\r\n    total: number;\r\n    transactionDocumentTypeId: PostingDocumentType;\r\n\r\n    accountingDocumentLines: AccountingDocumentLine[];\r\n    isAmountValid: boolean;\r\n    isStatuoryAmountValid: boolean;\r\n    isFunctionalAmountValid: boolean;\r\n    isEditable: boolean;\r\n    toInterface: boolean;\r\n    originalValueDate: Date;\r\n    dmsId: number;\r\n    invoiceId: number;\r\n    invoiceTypeId: number;\r\n    cashId: number;\r\n    costDirectionId: number;\r\n\r\n    authorizedDate: Date;\r\n    localAuthorizedDate: Date;\r\n    taTypeId: number;\r\n    journalLineId: number;\r\n    provinceId: number;\r\n    settlementCurrency: string;\r\n    dealNumber: string;\r\n\r\n    constructor(postingManagement: PostingManagement) {\r\n        if (postingManagement) {\r\n            this.accountingId = postingManagement.accountingId;\r\n            this.documentReference = postingManagement.documentReference;\r\n            this.documentDate = postingManagement.documentDate;\r\n            this.associatedAcc = postingManagement.associatedAcc;\r\n            this.statusId = postingManagement.statusId;\r\n            this.errorMessage = postingManagement.errorMessage;\r\n            this.amount = postingManagement.amount;\r\n            this.currency = postingManagement.currencyCode;\r\n            this.departmentId = postingManagement.departmentId;\r\n            this.authorizedOn = postingManagement.localAuthorizedDate;\r\n            this.authorizedDate = postingManagement.authorizedDate;\r\n            this.localAuthorizedDate = postingManagement.localAuthorizedDate;\r\n            const localAuthorizedDate: Date = postingManagement.localAuthorizedDate as Date;\r\n            this.authorizedAt = localAuthorizedDate ? localAuthorizedDate.toISOString() : null;\r\n            this.authorizedBy = postingManagement.authorizedBy;\r\n            this.createdDateTime = postingManagement.createdDateTime;\r\n            this.createdBy = postingManagement.createdBy;\r\n            this.modifiedDateTime = postingManagement.modifiedDateTime;\r\n            this.modifiedBy = postingManagement.modifiedBy;\r\n            this.valueDate = postingManagement.valueDate;\r\n            this.glDate = postingManagement.glDate;\r\n            this.accountingPeriod = postingManagement.accountingPeriod;\r\n            this.currencyCode = postingManagement.currencyCode;\r\n            this.total = postingManagement.total;\r\n            this.reason = '';\r\n            this.accountingDocumentLines = postingManagement.accountingDocumentLines;\r\n            this.isAmountValid = true;\r\n            this.isFunctionalAmountValid = true;\r\n            this.isStatuoryAmountValid = true;\r\n            this.transactionDocumentTypeId = postingManagement.transactionDocumentTypeId;\r\n            this.originalValueDate = postingManagement.originalValueDate;\r\n            this.dmsId = postingManagement.dmsId;\r\n            this.toInterface = postingManagement.toInterface;\r\n            this.invoiceId = postingManagement.invoiceId;\r\n            this.invoiceTypeId = postingManagement.invoiceTypeId;\r\n            this.cashId = postingManagement.cashId;\r\n            this.costDirectionId = postingManagement.costDirectionId;\r\n            this.taTypeId = postingManagement.taTypeId;\r\n            this.dealNumber = postingManagement.dealNumber;\r\n            this.journalLineId = postingManagement.journalLineId;\r\n            this.settlementCurrency = postingManagement.settlementCurrency;\r\n        }\r\n    }\r\n}\r\n","import { AccountingEntriesSearchResult } from '../dtos/accountingEntries-search-result';\r\nimport { ReversalAccountingDocument } from '../entities/reversal-accounting-document.entity';\r\n\r\nexport class ReversalDocumentDisplayView {\r\n    accountingId: number;\r\n    accountingDocumentLines: AccountingEntriesSearchResult[];\r\n\r\n    constructor(reversalDocument: ReversalAccountingDocument) {\r\n        if (reversalDocument) {\r\n            this.accountingId = reversalDocument.accountingId;\r\n\r\n            this.accountingDocumentLines = reversalDocument.accountingDocumentLines;\r\n\r\n        }\r\n    }\r\n}\r\n","import { TransactionDetail } from '../entities/transaction-detail.entity';\r\n\r\nexport class TransactionDetailDisplayView {\r\n    transactionDocumentId: number;\r\n    transactionDocumentTypeId: number;\r\n\r\n    constructor(transactionDetail: TransactionDetail) {\r\n        if (transactionDetail) {\r\n            this.transactionDocumentId = transactionDetail.transactionDocumentId;\r\n            this.transactionDocumentTypeId = transactionDetail.transactionDocumentTypeId;\r\n        }\r\n    }\r\n}\r\n","export class DocumentMatching {\r\n    transactionDocumentId: string;\r\n    transactionDocumentTypeId: number;\r\n    accountReference: string;\r\n    counterpartyId: number;\r\n    clientName: string;\r\n    lineId: number;\r\n    documentReference: string;\r\n    secondaryRef: string;\r\n    departmentId: number;\r\n    departmentCode: string;\r\n    currencyCode: string;\r\n    matchFlagId: number;\r\n    markingId: number;\r\n    documentDate: Date;\r\n    valueDate: Date;\r\n    costType: string;\r\n    expenseCode: string;\r\n    narrative: string;\r\n    documentType: string;\r\n    credit: number;\r\n    debit: number;\r\n    isMatched: boolean;\r\n    balance: number;\r\n    amount: number;\r\n    totalCredit: number;\r\n    totalDebit: number;\r\n    isChecked: boolean;\r\n    statutoryCcyAmount: number;\r\n    functionalCcyAmount: number;\r\n    currencyRoeType: string;\r\n    rate: number;\r\n    isCreditOrDebit: string;\r\n    matchFlagCode: string;\r\n    documentAmount: number;\r\n    totalAmount: number;\r\n    transactionDirectionId: number;\r\n    transactiondocumentlist: number;\r\n    revalTransactionDocumentId: number;\r\n    originalRevaluationReference: string;\r\n    paymentDocumentDate: Date;\r\n    sourceJournalLineId: number;\r\n    sourceInvoiceId: number;\r\n    sourceCashLineId: number;\r\n}\r\n","import { MonthEndTemporaryAdjustmentCommand } from './monthend-temporary-adjustment-command';\r\n\r\nexport class FXDealMonthEndTemporaryAdjustmentListCommand {\r\n    documentDate: Date;\r\n    accountingPeriod: Date;\r\n    dataVersionId: number;\r\n    dataVersionDate: Date;\r\n    reportType: number;\r\n}\r\n","import { MonthEndTemporaryAdjustmentCommand } from './monthend-temporary-adjustment-command';\r\n\r\nexport class MonthEndTemporaryAdjustmentListCommand {\r\n    DocumentDate: Date;\r\n    AccountingPeriod: Date;\r\n    dataVersionId: number;\r\n    dataVersionDate: Date;\r\n    reportType: number;\r\n}\r\n","export class YearEndProcessCommand {\r\n    year: number;\r\n    isFinalRun: boolean;\r\n    bsReserveAccountId: number;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { PreaccountingService } from '../http-services/preaccounting.service';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class FinancialsEditDocumentDataLoader implements DataLoader {\r\n    constructor(private preaccountingService: PreaccountingService\r\n    ) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        accountingId: number,\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n        let list: any = of(new Observable<ApiPaginatedCollection<any>>());\r\n        // has to replace with execution search service call\r\n        if(accountingId){\r\n         list = this.preaccountingService.getAccoutingLinesData(request)\r\n            .pipe(\r\n                map((data) => {\r\n                        data.value = data.value.filter((row) => row.accountingDocumentId === accountingId)\r\n                        return data;\r\n                    } \r\n                ),\r\n            );\r\n        }\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { PreaccountingService } from '../http-services/preaccounting.service';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class PostingAccountLinesDataLoader implements DataLoader {\r\n\r\n    constructor(private preaccountingService: PreaccountingService\r\n    ) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n        const list = this.preaccountingService.getAccoutingDocumentDataList(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DocumentReferenceSearchResult } from '../../dtos/list-and-search/document-reference-search-result';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { AccountingDocumentService } from '../http-services/accounting-document.service';\r\nimport { FindValueSubscriber } from 'rxjs/internal/operators/find';\r\n\r\n@Injectable()\r\nexport class AllDocumentReferenceDataLoader implements MasterDataLoader {\r\n    constructor(private accountingDocumentService: AccountingDocumentService) { }\r\n\r\n    getData(): Observable<DocumentReferenceSearchResult[]> {\r\n        const filtersForColumns: ListAndSearchFilterDto[] = [];\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n        };\r\n        const list = this.accountingDocumentService.documentReferenceContexuaSearch(request, false)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DocumentReferenceSearchResult } from '../../dtos/list-and-search/document-reference-search-result';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { AccountingDocumentService } from '../http-services/accounting-document.service';\r\n\r\n@Injectable()\r\nexport class DocumentReferenceDataLoader implements MasterDataLoader {\r\n    constructor(private accountingDocumentService: AccountingDocumentService) { }\r\n\r\n    getData(): Observable<DocumentReferenceSearchResult[]> {\r\n        const filtersForColumns: ListAndSearchFilterDto[] = [];\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n        };\r\n        const list = this.accountingDocumentService.documentReferenceContexuaSearch(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n        return list;\r\n    }\r\n}\r\n","import { DocumentMatching } from '../../execution/dtos/document-matching';\r\nimport { ManualDocumentUnmatchingRecord } from '../../execution/dtos/manual-unmatch-record';\r\n\r\nexport class DocumentMatchingRecord {\r\n    counterpartyId: number;\r\n    counterpartyCode: string;\r\n    currencyCode: string;\r\n    departmentCode: string;\r\n    documentMatchings: DocumentMatching[] = [];\r\n    manualDocumentMatchings: DocumentMatching[] = [];\r\n    paymentDocumentDate: Date;\r\n    journalId: string;\r\n    matchFlagId: number;\r\n    functionalCurrency: string;\r\n    statutoryCurrency: string;\r\n    transactionDocumentId: number;\r\n    reversalRevalJournalCode: string;\r\n    matchFlagCode: string;\r\n    totalAmount: number;\r\n    unmatchDocuments: ManualDocumentUnmatchingRecord[] = [];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { TransactionDocumentSearchResult } from '../../dtos/transaction-document-search-result';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { AccountingDocumentService } from '../http-services/accounting-document.service';\r\n\r\n@Injectable()\r\nexport class TransactionDocumentDataLoader implements MasterDataLoader {\r\n    constructor(private accountingDocumentService: AccountingDocumentService) { }\r\n\r\n    getData(): Observable<TransactionDocumentSearchResult[]> {\r\n        const filtersForColumns: ListAndSearchFilterDto[] = [];\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n        };\r\n        const list = this.accountingDocumentService.transactionDocumentContexuaSearch(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n"],"sourceRoot":""}