{"version":3,"sources":["webpack:///./Client/app/shared/entities/allocate-section.entity.ts","webpack:///./Client/app/shared/entities/allocation.entity.ts","webpack:///./Client/app/shared/entities/bulk-edit-cost.entity.ts","webpack:///./Client/app/shared/entities/cost.entity.ts","webpack:///./Client/app/shared/entities/fxdeal-detail.entity.ts","webpack:///./Client/app/shared/entities/interco-validation.entity.ts","webpack:///./Client/app/shared/entities/invoice-markings.entity.ts","webpack:///./Client/app/shared/entities/merge-contracts.entity.ts","webpack:///./Client/app/shared/entities/physical-trade-bulk-edit.ts","webpack:///./Client/app/shared/entities/tag.entity.ts","webpack:///./Client/app/shared/entities/trade-merge-options.entity.ts","webpack:///./Client/app/shared/enums/add-override.enum.ts","webpack:///./Client/app/shared/enums/allocate-trade-option-enum.ts","webpack:///./Client/app/shared/enums/allocation-type.enum.ts","webpack:///./Client/app/shared/enums/cost-edit-options.enum.ts","webpack:///./Client/app/shared/enums/costmatrix-action.enum.ts","webpack:///./Client/app/shared/enums/currency-codes.enum.ts","webpack:///./Client/app/shared/enums/current-trade-option-enum.ts","webpack:///./Client/app/shared/enums/fx-deals-direction.enum.ts","webpack:///./Client/app/shared/enums/fx-deals-status.enum.ts","webpack:///./Client/app/shared/enums/gaps.enum.ts","webpack:///./Client/app/shared/enums/position-month-type.enum.ts","webpack:///./Client/app/shared/enums/spot-roe-type.enum.ts","webpack:///./Client/app/shared/enums/trade-approval-status.enum.ts","webpack:///./Client/app/shared/enums/trade-bulk-edit-fields.enum.ts","webpack:///./Client/app/shared/enums/trade-field-header-bulk-edit.enum.ts","webpack:///./Client/app/shared/enums/trade-merge-options.enum.ts","webpack:///./Client/app/shared/enums/view-document-type.enum.ts","webpack:///./Client/app/shared/enums/view-mode-behaviour.enum.ts","webpack:///./Client/app/shared/enums/view-mode.enum.ts","webpack:///./Client/app/shared/enums/yes-no-confirmation.enum.ts","webpack:///./Client/app/shared/models/section-complete-display-view.ts","webpack:///./Client/app/shared/services/execution/dtos/bulk-deallocation-section-command.ts","webpack:///./Client/app/shared/services/execution/dtos/child-sections-to-split.ts","webpack:///./Client/app/shared/services/execution/dtos/deallocate-bulk-sections.ts","webpack:///./Client/app/shared/services/list-and-search/childSections-data-loader.ts","webpack:///./Client/app/shared/services/list-and-search/export/list-and-search-export-adapter.ts","webpack:///./Client/app/shared/services/list-and-search/tradeAllocation-data-loader.ts","webpack:///./Client/app/shared/services/masterdata/paymentTerms-data-loader.ts","webpack:///./Client/app/shared/services/masterdata/ports-data-loader.ts","webpack:///./Client/app/shared/services/trading/dtos/costmatrix.ts","webpack:///./Client/app/shared/services/trading/dtos/costmatrixLine.ts","webpack:///./Client/app/shared/services/trading/trader-contextual-data-loader.ts","webpack:///./Client/app/shared/validators/crop-year-validator.validator.ts","webpack:///./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-ag-grid-row.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/quantity-form-control-validator.validator.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-control-validator.validator.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.ts","webpack:///./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.html","webpack:///./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.scss","webpack:///./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.ts","webpack:///./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.html","webpack:///./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.scss","webpack:///./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.ts","webpack:///./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.html","webpack:///./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.scss","webpack:///./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.ts","webpack:///./Client/app/trading/components/costmatrices/costmatrices.component.html","webpack:///./Client/app/trading/components/costmatrices/costmatrices.component.scss","webpack:///./Client/app/trading/components/costmatrices/costmatrices.component.ts","webpack:///./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.html","webpack:///./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.scss","webpack:///./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.ts","webpack:///./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.html","webpack:///./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.scss","webpack:///./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.ts","webpack:///./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.html","webpack:///./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.scss","webpack:///./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.ts","webpack:///./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.html","webpack:///./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.scss","webpack:///./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.ts","webpack:///./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.html","webpack:///./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.scss","webpack:///./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.ts","webpack:///./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.html","webpack:///./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.scss","webpack:///./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.ts","webpack:///./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.html","webpack:///./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.scss","webpack:///./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.ts","webpack:///./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.html","webpack:///./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.scss","webpack:///./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.ts","webpack:///./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.html","webpack:///./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.scss","webpack:///./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.ts","webpack:///./Client/app/trading/components/fx-deals/fx-deals.component.html","webpack:///./Client/app/trading/components/fx-deals/fx-deals.component.scss","webpack:///./Client/app/trading/components/fx-deals/fx-deals.component.ts","webpack:///./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.html","webpack:///./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.scss","webpack:///./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.ts","webpack:///./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.html","webpack:///./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.scss","webpack:///./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.ts","webpack:///./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.html","webpack:///./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.scss","webpack:///./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.ts","webpack:///./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.html","webpack:///./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.scss","webpack:///./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.ts","webpack:///./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.html","webpack:///./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.scss","webpack:///./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.ts","webpack:///./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.html","webpack:///./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.scss","webpack:///./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.ts","webpack:///./Client/app/trading/components/group-amendments/group-amendments.component.html","webpack:///./Client/app/trading/components/group-amendments/group-amendments.component.scss","webpack:///./Client/app/trading/components/group-amendments/group-amendments.component.ts","webpack:///./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.html","webpack:///./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.scss","webpack:///./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts","webpack:///./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.html","webpack:///./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.scss","webpack:///./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts","webpack:///./Client/app/trading/components/group-functions/group-functions.component.html","webpack:///./Client/app/trading/components/group-functions/group-functions.component.scss","webpack:///./Client/app/trading/components/group-functions/group-functions.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.html","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.html","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.html","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.html","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.html","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.html","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.html","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.ts","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.html","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.scss","webpack:///./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.ts","webpack:///./Client/app/trading/components/section-new/section-new.component.html","webpack:///./Client/app/trading/components/section-new/section-new.component.scss","webpack:///./Client/app/trading/components/section-new/section-new.component.ts","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.html","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.scss","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.ts","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.html","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.scss","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.ts","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.html","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.scss","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.ts","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.html","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.scss","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.ts","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.html","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.scss","webpack:///./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.ts","webpack:///./Client/app/trading/components/trade-allocation/trade-allocation.component.html","webpack:///./Client/app/trading/components/trade-allocation/trade-allocation.component.scss","webpack:///./Client/app/trading/components/trade-allocation/trade-allocation.component.ts","webpack:///./Client/app/trading/components/trade-cost-report/trade-cost-report.component.html","webpack:///./Client/app/trading/components/trade-cost-report/trade-cost-report.component.scss","webpack:///./Client/app/trading/components/trade-cost-report/trade-cost-report.component.ts","webpack:///./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.html","webpack:///./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.scss","webpack:///./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.ts","webpack:///./Client/app/trading/components/trades-tab/trades-tab.component.html","webpack:///./Client/app/trading/components/trades-tab/trades-tab.component.scss","webpack:///./Client/app/trading/components/trades-tab/trades-tab.component.ts","webpack:///./Client/app/trading/components/trades/trades.component.css","webpack:///./Client/app/trading/components/trades/trades.component.html","webpack:///./Client/app/trading/components/trades/trades.component.ts","webpack:///./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.html","webpack:///./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.scss","webpack:///./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.ts","webpack:///./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.html","webpack:///./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.scss","webpack:///./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.ts","webpack:///./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.html","webpack:///./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.scss","webpack:///./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.ts","webpack:///./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.html","webpack:///./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.scss","webpack:///./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.ts","webpack:///./Client/app/trading/entities/allocation-warning.ts","webpack:///./Client/app/trading/entities/cancel-trade.entity.ts","webpack:///./Client/app/trading/entities/physical-fixed-priced-contract.entity.ts","webpack:///./Client/app/trading/entities/section-tab-index.ts","webpack:///./Client/app/trading/entities/trade-image.entity.ts","webpack:///./Client/app/trading/entities/trade-merge-message.entity.ts","webpack:///./Client/app/trading/entities/tradeFavoriteDetail.entity.ts","webpack:///./Client/app/trading/fno-trade-details.resolver.ts","webpack:///./Client/app/trading/pipes/quantity.pipe.ts","webpack:///./Client/app/trading/services/form-field-handler.service.ts","webpack:///./Client/app/trading/services/trade-data.service.ts","webpack:///./Client/app/trading/trading.module.ts","webpack:///./Client/app/trading/trading.route.ts","webpack:///./Client/app/trading/validators/contract-reference-async-validator.validator.ts","webpack:///./Client/app/trading/validators/costmatrix-name-async-validator.validator.ts"],"names":[],"mappings":"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","file":"trading-trading-module.js","sourcesContent":["import { ShippingType } from '../enums/shipping-type-enum';\r\nimport { ContractInvoiceType } from '../enums/contract-invoice-type.enum';\r\n\r\nexport class AllocateSection {\r\n    sectionId: number;\r\n    dataVersionId: number;\r\n    allocatedSectionId: number;\r\n    shippingType: ShippingType;\r\n    quantity: number;\r\n    allocatedSectionReference: string;\r\n    contractInvoiceTypeId: ContractInvoiceType;\r\n}\r\n","export class Allocation {\r\n    allocatedSectionId: number;\r\n    dateOfAllocation: Date;\r\n    groupNumber: number;\r\n    contractTermCode: string;\r\n    allocatedSectionCode: string;\r\n    buyerCode: string;\r\n    sellerCode: string;\r\n    transferShippingOptionId: number;\r\n}\r\n","export class BulkCost {\r\n    sectionId: number;\r\n    contractReference: string;\r\n    costTypeCode: string;\r\n    costTypeId: number;\r\n    description: string;\r\n    supplierCode: string;\r\n    costDirectionId: number;\r\n    currencyCode: string;\r\n    rateTypeId: number;\r\n    priceUnitId: number;\r\n    rate: number;\r\n    inPL: boolean;\r\n    noAction: boolean;\r\n    narrative: string;\r\n    companyId: string;\r\n    invoicePercent: number;\r\n    costMatrixName: string;\r\n    isAddOrOverride: string;\r\n    costMatrixLineId: number;\r\n    rateTypeCode: string;\r\n    priceCode: string;\r\n    costDirection: string;\r\n    rowStatus: string;\r\n    costId: number;\r\n    quantity: number;\r\n    invoicingStatusId: number;\r\n    isApproved: boolean;\r\n    // used to identify to which contracts,\r\n    // the newly added cost lines to added\r\n    costIds: number[];\r\n    updateOptions: string;\r\n    isProRata: boolean;\r\n    sectionIds: number[];\r\n    isDelete: boolean;\r\n\r\n}\r\n","import { InvoiceMarkingSearchResult } from \"../dtos/invoice-marking\";\r\n\r\nexport class Cost {\r\n    costId: number;\r\n    rowStatus: string;\r\n    bestMatch: string;\r\n    sectionId: number;\r\n    costTypeCode: string;\r\n    description: string;\r\n    supplierCode: string;\r\n    costDirectionId: number;\r\n    currencyCode: string;\r\n    rateTypeId: number;\r\n    priceUnitId: number;\r\n    rate: number;\r\n    inPL: boolean;\r\n    noAction: boolean;\r\n    invoiceStatus: number;\r\n    narrative: string;\r\n    costMatrixLineId: number;\r\n    originalEstimatedPMTValue: number;\r\n    originalEstRateTypeId: number;\r\n    originalEstPriceUnitId: number;\r\n    originalEstCurrencyCode: string;\r\n    originalEstRate: number;\r\n    companyId: string;\r\n    createdDateTime: Date;\r\n    createdBy: string;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    contextInformation: string;\r\n    documentReference: string;\r\n    documentDate: Date;\r\n    invoicePercent: number;\r\n    costMatrixName: string;\r\n    costInvoiceMarkingLines: InvoiceMarkingSearchResult[];\r\n\r\n}\r\n","import { PostingStatus } from \"../enums/posting-status.enum\";\r\n\r\nexport class FxDealDetail {\r\n    fxDealId: number;\r\n    dataVersionId: number;\r\n    companyId: string;\r\n    reference: string;\r\n    dealDirectionId: number;\r\n    traderId: number;\r\n    contractDate: number;\r\n    maturityDate?: Date;\r\n    departmentId: number;\r\n    fxTradeTypeId?: number;\r\n    currencyCode: string;\r\n    amount: number;\r\n    settlementCurrencyCode: string;\r\n    spotRate: number;\r\n    spotRateType: string;\r\n    fwPoints?: number;\r\n    nominalAccountId: number;\r\n    settlementNominalAccountId: number;\r\n    counterpartyId: number;\r\n    brokerId: number;\r\n    fxDealStatusId: number;\r\n    bankReference: string;\r\n    memorandum: string;\r\n    traderDisplayName: string;\r\n    departmentCode: string;\r\n    accountNumber: string;\r\n    settlementNominalAccountNumber: string;\r\n    totalApplied: number;\r\n    balance: number;\r\n    createdBy: string;\r\n    createdDateTime?: Date;\r\n    modifiedBy: string;\r\n    modifiedDateTime?: Date;\r\n    isEditMode: boolean;\r\n    fxDealDocumentId: number;\r\n    fxSettlementDocumentId: number;\r\n    fxDealDocument: string;\r\n    fxSettlementDocument: string;\r\n    fxDealReverseDocumentId: number;\r\n    fxSettlementReverseDocumentId: number;\r\n    fxDealReverseDocument: string;\r\n    fxSettlementReverseDocument: string;\r\n    fxSettlementDealDocumentPostingStatusId: PostingStatus;\r\n    fxSettlementSettlementDocumentPostingStatusId: PostingStatus;\r\n    ndfAgreedRate: number;\r\n    ndfAgreedDate?: Date;\r\n    fxReference: string;\r\n    c2CCode: string;\r\n    nominalAlternativeAccount: string;\r\n    departmentAlternativeCode: string;\r\n    settlementNominalAccount: string;\r\n    counterpartyCode: string;\r\n    departmentMappingCode: string;\r\n    nominalAccountNumber: string;\r\n    settlementAccountNumber: string;\r\n}\r\n","export class IntercoValidation {\r\n    companyId: string;\r\n    intercoFields: IntercoField[];\r\n}\r\n\r\nexport class IntercoField {\r\n    groupId: number;\r\n    type: string;\r\n    name: string;\r\n    value: (string | number);\r\n    mappingName: string;\r\n    setValue: string;\r\n}\r\n","export class InvoiceMarkings {\r\n    invoiceMarkingId: number;\r\n    sectionId: number;\r\n    costId: number;\r\n    contractReference: string;\r\n    invoiceLineId: number;\r\n    invoiceDate: Date;\r\n    postingStatusId: number;\r\n    quantity: number;\r\n    currencyCode: string;\r\n    invoiceAmount: number;\r\n    documentType: string;\r\n    sectionType: string;\r\n    invoicePercent: number;\r\n    dueDate: Date;\r\n    paymentTermCode: string;\r\n    paidAmount: number;\r\n    customerReference: string;\r\n    paidPercentage: string; // to not loose decimals, in the API it will be automatically converted to decimal\r\n    cashMatchDate: Date;\r\n    remainingAmount: number;\r\n    companyId: string;\r\n    contractValue: number;\r\n    costType: string;\r\n    invoiceReference: string;\r\n    price: number;\r\n}\r\n\r\nexport class InvoiceMarkingPercentLines {\r\n    invoicePercent: number;\r\n    invoiceLineId: number;\r\n}","export class MergeContracts {\r\n    mergeToSectionId: number;\r\n    mergeFromSectionIds: number[];\r\n    mergeOption: number;\r\n}\r\n","import { PhysicalContractToUpdate } from './physical-contract-to-update.entity';\r\nimport { SectionToUpdate } from './section-to-update.entity';\r\n\r\nexport class PhysicalTradeBulkEdit {\r\n    companyId: string;\r\n    physicalContractToUpdate: PhysicalContractToUpdate[];\r\n    sectionToUpdate: SectionToUpdate[];\r\n\r\n    constructor(companyId: string, physicalContractToUpdate: PhysicalContractToUpdate[] = null,\r\n        sectionToUpdate: SectionToUpdate[] = null) {\r\n        this.companyId = companyId;\r\n        this.physicalContractToUpdate = physicalContractToUpdate;\r\n        this.sectionToUpdate = sectionToUpdate;\r\n    }\r\n}\r\n","export class Tag {\r\n    id: string;\r\n    tagValueId: string;\r\n    typeName: string;\r\n\r\n    constructor(tagValueId: string, typeName: string) {\r\n        this.id = tagValueId;\r\n        this.tagValueId = tagValueId;\r\n        this.typeName = typeName;\r\n    }\r\n}\r\n","export class TradeMergeOptions {\r\n    private static list: TradeMergeOptions[];\r\n    private static readonly contractHeader = new TradeMergeOptions(1, 'Contract Header(.0000)');\r\n    private static readonly contractParent = new TradeMergeOptions(2, 'Contract [Parent]');\r\n    private static readonly firstSelectedSplit = new TradeMergeOptions(3, '1st Selected Split');\r\n\r\n    value: number;\r\n    name: string;\r\n\r\n    constructor(value: number, name: string) {\r\n        this.value = value;\r\n        this.name = name;\r\n    }\r\n\r\n    public static getTradeMergeOptionsList(): TradeMergeOptions[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.contractHeader,\r\n                    this.contractParent,\r\n                    this.firstSelectedSplit,\r\n                ];\r\n        }\r\n        return this.list;\r\n    }\r\n\r\n    public static getTradeMergeOptionsStringList(): string[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.contractHeader,\r\n                    this.contractParent,\r\n                    this.firstSelectedSplit,\r\n                ];\r\n        }\r\n        return this.list.map((item) => item.name);\r\n    }\r\n}\r\n","export enum AddOrOverride {\r\n    Add = 1,\r\n    Override = 2,\r\n}\r\n","export enum AllocateTradeOption {\r\n    NoAction = 0,\r\n    AdjustAllocation = 1,\r\n    LeaveStatus = 2,\r\n    CreateUnallocatedResidualSplit = 3,\r\n}\r\n","export enum AllocationType {\r\n    SplitWhereNecessary = 1,\r\n    AdjustWhereNecessary = 2,\r\n}\r\n","export enum CostBulkEditUpdateOptions {\r\n    AddNewCost = 'Add New Cost',\r\n    OverRideCost = 'Override Cost',\r\n}\r\n","export enum CostMatrixAction {\r\n    Create = 'Create',\r\n    Edit = 'Edit',\r\n    Image = 'Image',\r\n}\r\n","export enum CurrencyCodes\r\n{\r\n    USD = 'USD',\r\n}","export enum CurrentTradeOption {\r\n    NoAction = 0,\r\n    AdjustContract = 1,\r\n    CreateAllocatedResidualSplit = 2,\r\n    CreateUnallocatedResidualSplit = 3,\r\n}\r\n","export enum FxDealDirection {\r\n    Buy = 1,\r\n    Sell = 2\r\n}","export enum FxDealStatus {\r\n    Open = 1,\r\n    Linked = 2,\r\n    Settled = 3,\r\n    Deleted = 4,\r\n}","export enum Gaps {\r\n    gap003 = 'gap003',\r\n    noGap003 = '!gap003',\r\n}\r\n","export enum PositionMonthTypes\r\n{\r\n    Start = 0,\r\n    End = 1,\r\n\tProrata = 2\r\n}\r\n","export enum SpotRoeType {\r\n    Multiplication = 'M',\r\n    Division = 'D'\r\n}\r\n","export enum TradeApprovalStatus {\r\n    Approved = 'Approved',\r\n    Unapproved = 'Unapproved',\r\n    ApprovedStatus = 1,\r\n}\r\n","export enum TradeBulkEditFields {\r\n    ArbitrationId = 'arbitrationId',\r\n    BLDate = 'blDate',\r\n    BLReference = 'blReference',\r\n    BuyerId = 'buyerCounterpartyId',\r\n    CommodityId = 'commodityId',\r\n    ContractDate = 'contractDate',\r\n    ContractedValue = 'contractValue',\r\n    ContractTermId = 'contractTermId',\r\n    ContractTermLocationId = 'portTermId',\r\n    CounterpartyRef = 'counterpartyReference',\r\n    CropYear = 'cropYear',\r\n    CurrencyCode = 'currencyCode',\r\n    DeliveryPeriodEnd = 'deliveryPeriodEnd',\r\n    PositionMonth = 'positionMonthValue',\r\n    DeliveryPeriodStart = 'deliveryPeriodStart',\r\n    DepartmentId = 'departmentId',\r\n    MarketSectorId = 'businessSectorId',\r\n    Memorandum = 'memorandum',\r\n    PaymentTermId = 'paymentTermsId',\r\n    PeriodTypeId = 'periodTypeId',\r\n    PortDestinationId = 'portDestinationId',\r\n    PortOriginId = 'portOriginId',\r\n    PremiumDiscountBasis = 'premiumDiscountBasis',\r\n    PremiumDiscountCurrency = 'premiumDiscountCurrency',\r\n    PremiumDiscountValue = 'premiumDiscountValue',\r\n    PremiumDiscountTypeId = 'premiumDiscountTypeId',\r\n    Price = 'contractPrice',\r\n    PriceUnitId = 'priceUnitId',\r\n    SellerId = 'sellerCounterpartyId',\r\n    TraderId = 'userId',\r\n    VesselId = 'vesselId',\r\n    ContractReturnedDate = 'contractReturnedDate',\r\n    ContractSentDate = 'contractSentDate',\r\n    LastDocumentIssuedDate = 'contractIssuedDate',\r\n    LastEmailReceivedDate = 'lastEmailReceivedDate',\r\n    ApprovalStatus = 'unapproval',\r\n    PositionMonthType = 'positionMonthValue',\r\n    InvoicingStatusId = 'invoicingStatus',\r\n    OtherReference = 'otherReference',\r\n    EstimatedMaturityDate = 'maturityDate',\r\n}\r\n","export enum TradeFieldHeader {\r\n    Header = 1,\r\n    Counterparty = 2,\r\n    Commodity = 3,\r\n    Terms = 4,\r\n    ShipmentPeriod = 5,\r\n    Location = 6,\r\n    ShipmentInformation = 7,\r\n    BLInformation = 8,\r\n    InvoicingStatus = 9,\r\n    InternalMemorandum = 10,\r\n    Price = 11,\r\n    ContractandDocumentStatus = 12,\r\n}\r\n","export enum ContractMergeOptions {\r\n\r\n    ContractHeader = 1,\r\n    ContractParent = 2,\r\n    FirstSelectedSplit = 3,\r\n}\r\n","export enum ViewDocumentType {\r\n    Commercial = 'Commercial',\r\n    Reversal = 'Reversal',\r\n    Washout = 'Washout',\r\n    All = 'All',\r\n}\r\n\r\n// Used in invoice-view-mode component\r\n","export enum ViewModeBehaviour {\r\n    'Details for this trade' = 0,\r\n    'Show Details for whole trade' = 1,\r\n    'Show Details for all trades' = 2,\r\n    'Show Details for tranches' = 3,\r\n}\r\n","export enum ViewMode {\r\n    WholeTrade = 'Show Details for whole trade',\r\n    ThisTrade = 'Details for this trade',\r\n    AllTrade = 'Show Details for all trades',\r\n    Tranches = 'Show Details for tranches',\r\n}\r\n\r\n// Used in invoice-view-mode component\r\n","export enum YesNoConfirmation {\r\n    Yes = 1,\r\n    No = 0,\r\n}\r\n","import * as _moment from 'moment';\r\nimport { Cost } from '../entities/cost.entity';\r\nimport { Section } from '../entities/section.entity';\r\nimport { ContractStatus } from '../enums/contract-status.enum';\r\nimport { ContractTypes } from '../enums/contract-type.enum';\r\nimport { PositionMonthTypes } from '../enums/position-month-type.enum';\r\nimport { PricingMethods } from '../enums/pricing-method.enum';\r\nconst moment = _moment;\r\n\r\nexport class SectionCompleteDisplayView {\r\n    // -- General Information\r\n    sectionId: number;\r\n    reference: string;\r\n    type: string;\r\n    contractDate: Date;\r\n    departmentCode: string;\r\n    departmentId: number;\r\n    traderId: number;\r\n\r\n    // -- Counterparty\r\n    buyerCode: string;\r\n    sellerCode: string;\r\n    counterpartyReference: string;\r\n    // -- Product\r\n    commodityId: number;\r\n    quantity: number;\r\n    weightUnitId: number;\r\n    cropYear: number;\r\n    cropYearTo: number;\r\n    originalQuantity: number;\r\n\r\n    // -- Terms & Period &memorandum\r\n    deliveryPeriodStart: Date;\r\n    deliveryPeriodEnd: Date;\r\n    contractTerms: string;\r\n    contractTermsLocation: string;\r\n    contractedValue: string;\r\n    portOfOrigin: string;\r\n    portOfDestination: string;\r\n    memorandum: string;\r\n\r\n    periodTypeCode: string; // Delivery default\r\n    periodTypeId: number;\r\n    positionMonthType: string;\r\n    positionMonth: Date;\r\n    positionMonthIndex: number;\r\n    arbitration: string;\r\n    marketSectorId: number;\r\n\r\n    blDate: Date;\r\n    allocatedTo: string;\r\n    allocationDate: string;\r\n\r\n    // -- Pricing\r\n    pricingMethod: PricingMethods;\r\n    pricingMethodAsString: string;\r\n    paymentTerms: string;\r\n    currency: string;\r\n    priceUnitId: number;\r\n    price: number;\r\n\r\n    // Split\r\n    sectionOriginId: number;\r\n    contractLabelOrigin: string;\r\n\r\n    // -- Status\r\n    status: string;\r\n    createdBy: string;\r\n    creationDate: Date;\r\n    lastModifiedBy: string;\r\n    lastModifiedDate: Date;\r\n    firstApprovalDateTime: Date;\r\n    costs: Cost[];\r\n    lastDocumentIssuedDate: Date;\r\n    otherReference: string;\r\n    contractSentDate: Date;\r\n    lastEmailReceivedDate: Date;\r\n    contractReturnedDate: Date;\r\n    isClosed: boolean;\r\n    isCancelled: boolean;\r\n\r\n    // Charter\r\n    assignedCharter: string;\r\n    charterAssignmentDate: Date;\r\n    // -- Futures and Options\r\n    premiumDiscountTypeId?: number;\r\n    premiumDiscountValue: number;\r\n    premiumDiscountCurrency: string;\r\n    premiumDiscountBasis: number;\r\n    // -- Traffic\r\n    invoiceReference: string;\r\n    shippingPeriod: string;\r\n    invoicingStatusId: number;\r\n    allocatedToInvoicingStatusId: number;\r\n    invoiceDate: Date;\r\n    estimatedMaturityDate: Date;\r\n\r\n    constructor(section?: Section) {\r\n        if (section) {\r\n            // -- General Information\r\n            this.reference = section.contractLabel;\r\n            if (section.header) {\r\n                this.type = ContractTypes[section.header.type];\r\n                this.contractDate = section.header.contractDate;\r\n                this.traderId = section.header.traderId;\r\n            } else {\r\n                this.type = ContractTypes[section.contractType];\r\n                this.traderId = section.traderId;\r\n            }\r\n            this.departmentId = section.departmentId;\r\n\r\n            this.sectionId = section.sectionId;\r\n\r\n            // -- Counterparty\r\n            this.buyerCode = section.buyerCode;\r\n            this.sellerCode = section.sellerCode;\r\n            this.counterpartyReference = section.counterpartyReference;\r\n            // -- Product\r\n            this.commodityId = section.commodityId;\r\n            this.quantity = section.quantity;\r\n            this.weightUnitId = section.weightUnitId;\r\n            this.cropYear = section.cropYear;\r\n            this.cropYearTo = section.cropYearTo;\r\n            this.originalQuantity = section.originalQuantity;\r\n\r\n            // -- Terms & Period &Memorandum\r\n            this.deliveryPeriodStart = section.deliveryPeriodStartDate;\r\n            this.deliveryPeriodEnd = section.deliveryPeriodEndDate;\r\n            this.contractTerms = section.contractTerms;\r\n            this.contractTermsLocation = section.contractTermsLocation;\r\n            this.contractedValue = section.contractedValue.toString();\r\n            this.portOfOrigin = section.portOfOrigin;\r\n            this.portOfDestination = section.portOfDestination;\r\n            this.memorandum = section.memorandum;\r\n            this.shippingPeriod = section.shippingPeriod;\r\n\r\n            this.periodTypeCode = section.periodTypeCode;\r\n            this.positionMonthType = PositionMonthTypes[section.positionMonthType];\r\n            this.positionMonthIndex = section.positionMonthIndex;\r\n            this.positionMonth = section.positionMonth;\r\n            this.arbitration = section.arbitration;\r\n            this.marketSectorId = section.marketSectorId;\r\n\r\n            this.blDate = section.blDate;\r\n            this.allocatedTo = (section.allocatedTo) ? section.allocatedTo.contractLabel : null;\r\n            this.allocationDate = (section.allocationDate == null) ? null : moment(new Date(section.allocationDate))\r\n                .format('DD MMM YYYY').toString();\r\n\r\n            // -- Pricing\r\n            this.pricingMethod = section.pricingMethod;\r\n            this.pricingMethodAsString = PricingMethods[section.pricingMethod];\r\n            this.paymentTerms = section.paymentTerms;\r\n            this.currency = section.currencyCode;\r\n            this.priceUnitId = section.priceUnitId;\r\n            this.price = section.price;\r\n\r\n            // -- Split\r\n            this.sectionOriginId = (section.sectionOriginId == null) ? null : section.sectionOriginId;\r\n            this.contractLabelOrigin = section.contractLabelOrigin;\r\n\r\n            // -- Status\r\n            this.status = ContractStatus[section.status];\r\n            this.createdBy = section.createdBy;\r\n            this.creationDate = section.creationDate;\r\n            this.lastModifiedBy = section.lastModifiedBy;\r\n            this.lastModifiedDate = section.lastModifiedDate;\r\n            this.firstApprovalDateTime = section.firstApprovalDateTime;\r\n            this.lastDocumentIssuedDate = section.lastDocumentIssuedDate;\r\n            this.contractSentDate = section.contractSentDate;\r\n            this.lastEmailReceivedDate = section.lastEmailReceivedDate;\r\n            this.contractReturnedDate = section.contractReturnedDate;\r\n            this.otherReference = section.otherReference;\r\n            this.isClosed = section.isClosed;\r\n            this.isCancelled = section.isCancelled;\r\n\r\n            // -- Costs\r\n            this.costs = section.costs;\r\n\r\n            // charters\r\n            this.charterAssignmentDate = section.charterAssignmentDate;\r\n            this.assignedCharter = section.assignedCharterReference;\r\n\r\n            // -- Futures and Options\r\n            this.premiumDiscountTypeId = section.premiumDiscountTypeId;\r\n            this.premiumDiscountValue = section.premiumDiscountValue;\r\n            this.premiumDiscountCurrency = section.premiumDiscountCurrency;\r\n            this.premiumDiscountBasis = section.premiumDiscountBasis;\r\n\r\n            // -- Traffic\r\n            this.invoiceReference = section.invoiceReference;\r\n            this.invoicingStatusId = section.invoicingStatusId;\r\n            this.invoiceDate = section.invoiceDate;\r\n            if (section.allocatedTo) {\r\n                this.allocatedToInvoicingStatusId = section.allocatedTo.invoicingStatusId;\r\n            }\r\n            this.estimatedMaturityDate = section.estimatedMaturityDate;\r\n        }\r\n    }\r\n}\r\n","import { DeallocateBulkSections } from \"./deallocate-bulk-sections\";\r\n\r\nexport class BulkDeallocateSectionCommand {\r\n    company: string;\r\n    dataVersionId: number;\r\n    deallocateBulkSections: DeallocateBulkSections[];\r\n\r\n}","export class ChildSectionsToSplit {\r\n    childSectionId: number;\r\n    splitQuantity: number;\r\n\r\n    constructor(childSectionId: number, splitQuantity: number) {\r\n        this.childSectionId = childSectionId;\r\n        this.splitQuantity = splitQuantity;\r\n    }\r\n}\r\n","export class DeallocateBulkSections {\r\n    sectionId: number;\r\n    reInstateTrafficDetails: boolean;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { TradingService } from '../http-services/trading.service';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n@Injectable()\r\nexport class ChildSectionsDataLoader implements DataLoader {\r\n\r\n    constructor(private childSectionsService: TradingService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n        };\r\n\r\n        const list = this.childSectionsService.getTradeChildSections(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n\r\n}\r\n","import { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { ListAndSearchFilterDto } from '../../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { HttpRequestOptions } from '../../../entities/http-services/http-request-options.entity';\r\nimport { ListAndSearchFilter } from '../../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../../entities/list-and-search/list-and-search-request.entity';\r\nimport { WINDOW } from '../../../entities/window-injection-token';\r\nimport { UtilService } from '../../util.service';\r\nimport { ListAndSearchExportBase } from './list-and-search-export-base';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ListAndSearchExportAdapter extends ListAndSearchExportBase {\r\n    private gridUrls: Map<string, string>;\r\n    private readonly sectionsControllerUrl = 'sections';\r\n    private readonly companyToken = '__COMPANY__';\r\n\r\n    constructor(protected httpClient: HttpClient,\r\n        protected utilService: UtilService,\r\n        @Inject(WINDOW) protected window: Window,\r\n        private companyManager: CompanyManagerService) {\r\n        super(httpClient, utilService, window);\r\n        this.initializeGridMap();\r\n    }\r\n\r\n    sendExportRequest(\r\n        gridCode: string,\r\n        filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        gridViewId?: number): Observable<HttpResponse<Blob>> {\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            dataVersionId,\r\n            gridViewId,\r\n        };\r\n\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        options.responseType = 'blob';\r\n        options.observe = 'response';\r\n\r\n        return this.post(\r\n            this.getUrlByGridCode(gridCode),\r\n            request,\r\n            options);\r\n    }\r\n\r\n    private getUrlByGridCode(gridCode: string): string {\r\n        const companyId = this.companyManager.getCurrentCompanyId();\r\n        const url = this.gridUrls.get(gridCode);\r\n        return url.replace(this.companyToken, companyId);\r\n    }\r\n\r\n    private initializeGridMap() {\r\n        this.gridUrls = new Map<string, string>([\r\n            ['tradeList',\r\n                `${environment.tradeServiceLink}/${this.companyToken}/${this.sectionsControllerUrl}/search/export`],\r\n        ]);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { TradingService } from '../http-services/trading.service';\r\n\r\n@Injectable()\r\nexport class TradeAllocationDataLoader implements DataLoader {\r\n\r\n    constructor(private tradingService: TradingService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<any> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n            dataVersionId,\r\n        };\r\n\r\n        const list = this.tradingService.getTradesForAllocation(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { PagingOptions } from '../../entities/http-services/paging-options';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\nimport { MasterdataService } from '../http-services/masterdata.service';\r\n\r\nimport { PaymentTerm } from '../../entities/payment-term.entity';\r\n\r\n@Injectable()\r\nexport class PaymentTermsDataLoader implements MasterDataLoader {\r\n    constructor(private masterDataService: MasterdataService) { }\r\n\r\n    getData(searchTerm: string,\r\n        pagingOptions: PagingOptions): Observable<PaymentTerm[]> {\r\n\r\n        const list = this.masterDataService.getPaymentTerms(searchTerm, pagingOptions)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { PagingOptions } from '../../entities/http-services/paging-options';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\nimport { MasterdataService } from '../http-services/masterdata.service';\r\nimport { Port } from '../../entities/port.entity';\r\n\r\n@Injectable()\r\nexport class PortsDataLoader implements MasterDataLoader {\r\n    constructor(private masterDataService: MasterdataService) { }\r\n\r\n    getData(searchTerm: string,\r\n        pagingOptions: PagingOptions): Observable<Port[]> {\r\n\r\n        const list = this.masterDataService.getPorts(searchTerm, pagingOptions)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Tag } from '../../../entities/tag.entity';\r\nimport { CostmatrixLine } from './costmatrixLine';\r\n\r\nexport class Costmatrix {\r\n    costMatrixId: number;\r\n    name: string;\r\n    description: string;\r\n    costMatrixLines: CostmatrixLine[];\r\n    createdBy: string;\r\n    createdDateTime: Date;\r\n    tags: Tag[];\r\n    bestMatch: number;\r\n    tagsFormatted: string[];\r\n}\r\n","export class CostmatrixLine {\r\n    costMatrixLineId: number;\r\n    costMatrixId: number;\r\n    bestMatch: number;\r\n    costTypeId: number;\r\n    description: string;\r\n    supplierId: number;\r\n    payReceive: number;\r\n    currencyCode: string;\r\n    rateType: number;\r\n    priceUnitId: number;\r\n    rateAmount: number;\r\n    inPL: boolean;\r\n    noAct: boolean;\r\n    narrative: string;\r\n    companyId: string;\r\n    supplierCode: string;\r\n    costTypeCode: string;\r\n    rateTypeCode: string;\r\n    priceCode: string;\r\n    costDirection: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { TradingService } from '../http-services/trading.service';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { Trader } from '../../entities/trader.entity';\r\n\r\n@Injectable()\r\nexport class TradeContextualDataLoader implements MasterDataLoader {\r\n\r\n    constructor(private tradingService: TradingService) { }\r\n\r\n    getData(): Observable<Trader[]> {\r\n        const list =this.tradingService.getAllTraders()\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n        return list;\r\n    }\r\n}\r\n","import { ValidatorFn } from '@angular/forms/src/directives/validators';\r\nimport { AbstractControl } from '@angular/forms/src/model';\r\nimport * as _moment from 'moment';\r\nimport { Moment } from 'moment/moment';\r\nimport { cropYearValidation } from '../../trading/Library/trading-businessrules';\r\nconst moment = _moment;\r\n\r\nexport function isCropYearValid(contractDate: Moment): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n        let error = null;\r\n        let result = 1;\r\n        if (control.value && contractDate && control.valid) {\r\n            const reg = new RegExp(/[0-9]{4}/g);\r\n            const years = String(control.value).match(reg);\r\n            result = cropYearValidation(years, contractDate);\r\n        }\r\n        if (result < 1) {\r\n            switch (result) {\r\n                case 0:\r\n                    error = { isFirstYearGreater: true };\r\n                    break;\r\n                case -1:\r\n                    error = { isYearOutOfRange: true };\r\n                    break;\r\n            }\r\n        }\r\n        return error;\r\n    };\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n\\r\\n            <h3><b>Cancellation at Settlement Price\\r\\n                    [<label>{{contractLabel}}\\r\\n                    </label>]\\r\\n                </b></h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div class='mat-toggle-height'>\\r\\n            <mat-slide-toggle mat-raised-button\\r\\n                              [checked]=\\\"isSectionClosed\\\"\\r\\n                              [fieldControl]=\\\"isSectionClosedCtrl\\\"\\r\\n                              (change)=\\\"onToggleClosedTrade($event.checked)\\\">\\r\\n                Close Contract\\r\\n            </mat-slide-toggle>\\r\\n        </div>\\r\\n        <div fixLayout=\\\"row\\\"\\r\\n             fixLayoutGap=\\\"5%\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxLayoutGap=\\\"2%\\\">\\r\\n                <div fxFlex=\\\"140%\\\">\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      fxLayoutGap=\\\"4%\\\"\\r\\n                                      [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Counterparty Code\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <div class=\\\"custom-form\\\"\\r\\n                         fxLayoutGap=\\\"4%\\\"\\r\\n                         fxFlex=\\\"20%\\\"\\r\\n                         [class.isEmpty]=\\\"!cancellationDateCtrl.value\\\"\\r\\n                         [class.required-field]=\\\"cancellationDateCtrl.isRequired\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   [max]=\\\"filterDate\\\"\\r\\n                                   [required]=\\\"cancellationDateCtrl.isRequired\\\"\\r\\n                                   [matDatepicker]=\\\"cancelPicker\\\"\\r\\n                                   placeholder=\\\"Cancellation date\\\"\\r\\n                                   (blur)=\\\"onValueChange()\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]='cancellationDateCtrl'>\\r\\n                            <mat-datepicker-toggle matSuffix\\r\\n                                                   [for]=\\\"cancelPicker\\\"></mat-datepicker-toggle>\\r\\n                            <mat-datepicker #cancelPicker></mat-datepicker>\\r\\n                            <mat-error *ngIf=\\\"cancellationDateCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                            <mat-hint *ngIf=\\\"cancellationDateCtrl.isRequired\\\">\\r\\n                                Required *\\r\\n                            </mat-hint>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div class=\\\"custom-form\\\"\\r\\n                         fxFlex=\\\"20%\\\"\\r\\n                         [class.isEmpty]=\\\"!dueDateCtrl.value\\\"\\r\\n                         [class.required-field]=\\\"dueDateCtrl.isRequired\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   [required]=\\\"dueDateCtrl.isRequired\\\"\\r\\n                                   [matDatepicker]=\\\"valuePicker\\\"\\r\\n                                   placeholder=\\\"Due Date\\\"\\r\\n                                   (blur)=\\\"onValueChange()\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]='dueDateCtrl'>\\r\\n                            <mat-datepicker-toggle matSuffix\\r\\n                                                   [for]=\\\"valuePicker\\\"></mat-datepicker-toggle>\\r\\n                            <mat-datepicker #valuePicker></mat-datepicker>\\r\\n                            <mat-error *ngIf=\\\"dueDateCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                            <mat-hint *ngIf=\\\"dueDateCtrl.isRequired\\\">\\r\\n                                Required *\\r\\n                            </mat-hint>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"140%\\\"\\r\\n                     fxLayout=\\\"row\\\">\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"contractPriceCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Contract Price\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"currencyCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Currency\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"priceCodeCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Price Code\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"settlementPriceCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Settlement Price\\\"\\r\\n                                      (blur)=\\\"onValueChange()\\\"\\r\\n                                      [required]=\\\"settlementPriceCtrl.isRequired\\\"\\r\\n                                      [errorMap]=\\\"settlementPriceErrorMap\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"settlementValueCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      [title]=\\\"settlementValueToolTip\\\"\\r\\n                                      label=\\\"Settlement Value\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"140%\\\"\\r\\n                     fxLayout=\\\"row\\\">\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"quantityCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Quantity\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"quantityCodeCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Quantity code\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"140%\\\"\\r\\n                     fxLayout=\\\"row\\\">\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"nominalAccountCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Nominal account\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"costTypeCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Cost Type\\\">\\r\\n                    </atlas-form-input>\\r\\n                    <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                                      [fieldControl]=\\\"narrativeCtrl\\\"\\r\\n                                      [isEditable]=\\\"true\\\"\\r\\n                                      label=\\\"Narrative\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"140%\\\"\\r\\n                     fxLayout=\\\"row\\\">\\r\\n                    <mat-form-field fxFlex=\\\"19.5%\\\">\\r\\n                        <mat-select [required]=\\\"externalInternalCtrl.isRequired\\\"\\r\\n                                    [panelWidth]=\\\"panelSize\\\"\\r\\n                                    placeholder=\\\"External/InHouse\\\"\\r\\n                                    (blur)=\\\"onValueChange()\\\"\\r\\n                                    [formControl]=\\\"externalInternalCtrl\\\"\\r\\n                                    [matTooltip]=\\\"'External/InHouse'\\\">\\r\\n\\r\\n                            <mat-option *ngFor=\\\"let info of invoiceSourceType\\\"\\r\\n                                        [value]=\\\"info.viewValue\\\">\\r\\n                                {{info.viewValue}}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                        <mat-error *ngIf=\\\"externalInternalCtrl.hasError('required')\\\">\\r\\n                            This field is required\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"externalInternalCtrl.isRequired\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field fxFlex=\\\"19.5%\\\">\\r\\n                        <mat-select [panelWidth]=\\\"panelSize\\\"\\r\\n                                    placeholder=\\\"Template\\\"\\r\\n                                    [formControl]=\\\"templateCtrl\\\"\\r\\n                                    (blur)=\\\"onValueChange()\\\"\\r\\n                                    matTooltip=\\\"Template\\\">\\r\\n                            <mat-option></mat-option>\\r\\n                            <mat-option *ngFor=\\\"let template of filteredTemplates\\\"\\r\\n                                        [value]=\\\"template\\\">\\r\\n                                {{template.name}}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                        <mat-error *ngIf=\\\"isTemplateRequired\\\">\\r\\n                            This field is required\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"isTemplateRequired\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between center\\\">\\r\\n                    <button mat-button\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            class=\\\"btn-primary\\\">\\r\\n                        Discard\\r\\n                    </button>\\r\\n                    <button mat-button\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onConfirmButtonClicked()\\\"\\r\\n                            class=\\\"btn-primary\\\"\\r\\n                            [disabled]=\\\"!isConfirmCancellationEdit\\\">\\r\\n                        Confirm Cancellation\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".btn-primary.mat-button {\\n  margin-left: 0px !important; }\\n\\ndiv.mat-toggle-height {\\n  height: 50px; }\\n\\n:host ::ng-deep .mat-form-field {\\n  padding-right: 10px !important; }\\n\\n.mat-form-field-appearance-legacy .mat-hint {\\n  color: #00a9c6 !important; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { CostType } from '../../../../shared/entities/cost-type.entity';\r\nimport { DefaultAccountingSetup } from '../../../../shared/entities/default-accounting-setup.entity';\r\nimport { PhysicalDocumentTemplate } from '../../../../shared/entities/document-template.entity';\r\nimport { MasterDataProps } from '../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../shared/entities/nominal-account.entity';\r\nimport { PriceUnit } from '../../../../shared/entities/price-unit.entity';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { WeightUnit } from '../../../../shared/entities/weight-unit.entity';\r\nimport { ContractTypes } from '../../../../shared/enums/contract-type.enum';\r\nimport { DocumentTypes } from '../../../../shared/enums/document-type.enum';\r\nimport { InvoiceSourceType } from '../../../../shared/enums/invoice-source-type.enum';\r\nimport { CompanyConfigurationRecord } from '../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../shared/services/http-services/configuration.service';\r\nimport { DocumentService } from '../../../../shared/services/http-services/document.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { CancelTrade } from '../../../entities/cancel-trade.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-cancel-trade-dialog',\r\n    templateUrl: './cancel-trade-dialog.component.html',\r\n    styleUrls: ['./cancel-trade-dialog.component.scss'],\r\n})\r\nexport class CancelTradeDialogComponent extends BaseFormComponent implements OnInit {\r\n    cancelTradeData: Section;\r\n    contractLabel: String;\r\n    isSectionClosed: boolean = true;\r\n    isConfirmCancellationEdit: boolean = false;\r\n    counterPartyCtrl = new AtlasFormControl('CounterParty');\r\n    cancellationDateCtrl = new AtlasFormControl('CancellationDate');\r\n    dueDateCtrl = new AtlasFormControl('DueDate');\r\n    contractPriceCtrl = new AtlasFormControl('ContractPrice');\r\n    currencyCtrl = new AtlasFormControl('Currency');\r\n    priceCodeCtrl = new AtlasFormControl('PriceCode');\r\n    settlementPriceCtrl = new AtlasFormControl('SettlementPrice');\r\n    settlementValueCtrl = new AtlasFormControl('SettlementValue');\r\n    quantityCtrl = new AtlasFormControl('Quantity');\r\n    quantityCodeCtrl = new AtlasFormControl('QuantityCode');\r\n    nominalAccountCtrl = new AtlasFormControl('NominalAccount');\r\n    costTypeCtrl = new AtlasFormControl('CostType');\r\n    narrativeCtrl = new AtlasFormControl('Narrative');\r\n    externalInternalCtrl = new AtlasFormControl('ExternalInternal');\r\n    templateCtrl = new AtlasFormControl('Template');\r\n    isSectionClosedCtrl = new AtlasFormControl('ToggleClosedTrade');\r\n    contractReferenceCtrl = new AtlasFormControl('ContractReference');\r\n    isCheckboxChecked: boolean;\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.PriceUnits,\r\n        MasterDataProps.WeightUnits,\r\n        MasterDataProps.CostTypes,\r\n        MasterDataProps.NominalAccounts,\r\n    ];\r\n    filteredPriceCodeList: PriceUnit[];\r\n    filteredQuantityCode: WeightUnit[];\r\n    filteredCostType: CostType[];\r\n    filteredNominalAccount: NominalAccount[];\r\n    costType: CostType;\r\n    nominalAccount: NominalAccount;\r\n    settlementValue: number;\r\n    cancelTradeFormGroup: FormGroup;\r\n    settlementPriceErrorMap: Map<string, string> = new Map()\r\n        .set('min', 'Negative Value Not allowed');\r\n    invoiceSourceType: string[];\r\n    filteredTemplates: PhysicalDocumentTemplate[] = [];\r\n    isTemplateRequired: boolean = false;\r\n    settlementValueToolTip: any = '';\r\n    filterDate: Date = this.companyManager.getCurrentCompanyDate().toDate();\r\n    defaultAccountingSetup: DefaultAccountingSetup;\r\n    companyConfigurationRecord: CompanyConfigurationRecord;\r\n    now: moment.Moment;\r\n    companyId: string = this.companyManager.getCurrentCompany().companyId;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<CancelTradeDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected snackbarService: SnackbarService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected documentService: DocumentService,\r\n        protected configurationService: ConfigurationService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        thisDialogRef.disableClose = true;\r\n        this.cancelTradeData = data.sectionModel;\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getFormGroup();\r\n        this.contractLabel = this.cancelTradeData.contractLabel;\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n                this.filteredPriceCodeList = this.masterdata.priceUnits;\r\n                this.filteredQuantityCode = this.masterdata.weightUnits;\r\n                this.filteredCostType = this.masterdata.costTypes;\r\n                this.filteredNominalAccount = this.masterdata.nominalAccounts;\r\n                this.onDisablingFields();\r\n                this.setDefaultValues();\r\n                this.setValidators();\r\n                this.settlementPriceCtrl.valueChanges.subscribe((v) =>\r\n                    this.setSettlementValue(),\r\n                );\r\n            });\r\n        this.invoiceSourceType = this.getInvoiceSourceTypeEnum();\r\n\r\n        this.subscriptions.push(this.documentService.getTemplates(DocumentTypes.InvoiceCancellation).subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n        }));\r\n        this.companyConfigurationRecord = new CompanyConfigurationRecord();\r\n        this.subscriptions.push(this.configurationService.getCompanyConfigurationDetails(this.companyId, this.now.year())\r\n            .subscribe((companyConfigurationRecord: CompanyConfigurationRecord) => {\r\n                if (companyConfigurationRecord) {\r\n                    this.companyConfigurationRecord = companyConfigurationRecord;\r\n                    this.defaultAccountingSetup = this.companyConfigurationRecord.defaultAccountingSetup;\r\n                }\r\n            }));\r\n    }\r\n\r\n    onToggleClosedTrade(isCloseTrade: boolean) {\r\n        this.isSectionClosed = isCloseTrade;\r\n        this.cancelTradeFormGroup.controls['isSectionClosedCtrl'].patchValue(isCloseTrade);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.cancelTradeFormGroup = this.formBuilder.group({\r\n            counterPartyCtrl: this.counterPartyCtrl,\r\n            cancellationDateCtrl: this.cancellationDateCtrl,\r\n            dueDateCtrl: this.dueDateCtrl,\r\n            contractPriceCtrl: this.contractPriceCtrl,\r\n            currencyCtrl: this.currencyCtrl,\r\n            priceCodeCtrl: this.priceCodeCtrl,\r\n            settlementPriceCtrl: this.settlementPriceCtrl,\r\n            settlementValueCtrl: this.settlementValueCtrl,\r\n            quantityCtrl: this.quantityCtrl,\r\n            quantityCodeCtrl: this.quantityCodeCtrl,\r\n            nominalAccountCtrl: this.nominalAccountCtrl,\r\n            costTypeCtrl: this.costTypeCtrl,\r\n            narrativeCtrl: this.narrativeCtrl,\r\n            externalInternalCtrl: this.externalInternalCtrl,\r\n            templateCtrl: this.templateCtrl,\r\n            isSectionClosedCtrl: this.isSectionClosedCtrl,\r\n            contractReferenceCtrl: this.contractReferenceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    onConfirmButtonClicked() {\r\n        if (this.cancelTradeFormGroup.valid) {\r\n            this.thisDialogRef.close(this.getCancelTradeEntity(this.cancelTradeFormGroup));\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n    }\r\n\r\n    getCancelTradeEntity(cancelTradeFormGroup: FormGroup): CancelTrade {\r\n        const cancelTradeModel = new CancelTrade();\r\n        cancelTradeModel.counterParty = this.counterPartyCtrl.value;\r\n        cancelTradeModel.cancellationDate = this.cancellationDateCtrl.value;\r\n        cancelTradeModel.dueDate = this.dueDateCtrl.value;\r\n        cancelTradeModel.contractPrice = this.contractPriceCtrl.value;\r\n        cancelTradeModel.currency = this.currencyCtrl.value;\r\n        cancelTradeModel.priceCode = this.priceCodeCtrl.value;\r\n        cancelTradeModel.settlementPrice = this.settlementPriceCtrl.value;\r\n        cancelTradeModel.settlementValue = this.settlementValueCtrl.value;\r\n        cancelTradeModel.quantity = this.quantityCtrl.value;\r\n        cancelTradeModel.quantityCode = this.quantityCodeCtrl.value;\r\n        cancelTradeModel.nominalAccount = this.nominalAccountCtrl.value;\r\n        cancelTradeModel.costType = this.costTypeCtrl.value;\r\n        cancelTradeModel.narrative = this.narrativeCtrl.value;\r\n        cancelTradeModel.externalInternal = this.externalInternalCtrl.value;\r\n        cancelTradeModel.template = this.templateCtrl.value ?\r\n            (this.templateCtrl.value as PhysicalDocumentTemplate).path : null;\r\n        cancelTradeModel.isSectionClosed = this.isSectionClosedCtrl.value;\r\n        cancelTradeModel.contractLabel = this.contractReferenceCtrl.value;\r\n        cancelTradeModel.costTypeForCancellationLoss = this.defaultAccountingSetup.cancellationLoss;\r\n\r\n        return cancelTradeModel;\r\n    }\r\n\r\n    onDisablingFields() {\r\n        this.counterPartyCtrl.disable();\r\n        this.contractPriceCtrl.disable();\r\n        this.currencyCtrl.disable();\r\n        this.priceCodeCtrl.disable();\r\n        this.settlementValueCtrl.disable();\r\n        this.quantityCtrl.disable();\r\n        this.quantityCodeCtrl.disable();\r\n        this.costTypeCtrl.disable();\r\n        this.nominalAccountCtrl.disable();\r\n\r\n    }\r\n    numberFormatter(params, isPrice: boolean) {\r\n        if (isPrice) {\r\n\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(params);\r\n        } else if (params) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params);\r\n        }\r\n    }\r\n\r\n    setDefaultValues() {\r\n        if (this.cancelTradeData.contractType === ContractTypes.Purchase) {\r\n            this.counterPartyCtrl.patchValue(this.cancelTradeData.sellerCode);\r\n        }\r\n        if (this.cancelTradeData.contractType === ContractTypes.Sale) {\r\n            this.counterPartyCtrl.patchValue(this.cancelTradeData.buyerCode);\r\n\r\n        }\r\n        this.contractPriceCtrl.patchValue(this.numberFormatter(this.cancelTradeData.price, true));\r\n        this.currencyCtrl.patchValue(this.cancelTradeData.currencyCode);\r\n        this.quantityCtrl.patchValue(this.numberFormatter(this.cancelTradeData.quantity, false));\r\n        if (this.cancelTradeData.priceUnitId) {\r\n            this.priceCodeCtrl.patchValue((this.filteredPriceCodeList.find((x) =>\r\n                x.priceUnitId === this.cancelTradeData.priceUnitId).priceCode));\r\n        }\r\n        if (this.cancelTradeData.weightUnitId) {\r\n            this.quantityCodeCtrl.patchValue((this.filteredQuantityCode.find((x) =>\r\n                x.weightUnitId === this.cancelTradeData.weightUnitId).weightCode));\r\n        }\r\n        this.narrativeCtrl.patchValue('Cancellation');\r\n        this.cancelTradeFormGroup.controls['isSectionClosedCtrl'].patchValue(this.isSectionClosed);\r\n        this.cancelTradeFormGroup.controls['externalInternalCtrl'].patchValue(InvoiceSourceType[InvoiceSourceType.External].toString());\r\n        this.contractReferenceCtrl.patchValue(this.cancelTradeData.contractLabel);\r\n        this.cancellationDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.dueDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n    }\r\n\r\n    setSettlementValue() {\r\n        this.settlementValueCtrl.setValue('');\r\n        if (this.settlementPriceCtrl.valid && this.settlementPriceCtrl.value >= 0) {\r\n            this.settlementValue = (Number(this.contractPriceCtrl.value) - Number(this.settlementPriceCtrl.value)) * Number(this.cancelTradeData.quantity);\r\n            this.settlementValueCtrl.setValue(Math.abs(this.settlementValue).toFixed(2));\r\n            if (this.settlementValue.toString() > this.settlementValue.toFixed(2)) {\r\n                this.settlementValueToolTip = Math.abs(this.settlementValue);\r\n            }\r\n        }\r\n        this.setCostType(this.settlementValue);\r\n    }\r\n\r\n    setValidators() {\r\n        this.cancellationDateCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.dueDateCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.settlementPriceCtrl.setValidators(\r\n            Validators.compose([Validators.required, Validators.min(0)]),\r\n        );\r\n        this.externalInternalCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.cancelTradeFormGroup.updateValueAndValidity();\r\n        this.cancelTradeFormGroup.get('externalInternalCtrl').valueChanges.subscribe((externalInternal) => {\r\n            if (externalInternal === InvoiceSourceType[InvoiceSourceType.Inhouse].toString()) {\r\n                this.templateCtrl.setValidators([Validators.required]);\r\n                this.isTemplateRequired = true;\r\n            } else {\r\n                this.cancelTradeFormGroup.get('templateCtrl').reset();\r\n                this.isTemplateRequired = false;\r\n                this.templateCtrl.setValidators(null);\r\n            }\r\n            this.templateCtrl.updateValueAndValidity();\r\n        });\r\n    }\r\n\r\n    setCostType(settlementValue: number) {\r\n        this.costTypeCtrl.setValue('');\r\n        this.nominalAccountCtrl.setValue('');\r\n        this.costType = {} as CostType;\r\n\r\n        if (this.cancelTradeData.contractType === ContractTypes.Purchase) {\r\n            if (settlementValue < 0 || settlementValue === 0) {\r\n                if (this.defaultAccountingSetup) {\r\n                    this.costType = this.filteredCostType.find((costType) =>\r\n                        costType.costTypeCode === this.defaultAccountingSetup.cancellationGain);\r\n                }\r\n            }\r\n            if (settlementValue > 0) {\r\n                if (this.defaultAccountingSetup) {\r\n                    this.costType = this.filteredCostType.find((costType) =>\r\n                        costType.costTypeCode === this.defaultAccountingSetup.cancellationLoss,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.cancelTradeData.contractType === ContractTypes.Sale) {\r\n            if (settlementValue < 0) {\r\n                this.costType = this.filteredCostType.find((costType) =>\r\n                    costType.costTypeCode === this.defaultAccountingSetup.cancellationLoss);\r\n            }\r\n            if (settlementValue > 0 || settlementValue === 0) {\r\n                this.costType = this.filteredCostType.find((costType) =>\r\n                    costType.costTypeCode === this.defaultAccountingSetup.cancellationGain,\r\n                );\r\n            }\r\n        }\r\n        if (this.costType) {\r\n            if (this.costType.costTypeCode) {\r\n                this.costTypeCtrl.setValue(this.costType.costTypeCode);\r\n                this.setNominalAccount(this.costType);\r\n            }\r\n        }\r\n    }\r\n\r\n    setNominalAccount(costType: CostType) {\r\n        if (costType) {\r\n            this.nominalAccount = this.filteredNominalAccount.find((nomaccount) =>\r\n                nomaccount.accountNumber === costType.nominalAccountCode,\r\n            );\r\n        }\r\n        this.nominalAccountCtrl.setValue(this.nominalAccount.accountNumber);\r\n    }\r\n\r\n    getInvoiceSourceTypeEnum(): string[] {\r\n        const myEnum = [];\r\n        const objectEnum = Object.keys(InvoiceSourceType);\r\n        const values = objectEnum.slice(0, objectEnum.length / 2);\r\n        const keys = objectEnum.slice(objectEnum.length / 2);\r\n\r\n        for (let i = 0; i < objectEnum.length / 2; i++) {\r\n            myEnum.push({ viewValue: keys[i], value: values[i] });\r\n        }\r\n        return myEnum;\r\n    }\r\n    onValueChange() {\r\n        if (this.cancelTradeFormGroup.valid) {\r\n            this.isConfirmCancellationEdit = true;\r\n        } else {\r\n            this.isConfirmCancellationEdit = false;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<h2 mat-dialog-title>Use a new cost matrix</h2>\\r\\n<p>Do you want to keep all the costs ? or keep only actualized cost?</p>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     mat-dialog-actions>\\r\\n    <button mat-button\\r\\n            mat-dialog-close>discard</button>\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onAllCostsButtonClicked()\\\">Keep All</button>\\r\\n\\r\\n    <button mat-button\\r\\n            (click)=\\\"onActualizedCostsButtonClicked()\\\">Keep Actualized</button>\\r\\n</div>\\r\\n\"","module.exports = \"button {\\n  margin: 0; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog } from '@angular/material';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-add-cost-confirmation-dialog',\r\n    templateUrl: './add-cost-confirmation-dialog.component.html',\r\n    styleUrls: ['./add-cost-confirmation-dialog.component.scss']\r\n})\r\nexport class AddCostConfirmationDialogComponent extends BaseFormComponent implements OnInit {\r\n    costConfirmation: boolean;\r\n    constructor(public thisDialogRef: MatDialogRef<AddCostConfirmationDialogComponent>,\r\n        //   @Inject(MAT_DIALOG_DATA) public data: { matrixData: Costmatrix[] },\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n    onAllCostsButtonClicked() {\r\n        this.costConfirmation = true;\r\n        this.thisDialogRef.close(this.costConfirmation);\r\n    }\r\n    onActualizedCostsButtonClicked() {\r\n        this.costConfirmation = false;\r\n        this.thisDialogRef.close(this.costConfirmation);\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h1>COST INVOICE MARKING</h1>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\">\\r\\n        <div class=\\\"costToggle\\\">\\r\\n            <mat-slide-toggle (change)=\\\"onChange($event)\\\"\\r\\n                              [disabled]=\\\"!editPrivileges.buttonEditable\\\">\\r\\n                Edit mode is {{toggleText}}\\r\\n            </mat-slide-toggle>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"invoiceMarkingGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [gridOptions]=\\\"invoiceMarkingGridOptions\\\"\\r\\n                         [rowData]=\\\"invoiceMarkingGridRows\\\"\\r\\n                         [columnDefs]=\\\"invoicemarkingcolumnDefs\\\"\\r\\n                         domLayout=autoHeight\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableFilter]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"false\\\"\\r\\n                         [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                         (rowClicked)=\\\"onCostInvoiceMarkingRowClicked($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n\\r\\n    <button mat-raised-button\\r\\n            type=\\\"button\\\"\\r\\n            (click)=\\\"onSaveAsInvoieMarkingDialogButtonClicked()\\\"\\r\\n            [disabled]=\\\"saveDisable\\\">\\r\\n        SAVE\\r\\n    </button>\\r\\n\\r\\n</mat-dialog-content>\"","module.exports = \"mat-dialog-actions {\\n  margin-top: 20px;\\n  text-align: right;\\n  display: block; }\\n\\ninvoiceMarkingGrid {\\n  width: 100%;\\n  height: 100%; }\\n\\n.mat-dialog-content {\\n  overflow: inherit; }\\n\\n.costToggle {\\n  margin-top: 19px; }\\n\\n.costButtons {\\n  margin-bottom: 20px;\\n  margin-left: auto; }\\n\\nbutton.mat-raised-button {\\n  float: right; }\\n\"","import { Component, HostListener, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef, MatSlideToggleChange } from '@angular/material';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorDatePickerComponent } from '../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component';\r\nimport { CellEditorNumericComponent } from '../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { InvoiceMarkingSearchResult } from '../../../../../shared/dtos/invoice-marking';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InvoiceMarkings, InvoiceMarkingPercentLines } from '../../../../../shared/entities/invoice-markings.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { PermissionLevels } from '../../../../../shared/enums/permission-level.enum';\r\nimport { PostingStatus } from '../../../../../shared/enums/posting-status.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { Route } from '@angular/compiler/src/core';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-invoice-marking-dialog',\r\n    templateUrl: './cost-invoice-marking-dialog.component.html',\r\n    styleUrls: ['./cost-invoice-marking-dialog.component.scss'],\r\n})\r\nexport class CostInvoiceMarkingDialogComponent extends BaseFormComponent implements OnInit {\r\n\r\n    invoiceMarkingGridOptions: agGrid.GridOptions = {};\r\n    invoicemarkingcolumnDefs: agGrid.ColDef[];\r\n    isLoading: boolean;\r\n    isEditable = false;\r\n    toggleText: string = 'Inactive';\r\n    defaultDate = 'Mon Jan 01 0001';\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    invoiceMarkingGridRows: InvoiceMarkingSearchResult[];\r\n    deleted: string = 'Deleted';\r\n    saveInProgress = false;\r\n    totalInvoicePercent: number;\r\n    totalInvoiceTemp: number;\r\n    count: number = 0;\r\n    saveDisable: boolean = true;\r\n    dataVersionId?: number;\r\n    dialogData: {\r\n        masterdata: MasterData,\r\n        costId: number,\r\n        model: SectionCompleteDisplayView,\r\n        company: string,\r\n        dataVersionId?: number,\r\n    };\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atrDate: CellEditorDatePickerComponent,\r\n    };\r\n    invoiceMarkingCostGridContextualMenuActions: AgContextualMenuAction[];\r\n    invoiceMarkingCostMenuActions: { [key: string]: string } = {\r\n        deleteinvoiceMarkingCost: 'delete',\r\n    };\r\n    gridContext = {\r\n        gridEditable: false,\r\n    };\r\n    editPrivileges = {\r\n        buttonEditable: true,\r\n    };\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<CostInvoiceMarkingDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            masterdata: MasterData, costId: number,\r\n            model: SectionCompleteDisplayView, company: string, dataVersionId?: number,\r\n        },\r\n        protected utilService: UtilService,\r\n        private executionService: ExecutionService,\r\n        private authorizationService: AuthorizationService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        protected router: Router,\r\n        public gridService: AgGridService,\r\n        private route: ActivatedRoute,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.dialogData = data;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.isLoading = true;\r\n        thisDialogRef.disableClose = true;\r\n    }\r\n\r\n    editEstimatedColumnsPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'InvoiceMarkingGridEdit',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Physicals',\r\n        privilegeParentLevelTwo: 'Trades',\r\n    };\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.getInvoiceMarkingsForCost();\r\n        this.gridContext.gridEditable = false;\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.editPrivileges.buttonEditable = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);\r\n        this.init();\r\n    }\r\n    init() {\r\n        this.invoiceMarkingCostGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.invoiceMarkingCostMenuActions.deleteinvoiceMarkingCost,\r\n                disabled: this.isDeleteDisabled.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    isDeleteDisabled(params) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.dialogData.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.dialogData.company,\r\n                'DeleteCostInvoiceMarking',\r\n                'InvoiceCreation',\r\n                'Invoices');\r\n            if (userPermissionLevel >= PermissionLevels.Read) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.formGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    onAddRowButtonClicked() {\r\n        const newItem = this.createNewRowData();\r\n        this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newData = new InvoiceMarkings();\r\n        newData.contractReference = this.dialogData.model.reference;\r\n        newData.invoicePercent = 100;\r\n        return newData;\r\n    }\r\n\r\n    getGridData(): InvoiceMarkings[] {\r\n        const invoices = new Array<InvoiceMarkings>();\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty) {\r\n                rowData.data.sectionId = this.dialogData.model.sectionId;\r\n                rowData.data.costId = this.dialogData.costId;\r\n                invoices.push(rowData.data);\r\n            }\r\n        });\r\n        return invoices;\r\n    }\r\n\r\n    getInvoiceMarkingsForCost() {\r\n        this.subscriptions.push(\r\n            this.executionService.getInvoiceMarkingsForCost(this.dialogData.costId, this.dialogData.dataVersionId)\r\n                .subscribe((data: ApiPaginatedCollection<InvoiceMarkingSearchResult>) => {\r\n                    this.invoiceMarkingGridRows = data.value;\r\n                    for (const rows of this.invoiceMarkingGridRows) {\r\n                        var invoiceMarkingCostGridRows = [];\r\n                        invoiceMarkingCostGridRows = data.value;\r\n                        this.getTotalInvoicePercentValue(invoiceMarkingCostGridRows)\r\n                        if (rows.cashMatchDate) {\r\n                            rows.cashMatchDate = (rows.cashMatchDate.toDateString() === this.defaultDate) ? null : rows.cashMatchDate;\r\n                        }\r\n                        if (rows.dueDate) {\r\n                            rows.dueDate = (rows.dueDate.toDateString() === this.defaultDate) ? null : rows.dueDate;\r\n                        }\r\n                        rows.invoiceDate = (rows.invoiceDate.toDateString() === this.defaultDate) ? null : rows.invoiceDate;\r\n                        rows.invoiceReference = rows.isDeleted ? this.deleted : rows.invoiceReference;\r\n                    }\r\n                    this.initializeGridColumns();\r\n                    this.isLoading = false;\r\n                }));\r\n    }\r\n\r\n\r\n    getTotalInvoicePercentValue(invoiceMarkingCostGridRows: InvoiceMarkingSearchResult[]) {\r\n        this.totalInvoicePercent = 0;\r\n        if (invoiceMarkingCostGridRows) {\r\n            invoiceMarkingCostGridRows.forEach((invoiceMarking) => {\r\n                this.totalInvoicePercent += invoiceMarking.invoicePercent;\r\n            });\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.invoiceMarkingGridOptions = {\r\n            context: this.gridContext,\r\n            rowSelection: 'multiple',\r\n        };\r\n\r\n        this.invoicemarkingcolumnDefs = [\r\n            {\r\n                colId: 'invoiceMarkingId',\r\n                field: 'invoiceMarkingId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                colId: 'contractReference',\r\n                field: 'contractReference',\r\n            },\r\n            {\r\n                headerName: 'Cost Type',\r\n                colId: 'costType',\r\n                field: 'costType',\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.dialogData.masterdata.costTypes.map((costTypes) => costTypes.costTypeCode),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Invoice Reference',\r\n                colId: 'invoiceReference',\r\n                field: 'invoiceReference',\r\n            },\r\n            {\r\n                headerName: 'Invoice Date',\r\n                colId: 'invoiceDate',\r\n                field: 'invoiceDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                colId: 'currencyCode',\r\n                field: 'currencyCode',\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.dialogData.masterdata.currencies.map((currencies) => currencies.currencyCode),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Value',\r\n                colId: 'invoiceAmount',\r\n                field: 'invoiceAmount',\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Percentage Invoiced',\r\n                colId: 'invoicePercent',\r\n                field: 'invoicePercent',\r\n                cellEditor: 'atlasNumeric',\r\n                editable: this.isPercentageInvoiceEditable.bind(this),\r\n                type: 'numberColumn',\r\n                onCellValueChanged: this.onPercentageInvoiceChange.bind(this),\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n                tooltip: () => {\r\n                    return 'Percentage Invoiced should not be more than 100';\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Paid Percentage',\r\n                colId: 'paidPercentage',\r\n                field: 'paidPercentage',\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Cash Match Date',\r\n                colId: 'cashMatchDate',\r\n                field: 'cashMatchDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'Posting Status',\r\n                colId: 'postingStatusId',\r\n                field: 'postingStatusId',\r\n                valueFormatter: this.postingStatusFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.invoiceMarkingCostGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        return params.context.gridEditable;\r\n    }\r\n    onPercentageInvoiceChange(params) {\r\n        if (this.count == 0) {\r\n            this.totalInvoiceTemp = this.totalInvoicePercent;\r\n            this.count++;\r\n        }\r\n        let totalInvoicevalue = this.totalInvoiceTemp + params.newValue - params.oldValue\r\n        if (this.totalInvoicePercent == totalInvoicevalue) {\r\n            this.saveDisable = false;\r\n        } else {\r\n            this.saveDisable = true;\r\n            this.totalInvoiceTemp = totalInvoicevalue;\r\n            this.snackbarService.informationSnackBar('The total sum of Invoice percentage does not matches with actual invoice percentage');\r\n        }\r\n    }\r\n\r\n    onSaveAsInvoieMarkingDialogButtonClicked() {\r\n        const invoiceMarkingPercentLines: InvoiceMarkingPercentLines[] = this.getInvoiceMarkingPercentLines();\r\n        this.subscriptions.push(\r\n            this.executionService.updateInvoiceMarkingLines(invoiceMarkingPercentLines, this.dataVersionId)\r\n                .subscribe(() => {\r\n                    this.thisDialogRef.close(true);\r\n                    this.snackbarService.informationSnackBar('Cost invoice marking Percent updated successfully');\r\n                }));\r\n    }\r\n\r\n    getInvoiceMarkingPercentLines(): InvoiceMarkingPercentLines[] {\r\n        const invoicePercentLines: InvoiceMarkingPercentLines[] = [];\r\n        this.invoiceMarkingGridRows.map((data) => {\r\n            if (data) {\r\n                const invoicePercentLine = new InvoiceMarkingPercentLines();\r\n                invoicePercentLine.invoicePercent = data.invoicePercent;\r\n                invoicePercentLine.invoiceLineId = data.invoiceLineId;\r\n                invoicePercentLines.push(invoicePercentLine);\r\n            }\r\n        });\r\n        return invoicePercentLines;\r\n    }\r\n\r\n    postingStatusFormatter(params) {\r\n        if (params.value) {\r\n            return PostingStatus[params.value].toString();\r\n        }\r\n        return '';\r\n    }\r\n\r\n    isPercentageInvoiceEditable(params): boolean {\r\n        if (this.isEditable) {\r\n            return params.context.gridEditable;\r\n        }\r\n        else {\r\n            return !(params.context.gridEditable);\r\n        }\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n        }\r\n        if (params.node.data.invoicePercent > 100) {\r\n            params.node.setDataValue('invoicePercent', null);\r\n        }\r\n    }\r\n\r\n    onChange(value: MatSlideToggleChange) {\r\n        if (value.checked) {\r\n            this.toggleText = 'Active';\r\n            this.isEditable = true;\r\n            this.gridContext.gridEditable = true;\r\n\r\n        } else {\r\n            this.toggleText = 'InActive';\r\n            this.isEditable = false;\r\n            this.gridContext.gridEditable = false;\r\n        }\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n            this.dialogData.company,\r\n            userCompanyPrivilege.privilegeName,\r\n            userCompanyPrivilege.privilegeParentLevelOne,\r\n            userCompanyPrivilege.privilegeParentLevelTwo);\r\n        if (userPermissionLevel >= userCompanyPrivilege.permission) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleAction(action: string, invoiceMarkings: InvoiceMarkings) {\r\n        switch (action) {\r\n            case this.invoiceMarkingCostMenuActions.deleteinvoiceMarkingCost:\r\n                this.onRemoveSelectedButtonClicked(invoiceMarkings);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    onRemoveSelectedButtonClicked(invoiceMarkings: InvoiceMarkings) {\r\n        if (invoiceMarkings.invoiceMarkingId) {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Invoice Marking Cost Deletion',\r\n                    text: 'Deleting a Invoice Marking Cost row is permanent. Do you wish to proceed?',\r\n                    okButton: 'Delete anyway',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    if (invoiceMarkings.invoiceMarkingId) {\r\n                        this.subscriptions.push(\r\n                            this.executionService.deleteInvoiceMarking(invoiceMarkings.invoiceMarkingId).subscribe(() => {\r\n                                this.snackbarService.informationSnackBar('Invoice Marking Cost Deleted');\r\n                                this.gridApi.updateRowData({ remove: [invoiceMarkings] });\r\n                            }));\r\n                    } else {\r\n                        this.gridApi.updateRowData({ remove: [invoiceMarkings] });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Please select a row to delete');\r\n        }\r\n    }\r\n\r\n    onCostInvoiceMarkingRowClicked(event) {\r\n        if (!this.isEditable) {\r\n            this.thisDialogRef.close(true);\r\n            this.router.navigate(\r\n                ['/' + this.dialogData.company +\r\n                    '/financial/accounting/entries/' + encodeURIComponent(event.data.invoiceReference)],\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","module.exports = \"<h1 class=\\\"no-margin\\\">Use Cost Matrix </h1>\\r\\n<div ag-grid=\\\"invoiceMarkingGridOptions\\\"\\r\\n     class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n    <ag-grid-angular *ngIf=\\\"costMatrixGridColumnDefs\\\"\\r\\n                     [rowData]=\\\"costMatrixGridRows\\\"\\r\\n                     [columnDefs]=\\\"costMatrixGridColumnDefs\\\"\\r\\n                     domLayout=\\\"autoHeight\\\"\\r\\n                     (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                     (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                     rowSelection=\\\"single\\\"\\r\\n                     [pagination]=\\\"true\\\"\\r\\n                     [paginationPageSize]=\\\"10\\\"\\r\\n                     [enableSorting]=\\\"true\\\"\\r\\n                     [enableFilter]=\\\"true\\\"\\r\\n                     [enableColResize]=\\\"false\\\"\\r\\n                     [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n    </ag-grid-angular>\\r\\n</div>\\r\\n<mat-dialog-actions>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onCancelButtonClicked()\\\">\\r\\n        Discard\\r\\n    </button>\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onAddButtonClicked()\\\">\\r\\n        Add\\r\\n    </button>\\r\\n</mat-dialog-actions>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Gaps } from '../../../../../shared/enums/gaps.enum';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { FeatureFlagService } from '../../../../../shared/services/http-services/feature-flag.service';\r\nimport { Costmatrix } from '../../../../../shared/services/trading/dtos/costmatrix';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-matrix-dialog',\r\n    templateUrl: './cost-matrix-dialog.component.html',\r\n    styleUrls: ['./cost-matrix-dialog.component.scss'],\r\n})\r\nexport class CostMatrixDialogComponent extends BaseFormComponent implements OnInit {\r\n    costMatrixGridOptions: agGrid.GridOptions = {};\r\n    costMatrixGridColumnDefs: agGrid.ColDef[];\r\n    costMatrixGridColumnDefsGap003: agGrid.ColDef[];\r\n    costMatrixGridRows: Costmatrix[];\r\n    costMatrix: Costmatrix[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    gaps = Gaps;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    dialogData: {\r\n        matrixData: Costmatrix[];\r\n    };\r\n    selectedCostId: number;\r\n    constructor(public thisDialogRef: MatDialogRef<CostMatrixDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { matrixData: Costmatrix[] },\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        public gridService: AgGridService,\r\n        protected featureFlagService: FeatureFlagService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.costMatrixGridRows = this.dialogData.matrixData;\r\n    }\r\n    initializeGridColumns() {\r\n\r\n        this.featureFlagService.getFlagInfo(Gaps.gap003).subscribe(\r\n            (flagAuth) => {\r\n                if (flagAuth.active === true) {\r\n                    this.costMatrixGridColumnDefs = [\r\n                        {\r\n                            headerName: ' ',\r\n                            hide: false,\r\n                            headerCheckboxSelection: false,\r\n                            checkboxSelection: true,\r\n                            width: 70,\r\n                        },\r\n                        {\r\n                            headerName: 'Best Match',\r\n                            colId: 'bestMatch',\r\n                            field: 'bestMatch',\r\n                            hide: false,\r\n                            cellRenderer: (params) => {\r\n                                if (params.value > 0) {\r\n                                    return '<mat-chip-list><mat-chip class=\"status-flag-chip-bm\">BM</mat-chip></mat-chip-list>';\r\n                                }\r\n                                return '';\r\n                            },\r\n                        },\r\n                        {\r\n                            headerName: ' Cost Matrix Name',\r\n                            colId: 'name',\r\n                            field: 'name',\r\n                            hide: false,\r\n                        },\r\n                        {\r\n                            headerName: 'Description',\r\n                            colId: 'description',\r\n                            field: 'description',\r\n                            hide: false,\r\n                        },\r\n                        {\r\n                            headerName: 'Parameters',\r\n                            colId: 'paramters',\r\n                            field: 'tagsFormatted',\r\n                            hide: false,\r\n                        },\r\n                    ];\r\n                } else {\r\n                    this.costMatrixGridColumnDefs = [\r\n                        {\r\n                            headerName: ' ',\r\n                            hide: false,\r\n                            headerCheckboxSelection: false,\r\n                            checkboxSelection: true,\r\n                            width: 70,\r\n                        },\r\n                        {\r\n                            headerName: ' Cost Matrix Name',\r\n                            colId: 'name',\r\n                            field: 'name',\r\n                            hide: false,\r\n                        },\r\n                        {\r\n                            headerName: 'Description',\r\n                            colId: 'description',\r\n                            field: 'description',\r\n                            hide: false,\r\n                        },\r\n                    ];\r\n                }\r\n            },\r\n        );\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.costMatrixGridColumnDefs;\r\n        this.costMatrixGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi = params.api;\r\n        this.gridApi.sizeColumnsToFit();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        const selectedRows: Costmatrix[] = this.gridApi.getSelectedRows();\r\n        selectedRows.forEach((costs) => {\r\n            this.selectedCostId = costs.costMatrixId;\r\n        });\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n    onAddButtonClicked() {\r\n        this.thisDialogRef.close(this.selectedCostId);\r\n    }\r\n}\r\n","import { CostDirection } from '../../../../shared/entities/cost-direction.entity';\r\nimport { Cost } from '../../../../shared/entities/cost.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { RateTypes } from '../../../../shared/enums/rate-type.enum';\r\n\r\nexport class CostListDisplayView {\r\n    costId: number;\r\n    rowStatus: string;\r\n    bestMatch: string;\r\n    sectionId: number;\r\n    costTypeCode: string;\r\n    description: string;\r\n    supplierCode: string;\r\n    costDirection: string;\r\n    currencyCode: string;\r\n    rateTypeCode: string;\r\n    priceCode: string;\r\n    rate: number;\r\n    inPL: boolean;\r\n    noAction: boolean;\r\n    invoiceStatus: number;\r\n    narrative: string;\r\n    costMatrixLineId: number;\r\n    originalEstimatedPMTValue: number;\r\n    originalEstRateTypeCode: string;\r\n    originalEstPriceCode: string;\r\n    originalEstCurrencyCode: string;\r\n    originalEstRate: number;\r\n    companyId: string;\r\n    createdDateTime: Date;\r\n    createdBy: string;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    contextInformation: string;\r\n    isDirty: boolean;\r\n    documentReference: string;\r\n    documentDate: Date;\r\n    invoicePercent: number;\r\n    costMatrixName: string;\r\n    isAddOrOverride: string;\r\n\r\n    constructor(cost?: Cost, masterdata?: MasterData, costDirections?: CostDirection[]) {\r\n        if (cost) {\r\n            this.costId = cost.costId;\r\n            this.rowStatus = cost.rowStatus;\r\n            this.bestMatch = cost.bestMatch;\r\n            this.sectionId = cost.sectionId;\r\n            this.costTypeCode = cost.costTypeCode;\r\n            this.description = this.getCostTypeDescriptionFromCode(cost.costTypeCode, masterdata);\r\n            this.supplierCode = cost.supplierCode;\r\n            this.costDirection = this.getCostDirectionCodeFromId(cost.costDirectionId, costDirections);\r\n            this.currencyCode = cost.currencyCode;\r\n            this.rateTypeCode = this.getRateCodeFromId(cost.rateTypeId, masterdata);\r\n            this.priceCode = cost.priceUnitId && cost.priceUnitId !== 0 ? this.getPriceCodeFromId(cost.priceUnitId, masterdata) : '';\r\n            this.rate = cost.rate;\r\n            this.inPL = cost.inPL;\r\n            this.noAction = cost.noAction;\r\n            this.invoiceStatus = cost.invoiceStatus;\r\n            this.narrative = cost.narrative;\r\n            this.costMatrixLineId = cost.costMatrixLineId;\r\n            this.originalEstimatedPMTValue = cost.originalEstimatedPMTValue;\r\n            this.originalEstRateTypeCode = this.getRateCodeFromId(cost.originalEstRateTypeId, masterdata);\r\n            this.originalEstPriceCode = cost.originalEstPriceUnitId && cost.originalEstPriceUnitId !== 0 ?\r\n                this.getPriceCodeFromId(cost.originalEstPriceUnitId, masterdata) : '';\r\n            this.originalEstCurrencyCode = cost.originalEstCurrencyCode;\r\n            this.originalEstRate = cost.originalEstRate;\r\n            this.companyId = cost.companyId;\r\n            this.createdDateTime = cost.createdDateTime;\r\n            this.createdBy = cost.createdBy;\r\n            this.modifiedDateTime = cost.modifiedDateTime;\r\n            this.modifiedBy = cost.modifiedBy;\r\n            this.contextInformation = cost.contextInformation;\r\n            this.documentReference = cost.documentReference;\r\n            this.documentDate = cost.documentDate;\r\n            this.invoicePercent = cost.invoicePercent;\r\n            this.costMatrixName = cost.costMatrixName;\r\n        }\r\n    }\r\n\r\n    getCostTypeDescriptionFromCode(code, masterdata: MasterData) {\r\n        const costType = masterdata.costTypes.find(\r\n            (e) => e.costTypeCode === code);\r\n        return costType ? costType.name : '';\r\n    }\r\n\r\n    getRateCodeFromId(id, masterdata: MasterData) {\r\n        const rateCode = RateTypes[id];\r\n        return rateCode;\r\n    }\r\n\r\n    getPriceCodeFromId(id, masterdata: MasterData) {\r\n        const priceCode = masterdata.priceUnits.find(\r\n            (e) => e.priceUnitId === id);\r\n        return priceCode ? priceCode.priceCode : '';\r\n    }\r\n\r\n    getCostDirectionCodeFromId(id, costDirections: CostDirection[]) {\r\n        const costDirection = costDirections.find(\r\n            (e) => e.costDirectionId === id);\r\n        return costDirection ? costDirection.costDirection : '';\r\n    }\r\n\r\n    getCost(masterdata, costDirections: CostDirection[]) {\r\n        const cost = new Cost();\r\n        cost.costId = this.costId;\r\n        cost.sectionId = this.sectionId;\r\n        cost.costTypeCode = this.costTypeCode;\r\n        cost.description = this.description;\r\n        cost.supplierCode = this.supplierCode;\r\n        cost.costDirectionId = this.getCostDirectionIdFromCode(this.costDirection, costDirections);\r\n        cost.currencyCode = this.currencyCode;\r\n        cost.rateTypeId = this.getRateTypeIdFromCode(this.rateTypeCode, masterdata);\r\n        if (this.priceCode) {\r\n            cost.priceUnitId = this.getPriceUnitIdFromCode(this.priceCode, masterdata);\r\n        }\r\n        cost.rate = this.rate;\r\n        cost.inPL = this.inPL;\r\n        cost.noAction = this.noAction;\r\n        cost.invoiceStatus = this.invoiceStatus;\r\n        cost.narrative = this.narrative;\r\n        cost.costMatrixLineId = this.costMatrixLineId;\r\n        cost.originalEstimatedPMTValue = this.originalEstimatedPMTValue;\r\n        cost.originalEstRateTypeId = this.getRateTypeIdFromCode(this.originalEstRateTypeCode, masterdata);\r\n        if (this.originalEstPriceCode) {\r\n            cost.originalEstPriceUnitId = this.getPriceUnitIdFromCode(this.originalEstPriceCode, masterdata);\r\n        }\r\n        cost.originalEstCurrencyCode = this.originalEstCurrencyCode;\r\n        cost.originalEstRate = this.originalEstRate;\r\n        cost.companyId = this.companyId;\r\n        cost.createdDateTime = this.createdDateTime;\r\n        cost.createdBy = this.createdBy;\r\n        cost.modifiedDateTime = this.modifiedDateTime;\r\n        cost.modifiedBy = this.modifiedBy;\r\n        cost.contextInformation = this.contextInformation;\r\n        cost.documentReference = this.documentReference;\r\n        cost.documentDate = this.documentDate;\r\n        cost.invoicePercent = this.invoicePercent;\r\n        cost.costMatrixName = this.costMatrixName;\r\n\r\n        return cost;\r\n    }\r\n\r\n    getRateTypeIdFromCode(code: string, masterdata: MasterData) {\r\n        const rateTypeId = RateTypes[code];\r\n        return rateTypeId;\r\n    }\r\n\r\n    getPriceUnitIdFromCode(code: string, masterdata: MasterData) {\r\n        const priceUnit = masterdata.priceUnits.find(\r\n            (e) => e.priceCode === code);\r\n        return priceUnit ? priceUnit.priceUnitId : null;\r\n    }\r\n\r\n    getCostDirectionIdFromCode(code: string, costDirections: CostDirection[]) {\r\n        const costDirection = costDirections.find(\r\n            (e) => e.costDirection === code);\r\n        return costDirection ? costDirection.costDirectionId : null;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Children Costs</h2>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"transferCostChildrenGridOptions\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"childCostsGridRows\\\"\\r\\n                             [gridOptions]=\\\"transferCostChildrenGridOptions\\\"\\r\\n                             [columnDefs]=\\\"transferCostChildrenGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"30\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [singleClickEdit]=true\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             rowMultiSelectWithClick=true>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridCheckboxComponent } from '../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { BulkCost } from '../../../../../../../shared/entities/bulk-edit-cost.entity';\r\nimport { ChildSectionsCostsToAdjust } from '../../../../../../../shared/entities/child-sections-costs-to-adjust.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ParentCostsToAdjust } from '../../../../../../../shared/entities/parent-costs-to-adjust.entity';\r\nimport { RateType } from '../../../../../../../shared/entities/rate-type.entity';\r\nimport { AddOrOverride } from '../../../../../../../shared/enums/add-override.enum';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { InvoicingStatus } from '../../../../../../../shared/enums/invoicing-status.enum';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { OverrideCostsDialogComponent } from '../override-costs-dialog/override-costs-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-children-costs',\r\n    templateUrl: './children-costs.component.html',\r\n    styleUrls: ['./children-costs.component.scss'],\r\n})\r\nexport class ChildrenCostsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected tradingService: TradingService,\r\n        public gridService: AgGridService, protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog, private router: Router) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n        editPrivileges: true,\r\n    };\r\n\r\n    gridComponents = {\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n\r\n    transferCostChildrenGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    transferCostChildrenGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    componentId: string = 'ChildrenCostsGrid';\r\n    hasGridSharing: boolean = false;\r\n    masterdata: MasterData;\r\n    company: string;\r\n    costTypesLengthOfParentCosts: number;\r\n    sectionId: number;\r\n    dataVersionId: number;\r\n    childrenCostTypeList: string[] = [];\r\n    childrenCosts: string[] = [];\r\n    childCostsGridRows: ChildSectionsCostsToAdjust[];\r\n    costDynamicColumns: string[] = [];\r\n    parentCosts: ParentCostsToAdjust[] = [];\r\n    rateTypes: RateType[];\r\n    costDirections: CostDirection[];\r\n    selectedChildCosts: ChildSectionsCostsToAdjust[] = [];\r\n    childCostsToOverride: ChildSectionsCostsToAdjust[] = [];\r\n    costTypeCodesToOverride: string[] = [];\r\n    parentCostsForOverrirde: ParentCostsToAdjust[] = [];\r\n    childSectiodIdsForNewCosts: number[] = [];\r\n    childrenCostWithoutDuplicate: ChildSectionsCostsToAdjust[] = [];\r\n    totalQuantity: number = 0;\r\n    allChildCosts: ChildSectionsCostsToAdjust[] = [];\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.sectionId = this.route.snapshot.params.sectionId;\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n        this.rateTypes = [\r\n            {\r\n                code: RateTypes[RateTypes.Rate],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Amount],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Percent],\r\n                description: '',\r\n            },\r\n        ];\r\n\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.transferCostChildrenGridColumns;\r\n        this.transferCostChildrenGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi !== undefined) {\r\n            const allColumnIds = [];\r\n            if (this.transferCostChildrenGridColumns) {\r\n                this.transferCostChildrenGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    setCostsAsColumnsToChildGrid(costTypes: string[]) {\r\n        this.costTypesLengthOfParentCosts = costTypes.length;\r\n\r\n        const getChildCostsSubscription =\r\n            this.tradingService.getChildSectionsCostsToAdjust(this.sectionId, this.dataVersionId).subscribe((data) => {\r\n                if (data.value) {\r\n                    this.allChildCosts = data.value;\r\n                    data.value.forEach((cost) => {\r\n                        const existItem = this.childrenCostWithoutDuplicate.find((x) =>\r\n                            ((x.costTypeCode === cost.costTypeCode) && x.sectionId === cost.sectionId));\r\n                        if (!existItem) {\r\n                            this.childrenCostWithoutDuplicate.push(cost);\r\n                        }\r\n                    });\r\n                    this.childrenCosts = Array.from(new Set(this.childrenCostWithoutDuplicate.map((cost) => cost.costTypeCode)));\r\n\r\n                    if (this.costTypesLengthOfParentCosts > 0) {\r\n                        this.initializeGridColumnsForCostTypes(costTypes);\r\n                    }\r\n                    this.getGridData(costTypes);\r\n                }\r\n            });\r\n        this.subscriptions.push(getChildCostsSubscription);\r\n    }\r\n\r\n    getGridData(costTypeCodes) {\r\n        const costs: any[] = [];\r\n        costTypeCodes.forEach((costType) => {\r\n            this.childrenCostWithoutDuplicate.forEach((rowData) => {\r\n                if (rowData.costTypeCode === costType) {\r\n                    rowData[costType] = true;\r\n                    rowData.costIds = [];\r\n                    const existingRefNo = costs.findIndex((x) => x.contractReference === rowData.contractReference);\r\n                    if (existingRefNo !== -1) {\r\n                        costs[existingRefNo][costType] = true;\r\n                        costs[existingRefNo].costIds.push(rowData.costId);\r\n                    } else {\r\n                        rowData.costIds.push(rowData.costId);\r\n                        costs.push(rowData);\r\n                    }\r\n                } else if (rowData.costTypeCode === null) {\r\n                    const existRefNo = costs.find((cost) => cost.contractReference === rowData.contractReference);\r\n                    if (!existRefNo) {\r\n                        costs.push(rowData);\r\n                    }\r\n                } else {\r\n                    rowData[costType] = false;\r\n                }\r\n            });\r\n        });\r\n        this.childCostsGridRows = costs;\r\n    }\r\n\r\n    initializeGridColumnsForCostTypes(costTypes) {\r\n\r\n        this.transferCostChildrenGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.transferCostChildrenGridColumns = [\r\n            {\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n                editable: false,\r\n                width: 150,\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                colId: 'quantityCode',\r\n                field: 'quantityCode',\r\n                width: 120,\r\n            },\r\n        ];\r\n\r\n        costTypes.forEach((costType) => {\r\n            const mappedColumn = {\r\n                headerName: costType,\r\n                colId: costType,\r\n                field: costType,\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        disabled: true,\r\n                        params: this.gridContext,\r\n                    };\r\n                },\r\n            };\r\n            this.transferCostChildrenGridColumns.push(mappedColumn);\r\n        });\r\n\r\n        if (this.transferCostChildrenGridOptions) {\r\n            this.transferCostChildrenGridOptions.columnDefs = this.transferCostChildrenGridColumns;\r\n            if (this.transferCostChildrenGridOptions.api) {\r\n                this.transferCostChildrenGridOptions.api.setColumnDefs(this.transferCostChildrenGridColumns);\r\n            }\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    addUpateCosts() {\r\n        const selectedCosts: BulkCost[] = [];\r\n        let childSectionIds: number[] = [];\r\n        this.totalQuantity = 0;\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        if (selectedRows && selectedRows.length > 0) {\r\n            selectedRows.forEach((childCost) => {\r\n                const costIds: number[] = childCost.costIds;\r\n                if (costIds && costIds.length > 0) {\r\n                    costIds.forEach((costId) => {\r\n                        this.selectedChildCosts.push(this.allChildCosts.find((cost) => cost.costId === costId));\r\n                    });\r\n                }\r\n            });\r\n            childSectionIds = this.selectedChildCosts && this.selectedChildCosts.length > 0 ?\r\n                Array.from(new Set(this.selectedChildCosts.map((cost) => cost.sectionId))) :\r\n                selectedRows.map((cost) => cost.sectionId);\r\n\r\n            // calculating the total quantity of all the splits/tranches for a section\r\n            if (childSectionIds && childSectionIds.length > 0) {\r\n                childSectionIds.forEach((sectionId) => {\r\n                    this.totalQuantity += this.getQuantityBySectionId(sectionId);\r\n                });\r\n            }\r\n            if (this.selectedChildCosts && this.selectedChildCosts.length > 0 && this.parentCosts && this.parentCosts.length > 0) {\r\n                this.selectedChildCosts.forEach((childCost) => {\r\n                    this.parentCosts.forEach((parentCost) => {\r\n                        if (childCost.costTypeCode === parentCost.costTypeCode &&\r\n                            childCost.costDirectionId === parentCost.costDirectionId) {\r\n                            this.costTypeCodesToOverride.push(childCost.costTypeCode);\r\n                            this.childCostsToOverride.push(childCost);\r\n                            this.parentCostsForOverrirde.push(parentCost);\r\n                        }\r\n                    });\r\n                });\r\n                if (this.childCostsToOverride && this.childCostsToOverride.length > 0 &&\r\n                    this.costTypeCodesToOverride && this.costTypeCodesToOverride.length > 0) {\r\n                    const overrideDialog = this.dialog.open(OverrideCostsDialogComponent, {\r\n                        width: '40%',\r\n                        height: '40%',\r\n                        data: {\r\n                            confirmationMessage: 'Costs ' + this.costTypeCodesToOverride.toString() +\r\n                                ' already exists. What do you want to do?',\r\n\r\n                        },\r\n                    });\r\n                    overrideDialog.afterClosed().subscribe((result) => {\r\n                        if (result === AddOrOverride.Add) {\r\n                            this.getDataForNewCosts(childSectionIds, selectedCosts);\r\n                        } else if (result === AddOrOverride.Override) {\r\n                            this.getDataForOverrideCosts(selectedCosts);\r\n                            if (this.childSectiodIdsForNewCosts && this.childSectiodIdsForNewCosts.length > 0) {\r\n                                // Removing duplicates section ids\r\n                                this.childSectiodIdsForNewCosts = Array.from(new Set(this.childSectiodIdsForNewCosts));\r\n                                this.getDataForNewCosts(this.childSectiodIdsForNewCosts, selectedCosts);\r\n                            }\r\n                            this.getDataForParentCostsProrated(selectedCosts, this.parentCostsForOverrirde);\r\n                        } else {\r\n                            return;\r\n                        }\r\n                        this.saveCosts(selectedCosts);\r\n                    });\r\n\r\n                } else {\r\n                    this.getDataForNewCosts(childSectionIds, selectedCosts);\r\n                    this.getDataForParentCostsProrated(selectedCosts, this.parentCosts);\r\n                    this.saveCosts(selectedCosts);\r\n                }\r\n            } else {\r\n                this.getDataForNewCosts(childSectionIds, selectedCosts);\r\n                this.getDataForParentCostsProrated(selectedCosts, this.parentCosts);\r\n                this.saveCosts(selectedCosts);\r\n            }\r\n\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Please select a split/tranch to transfer costs.');\r\n        }\r\n\r\n    }\r\n\r\n    getDataForOverrideCosts(selectedCosts: BulkCost[]) {\r\n        this.childCostsToOverride.forEach((childCost) => {\r\n            this.parentCostsForOverrirde.forEach((parentCost) => {\r\n                if (childCost.invoicePercent > 0) {\r\n                    this.childSectiodIdsForNewCosts.push(childCost.sectionId);\r\n                } else {\r\n                    if (childCost.costTypeCode === parentCost.costTypeCode &&\r\n                        childCost.costDirectionId === parentCost.costDirectionId) {\r\n                        const costToSave = new BulkCost();\r\n                        costToSave.sectionId = childCost.sectionId;\r\n                        costToSave.rowStatus = 'A';\r\n                        costToSave.costId = childCost.costId;\r\n                        costToSave.costTypeCode = childCost.costTypeCode;\r\n                        costToSave.description = this.getCostTypeDescriptionFromId(childCost.costTypeCode);\r\n                        costToSave.supplierCode = parentCost.supplierCode;\r\n                        costToSave.currencyCode = parentCost.currencyCode;\r\n                        costToSave.rateTypeId = this.getRateTypeIdFromCode(parentCost.rateTypeCode);\r\n                        costToSave.priceUnitId = parentCost.priceUnitId ? parentCost.priceUnitId : (parentCost.priceCode ?\r\n                            this.masterdata.priceUnits.find((priceUnit) =>\r\n                                priceUnit.priceCode === parentCost.priceCode).priceUnitId : null);\r\n                        costToSave.rate = parentCost.isProRated ?\r\n                            ((childCost.quantity * parentCost.rate) / (this.totalQuantity + parentCost.quantity)) :\r\n                            parentCost.rate;\r\n                        costToSave.invoicingStatusId = childCost.invoicingStatusId;\r\n                        costToSave.costDirectionId = parentCost.costDirection ?\r\n                            this.costDirections.find((costDirection) =>\r\n                                costDirection.costDirection === parentCost.costDirection).costDirectionId : null;\r\n                        if (costToSave.rowStatus) {\r\n                            selectedCosts.push(costToSave);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getDataForNewCosts(childSectionIds: number[], selectedCosts: BulkCost[]) {\r\n        childSectionIds.forEach((sectionId) => {\r\n            this.parentCosts.forEach((cost) => {\r\n                const costToSave = new BulkCost();\r\n                costToSave.sectionId = sectionId;\r\n                costToSave.rowStatus = 'N';\r\n                costToSave.costTypeCode = cost.costTypeCode;\r\n                costToSave.description = this.getCostTypeDescriptionFromId(cost.costTypeCode);\r\n                costToSave.supplierCode = cost.supplierCode;\r\n                costToSave.currencyCode = cost.currencyCode;\r\n                costToSave.rateTypeId = this.getRateTypeIdFromCode(cost.rateTypeCode);\r\n                costToSave.priceUnitId = cost.priceUnitId ? cost.priceUnitId : (cost.priceCode ?\r\n                    this.masterdata.priceUnits.find((priceUnit) => priceUnit.priceCode === cost.priceCode).priceUnitId : null);\r\n                costToSave.rate = cost.isProRated ? this.calculateProratedRate(sectionId, cost.rate, cost.quantity) : cost.rate;\r\n                costToSave.invoicingStatusId = InvoicingStatus.Uninvoiced;\r\n                costToSave.costDirectionId = cost.costDirection ?\r\n                    this.costDirections.find((costDirection) => costDirection.costDirection === cost.costDirection).costDirectionId : null;\r\n                if (costToSave.rowStatus) {\r\n                    selectedCosts.push(costToSave);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    setParentData(parentCosts: ParentCostsToAdjust[]) {\r\n        if (parentCosts && parentCosts.length > 0) {\r\n            this.parentCosts = parentCosts;\r\n        }\r\n    }\r\n\r\n    getRateTypeIdFromCode(code: string) {\r\n        const rateTypeId = RateTypes[code];\r\n        return rateTypeId;\r\n    }\r\n\r\n    getCostTypeDescriptionFromId(code: string): string {\r\n        const descrption = this.masterdata.costTypes.find(\r\n            (e) => e.costTypeCode === code);\r\n        return descrption ? descrption.name : null;\r\n    }\r\n\r\n    saveCosts(costs: BulkCost[]) {\r\n        const costTadIndex: string = '1';\r\n        this.subscriptions.push(this.tradingService\r\n            .saveBulkCost(costs)\r\n            .subscribe((data) => {\r\n                this.router.navigate(['/' + this.company + '/trades/display/' +\r\n                    encodeURIComponent(String(this.sectionId)) + '/' + encodeURIComponent(costTadIndex)]);\r\n                this.snackbarService.informationSnackBar('Costs updated successfully.');\r\n            }));\r\n    }\r\n\r\n    calculateProratedRate(sectionId: number, rate: number, parentQuantity: number): number {\r\n        const selectedCost = this.selectedChildCosts.find((cost) => cost.sectionId === sectionId);\r\n        // if existing cost is getting prorated\r\n        if (selectedCost) {\r\n            const quantity: number = selectedCost.quantity;\r\n            return (rate * quantity) / (this.totalQuantity + parentQuantity);\r\n        } else {\r\n            // if there is no cost in child trade, get the quantity of split using the section id for calculation\r\n            const childSectionQuantity = this.allChildCosts.find((cost) => cost.sectionId === sectionId).quantity;\r\n            if (childSectionQuantity) {\r\n                return (rate * childSectionQuantity) / (this.totalQuantity + parentQuantity);\r\n            }\r\n        }\r\n    }\r\n\r\n    getDataForParentCostsProrated(selectedCosts: BulkCost[], parentCostsForProrata: ParentCostsToAdjust[]) {\r\n        if (parentCostsForProrata && parentCostsForProrata.length > 0) {\r\n            parentCostsForProrata.forEach((parentCost) => {\r\n                const costToSave = new BulkCost();\r\n                costToSave.sectionId = parentCost.sectionId;\r\n                costToSave.rowStatus = 'A';\r\n                costToSave.costId = parentCost.costId;\r\n                costToSave.costTypeCode = parentCost.costTypeCode;\r\n                costToSave.description = this.getCostTypeDescriptionFromId(parentCost.costTypeCode);\r\n                costToSave.supplierCode = parentCost.supplierCode;\r\n                costToSave.currencyCode = parentCost.currencyCode;\r\n                costToSave.rateTypeId = this.getRateTypeIdFromCode(parentCost.rateTypeCode);\r\n                costToSave.priceUnitId = parentCost.priceUnitId ? parentCost.priceUnitId : (parentCost.priceCode ?\r\n                    this.masterdata.priceUnits.find((priceUnit) =>\r\n                        priceUnit.priceCode === parentCost.priceCode).priceUnitId : null);\r\n                costToSave.rate = parentCost.isProRated ?\r\n                    ((parentCost.quantity * parentCost.rate) / (this.totalQuantity + parentCost.quantity)) :\r\n                    parentCost.rate;\r\n                costToSave.invoicingStatusId = parentCost.invoicingStatusId;\r\n                costToSave.costDirectionId = parentCost.costDirection ?\r\n                    this.costDirections.find((costDirection) =>\r\n                        costDirection.costDirection === parentCost.costDirection).costDirectionId : null;\r\n                if (costToSave.rowStatus) {\r\n                    selectedCosts.push(costToSave);\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    getQuantityBySectionId(sectionId: number): number {\r\n        if (this.allChildCosts && this.allChildCosts.length > 0) {\r\n            const section: ChildSectionsCostsToAdjust = this.allChildCosts.find((cost) => cost.sectionId === sectionId);\r\n            if (section) {\r\n                return section.quantity;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"end\\\">\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\">\\r\\n        <p>{{dialogText}}</p>\\r\\n    </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">DISCARD</button>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start end\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onAddCostsButtonClicked()\\\">ADD COSTS</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onOverrideButtonClicked()\\\">OVERRIDE</button>\\r\\n    </div>\\r\\n</mat-dialog-actions>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { AddOrOverride } from '../../../../../../../shared/enums/add-override.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-override-costs-dialog',\r\n    templateUrl: './override-costs-dialog.component.html',\r\n    styleUrls: ['./override-costs-dialog.component.scss'],\r\n})\r\nexport class OverrideCostsDialogComponent implements OnInit {\r\n\r\n    dialogData: {\r\n        confirmationMessage: string,\r\n    };\r\n    dialogText: string = '';\r\n    constructor(public thisDialogRef: MatDialogRef<OverrideCostsDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            confirmationMessage: string,\r\n        }) {\r\n        this.dialogData = data;\r\n        this.dialogText = this.dialogData.confirmationMessage;\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    onAddCostsButtonClicked() {\r\n        this.thisDialogRef.close(AddOrOverride.Add);\r\n    }\r\n\r\n    onOverrideButtonClicked() {\r\n        this.thisDialogRef.close(AddOrOverride.Override);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Parent Costs</h2>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"transferCostGridOptions\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"parentCostsGridRows\\\"\\r\\n                             [gridOptions]=\\\"transferCostGridOptions\\\"\\r\\n                             [columnDefs]=\\\"transferCostGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             rowMultiSelectWithClick=true\\r\\n                             suppressRowClickSelection=true>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridCheckboxComponent } from '../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ParentCostsToAdjust } from '../../../../../../../shared/entities/parent-costs-to-adjust.entity';\r\nimport { ParentCostsUpdateOptions } from '../../../../../../../shared/entities/ParentCostsUpdateOptions.entity';\r\nimport { RateType } from '../../../../../../../shared/entities/rate-type.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { YesNoConfirmation } from '../../../../../../../shared/enums/yes-no-confirmation.enum';\r\nimport { CustomNumberMask } from '../../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\n\r\n@Component({\r\n    selector: 'atlas-parent-costs',\r\n    templateUrl: './parent-costs.component.html',\r\n    styleUrls: ['./parent-costs.component.scss'],\r\n})\r\nexport class ParentCostsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly listOfCostTypes = new EventEmitter<any>();\r\n\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n        editPrivileges: true,\r\n    };\r\n\r\n    gridComponents = {\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n\r\n    transferCostGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    transferCostGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    componentId: string = 'ParentCostsGrid';\r\n    hasGridSharing: boolean = false;\r\n    masterdata: MasterData;\r\n    rateTypes: RateType[];\r\n    costDirections: CostDirection[];\r\n    isProRata: boolean = false;\r\n    confirmationOptions: ParentCostsUpdateOptions[];\r\n    sectionId: number;\r\n    parentCostsGridRows: ParentCostsToAdjust[];\r\n    dataVersionId: number;\r\n    costTypesList: string[] = [];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        public gridService: AgGridService,\r\n        protected tradingService: TradingService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.sectionId = this.route.snapshot.params.sectionId;\r\n        this.getCosts(this.sectionId);\r\n        this.initializeGridColumns();\r\n        this.rateTypes = [\r\n            {\r\n                code: RateTypes[RateTypes.Rate],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Amount],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Percent],\r\n                description: '',\r\n            },\r\n        ];\r\n\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n        this.confirmationOptions = [\r\n            {\r\n                option: YesNoConfirmation[YesNoConfirmation.Yes],\r\n            },\r\n            {\r\n                option: YesNoConfirmation[YesNoConfirmation.No],\r\n            },\r\n        ];\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.transferCostGridColumns;\r\n        this.transferCostGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi !== undefined) {\r\n            const allColumnIds = [];\r\n            if (this.transferCostGridColumns) {\r\n                this.transferCostGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.transferCostGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.transferCostGridColumns = [\r\n            {\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Cost Code*',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n            },\r\n            {\r\n                headerName: 'Supplier',\r\n                field: 'supplierCode',\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'CCY*',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Rate Type*',\r\n                field: 'rateTypeCode',\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec*',\r\n                field: 'costDirection',\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Rate/Amount',\r\n                field: 'rate',\r\n                type: 'numberColumn',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                cellEditorParams: {\r\n                    maxLength: 100,\r\n                    rows: 3,\r\n                    cols: 50,\r\n                },\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Pro Rata',\r\n                field: 'isProRated',\r\n                colId: 'isProRated',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        disabled: this.isProRataEditable(params),\r\n                        params: this.gridContext,\r\n                    };\r\n                },\r\n\r\n            },\r\n        ];\r\n\r\n    }\r\n\r\n    isProRataEditable(params): boolean {\r\n        if (params.data.rateTypeCode === RateTypes[RateTypes.Amount]) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getCosts(sectionId: number) {\r\n        const getCostsSubscription = this.tradingService.getParentCostsToAdjust(sectionId, this.dataVersionId).subscribe((data) => {\r\n            data.value.forEach((cost) => {\r\n                cost.rateTypeCode = this.getRateCodeFromId(cost.rateTypeId);\r\n                cost.priceCode = this.getPriceCodeFromId(cost.priceUnitId);\r\n                cost.costDirection = this.getCostDirectionCodeFromId(cost.costDirectionId, this.costDirections);\r\n            });\r\n            this.parentCostsGridRows = data.value;\r\n            this.costTypesList = data.value.map((costs) => costs.costTypeCode);\r\n            this.listOfCostTypes.emit({\r\n                costTypes: this.costTypesList,\r\n            });\r\n        });\r\n\r\n        this.subscriptions.push(getCostsSubscription);\r\n\r\n    }\r\n\r\n    getCostTypeCodeFromId(id: number): string {\r\n        const costTypeCode = this.masterdata.costTypes.find(\r\n            (e) => e.costTypeId === id);\r\n        return costTypeCode ? costTypeCode.costTypeCode : null;\r\n    }\r\n\r\n    getSupplierCodeFromId(id: number) {\r\n        const counterparty = this.masterdata.counterparties.find((e) => e.counterpartyID === id);\r\n        return counterparty ? counterparty.counterpartyCode : null;\r\n    }\r\n\r\n    getRateCodeFromId(id: number) {\r\n        const rateCode = RateTypes[id];\r\n        return rateCode;\r\n    }\r\n\r\n    getPriceCodeFromId(id: number) {\r\n        const priceCode = this.masterdata.priceUnits.find(\r\n            (e) => e.priceUnitId === id);\r\n        return priceCode ? priceCode.priceCode : '';\r\n    }\r\n\r\n    getCostDirectionCodeFromId(id, costDirections: CostDirection[]) {\r\n        const costDirection = costDirections.find(\r\n            (e) => e.costDirectionId === id);\r\n        return costDirection ? costDirection.costDirection : '';\r\n    }\r\n\r\n    getGridData(): ParentCostsToAdjust[] {\r\n        const costs: ParentCostsToAdjust[] = this.gridApi.getSelectedRows();\r\n        if (costs && costs.length > 0) {\r\n            return costs;\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"transferCostsToSplitsForm\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <atlas-parent-costs #parentCostsComponent\\r\\n                            (listOfCostTypes)=\\\"onCostTypesList($event)\\\"></atlas-parent-costs>\\r\\n\\r\\n        <atlas-children-costs #childrenCostsComponent></atlas-children-costs>\\r\\n\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             class=\\\"button-details\\\">\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                    DISCARD\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"end start \\\">\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"onSaveButtonClicked()\\\">\\r\\n                        Save\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { BulkCost } from '../../../../../shared/entities/bulk-edit-cost.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { ChildrenCostsComponent } from './components/children-costs/children-costs.component';\r\nimport { ParentCostsComponent } from './components/parent-costs/parent-costs.component';\r\n\r\n@Component({\r\n    selector: 'atlas-costs-to-adjust',\r\n    templateUrl: './costs-to-adjust.component.html',\r\n    styleUrls: ['./costs-to-adjust.component.scss'],\r\n})\r\nexport class CostsToAdjustComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('parentCostsComponent') parentCostsComponent: ParentCostsComponent;\r\n    @ViewChild('childrenCostsComponent') childrenCostsComponent: ChildrenCostsComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    transferCostsToSplitsForm: FormGroup;\r\n    sectionId: number;\r\n\r\n    constructor(private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        protected route: ActivatedRoute, protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected tradingService: TradingService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.sectionId = this.route.snapshot.params.sectionId;\r\n        this.transferCostsToSplitsForm = this.formBuilder.group({\r\n            childrenCostsComponent: this.childrenCostsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.childrenCostsComponent);\r\n    }\r\n\r\n    onCostTypesList($event) {\r\n        this.childrenCostsComponent.setCostsAsColumnsToChildGrid($event.costTypes);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/display/' +\r\n            encodeURIComponent(String(this.sectionId))]);\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.childrenCostsComponent.setParentData(this.parentCostsComponent.getGridData());\r\n        this.childrenCostsComponent.addUpateCosts();\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"physical-section-tab main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxFlex=\\\"50%\\\">\\r\\n            <button mat-raised-button\\r\\n                    [disabled]=\\\"!isTradeEdit\\\"\\r\\n                    (click)=\\\"onUseCostMatrixClicked()\\\">\\r\\n                Use Cost matrix\\r\\n            </button>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\">\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"useCostMatrixCtrl\\\"\\r\\n                       placeholder=\\\"Use a cost matrix\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.md=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end\\\"\\r\\n             fxFlex=\\\"50%\\\">\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"start end \\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"end start \\\">\\r\\n                    <button mat-button\\r\\n                            [disabled]=\\\"!isTransferToCostsEnabled\\\"\\r\\n                            (click)=\\\"handleAction('transfer')\\\">\\r\\n                        Transfer to Splits\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"end end \\\">\\r\\n                    <button mat-button\\r\\n                            *ifAuthorized=\\\"'Trades.CostTab.EditingCostGrid', company:this.company, level:PermissionLevels.ReadWrite\\\"\\r\\n                            [disabled]=\\\"(!isTradeEdit || isCancelledTrade)\\\"\\r\\n                            (click)=\\\"handleAction('add')\\\">\\r\\n                        Add Costs\\r\\n                    </button>\\r\\n                </div>\\r\\n\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"costGridOptions && costGridOptions.columnDefs\\\"\\r\\n                                                [gridOptions]=\\\"costGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"componentId\\\"\\r\\n                                                [showExport]=\\\"true\\\"\\r\\n                                                [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n                <atlas-grid-enlargement *ngIf=\\\"costGridOptions && costGridOptions.columnDefs\\\"\\r\\n                                        [gridOptions]=\\\"costGridOptions\\\"\\r\\n                                        [userPreferencesParameters]=\\\"gridPreferences\\\"\\r\\n                                        [additionnalActions]=\\\"gridZoomAdditionalActions\\\"\\r\\n                                        (cellSelected)=\\\"onCellClicked($event)\\\"\\r\\n                                        (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                        (additionalActionTriggered)=\\\"handleAction($event)\\\"\\r\\n                                        #gridZoom>\\r\\n                </atlas-grid-enlargement>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular\\r\\n                                 style=\\\" height: 100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"costsGridRows\\\"\\r\\n                                 [columnDefs]=\\\"costsGridCols\\\"\\r\\n                                 [gridOptions]=\\\"costGridOptions\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [singleClickEdit]=true\\r\\n                                 [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (cellClicked)=\\\"onCellClicked($event)\\\"\\r\\n                                 (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 enableFilter>\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \".physical-section-tab {\\n  padding-top: 16px; }\\n\\n.ag-theme-material {\\n  font: 400 14px \\\"Roboto Regular\\\", sans-serif; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Observable } from 'rxjs';\r\nimport { concatMap } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../execution/services/execution-cash-common-methods';\r\nimport { AgContextualMenuComponent } from '../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { GridEnlargementComponent } from '../../../../shared/components/grid-enlargement/grid-enlargement.component';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { CostDirection } from '../../../../shared/entities/cost-direction.entity';\r\nimport { Cost } from '../../../../shared/entities/cost.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { RateType } from '../../../../shared/entities/rate-type.entity';\r\nimport { Tag } from '../../../../shared/entities/tag.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { ContractStatus } from '../../../../shared/enums/contract-status.enum';\r\nimport { CostDirections } from '../../../../shared/enums/cost-direction.enum';\r\nimport { Gaps } from '../../../../shared/enums/gaps.enum';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { RateTypes } from '../../../../shared/enums/rate-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../shared/models/section-complete-display-view';\r\nimport { CustomNumberMask } from '../../../../shared/numberMask';\r\nimport { FormatDatePipe } from '../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { FeatureFlagService } from '../../../../shared/services/http-services/feature-flag.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { Costmatrix } from '../../../../shared/services/trading/dtos/costmatrix';\r\nimport { CostmatrixLine } from '../../../../shared/services/trading/dtos/costmatrixLine';\r\nimport { PhysicalFixedPricedContract } from '../../../entities/physical-fixed-priced-contract.entity';\r\nimport { FlagInfo } from './../../../../shared/dtos/flag-info';\r\nimport { AddCostConfirmationDialogComponent } from './add-cost-confirmation-dialog/add-cost-confirmation-dialog.component';\r\nimport { CostInvoiceMarkingDialogComponent } from './cost-invoice-marking-dialog/cost-invoice-marking-dialog.component';\r\nimport { CostMatrixDialogComponent } from './cost-matrix-dialog/cost-matrix-dialog.component';\r\nimport { CostListDisplayView } from './costs-ag-grid-row';\r\n@Component({\r\n    selector: 'atlas-physical-contract-capture-form-costs-tab',\r\n    templateUrl: './physical-contract-capture-form-costs-tab.component.html',\r\n    styleUrls: ['./physical-contract-capture-form-costs-tab.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class PhysicalContractCaptureFormCostsTabComponent extends BaseFormComponent implements OnInit {\r\n    useCostMatrixCtrl = new AtlasFormControl('useCostMatrix');\r\n    @ViewChild('gridZoom') gridEnlargementComponent: GridEnlargementComponent;\r\n    @ViewChild('costMatrixDialogComponent') costMatrixDialogComponent: CostMatrixDialogComponent;\r\n    @ViewChild('addCostConfirmationDialogComponent') addCostConfirmationDialogComponent: AddCostConfirmationDialogComponent;\r\n    @Input() readonly commodityFormGroup: FormGroup;\r\n    @Output() readonly noOfZeroCostRow = new EventEmitter<any>();\r\n    @Output() readonly costInvoiced = new EventEmitter<any>();\r\n\r\n    costsMenuActions: { [key: string]: string } = {\r\n        deleteCost: 'delete',\r\n        addCost: 'add',\r\n        transferToSplits: 'transfer',\r\n    };\r\n\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    costsGridContextualMenuActions: AgContextualMenuAction[];\r\n    costsGridCols: agGrid.ColDef[];\r\n    costsGridColsGap003: agGrid.ColDef[];\r\n    costsGridRows: CostListDisplayView[] = [];\r\n    costGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    masterdata: MasterData;\r\n    rateTypes: RateType[] = [\r\n        {\r\n            code: RateTypes[RateTypes.Rate],\r\n            description: '',\r\n        },\r\n        {\r\n            code: RateTypes[RateTypes.Amount],\r\n            description: '',\r\n        },\r\n        {\r\n            code: RateTypes[RateTypes.Percent],\r\n            description: '',\r\n        },\r\n    ];;\r\n    company: string;\r\n    costMatrix: Costmatrix[];\r\n    costMatrixLine: CostmatrixLine[];\r\n    filteredLines: CostmatrixLine[] = [];\r\n    isSummaryView: boolean = false;\r\n    importedCostMatrices: string = '';\r\n    selectCostmatrix: string;\r\n    costMatrixId: number;\r\n    isTradeEdit: boolean = true;\r\n    isZeroRowExist: boolean = false;\r\n    contractAmountOnSelect: number;\r\n    sectionId: number;\r\n    isTransferToCostsEnabled: boolean = true;\r\n    isCancelledTrade: boolean = false;\r\n    formatType: string = 'en-US';\r\n    editInPNLPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'COSTSINP&L',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'CostTab',\r\n    };\r\n    editNoActionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'COSTSNOACT',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'CostTab',\r\n    };\r\n    deletePrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'COSTSDEL',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'CostTab',\r\n    };\r\n    editEstimatedColumnsPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'COSTSORIGEST',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'CostTab',\r\n    };\r\n\r\n    editingCostGrid: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'EditingCostGrid',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'CostTab',\r\n    };\r\n    editPercentageInvoicedPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'EditPercentageInvoiced',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'CostTab',\r\n    };\r\n    ifAuthorized: string;\r\n    costDirections: CostDirection[] = [\r\n        {\r\n            costDirectionId: CostDirections.Payable,\r\n            costDirection: 'Pay',\r\n        },\r\n        {\r\n            costDirectionId: CostDirections.Receivable,\r\n            costDirection: 'Receive',\r\n        },\r\n    ];\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    gridContext = {\r\n        isContractApprovedOnce: false,\r\n        contractStatus: '',\r\n        gridEditable: true,\r\n        editPrivileges: true,\r\n        deletePrivileges: true,\r\n        inPNLPrivileges: true,\r\n        noACTPrivileges: true,\r\n        percentageInvoiced: true,\r\n    };\r\n    hasRecommendCMGap: boolean;\r\n    gaps = Gaps;\r\n    isBestMatch: string;\r\n    isTradeImage = false;\r\n    userActiveDirectoryName: string;\r\n    isImageCostChecked: boolean = true;\r\n    isHideCost = true;\r\n    dataVersionId: number;\r\n    editingCostGridPrivilege: boolean = false;\r\n    isImage = false;\r\n    componentId: string = 'tradeCostList';\r\n    zeroQuantity: boolean = false;\r\n    priceCode: string;\r\n    weightCode: string;\r\n    PermissionLevels = PermissionLevels;\r\n\r\n    gridPreferences: UserGridPreferencesParameters = new UserGridPreferencesParameters();\r\n    gridZoomAdditionalActions = [];\r\n\r\n    tagsList: any;\r\n    flagAuth: FlagInfo;\r\n\r\n    constructor(\r\n        protected masterdataService: MasterdataService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private companyManager: CompanyManagerService,\r\n        protected dialog: MatDialog,\r\n        private snackbarService: SnackbarService,\r\n        protected tradingService: TradingService,\r\n        protected executionService: ExecutionService,\r\n        private authorizationService: AuthorizationService,\r\n        private formatDate: FormatDatePipe,\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        protected securityService: SecurityService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n        protected featureFlagService: FeatureFlagService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.getTagFields();\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.sectionId = this.route.snapshot.params.sectionId;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        const companyDetails = this.companyManager.getCurrentCompany();\r\n        this.priceCode = companyDetails.priceCode;\r\n        this.weightCode = companyDetails.weightCode;\r\n        this.checkGridEditPrivilege();\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isImage = true;\r\n            this.isHideCost = JSON.parse(this.route.snapshot.queryParams.imageEstimates);\r\n        }\r\n\r\n        this.init();\r\n\r\n        this.bindConfiguration();\r\n\r\n        this.featureFlagService.getFlagInfo(Gaps.gap003).subscribe(\r\n            (flagAuth) => {\r\n                this.flagAuth = flagAuth;\r\n\r\n                this.isRecommendedCostMatrixGapActive();\r\n                this.initCostsGridColumns();\r\n            },\r\n            (error) => {\r\n                this.hasRecommendCMGap = false;\r\n            },\r\n        );\r\n\r\n        this.securityService\r\n            .isSecurityReady()\r\n            .pipe(\r\n                concatMap(() => {\r\n                    return this.gridConfigurationProvider.getConfiguration(this.company, this.componentId);\r\n                }),\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.costGridOptions = params;\r\n        if (this.costsGridCols) {\r\n            this.costGridOptions.columnDefs = this.costsGridCols;\r\n        }\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridService.sizeColumns(this.costGridOptions);\r\n    }\r\n\r\n    init() {\r\n        this.costsGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.costsMenuActions.deleteCost,\r\n                disabled: this.isDeleteDisabledWithPrivileges.bind(this),\r\n            },\r\n        ];\r\n        this.importedCostMatrices = '';\r\n        this.selectCostmatrix = '';\r\n\r\n        this.gridPreferences = {\r\n            company: this.company,\r\n            gridId: this.componentId,\r\n            gridOptions: this.costGridOptions,\r\n            sharingEnabled: false, // this.hasGridSharing,\r\n            showExport: true,\r\n        };\r\n    }\r\n\r\n    handleAction(action: string, cost: CostListDisplayView = null) {\r\n        switch (action) {\r\n            case this.costsMenuActions.deleteCost:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Cost Deletion',\r\n                        text: 'Deleting a cost is permanent. Do you wish to proceed?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        if (cost.costId) {\r\n                            const deleteConfirmationSubscription =\r\n                                this.tradingService.deleteCost(cost.costId, cost.sectionId, this.dataVersionId)\r\n                                    .subscribe(\r\n                                        () => {\r\n                                            this.snackbarService.informationSnackBar('Cost Deleted');\r\n                                            this.getCosts(cost.sectionId);\r\n                                        },\r\n                                        (err) => {\r\n                                            this.dialog.open(ConfirmationDialogComponent, {\r\n                                                data: {\r\n                                                    title: 'DELETION',\r\n                                                    text: 'Cannot delete cost of this split',\r\n                                                    okButton: 'Got it',\r\n                                                },\r\n                                            });\r\n                                        });\r\n                            this.subscriptions.push(deleteConfirmationSubscription);\r\n                        } else {\r\n                            this.gridApi.updateRowData({ remove: [cost] });\r\n                        }\r\n                    }\r\n                });\r\n                this.subscriptions.push(confirmationSubscription);\r\n                break;\r\n            case this.costsMenuActions.addCost:\r\n                const newItem = this.createNewRowData();\r\n                this.costsGridRows.push(newItem);\r\n                this.gridApi.setRowData(this.costsGridRows);\r\n                this.gridEnlargementComponent.refreshGrid();\r\n                break;\r\n            case this.costsMenuActions.transferToSplits:\r\n                this.navigateToCostTransferPage();\r\n                break;\r\n            default:\r\n                throw new Error('Unknown action: ' + action);\r\n        }\r\n    }\r\n\r\n    isRecommendedCostMatrixGapActive() {\r\n        if (this.flagAuth) {\r\n            this.hasRecommendCMGap = this.flagAuth.active;\r\n        }\r\n    }\r\n\r\n    getCosts(sectionId: number) {\r\n        const getCostsSubscription = this.tradingService.getAllCosts(sectionId, this.dataVersionId).subscribe((data) => {\r\n            this.costsGridRows = [];\r\n\r\n            data.value.forEach((element) => {\r\n                const displayCostRow = new CostListDisplayView(element, this.masterdata, this.costDirections);\r\n                this.costsGridRows.push(displayCostRow);\r\n                if (!this.importedCostMatrices.includes(element.costMatrixName)) {\r\n                    this.importedCostMatrices = this.importedCostMatrices + element.costMatrixName + ' , ';\r\n                }\r\n            });\r\n            this.gridApi.setRowData(this.costsGridRows);\r\n            this.useCostMatrixCtrl.setValue(this.importedCostMatrices.trim().slice(0, -1));\r\n        });\r\n\r\n        this.subscriptions.push(getCostsSubscription);\r\n    }\r\n\r\n    populateEntity(entity: any) {\r\n        const physicalFixedPricedContract = entity as PhysicalFixedPricedContract;\r\n        physicalFixedPricedContract.costs = this.getGridData();\r\n        return physicalFixedPricedContract;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty) {\r\n                if (!(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.currencyCode && rowData.data.rateTypeCode)) {\r\n                    isValid = false;\r\n                }\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n\r\n    initGridZoom() {\r\n        // Transfer to Splits Button\r\n        this.gridZoomAdditionalActions.push({\r\n            action: this.costsMenuActions.transferToSplits,\r\n            text: 'Transfer to Splits',\r\n            disabled: !this.isTransferToCostsEnabled,\r\n        });\r\n\r\n        // -- Add Cost Button\r\n        const addCostPrivilegeLevel = this.authorizationService.getPermissionLevel(\r\n            this.company,\r\n            this.editingCostGrid.privilegeName,\r\n            this.editingCostGrid.privilegeParentLevelOne,\r\n            this.editingCostGrid.privilegeParentLevelTwo,\r\n        );\r\n\r\n        const hasAddCostPrivilege = addCostPrivilegeLevel >= PermissionLevels.ReadWrite;\r\n\r\n        if (hasAddCostPrivilege) {\r\n            this.gridZoomAdditionalActions.push({\r\n                action: this.costsMenuActions.addCost,\r\n                text: 'Add Cost',\r\n                disabled: !this.isTradeEdit,\r\n            });\r\n        }\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n        this.isCancelledTrade = this.model.isCancelled;\r\n        this.sectionId = this.model.sectionId;\r\n        this.isTradeEdit = isEdit;\r\n        let isContractApprovedOnce: boolean = false;\r\n        isContractApprovedOnce = tradeRecord.firstApprovalDateTime ? true : false;\r\n        let contractStatus: string;\r\n        contractStatus = tradeRecord.status;\r\n        this.isTransferToCostsEnabled =\r\n            entity.childSections && entity.childSections.length > 0 && (entity.costs && entity.costs.length > 0) ? true : false;\r\n        if (this.isHideCost) {\r\n            const costsToAdd = [];\r\n            this.model.costs.forEach((element) => {\r\n                if (this.isImage) {\r\n                    // estimates shouldn't get copied while imaging a trade\r\n                    element.originalEstRate = null;\r\n                    element.originalEstCurrencyCode = null;\r\n                    element.originalEstPriceUnitId = null;\r\n                    element.originalEstRateTypeId = null;\r\n                    element.originalEstimatedPMTValue = null;\r\n                }\r\n                const displayCostRow = new CostListDisplayView(element, this.masterdata, this.costDirections);\r\n                costsToAdd.push(displayCostRow);\r\n                if (element.costMatrixName && !this.importedCostMatrices.includes(element.costMatrixName)) {\r\n                    this.importedCostMatrices = this.importedCostMatrices + element.costMatrixName + ' , ';\r\n                }\r\n                if (displayCostRow.rate === 0) {\r\n                    this.isZeroRowExist = true;\r\n                }\r\n            });\r\n            this.costsGridRows = costsToAdd;\r\n            this.useCostMatrixCtrl.setValue(this.importedCostMatrices.trim().slice(0, -1));\r\n        }\r\n        this.gridContext.isContractApprovedOnce = isContractApprovedOnce;\r\n        this.gridContext.contractStatus = contractStatus;\r\n        this.gridContext.gridEditable = isEdit && this.editingCostGridPrivilege ? true : false;\r\n        this.gridContext.editPrivileges = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);\r\n        this.gridContext.deletePrivileges = this.checkIfUserHasRequiredPrivileges(this.deletePrivilege);\r\n        this.gridContext.inPNLPrivileges = this.checkIfUserHasRequiredPrivileges(this.editInPNLPrivilege);\r\n        this.gridContext.percentageInvoiced = this.checkIfUserHasRequiredPrivileges(this.editPercentageInvoicedPrivilege);\r\n        this.gridContext.noACTPrivileges = this.checkIfUserHasRequiredPrivileges(this.editNoActionPrivilege);\r\n        if (this.isImage) {\r\n            this.costMatrixId = this.route.snapshot.queryParams.costMatrixId;\r\n            if (this.costMatrixId) {\r\n                this.imageCostMatrixTrade(this.costMatrixId);\r\n            }\r\n        }\r\n        this.noOfZeroCostRow.emit({\r\n            isZeroRowExist: this.isZeroRowExist,\r\n        });\r\n        this.costInvoiced.emit(this.costsGridRows);\r\n\r\n        // --\r\n        this.initGridZoom();\r\n        return entity;\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo,\r\n            );\r\n            if (userPermissionLevel >= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isGridEditable(params) {\r\n        // cannot edit the data of a cost if it has been fully invoiced\r\n        this.gridContext.editPrivileges = this.checkIfUserHasRequiredPrivileges(this.editingCostGrid);\r\n        this.gridContext.gridEditable = this.gridContext.editPrivileges ? true : false;\r\n        if (this.isCancelledTrade && params && params.colDef.field === 'costTypeCode') {\r\n            const paramCostType = this.masterdata.costTypes.find((c) => c.costTypeCode === params.data.costTypeCode);\r\n            if (\r\n                (paramCostType !== null && !paramCostType.isACommission) ||\r\n                (paramCostType.isACommission)\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return this.isColumnEditable(params);\r\n    }\r\n\r\n    isColumnEditable(params) {\r\n        this.gridContext.gridEditable = this.isTradeEdit;\r\n        return (\r\n            this.gridContext.gridEditable &&\r\n            (params.data.invoicePercent === undefined || params.data.invoicePercent < 100)\r\n        );\r\n    }\r\n\r\n    isColumnEditableCheckingCostTypeAndCancelledTrade(params) {\r\n        if (this.isCancelledTrade) {\r\n            const paramCostType = this.masterdata.costTypes.find((c) => c.costTypeCode === params.data.costTypeCode);\r\n            if (!paramCostType.isACommission) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isGridColumnEditableWithPrivileges(params) {\r\n        return (this.isColumnEditable(params) &&\r\n            this.isColumnEditableCheckingCostTypeAndCancelledTrade(params) &&\r\n            this.gridContext.editPrivileges\r\n        );\r\n    }\r\n\r\n    isGridCheckboxEditableWithPrivileges(params) {\r\n        return !this.isGridColumnEditableWithPrivileges(params);\r\n    }\r\n\r\n    isInPNLEditableWithPrivileges(params) {\r\n        return !(this.isColumnEditable(params) && this.gridContext.inPNLPrivileges\r\n            && this.isColumnEditableCheckingCostTypeAndCancelledTrade(params));\r\n    }\r\n\r\n    noACTEditableWithPrivileges(params) {\r\n        return !(this.isColumnEditable(params) &&\r\n            this.gridContext.noACTPrivileges);\r\n    }\r\n\r\n    isDeleteDisabledWithPrivileges(params) {\r\n        const costRow = params.data as CostListDisplayView;\r\n        if (!costRow.costId) {\r\n            return false;\r\n        }\r\n        let deleteDisable = true;\r\n        if (params.context.actionContext.gridEditable) {\r\n            if (!params.context.isContractApprovedOnce) {\r\n                deleteDisable = false;\r\n            } else if (\r\n                params.context.isContractApprovedOnce &&\r\n                params.context.actionContext.deletePrivileges &&\r\n                params.context.contractStatus === ContractStatus[ContractStatus.Approved]\r\n            ) {\r\n                deleteDisable = false;\r\n            }\r\n        }\r\n        return deleteDisable && this.isColumnEditable(params) && !this.isColumnEditableCheckingCostTypeAndCancelledTrade(params);\r\n    }\r\n\r\n    getGridData(): Cost[] {\r\n        const costs = new Array<Cost>();\r\n        const masterdata = this.masterdata;\r\n        const costDirections = this.costDirections;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            const costData: CostListDisplayView = rowData.data;\r\n            if (costData.isDirty || (this.isTradeImage && this.isImageCostChecked) || this.zeroQuantity) {\r\n                costs.push(costData.getCost(masterdata, costDirections));\r\n            }\r\n        });\r\n        return costs;\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            params.node.setDataValue('rowStatus', params.node.data.costId ? 'U' : 'N');\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    showCostInvoiceMarking(costId: number) {\r\n        const openInvoiceMarkingCostDialog = this.dialog.open(CostInvoiceMarkingDialogComponent, {\r\n            data: {\r\n                masterdata: this.masterdata,\r\n                costId,\r\n                model: this.model,\r\n                company: this.company,\r\n                dataVersionId: this.dataVersionId,\r\n            },\r\n            width: '90%',\r\n            height: '80%',\r\n        });\r\n\r\n        openInvoiceMarkingCostDialog.afterClosed().subscribe((result: boolean) => {\r\n            if (result) {\r\n                this.gridApi.stopEditing();\r\n            }\r\n        });\r\n    }\r\n\r\n    onAddRowButtonClicked() {\r\n        if (this.model.originalQuantity === 0 || this.contractAmountOnSelect === 0) {\r\n            this.snackbarService.throwErrorSnackBar('You Cannot Add costs to a contract with Zero Quantity');\r\n        } else {\r\n            const newItem = this.createNewRowData();\r\n\r\n            this.costsGridRows.push(newItem);\r\n            this.gridApi.setRowData(this.costsGridRows);\r\n\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newCostRow = new CostListDisplayView();\r\n        newCostRow.isDirty = true;\r\n        newCostRow.currencyCode = 'USD';\r\n        newCostRow.rowStatus = 'N';\r\n        return newCostRow;\r\n    }\r\n\r\n    initCostsGridColumns() {\r\n        this.costGridOptions.context = this.gridContext;\r\n        this.gridPreferences.gridOptions = this.costGridOptions;\r\n        this.gridPreferences = new UserGridPreferencesParameters(this.gridPreferences);\r\n        if (this.flagAuth.active === true) {\r\n            this.costsGridCols = [\r\n                {\r\n                    headerName: '',\r\n                    colId: 'rowStatus',\r\n                    field: 'rowStatus',\r\n                    width: 70,\r\n                    minWidth: 70,\r\n                    maxWidth: 70,\r\n                    cellRenderer: (params) => {\r\n                        if (params.value) {\r\n                            return '<mat-chip-list><mat-chip class=\"status-flag-chip\">' + params.value\r\n                                + '</mat-chip></mat-chip-list>';\r\n                        }\r\n                        return '';\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Best Match',\r\n                    colId: 'bestMatch',\r\n                    field: 'bestMatch',\r\n                    cellRenderer: (params) => {\r\n                        if (params.value) {\r\n                            return '<mat-chip-list><mat-chip class=\"status-flag-chip\">' + params.value +\r\n                            '</mat-chip></mat-chip-list>';\r\n                        }\r\n                        return '';\r\n                    },\r\n                },\r\n                {\r\n                    colId: 'costId',\r\n                    field: 'costId',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Cost Type*',\r\n                    field: 'costTypeCode',\r\n                    colId: 'costTypeCode',\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.isGridEditable(params),\r\n                            },\r\n                            gridId: 'costTypesGrid',\r\n                            options: this.masterdata.costTypes\r\n                                .filter((cost) => cost.isATradeCost === true)\r\n                                .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                            valueProperty: 'costTypeCode',\r\n                            displayProperty: 'costTypeCode',\r\n                            lightBoxTitle: 'Results for Cost Type',\r\n                            isRequired: true,\r\n                            showContextualSearchIcon: this.isGridEditable(params),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (this.isTradeEdit) {\r\n                            const filteredCostType = this.masterdata.costTypes.find((e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n                            if (filteredCostType) {\r\n                                params.node.setDataValue('description', filteredCostType.name);\r\n                                params.node.setDataValue('inPL', filteredCostType.inPNL);\r\n                                params.node.setDataValue('noAction', filteredCostType.noAction);\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Description',\r\n                    field: 'description',\r\n                    width: 250,\r\n                },\r\n                {\r\n                    headerName: 'Supplier',\r\n                    field: 'supplierCode',\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.isGridEditable(params),\r\n                            },\r\n                            gridId: 'counterpartiesGrid',\r\n                            options: this.masterdata.counterparties,\r\n                            isRequired: false,\r\n                            displayProperty: 'counterpartyCode',\r\n                            valueProperty: 'counterpartyCode',\r\n                            descriptionProperty: 'description',\r\n                            codeProperty: 'counterpartyCode',\r\n                            lightBoxTitle: 'Results for Counterparty',\r\n                            showContextualSearchIcon: this.isGridEditable(params),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if ((params.data.supplierCode || params.data.supplierCode === '') && this.masterdata.counterparties) {\r\n                            const selectedClientAccount = this.masterdata.counterparties.find(\r\n                                (clientAccount) => clientAccount.counterpartyCode === params.data.supplierCode,\r\n                            );\r\n                            if (selectedClientAccount) {\r\n                                params.node.data.isDirty = true;\r\n                            } else if (params.data.supplierCode === '') {\r\n                                params.node.data.isDirty = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Pay/Rec*',\r\n                    field: 'costDirection',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellRenderer: this.requiredCell,\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellEditorParams: {\r\n                        values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                        displayPropertyName: 'costDirection',\r\n                        valuePropertyName: 'costDirection',\r\n                        displayFormat: 'costDirection',\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Currency*',\r\n                    field: 'currencyCode',\r\n                    colId: 'currencyCode',\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.isGridEditable(params),\r\n                            },\r\n                            options: this.masterdata.currencies,\r\n                            valueProperty: 'currencyCode',\r\n                            codeProperty: 'currencyCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.currencyCode && this.masterdata.currencies) {\r\n                            const currencyCode = this.masterdata.currencies.find(\r\n                                (currency) => currency.currencyCode === params.data.currencyCode,\r\n                            );\r\n                            if (currencyCode) {\r\n                                params.node.setDataValue('currencyCode', params.data.currencyCode);\r\n                                params.node.data.isDirty = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Rate Type*',\r\n                    field: 'rateTypeCode',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellRenderer: this.requiredCell,\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellEditorParams: {\r\n                        values: this.rateTypes.map((rateType) => rateType.code),\r\n                        valuePropertyName: 'code',\r\n                        displayFormat: 'code',\r\n                        context: this.masterdata,\r\n                    },\r\n                    onCellValueChanged: this.onRateTypeChange.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Price Code',\r\n                    field: 'priceCode',\r\n                    colId: 'priceCode',\r\n                    editable: this.isPriceCodeEditable.bind(this),\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellRenderer: this.priceCodeRequired.bind(this),\r\n                    cellEditorParams: {\r\n                        values: this.masterdata.priceUnits.map((priceUnit) => priceUnit.priceCode),\r\n                        displayPropertyName: 'description',\r\n                        valuePropertyName: 'priceCode',\r\n                        displayFormat: 'priceCode | description',\r\n                        context: this.masterdata,\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Rate/Amount',\r\n                    field: 'rate',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellEditor: 'atlasNumeric',\r\n                    type: 'numberColumn',\r\n                    onCellValueChanged: this.onRateAmountChanged.bind(this),\r\n                    cellEditorParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: false,\r\n                    },\r\n                    valueFormatter: this.amountFormatter.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig. Est. ' + this.priceCode,\r\n                    field: 'originalEstimatedPMTValue',\r\n                    type: 'numberColumn',\r\n                    valueFormatter: this.amountFormatter.bind(this),\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'in P&L',\r\n                    field: 'inPL',\r\n                    colId: 'inPL',\r\n                    cellRenderer: 'atlasCheckbox',\r\n                    cellRendererParams: {\r\n                        disabled: this.isInPNLEditableWithPrivileges.bind(this),\r\n                        params: this.gridContext,\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'No Act',\r\n                    field: 'noAction',\r\n                    colId: 'noAction',\r\n                    cellRenderer: 'atlasCheckbox',\r\n                    cellRendererParams: {\r\n                        disabled: this.noACTEditableWithPrivileges.bind(this),\r\n                        params: this.gridContext,\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Narrative',\r\n                    field: 'narrative',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellEditor: 'agLargeTextCellEditor',\r\n                    cellEditorParams: {\r\n                        maxLength: 100,\r\n                        rows: 3,\r\n                        cols: 50,\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Matrix Name',\r\n                    field: 'costMatrixName',\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Rate Type',\r\n                    field: 'originalEstRateTypeCode',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Price Code',\r\n                    field: 'originalEstPriceCode',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Currency',\r\n                    field: 'originalEstCurrencyCode',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Rate/Amount',\r\n                    field: 'originalEstRate',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    type: 'numericColumn',\r\n                    tooltip: this.showCellValue.bind(this),\r\n                    cellEditorParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: false,\r\n                    },\r\n                    valueFormatter: this.amountFormatter.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: '%Invoiced',\r\n                    field: 'invoicePercent',\r\n                    editable: this.isPercentageInvoiceEditable.bind(this),\r\n                    tooltip: this.showInvoiceDetails.bind(this),\r\n                    width: 120,\r\n                    type: 'numericColumn',\r\n                },\r\n                {\r\n                    headerName: '',\r\n                    cellRendererFramework: AgContextualMenuComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                actionContext: this.gridContext,\r\n                            },\r\n                            isDisabled: !this.gridContext.gridEditable,\r\n                            menuActions: this.costsGridContextualMenuActions,\r\n                        };\r\n                    },\r\n                    cellClass: 'ag-contextual-menu',\r\n                    width: 80,\r\n                    maxWidth: 80,\r\n                },\r\n            ];\r\n\r\n        } else {\r\n            this.costsGridCols = [\r\n                {\r\n                    headerName: '',\r\n                    colId: 'rowStatus',\r\n                    field: 'rowStatus',\r\n                    width: 70,\r\n                    minWidth: 70,\r\n                    maxWidth: 70,\r\n                    cellRenderer: (params) => {\r\n                        if (params.value) {\r\n                            return '<mat-chip-list><mat-chip class=\"status-flag-chip\">' + params.value\r\n                                + '</mat-chip></mat-chip-list>';\r\n                        }\r\n                        return '';\r\n                    },\r\n                },\r\n                {\r\n                    colId: 'costId',\r\n                    field: 'costId',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Cost Type*',\r\n                    field: 'costTypeCode',\r\n                    colId: 'costTypeCode',\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.isGridEditable(params),\r\n                            },\r\n                            gridId: 'costTypesGrid',\r\n                            options: this.masterdata.costTypes\r\n                                .filter((cost) => cost.isATradeCost === true)\r\n                                .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                            valueProperty: 'costTypeCode',\r\n                            displayProperty: 'costTypeCode',\r\n                            lightBoxTitle: 'Results for Cost Type',\r\n                            isRequired: true,\r\n                            showContextualSearchIcon: this.isGridEditable(params),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (this.isTradeEdit) {\r\n                            const filteredCostType = this.masterdata.costTypes\r\n                                .find((e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n                            if (filteredCostType) {\r\n                                params.node.setDataValue('description', filteredCostType.name);\r\n                                params.node.setDataValue('inPL', filteredCostType.inPNL);\r\n                                params.node.setDataValue('noAction', filteredCostType.noAction);\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Description',\r\n                    field: 'description',\r\n                    width: 250,\r\n                },\r\n                {\r\n                    headerName: 'Supplier',\r\n                    field: 'supplierCode',\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.isGridEditable(params),\r\n                            },\r\n                            gridId: 'counterpartiesGrid',\r\n                            options: this.masterdata.counterparties,\r\n                            isRequired: false,\r\n                            displayProperty: 'counterpartyCode',\r\n                            valueProperty: 'counterpartyCode',\r\n                            descriptionProperty: 'description',\r\n                            codeProperty: 'counterpartyCode',\r\n                            lightBoxTitle: 'Results for Counterparty',\r\n                            showContextualSearchIcon: this.isGridEditable(params),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if ((params.data.supplierCode || params.data.supplierCode === '') && this.masterdata.counterparties) {\r\n                            const selectedClientAccount = this.masterdata.counterparties.find(\r\n                                (clientAccount) => clientAccount.counterpartyCode === params.data.supplierCode,\r\n                            );\r\n                            if (selectedClientAccount) {\r\n                                params.node.data.isDirty = true;\r\n                            } else if (params.data.supplierCode === '') {\r\n                                params.node.data.isDirty = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Pay/Rec*',\r\n                    field: 'costDirection',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellRenderer: this.requiredCell,\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellEditorParams: {\r\n                        values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                        displayPropertyName: 'costDirection',\r\n                        valuePropertyName: 'costDirection',\r\n                        displayFormat: 'costDirection',\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Currency*',\r\n                    field: 'currencyCode',\r\n                    colId: 'currencyCode',\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.isGridEditable(params),\r\n                            },\r\n                            options: this.masterdata.currencies,\r\n                            valueProperty: 'currencyCode',\r\n                            codeProperty: 'currencyCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.currencyCode && this.masterdata.currencies) {\r\n                            const currencyCode = this.masterdata.currencies.find(\r\n                                (currency) => currency.currencyCode === params.data.currencyCode,\r\n                            );\r\n                            if (currencyCode) {\r\n                                params.node.setDataValue('currencyCode', params.data.currencyCode);\r\n                                params.node.data.isDirty = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Rate Type*',\r\n                    field: 'rateTypeCode',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellRenderer: this.requiredCell,\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellEditorParams: {\r\n                        values: this.rateTypes.map((rateType) => rateType.code),\r\n                        valuePropertyName: 'code',\r\n                        displayFormat: 'code',\r\n                        context: this.masterdata,\r\n                    },\r\n                    onCellValueChanged: this.onRateTypeChange.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Price Code',\r\n                    field: 'priceCode',\r\n                    colId: 'priceCode',\r\n                    editable: this.isPriceCodeEditable.bind(this),\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellRenderer: this.priceCodeRequired.bind(this),\r\n                    cellEditorParams: {\r\n                        values: this.masterdata.priceUnits.map((priceUnit) => priceUnit.priceCode),\r\n                        displayPropertyName: 'description',\r\n                        valuePropertyName: 'priceCode',\r\n                        displayFormat: 'priceCode | description',\r\n                        context: this.masterdata,\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Rate/Amount',\r\n                    field: 'rate',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellEditor: 'atlasNumeric',\r\n                    type: 'numberColumn',\r\n                    onCellValueChanged: this.onRateAmountChanged.bind(this),\r\n                    cellEditorParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: false,\r\n                    },\r\n                    valueFormatter: this.amountFormatter.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig. Est./' + this.weightCode,\r\n                    field: 'originalEstimatedPMTValue',\r\n                    type: 'numberColumn',\r\n                    valueFormatter: this.amountFormatter.bind(this),\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'in P&L',\r\n                    field: 'inPL',\r\n                    colId: 'inPL',\r\n                    cellRenderer: 'atlasCheckbox',\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            disabled: this.isInPNLEditableWithPrivileges(params),\r\n                            params: this.gridContext,\r\n                        };\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'No Act',\r\n                    field: 'noAction',\r\n                    colId: 'noAction',\r\n                    cellRenderer: 'atlasCheckbox',\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            disabled: this.noACTEditableWithPrivileges(params),\r\n                            params: this.gridContext,\r\n                        };\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Narrative',\r\n                    field: 'narrative',\r\n                    editable: this.isGridEditable.bind(this),\r\n                    cellEditor: 'agLargeTextCellEditor',\r\n                    cellEditorParams: {\r\n                        maxLength: 100,\r\n                        rows: 3,\r\n                        cols: 50,\r\n                    },\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Matrix Name',\r\n                    field: 'costMatrixName',\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Rate Type',\r\n                    field: 'originalEstRateTypeCode',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Price Code',\r\n                    field: 'originalEstPriceCode',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Currency',\r\n                    field: 'originalEstCurrencyCode',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: 'Orig.Est.Rate/Amount',\r\n                    field: 'originalEstRate',\r\n                    editable: this.isGridColumnEditableWithPrivileges.bind(this),\r\n                    type: 'numericColumn',\r\n                    tooltip: this.showCellValue.bind(this),\r\n                    cellEditorParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: false,\r\n                    },\r\n                    valueFormatter: this.amountFormatter.bind(this),\r\n                    width: 120,\r\n                },\r\n                {\r\n                    headerName: '%Invoiced',\r\n                    field: 'invoicePercent',\r\n                    editable: this.isPercentageInvoiceEditable.bind(this),\r\n                    tooltip: this.showInvoiceDetails.bind(this),\r\n                    width: 120,\r\n                    type: 'numericColumn',\r\n                },\r\n                {\r\n                    headerName: '',\r\n                    cellRendererFramework: AgContextualMenuComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                actionContext: this.gridContext,\r\n                            },\r\n                            isDisabled: !this.gridContext.gridEditable,\r\n                            menuActions: this.costsGridContextualMenuActions,\r\n                        };\r\n                    },\r\n                    cellClass: 'ag-contextual-menu',\r\n                    width: 80,\r\n                    maxWidth: 80,\r\n                },\r\n            ];\r\n        }\r\n\r\n        if (this.costGridOptions) {\r\n            this.costGridOptions.columnDefs = this.costsGridCols;\r\n        }\r\n    }\r\n\r\n    onClientAccountSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue) {\r\n            const selectedClientAccount = this.masterdata.counterparties.find(\r\n                (clientAccount) => clientAccount.counterpartyCode === params.newValue,\r\n            );\r\n            if (!selectedClientAccount) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Client Account does not exist');\r\n            }\r\n        }\r\n    }\r\n\r\n    onCellClicked(params) {\r\n        if (!this.isTradeEdit) {\r\n            const invoiceCell = 'invoicePercent';\r\n            const costRow = params.data as CostListDisplayView;\r\n            if (params.colDef.field === invoiceCell) {\r\n                if (params.data.costId) {\r\n                    this.showCostInvoiceMarking(costRow.costId);\r\n                } else {\r\n                    this.gridApi.stopEditing();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param && param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 2);\r\n        }\r\n    }\r\n\r\n    onCostTypeChange(params) {\r\n        const filteredCostType = params.colDef.cellEditorParams.context.costTypes.find((e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n        if (filteredCostType) {\r\n            params.node.setDataValue('description', filteredCostType.name);\r\n            params.node.setDataValue('inPL', filteredCostType.inPNL);\r\n            params.node.setDataValue('noAction', filteredCostType.noAction);\r\n        }\r\n    }\r\n\r\n    onRateTypeChange(params) {\r\n        if (params.newValue === RateTypes[RateTypes.Rate]) {\r\n            params.node.setDataValue('priceCode', this.priceCode);\r\n        } else {\r\n            params.node.setDataValue('priceCode', '');\r\n        }\r\n    }\r\n\r\n    isPriceCodeEditable(params): boolean {\r\n        if (this.isGridEditable(params)) {\r\n            if (params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n                return this.gridContext.gridEditable;\r\n            } else {\r\n                params.node.setDataValue('priceCode', '');\r\n                return !this.gridContext.gridEditable;\r\n            }\r\n        }\r\n    }\r\n\r\n    isPercentageInvoiceEditable(params): boolean {\r\n        if (this.isTradeEdit) {\r\n            if (params.data.invoicePercent > 0) {\r\n                return this.gridContext.gridEditable && this.gridContext.percentageInvoiced;\r\n            } else {\r\n                params.node.setDataValue('invoicePercent', params.data.invoicePercent);\r\n                return !this.gridContext.gridEditable;\r\n            }\r\n        }\r\n    }\r\n\r\n    priceCodeRequired(params) {\r\n        if ((!params.value || params.value === '') && params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n            params.node.setDataValue('priceCode', this.requiredCell(this));\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    renderPriceUnit(params) {\r\n        if (!params.value) {\r\n            return '';\r\n        }\r\n\r\n        const priceCode = params.colDef.cellEditorParams.context.priceUnits.filter((e) => e.priceUnitId === params.value)[0].priceCode;\r\n        return priceCode;\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'cost-cell-value-required\\'>Required *</div>';\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    showCellValue(params): string {\r\n        if (params) {\r\n            return params.value;\r\n        }\r\n    }\r\n\r\n    showInvoiceDetails(params): string {\r\n        if (params.data.invoicePercent && params.data.invoicePercent > 0) {\r\n            return (\r\n                'InvoiceReference: ' +\r\n                params.data.documentReference +\r\n                '  Invoice Date: ' +\r\n                this.formatDate.transform(params.data.documentDate) +\r\n                '  %Invoiced: ' +\r\n                params.data.invoicePercent\r\n            );\r\n        }\r\n    }\r\n\r\n    onUseCostMatrixClicked() {\r\n        const getSearchMatricesObservable = this.hasRecommendCMGap\r\n            ? this.tradingService.searchCostMatrixListWithBestMatch(this.getTagParameters())\r\n            : this.tradingService.getCostmatricesByCompanyId(this.company);\r\n\r\n        getSearchMatricesObservable.subscribe(this.getCostMatrices());\r\n    }\r\n\r\n    private getCostMatrices() {\r\n        return (data) => {\r\n            this.costMatrix = data.value;\r\n            if (this.costMatrix) {\r\n                if (this.hasRecommendCMGap) {\r\n                    const costMatrixIdWithBM = this.costMatrix.filter((itemCostMatrix: Costmatrix) => itemCostMatrix.bestMatch > 0);\r\n                    const bestMatchIds = costMatrixIdWithBM.map((tag) => tag.costMatrixId);\r\n                    const tagsToShow = this.getTagParameters();\r\n                    if (bestMatchIds.length > 0) {\r\n                        const tagValues: Observable<any> = this.tradingService.GetBulkCostMatricesListWithTags(bestMatchIds.toString());\r\n\r\n                        tagValues.subscribe(\r\n                            (result) => {\r\n                                this.costMatrix.map((matrix) => {\r\n                                    const value = result.find((tagvalue) => tagvalue.costMatrixId === matrix.costMatrixId);\r\n                                    if (value) {\r\n                                        matrix.tags = value.tags;\r\n                                    }\r\n                                });\r\n\r\n                                this.costMatrix.map((matrix: Costmatrix) => {\r\n                                    if (matrix.tags) {\r\n                                        matrix.tags.map((value) => {\r\n                                            let valuesIncluded: string = '';\r\n                                            for (let i = 0; i < tagsToShow.length; i++) {\r\n                                                if (value.tagValueId.includes(tagsToShow[i].id)) {\r\n                                                    valuesIncluded += tagsToShow[i].id + ',';\r\n                                                }\r\n                                            }\r\n                                            value.tagValueId = valuesIncluded;\r\n                                        });\r\n                                        matrix.tagsFormatted = this.paramsToChip(matrix.tags);\r\n                                    }\r\n                                });\r\n                            },\r\n                            (err) => {\r\n                                console.log(err);\r\n                            },\r\n                            () => {\r\n                                this.openDialogCostmatrices();\r\n                            },\r\n                        );\r\n                    } else {\r\n                        this.openDialogCostmatrices();\r\n                    }\r\n                } else {\r\n                    this.openDialogCostmatrices();\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    private openDialogCostmatrices() {\r\n        const openCostMatrixDialog = this.dialog.open(CostMatrixDialogComponent, {\r\n            data: {\r\n                matrixData: this.costMatrix,\r\n            },\r\n            width: '45%',\r\n        });\r\n        openCostMatrixDialog.afterClosed().subscribe((matrixId) => {\r\n            this.importMatrices(matrixId);\r\n        });\r\n    }\r\n\r\n    paramsToChip(val: Tag[]): string[] {\r\n        let chip: string = '';\r\n        const chips = new Array<string>();\r\n        let typenameActual: string;\r\n\r\n        if (this.tagsList && val && val.length > 0) {\r\n            val.forEach((param) => {\r\n                if (param.typeName !== typenameActual && param.tagValueId !== null && param.tagValueId !== '') {\r\n                    const value = this.tagsList.find((a) => param.typeName === a.typeName);\r\n                    if (value) {\r\n                        const label = value.label;\r\n                        chip = label + '=';\r\n                        chip += this.searchValue(param.typeName, param.tagValueId);\r\n                        typenameActual = param.typeName;\r\n                        chips.push(chip.substring(0, chip.length - 1));\r\n                    }\r\n                } else if (param.tagValueId !== '') {\r\n                    chip += param.tagValueId + ',';\r\n                    chips.push(chip.substring(0, chip.length - 1));\r\n                }\r\n            });\r\n        }\r\n        return chips;\r\n    }\r\n\r\n    searchValue(typename: string, tagValueId: string): string {\r\n        let paramName = '';\r\n        let paramid = '';\r\n        let list: any[];\r\n        if (typename !== '' && typename !== undefined) {\r\n            switch (typename) {\r\n                case 'SectionDto.ContractTermCode':\r\n                    paramName = 'displayName';\r\n                    paramid = 'contractTermId';\r\n                    list = this.masterdata.contractTerms;\r\n                    break;\r\n                case 'TradeDto.Type':\r\n                    paramName = 'enumEntityValue';\r\n                    paramid = 'enumEntityId';\r\n                    list = this.masterdata.contractTypes;\r\n                    break;\r\n                case 'SectionDto.PaymentTermCode':\r\n                    paramName = 'paymentTermCode';\r\n                    paramid = 'paymentTermsId';\r\n                    list = this.masterdata.paymentTerms;\r\n                    break;\r\n                case 'SectionDto.CounterpartyReference':\r\n                    paramName = 'counterpartyCode';\r\n                    paramid = 'counterpartyID';\r\n                    list = this.masterdata.counterparties;\r\n                    break;\r\n                case 'SectionDto.PortDestinationCode':\r\n                case 'SectionDto.PortOriginCode':\r\n                    paramName = 'portCode';\r\n                    paramid = 'portId';\r\n                    list = this.masterdata.ports;\r\n                    break;\r\n            }\r\n            if (paramName !== '' && paramid !== '') {\r\n                tagValueId = this.searchTagByid(tagValueId, list, paramName, paramid);\r\n            }\r\n        }\r\n\r\n        return tagValueId;\r\n    }\r\n\r\n    private searchTagByid(tagValueId: string, list: any[], paramName: string, paramId: string): string {\r\n        const tagsIds = tagValueId.split(',');\r\n        const newTagValueId = new Array();\r\n\r\n        tagsIds.forEach((id) => {\r\n            const match = list.find((val) => val[paramId] === Number(id));\r\n            if (match) {\r\n                newTagValueId.push(match[paramName]);\r\n            }\r\n        });\r\n        return newTagValueId.join();\r\n    }\r\n\r\n    getTagFields() {\r\n        this.tradingService.getTagFields().subscribe((val) => (this.tagsList = val));\r\n    }\r\n\r\n    private getTagParameters() {\r\n        const tagList = new Array<Tag>();\r\n        const mainTab = this.commodityFormGroup.controls.mainTabComponent as FormGroup;\r\n        const cmyGroup = mainTab.controls.commodityGroup as FormGroup;\r\n        const cmyFormGroup = cmyGroup.controls.commodityFormGroup as FormGroup;\r\n        const locationGroup = mainTab.controls.locationFormComponent as FormGroup;\r\n        const contractTermsGroup = mainTab.controls.contractTermsFormGroup as FormGroup;\r\n\r\n        if (cmyFormGroup.controls.commodityPart1.value) {\r\n            const tag = new Tag(cmyFormGroup.controls.commodityPart1.value, 'Commodity.PrincipalCommodity');\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (cmyFormGroup.controls.commodityPart2.value) {\r\n            const tag: Tag = new Tag(cmyFormGroup.controls.commodityPart2.value, 'Commodity.Part2');\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (cmyFormGroup.controls.commodityPart3.value) {\r\n            const tag: Tag = new Tag(cmyFormGroup.controls.commodityPart3.value, 'Commodity.Part3');\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (cmyFormGroup.controls.commodityPart4.value) {\r\n            const tag: Tag = new Tag(cmyFormGroup.controls.commodityPart4.value, 'Commodity.Part4');\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (cmyFormGroup.controls.commodityPart5.value) {\r\n            const tag: Tag = new Tag(cmyFormGroup.controls.commodityPart5.value, 'Commodity.Part5');\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (mainTab.value.termsGroup.contractTermsCtrl) {\r\n            const tag: Tag = new Tag(mainTab.value.termsGroup.contractTermsCtrl.toString(), 'SectionDto.ContractTermCode');\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (mainTab.value.counterpartyGroup.counterpartyReferenceCtrl) {\r\n            const tag: Tag = new Tag(\r\n                mainTab.value.counterpartyGroup.counterpartyReferenceCtrl.toString(),\r\n                'SectionDto.CounterpartyReference',\r\n            );\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (mainTab.value.priceGroup.paymentTermsCtrl.paymentTermsId) {\r\n            const tag: Tag = new Tag(mainTab.value.priceGroup.paymentTermsCtrl.paymentTermsId.toString(), 'SectionDto.PaymentTermCode');\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (locationGroup.controls.portofOriginCtrl.value) {\r\n            const tag: Tag = new Tag(\r\n                locationGroup.controls.portofOriginCtrl.value.portId.toString(),\r\n                'SectionDto.SectionDto.PortOriginCode',\r\n            );\r\n            tagList.push(tag);\r\n        }\r\n\r\n        if (locationGroup.controls.portofDestinationCtrl.value) {\r\n            const tag: Tag = new Tag(\r\n                locationGroup.controls.portofDestinationCtrl.value.portId.toString(),\r\n                'SectionDto.PortDestinationCode',\r\n            );\r\n            tagList.push(tag);\r\n        }\r\n\r\n        return tagList;\r\n    }\r\n\r\n    imageCostMatrixTrade(matrixId: number) {\r\n        this.tradingService.getCostmatricesListByCostmatrixId(matrixId).subscribe((data) => {\r\n            if (data) {\r\n                this.selectCostmatrix = data.name;\r\n                data.costMatrixLines.filter((line) => {\r\n                    data.costMatrixId = line.costMatrixId;\r\n                    this.filteredLines = data.costMatrixLines;\r\n                });\r\n            }\r\n            if (this.filteredLines && this.filteredLines.length > 0) {\r\n                this.addCostMatrixLinesToCostGrid();\r\n            }\r\n        });\r\n    }\r\n\r\n    importMatrices(matrixId: number) {\r\n        this.tradingService.getCostmatricesListByCostmatrixId(matrixId).subscribe((data) => {\r\n            this.selectCostmatrix = data.name;\r\n            this.isBestMatch = null;\r\n            if (!this.importedCostMatrices.includes(data.name)) {\r\n                this.importedCostMatrices = this.importedCostMatrices + data.name + ' , ';\r\n            }\r\n            this.useCostMatrixCtrl.setValue(this.importedCostMatrices.trim().slice(0, -1));\r\n            data.costMatrixLines.filter((line) => {\r\n                data.costMatrixId = line.costMatrixId;\r\n                this.filteredLines = data.costMatrixLines;\r\n            });\r\n            if (this.filteredLines && this.filteredLines.length > 0) {\r\n                if (this.hasRecommendCMGap) {\r\n                    this.tradingService.searchCostMatrixListWithBestMatch(this.getTagParameters()).subscribe((listWithBM) => {\r\n                        this.isBestMatch = listWithBM.value.find((e) => e.costMatrixId === data.costMatrixId).bestMatch > 0 ? 'BM' : null;\r\n                        this.confirmCosts();\r\n                    });\r\n                } else {\r\n                    this.confirmCosts();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setCostMatrixLines(result: boolean) {\r\n        const newGridRows: CostListDisplayView[] = [];\r\n        const costsToBeRemoved: number[] = [];\r\n        let sectionId: number = 0;\r\n        if (result) {\r\n            this.addCostMatrixLinesToCostGrid();\r\n        } else {\r\n            this.gridApi.forEachNode((rowData) => {\r\n                if (rowData.data.invoicePercent === 100) {\r\n                    newGridRows.push(rowData.data);\r\n                } else {\r\n                    costsToBeRemoved.push(rowData.data.costId);\r\n                    sectionId = rowData.data.sectionId;\r\n                }\r\n            });\r\n            if (sectionId && costsToBeRemoved) {\r\n                const deleteConfirmationSubscription = this.tradingService\r\n                    .deleteMultipleCost(costsToBeRemoved, sectionId, this.dataVersionId)\r\n                    .subscribe(() => { });\r\n                this.subscriptions.push(deleteConfirmationSubscription);\r\n            }\r\n            this.costsGridRows = newGridRows;\r\n\r\n            this.addCostMatrixLinesToCostGrid();\r\n        }\r\n    }\r\n\r\n    addCostMatrixLinesToCostGrid() {\r\n        const newGridRows: Cost[] = [];\r\n        this.filteredLines.forEach((rows) => {\r\n            const costRow = new Cost();\r\n            costRow.rowStatus = 'N';\r\n            costRow.bestMatch = this.isBestMatch;\r\n            costRow.costMatrixName = this.selectCostmatrix;\r\n            costRow.costTypeCode = this.getCostTypeCodeFromId(rows.costTypeId, this.masterdata);\r\n            costRow.description = rows.description;\r\n            costRow.supplierCode = this.getSupplierCodeFromId(rows.supplierId, this.masterdata);\r\n            costRow.costDirectionId = rows.payReceive;\r\n            costRow.currencyCode = rows.currencyCode;\r\n            costRow.rateTypeId = rows.rateType;\r\n            costRow.priceUnitId = rows.priceUnitId;\r\n            costRow.rate = rows.rateAmount;\r\n            costRow.inPL = rows.inPL;\r\n            costRow.noAction = rows.noAct;\r\n            costRow.narrative = rows.narrative;\r\n            costRow.costMatrixLineId = rows.costMatrixLineId;\r\n            newGridRows.push(costRow);\r\n        });\r\n        newGridRows.forEach((e) => {\r\n            const displayCostRow = new CostListDisplayView(e, this.masterdata, this.costDirections);\r\n            displayCostRow.isDirty = true;\r\n            this.gridApi.updateRowData({ add: [displayCostRow] });\r\n        });\r\n    }\r\n\r\n    getCostTypeCodeFromId(id: number, masterdata: MasterData): string {\r\n        const costTypeCode = masterdata.costTypes.find((e) => e.costTypeId === id);\r\n        return costTypeCode ? costTypeCode.costTypeCode : null;\r\n    }\r\n\r\n    getSupplierCodeFromId(id, masterdata: MasterData) {\r\n        const counterparty = masterdata.counterparties.find((e) => e.counterpartyID === id);\r\n        return counterparty ? counterparty.counterpartyCode : null;\r\n    }\r\n\r\n    confirmCosts() {\r\n        if (this.gridApi.getDisplayedRowCount() === 0) {\r\n            this.addCostMatrixLinesToCostGrid();\r\n        } else {\r\n            const openConfirmCostsDialog = this.dialog.open(AddCostConfirmationDialogComponent);\r\n            openConfirmCostsDialog.afterClosed().subscribe((result) => {\r\n                this.setCostMatrixLines(result);\r\n            });\r\n        }\r\n    }\r\n\r\n    checkGridEditPrivilege() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (\r\n                this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') &&\r\n                this.authorizationService.isPrivilegeAllowed(this.company, 'CostTab')\r\n            ) {\r\n                this.editingCostGridPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'EditingCostGrid');\r\n            }\r\n        });\r\n    }\r\n\r\n    onTabSelected() {\r\n        if (this.costGridOptions) {\r\n            this.gridService.sizeColumns(this.costGridOptions);\r\n        }\r\n    }\r\n\r\n    navigateToCostTransferPage() {\r\n        this.router.navigate(['/' + this.company + '/trades/transferCosts/' + encodeURIComponent(String(this.sectionId))]);\r\n    }\r\n\r\n    onRateAmountChanged(params) {\r\n        if (params && params.data) {\r\n            if (params.data.invoicePercent) {\r\n                if (params.newValue) {\r\n                    const invoicePercent = (params.data.invoicePercent * params.oldValue) / params.newValue;\r\n                    if (invoicePercent > 100) {\r\n                        params.data.invoicePercent = 100;\r\n                    } else {\r\n                        params.data.invoicePercent = invoicePercent;\r\n                    }\r\n                } else {\r\n                    params.data.rate = params.oldValue;\r\n                }\r\n            }\r\n        }\r\n        if (this.gridApi) {\r\n            this.gridApi.refreshCells(params.data);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card mat-card-height\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Adjust Weight</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"40%\\\"\\r\\n                 [class.displayMode]=\\\"!quantityCtrl.enabled\\\">\\r\\n                <mat-form-field id=\\\"quantityToolTip\\\"\\r\\n                                title=\\\"\\\">\\r\\n                    <input matInput\\r\\n                           [textMask]=\\\"{mask:mask}\\\"\\r\\n                           placeholder=\\\"Quantity\\\"\\r\\n                           [matTooltip]=\\\"'Quantity'\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [attr.disabled]=\\\"isWashoutInvoiceGenerated\\\"\\r\\n                           [formControl]=\\\"quantityCtrl\\\"\\r\\n                           (blur)=\\\"ifCheckQuantityChange()\\\">\\r\\n                    <mat-hint style=\\\"color:orangered\\\"\\r\\n                              *ngIf=\\\"quantityCtrl.value === 0\\\">Quantity is 0</mat-hint>\\r\\n                    <mat-error *ngIf=\\\"quantityCtrl.hasError('isPositiveError')\\\">\\r\\n                        Value must be positive\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"quantityCtrl.hasError('maximumValue')\\\">\\r\\n                        Invoice generated can only be decreased\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"60%\\\"\\r\\n                 [class.displayMode]=\\\"!quantityCodeCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Quantity Code\\\"\\r\\n                           [matTooltip]=\\\"'Quantity Code'\\\"\\r\\n                           [attr.disabled]=\\\"isWashoutInvoiceGenerated\\\"\\r\\n                           [matAutocomplete]=\\\"weightUnits\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"quantityCodeCtrl\\\">\\r\\n                    <mat-autocomplete #weightUnits =\\\"matAutocomplete\\\"\\r\\n                                      [displayWith]=\\\"displayWeightUnit.bind(this)\\\">\\r\\n                        <mat-option *ngFor=\\\"let weightUnit of filteredWeightUnits \\\"\\r\\n                                    [value]=\\\"weightUnit.weightUnitId\\\">{{weightUnit.weightCode}} |\\r\\n                            {{weightUnit.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".mat-card-height {\\n  min-height: 110px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { isPositive } from '../../../../../shared/directives/number-validators.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { InvoiceTypes } from '../../../../../shared/enums/invoice-type.enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { maximumValue } from './quantity-form-control-validator.validator';\r\n\r\n@Component({\r\n    selector: 'atlas-adjust-weight-form-component',\r\n    templateUrl: './adjust-weight-form-component.component.html',\r\n    styleUrls: ['./adjust-weight-form-component.component.scss'],\r\n})\r\nexport class AdjustWeightFormComponent extends BaseFormComponent implements OnInit {\r\n    isInputField = false;\r\n    @Output() readonly checkQuantityChange = new EventEmitter<any>();\r\n    isEdit = false;\r\n    modelQuantity: string;\r\n    isWashoutInvoiceGenerated: boolean = false;\r\n    company: string;\r\n    quantityForTrafficTabPrivilege: boolean = false;\r\n    quantityCodeForTrafficTabPrivilege: boolean = false;\r\n    isImage = false;\r\n    quantityCtrl = new AtlasFormControl('Quantity');\r\n    quantityCodeCtrl = new AtlasFormControl('QuantityCode');\r\n\r\n    filteredWeightUnits: WeightUnit[];\r\n\r\n    mask = CustomNumberMask(12, 10, false);\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.WeightUnits,\r\n    ];\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected tradingService: TradingService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected route: ActivatedRoute,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService.getMasterData(this.masterdataList).subscribe((data) => {\r\n            this.masterdata = data;\r\n            if (this.route.snapshot.data['isImage'] === true) {\r\n                this.isImage = true;\r\n            }\r\n            this.filteredWeightUnits = this.masterdata.weightUnits;\r\n            this.quantityCodeCtrl.valueChanges.subscribe((input) => {\r\n                this.filteredWeightUnits =\r\n                    this.utilService.filterListforAutocomplete(input,\r\n                        this.masterdata.weightUnits,\r\n                        ['weightCode', 'description']);\r\n            });\r\n\r\n            this.setValidators();\r\n        });\r\n        this.checkAdjustWeightFormPrivileges();\r\n    }\r\n\r\n    updateQuantityValue(value: number): void {\r\n        this.quantityCtrl.patchValue(value);\r\n        if (this.quantityCtrl.valid && this.isEdit && this.modelQuantity) {\r\n            let quantity: string = this.quantityCtrl.value;\r\n            quantity = quantity.toString().replace(',', '');\r\n        }\r\n    }\r\n\r\n    ifCheckQuantityChange() {\r\n\r\n        if (this.quantityCtrl.valid && this.isEdit && this.modelQuantity) {\r\n            let quantity: string = this.quantityCtrl.value;\r\n            quantity = quantity.toString().replace(',', '');\r\n            this.checkQuantityChange.emit({ newValue: Number(quantity), oldValue: Number(this.modelQuantity) });\r\n        }\r\n    }\r\n\r\n    setValidators(maxQuantity: number = 0, condition: string = 'base') {\r\n        switch (condition) {\r\n            case 'base':\r\n                this.quantityCtrl.setValidators(Validators.compose([isPositive()]));\r\n                break;\r\n            case 'max':\r\n                this.quantityCtrl.setValidators(\r\n                    Validators.compose([isPositive(), maximumValue(maxQuantity)]));\r\n                break;\r\n        }\r\n        this.quantityCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            quantityCtrl: this.quantityCtrl,\r\n            quantityCodeCtrl: this.quantityCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    displayWeightUnit(weightUnitId: number): string {\r\n        if (weightUnitId) {\r\n            const selectedUnit = this.masterdata.weightUnits.find(\r\n                (weightUnit) => weightUnit.weightUnitId === weightUnitId,\r\n            );\r\n\r\n            if (selectedUnit) {\r\n                return selectedUnit.weightCode;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.isWashoutInvoiceGenerated = false;\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.applyQuantityValidator(tradeRecord);\r\n        if (tradeRecord.quantity) {\r\n            this.formGroup.patchValue({ quantityCtrl: isEdit ? tradeRecord.quantity : tradeRecord.quantity.toFixed(3) });\r\n        }\r\n        this.formGroup.patchValue({ quantityCodeCtrl: tradeRecord.weightUnitId });\r\n\r\n        this.modelQuantity = tradeRecord.quantity.toString();\r\n        this.isEdit = isEdit;\r\n\r\n        if (!isEdit) {\r\n            this.formGroup.disable({ emitEvent: false });\r\n        }\r\n\r\n        if (isEdit && !this.isImage && entity &&\r\n            entity.allocatedTo &&\r\n            entity.invoiceReference &&\r\n            entity.invoiceTypeId === InvoiceTypes.Washout &&\r\n            entity.invoicingStatusId === InvoicingStatus.Finalized &&\r\n            entity.allocatedTo.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            this.isWashoutInvoiceGenerated = true;\r\n        }\r\n\r\n        return entity;\r\n    }\r\n\r\n    isSaleOrPurchase(type: string): boolean {\r\n        if ((type === ContractTypes[ContractTypes.Purchase]\r\n            || type === ContractTypes[ContractTypes.Sale])) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTradeFinalInvoiceRequiredOrFinalized(tradeRecord: SectionCompleteDisplayView): boolean {\r\n        if (tradeRecord.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired\r\n            || tradeRecord.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isAllocatedTradeFinalInvoiceRequiredOrFinalized(tradeRecord: SectionCompleteDisplayView): boolean {\r\n        if (tradeRecord.allocatedToInvoicingStatusId === InvoicingStatus.FinalInvoiceRequired\r\n            || tradeRecord.allocatedToInvoicingStatusId === InvoicingStatus.Finalized) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTradeUninvoice(tradeRecord: SectionCompleteDisplayView): boolean {\r\n        if (tradeRecord.invoicingStatusId === InvoicingStatus.Uninvoiced\r\n            || tradeRecord.invoicingStatusId === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isAllocatedTradeUninvoice(tradeRecord: SectionCompleteDisplayView): boolean {\r\n        if (tradeRecord.allocatedToInvoicingStatusId === InvoicingStatus.Uninvoiced\r\n            || tradeRecord.allocatedToInvoicingStatusId === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    applyQuantityValidator(tradeRecord: SectionCompleteDisplayView) {\r\n        if (this.isSaleOrPurchase(tradeRecord.type) && !this.isImage) {\r\n            if (!(tradeRecord.allocatedTo)) {\r\n                if (this.isTradeUninvoice(tradeRecord)) {\r\n                    this.setValidators();\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(tradeRecord)) {\r\n                    // Invoiced, Not Allocated => Purchase Contract\r\n                    this.setValidators(tradeRecord.quantity, 'max');\r\n                }\r\n            } else {\r\n                if (this.isTradeUninvoice(tradeRecord)\r\n                    // Not Invoiced and Allocated to Uninvoice Sale Contract\r\n                    && this.isAllocatedTradeUninvoice(tradeRecord)) {\r\n                    this.setValidators();\r\n                } else if (this.isTradeUninvoice(tradeRecord)\r\n                    // No final invoice and allocted to invoiced sale contract\r\n                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(tradeRecord)) {\r\n                    this.setValidators(tradeRecord.quantity, 'max');\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(tradeRecord)\r\n                    // Final invoice and allocted to un-invoiced sale contract\r\n                    && this.isAllocatedTradeUninvoice(tradeRecord)) {\r\n                    this.setValidators(tradeRecord.quantity, 'max');\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(tradeRecord)\r\n                    // Final invoice and allocted to un-invoiced sale contract\r\n                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(tradeRecord)) {\r\n                    this.setValidators(tradeRecord.quantity, 'max');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkAdjustWeightFormPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') && this.authorizationService.isPrivilegeAllowed(this.company, 'TrafficTab')) {\r\n                this.quantityForTrafficTabPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'QuantityForTraffic');\r\n                this.quantityCodeForTrafficTabPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'QuantityCodeForTraffic');\r\n            }\r\n        });\r\n        if (!this.quantityForTrafficTabPrivilege) {\r\n            this.quantityCtrl.disable();\r\n        }\r\n        if (!this.quantityCodeForTrafficTabPrivilege) {\r\n            this.quantityCodeCtrl.disable();\r\n        }\r\n    }\r\n}\r\n","import { ValidatorFn } from '@angular/forms';\r\nimport { AbstractControl } from \"@angular/forms/src/model\";\r\n\r\n\r\n\r\nexport function maximumValue(maxvalue: number): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n        const minValue = Number(String(control.value).replace(/,/gi, ''));\r\n        if (minValue > maxvalue) {\r\n            return { maximumValue: true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card allocation-form\\\"\\r\\n          *ngIf=\\\"showAllocation\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Allocation: {{allocatedSectionCode}}</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\"\\r\\n             [ngClass]=\\\"{'allocation-toggle-ctrl': isAdjustAllocationEnabled==true}\\\">\\r\\n            <mat-slide-toggle [formControl]=\\\"adjustAllocationToggleCtrl\\\"\\r\\n                              (change)=\\\"toggleAllocation()\\\">Adjust Allocation</mat-slide-toggle>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-slide-toggle [formControl]=\\\"leaveStatusToggleCtrl\\\"\\r\\n                              (change)=\\\"toggleLeaveStatus()\\\">Leave Status as-is</mat-slide-toggle>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-slide-toggle [formControl]=\\\"unallocationToggleCtrl\\\"\\r\\n                              (change)=\\\"toggleUnallocated()\\\">Create Unallocated Residual Split</mat-slide-toggle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".allocation-toggle-ctrl::ng-deep .mat-disabled .mat-slide-toggle-thumb {\\n  background-color: #53c234 !important; }\\n\\n.allocation-toggle-ctrl::ng-deep .mat-disabled .mat-slide-toggle-bar {\\n  background-color: rgba(83, 194, 52, 0.5) !important; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { Allocation } from '../../../../../shared/entities/allocation.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { SectionReference } from '../../../../../shared/entities/section-reference.entity';\r\nimport { Section } from '../../../../../shared/entities/section.entity';\r\nimport { AllocateTradeOption } from '../../../../../shared/enums/allocate-trade-option-enum';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../../trading/entities/physical-fixed-priced-contract.entity';\r\nimport { TradeDataService } from '../../../../services/trade-data.service';\r\n@Component({\r\n    selector: 'atlas-allocation-form-component',\r\n    templateUrl: './allocation-form-component.component.html',\r\n    styleUrls: ['./allocation-form-component.component.scss'],\r\n})\r\nexport class AllocationFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly checkLeaveStatusChange = new EventEmitter<any>();\r\n\r\n    adjustAllocationToggleCtrl = new AtlasFormControl('adjustAllocationToggleCtrl');\r\n    leaveStatusToggleCtrl = new AtlasFormControl('leaveStatusToggleCtrl');\r\n    unallocationToggleCtrl = new AtlasFormControl('unallocationToggleCtrl');\r\n    allocatedSectionCode: string;\r\n    showAllocation: boolean;\r\n    sectionId: number;\r\n    allocatedSection: SectionReference;\r\n    sectionModel: Section;\r\n    isAdjustAllocationEnabled: boolean = false;\r\n    dataVersionId: number;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService, protected formBuilder: FormBuilder,\r\n        private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        private tradeDataService: TradeDataService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.subscriptions.push(this.tradeDataService.getAllocationDetails()\r\n            .subscribe((data: Allocation) => {\r\n                this.showAllocation = data ? true : false;\r\n                this.allocatedSectionCode = data ? data.allocatedSectionCode : '';\r\n            }));\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.sectionModel = entity as Section;\r\n        // if (!isEdit) {\r\n        this.adjustAllocationToggleCtrl.disable();\r\n        this.leaveStatusToggleCtrl.disable();\r\n        this.unallocationToggleCtrl.disable();\r\n        // }\r\n        this.allocatedSection = entity.allocatedTo;\r\n        return entity;\r\n    }\r\n\r\n    toggleAllocation() {\r\n        if (this.adjustAllocationToggleCtrl.value) {\r\n            this.leaveStatusToggleCtrl.setValue(false);\r\n            this.unallocationToggleCtrl.setValue(false);\r\n        }\r\n        this.toggleLeaveStatus();\r\n    }\r\n\r\n    resetLeaveStatus(isChecked: boolean) {\r\n        this.leaveStatusToggleCtrl.setValue(isChecked);\r\n        if (isChecked) {\r\n            this.adjustAllocationToggleCtrl.setValue(false);\r\n            this.unallocationToggleCtrl.setValue(false);\r\n        }\r\n    }\r\n\r\n    toggleLeaveStatus() {\r\n        if (this.leaveStatusToggleCtrl.value) {\r\n            this.adjustAllocationToggleCtrl.setValue(false);\r\n            this.unallocationToggleCtrl.setValue(false);\r\n        }\r\n        this.checkLeaveStatusChange.emit(this.leaveStatusToggleCtrl.value);\r\n    }\r\n\r\n    toggleUnallocated() {\r\n        if (this.unallocationToggleCtrl.value) {\r\n            this.adjustAllocationToggleCtrl.setValue(false);\r\n            this.leaveStatusToggleCtrl.setValue(false);\r\n        }\r\n        this.toggleLeaveStatus();\r\n    }\r\n\r\n    getFormGroup() {\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    resetControl() {\r\n        this.adjustAllocationToggleCtrl.setValue(false);\r\n        this.unallocationToggleCtrl.setValue(false);\r\n        this.leaveStatusToggleCtrl.setValue(false);\r\n        this.leaveStatusToggleCtrl.enable();\r\n        this.unallocationToggleCtrl.enable();\r\n        this.adjustAllocationToggleCtrl.enable();\r\n    }\r\n\r\n    resetControlonGreaterValue() {\r\n        this.isAdjustAllocationEnabled = false;\r\n        this.adjustAllocationToggleCtrl.setValue(false);\r\n        this.leaveStatusToggleCtrl.setValue(false);\r\n        this.unallocationToggleCtrl.setValue(false);\r\n        this.adjustAllocationToggleCtrl.disable();\r\n        this.leaveStatusToggleCtrl.disable();\r\n        this.unallocationToggleCtrl.disable();\r\n\r\n        if (this.sectionModel.allocatedTo) {\r\n            if (this.isSaleOrPurchase(this.sectionModel.contractType)) {\r\n                if (this.isTradeUninvoice(this.sectionModel)\r\n                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {\r\n                    this.isAdjustAllocationEnabled = true;\r\n                    this.adjustAllocationToggleCtrl.setValue(true);\r\n                    this.adjustAllocationToggleCtrl.disable();\r\n                    this.leaveStatusToggleCtrl.disable();\r\n                    this.unallocationToggleCtrl.disable();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetControlonLowerValue() {\r\n        this.isAdjustAllocationEnabled = false;\r\n        this.adjustAllocationToggleCtrl.setValue(false);\r\n        this.leaveStatusToggleCtrl.setValue(false);\r\n        this.unallocationToggleCtrl.setValue(false);\r\n        this.adjustAllocationToggleCtrl.disable();\r\n        this.leaveStatusToggleCtrl.disable();\r\n        this.unallocationToggleCtrl.disable();\r\n\r\n        if (this.sectionModel.allocatedTo) {\r\n            if (this.isSaleOrPurchase(this.sectionModel.contractType)) {\r\n                if (this.isTradeUninvoice(this.sectionModel)\r\n                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {\r\n                    this.adjustAllocationToggleCtrl.enable();\r\n                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();\r\n                    this.dataVersionId ? this.unallocationToggleCtrl.disable() : this.unallocationToggleCtrl.enable();\r\n                    this.adjustAllocationToggleCtrl.setValue(true);\r\n                } else if (this.isTradeUninvoice(this.sectionModel)\r\n                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)) {\r\n                    this.leaveStatusToggleCtrl.setValue(true);\r\n                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)\r\n                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {\r\n                    this.leaveStatusToggleCtrl.setValue(true);\r\n                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)\r\n                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)) {\r\n                    this.leaveStatusToggleCtrl.setValue(true);\r\n                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isSaleOrPurchase(type: ContractTypes): boolean {\r\n        if ((type === ContractTypes.Purchase\r\n            || type === ContractTypes.Sale)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTradeFinalInvoiceRequiredOrFinalized(tradeRecord: Section): boolean {\r\n        if (tradeRecord.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired\r\n            || tradeRecord.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTradeUninvoice(tradeRecord: Section): boolean {\r\n        if (tradeRecord.invoicingStatusId === InvoicingStatus.Uninvoiced\r\n            || tradeRecord.invoicingStatusId === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isAllocatedTradeFinalInvoiceRequiredOrFinalized(tradeRecord: Section): boolean {\r\n        if (tradeRecord.allocatedTo.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired\r\n            || tradeRecord.allocatedTo.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isAllocatedTradeUninvoice(tradeRecord: Section): boolean {\r\n        if (tradeRecord.allocatedTo.invoicingStatusId === InvoicingStatus.Uninvoiced\r\n            || tradeRecord.allocatedTo.invoicingStatusId === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n        section.allocatedTo = this.allocatedSection;\r\n        section.allocateTradeOptionId = AllocateTradeOption.NoAction;\r\n        if (this.adjustAllocationToggleCtrl.value) {\r\n            section.allocateTradeOptionId = AllocateTradeOption.AdjustAllocation;\r\n        } else if (this.leaveStatusToggleCtrl.value) {\r\n            section.allocateTradeOptionId = AllocateTradeOption.LeaveStatus;\r\n        } else if (this.unallocationToggleCtrl.value) {\r\n            section.allocateTradeOptionId = AllocateTradeOption.CreateUnallocatedResidualSplit;\r\n        }\r\n        return section;\r\n    }\r\n\r\n    allocationSelectionChecked(): boolean {\r\n        if (this.showAllocation) {\r\n            if ((this.adjustAllocationToggleCtrl.value) || (this.leaveStatusToggleCtrl.value) || (this.unallocationToggleCtrl.value)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card\\\"\\r\\n          *ngIf=\\\"!hasEmptyState\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            Allocation\\r\\n        </mat-card-title>\\r\\n        <mat-card-subtitle>\\r\\n            Trade Allocated on {{dateOfAllocation}}\\r\\n        </mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"10%\\\">\\r\\n            <div fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!groupingNumberCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Grouping Number\\\"\\r\\n                           [formControl]=\\\"groupingNumberCtrl\\\"\\r\\n                           readonly\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           type=\\\"number\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n        <mat-card-subtitle>\\r\\n            Allocated to\\r\\n        </mat-card-subtitle>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       class=\\\"trade-allocation-card\\\"\\r\\n                       placeholder=\\\"Contract Number\\\"\\r\\n                       [formControl]=\\\"contractNumberCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (click)=\\\"onContractReferenceClicked()\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <div fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!counterpartyReferenceCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Counterparty Reference\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"counterpartyReferenceCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!contractTermsCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Contract Terms\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"contractTermsCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<atlas-empty-state *ngIf=\\\"hasEmptyState\\\"\\r\\n                   title=\\\"No Allocation\\\"\\r\\n                   [message]=\\\"allocationEmptyMessage\\\"></atlas-empty-state>\"","module.exports = \"h4 {\\n  margin: 0; }\\n\\n.trade-allocation-card {\\n  color: #0000EE;\\n  text-decoration: underline;\\n  cursor: pointer; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { Allocation } from '../../../../../shared/entities/allocation.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { TradeDataService } from '../../../../services/trade-data.service';\r\nimport { SnackbarService } from './../../../../../shared/services/snackbar.service';\r\nimport { SectionReference } from './../../../../entities/section-reference';\r\nimport { TradeActionsService } from './../../../../services/trade-actions.service';\r\n\r\n@Component({\r\n    selector: 'atlas-allocation-info-form-component',\r\n    templateUrl: './allocation-info-form-component.component.html',\r\n    styleUrls: ['./allocation-info-form-component.component.scss'],\r\n})\r\nexport class AllocationInfoFormComponentComponent extends BaseFormComponent implements OnInit {\r\n\r\n    allocatedDateCtrl = new AtlasFormControl('AllocationDate');\r\n    groupingNumberCtrl = new AtlasFormControl('GroupingNumber');\r\n    contractNumberCtrl = new AtlasFormControl('ContractNumber');\r\n    counterpartyReferenceCtrl = new AtlasFormControl('CounterpartyReference');\r\n    contractTermsCtrl = new AtlasFormControl('ContractTerms');\r\n\r\n    company: string;\r\n    sectionId: number;\r\n    dataVersionId: number;\r\n    dateOfAllocation: string;\r\n    allocationModel: Allocation = new Allocation();\r\n    tradeRecord: SectionCompleteDisplayView;\r\n    hasEmptyState: boolean = true;\r\n    allocationEmptyMessage: string = 'This trade has not been allocated yet';\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private executionService: ExecutionService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private companyManager: CompanyManagerService,\r\n        private formatDate: FormatDatePipe,\r\n        private tradeActionsService: TradeActionsService,\r\n        private snackbarService: SnackbarService,\r\n        private tradeDataService: TradeDataService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            groupingNumberCtrl: this.groupingNumberCtrl,\r\n            contractNumberCtrl: this.contractNumberCtrl,\r\n            counterpartyReferenceCtrl: this.counterpartyReferenceCtrl,\r\n            contractTermsCtrl: this.contractTermsCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any) {\r\n        if (this.sectionId !== 0) {\r\n            this.subscriptions.push(this.tradeDataService.getAllocationDetails()\r\n                .subscribe((data: Allocation) => {\r\n                    if (data) {\r\n                        this.allocationModel = data;\r\n                        this.assignValueToControl(entity);\r\n                        this.hasEmptyState = false;\r\n                    }\r\n                    this.disableControl();\r\n                }));\r\n        }\r\n    }\r\n    assignValueToControl(entity: any) {\r\n        this.tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.dateOfAllocation = this.formatDate.transform\r\n            (this.allocationModel.dateOfAllocation === null ? null : this.allocationModel.dateOfAllocation);\r\n        this.formGroup.patchValue({\r\n            groupingNumberCtrl: this.allocationModel.groupNumber === null ? '' : this.allocationModel.groupNumber,\r\n            contractNumberCtrl: this.allocationModel.allocatedSectionCode === null ? '' : this.allocationModel.allocatedSectionCode,\r\n            contractTermsCtrl: this.allocationModel.contractTermCode === null ? '' : this.allocationModel.contractTermCode,\r\n        });\r\n        if (this.tradeRecord.type === ContractTypes[ContractTypes.Sale]) {\r\n            this.formGroup.patchValue({ counterpartyReferenceCtrl: this.allocationModel.sellerCode });\r\n        } else {\r\n            this.formGroup.patchValue({ counterpartyReferenceCtrl: this.allocationModel.buyerCode });\r\n        }\r\n    }\r\n    disableControl() {\r\n        this.groupingNumberCtrl.disable();\r\n        this.counterpartyReferenceCtrl.disable();\r\n        this.contractTermsCtrl.disable();\r\n    }\r\n    onContractReferenceClicked() {\r\n        const sectionId = this.allocationModel.allocatedSectionId;\r\n        if (!sectionId) {\r\n            this.snackbarService.throwErrorSnackBar('Cannot navigate to the allocation contract');\r\n            return;\r\n        }\r\n        if (this.dataVersionId) {\r\n            this.tradeActionsService.displaySectionInSnapshotSubject.next(new SectionReference(sectionId, this.dataVersionId));\r\n        } else {\r\n            this.tradeActionsService.displaySectionSubject.next(sectionId);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card ammendment-auditform-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            Trade Creation & Amendment\\r\\n        </mat-card-title>\\r\\n        <mat-card-subtitle>\\r\\n            Trade created on {{createdDateFormat}} at {{createdTimeFormat}} by {{createdBy}}\\r\\n        </mat-card-subtitle>\\r\\n        <mat-card-subtitle *ngIf=\\\"amendmentDate\\\">Trade amended on {{amendmentDateFormat}} at {{amendmentTimeFormat}} by\\r\\n            {{amendedBy}}</mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { PhysicalFixedPricedContract } from '../../../../../../app/trading/entities/physical-fixed-priced-contract.entity';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\n\r\n@Component({\r\n    selector: 'atlas-amendment-audit-form-component',\r\n    templateUrl: './amendment-audit-form-component.component.html',\r\n    styleUrls: ['./amendment-audit-form-component.component.scss'],\r\n})\r\nexport class AmendmentAuditFormComponentComponent extends BaseFormComponent implements OnInit {\r\n\r\n    amendmentDate: Date;\r\n    createdDateFormat: string;\r\n    amendedBy: string;\r\n    amendmentDateFormat: string;\r\n    amendedByUserId: number;\r\n    createdDate: Date;\r\n    createdBy: string;\r\n    createdByUserId: number;\r\n    createdTimeFormat: string;\r\n    amendmentTimeFormat: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService, private formatDate: FormatDatePipe, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n    initForm(entity: any) {\r\n        const model = entity as PhysicalFixedPricedContract;\r\n        if (model) {\r\n            this.createdDate = model.creationDate;\r\n            this.createdDateFormat = this.formatDate.transform\r\n                (this.createdDate === null ? null : this.createdDate);\r\n            this.createdTimeFormat = this.formatDate.transformTimeWithoutSeconds\r\n                (this.createdDate === null ? null : this.createdDate);\r\n            this.createdBy = model.createdBy;\r\n            this.createdByUserId = model.createdByUserId;\r\n            this.amendmentDate = model.lastModifiedDate;\r\n            this.amendmentDateFormat = this.formatDate.transform\r\n                (this.amendmentDate === null ? null : this.amendmentDate);\r\n            this.amendmentTimeFormat = this.formatDate.transformTimeWithoutSeconds\r\n                (this.amendmentDate === null ? null : this.amendmentDate);\r\n            this.amendedBy = model.lastModifiedBy;\r\n            this.amendedByUserId = model.modifiedByUserId;\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"!hasEmptyState\\\"\\r\\n          class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            BL Information\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"33%\\\"\\r\\n                 [class.displayMode]=\\\"!blDateCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <div matTooltip=\\\"BL Date cannot be added to an unallocated sale\\\"\\r\\n                         [matTooltipDisabled]=\\\"isDisabled\\\">\\r\\n                        <input matInput\\r\\n                               [matDatepicker]=\\\"bldatepicker\\\"\\r\\n                               placeholder=\\\"Bl Date\\\"\\r\\n                               [formControl]='blDateCtrl'\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               (dateChange)=\\\"onBlDateChanged()\\\">\\r\\n                    </div>\\r\\n                    <mat-hint class=\\\"bl-date-error\\\"\\r\\n                              *ngIf=\\\"isFormEdit && isBLDateBeforeContractDate()\\\">BL date is before the contract date\\r\\n                    </mat-hint>\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"bldatepicker\\\">\\r\\n                    </mat-datepicker-toggle>\\r\\n                    <mat-datepicker #bldatepicker></mat-datepicker>\\r\\n                    <mat-error *ngIf=\\\"blDateCtrl.hasError('isDateAfterValid')\\\">\\r\\n                        The BL date cannot be in the future\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"33%\\\"\\r\\n                 [class.displayMode]=\\\"!blReferenceCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Bl Reference\\\"\\r\\n                           [formControl]=\\\"blReferenceCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [matTooltip]=\\\"'Bl Reference'\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"33%\\\"\\r\\n                 [class.displayMode]=\\\"!groupingNumberCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Grouping Number\\\"\\r\\n                           [formControl]=\\\"groupingNumberCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           readonly\\r\\n                           type=\\\"number\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\\r\\n<atlas-empty-state *ngIf=\\\"hasEmptyState\\\"\\r\\n                   title=\\\"No BL Date\\\"\\r\\n                   [message]=\\\"blDateEmptyMessage\\\"\\r\\n                   fxFlex=\\\"100\\\"></atlas-empty-state>\\r\\n\"","module.exports = \".bl-date-error {\\n  color: orangered; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { Allocation } from '../../../../../shared/entities/allocation.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { SectionTraffic } from '../../../../../shared/entities/section-traffic.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { isAfterDate, isDateTwoBeforeDateOne } from '../../../../../shared/validators/date-validators.validator';\r\nimport { TradeDataService } from '../../../../services/trade-data.service';\r\nimport { PermissionLevels } from './../../../../../shared/enums/permission-level.enum';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-bl-info-form-component',\r\n    templateUrl: './bl-info-form-component.component.html',\r\n    styleUrls: ['./bl-info-form-component.component.scss'],\r\n})\r\nexport class BlInfoFormComponent extends BaseFormComponent implements OnInit {\r\n    blDateCtrl = new AtlasFormControl('BlDate');\r\n    blReferenceCtrl = new AtlasFormControl('BlReference');\r\n    groupingNumberCtrl = new AtlasFormControl('GroupingNumber');\r\n    company: string;\r\n    allocationModel: Allocation = new Allocation();\r\n    sectionId: number;\r\n    isDisabled = true;\r\n    sectionTrafficModel: SectionTraffic = new SectionTraffic();\r\n    tradeRecord: SectionCompleteDisplayView;\r\n    contractDate: Date;\r\n    isTradeImage = false;\r\n    dataVersionId: number;\r\n    blDatePrivilege: boolean = false;\r\n    blReferencePrivilege: boolean = false;\r\n    groupingNumberPrivilege: boolean = false;\r\n    hasEmptyState: boolean = true;\r\n    isEmpty: boolean = true;\r\n    blDateEmptyMessage: string = 'You can edit the trade to add one';\r\n    isFormEdit: boolean = false;\r\n    @Output() readonly blDateChanged = new EventEmitter<any>();\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private executionService: ExecutionService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n        private tradeDataService: TradeDataService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    contractDateSelected(contractDate: Date) {\r\n        this.contractDate = contractDate;\r\n\r\n        this.resetBlDateValidation();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n\r\n        this.formGroup = this.formBuilder.group({\r\n            blDateCtrl: this.blDateCtrl,\r\n            blReferenceCtrl: this.blReferenceCtrl,\r\n        });\r\n        this.setValidators();\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isTradeImage = true;\r\n        }\r\n        this.checkblInfoFormPrivileges();\r\n    }\r\n\r\n    resetBlDateValidation() {\r\n        this.blDateCtrl.clearValidators();\r\n        this.blDateCtrl.setValidators(\r\n            Validators.compose([isAfterDate(this.companyManager.getCurrentCompanyDate())]));\r\n        this.blDateCtrl.updateValueAndValidity();\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    setValidators() {\r\n        this.blReferenceCtrl.setValidators(Validators.compose([Validators.maxLength(255)]));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            blDateCtrl: this.blDateCtrl,\r\n            blReferenceCtrl: this.blReferenceCtrl,\r\n            groupingNumberCtrl: this.groupingNumberCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.tradeRecord = new SectionCompleteDisplayView(entity);\r\n        if (this.sectionId !== 0) {\r\n            this.subscriptions.push(this.tradeDataService.getTrafficDetails()\r\n                .subscribe((data: SectionTraffic) => {\r\n                    if (data) {\r\n                        this.sectionTrafficModel = data;\r\n                        this.formGroup.patchValue({ blDateCtrl: this.sectionTrafficModel.blDate });\r\n                        this.formGroup.patchValue({ blReferenceCtrl: this.sectionTrafficModel.blReference });\r\n                        this.isEmpty = !this.sectionTrafficModel.blDate && !this.sectionTrafficModel.blReference;\r\n                        this.hasEmptyState = this.isEmpty && !isEdit;\r\n                        this.onBlDateChanged();\r\n                    }\r\n                }));\r\n            this.subscriptions.push(this.tradeDataService.getAllocationDetails()\r\n                .subscribe((data: Allocation) => {\r\n                    if (data) {\r\n                        this.allocationModel = data;\r\n                        this.groupingNumberCtrl.setValue(this.allocationModel.groupNumber);\r\n                        this.isEmpty = false;\r\n                        this.hasEmptyState = this.isEmpty && !isEdit;\r\n                    }\r\n                    this.disableControl();\r\n                }));\r\n        }\r\n        if (!isEdit) {\r\n            this.isFormEdit = false;\r\n            this.formGroup.disable();\r\n            if (this.tradeRecord.type === ContractTypes[ContractTypes.Sale]) {\r\n                if (!this.tradeRecord.allocatedTo) {\r\n                    this.blDateEmptyMessage = 'The trade needs to be allocated first';\r\n                }\r\n            }\r\n        } else if (isEdit) {\r\n            this.isFormEdit = true;\r\n            if (this.tradeRecord.type === ContractTypes[ContractTypes.Sale]) {\r\n                if (this.tradeRecord.allocatedTo === null) {\r\n                    this.blDateCtrl.disable();\r\n                    this.isDisabled = false;\r\n                }\r\n            } else if (this.isTradeImage) {\r\n                this.blReferenceCtrl.disable();\r\n                this.blDateCtrl.disable();\r\n            }\r\n            if (this.tradeRecord.invoiceReference && this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                'Trades', 'Physicals', 'SuperTradeEdition') <= PermissionLevels.None) {\r\n                this.blDateCtrl.disable();\r\n            }\r\n            this.hasEmptyState = false;\r\n        }\r\n        return entity;\r\n    }\r\n    disableControl() {\r\n        this.groupingNumberCtrl.disable();\r\n    }\r\n    isBLDateBeforeContractDate() {\r\n        const result = isDateTwoBeforeDateOne(this.contractDate, this.blDateCtrl.value);\r\n        if (result) {\r\n            return result;\r\n        }\r\n    }\r\n    onBlDateChanged() {\r\n        if (this.blDateCtrl.valid && this.blDateCtrl.value) {\r\n            this.blDateChanged.emit(this.blDateCtrl.value);\r\n        }\r\n    }\r\n    checkblInfoFormPrivileges() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'TrafficTab')) {\r\n                this.blDatePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'BlDate');\r\n                this.blReferencePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'BlReference');\r\n                this.groupingNumberPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'GroupingNumber');\r\n            }\r\n        });\r\n        if (!this.blDatePrivilege) {\r\n            this.blDateCtrl.disable();\r\n        }\r\n        if (!this.blReferencePrivilege) {\r\n            this.blReferenceCtrl.disable();\r\n        }\r\n        if (!this.groupingNumberPrivilege) {\r\n            this.groupingNumberCtrl.disable();\r\n        }\r\n    }\r\n\r\n    onSectionTrafficDetailsChanged(data: SectionTraffic, isEdit: boolean) {\r\n        this.sectionTrafficModel = data;\r\n        this.formGroup.patchValue({ blDateCtrl: this.sectionTrafficModel.blDate });\r\n        this.formGroup.patchValue({ blReferenceCtrl: this.sectionTrafficModel.blReference });\r\n        this.isEmpty = !this.sectionTrafficModel.blDate && !this.sectionTrafficModel.blReference;\r\n        this.hasEmptyState = this.isEmpty && !isEdit;\r\n        this.onBlDateChanged();\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"!hasEmptyState\\\"\\r\\n          class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            Cash Against Invoice\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <button mat-mini-fab\\r\\n                    disabled></button>\\r\\n            <div>\\r\\n                <atlas-form-input fxFlex=\\\"100%\\\"\\r\\n                                  [fieldControl]=\\\"cashMatchDateCtrl\\\"\\r\\n                                  [isEditable]=\\\"false\\\"\\r\\n                                  [label]=\\\"'Date Of Cash Matching'\\\"></atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<atlas-empty-state *ngIf=\\\"hasEmptyState\\\"\\r\\n                   title=\\\"No Cash Against Invoice\\\"\\r\\n                   [message]=\\\"cashAgainstInvoiceEmptyMessage\\\"></atlas-empty-state>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-cash-against-invoice-form-component',\r\n    templateUrl: './cash-against-invoice-form-component.component.html',\r\n    styleUrls: ['./cash-against-invoice-form-component.component.scss'],\r\n})\r\nexport class CashAgainstInvoiceFormComponentComponent extends BaseFormComponent implements OnInit {\r\n    cashMatchDateCtrl = new AtlasFormControl('CashMatchDate');\r\n    hasEmptyState: boolean = true;\r\n    cashAgainstInvoiceEmptyMessage: string = 'Accountants are working on the subject';\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"!hasEmptyState\\\"\\r\\n          class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>Charter</mat-card-title>\\r\\n        <mat-card-subtitle>\\r\\n            Contract assigned on {{charterAssignmentDate }} by {{charterAssignedBy}}\\r\\n        </mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div>\\r\\n            <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Charter Reference\\\"\\r\\n                       [formControl]=\\\"charterRefCtrl\\\"\\r\\n                       (click)=\\\"charterRefClicked()\\\"\\r\\n                       readonly\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       class=\\\"trade-charter-card\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <atlas-form-input fxFlex=\\\"50%\\\"\\r\\n                              [fieldControl]=\\\"charterManagerCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Charter Manager'\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"50%\\\"\\r\\n                              [fieldControl]=\\\"blDateCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'BL Date'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<atlas-empty-state *ngIf=\\\"hasEmptyState\\\"\\r\\n                   title=\\\"No Charter Assignment\\\"\\r\\n                   [message]=\\\"charterEmptyMessage\\\"></atlas-empty-state>\\r\\n\"","module.exports = \".trade-charter-card {\\n  color: #0000EE;\\n  text-decoration: underline;\\n  cursor: pointer; }\\n\\n.trade-charter-text-color {\\n  color: black; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { UserIdentityService } from '../../../../../shared/services/http-services/user-identity.service';\r\n\r\n@Component({\r\n    selector: 'atlas-charter-form-component',\r\n    templateUrl: './charter-form-component.component.html',\r\n    styleUrls: ['./charter-form-component.component.scss'],\r\n})\r\nexport class CharterFormComponentComponent extends BaseFormComponent implements OnInit {\r\n\r\n    charterRefCtrl = new AtlasFormControl('CharterReference');\r\n    charterManagerCtrl = new AtlasFormControl('CharterManger');\r\n    blDateCtrl = new AtlasFormControl('BLDate');\r\n    shippingStatusCtrl = new AtlasFormControl('shippingStatus');\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    company: string;\r\n    sectionId: number;\r\n    charterAssignmentDate: string;\r\n    isInputField = false;\r\n    charterModel: Charter = new Charter();\r\n    charterAssignedBy: string;\r\n    hasEmptyState: boolean = true;\r\n    charterEmptyMessage: string = 'Execution team is looking for the perfect vessel';\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService, private userIdentityService: UserIdentityService,\r\n        private formatDate: FormatDatePipe,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            charterRefCtrl: this.charterRefCtrl,\r\n            charterManagerCtrl: this.charterManagerCtrl,\r\n            blDateCtrl: this.blDateCtrl,\r\n            shippingStatusCtrl: this.shippingStatusCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any): any {\r\n        if (this.sectionId !== 0) {\r\n            if (entity.blDate) {\r\n                const dateFormat: FormatDatePipe = this.formatDate;\r\n                const formattedBLDate = dateFormat.transformdate(entity.blDate);\r\n                this.formGroup.patchValue({ blDateCtrl: formattedBLDate });\r\n                this.hasEmptyState = false;\r\n            }\r\n            this.executionService.getCharterBySectionId(this.sectionId)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.charterModel = data;\r\n                        this.assignValueToControl();\r\n                        this.hasEmptyState = false;\r\n                    }\r\n                    this.disableControl();\r\n                });\r\n        }\r\n        this.shippingStatusCtrl.disable();\r\n    }\r\n\r\n    setBlDate(blDate: Date) {\r\n        if (blDate) {\r\n            const dateFormat: FormatDatePipe = this.formatDate;\r\n            const formattedBLDate = dateFormat.transformdate(blDate);\r\n            this.formGroup.patchValue({ blDateCtrl: formattedBLDate });\r\n            this.hasEmptyState = false;\r\n        }\r\n    }\r\n\r\n    assignValueToControl() {\r\n        this.charterAssignmentDate = this.formatDate.transform\r\n            (this.charterModel.assignmentDate === null ? null : this.charterModel.assignmentDate);\r\n        this.charterAssignedBy = this.charterModel.assignedByDisplayName !== null ?\r\n            this.charterModel.assignedByDisplayName : this.charterModel.assignedBy;\r\n        this.formGroup.patchValue({ charterRefCtrl: this.charterModel.charterCode });\r\n        this.formGroup.patchValue({ charterManagerCtrl: this.charterModel.charterManagerDisplayName });\r\n        this.formGroup.patchValue({ shippingStatusCtrl: this.charterModel.shippingStatusDescription });\r\n    }\r\n\r\n    charterRefClicked() {\r\n        const charterId = this.charterModel.charterId;\r\n        this.router.navigate([this.company + '/execution/charter/details', charterId]);\r\n    }\r\n\r\n    disableControl() {\r\n        this.charterManagerCtrl.disable();\r\n        this.blDateCtrl.disable();\r\n    }\r\n\r\n    updateCharterManager() {\r\n        if (this.charterModel.charterManagerId) {\r\n            this.userIdentityService.getAllUsers().subscribe((data) => {\r\n                const userName = data.value.find((user) => user.userId === this.charterModel.charterManagerId).displayName;\r\n                this.formGroup.patchValue({ charterManagerCtrl: userName });\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    updateOnlyShippingState() {\r\n        this.hasEmptyState = false;\r\n        this.formGroup.patchValue({ shippingStatusCtrl: 'Cancelled' });\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card commodity-details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Commodity</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <atlas-commodity-input [required]=\\\"commodityInputRequired.isRequired\\\"\\r\\n                               (optionSelected)=\\\"onCommodityIdSelected($event)\\\"\\r\\n                               #commodityInput></atlas-commodity-input>\\r\\n        <div id=\\\"crpyear\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             class=\\\"cropyear-vatcode-details\\\">\\r\\n            <div fxFlex=\\\"50%\\\"\\r\\n                 [class.displayMode]=\\\"!cropYearCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!cropYearCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"cropYearCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Crop Year\\\"\\r\\n                           [required]=\\\"cropYearCtrl.isRequired\\\"\\r\\n                           [formControl]='cropYearCtrl'\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-hint *ngIf=\\\"!cropYearCtrl.hasError('pattern') && cropYearCtrl.enabled \\\">Only format YYYY or\\r\\n                        YYYY/YYYY allowed\\r\\n\\r\\n                    </mat-hint>\\r\\n                    <mat-error *ngIf=\\\"cropYearCtrl.hasError('pattern')\\\">\\r\\n                        Only format YYYY or YYYY/YYYY allowed\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"cropYearCtrl.hasError('isYearOutOfRange')\\\">\\r\\n                        Crop year should be within +/- 5 years from the contract date\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"cropYearCtrl.hasError('isFirstYearGreater')\\\">\\r\\n                        Second year entered after the “/” should always be “greater than” the first year entered before\\r\\n                        the\\r\\n                        “/”\\r\\n                    </mat-error>\\r\\n                    <mat-hint align=\\\"end\\\"\\r\\n                              *ngIf=\\\"cropYearCtrl.isRequired && cropYearCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".cropyear-vatcode-details {\\n  margin-top: 16px; }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { Moment } from 'moment';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CommodityInputComponent } from '../../../../../shared/components/commodity-input/commodity-input.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Commodity } from '../../../../../shared/entities/commodity.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { isCropYearValid } from '../../../../../shared/validators/crop-year-validator.validator';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { getCropYearValue } from '../../../../services/form-field-handler.service';\r\nimport { PermissionLevels } from './../../../../../shared/enums/permission-level.enum';\r\nimport { TradeImageField } from './../../../../../shared/services/trading/dtos/tradeImageField';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-commodity-form-component',\r\n    templateUrl: './commodity-form-component.component.html',\r\n    styleUrls: ['./commodity-form-component.component.scss'],\r\n})\r\nexport class CommodityFormComponent extends BaseFormComponent\r\n    implements OnInit {\r\n\r\n    @ViewChild('commodityInput') commodityInput: CommodityInputComponent;\r\n\r\n    @Output() readonly commodityCodeSelected = new EventEmitter<Commodity>();\r\n    @Output() readonly commBlockWarnMessage = new EventEmitter<any>();\r\n\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    isInputField = false;\r\n    commodityPart1: string;\r\n    commodityPart2: string;\r\n    commodityPart3: string;\r\n    commodityPart4: string;\r\n    commodityPart5: string;\r\n    newCommodityPart1: string;\r\n    newCommodityPart2: string;\r\n    newCommodityPart3: string;\r\n    newCommodityPart4: string;\r\n    newCommodityPart5: string;\r\n    commodityBlockingMessage = false;\r\n    commodityWarningMessage = false;\r\n    isChangedcommodityPart1 = '';\r\n    isChangedcommodityPart2 = '';\r\n    isChangedcommodityPart3 = '';\r\n    isChangedcommodityPart4 = '';\r\n    isChangedcommodityPart5 = '';\r\n    contractDate: Moment;\r\n    tradeImageDetails: TradeImageField[] = [];\r\n\r\n    commodityFormGroup: FormGroup;\r\n    cropYearCtrl = new AtlasFormControl('CropYear');\r\n\r\n    filteredCommodities: Commodity[];\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [MasterDataProps.Commodities];\r\n\r\n    cropYearValidatorPattern = '^[0-9]{4}(\\/[0-9]{4})?';\r\n    company: string;\r\n    commodityPrivilege: boolean = false;\r\n    cropYearPrivilege: boolean = false;\r\n    isImage = false;\r\n    commodityInputRequired = new AtlasFormControl('CommodityId');\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected tradingService: TradingService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected route: ActivatedRoute,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    contractDateSelected(contractDate: Date) {\r\n        this.contractDate = contractDate ? moment(contractDate) : undefined;\r\n        this.resetCropYearValidation();\r\n    }\r\n\r\n    ngOnInit() {\r\n        const masterDataSubscription = this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n                this.filteredCommodities = this.masterdata.commodities;\r\n                this.setValidators();\r\n                this.bindConfiguration();\r\n            });\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isImage = true;\r\n        }\r\n        this.subscriptions.push(masterDataSubscription);\r\n        this.checkCommodityCardPrivileges();\r\n    }\r\n\r\n    setValidators() {\r\n        this.cropYearCtrl.setValidators(Validators.pattern(this.cropYearValidatorPattern));\r\n    }\r\n\r\n    onCommodityIdSelected(commodityId: number) {\r\n        const selectedCommodity = this.masterdata.commodities.filter(\r\n            (commodity) => commodity.commodityId === commodityId,\r\n        )[0];\r\n        this.commodityCodeSelected.emit(selectedCommodity);\r\n    }\r\n\r\n    resetCropYearValidation() {\r\n        this.cropYearCtrl.clearValidators();\r\n        this.cropYearCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.pattern(this.cropYearValidatorPattern),\r\n                isCropYearValid(this.contractDate),\r\n            ]),\r\n        );\r\n        this.cropYearCtrl.updateValueAndValidity();\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            commodityFormGroup: this.commodityInput.getFormGroup(),\r\n            cropYearCtrl: this.cropYearCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n\r\n        if (this.model.commodityId && this.masterdata && this.masterdata.commodities) {\r\n            const commodity = this.masterdata.commodities.find((cmy) => {\r\n                return cmy.commodityId === this.model.commodityId;\r\n            });\r\n            this.commodityPart1 = commodity.commodityType;\r\n            this.commodityPart2 = commodity.commodityOrigin;\r\n            this.commodityPart3 = commodity.commodityGrade;\r\n            this.commodityPart4 = commodity.commodityLvl4;\r\n            this.commodityPart5 = commodity.commodityLvl5;\r\n            this.commodityInput.patchValue(commodity);\r\n            this.onCommodityIdSelected(this.model.commodityId);\r\n\r\n        }\r\n        if (this.model.cropYear) {\r\n            this.model.cropYearTo ?\r\n                this.formGroup.patchValue({ cropYearCtrl: this.model.cropYear + '/' + this.model.cropYearTo }) :\r\n                this.formGroup.patchValue({ cropYearCtrl: this.model.cropYear });\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable({ emitEvent: false });\r\n        } else {\r\n            if (!this.isImage) {\r\n                if (this.model.invoiceReference &&\r\n                    this.authorizationService.getPermissionLevel\r\n                        (this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= PermissionLevels.None) {\r\n                    this.formGroup.get('commodityFormGroup').disable({ emitEvent: false });\r\n                }\r\n            }\r\n        }\r\n        if (this.isImage) {\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n\r\n                const checkCropYearIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'CropYear');\r\n                if (checkCropYearIsImage) {\r\n                    if (!checkCropYearIsImage.isEdit) {\r\n                        this.cropYearCtrl.disable();\r\n                    }\r\n                    if (!checkCropYearIsImage.isCopy) {\r\n                        this.cropYearCtrl.patchValue(null);\r\n                    }\r\n                }\r\n                const checkCommodityIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'CommodityId');\r\n                if (checkCommodityIsImage && !checkCommodityIsImage.isCopy) {\r\n                    this.commodityInput.patchValue(null);\r\n                }\r\n            }\r\n        }\r\n        this.commodityInput.isEditableCommodityForm();\r\n        return entity;\r\n    }\r\n\r\n    commodityEmitter() {\r\n        this.commBlockWarnMessage.emit({\r\n            isCommodityBlockerChanged: this.commodityBlockingMessage,\r\n            isCommodityWarningChanged: this.commodityWarningMessage,\r\n            isChangedCmyPart1: this.isChangedcommodityPart1,\r\n            isChangedCmyPart2: this.isChangedcommodityPart2,\r\n            isChangedCmyPart3: this.isChangedcommodityPart3,\r\n            isChangedCmyPart4: this.isChangedcommodityPart4,\r\n            isChangedCmyPart5: this.isChangedcommodityPart5,\r\n        });\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n        if (this.commodityInputRequired.isRequired || this.commodityInput.getCommodity() != null) {\r\n            this.newCommodityPart1 = this.commodityInput.getCommodity().commodityType;\r\n            this.newCommodityPart2 = this.commodityInput.getCommodity().commodityOrigin;\r\n            this.newCommodityPart3 = this.commodityInput.getCommodity().commodityGrade;\r\n            this.newCommodityPart4 = this.commodityInput.getCommodity().commodityLvl4;\r\n            this.newCommodityPart5 = this.commodityInput.getCommodity().commodityLvl5;\r\n\r\n            section.commodityId = this.commodityInput.getCommodity().commodityId;\r\n\r\n            if (this.newCommodityPart1 !== this.commodityPart1 || this.newCommodityPart2 !== this.commodityPart2) {\r\n                this.commodityBlockingMessage = true;\r\n                if (this.newCommodityPart1 !== this.commodityPart1) {\r\n                    this.isChangedcommodityPart1 = '[Cmy 1]';\r\n                }\r\n                if (this.newCommodityPart2 !== this.commodityPart2) {\r\n                    this.isChangedcommodityPart2 = '[Cmy 2]';\r\n                }\r\n                this.commodityEmitter();\r\n            } else if ((this.newCommodityPart1 === this.commodityPart1 && this.newCommodityPart2 === this.commodityPart2) &&\r\n                (this.commodityPart3 !== this.newCommodityPart3 || this.commodityPart4 !== this.newCommodityPart4 ||\r\n                    this.commodityPart5 !== this.newCommodityPart5)) {\r\n                this.commodityWarningMessage = true;\r\n                if (this.newCommodityPart3 !== this.commodityPart3) {\r\n                    this.isChangedcommodityPart3 = '[Cmy 3]';\r\n                }\r\n                if (this.newCommodityPart4 !== this.commodityPart4) {\r\n                    this.isChangedcommodityPart4 = '[Cmy 4]';\r\n                }\r\n                if (this.newCommodityPart5 !== this.commodityPart5) {\r\n                    this.isChangedcommodityPart5 = '[Cmy 5]';\r\n                }\r\n                this.commodityEmitter();\r\n            }\r\n        } else {\r\n            section.commodityId = 0;\r\n        }\r\n\r\n        if (this.cropYearCtrl.value) {\r\n            const cropYearValues = getCropYearValue(this.cropYearCtrl\r\n                .value as string);\r\n            section.cropYear = cropYearValues.from;\r\n            section.cropYearTo = cropYearValues.to;\r\n        }\r\n\r\n        return section;\r\n    }\r\n    checkCommodityCardPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.commodityPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'Commodity');\r\n                this.cropYearPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CropYear');\r\n            }\r\n        });\r\n        if (!this.commodityPrivilege) {\r\n            this.formGroup.get('commodityFormGroup').disable();\r\n        }\r\n        if (!this.cropYearPrivilege) {\r\n            this.cropYearCtrl.disable();\r\n\r\n        }\r\n\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card counterparty-details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Counterparty</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <atlas-masterdata-user-preferences-input [isEditable]=\\\"buyerCodeCtrl.enabled\\\"\\r\\n                                                         [fieldControl]=\\\"buyerCodeCtrl\\\"\\r\\n                                                         [options]=\\\"filteredBuyers\\\"\\r\\n                                                         label=\\\"Buyer Code\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"buyerCodeSelected($event)\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"70%\\\"\\r\\n                              [fieldControl]=\\\"buyerNameCtrl\\\"\\r\\n                              [required]=\\\"buyerNameCtrl.isRequired\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Buyer Name'\\\">\\r\\n                <mat-error *ngIf=\\\"buyerNameCtrl.hasError('required')\\\">\\r\\n                    Required *\\r\\n                </mat-error>\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <atlas-masterdata-user-preferences-input [isEditable]=\\\"sellerCodeCtrl.enabled\\\"\\r\\n                                                         [fieldControl]=\\\"sellerCodeCtrl\\\"\\r\\n                                                         [options]=\\\"filteredSellers\\\"\\r\\n                                                         label=\\\"Seller Code\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"sellerCodeSelected($event)\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"70%\\\"\\r\\n                              [fieldControl]=\\\"sellerNameCrtl\\\"\\r\\n                              [required]=\\\"sellerNameCrtl.isRequired\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Seller Name'\\\">\\r\\n                <mat-error *ngIf=\\\"sellerNameCrtl.hasError('required')\\\">\\r\\n                    Required *\\r\\n                </mat-error>\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"35%\\\"\\r\\n                 class=\\\"custom-form\\\"\\r\\n                 [class.required-field]=\\\"counterpartyReferenceCtrl.isRequired\\\"\\r\\n                 [class.displayMode]=\\\"!counterpartyReferenceCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Counterparty Reference\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"counterpartyReferenceCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"counterpartyReferenceCtrl.hasError('maxlength')\\\">\\r\\n                        Counterparty Reference should be more than 40 characters long\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"counterpartyReferenceCtrl.hasError('required')\\\">\\r\\n                        Required *\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"counterpartyReferenceCtrl.isRequired && counterpartyReferenceCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { CounterPartyDataLoader } from '../../../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { Company } from './../../../../../shared/entities/company.entity';\r\nimport { PermissionLevels } from './../../../../../shared/enums/permission-level.enum';\r\nimport { TradeImageField } from './../../../../../shared/services/trading/dtos/tradeImageField';\r\n\r\n@Component({\r\n    selector: 'atlas-counterparty-form-component',\r\n    templateUrl: './counterparty-form-component.component.html',\r\n    styleUrls: ['./counterparty-form-component.component.scss'],\r\n    providers: [CounterPartyDataLoader],\r\n})\r\nexport class CounterpartyFormComponent extends BaseFormComponent\r\n    implements OnInit {\r\n    isInputField = false;\r\n    isTradeImage = false;\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n\r\n    buyerCodeCtrl = new AtlasFormControl('BuyerId');\r\n    buyerNameCtrl = new AtlasFormControl('BuyerDescription');\r\n    sellerCodeCtrl = new AtlasFormControl('SellerId');\r\n    sellerNameCrtl = new AtlasFormControl('SellerDescription');\r\n    counterpartyReferenceCtrl = new AtlasFormControl('CounterpartyRef');\r\n\r\n    filteredBuyers: Counterparty[];\r\n    filteredSellers: Counterparty[];\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [MasterDataProps.Counterparties];\r\n    buyerCode: Counterparty[];\r\n    sellerCode: Counterparty[];\r\n    selectedContractType: ContractTypes;\r\n    selectedCounterparty: Counterparty;\r\n    tradeImageDetails: TradeImageField[] = [];\r\n    company: string;\r\n    buyerCodePrivilege: boolean = false;\r\n    sellerCodePrivilege: boolean = false;\r\n    counterPartyReference: boolean = false;\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        public companyManagerService: CompanyManagerService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.filteredBuyers = this.masterdata.counterparties;\r\n                this.buyerCodeCtrl.valueChanges.subscribe((input) => {\r\n                    this.filterBuyers(input);\r\n                });\r\n\r\n                this.filteredSellers = this.masterdata.counterparties;\r\n                this.sellerCodeCtrl.valueChanges.subscribe((input) => {\r\n                    this.filterSellers(input);\r\n                });\r\n                this.setValidators();\r\n                this.bindConfiguration();\r\n            });\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isTradeImage = true;\r\n        }\r\n        // disabling this control as these are description and not to be edited\r\n        this.buyerNameCtrl.disable();\r\n        this.sellerNameCrtl.disable();\r\n        this.checkCounterPartyPrivileges();\r\n    }\r\n\r\n    filterBuyers(input) {\r\n        this.filteredBuyers = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        this.filteredBuyers = this.filteredBuyers.filter((counterparty: Counterparty) => {\r\n            return this.sellerCodeCtrl.value !== counterparty;\r\n        });\r\n        if (this.buyerCodeCtrl.valid || !this.buyerCodeCtrl.value) {\r\n            this.buyerCodeSelected(this.buyerCodeCtrl.value);\r\n        }\r\n    }\r\n\r\n    filterSellers(input) {\r\n        this.filteredSellers = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        this.filteredSellers = this.filteredSellers.filter((counterparty: Counterparty) => {\r\n            return this.buyerCodeCtrl.value !== counterparty;\r\n        });\r\n        if (this.sellerCodeCtrl.valid || !this.sellerCodeCtrl.value) {\r\n            this.sellerCodeSelected(this.sellerCodeCtrl.value);\r\n        }\r\n    }\r\n\r\n    buyerCodeSelected(buyerCode: Counterparty) {\r\n        if (!this.buyerCodeCtrl.valid || !buyerCode) {\r\n            if (this.buyerNameCtrl.value) {\r\n                this.buyerNameCtrl.patchValue('');\r\n            }\r\n            return;\r\n        }\r\n        const selectedBuyer = this.masterdata.counterparties.find(\r\n            (buyer) => buyer.counterpartyCode === buyerCode.counterpartyCode,\r\n        );\r\n\r\n        if (selectedBuyer) {\r\n            this.buyerNameCtrl.patchValue(selectedBuyer.description);\r\n\r\n            if (this.selectedContractType === ContractTypes.Sale) {\r\n                this.selectedCounterparty = selectedBuyer;\r\n            }\r\n        }\r\n    }\r\n\r\n    sellerCodeSelected(sellerCode: Counterparty) {\r\n        if (!this.sellerCodeCtrl.valid || !sellerCode) {\r\n            if (this.sellerNameCrtl.value) {\r\n                this.sellerNameCrtl.patchValue('');\r\n            }\r\n            return;\r\n        }\r\n        const selectedSeller = this.masterdata.counterparties.find(\r\n            (seller) => seller.counterpartyCode === sellerCode.counterpartyCode,\r\n        );\r\n        if (selectedSeller) {\r\n            this.sellerNameCrtl.patchValue(selectedSeller.description);\r\n\r\n            if (this.selectedContractType === ContractTypes.Purchase) {\r\n                this.selectedCounterparty = selectedSeller;\r\n            }\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.buyerCodeCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.counterparties,\r\n                nameof<Counterparty>('counterpartyCode'),\r\n            ),\r\n        );\r\n\r\n        this.sellerCodeCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.counterparties,\r\n                nameof<Counterparty>('counterpartyCode'),\r\n            ),\r\n        );\r\n\r\n        this.counterpartyReferenceCtrl.setValidators(Validators.maxLength(40));\r\n\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    contractTypeSelected(contractType: ContractTypes) {\r\n        const company: Company = this.companyManagerService.getCurrentCompany();\r\n        if (!company || !company.counterpartyId) {\r\n            return;\r\n        }\r\n        const defaultCounterparty = this.masterdata.counterparties.find(\r\n            (fb) => fb.counterpartyID === company.counterpartyId,\r\n        );\r\n\r\n        this.selectedContractType = contractType;\r\n        if (contractType === ContractTypes.Purchase) {\r\n            if (defaultCounterparty) {\r\n                this.buyerCodeCtrl.setValue(\r\n                    defaultCounterparty,\r\n                );\r\n                this.sellerCodeCtrl.setValue('');\r\n                this.sellerNameCrtl.setValue('');\r\n                this.buyerCodeCtrl.disable();\r\n                this.sellerCodeCtrl.enable();\r\n            }\r\n        }\r\n        if (contractType === ContractTypes.Sale) {\r\n            if (defaultCounterparty) {\r\n                this.sellerCodeCtrl.setValue(\r\n                    defaultCounterparty,\r\n                );\r\n                this.buyerCodeCtrl.setValue('');\r\n                this.buyerNameCtrl.setValue('');\r\n                this.sellerCodeCtrl.disable();\r\n                this.buyerCodeCtrl.enable();\r\n            }\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group(\r\n            {\r\n                buyerCodeCtrl: this.buyerCodeCtrl,\r\n                buyerNameCtrl: this.buyerNameCtrl,\r\n                sellerCodeCtrl: this.sellerCodeCtrl,\r\n                sellerNameCrtl: this.sellerNameCrtl,\r\n                counterpartyReferenceCtrl: this.counterpartyReferenceCtrl,\r\n            },\r\n        );\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n        if (this.model.buyerCode) {\r\n            const selectedBuyer = this.masterdata.counterparties.filter(\r\n                (seller) => seller.counterpartyCode === this.model.buyerCode,\r\n            );\r\n            if (selectedBuyer.length > 0) {\r\n                this.buyerCode = selectedBuyer;\r\n                this.buyerCodeCtrl.patchValue(selectedBuyer[0]);\r\n                this.buyerCodeSelected(selectedBuyer[0]);\r\n\r\n            }\r\n        }\r\n        if (this.model.sellerCode) {\r\n            const selectedSeller = this.masterdata.counterparties.filter(\r\n                (seller) => seller.counterpartyCode === this.model.sellerCode,\r\n            );\r\n            if (selectedSeller.length > 0) {\r\n                this.sellerCode = selectedSeller;\r\n                this.sellerCodeCtrl.patchValue(selectedSeller[0]);\r\n                this.sellerCodeSelected(selectedSeller[0]);\r\n\r\n            }\r\n        }\r\n        if (this.model.counterpartyReference != null) {\r\n            this.formGroup.patchValue({ counterpartyReferenceCtrl: this.model.counterpartyReference });\r\n        }\r\n        if (isEdit) {\r\n            if (this.model.type === ContractTypes[0]) {\r\n                this.buyerCodeCtrl.disable();\r\n            } else if (this.model.type === ContractTypes[1]) {\r\n                this.sellerCodeCtrl.disable();\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else if (this.isTradeImage) {\r\n            const contractType = ContractTypes[Number(this.route.snapshot.queryParams.type)];\r\n            if (contractType !== this.model.type) {\r\n                if (this.sellerCode.length > 0) {\r\n                    this.buyerCodeCtrl.patchValue(this.sellerCode[0]);\r\n                }\r\n                if (this.buyerCode.length > 0) {\r\n                    this.sellerCodeCtrl.patchValue(this.buyerCode[0]);\r\n                }\r\n            }\r\n            this.buyerCodeCtrl.enable();\r\n            this.sellerCodeCtrl.enable();\r\n            if (contractType === ContractTypes[0]) {\r\n                this.buyerCodeCtrl.disable();\r\n            } else if (contractType === ContractTypes[1]) {\r\n                this.sellerCodeCtrl.disable();\r\n            }\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n                const checkBuyerIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'BuyerId');\r\n                if (checkBuyerIsImage && !checkBuyerIsImage.isCopy) {\r\n                    this.buyerCodeCtrl.patchValue(null);\r\n                    this.buyerNameCtrl.patchValue(null);\r\n                }\r\n                const checkSellerIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'SellerId');\r\n                if (checkSellerIdIsImage && !checkSellerIdIsImage.isCopy) {\r\n                    this.sellerCodeCtrl.patchValue(null);\r\n                    this.sellerNameCrtl.patchValue(null);\r\n                }\r\n                const checkCounterpartyRefIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'CounterpartyRef');\r\n                if (checkCounterpartyRefIsImage && !checkCounterpartyRefIsImage.isEdit) {\r\n                    this.counterpartyReferenceCtrl.disable();\r\n                }\r\n                if (checkCounterpartyRefIsImage && !checkCounterpartyRefIsImage.isCopy) {\r\n                    this.counterpartyReferenceCtrl.patchValue(null);\r\n                } else {\r\n                    this.counterpartyReferenceCtrl.patchValue(this.model.counterpartyReference);\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            if (this.model.invoiceReference &&\r\n                this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= PermissionLevels.None) {\r\n                this.buyerCodeCtrl.disable();\r\n                this.sellerCodeCtrl.disable();\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n\r\n        section.sellerCode = (this.sellerCodeCtrl.value as Counterparty).counterpartyCode;\r\n        section.buyerCode = (this.buyerCodeCtrl.value as Counterparty).counterpartyCode;\r\n        section.counterpartyReference = this.counterpartyReferenceCtrl.value;\r\n\r\n        return section;\r\n    }\r\n\r\n    checkCounterPartyPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') &&\r\n                this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.buyerCodePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'BuyerCode');\r\n                this.sellerCodePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'SellerCode');\r\n                this.counterPartyReference = this.authorizationService.isPrivilegeAllowed(this.company, 'CounterPartyReference');\r\n            }\r\n        });\r\n        if (!this.buyerCodePrivilege) {\r\n            this.buyerCodeCtrl.disable();\r\n            this.buyerNameCtrl.disable();\r\n        }\r\n        if (!this.sellerCodePrivilege) {\r\n            this.sellerCodeCtrl.disable();\r\n            this.sellerNameCrtl.disable();\r\n        }\r\n        if (!this.counterPartyReference) {\r\n            this.counterpartyReferenceCtrl.disable();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card current-trade-form\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Current Trade</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-slide-toggle value=\\\"false\\\"\\r\\n                              [formControl]=\\\"adjustWeightToggleCtrl\\\"\\r\\n                              (change)=\\\"toggleAdjustWeight()\\\">Adjust Contract</mat-slide-toggle>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-slide-toggle [formControl]=\\\"allocatedResidualSplitCtrl\\\"\\r\\n                              (change)=\\\"toggleAllocatedResidualSplit()\\\">Create Allocated Residual Split</mat-slide-toggle>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\"\\r\\n             class=\\\"created-allocated-residual-split-dropdown\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <mat-select [formControl]=\\\"allocatedResidualSplitDropDownCtrl\\\">\\r\\n                    <mat-option value=\\\"Leave status as is\\\">Leave status as is</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-slide-toggle [formControl]=\\\"unallocatedResidualSplitCtrl\\\"\\r\\n                              (change)=\\\"toggleUnallocatedResidualSplit()\\\">Create Unallocated Residual Split</mat-slide-toggle>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Section } from '../../../../../shared/entities/section.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { CurrentTradeOption } from '../../../../../shared/enums/current-trade-option-enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../../trading/entities/physical-fixed-priced-contract.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-current-trade-form-component',\r\n    templateUrl: './current-trade-form-component.component.html',\r\n    styleUrls: ['./current-trade-form-component.component.scss'],\r\n})\r\nexport class CurrentTradeFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly checkAllocatedResidualSplitChange = new EventEmitter<any>();\r\n    adjustWeightToggleCtrl = new AtlasFormControl('AdjustWeight');\r\n    allocatedResidualSplitCtrl = new AtlasFormControl('AllocatedResidualSplit');\r\n    allocatedResidualSplitDropDownCtrl = new AtlasFormControl('AllocatedResidualSplitDropDown');\r\n    unallocatedResidualSplitCtrl = new AtlasFormControl('UnallocatedResidualSplit');\r\n\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    isAllocated: number;\r\n    sectionModel: Section;\r\n    dataVersionId: number;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected tradingService: TradingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.allocatedResidualSplitDropDownCtrl.setValue('Leave status as is');\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.sectionModel = entity as Section;\r\n        // if (!isEdit) {\r\n        this.adjustWeightToggleCtrl.disable();\r\n        this.allocatedResidualSplitCtrl.disable();\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n        this.unallocatedResidualSplitCtrl.disable();\r\n\r\n        // } else {\r\n        //    if (!this.sectionModel.allocatedTo) {\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n        this.allocatedResidualSplitCtrl.disable();\r\n        //    }\r\n        // this.enableDisableControl();\r\n        // }\r\n\r\n        return entity;\r\n    }\r\n\r\n    resetControlOnHigherValue() {\r\n        this.adjustWeightToggleCtrl.setValue(false);\r\n        this.unallocatedResidualSplitCtrl.setValue(false);\r\n        this.allocatedResidualSplitCtrl.setValue(false);\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n        this.unallocatedResidualSplitCtrl.disable();\r\n        this.allocatedResidualSplitCtrl.disable();\r\n        this.adjustWeightToggleCtrl.disable();\r\n        this.enableDisableControl(true);\r\n    }\r\n\r\n    enableDisableControl(isQuantityIncrease: boolean) {\r\n        if (this.isSaleOrPurchase(this.sectionModel.contractType)) {\r\n            if (!(this.sectionModel.allocatedTo)) {\r\n                if (this.isTradeUninvoice(this.sectionModel)) {\r\n                    if (isQuantityIncrease) {\r\n                        this.adjustWeightToggleCtrl.setValue(true);\r\n                        this.adjustWeightToggleCtrl.enable();\r\n                    } else {\r\n                        this.adjustWeightToggleCtrl.setValue(true);\r\n                        this.adjustWeightToggleCtrl.enable();\r\n                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();\r\n                    }\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)) {\r\n                    if (!isQuantityIncrease) {\r\n                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.setValue(false) :\r\n                            this.unallocatedResidualSplitCtrl.setValue(true);\r\n                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.isTradeUninvoice(this.sectionModel)\r\n                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {\r\n                    if (!isQuantityIncrease) {\r\n                        this.adjustWeightToggleCtrl.setValue(true);\r\n                        this.unallocatedResidualSplitCtrl.setValue(false);\r\n                        this.allocatedResidualSplitCtrl.setValue(false);\r\n                        this.allocatedResidualSplitDropDownCtrl.disable();\r\n                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();\r\n                        this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();\r\n                        this.adjustWeightToggleCtrl.enable();\r\n                    } else {\r\n                        this.adjustWeightToggleCtrl.setValue(true);\r\n                        this.adjustWeightToggleCtrl.enable();\r\n                    }\r\n                } else if (this.isTradeUninvoice(this.sectionModel)\r\n                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel) && !isQuantityIncrease) {\r\n                    this.dataVersionId ? this.allocatedResidualSplitCtrl.setValue(false) :\r\n                        this.allocatedResidualSplitCtrl.setValue(true);\r\n                    this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)\r\n                    && this.isAllocatedTradeUninvoice(this.sectionModel) && !isQuantityIncrease) {\r\n                    this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();\r\n                    this.dataVersionId ? this.allocatedResidualSplitCtrl.setValue(false) :\r\n                        this.allocatedResidualSplitCtrl.setValue(true);\r\n\r\n                } else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)\r\n                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel) && !isQuantityIncrease) {\r\n                    this.allocatedResidualSplitCtrl.enable();\r\n                    this.allocatedResidualSplitCtrl.setValue(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetControlonLowerValue() {\r\n\r\n        this.adjustWeightToggleCtrl.setValue(false);\r\n        this.unallocatedResidualSplitCtrl.setValue(false);\r\n        this.allocatedResidualSplitCtrl.setValue(false);\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n        this.unallocatedResidualSplitCtrl.disable();\r\n        this.allocatedResidualSplitCtrl.disable();\r\n        this.adjustWeightToggleCtrl.disable();\r\n\r\n        this.enableDisableControl(false);\r\n    }\r\n\r\n    resetAllocatedResidualSplit(isChecked: boolean) {\r\n\r\n        this.allocatedResidualSplitCtrl.setValue(isChecked);\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n        if (isChecked) {\r\n            this.adjustWeightToggleCtrl.setValue(false);\r\n            this.unallocatedResidualSplitCtrl.setValue(false);\r\n            this.dataVersionId ? this.allocatedResidualSplitDropDownCtrl.disable() : this.allocatedResidualSplitDropDownCtrl.enable();\r\n        }\r\n\r\n    }\r\n\r\n    resetControl(isAllocated: number) {\r\n        this.isAllocated = isAllocated;\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n        this.adjustWeightToggleCtrl.setValue(false);\r\n        this.unallocatedResidualSplitCtrl.setValue(false);\r\n        this.allocatedResidualSplitCtrl.setValue(false);\r\n        this.adjustWeightToggleCtrl.enable();\r\n        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();\r\n        this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();\r\n        if (!isAllocated) {\r\n            this.allocatedResidualSplitCtrl.disable();\r\n        }\r\n        // this.enableDisableControl();\r\n    }\r\n\r\n    toggleAdjustWeight() {\r\n        if (this.adjustWeightToggleCtrl.value) {\r\n            this.allocatedResidualSplitCtrl.setValue(false);\r\n            this.unallocatedResidualSplitCtrl.setValue(false);\r\n            this.allocatedResidualSplitDropDownCtrl.disable();\r\n        }\r\n        this.toggleAllocatedResidualSplit();\r\n    }\r\n\r\n    toggleAllocatedResidualSplit() {\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n        if (this.allocatedResidualSplitCtrl.value) {\r\n            this.adjustWeightToggleCtrl.setValue(false);\r\n            this.unallocatedResidualSplitCtrl.setValue(false);\r\n            this.allocatedResidualSplitDropDownCtrl.enable();\r\n        }\r\n\r\n        this.checkAllocatedResidualSplitChange.emit(this.allocatedResidualSplitCtrl.value);\r\n    }\r\n\r\n    toggleUnallocatedResidualSplit() {\r\n        if (this.unallocatedResidualSplitCtrl.value) {\r\n            this.allocatedResidualSplitCtrl.setValue(false);\r\n            this.adjustWeightToggleCtrl.setValue(false);\r\n            this.allocatedResidualSplitDropDownCtrl.disable();\r\n        }\r\n        this.toggleAllocatedResidualSplit();\r\n    }\r\n\r\n    checkQuantityChange(quantity) {\r\n        this.adjustWeightToggleCtrl.enable();\r\n        this.adjustWeightToggleCtrl.setValue(true);\r\n\r\n        this.allocatedResidualSplitCtrl.disable();\r\n        this.allocatedResidualSplitDropDownCtrl.disable();\r\n\r\n        if (quantity.newValue > quantity.oldValue) {\r\n            this.unallocatedResidualSplitCtrl.disable();\r\n        } else if (quantity.newValue < quantity.oldValue) {\r\n            this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();\r\n        }\r\n    }\r\n\r\n    checkAnyToggleSelected(): boolean {\r\n        if ((this.adjustWeightToggleCtrl.value) || (this.allocatedResidualSplitCtrl.value) || (this.unallocatedResidualSplitCtrl.value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isSaleOrPurchase(type: ContractTypes): boolean {\r\n        if ((type === ContractTypes.Purchase\r\n            || type === ContractTypes.Sale)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTradeFinalInvoiceRequiredOrFinalized(tradeRecord: Section): boolean {\r\n        if (tradeRecord.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired\r\n            || tradeRecord.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isTradeUninvoice(tradeRecord: Section): boolean {\r\n        if (tradeRecord.invoicingStatusId === InvoicingStatus.Uninvoiced\r\n            || tradeRecord.invoicingStatusId === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isAllocatedTradeFinalInvoiceRequiredOrFinalized(tradeRecord: Section): boolean {\r\n        if (tradeRecord.allocatedTo.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired\r\n            || tradeRecord.allocatedTo.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isAllocatedTradeUninvoice(tradeRecord: Section): boolean {\r\n        if (tradeRecord.allocatedTo.invoicingStatusId === InvoicingStatus.Uninvoiced\r\n            || tradeRecord.allocatedTo.invoicingStatusId === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n        section.currentTradeOptionId = CurrentTradeOption.NoAction;\r\n        if (this.adjustWeightToggleCtrl.value) {\r\n            section.currentTradeOptionId = CurrentTradeOption.AdjustContract;\r\n        } else if (this.allocatedResidualSplitCtrl.value) {\r\n            section.currentTradeOptionId = CurrentTradeOption.CreateAllocatedResidualSplit;\r\n        } else if (this.unallocatedResidualSplitCtrl.value) {\r\n            section.currentTradeOptionId = CurrentTradeOption.CreateUnallocatedResidualSplit;\r\n        }\r\n        return section;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"!hasEmptyState\\\"\\r\\n          class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Contract & Document Status</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"right start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"lastDocumentIssuedDatePicker\\\"\\r\\n                       placeholder=\\\"Contract issued\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='lastDocumentIssuedDateCtrl'>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"lastDocumentIssuedDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #lastDocumentIssuedDatePicker></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"contractSentDatePicker\\\"\\r\\n                       placeholder=\\\"Contract sent\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='contractSentDateCtrl'>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"contractSentDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #contractSentDatePicker></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"right start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"lastEmailReceivedDatePicker\\\"\\r\\n                       placeholder=\\\"Email received\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='lastEmailReceivedDateCtrl'>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"lastEmailReceivedDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #lastEmailReceivedDatePicker></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       [matDatepicker]=\\\"contractReturnedDatePicker\\\"\\r\\n                       placeholder=\\\"Contract returned\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='contractReturnedDateCtrl'>\\r\\n                <mat-datepicker-toggle matSuffix\\r\\n                                       [for]=\\\"contractReturnedDatePicker\\\"></mat-datepicker-toggle>\\r\\n                <mat-datepicker #contractReturnedDatePicker></mat-datepicker>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<atlas-empty-state *ngIf=\\\"hasEmptyState\\\"\\r\\n                   title=\\\"No Document Status\\\"\\r\\n                   [message]=\\\"documentEmptyMessage\\\"></atlas-empty-state>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-document-status-form-component',\r\n    templateUrl: './document-status-form-component.component.html',\r\n    styleUrls: ['./document-status-form-component.component.scss'],\r\n})\r\nexport class DocumentStatusFormComponentComponent extends BaseFormComponent implements OnInit {\r\n\r\n    lastDocumentIssuedDateCtrl = new AtlasFormControl('lastDocumentIssuedDateCtrl');\r\n    otherReferenceCtrl = new AtlasFormControl('otherReferenceCtrl');\r\n    model: SectionCompleteDisplayView;\r\n    isTradeImage = false;\r\n    company: string;\r\n    contractIssuedOnPrivilege: boolean = false;\r\n    otherReferencePrivilege: boolean = false;\r\n    hasEmptyState: boolean = true;\r\n    isEmpty: boolean = true;\r\n    documentEmptyMessage: string = 'No document has been issued yet';\r\n    lastEmailReceivedDateCtrl = new AtlasFormControl('lastEmailReceivedDateCtrl');\r\n    contractReturnedDateCtrl = new AtlasFormControl('contractReturnedDateCtrl');\r\n    contractSentDateCtrl = new AtlasFormControl('contractSentDateCtrl');\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isTradeImage = true;\r\n        }\r\n        this.checkDocumentStatusFormPrivileges();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            lastDocumentIssuedDateCtrl: this.lastDocumentIssuedDateCtrl,\r\n            lastEmailReceivedDateCtrl: this.lastEmailReceivedDateCtrl,\r\n            contractReturnedDateCtrl: this.contractReturnedDateCtrl,\r\n            contractSentDateCtrl: this.contractSentDateCtrl,\r\n            otherReferenceCtrl: this.otherReferenceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    initForm(entity: any, isEdit: boolean) {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n\r\n        if (this.model.lastDocumentIssuedDate != null) {\r\n            this.formGroup.patchValue({ lastDocumentIssuedDateCtrl: this.model.lastDocumentIssuedDate });\r\n            this.isEmpty = false;\r\n        }\r\n        if (this.model.lastEmailReceivedDate != null) {\r\n            this.formGroup.patchValue({ lastEmailReceivedDateCtrl: this.model.lastEmailReceivedDate });\r\n            this.isEmpty = false;\r\n        }\r\n        if (this.model.contractReturnedDate != null) {\r\n            this.formGroup.patchValue({ contractReturnedDateCtrl: this.model.contractReturnedDate });\r\n            this.isEmpty = false;\r\n        }\r\n        if (this.model.contractSentDate != null) {\r\n            this.formGroup.patchValue({ contractSentDateCtrl: this.model.contractSentDate });\r\n            this.isEmpty = false;\r\n        }\r\n\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        }\r\n        const reference = this.model.reference;\r\n        if (this.isTradeImage) {\r\n            this.otherReferenceCtrl.patchValue(reference);\r\n            this.lastDocumentIssuedDateCtrl.disable();\r\n            this.lastEmailReceivedDateCtrl.disable();\r\n            this.contractReturnedDateCtrl.disable();\r\n            this.contractSentDateCtrl.disable();\r\n            this.isEmpty = false;\r\n        } else if (this.model.otherReference) {\r\n            this.otherReferenceCtrl.patchValue(this.model.otherReference);\r\n            this.isEmpty = false;\r\n        }\r\n        this.hasEmptyState = this.isEmpty && !isEdit;\r\n    }\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n        section.lastDocumentIssuedDate = this.lastDocumentIssuedDateCtrl.value;\r\n        section.lastEmailReceivedDate = this.lastEmailReceivedDateCtrl.value;\r\n        section.contractReturnedDate = this.contractReturnedDateCtrl.value;\r\n        section.contractSentDate = this.contractSentDateCtrl.value;\r\n        section.otherReference = this.otherReferenceCtrl.value;\r\n        return section;\r\n    }\r\n    checkDocumentStatusFormPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') && this.authorizationService.isPrivilegeAllowed(this.company, 'StatusTab')) {\r\n                this.contractIssuedOnPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'ContractIssuedOn');\r\n                this.otherReferencePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'OtherReference');\r\n\r\n            }\r\n        });\r\n        if (!this.contractIssuedOnPrivilege) {\r\n            this.lastDocumentIssuedDateCtrl.disable();\r\n        }\r\n        if (!this.otherReferencePrivilege) {\r\n            this.otherReferenceCtrl.disable();\r\n        }\r\n\r\n    }\r\n}\r\n","module.exports = \"<header class=\\\"header-background trade \\\"\\r\\n        [class.trade-capture]=\\\"!isShow\\\">\\r\\n    <div class=\\\"header-container\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n                 class=\\\"header-height\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start stretch\\\"\\r\\n                     fxLayoutGap=\\\"1%\\\">\\r\\n                    <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                             name=\\\"toggleStyle\\\"\\r\\n                                             aria-label=\\\"Contract Type\\\"\\r\\n                                             [formControl]='contractTypeCtrl'\\r\\n                                             (change)='contractTypeChanged()'\\r\\n                                             *ngIf=\\\"!isShow\\\">\\r\\n                        <mat-button-toggle [value]=\\\"ContractType.Purchase\\\">Purchase</mat-button-toggle>\\r\\n                        <mat-button-toggle [value]=\\\"ContractType.Sale\\\">Sale</mat-button-toggle>\\r\\n                    </mat-button-toggle-group>\\r\\n                    <h2 *ngIf=\\\"isShow\\\"\\r\\n                        class=\\\"trade-view-title\\\">\\r\\n                        Trade\\r\\n                        <label>{{contractReference}}</label>\\r\\n                    </h2>\\r\\n                    <div fxFlex=\\\"50%\\\"\\r\\n                         class=\\\"custom-form\\\"\\r\\n                         [class.required-field]=\\\"contractReferenceCtrl.isRequired\\\">\\r\\n                        <mat-form-field *ngIf=\\\"!isShow || isEditContract\\\"\\r\\n                                        fxFlex=\\\"140px\\\">\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Contract Reference\\\"\\r\\n                                   [required]=\\\"contractReferenceCtrl.isRequired\\\"\\r\\n                                   [formControl]='contractReferenceCtrl'\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                            <mat-error *ngIf=\\\"contractReferenceCtrl.hasError('pattern')\\\">\\r\\n                                Special characters are not allowed\\r\\n                            </mat-error>\\r\\n                            <mat-error *ngIf=\\\"contractReferenceCtrl.hasError('maxlength')\\\">\\r\\n                                Contract Ref should be at most 7 characters long\\r\\n                            </mat-error>\\r\\n                            <mat-error *ngIf=\\\"contractReferenceCtrl.hasError('notUnique')\\\">\\r\\n                                Contract Ref already exists\\r\\n                            </mat-error>\\r\\n                            <mat-error *ngIf=\\\"contractReferenceCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                            <mat-hint *ngIf=\\\"contractReferenceCtrl.isRequired &&  contractReferenceCtrl.enabled\\\">\\r\\n                                Required *\\r\\n                            </mat-hint>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <mat-chip-list *ngIf=\\\"isShow\\\"\\r\\n                                   class=\\\"chip-list\\\"\\r\\n                                   fxFlex>\\r\\n                        <mat-chip selected\\r\\n                                  disabled>\\r\\n                            {{contractType}}\\r\\n                        </mat-chip>\\r\\n                        <mat-chip selected\\r\\n                                  disabled\\r\\n                                  [ngClass]=\\\"contractStatus == 'Approved' ? 'mat-approved': 'mat-error'\\\">\\r\\n                            {{contractStatus}}\\r\\n                        </mat-chip>\\r\\n                        <mat-chip selected\\r\\n                                  disabled\\r\\n                                  [ngClass]=\\\"status == 'Realized' ? 'mat-approved': 'mat-error'\\\">\\r\\n                            {{status}}\\r\\n                        </mat-chip>\\r\\n                        <mat-chip selected\\r\\n                                  disabled\\r\\n                                  [ngClass]=\\\"openCloseStatus != 'Open' ? 'mat-error' : 'mat-approved'\\\">\\r\\n                            {{openCloseStatus}}\\r\\n                        </mat-chip>\\r\\n                        <mat-chip *ngIf=\\\"isCancelled\\\"\\r\\n                                  selected\\r\\n                                  disabled\\r\\n                                  class=\\\"mat-error\\\">\\r\\n                            {{tradeCancelledStatus}}\\r\\n                        </mat-chip>\\r\\n                    </mat-chip-list>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start end\\\"\\r\\n                     fxLayoutGap=\\\"1%\\\"\\r\\n                     class=\\\"header-meta\\\">\\r\\n                    <mat-form-field fxFlex=\\\"10%\\\">\\r\\n                        <input matInput\\r\\n                               [required]=\\\"contractDateCtrl.isRequired\\\"\\r\\n                               [matDatepicker]=\\\"contractDatePicker\\\"\\r\\n                               placeholder=\\\"Contract Date\\\"\\r\\n                               [formControl]='contractDateCtrl'\\r\\n                               (dateChange)='ifContractDateSelected()'\\r\\n                               autocomplete=\\\"off\\\">\\r\\n                        <mat-datepicker-toggle matSuffix\\r\\n                                               [for]=\\\"contractDatePicker\\\"></mat-datepicker-toggle>\\r\\n                        <mat-datepicker #contractDatePicker></mat-datepicker>\\r\\n                        <mat-error *ngIf=\\\"contractDateCtrl.hasError('required')\\\">\\r\\n                            This field is required\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"contractDateCtrl.hasError('isDateValid')\\\">\\r\\n                            Date cannot be in the future\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                    <div class=\\\"custom-form\\\"\\r\\n                         fxFlex=\\\"10%\\\"\\r\\n                         [class.displayMode]=\\\"!traderCtrl.enabled\\\"\\r\\n                         [class.isEmpty]=\\\"!traderCtrl.value\\\"\\r\\n                         [class.required-field]=\\\"traderCtrl.isRequired\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Trader\\\"\\r\\n                                   [required]=\\\"traderCtrl.isRequired\\\"\\r\\n                                   [matAutocomplete]=\\\"traders\\\"\\r\\n                                   [formControl]=\\\"traderCtrl\\\"\\r\\n                                   [matTooltip]=\\\"'Trade Owners'\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                            <mat-autocomplete #traders=\\\"matAutocomplete\\\"\\r\\n                                              [panelWidth]=\\\"panelSize\\\"\\r\\n                                              [displayWith]=\\\"displayTrader.bind(this)\\\">\\r\\n                                <mat-option *ngFor=\\\"let trader of filteredTradeOwners\\\"\\r\\n                                            [value]=\\\"trader.userId\\\">\\r\\n                                    {{ trader.samAccountName }} | {{trader.displayName}}\\r\\n                                </mat-option>\\r\\n                            </mat-autocomplete>\\r\\n                            <mat-error *ngIf=\\\"traderCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                            <mat-error *ngIf=\\\"traderCtrl.hasError('inDropdownList')\\\">\\r\\n                                {{ getTraderErrorMessageInDropdownList() }}\\r\\n                            </mat-error>\\r\\n                            <mat-hint *ngIf=\\\"traderCtrl.isRequired &&  traderCtrl.enabled\\\">\\r\\n                                Required *\\r\\n                            </mat-hint>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"10%\\\">\\r\\n                        <atlas-masterdata-user-preferences-input [isEditable]=\\\"!isShow || isEditable\\\"\\r\\n                                                                 [fieldControl]=\\\"departmentCodeCtrl\\\"\\r\\n                                                                 [options]=\\\"filteredDepartments\\\"\\r\\n                                                                 label=\\\"Department Code\\\"\\r\\n                                                                 displayProperty=\\\"departmentCode\\\"\\r\\n                                                                 [selectProperties]=\\\"['departmentCode', 'description']\\\"\\r\\n                                                                 [errorMap]=\\\"departmentErrorMap\\\"\\r\\n                                                                 lightBoxTitle=\\\"Results for Department\\\"\\r\\n                                                                 gridId=\\\"departmentsGrid\\\"\\r\\n                                                                 (optionSelected)=\\\"departmentCodeSelected($event)\\\"\\r\\n                                                                 [dataLoader]=\\\"departmentDataLoader\\\">\\r\\n                        </atlas-masterdata-user-preferences-input>\\r\\n                    </div>\\r\\n\\r\\n                    <atlas-form-input fxFlex=\\\"10%\\\"\\r\\n                                      [fieldControl]=\\\"departmentDescriptionCtrl\\\"\\r\\n                                      [isEditable]=\\\"isInputField\\\"\\r\\n                                      [label]=\\\"'Department Description'\\\">\\r\\n                    </atlas-form-input>\\r\\n\\r\\n                    <!--------Creator-->\\r\\n                    <mat-form-field fxFlex=\\\"10%\\\"\\r\\n                                    *ngIf=\\\"isShow\\\">\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Creator\\\"\\r\\n                               disabled=true\\r\\n                               [formControl]=\\\"creatorCtrl\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               value={{createdBy}}>\\r\\n                    </mat-form-field>\\r\\n\\r\\n                    <!-------Created On-->\\r\\n                    <mat-form-field fxFlex=\\\"10%\\\"\\r\\n                                    *ngIf=\\\"isShow\\\">\\r\\n                        <input matInput\\r\\n                               [matDatepicker]=\\\"createdOnPicker\\\"\\r\\n                               placeholder=\\\"Created On\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]='createdOnCtrl'>\\r\\n                        <mat-datepicker-toggle matSuffix\\r\\n                                               [for]=\\\"createdOnPicker\\\"></mat-datepicker-toggle>\\r\\n                        <mat-datepicker #createdOnPicker></mat-datepicker>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</header>\"","module.exports = \".header-background {\\n  min-height: 120px; }\\n\\n.header-container {\\n  height: 120px; }\\n\\n.header-content {\\n  padding: 16px 30px 0px; }\\n\\n.header-height {\\n  height: 100px; }\\n\\ndiv.mat-form-field-infix {\\n  padding: 0px;\\n  border-top: none !important; }\\n\\n.mat-form-field-wrapper {\\n  padding-bottom: 1em; }\\n\\n.mat-form-field-infix {\\n  padding: 0px 0px 5px 0px; }\\n\\n.header-background.trade {\\n  display: table;\\n  height: 100px;\\n  width: 100%;\\n  background: bottom/cover url(\\\"/assets/img/pattern-small.jpg\\\") no-repeat; }\\n\\n.header-background.trade.trade-capture {\\n    background: top/contain url(\\\"/assets/img/luke-waves-gray.svg\\\") no-repeat;\\n    background-position-x: right;\\n    background-color: white; }\\n\\n.header-background.trade.trade-capture .header-container {\\n      background: none; }\\n\\n.header-background.trade.trade-capture .header-container h2,\\n      .header-background.trade.trade-capture .header-container .mat-input-element:disabled,\\n      .header-background.trade.trade-capture .header-container label,\\n      .header-background.trade.trade-capture .header-container span,\\n      .header-background.trade.trade-capture .header-container .mat-form-field {\\n        color: #332f30; }\\n\\n.header-background.trade.trade-capture .header-meta {\\n      margin-top: 4px; }\\n\\n.header-background.trade ::ng-deep.mat-input-element:disabled {\\n    color: white !important; }\\n\\n.header-background.trade .header-container {\\n    background: rgba(24, 91, 157, 0.84);\\n    background: -webkit-gradient(left top, right top, color-stop(0%, rgba(24, 91, 157, 0.84)), color-stop(100%, rgba(53, 129, 28, 0.68)));\\n    background: linear-gradient(to right, rgba(24, 91, 157, 0.84) 0%, rgba(53, 129, 28, 0.68) 100%);\\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#185b9d',\\r endColorstr='#35811c',\\r GradientType=1); }\\n\\n.header-background.trade .header-container h2,\\n    .header-background.trade .header-container .mat-input-element:disabled,\\n    .header-background.trade .header-container label,\\n    .header-background.trade .header-container span,\\n    .header-background.trade .header-container .mat-icon-button,\\n    .header-background.trade .header-container .mat-form-field {\\n      color: white; }\\n\\n.header-background.trade .header-container .mat-button-toggle-group {\\n      height: 32px; }\\n\\n.header-background.trade .header-container .chip-list {\\n      margin-bottom: 4px; }\\n\\n.header-background.trade .header-container .trade-view-title {\\n      margin-bottom: 0; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { Trader } from '../../../../../shared/entities/trader.entity';\r\nimport { ContractStatus } from '../../../../../shared/enums/contract-status.enum';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { TradeImageField } from '../../../../../shared/services/trading/dtos/tradeImageField';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { isBeforeDate } from '../../../../../shared/validators/date-validators.validator';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { ContractReferenceAsyncValidator } from '../../../../validators/contract-reference-async-validator.validator';\r\nimport { AuthorizationService } from './../../../../../core/services/authorization.service';\r\nimport { Section } from './../../../../../shared/entities/section.entity';\r\nimport { User } from './../../../../../shared/entities/user.entity';\r\nimport { PermissionLevels } from './../../../../../shared/enums/permission-level.enum';\r\nimport { UserIdentityService } from './../../../../../shared/services/http-services/user-identity.service';\r\nimport { DepartmentDataLoader } from './../../../../../shared/services/masterdata/department-data-loader';\r\nimport { SnackbarService } from './../../../../../shared/services/snackbar.service';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-header-form-component',\r\n    templateUrl: './header-form-component.component.html',\r\n    styleUrls: ['./header-form-component.component.scss'],\r\n    providers: [DepartmentDataLoader],\r\n})\r\nexport class HeaderFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly contractTypeSelected = new EventEmitter<ContractTypes>();\r\n    @Output() readonly contractDateSelected = new EventEmitter<Date>();\r\n\r\n    isInputField = false;\r\n    ContractType = ContractTypes;\r\n    isShow = false;\r\n    isEditable: boolean = false;\r\n    currentDate: string;\r\n    contractType: string;\r\n    private readonly contractReferencePattern: string = '^[a-zA-Z0-9]*$';\r\n    contractTypeCtrl = new AtlasFormControl('ContractType');\r\n    contractReferenceCtrl = new AtlasFormControl('PhysicalContractCode');\r\n    contractDateCtrl = new AtlasFormControl('ContractDate');\r\n    traderCtrl = new AtlasFormControl('TraderId');\r\n    departmentCodeCtrl = new AtlasFormControl('DepartmentId');\r\n    departmentDescriptionCtrl = new AtlasFormControl('DepartmentDescription');\r\n    creatorCtrl = new AtlasFormControl('Creator');\r\n    createdOnCtrl = new AtlasFormControl('CreatedOn');\r\n\r\n    filteredTradeOwners: Trader[];\r\n    filteredDepartments: Department[];\r\n    tradeImageDetails: TradeImageField[] = [];\r\n\r\n    traders: Trader[] = [];\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [MasterDataProps.Departments];\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    contractStatus: string = null;\r\n    traderName: string;\r\n    contractReference: string;\r\n    createdBy: string;\r\n    deprecatedTrader: User;\r\n    date = false;\r\n    status: string;\r\n    dataVersionId?: number;\r\n    company: string;\r\n    isEditContract = false;\r\n    isImage = false;\r\n    openCloseStatus: string = '';\r\n    isCancelled: boolean;\r\n    tradeCancelledStatus: string = '';\r\n\r\n    departmentErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected tradingService: TradingService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        protected userIdentityService: UserIdentityService,\r\n        public departmentDataLoader: DepartmentDataLoader,\r\n        private authorizationService: AuthorizationService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        // this.currentDate = this.authorizationService.getUserDateFormat();\r\n\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isImage = true;\r\n        }\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredDepartments = this.masterdata.departments;\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n\r\n        if (this.filteredDepartments && this.filteredDepartments.length === 1) {\r\n            this.departmentCodeCtrl.setValue(this.filteredDepartments[0]);\r\n        }\r\n\r\n        this.departmentCodeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartments = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.departments,\r\n                ['departmentCode', 'description'],\r\n            );\r\n\r\n            if (this.departmentCodeCtrl.valid) {\r\n                this.departmentCodeSelected(\r\n                    this.departmentCodeCtrl.value,\r\n                );\r\n            }\r\n        });\r\n        \r\n        this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.contractDateSelected.emit(this.contractDateCtrl.value);\r\n\r\n        this.tradingService.getAllTraders()\r\n            .subscribe((traders) => {\r\n                this.traders = this.filteredTradeOwners = traders.value;\r\n                this.traderCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredTradeOwners = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.traders,\r\n                        ['samAccountName', 'firstName', 'lastName'],\r\n                    );\r\n                });\r\n                if (this.model) {\r\n                    this.displayTraderNameInViewForDisabledTraders();\r\n                }\r\n                this.setValidators();\r\n                this.bindConfiguration();\r\n            });\r\n    }\r\n\r\n    displayTraderNameInViewForDisabledTraders() {\r\n        if (this.model && this.model.traderId && this.filteredTradeOwners) {\r\n            const filteredTrader = this.filteredTradeOwners.find(\r\n                (trader) => trader.userId === this.model.traderId,\r\n            );\r\n            if (filteredTrader) {\r\n                this.subscriptions.push(this.userIdentityService.getUserById(this.model.traderId, true).subscribe((user: User) => {\r\n                    this.deprecatedTrader = user;\r\n                    this.traderCtrl.setValue(this.model.traderId);\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    setContractReferenceValidators() {\r\n        const contractRefValidators = [Validators.maxLength(7), Validators.pattern(this.contractReferencePattern)];\r\n        if (this.dataVersionId) {\r\n            contractRefValidators.push(Validators.required);\r\n        }\r\n        this.contractReferenceCtrl.setValidators(contractRefValidators);\r\n\r\n        this.contractReferenceCtrl.setAsyncValidators(\r\n            ContractReferenceAsyncValidator.createValidator(this.tradingService, this.dataVersionId),\r\n        );\r\n    }\r\n\r\n    setValidators() {\r\n        this.contractDateCtrl.setValidators(isBeforeDate(this.companyManager.getCurrentCompanyDate()));\r\n\r\n        if (!this.isShow) {\r\n            const contractRefValidators = [Validators.maxLength(7), Validators.pattern(this.contractReferencePattern)];\r\n            if (this.dataVersionId) {\r\n                contractRefValidators.push(Validators.required);\r\n            }\r\n            this.contractReferenceCtrl.setValidators(contractRefValidators);\r\n\r\n            this.contractReferenceCtrl.setAsyncValidators(\r\n                ContractReferenceAsyncValidator.createValidator(this.tradingService, this.dataVersionId),\r\n            );\r\n        }\r\n\r\n        this.departmentCodeCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.departments,\r\n                nameof<Department>('departmentCode'),\r\n            ),\r\n        );\r\n\r\n        this.traderCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.traders,\r\n                nameof<Trader>('userId'),\r\n            ),\r\n        );\r\n    }\r\n\r\n    private findDepartmentByCode(departmentCode: Department): Department {\r\n        if (!departmentCode) {\r\n            return;\r\n        }\r\n\r\n        const filteredDepartment = this.masterdata.departments.filter(\r\n            (dept) => dept.departmentCode === departmentCode.departmentCode,\r\n        );\r\n\r\n        if (filteredDepartment.length > 0) {\r\n            return filteredDepartment[0];\r\n        }\r\n    }\r\n\r\n    departmentCodeSelected(departments: Department) {\r\n        if (!departments) {\r\n            return;\r\n        }\r\n        const selectedDepartment = this.masterdata.departments.filter(\r\n            (department) => department.departmentCode === departments.departmentCode,\r\n        );\r\n\r\n        if (selectedDepartment.length > 0) {\r\n            this.departmentDescriptionCtrl.patchValue(selectedDepartment[0].description);\r\n        }\r\n    }\r\n\r\n    contractTypeChanged() {\r\n        const res = this.contractTypeCtrl.value as ContractTypes;\r\n        this.contractType = res.toString();\r\n        this.contractTypeSelected.emit(res);\r\n    }\r\n\r\n    ifContractDateSelected() {\r\n        const contractDate = this.contractDateCtrl.value as Date;\r\n        this.contractDateSelected.emit(contractDate);\r\n    }\r\n\r\n    displayTrader(userId: number): string {\r\n        if (userId) {\r\n            const selectedUser = this.traders.find(\r\n                (user) => user.userId === userId,\r\n            );\r\n\r\n            if (selectedUser) {\r\n                return selectedUser.displayName;\r\n            } else if (this.deprecatedTrader && this.deprecatedTrader.userId === userId) {\r\n                return this.deprecatedTrader.displayName;\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n\r\n        section.type = this.contractTypeCtrl.value;\r\n        section.contractReference = this.contractReferenceCtrl.value === '' ? null : this.contractReferenceCtrl.value;\r\n        section.contractDate = this.contractDateCtrl.value;\r\n        section.traderId = this.traderCtrl.value;\r\n        const department = this.findDepartmentByCode(\r\n            this.departmentCodeCtrl.value,\r\n        );\r\n        section.departmentId = department ? department.departmentId : null;\r\n        section.status = ContractStatus[this.contractStatus];\r\n        return section;\r\n    }\r\n\r\n    initForm(entity: Section, isEdit: boolean): any {\r\n        this.isShow = true;\r\n        this.isEditable = isEdit ? true : false;\r\n        this.contractReferenceCtrl.clearAsyncValidators();\r\n        this.contractReferenceCtrl.clearValidators();\r\n        if (entity.traderId === 0 || (entity.header && entity.header.traderId === 0)) {\r\n            entity.header.traderId = null;\r\n        }\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n        this.contractStatus = this.model.status === 'Closed' ? ContractStatus[ContractStatus.Unapproved] : this.model.status;\r\n        this.openCloseStatus = this.model.isClosed ? 'Closed' : 'Open';\r\n        this.isCancelled = this.model.isCancelled;\r\n        if (this.model.type != null) {\r\n            this.contractTypeCtrl.setValue(ContractTypes[this.model.type]);\r\n            this.contractType = this.model.type;\r\n        }\r\n        this.contractReference = this.model.reference;\r\n        if (this.model.contractDate != null) {\r\n            this.formGroup.patchValue({ contractDateCtrl: this.model.contractDate });\r\n            this.contractDateSelected.emit(this.contractDateCtrl.value);\r\n        }\r\n        this.formGroup.patchValue({ traderCtrl: this.model.traderId });\r\n        this.displayTraderNameInViewForDisabledTraders();\r\n\r\n        const departmentCode = this.masterdata.departments\r\n            .filter((e) => e.departmentId === this.model.departmentId);\r\n        if (departmentCode) {\r\n            this.departmentCodeCtrl.patchValue(departmentCode[0]);\r\n            this.departmentCodeSelected(departmentCode[0]);\r\n        }\r\n        this.createdBy = this.model.createdBy;\r\n\r\n        if (this.model.creationDate != null) {\r\n            this.createdOnCtrl.setValue(moment(this.model.creationDate));\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n            this.creatorCtrl.disable();\r\n            this.createdOnCtrl.disable();\r\n        } else {\r\n            if (!this.isImage) {\r\n                if (this.model.allocatedTo ||\r\n                    (this.model.invoiceReference &&\r\n                        this.authorizationService.getPermissionLevel(\r\n                            this.company,\r\n                            'Trades', 'Physicals', 'SuperTradeEdition',\r\n                        ) <= PermissionLevels.None)) {\r\n                    this.departmentCodeCtrl.disable();\r\n                    this.departmentDescriptionCtrl.disable();\r\n                }\r\n            }\r\n            this.creatorCtrl.disable();\r\n            this.createdOnCtrl.disable();\r\n        }\r\n\r\n        if (this.isImage) {\r\n            this.contractTypeCtrl.patchValue(ContractTypes[Number(this.route.snapshot.queryParams.type)]);\r\n            this.contractType = ContractTypes[Number(this.route.snapshot.queryParams.type)];\r\n            this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n            this.createdOnCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n            this.contractReference = null;\r\n            this.isEditContract = true;\r\n            this.contractReferenceCtrl.patchValue(this.contractReference);\r\n            this.setContractReferenceValidators();\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n                const checkTraderIdRefIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'TraderId');\r\n                if (checkTraderIdRefIsImage && !checkTraderIdRefIsImage.isEdit) {\r\n                    this.traderCtrl.disable();\r\n                }\r\n\r\n                const checkContractStatusCodeIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ContractStatusCode');\r\n                if (checkContractStatusCodeIsImage && !checkContractStatusCodeIsImage.isEdit) {\r\n                    this.contractTypeCtrl.disable();\r\n                }\r\n\r\n                const checkDepartmentIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'DepartmentId');\r\n                if (checkDepartmentIdIsImage && !checkDepartmentIdIsImage.isEdit) {\r\n                    this.departmentCodeCtrl.disable();\r\n                    this.departmentDescriptionCtrl.disable();\r\n                }\r\n                const checkContractDateIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ContractDate');\r\n                if (checkContractDateIsImage && !checkContractDateIsImage.isEdit) {\r\n                    this.contractDateCtrl.disable();\r\n                }\r\n                const checkPhysicalContractCodeIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PhysicalContractCode');\r\n                if (checkPhysicalContractCodeIsImage && !checkPhysicalContractCodeIsImage.isEdit) {\r\n                    this.contractReferenceCtrl.disable();\r\n                }\r\n                const checkTraderIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'TraderId');\r\n                if (checkTraderIdIsImage && !checkTraderIdIsImage.isCopy) {\r\n                    this.traderCtrl.patchValue(null);\r\n                }\r\n                const checkDepartmentIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'DepartmentId');\r\n                if (checkDepartmentIdIsCopy && !checkDepartmentIdIsCopy.isCopy) {\r\n                    this.departmentCodeCtrl.patchValue(null);\r\n                    this.departmentDescriptionCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkContractDateIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ContractDate');\r\n                if (checkContractDateIsCopy && !checkContractDateIsCopy.isCopy) {\r\n                    this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n                } else {\r\n                    this.contractDateCtrl.setValue(this.model.contractDate);\r\n                }\r\n\r\n                const checkPhysicalContractCodeIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PhysicalContractCode');\r\n                if (checkPhysicalContractCodeIsCopy && !checkPhysicalContractCodeIsCopy.isCopy) {\r\n                    this.contractReferenceCtrl.patchValue(this.contractReference);\r\n                }\r\n            }\r\n            this.contractStatus = ContractStatus[ContractStatus.Unapproved];\r\n            this.status = 'Not Realized';\r\n        }\r\n        const favoriteId = Number(this.route.snapshot.queryParams.favoriteId);\r\n        if (favoriteId) {\r\n            this.isEditContract = true;\r\n            this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n            this.createdOnCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        }\r\n\r\n        this.contractRealisedStatus();\r\n        if (this.model.isCancelled) {\r\n            this.tradeCancelledStatus = 'Cancelled';\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            contractTypeCtrl: this.contractTypeCtrl,\r\n            contractReferenceCtrl: this.contractReferenceCtrl,\r\n            contractDateCtrl: this.contractDateCtrl,\r\n            traderCtrl: this.traderCtrl,\r\n            departmentCodeCtrl: this.departmentCodeCtrl,\r\n            departmentDescriptionCtrl: this.departmentDescriptionCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    contractStatusChanged(contractStatus: ContractStatus) {\r\n        this.contractStatus = ContractStatus[contractStatus];\r\n    }\r\n\r\n    contractRealisedStatus() {\r\n        if (this.model.blDate && !this.isImage) {\r\n            this.date = true;\r\n            this.status = 'Realized';\r\n        } else {\r\n            this.status = 'Not Realized';\r\n        }\r\n    }\r\n\r\n    getTraderErrorMessageInDropdownList() {\r\n        if (this.deprecatedTrader && this.traderCtrl.value === this.deprecatedTrader.userId) {\r\n            return 'This user is no longer a trader';\r\n        }\r\n        return 'Trader not in the list';\r\n    }\r\n\r\n    getTradeImageFieldsCompany() {\r\n        this.tradingService.getTradeImageFieldsByCompany()\r\n            .subscribe((data) => {\r\n                this.tradeImageDetails = data.value;\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"!hasEmptyState && !isLoading\\\"\\r\\n          class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            Invoicing\\r\\n        </mat-card-title>\\r\\n        <mat-card-subtitle>\\r\\n            Invoiced on {{invoiceDateFormat}}\\r\\n        </mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"right start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"MAIN invoice reference number\\\"\\r\\n                       [formControl]=\\\"invoiceReferenceCtrl\\\"\\r\\n                       type=\\\"text\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Percentage (%) invoiced\\\"\\r\\n                       [formControl]=\\\"salesPercentageCtrl\\\"\\r\\n                       type=\\\"number\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"right start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Quantity invoiced (Quantity)\\\"\\r\\n                       [formControl]=\\\"quantityInvoicedCtrl\\\"\\r\\n                       type=\\\"number\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Quantity invoiced (Code)\\\"\\r\\n                       [formControl]=\\\"quantityCodeCtrl\\\"\\r\\n                       type=\\\"text\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"right start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Invoice Type\\\"\\r\\n                       [matTooltip]=\\\"'Invoice Type'\\\"\\r\\n                       [matAutocomplete]=\\\"invoiceType\\\"\\r\\n                       [formControl]=\\\"invoiceTypeCtrl\\\">\\r\\n                <mat-autocomplete #invoiceType=\\\"matAutocomplete\\\">\\r\\n                    <mat-option *ngFor=\\\"let invoice of filteredInvoiceTypeArray\\\"\\r\\n                                [value]=\\\"invoice.contractInvoiceType\\\">\\r\\n                        {{invoice.contractInvoiceType}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"invoiceTypeCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list.\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n<atlas-empty-state *ngIf=\\\"hasEmptyState && !isLoading\\\"\\r\\n                   title=\\\"No Invoicing\\\"\\r\\n                   [message]=\\\"invoicingEmptyMessage\\\"></atlas-empty-state>\\r\\n<mat-card *ngIf=\\\"isLoading\\\">\\r\\n    <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"20px\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { ContractInvoice } from '../../../../../shared/entities/contract-invoice-type.entity';\r\nimport { InvoiceMarkingDetails } from '../../../../../shared/entities/invoice-marking-status-tab.entity';\r\nimport { ContractInvoiceType } from '../../../../../shared/enums/contract-invoice-type.enum';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { TradeDataService } from '../../../../services/trade-data.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoicing-form-component',\r\n    templateUrl: './invoicing-form-component.component.html',\r\n    styleUrls: ['./invoicing-form-component.component.scss'],\r\n})\r\nexport class InvoicingFormComponentComponent extends BaseFormComponent implements OnInit {\r\n    quantityCodeCtrl = new AtlasFormControl('invoicedQuantityCode');\r\n    invoiceReferenceCtrl = new AtlasFormControl('invoiceReference');\r\n    salesPercentageCtrl = new AtlasFormControl('salesPercentage');\r\n    quantityInvoicedCtrl = new AtlasFormControl('invoicedQuantity');\r\n    invoiceTypeCtrl = new AtlasFormControl('invoiceType');\r\n\r\n    invoiceMarkingModel: InvoiceMarkingDetails;\r\n    invoiceDate: Date;\r\n    hasEmptyState: boolean = true;\r\n    invoicingEmptyMessage: string = 'This trade has not been invoiced yet';\r\n    invoiceDateFormatted: string;\r\n    isLoading = true;\r\n    isEdit = false;\r\n\r\n    private sectionId: number;\r\n    dataVersionId: number;\r\n    invoiceTypeArray: ContractInvoice[];\r\n    filteredInvoiceTypeArray: ContractInvoice[];\r\n    invoicePercentage: number;\r\n    invoiceMarkingDetails: InvoiceMarkingDetails;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        private formatDate: FormatDatePipe,\r\n        private tradeDataService: TradeDataService,\r\n        private utilService: UtilService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        if (this.sectionId !== 0) {\r\n            this.getInvoiceStatusValues();\r\n        } else {\r\n            this.isLoading = false;\r\n        }\r\n        this.invoiceTypeArray = [\r\n            {\r\n                contractInvoiceType: 'Washout',\r\n                contractInvoiceTypeId: ContractInvoiceType.Washout,\r\n            },\r\n            {\r\n                contractInvoiceType: 'Cancellation',\r\n                contractInvoiceTypeId: ContractInvoiceType.Cancellation,\r\n            },\r\n        ];\r\n        this.filteredInvoiceTypeArray = this.invoiceTypeArray;\r\n        this.invoiceTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredInvoiceTypeArray = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.invoiceTypeArray,\r\n                ['contractInvoiceType', 'contractInvoiceTypeId'],\r\n            );\r\n        });\r\n        this.setValidators();\r\n\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            quantityCodeCtrl: this.quantityCodeCtrl,\r\n            invoiceReferenceCtrl: this.invoiceReferenceCtrl,\r\n            salesPercentageCtrl: this.salesPercentageCtrl,\r\n            quantityInvoicedCtrl: this.quantityInvoicedCtrl,\r\n            invoiceTypeCtrl: this.invoiceTypeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    getInvoiceStatusValues() {\r\n        this.subscriptions.push(this.tradeDataService.getInvoiceMarkingDetails()\r\n            .subscribe((data: InvoiceMarkingDetails) => {\r\n                if (data) {\r\n                    this.invoiceMarkingDetails = data;\r\n                    this.invoiceDate = data.createdDateTime;\r\n                    this.invoiceDateFormatted = this.formatDate.transform(data.createdDateTime);\r\n                    this.invoiceReferenceCtrl.patchValue(data.invoiceCode);\r\n                    this.quantityCodeCtrl.patchValue(data.weightCode);\r\n                    if (data.invoicePercent) {\r\n                        this.invoicePercentage = data.invoicePercent;\r\n                    }\r\n                    this.checkIfEmpty();\r\n                }\r\n                this.isLoading = false;\r\n            },\r\n            ));\r\n    }\r\n\r\n    checkIfEmpty() {\r\n        const zero = 0;\r\n        let isNotEmpty = false;\r\n        if (this.invoiceReferenceCtrl.value && this.invoiceReferenceCtrl.value !== '') {\r\n            isNotEmpty = true;\r\n        } else if (this.quantityInvoicedCtrl.value && this.quantityInvoicedCtrl.value !== 0) {\r\n            isNotEmpty = true;\r\n        } else if (this.salesPercentageCtrl.value && this.salesPercentageCtrl.value !== zero.toFixed(2)) {\r\n            isNotEmpty = true;\r\n        } else if (this.invoiceTypeCtrl.value && this.invoiceReferenceCtrl.value !== '' && this.isEdit) {\r\n            isNotEmpty = true;\r\n        }\r\n        this.hasEmptyState = !isNotEmpty;\r\n    }\r\n\r\n    totalValuesCalculated(model: any) {\r\n        this.quantityInvoicedCtrl.patchValue(model.totalQuantity);\r\n        this.salesPercentageCtrl.setValue((model.totalInvoiceValuePercent ? model.totalInvoiceValuePercent : 0).toFixed(2));\r\n        this.checkIfEmpty();\r\n    }\r\n    setValidators() {\r\n        this.invoiceTypeCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.invoiceTypeArray,\r\n                    nameof<ContractInvoice>('contractInvoiceType'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        if (!isEdit || this.invoicePercentage === 100) {\r\n            this.invoiceTypeCtrl.disable();\r\n        } else {\r\n            this.invoiceTypeCtrl.enable();\r\n        }\r\n        this.isEdit = isEdit;\r\n        return entity;\r\n    }\r\n    setContractInvoiceType(invoiceTypeId: number) {\r\n        if (invoiceTypeId) {\r\n            this.invoiceTypeCtrl.patchValue(this.invoiceTypeArray[invoiceTypeId - 1].contractInvoiceType);\r\n        }\r\n    }\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n        if (this.invoiceTypeCtrl.value === ContractInvoiceType[1]) {\r\n            section.contractInvoiceTypeId = ContractInvoiceType.Washout;\r\n        } else if (this.invoiceTypeCtrl.value === ContractInvoiceType[2]) {\r\n            section.contractInvoiceTypeId = ContractInvoiceType.Cancellation;\r\n        }\r\n        return section;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Location</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-masterdata-user-preferences-input [isEditable]=\\\"portOfOriginCtrl.enabled\\\"\\r\\n                                                         [fieldControl]=\\\"portOfOriginCtrl\\\"\\r\\n                                                         [options]=\\\"filteredOriginPorts\\\"\\r\\n                                                         label=\\\"Port Of Origin\\\"\\r\\n                                                         displayProperty=\\\"portCode\\\"\\r\\n                                                         [selectProperties]=\\\"['portCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"originportErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"portsGrid\\\"\\r\\n                                                         (optionSelected)=\\\"portofOriginSelected($event)\\\"\\r\\n                                                         [dataLoader]=\\\"portDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n\\r\\n            <atlas-form-input fxFlex=\\\"60%\\\"\\r\\n                              [fieldControl]=\\\"portOfOriginDescriptionCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Description'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-masterdata-user-preferences-input [isEditable]=\\\"portOfDestinationCtrl.enabled\\\"\\r\\n                                                         [fieldControl]=\\\"portOfDestinationCtrl\\\"\\r\\n                                                         [options]=\\\"filteredDestinationPorts\\\"\\r\\n                                                         label=\\\"Port Of Destination\\\"\\r\\n                                                         displayProperty=\\\"portCode\\\"\\r\\n                                                         [selectProperties]=\\\"['portCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"destinationportErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Port\\\"\\r\\n                                                         gridId=\\\"portsGrid\\\"\\r\\n                                                         (optionSelected)=\\\"portofDestinationselected($event)\\\"\\r\\n                                                         [dataLoader]=\\\"portDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"60%\\\"\\r\\n                              [fieldControl]=\\\"portOfDestinationDescCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Description'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\"\\r\\n             *ngIf=\\\"businessSectorFieldShow\\\">\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 class=\\\"custom-form\\\"\\r\\n                 [class.required-field]=\\\"businessSectorCtrl.isRequired\\\"\\r\\n                 [class.displayMode]=\\\"!businessSectorCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Business Sector\\\"\\r\\n                           [matAutocomplete]=\\\"businessSectorAutoComplete\\\"\\r\\n                           [formControl]=\\\"businessSectorCtrl\\\"\\r\\n                           [required]=\\\"businessSectorCtrl.isRequired\\\"\\r\\n                           matTooltip=\\\"Business Sector\\\">\\r\\n                    <mat-icon *ngIf=\\\"isEdit\\\"\\r\\n                              class=\\\"bookmark-icon\\\"\\r\\n                              matSuffix>bookmark</mat-icon>\\r\\n                    <mat-autocomplete #businessSectorAutoComplete=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (closed)=\\\"clearDescription()\\\"\\r\\n                                      (optionSelected)=\\\"businessSectorSelected($event.option.value)\\\"\\r\\n                                      [displayWith]=\\\"displayBusinessSector\\\">\\r\\n                        <mat-option *ngFor=\\\"let businessSector of filteredBusinessSector\\\"\\r\\n                                    [value]=\\\"businessSector\\\">\\r\\n                            {{businessSector.sectorCode}} |\\r\\n                            {{businessSector.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"businessSectorCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"businessSectorCtrl.isRequired && businessSectorCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                    <mat-error *ngIf=\\\"businessSectorCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"60%\\\"\\r\\n                              [fieldControl]=\\\"businessSectorDescriptionCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Description'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { FormBuilder, Validators } from '../../../../../../../node_modules/@angular/forms';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { BusinessSector } from '../../../../../shared/entities/business-sector-entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { Port } from '../../../../../shared/entities/port.entity';\r\nimport { TradeConfiguration } from '../../../../../shared/entities/trade-configuration-entity';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { PortsDataLoader } from '../../../../../shared/services/masterdata/ports-data-loader';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { TradingService } from './../../../../../shared/services/http-services/trading.service';\r\nimport { TradeImageField } from './../../../../../shared/services/trading/dtos/tradeImageField';\r\n\r\n@Component({\r\n    selector: 'atlas-location-form-component',\r\n    templateUrl: './location-form-component.component.html',\r\n    styleUrls: ['./location-form-component.component.scss'],\r\n    providers: [PortsDataLoader],\r\n})\r\nexport class LocationFormComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly portsWarningMessage = new EventEmitter<any>();\r\n    isInputField = false;\r\n    portOfOrigin: string;\r\n    newPortOfDestination: string;\r\n    newPortOfOrigin: string;\r\n    portOfDestination: string;\r\n    isChangedPortOfOrigin = false;\r\n    isChangedPortOfDestination = false;\r\n    company: string;\r\n    businessSectorforTradingOperation: boolean = false;\r\n    businessSectorNominalForTradingOperation: boolean = false;\r\n    businessSectorFieldShow: boolean = false;\r\n    portOfOriginPrivilege: boolean = false;\r\n    portOfDestinationPrivilege: boolean = false;\r\n    businessSectorPrivilege: boolean = false;\r\n    isChangedPortOfOriginCoulmn = '';\r\n    isChangedPortOfDestinationCoulmn = '';\r\n    private tradeConfigurationSubscription: Subscription;\r\n    isEdit: boolean = true;\r\n\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    tradeConfiguration: TradeConfiguration = new TradeConfiguration();\r\n\r\n    portOfOriginCtrl = new AtlasFormControl('PortOriginId');\r\n    portOfOriginDescriptionCtrl = new AtlasFormControl(\r\n        'PortOfOriginDescription',\r\n    );\r\n    portOfDestinationCtrl = new AtlasFormControl('PortDestinationId');\r\n    portOfDestinationDescCtrl = new AtlasFormControl(\r\n        'PortOfDestinationDescription',\r\n    );\r\n    businessSectorCtrl = new AtlasFormControl('MarketSectorId');\r\n    businessSectorDescriptionCtrl = new AtlasFormControl(\r\n        'BusinessSectorDescripton',\r\n    );\r\n\r\n    filteredOriginPorts: Port[];\r\n    filteredDestinationPorts: Port[];\r\n    filteredBusinessSector: BusinessSector[];\r\n    tradeImageDetails: TradeImageField[] = [];\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Ports,\r\n        MasterDataProps.BusinessSectors,\r\n    ];\r\n    originportErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n\r\n    destinationportErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n    businessSectorMandatory: boolean = false;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        public portDataLoader: PortsDataLoader,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n        protected tradingService: TradingService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredOriginPorts = this.masterdata.ports;\r\n        this.portOfOriginCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredOriginPorts = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.ports,\r\n                ['portCode', 'portDescription'],\r\n            );\r\n            if (this.portOfOriginCtrl.valid) {\r\n                this.portofOriginSelected(this.portOfOriginCtrl.value);\r\n            }\r\n        });\r\n\r\n        this.filteredDestinationPorts = this.masterdata.ports;\r\n        this.portOfDestinationCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDestinationPorts = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.ports,\r\n                ['portCode', 'portDescription'],\r\n            );\r\n            if (this.portOfDestinationCtrl.valid) {\r\n                this.portofDestinationselected(this.portOfDestinationCtrl.value);\r\n            }\r\n        });\r\n        this.filteredBusinessSector = this.masterdata.businessSectors;\r\n        this.businessSectorCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredBusinessSector = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.businessSectors,\r\n                ['sectorCode', 'description'],\r\n            );\r\n        });\r\n        this.getBusinessSectorConfiguration();\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.checkLocationFormPrivileges();\r\n        this.businessSectorDescriptionCtrl.disable();\r\n    }\r\n\r\n    getBusinessSectorConfiguration() {\r\n        this.tradeConfigurationSubscription = this.tradingService.getTradeConfigurationDetails()\r\n            .subscribe((data: TradeConfiguration) => {\r\n                if (data) {\r\n                    this.tradeConfiguration = data;\r\n                    this.businessSectorFieldShow = (data.businessSectorNominalTradingOperation) ? true : false;\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.tradeConfigurationSubscription) {\r\n            this.tradeConfigurationSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.portOfOriginCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.ports,\r\n                nameof<Port>('portCode'),\r\n            ),\r\n        );\r\n\r\n        this.portOfDestinationCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.ports,\r\n                nameof<Port>('portCode'),\r\n            ),\r\n        );\r\n        this.businessSectorCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.businessSectors,\r\n                ),\r\n            ]),\r\n        );\r\n        if (this.businessSectorMandatory) {\r\n            this.businessSectorCtrl.setValidators(Validators.required);\r\n        }\r\n    }\r\n\r\n    portofOriginSelected(portCode: Port) {\r\n        if (!this.masterdata || !portCode) {\r\n            if (this.portOfOriginDescriptionCtrl.value) {\r\n                this.portOfOriginDescriptionCtrl.patchValue('');\r\n            }\r\n            return;\r\n        }\r\n        const selectedPort = this.masterdata.ports.find(\r\n            (port) => port.portCode === portCode.portCode,\r\n        );\r\n        if (selectedPort) {\r\n            this.portOfOriginDescriptionCtrl.patchValue(\r\n                selectedPort.description,\r\n            );\r\n        }\r\n    }\r\n\r\n    portofDestinationselected(portCode: Port) {\r\n        if (!this.masterdata || !portCode) {\r\n            if (this.portOfDestinationDescCtrl.value) {\r\n                this.portOfDestinationDescCtrl.patchValue('');\r\n            }\r\n            return;\r\n        }\r\n        const selectedPort = this.masterdata.ports.find(\r\n            (port) => port.portCode === portCode.portCode,\r\n        );\r\n        if (selectedPort) {\r\n            this.portOfDestinationDescCtrl.patchValue(selectedPort.description);\r\n        }\r\n    }\r\n\r\n    businessSectorSelected(businessSector: BusinessSector) {\r\n        this.businessSectorDescriptionCtrl.patchValue(\r\n            businessSector ? businessSector.description : '',\r\n        );\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            portofOriginCtrl: this.portOfOriginCtrl,\r\n            portofOriginDescriptionCtrl: this.portOfOriginDescriptionCtrl,\r\n            portofDestinationCtrl: this.portOfDestinationCtrl,\r\n            portofDestinationDescCtrl: this.portOfDestinationDescCtrl,\r\n            businessSectorCtrl: this.businessSectorCtrl,\r\n            businessSectorDescriptionCtrl: this.businessSectorDescriptionCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n        section.portOfOrigin = (this.portOfOriginCtrl.value as Port) ? (this.portOfOriginCtrl.value as Port).portCode : null;\r\n        section.portOfDestination = (this.portOfDestinationCtrl.value as Port) ? (this.portOfDestinationCtrl.value as Port).portCode : null;\r\n        section.marketSectorId = (!this.businessSectorCtrl.value || this.businessSectorCtrl.value === '') ?\r\n            null : this.businessSectorCtrl.value.sectorId;\r\n        this.newPortOfOrigin = section.portOfOrigin;\r\n        this.newPortOfDestination = section.portOfDestination;\r\n        if (this.portOfOrigin !== this.newPortOfOrigin && this.portOfDestination !== this.newPortOfDestination) {\r\n            this.isChangedPortOfDestination = true;\r\n            this.isChangedPortOfOrigin = true;\r\n            this.isChangedPortOfOriginCoulmn = '[PortOfOrigin]';\r\n            this.isChangedPortOfDestinationCoulmn = '[PortOfDestination]';\r\n            this.WarningEmitter();\r\n        } else {\r\n            if (this.portOfOrigin !== this.newPortOfOrigin) {\r\n                this.isChangedPortOfOrigin = true;\r\n                this.isChangedPortOfOriginCoulmn = '[PortOfOrigin]';\r\n                this.WarningEmitter();\r\n            } else if (this.portOfDestination !== this.newPortOfDestination) {\r\n                this.isChangedPortOfDestination = true;\r\n                this.isChangedPortOfDestinationCoulmn = '[PortOfDestination]';\r\n                this.WarningEmitter();\r\n            }\r\n        }\r\n        return section;\r\n    }\r\n    WarningEmitter() {\r\n        this.portsWarningMessage.emit({\r\n            portOfOriginChanged: this.isChangedPortOfOrigin,\r\n            portOfDestinationChanged: this.isChangedPortOfDestination,\r\n            portOfOriginColumn: this.isChangedPortOfOriginCoulmn,\r\n            portOfDestinationColumn: this.isChangedPortOfDestinationCoulmn,\r\n        });\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.portOfOrigin = tradeRecord.portOfOrigin;\r\n        this.portOfDestination = tradeRecord.portOfDestination;\r\n        this.model = tradeRecord;\r\n        this.isEdit = isEdit;\r\n        if (this.model.portOfOrigin != null) {\r\n            const selectedPort = this.masterdata.ports.filter(\r\n                (port) => port.portCode === this.model.portOfOrigin,\r\n            );\r\n            if (selectedPort.length > 0) {\r\n                this.filteredOriginPorts = selectedPort;\r\n                this.portOfOriginCtrl.patchValue(selectedPort[0]);\r\n                this.portofOriginSelected(selectedPort[0]);\r\n            }\r\n        }\r\n        if (this.model.portOfDestination != null) {\r\n            const selectedPort = this.masterdata.ports.find(\r\n                (port) => port.portCode === this.model.portOfDestination,\r\n            );\r\n            if (selectedPort) {\r\n                this.filteredDestinationPorts = [selectedPort];\r\n                this.portOfDestinationCtrl.patchValue(selectedPort);\r\n                this.portofDestinationselected(selectedPort);\r\n            }\r\n        }\r\n        if (this.model.marketSectorId != null) {\r\n            const selectedBusinessSector = this.masterdata.businessSectors.find(\r\n                (businessSector) => businessSector.sectorId === this.model.marketSectorId,\r\n            );\r\n            if (selectedBusinessSector) {\r\n                this.businessSectorCtrl.patchValue(selectedBusinessSector);\r\n                this.businessSectorSelected(selectedBusinessSector);\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.portOfDestinationDescCtrl.disable();\r\n            this.businessSectorDescriptionCtrl.disable();\r\n            this.portOfOriginDescriptionCtrl.disable();\r\n        }\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n                const checkPortOriginIdIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PortOriginId');\r\n                if (checkPortOriginIdIsEdit && !checkPortOriginIdIsEdit.isEdit) {\r\n                    this.portOfOriginCtrl.disable();\r\n                }\r\n                const checkPortDestinationIdIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PortDestinationId');\r\n                if (checkPortDestinationIdIsEdit && !checkPortDestinationIdIsEdit.isEdit) {\r\n                    this.portOfDestinationCtrl.disable();\r\n                }\r\n                const checkMarketSectorIdIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'MarketSectorId');\r\n                if (checkMarketSectorIdIsEdit && !checkMarketSectorIdIsEdit.isEdit) {\r\n                    this.businessSectorCtrl.disable();\r\n                }\r\n                const checkPortOriginIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PortOriginId');\r\n                if (checkPortOriginIdIsCopy && !checkPortOriginIdIsCopy.isCopy) {\r\n                    this.portOfOriginCtrl.patchValue(null);\r\n                    this.portOfOriginDescriptionCtrl.patchValue(null);\r\n                }\r\n                const checkPortDestinationIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PortDestinationId');\r\n                if (checkPortDestinationIdIsCopy && !checkPortDestinationIdIsCopy.isCopy) {\r\n                    this.portOfDestinationCtrl.patchValue(null);\r\n                    this.portOfDestinationDescCtrl.patchValue(null);\r\n                }\r\n                const checkMarketSectorIdIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'MarketSectorId');\r\n                if (checkMarketSectorIdIdIsCopy && !checkMarketSectorIdIdIsCopy.isCopy) {\r\n                    this.businessSectorCtrl.patchValue(null);\r\n                    this.businessSectorDescriptionCtrl.patchValue(null);\r\n                }\r\n            }\r\n        }\r\n        if (isEdit) {\r\n            if (tradeRecord.invoicingStatusId !== InvoicingStatus.Uninvoiced) {\r\n                this.businessSectorCtrl.disable();\r\n                this.businessSectorDescriptionCtrl.disable();\r\n            } else {\r\n                this.businessSectorCtrl.enable();\r\n                this.businessSectorDescriptionCtrl.enable();\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    displayBusinessSector(businessSector: BusinessSector): string {\r\n        return businessSector ? businessSector.sectorCode : '';\r\n    }\r\n    checkLocationFormPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.portOfOriginPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'PortOfOrigin');\r\n                this.portOfDestinationPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'PortOfDestination');\r\n                this.businessSectorPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'MarketSector');\r\n            }\r\n        });\r\n        if (!this.portOfOriginPrivilege) {\r\n            this.portOfOriginCtrl.disable();\r\n            this.portOfOriginDescriptionCtrl.disable();\r\n        }\r\n        if (!this.portOfDestinationPrivilege) {\r\n            this.portOfDestinationCtrl.disable();\r\n            this.portOfDestinationDescCtrl.disable();\r\n        }\r\n        if (!this.businessSectorPrivilege) {\r\n            this.businessSectorCtrl.disable();\r\n            this.businessSectorDescriptionCtrl.disable();\r\n        }\r\n    }\r\n\r\n    clearDescription() {\r\n        if (!this.businessSectorCtrl.value) {\r\n            this.businessSectorDescriptionCtrl.patchValue('');\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Internal Memorandum</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxFlex=\\\"100%\\\"\\r\\n             class=\\\"custom-form\\\"\\r\\n             [class.required-field]=\\\"memoCtrl.isRequired\\\"\\r\\n             [class.displayMode]=\\\"!isInputField\\\">\\r\\n            <mat-form-field>\\r\\n                <textarea matInput\\r\\n                          rows=\\\"5\\\"\\r\\n                          [maxlength]=\\\"2000\\\"\\r\\n                          [formControl]='memoCtrl'\\r\\n                          [required]=\\\"memoCtrl.isRequired\\\"></textarea>\\r\\n                <mat-error *ngIf=\\\"memoCtrl.hasError('maxlength')\\\"> Internal memorandum should be at most 2000 Characters\\r\\n                    long </mat-error>\\r\\n                <mat-error *ngIf=\\\"memoCtrl.hasError('required')\\\">\\r\\n                    This field is required\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"memoCtrl.isRequired && memoCtrl.enabled\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"textarea.mat-input-element {\\n  max-height: 125px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { TradeImageField } from './../../../../../shared/services/trading/dtos/tradeImageField';\r\n\r\n@Component({\r\n    selector: 'atlas-memo-form-component',\r\n    templateUrl: './memo-form-component.component.html',\r\n    styleUrls: ['./memo-form-component.component.scss'],\r\n})\r\nexport class MemoFormComponent extends BaseFormComponent implements OnInit {\r\n    isInputField = true;\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    memoCtrl: AtlasFormControl = new AtlasFormControl('Memorandum');\r\n    tradeImageDetails: TradeImageField[] = [];\r\n    company: string;\r\n    internalMemorandumPrivilege: boolean = false;\r\n\r\n    constructor(\r\n        protected formbuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.checkInternalMemorandumPrivilege();\r\n    }\r\n    setValidators() {\r\n        this.memoCtrl.setValidators(\r\n            Validators.compose([Validators.maxLength(2000)]),\r\n        );\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formbuilder.group({\r\n            memoCtrl: this.memoCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n        this.isInputField = isEdit;\r\n\r\n        if (this.model.memorandum != null) {\r\n            this.formGroup.patchValue({ memoCtrl: this.model.memorandum });\r\n        }\r\n        if (!isEdit) {\r\n            this.memoCtrl.disable();\r\n        }\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n                if (!this.tradeImageDetails.filter((e) => e.tradeFieldName === 'Memorandum')[0].isEdit) {\r\n                    this.memoCtrl.disable();\r\n                }\r\n                if (!this.tradeImageDetails.filter((e) => e.tradeFieldName === 'Memorandum')[0].isCopy) {\r\n                    this.memoCtrl.patchValue(null);\r\n                } else {\r\n                    this.formGroup.patchValue({ memoCtrl: this.model.memorandum });\r\n                }\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any) {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n\r\n        section.memorandum = this.memoCtrl.value;\r\n\r\n        return entity;\r\n    }\r\n    checkInternalMemorandumPrivilege() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') && this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.internalMemorandumPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'InternalMemorandum');\r\n            }\r\n        });\r\n        if (!this.internalMemorandumPrivilege) {\r\n            this.memoCtrl.disable();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Price</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!currencyCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!currencyCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"currencyCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Currency\\\"\\r\\n                           [matAutocomplete]=\\\"currencies\\\"\\r\\n                           [formControl]=\\\"currencyCtrl\\\"\\r\\n                           [matTooltip]=\\\"'Currency'\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [required]=\\\"currencyCtrl.isRequired\\\">\\r\\n                    <mat-icon *ngIf=\\\"isEdit\\\"\\r\\n                              class=\\\"bookmark-icon\\\"\\r\\n                              matSuffix>bookmark</mat-icon>\\r\\n                    <mat-autocomplete #currencies=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                        <mat-option *ngFor=\\\"let currency of filteredCurrencyList\\\"\\r\\n                                    [value]=\\\"currency.currencyCode\\\">{{currency.currencyCode}} |\\r\\n                            {{currency.description}}</mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"currencyCtrl.hasError('required')\\\">\\r\\n                        Currency is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"currencyCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"currencyCtrl.isRequired && currencyCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!priceUnitIdCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!priceUnitIdCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"priceUnitIdCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Price Code\\\"\\r\\n                           [matAutocomplete]=\\\"priceUnits\\\"\\r\\n                           [formControl]=\\\"priceUnitIdCtrl\\\"\\r\\n                           [matTooltip]=\\\"'Price Code'\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [required]=\\\"priceUnitIdCtrl.isRequired\\\">\\r\\n                    <mat-icon *ngIf=\\\"isEdit\\\"\\r\\n                              class=\\\"bookmark-icon\\\"\\r\\n                              matSuffix>bookmark</mat-icon>\\r\\n                    <mat-autocomplete #priceUnits=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      [displayWith]=\\\"displayPriceUnit.bind(this)\\\">\\r\\n                        <mat-option *ngFor=\\\"let priceCode of filteredPriceCodeList\\\"\\r\\n                                    [value]=\\\"priceCode.priceUnitId\\\">{{priceCode.priceCode}} |\\r\\n                            {{priceCode.description}}</mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"priceUnitIdCtrl.hasError('required')\\\">\\r\\n                        Price Code is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"priceUnitIdCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"priceUnitIdCtrl.isRequired && priceUnitIdCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!contractPriceCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!contractPriceCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"contractPriceCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [textMask]=\\\"{mask:mask}\\\"\\r\\n                           placeholder=\\\"Contract Price\\\"\\r\\n                           [formControl]=\\\"contractPriceCtrl\\\"\\r\\n                           [title]=\\\"priceToolTip\\\"\\r\\n                           [required]=\\\"contractPriceCtrl.isRequired\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-error *ngIf=\\\"contractPriceCtrl.hasError('required')\\\">\\r\\n                        Contract Price is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"contractPriceCtrl.hasError('isPositiveError')\\\">\\r\\n                        Price must be positive.\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"contractPriceCtrl.isRequired && contractPriceCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\"\\r\\n             class=\\\"displayMode\\\">\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"contractValueCtrl\\\"\\r\\n                       placeholder=\\\"Contract Value\\\"\\r\\n                       [title]=\\\"contractValueToolTip\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"35%\\\">\\r\\n                <atlas-masterdata-user-preferences-input fxFlex=\\\"90%\\\"\\r\\n                                                         [isEditable]=\\\"paymentTermsCtrl.enabled\\\"\\r\\n                                                         [fieldControl]=\\\"paymentTermsCtrl\\\"\\r\\n                                                         [options]=\\\"filteredPaymentTermsList\\\"\\r\\n                                                         label=\\\"Payment Terms\\\"\\r\\n                                                         displayProperty=\\\"paymentTermCode\\\"\\r\\n                                                         [selectProperties]=\\\"['paymentTermCode','description']\\\"\\r\\n                                                         [errorMap]=\\\"paymentTermsErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Payment Terms\\\"\\r\\n                                                         gridId=\\\"paymentTermsGrid\\\"\\r\\n                                                         (optionSelected)=\\\"onPaymentTermSelected($event)\\\"\\r\\n                                                         [dataLoader]=\\\"paymentTermsDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"45%\\\"\\r\\n                              [fieldControl]=\\\"paymentTermsDescriptionCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Payment Term Description'\\\">\\r\\n            </atlas-form-input>\\r\\n\\r\\n        </div>\\r\\n        <mat-accordion class=\\\"price-accordion\\\">\\r\\n            <mat-expansion-panel [expanded]=\\\"isExpanded\\\">\\r\\n                <mat-expansion-panel-header (click)=\\\"onPanelClicked()\\\"\\r\\n                                            [collapsedHeight]=\\\"'25px'\\\"\\r\\n                                            [expandedHeight]=\\\"'25px'\\\">\\r\\n                </mat-expansion-panel-header>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\"\\r\\n                     fxLayoutGap=\\\"5%\\\"\\r\\n                     class=\\\"price-expansion-section\\\">\\r\\n                    <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                             name=\\\"toggleStyle\\\"\\r\\n                                             [formControl]=\\\"discountPremiumCtrl\\\">\\r\\n                        <mat-button-toggle [value]=\\\"DiscountType.Discount\\\"\\r\\n                                           (change)=\\\"onDiscPremToggleClicked($event)\\\">\\r\\n                            {{DiscountType[DiscountType.Discount]}}</mat-button-toggle>\\r\\n                        <mat-button-toggle [value]=\\\"DiscountType.Premium\\\"\\r\\n                                           (change)=\\\"onDiscPremToggleClicked($event)\\\">\\r\\n                            {{DiscountType[DiscountType.Premium]}}</mat-button-toggle>\\r\\n                    </mat-button-toggle-group>\\r\\n                    <div fxFlex=\\\"15%\\\"\\r\\n                         [class.displayMode]=\\\"isShow\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"D/P Ccy\\\"\\r\\n                                   [matAutocomplete]=\\\"dpCurrencies\\\"\\r\\n                                   [formControl]=\\\"discountPremiumCurrencyCtrl\\\"\\r\\n                                   [matTooltip]=\\\"'D/P Currency'\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [required]=\\\"discountPremiumCurrencyCtrl.isRequired\\\">\\r\\n                            <mat-autocomplete #dpCurrencies=\\\"matAutocomplete\\\"\\r\\n                                              [panelWidth]=\\\"panelSize\\\">\\r\\n                                <mat-option *ngFor=\\\"let dpcurrency of filteredCurrencyList\\\"\\r\\n                                            [value]=\\\"dpcurrency.currencyCode\\\">\\r\\n                                    {{dpcurrency.currencyCode}} | {{dpcurrency.description}}\\r\\n                                </mat-option>\\r\\n                            </mat-autocomplete>\\r\\n                            <mat-error *ngIf=\\\"discountPremiumCurrencyCtrl.hasError('inDropdownList')\\\">\\r\\n                                Value not in list\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"15%\\\"\\r\\n                         [class.displayMode]=\\\"isShow\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-select placeholder=\\\"D/P Type\\\"\\r\\n                                        [formControl]=\\\"discountPremiumTypeCtrl\\\"\\r\\n                                        [matTooltip]=\\\"'D/P Type'\\\"\\r\\n                                        [required]=\\\"discountPremiumTypeCtrl.isRequired\\\">\\r\\n                                <mat-option [value]=\\\"DiscountBasis.Rate\\\">{{DiscountBasis[DiscountBasis.Rate]}}\\r\\n                                </mat-option>\\r\\n                                <mat-option [value]=\\\"DiscountBasis.Percent\\\">{{DiscountBasis[DiscountBasis.Percent]}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"15%\\\"\\r\\n                         [class.displayMode]=\\\"isShow\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"D/P value\\\"\\r\\n                                   [value]=\\\"0\\\"\\r\\n                                   [formControl]=\\\"discountPremiumValueCtrl\\\"\\r\\n                                   [matTooltip]=\\\"'D/P Value'\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   type=\\\"number\\\"\\r\\n                                   [required]=\\\"discountPremiumValueCtrl.isRequired\\\">\\r\\n                            <mat-error *ngIf=\\\"discountPremiumValueCtrl.hasError('min')\\\">\\r\\n                                Value must be positive.\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\">\\r\\n                    <div fxFlex=\\\"30%\\\"\\r\\n                         [class.displayMode]=\\\"isShow\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   [matDatepicker]=\\\"empicker\\\"\\r\\n                                   [formControl]=\\\"estimatedMaturityDateCtrl\\\"\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   placeholder=\\\"Estimated Maturity\\\">\\r\\n                            <mat-datepicker-toggle matSuffix\\r\\n                                                   [for]=\\\"empicker\\\"></mat-datepicker-toggle>\\r\\n                            <mat-datepicker #empicker></mat-datepicker>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-expansion-panel>\\r\\n        </mat-accordion>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".mat-button-toggle-label-content {\\n  padding: 0 10px;\\n  font-size: 1em; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { conformToMask } from 'text-mask-core';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { isPositive } from '../../../../../shared/directives/number-validators.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Commodity } from '../../../../../shared/entities/commodity.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { PaymentTerm } from '../../../../../shared/entities/payment-term.entity';\r\nimport { PriceUnit } from '../../../../../shared/entities/price-unit.entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { CreditAgainstTypes } from '../../../../../shared/enums/credit-against-type.enum';\r\nimport { DiscountBasis } from '../../../../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from '../../../../../shared/enums/discount-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { ConvertToNumber, CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { AtlasNumber } from './../../../../../shared/entities/atlas-number.entity';\r\nimport { PermissionLevels } from './../../../../../shared/enums/permission-level.enum';\r\nimport { PaymentTermsDataLoader } from './../../../../../shared/services/masterdata/paymentTerms-data-loader';\r\nimport { TradeImageField } from './../../../../../shared/services/trading/dtos/tradeImageField';\r\n\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-price-form-component',\r\n    templateUrl: './price-form-component.component.html',\r\n    styleUrls: ['./price-form-component.component.scss'],\r\n    providers: [PaymentTermsDataLoader],\r\n})\r\nexport class PriceFormComponent extends BaseFormComponent implements OnInit {\r\n    DiscountType = DiscountTypes;\r\n    DiscountBasis = DiscountBasis;\r\n    selectedDiscPrem: DiscountTypes = undefined; // this variable is used to help unselect the prem/disc toggle\r\n\r\n    isShow: boolean = false;\r\n    isEdit: boolean = true;\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n\r\n    isInputField = false;\r\n    quantityVal;\r\n    weightUnit: WeightUnit;\r\n\r\n    currencyVal: any;\r\n    discountPremiumValue: string;\r\n    isTradeImage = false;\r\n    company: string;\r\n    currencyPrivilege: boolean = false;\r\n    priceCodePrivilege: boolean = false;\r\n    contractPricePrivilege: boolean = false;\r\n    contractValuePrivilege: boolean = false;\r\n    paymentTermsPrivilege: boolean = false;\r\n    priceToolTip: any = '';\r\n    contractValueToolTip: any = '';\r\n    currencyCtrl = new AtlasFormControl('CurrencyCode');\r\n    priceUnitIdCtrl = new AtlasFormControl('PricingMethodId');\r\n    contractPriceCtrl = new AtlasFormControl('Price');\r\n    contractValueCtrl = new AtlasFormControl('ContractedValue');\r\n    paymentTermsCtrl = new AtlasFormControl('PaymentTermId');\r\n    paymentTermsDescriptionCtrl = new AtlasFormControl('Description');\r\n\r\n    discountPremiumCtrl = new AtlasFormControl('FlatPricePremiumOrDiscount');\r\n    discountPremiumCurrencyCtrl = new AtlasFormControl('PremiumDiscountCurrency');\r\n    discountPremiumTypeCtrl = new AtlasFormControl('Type');\r\n    discountPremiumValueCtrl = new AtlasFormControl('PremiumDiscountValue', isPositive());\r\n\r\n    estimatedMaturityDateCtrl = new AtlasFormControl('EstimatedMaturityDate');\r\n\r\n    filteredCurrencyList: Currency[];\r\n    filteredPriceCodeList: PriceUnit[];\r\n    filteredPaymentTermsList: PaymentTerm[];\r\n    filteredDiscPremCurrencyList: Currency[];\r\n    tradeImageDetails: TradeImageField[] = [];\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Currencies,\r\n        MasterDataProps.PriceUnits,\r\n        MasterDataProps.PaymentTerms,\r\n    ];\r\n\r\n    mask = CustomNumberMask(12, 10, true);\r\n\r\n    paymentTermsErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Payment Term is required')\r\n        .set('inDropdownList', 'Value not in list.');\r\n    isExpanded: boolean = false;\r\n    startPositionMonthType: string = 'start';\r\n    endPositionMonthType: string = 'end';\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public paymentTermsDataLoader: PaymentTermsDataLoader,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.filteredCurrencyList = this.masterdata.currencies;\r\n                this.currencyCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.currencies,\r\n                        ['currencyCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.filteredPriceCodeList = this.masterdata.priceUnits;\r\n                this.priceUnitIdCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredPriceCodeList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.priceUnits,\r\n                        ['priceCode', 'description'],\r\n                    );\r\n                    this.setContractValue();\r\n                });\r\n\r\n                this.filteredPaymentTermsList = this.masterdata.paymentTerms;\r\n                this.paymentTermsCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredPaymentTermsList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.paymentTerms,\r\n                        ['paymentTermCode', 'description'],\r\n                    );\r\n                    if (this.paymentTermsCtrl.valid || !this.paymentTermsCtrl.value) {\r\n                        this.onPaymentTermSelected(this.paymentTermsCtrl.value);\r\n                    }\r\n                });\r\n\r\n                this.filteredDiscPremCurrencyList = this.masterdata.currencies;\r\n                this.discountPremiumCurrencyCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredDiscPremCurrencyList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.currencies,\r\n                        ['currencyCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.setValidators();\r\n                this.bindConfiguration();\r\n            });\r\n\r\n        this.contractPriceCtrl.valueChanges.subscribe((v) =>\r\n            this.setContractValue(),\r\n        );\r\n        this.discountPremiumCurrencyCtrl.valueChanges.subscribe((v) =>\r\n            this.setContractValue(),\r\n        );\r\n        this.discountPremiumTypeCtrl.valueChanges.subscribe((v) => this.setContractValue());\r\n        this.discountPremiumValueCtrl.valueChanges.subscribe((v) => this.setContractValue());\r\n        this.currencyCtrl.valueChanges.subscribe((v) => this.setContractValue());\r\n        this.contractValueCtrl.disable({ emitEvent: false });\r\n\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isTradeImage = true;\r\n        }\r\n        this.checkPriceFormPrivileges();\r\n    }\r\n\r\n    setValidators() {\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.priceUnitIdCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.priceUnits,\r\n                    nameof<PriceUnit>('priceUnitId'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.contractPriceCtrl.setValidators(\r\n            Validators.compose([isPositive()]),\r\n        );\r\n        this.paymentTermsCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.paymentTerms,\r\n                nameof<PaymentTerm>('paymentTermCode'),\r\n            ),\r\n        );\r\n\r\n        this.discountPremiumCurrencyCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(this.masterdata.currencies, nameof<Currency>('currencyCode'))]));\r\n        this.discountPremiumValueCtrl.setValidators(Validators.compose([Validators.min(0)]));\r\n\r\n        this.setDiscountPremiumValidators();\r\n    }\r\n\r\n    getCurrency(currencyValue) {\r\n        this.currencyVal = currencyValue;\r\n    }\r\n\r\n    onPaymentTermSelected(paymentTermCode: PaymentTerm) {\r\n        if (!this.paymentTermsCtrl.valid || !paymentTermCode) {\r\n            if (this.paymentTermsDescriptionCtrl.value) {\r\n                this.paymentTermsDescriptionCtrl.patchValue('');\r\n            }\r\n            return;\r\n        }\r\n        const selectedPaymentTerm = this.masterdata.paymentTerms.find(\r\n            (payTerm) => payTerm.paymentTermCode === paymentTermCode.paymentTermCode,\r\n        );\r\n        if (selectedPaymentTerm) {\r\n            this.paymentTermsDescriptionCtrl.patchValue(\r\n                selectedPaymentTerm.description,\r\n            );\r\n\r\n            this.formGroup.updateValueAndValidity();\r\n        }\r\n    }\r\n\r\n    setContractValue() {\r\n        if (this.masterdata === undefined) {\r\n            return;\r\n        }\r\n\r\n        const weightCodeConversion = this.weightUnit\r\n            ? this.weightUnit.conversionFactor\r\n            : undefined;\r\n        const selectedPriceUnit = this.masterdata.priceUnits.filter(\r\n            (priceUnit) => priceUnit.priceUnitId === this.priceUnitIdCtrl.value,\r\n        );\r\n        const priceCodeConversion =\r\n            selectedPriceUnit.length > 0\r\n                ? selectedPriceUnit[0].conversionFactor\r\n                : undefined;\r\n\r\n        if (!weightCodeConversion || !priceCodeConversion\r\n            || !(this.quantityVal || this.quantityVal === 0)\r\n            || !this.contractPriceCtrl.value) {\r\n            this.contractValueCtrl.setValue('');\r\n            return;\r\n        }\r\n        const contractPrice = this.contractPriceCtrl.value.toString().replace(/,/g, '');\r\n        let contractPriceDecimal: AtlasNumber = new AtlasNumber(contractPrice);\r\n        const quantity = this.quantityVal.toString().replace(/,/g, '');\r\n        const quantityDecimal: AtlasNumber = new AtlasNumber(quantity);\r\n\r\n        if (this.discountPremiumCtrl.value !== undefined &&\r\n            this.currencyCtrl !== this.discountPremiumCurrencyCtrl &&\r\n            this.selectedDiscPrem !== undefined) {\r\n            // discountPremiumValue exists\r\n\r\n            if ((this.discountPremiumCtrl.value && this.selectedDiscPrem) != null) {\r\n                this.isExpanded = true;\r\n            }\r\n\r\n            let discountPremiumContractedPrice: number | AtlasNumber = 0;\r\n            const discountPremiumSign = ((this.discountPremiumCtrl.value as DiscountTypes) === DiscountTypes.Discount ? -1 : 1);\r\n            // tslint:disable-next-line:prefer-conditional-expression\r\n            if ((this.discountPremiumTypeCtrl.value as DiscountBasis) === DiscountBasis.Rate) {\r\n                discountPremiumContractedPrice = this.discountPremiumValueCtrl.value * discountPremiumSign;\r\n            } else if ((this.discountPremiumTypeCtrl.value as DiscountBasis) === DiscountBasis.Percent) {\r\n                discountPremiumContractedPrice = contractPriceDecimal.bigNumber.toNumber()\r\n                    * ((this.discountPremiumValueCtrl.value * discountPremiumSign / 100));\r\n            }\r\n\r\n            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);\r\n        }\r\n\r\n        const contractValue = contractPriceDecimal.times(quantityDecimal).times(\r\n            weightCodeConversion *\r\n            priceCodeConversion).toString();\r\n\r\n        const contractValueFormatted = conformToMask(contractValue, this.mask, { guide: false }).conformedValue;\r\n\r\n        this.contractValueCtrl.setValue(contractValueFormatted);\r\n    }\r\n\r\n    commodityCodeSelected(commodity: Commodity) {\r\n        if (!this.currencyCtrl.value) {\r\n            this.currencyCtrl.setValue(commodity.currency);\r\n        }\r\n        if (!this.priceUnitIdCtrl.value) {\r\n            this.priceUnitIdCtrl.setValue(commodity.priceUnitId);\r\n        }\r\n        this.currencyCtrl.updateValueAndValidity();\r\n        this.priceUnitIdCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    onDiscPremToggleClicked(event) {\r\n        const discountType = event.value as DiscountTypes;\r\n        if (this.selectedDiscPrem !== undefined\r\n            && discountType === this.selectedDiscPrem) {\r\n            this.discountPremiumCtrl.setValue('');\r\n            this.selectedDiscPrem = undefined;\r\n        } else {\r\n            this.selectedDiscPrem = discountType;\r\n        }\r\n        this.setDiscountPremiumValidators();\r\n        this.discountPremiumCurrencyCtrl.reset();\r\n        this.discountPremiumTypeCtrl.reset();\r\n        this.discountPremiumValueCtrl.reset();\r\n    }\r\n\r\n    setDiscountPremiumValidators() {\r\n        if (this.selectedDiscPrem || this.selectedDiscPrem === 0) {\r\n            this.discountPremiumCurrencyCtrl.enable();\r\n            this.discountPremiumTypeCtrl.enable();\r\n            this.discountPremiumValueCtrl.enable();\r\n\r\n        } else {\r\n            this.discountPremiumCurrencyCtrl.disable();\r\n            this.discountPremiumTypeCtrl.disable();\r\n            this.discountPremiumValueCtrl.disable();\r\n        }\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.isEdit = isEdit;\r\n        this.isShow = !isEdit;\r\n\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n        if (this.model.priceUnitId === 0) {\r\n            this.model.priceUnitId = null;\r\n        }\r\n\r\n        if (this.model.priceUnitId != null) {\r\n            this.formGroup.patchValue({ priceUnitIdCtrl: this.model.priceUnitId });\r\n        }\r\n        if (this.model.currency != null) {\r\n            this.formGroup.patchValue({ currencyCtrl: this.model.currency });\r\n        }\r\n        if (this.model.price != null) {\r\n            this.formGroup.patchValue({\r\n                contractPriceCtrl: isEdit ? this.model.price :\r\n                    this.model.price.toFixed(4),\r\n            });\r\n        }\r\n\r\n        if (this.model.paymentTerms != null) {\r\n            const selectedPaymentTerm = this.masterdata.paymentTerms.find(\r\n                (paymentTerms) => paymentTerms.paymentTermCode === this.model.paymentTerms,\r\n            );\r\n            if (selectedPaymentTerm) {\r\n                this.filteredPaymentTermsList = [selectedPaymentTerm];\r\n                this.paymentTermsCtrl.patchValue(selectedPaymentTerm);\r\n                this.onPaymentTermSelected(selectedPaymentTerm);\r\n            }\r\n            if (this.model.estimatedMaturityDate) {\r\n                this.estimatedMaturityDateCtrl.setValue(this.model.estimatedMaturityDate);\r\n            } else {\r\n                const creditDays = selectedPaymentTerm ? selectedPaymentTerm.creditDays : null;\r\n                const creditAgainst = selectedPaymentTerm ? selectedPaymentTerm.creditAgainst : null;\r\n\r\n                let maturityDate = this.companyManager.getCurrentCompanyDate().toDate();\r\n                switch (creditAgainst) {\r\n                    case CreditAgainstTypes.CurrentDate:\r\n                        maturityDate = this.companyManager.getCurrentCompanyDate().toDate();\r\n                        break;\r\n                    case CreditAgainstTypes.ArrivalDate:\r\n                        maturityDate = new Date(this.model.deliveryPeriodEnd.getTime());\r\n                        break;\r\n                    case CreditAgainstTypes.InvoiceDate:\r\n                        maturityDate = this.model.invoiceDate ?\r\n                            new Date(this.model.invoiceDate) :\r\n                            this.calculateMaturityDateOnShippment();\r\n                        break;\r\n                    default:\r\n                        // Need to call new Date(date) to avoid modifying the blDate when changing maturityDate\r\n                        maturityDate = this.model.blDate ?\r\n                            new Date(this.model.blDate) :\r\n                            this.calculateMaturityDateOnShippment();\r\n                        break;\r\n                }\r\n                maturityDate.setDate(maturityDate.getDate() + creditDays);\r\n                this.estimatedMaturityDateCtrl.setValue(maturityDate);\r\n            }\r\n        }\r\n\r\n        if (this.model.premiumDiscountBasis != null) {\r\n            this.discountPremiumTypeCtrl.setValue(this.model.premiumDiscountBasis);\r\n        }\r\n\r\n        if (this.model.premiumDiscountCurrency != null) {\r\n            this.discountPremiumCurrencyCtrl.setValue(this.model.premiumDiscountCurrency);\r\n        }\r\n\r\n        if (this.model.premiumDiscountValue != null) {\r\n            this.discountPremiumValueCtrl.setValue(this.model.premiumDiscountValue);\r\n        }\r\n\r\n        this.selectedDiscPrem = this.model.premiumDiscountTypeId as DiscountTypes;\r\n        this.setDiscountPremiumValidators();\r\n\r\n        this.discountPremiumCtrl.setValue(this.model.premiumDiscountTypeId);\r\n\r\n        if (this.model.contractedValue || this.model.contractedValue === '0') {\r\n\r\n            this.formGroup.patchValue({\r\n                contractValueCtrl: isEdit ?\r\n                    this.formatpriceContractValue(Number(this.removeExponentialIfExist(this.model.contractedValue))) :\r\n                    this.formatContractValue(Number(this.removeExponentialIfExist(this.model.contractedValue))),\r\n            });\r\n        }\r\n\r\n        if (!isEdit) {\r\n            this.formGroup.disable({ emitEvent: false });\r\n            this.priceToolTip = this.formatpriceContractValue(this.model.price);\r\n            this.contractValueToolTip = this.formatpriceContractValue(Number(this.model.contractedValue));\r\n        } else if (this.isTradeImage) {\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n                const checkCurrencyCodeIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'CurrencyCode');\r\n                if (checkCurrencyCodeIsEdit && !checkCurrencyCodeIsEdit.isEdit) {\r\n                    this.currencyCtrl.disable();\r\n                } else {\r\n                    this.currencyCtrl.enable();\r\n                }\r\n\r\n                const checkPricingMethodIdIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PricingMethodId');\r\n                if (checkPricingMethodIdIsEdit && !checkPricingMethodIdIsEdit.isEdit) {\r\n                    this.priceUnitIdCtrl.disable();\r\n                } else {\r\n                    this.priceUnitIdCtrl.enable();\r\n                }\r\n                const checkPriceIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'Price');\r\n                if (checkPriceIsEdit && !checkPriceIsEdit.isEdit) {\r\n                    this.contractPriceCtrl.disable();\r\n                } else {\r\n                    this.contractPriceCtrl.enable();\r\n                }\r\n                const checkPaymentTermIdIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PaymentTermId');\r\n                if (checkPaymentTermIdIsEdit && !checkPaymentTermIdIsEdit.isEdit) {\r\n                    this.paymentTermsCtrl.disable();\r\n                } else {\r\n                    this.paymentTermsCtrl.enable();\r\n                }\r\n\r\n                const checkPremiumDiscountBasisIsEdit = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PremiumDiscountBasis');\r\n                if (checkPremiumDiscountBasisIsEdit && !checkPremiumDiscountBasisIsEdit.isEdit) {\r\n                    this.discountPremiumCtrl.disable();\r\n                } else {\r\n                    this.discountPremiumCtrl.enable();\r\n                }\r\n\r\n                const checkCurrencyCodeIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'CurrencyCode');\r\n                if (checkCurrencyCodeIsCopy && !checkCurrencyCodeIsCopy.isCopy) {\r\n                    this.currencyCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkPricingMethodIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PriceUnitId');\r\n                if (checkPricingMethodIdIsCopy && !checkPricingMethodIdIsCopy.isCopy) {\r\n                    this.priceUnitIdCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkPriceIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'Price');\r\n                if (checkPriceIsCopy && !checkPriceIsCopy.isCopy) {\r\n                    this.contractPriceCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkPaymentTermIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PaymentTermId');\r\n                if (checkPaymentTermIdIsCopy && !checkPaymentTermIdIsCopy.isCopy) {\r\n                    this.paymentTermsCtrl.patchValue(null);\r\n                    this.paymentTermsDescriptionCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkPremiumDiscountCurrencyIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PremiumDiscountCurrency');\r\n                if (checkPremiumDiscountCurrencyIsCopy && !checkPremiumDiscountCurrencyIsCopy.isCopy) {\r\n                    this.discountPremiumCurrencyCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkPremiumDiscountValueIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PremiumDiscountValue');\r\n                if (checkPremiumDiscountValueIsCopy && !checkPremiumDiscountValueIsCopy.isCopy) {\r\n                    this.discountPremiumValueCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkEstimatedMaturityDateIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'EstimatedMaturityDate');\r\n                if (checkEstimatedMaturityDateIsCopy && !checkEstimatedMaturityDateIsCopy.isCopy) {\r\n                    this.estimatedMaturityDateCtrl.patchValue(null);\r\n                }\r\n            }\r\n\r\n        } else if (this.model.invoiceReference &&\r\n            this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= PermissionLevels.None) {\r\n            this.currencyCtrl.disable({ emitEvent: false });\r\n            this.contractPriceCtrl.disable({ emitEvent: false });\r\n            this.priceUnitIdCtrl.disable({ emitEvent: false });\r\n            this.discountPremiumCtrl.disable({ emitEvent: false });\r\n            this.discountPremiumCurrencyCtrl.disable({ emitEvent: false });\r\n            this.discountPremiumTypeCtrl.disable({ emitEvent: false });\r\n            this.discountPremiumValueCtrl.disable({ emitEvent: false });\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    calculateMaturityDateOnShippment() {\r\n        let dateToConsider: Date = new Date();\r\n        if (this.model.positionMonthType.toLowerCase() === this.startPositionMonthType.toLowerCase()) {\r\n            dateToConsider = new Date(this.model.deliveryPeriodStart);\r\n            return moment(dateToConsider.setMonth(dateToConsider.getMonth()\r\n                + this.model.positionMonthIndex)).endOf('month').toDate();\r\n        } else if (this.model.positionMonthType.toLowerCase() === this.endPositionMonthType.toLowerCase()) {\r\n            dateToConsider = new Date(this.model.deliveryPeriodEnd);\r\n            return moment(dateToConsider.setMonth(dateToConsider.getMonth()\r\n                + this.model.positionMonthIndex)).endOf('month').toDate();\r\n        }\r\n    }\r\n\r\n    removeExponentialIfExist(value) {\r\n        if (value) {\r\n            const newValue = new AtlasNumber(value);\r\n            return newValue.toString();\r\n        }\r\n        return value;\r\n    }\r\n\r\n    formatContractValue(value: number) {\r\n        if (value) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    formatpriceContractValue(value: number) {\r\n        if (value) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 10 }).format(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n\r\n        section.currencyCode = this.currencyCtrl.value;\r\n        section.priceUnitId = ((this.priceUnitIdCtrl.value === '' && !this.priceUnitIdCtrl.isRequired) ? 0 : this.priceUnitIdCtrl.value);\r\n\r\n        section.price = ((this.contractPriceCtrl.value === '' && !this.contractPriceCtrl.isRequired) ? 0 : this.contractPriceCtrl.value);\r\n        section.contractedValue = this.contractValueCtrl.value ? this.contractValueCtrl.value : 0;\r\n        const paymentTermCode: PaymentTerm = this.paymentTermsCtrl.value;\r\n        section.paymentTerms = paymentTermCode ? paymentTermCode.paymentTermCode : null;\r\n\r\n        section.discountPremiumCurrency = this.discountPremiumCurrencyCtrl.value;\r\n        section.discountPremiumType = (this.selectedDiscPrem !== undefined) ? (this.discountPremiumCtrl.value as DiscountTypes) : null;\r\n        section.discountPremiumBasis = this.discountPremiumTypeCtrl.value ? this.discountPremiumTypeCtrl.value : null;\r\n        section.discountPremiumValue = this.discountPremiumValueCtrl.value ? this.discountPremiumValueCtrl.value : null;\r\n        section.estimatedMaturityDate = this.estimatedMaturityDateCtrl.value ? this.estimatedMaturityDateCtrl.value : null;\r\n        section.invoiceDate = this.model.invoiceDate;\r\n        return section;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            currencyCtrl: this.currencyCtrl,\r\n            priceUnitIdCtrl: this.priceUnitIdCtrl,\r\n            contractPriceCtrl: this.contractPriceCtrl,\r\n            contractValueCtrl: this.contractValueCtrl,\r\n            paymentTermsCtrl: this.paymentTermsCtrl,\r\n            paymentTermsDescriptionCtrl: this.paymentTermsDescriptionCtrl,\r\n            discountPremiumCtrl: this.discountPremiumCtrl,\r\n            discountPremiumcurrencyCtrl: this.discountPremiumCurrencyCtrl,\r\n            discountPremiumtypeCtrl: this.discountPremiumTypeCtrl,\r\n            discountPremiumvalueCtrl: this.discountPremiumValueCtrl,\r\n            estimatedMaturityDateCtrl: this.estimatedMaturityDateCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    displayPriceUnit(priceUnitId: number): string {\r\n        if (priceUnitId) {\r\n            const selectedUnit = this.masterdata.priceUnits.filter(\r\n                (priceUnit) => priceUnit.priceUnitId === priceUnitId,\r\n            );\r\n\r\n            if (selectedUnit.length > 0) {\r\n                return selectedUnit[0].priceCode;\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n    checkPriceFormPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.currencyPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'Currency');\r\n                this.priceCodePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'PriceCode');\r\n                this.contractPricePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'ContractPrice');\r\n                this.contractValuePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'ContractValue');\r\n                this.paymentTermsPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'PaymentTerms');\r\n            }\r\n        });\r\n        if (!this.currencyPrivilege) {\r\n            this.currencyCtrl.disable();\r\n        }\r\n        if (!this.priceCodePrivilege) {\r\n            this.priceUnitIdCtrl.disable();\r\n        }\r\n        if (!this.contractPricePrivilege) {\r\n            this.contractPriceCtrl.disable();\r\n        }\r\n        if (!this.contractValuePrivilege) {\r\n            this.contractValueCtrl.disable();\r\n        }\r\n        if (!this.paymentTermsPrivilege) {\r\n            this.paymentTermsCtrl.disable();\r\n            this.paymentTermsDescriptionCtrl.disable();\r\n        }\r\n\r\n    }\r\n    onPanelClicked() {\r\n        this.isExpanded = !this.isExpanded;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Quantity</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!weightUnitIdCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!weightUnitIdCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"weightUnitIdCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Quantity Code\\\"\\r\\n                           [required]=\\\"weightUnitIdCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"quantityCode\\\"\\r\\n                           [formControl]=\\\"weightUnitIdCtrl\\\"\\r\\n                           [matTooltip]=\\\"'Quantity Codes'\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           (focusout)=\\\"onFocusOut()\\\"\\r\\n                           (blur)=\\\"quantityCodeSet()\\\">\\r\\n                    <mat-icon *ngIf=\\\"isEdit\\\"\\r\\n                              class=\\\"bookmark-icon\\\"\\r\\n                              matSuffix>bookmark</mat-icon>\\r\\n                    <mat-autocomplete #quantityCode=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      [displayWith]=\\\"displayQuantityUnit.bind(this)\\\">\\r\\n                        <mat-option *ngFor=\\\"let qtCode of filteredQuantityCode\\\"\\r\\n                                    [value]=\\\"qtCode.weightUnitId\\\">\\r\\n                            {{qtCode.weightCode}} |\\r\\n                            {{qtCode.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"weightUnitIdCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"weightUnitIdCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"weightUnitIdCtrl.isRequired && weightUnitIdCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"quantityCtrl\\\"\\r\\n                                  [required]=\\\"quantityCtrl.isRequired\\\"\\r\\n                                  [textMask]=\\\"{mask:mask}\\\"\\r\\n                                  [isEditable]=\\\"isInputField|| isInputMode\\\"\\r\\n                                  [title]=\\\"quantityToolTip\\\"\\r\\n                                  label=\\\"Quantity\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap\\\"\\r\\n                                  type=\\\"number\\\"\\r\\n                                  [hasWarning]=\\\"quantityWarning\\\"\\r\\n                                  warningMessage=\\\"Quantity is 0\\\"\\r\\n                                  (blur)=\\\"onQuantityBlur($event.target.value)\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"quantityContractedCtrl\\\"\\r\\n                                  [required]=\\\"quantityContractedCtrl.isRequired\\\"\\r\\n                                  [textMask]=\\\"{mask:mask}\\\"\\r\\n                                  [isEditable]=\\\"isInputField|| isInputMode\\\"\\r\\n                                  [title]=\\\"contractedQtyToolTip\\\"\\r\\n                                  label=\\\"Quantity Contracted\\\"\\r\\n                                  type=\\\"number\\\"\\r\\n                                  [errorMap]=\\\"inputErrorMap \\\"\\r\\n                                  [hasWarning]=\\\"quantityContractedWarning\\\"\\r\\n                                  warningMessage=\\\"Quantity Contracted is 0\\\"\\r\\n                                  (blur)=\\\"onContractedQuantityBlur($event.target.value)\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { TradeImageField } from '../../../../../shared/services/trading/dtos/tradeImageField';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { AtlasNumber } from './../../../../../shared/entities/atlas-number.entity';\r\nimport { Section } from './../../../../../shared/entities/section.entity';\r\nimport { ContractStatus } from './../../../../../shared/enums/contract-status.enum';\r\nimport { PermissionLevels } from './../../../../../shared/enums/permission-level.enum';\r\nimport { biggerValue } from './quantity-form-control-validator.validator';\r\n\r\n@Component({\r\n    selector: 'atlas-custom-quantity-form-component',\r\n    templateUrl: './quantity-form-component.component.html',\r\n    styleUrls: ['./quantity-form-component.component.scss'],\r\n})\r\nexport class QuantityFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly quantitySelected = new EventEmitter<number>();\r\n    @Output() readonly quantityCodeSelected = new EventEmitter<WeightUnit>();\r\n\r\n    isInputMode: boolean = true;\r\n    quantityWarning: boolean = false;\r\n    quantityContractedWarning: boolean = false;\r\n    isSplitAndTranche = true;\r\n    isTradeImage = false;\r\n    isInputField = false;\r\n    inputErrorMap: Map<string, string> = new Map();\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    section: Section = new Section();\r\n    sectionId: number;\r\n    tradeImageDetails: TradeImageField[] = [];\r\n    isEdit: boolean = true;\r\n    quantityToolTip: any = '';\r\n    contractedQtyToolTip: any = '';\r\n    weightUnitIdCtrl = new AtlasFormControl('WeightUnitId');\r\n    quantityCtrl = new AtlasFormControl('Quantity');\r\n    quantityContractedCtrl = new AtlasFormControl('OriginalQuantity');\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [MasterDataProps.WeightUnits];\r\n\r\n    filteredQuantityCode: WeightUnit[];\r\n    company: string;\r\n    quantityPrivilege: boolean = false;\r\n    quantityCodePrivilege: boolean = false;\r\n    quantityContractedPrivilege: boolean = false;\r\n    zeroQuantityContracted: string = '0.000';\r\n\r\n    mask = CustomNumberMask(12, 10, true);\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.inputErrorMap\r\n            .set('required', 'Required *')\r\n            .set(\r\n                'min',\r\n                'Quantity must be positive.',\r\n            )\r\n            .set(\r\n                'inferiorValue',\r\n                'Should be equal to or greater than Quantity',\r\n            );\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.filteredQuantityCode = this.masterdata.weightUnits;\r\n                this.weightUnitIdCtrl.valueChanges.subscribe((input) => {\r\n\r\n                    this.filteredQuantityCode = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.weightUnits,\r\n                        ['weightCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.setValidators();\r\n                this.bindConfiguration();\r\n                this.quantityCodeSet();\r\n            });\r\n\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isTradeImage = true;\r\n            this.isInputField = true;\r\n            this.isSplitAndTranche = JSON.parse(this.route.snapshot.queryParams.splitAndTranche);\r\n        }\r\n        this.checkQuantityFormPrivileges();\r\n    }\r\n\r\n    setValidators() {\r\n        this.weightUnitIdCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.weightUnits,\r\n                    nameof<WeightUnit>('weightUnitId'),\r\n                ),\r\n            ]));\r\n\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        if (this.sectionId === 0) {\r\n            this.formGroup.setValidators(biggerValue('quantityContractedCtrl', 'quantityCtrl'));\r\n        }\r\n    }\r\n\r\n    onQuantityBlur(targetValue, isInit = false) {\r\n        if (this.quantityCtrl.valid) {\r\n            const res = this.quantityCtrl.value;\r\n\r\n            // If contract is not approved and not splitted/tranched, then update quantity contracted\r\n            if (this.isTradeImage || (this.section.status !== ContractStatus.Approved && !this.section.sectionOriginId &&\r\n                (this.section.childSections && this.section.childSections.length === 0) && !isInit)) {\r\n                this.quantityContractedCtrl.patchValue(targetValue);\r\n            }\r\n\r\n            this.quantitySelected.emit(res);\r\n            this.quantityWarning = (this.quantityCtrl.valid)\r\n                && (Number(this.quantityCtrl.value) === 0);\r\n            this.quantityContractedWarning = (this.quantityContractedCtrl.valid)\r\n                && (Number(this.quantityContractedCtrl.value) === 0) && (Number(this.quantityCtrl.value) === 0);\r\n\r\n        }\r\n        this.quantityContractedCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    onContractedQuantityBlur(targetValue) {\r\n        const res = this.quantityContractedCtrl.value;\r\n\r\n        // If contract is not approved and not splitted/tranched, then update quantity\r\n        if (this.isTradeImage || (this.section.status !== ContractStatus.Approved && !this.section.sectionOriginId &&\r\n            this.section.childSections.length === 0)) {\r\n            this.quantityCtrl.patchValue(targetValue);\r\n            this.quantitySelected.emit(res);\r\n            this.quantityWarning = (this.quantityCtrl.valid)\r\n                && (Number(this.quantityCtrl.value) === 0);\r\n        }\r\n        this.quantityContractedWarning = (this.quantityContractedCtrl.valid)\r\n            && (Number(this.quantityContractedCtrl.value) === 0) && (Number(this.quantityCtrl.value) === 0);\r\n        this.quantityContractedCtrl.updateValueAndValidity();\r\n        this.quantityCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    formatQuantity(value: number) {\r\n        if (value) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(value);\r\n        }\r\n        return value;\r\n    }\r\n    formatEditQuantity(value: number) {\r\n        if (value) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 10 }).format(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    quantityCodeSet() {\r\n        if (this.weightUnitIdCtrl.valid) {\r\n            const res = this.weightUnitIdCtrl.value;\r\n            const weightCode = this.masterdata.weightUnits.filter(\r\n                (weightUnit) => weightUnit.weightUnitId === res,\r\n            );\r\n            this.quantityCodeSelected.emit(\r\n                weightCode.length > 0 ? weightCode[0] : undefined,\r\n            );\r\n        }\r\n    }\r\n\r\n    isEqual(value1, value2) {\r\n        return value1 && value2 && value1 === value2;\r\n    }\r\n\r\n    initForm(entity: Section, isEdit: boolean): any {\r\n        this.isInputMode = isEdit;\r\n        const childCount = entity.childSections ? entity.childSections.length : 0;\r\n        this.section = entity;\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n        this.isEdit = isEdit;\r\n        if (this.model.weightUnitId === 0) {\r\n            this.model.weightUnitId = null;\r\n        }\r\n        if (this.model.weightUnitId != null) {\r\n            this.formGroup.patchValue({ weightUnitIdCtrl: this.model.weightUnitId });\r\n            this.quantityCodeSet();\r\n        }\r\n        if (this.model.originalQuantity != null) {\r\n            const newOriginalValue = new AtlasNumber(this.model.originalQuantity.toString());\r\n            this.formGroup.patchValue({\r\n                quantityContractedCtrl: isEdit ?\r\n                    this.formatEditQuantity(Number(newOriginalValue.toString())) :\r\n                    this.formatQuantity(this.model.originalQuantity),\r\n            });\r\n            if (!this.quantityContractedCtrl.value) {\r\n                this.quantityContractedCtrl.patchValue(this.zeroQuantityContracted);\r\n            }\r\n        }\r\n        if (this.model.quantity != null) {\r\n            const newValue = new AtlasNumber(this.model.quantity.toString());\r\n            this.formGroup.patchValue({\r\n                quantityCtrl: isEdit ?\r\n                    this.formatEditQuantity(Number(newValue.toString())) :\r\n                    this.formatQuantity(this.model.quantity),\r\n            });\r\n            this.onQuantityBlur(\r\n                isEdit ? newValue.toString() : this.formatQuantity(this.model.quantity),\r\n                true);\r\n        }\r\n        if (!this.quantityCtrl.value) {\r\n            this.quantityCtrl.patchValue(this.zeroQuantityContracted);\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n            this.quantityToolTip = this.formatEditQuantity(this.model.quantity);\r\n            this.contractedQtyToolTip = this.formatEditQuantity(this.model.originalQuantity);\r\n        }\r\n        if (!this.isSplitAndTranche) {\r\n            this.quantityCtrl.enable();\r\n            this.weightUnitIdCtrl.enable();\r\n        }\r\n        if (this.isTradeImage && !this.isSplitAndTranche) {\r\n            if (this.model.quantity != null && childCount > 0) {\r\n                const newValue = new AtlasNumber(this.model.quantity.toString());\r\n                this.formGroup.patchValue({ quantityContractedCtrl: newValue.toString() });\r\n            }\r\n        }\r\n        if (this.isTradeImage && this.isSplitAndTranche) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            if (this.model.invoiceReference &&\r\n                this.authorizationService.getPermissionLevel(\r\n                    this.company,\r\n                    'Trades', 'Physicals', 'SuperTradeEdition',\r\n                ) <= PermissionLevels.None) {\r\n                this.weightUnitIdCtrl.disable();\r\n            }\r\n            if (this.model.allocatedTo || this.model.invoiceReference) {\r\n                this.isInputMode = false;\r\n            }\r\n        }\r\n        if (this.isTradeImage) {\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n\r\n                const checkWeightUnitIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'WeightUnitId');\r\n                if (checkWeightUnitIdIsImage && !checkWeightUnitIdIsImage.isCopy) {\r\n                    this.weightUnitIdCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkQuantityIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'Quantity');\r\n                if (checkQuantityIsImage && !checkQuantityIsImage.isCopy) {\r\n                    this.quantityCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkOriginalQuantityIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'OriginalQuantity');\r\n                if (checkOriginalQuantityIsImage && !checkOriginalQuantityIsImage.isCopy) {\r\n                    this.quantityContractedCtrl.patchValue(null);\r\n                }\r\n            }\r\n            const isAllocateContract = JSON.parse(this.route.snapshot.queryParams.allocateContract);\r\n            if (isAllocateContract) {\r\n                this.quantityCtrl.disable();\r\n                this.quantityContractedCtrl.disable();\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    displayQuantityUnit(weightUnitId: number): string {\r\n        if (weightUnitId) {\r\n            const selectedUnit = this.masterdata.weightUnits.filter(\r\n                (weightUnit) => weightUnit.weightUnitId === weightUnitId,\r\n            );\r\n\r\n            if (selectedUnit.length > 0) {\r\n                return selectedUnit[0].weightCode;\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n\r\n        section.quantity = ((this.quantityCtrl.value === '' && !this.quantityCtrl.isRequired) ? 0 : this.quantityCtrl.value);\r\n        section.weightUnitId = ((this.weightUnitIdCtrl.value === '' && !this.weightUnitIdCtrl.isRequired) ? 0 :\r\n            this.weightUnitIdCtrl.value);\r\n        section.originalQuantity = ((this.quantityCtrl.value === '' && !this.quantityCtrl.isRequired) ? 0 : this.quantityCtrl.value);\r\n\r\n        return section;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group(\r\n            {\r\n                weightUnitIdCtrl: this.weightUnitIdCtrl,\r\n                quantityCtrl: this.quantityCtrl,\r\n                quantityContractedCtrl: this.quantityContractedCtrl,\r\n            },\r\n        );\r\n        return super.getFormGroup();\r\n    }\r\n    checkQuantityFormPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.quantityPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'Quantity');\r\n                this.quantityCodePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'QuantityCode');\r\n                this.quantityContractedPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'QuantityContracted');\r\n            }\r\n        });\r\n        if (!this.quantityPrivilege) {\r\n            this.quantityCtrl.disable();\r\n        }\r\n        if (!this.quantityCodePrivilege) {\r\n            this.weightUnitIdCtrl.disable();\r\n        }\r\n        if (!this.quantityContractedPrivilege) {\r\n            this.quantityContractedCtrl.disable();\r\n        }\r\n    }\r\n\r\n    onFocusOut() {\r\n        if (this.filteredQuantityCode.length === 1 && this.filteredQuantityCode[0]['weightUnitId'] !== this.weightUnitIdCtrl.value) {\r\n            // If there is only one option possible, select it\r\n            this.weightUnitIdCtrl.setValue(this.filteredQuantityCode[0]['weightUnitId']);\r\n            this.quantityCodeSet();\r\n        }\r\n    }\r\n}\r\n","import { FormGroup, ValidatorFn } from '@angular/forms';\r\n\r\nexport function biggerValue(biggerFormControlName: string, smallerFormControlName: string, allowEqual: boolean = true): ValidatorFn {\r\n    return (abstractForm: FormGroup): { [key: string]: any } => {\r\n        const maxFormControl = abstractForm.get(biggerFormControlName);\r\n        const minFormControl = abstractForm.get(smallerFormControlName);\r\n\r\n        if (maxFormControl && maxFormControl.value\r\n            && minFormControl && minFormControl.value) {\r\n            const minValue = Number(String(minFormControl.value).replace(/,/gi, ''));\r\n            const maxValue = Number(String(maxFormControl.value).replace(/,/gi, ''));\r\n\r\n            let res = (maxValue > minValue);\r\n            if (allowEqual) {\r\n                res = res || (maxValue === minValue);\r\n            }\r\n\r\n            if (!res) {\r\n                maxFormControl.setErrors({ inferiorValue: true });\r\n                return { inferiorValue: true };\r\n            }\r\n\r\n        }\r\n        return null;\r\n    };\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Shipment Information</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxFlex=\\\"60%\\\"\\r\\n                 [class.displayMode]=\\\"!vesselCtrl.enabled\\\"\\r\\n                 fxLayout=\\\"column\\\">\\r\\n                <atlas-masterdata-user-preferences-input [isEditable]=\\\"vesselNamePrivilege\\\"\\r\\n                                                         [fieldControl]=\\\"vesselCtrl\\\"\\r\\n                                                         [options]=\\\"filteredVessels\\\"\\r\\n                                                         label=\\\"Vessel Name\\\"\\r\\n                                                         displayProperty=\\\"vesselName\\\"\\r\\n                                                         [selectProperties]=\\\"['vesselName']\\\"\\r\\n                                                         [errorMap]=\\\"vesselErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Vessel\\\"\\r\\n                                                         gridId=\\\"vesselsGrid\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxFlex=\\\"50%\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { SectionTraffic } from '../../../../../shared/entities/section-traffic.entity';\r\nimport { ShippingStatus } from '../../../../../shared/entities/shipping-status.entity';\r\nimport { Vessel } from '../../../../../shared/entities/vessel.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { TradeDataService } from '../../../../services/trade-data.service';\r\n\r\n@Component({\r\n    selector: 'atlas-shipment-info-form-component',\r\n    templateUrl: './shipment-info-form-component.component.html',\r\n    styleUrls: ['./shipment-info-form-component.component.scss'],\r\n})\r\nexport class ShipmentInfoFormComponent extends BaseFormComponent implements OnInit {\r\n    vesselCtrl = new AtlasFormControl('Vessel');\r\n    shippingStatusCtrl = new AtlasFormControl('shippingStatus');\r\n    company: string;\r\n    sectionId: number;\r\n    dataVersionId: number;\r\n    filteredVessels: Vessel[];\r\n    shippingStatus: ShippingStatus[];\r\n    isTradeImage = false;\r\n    vesselNamePrivilege: boolean = false;\r\n    @Output() readonly shipmentStatusUpdate = new EventEmitter<any>();\r\n\r\n    sectionTrafficModel: SectionTraffic = new SectionTraffic();\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Vessels,\r\n        MasterDataProps.ShippingStatus,\r\n    ];\r\n\r\n    vesselErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Vessel not in the list.');\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n        private tradeDataService: TradeDataService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n\r\n        this.formGroup = this.formBuilder.group({\r\n            vesselCtrl: this.vesselCtrl,\r\n            shippingStatusCtrl: this.shippingStatusCtrl,\r\n        });\r\n\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n                this.shippingStatus = this.masterdata.shippingStatus;\r\n\r\n            });\r\n        this.shippingStatusCtrl.valueChanges.subscribe((input) => {\r\n            this.shippingStatus = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.shippingStatus,\r\n                ['shippingStatusCode', 'description'],\r\n            );\r\n        });\r\n        this.filteredVessels = this.masterdata.vessels;\r\n        this.vesselCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredVessels = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.vessels,\r\n                ['vesselName'],\r\n            );\r\n        });\r\n\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isTradeImage = true;\r\n        }\r\n        this.checkShipmentFormPrivileges();\r\n    }\r\n\r\n    setValidators() {\r\n        this.vesselCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.vessels,\r\n                    nameof<Vessel>('vesselName'),\r\n                ),\r\n                Validators.maxLength(30),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n\r\n        if (this.sectionId !== 0) {\r\n            this.subscriptions.push(this.tradeDataService.getTrafficDetails()\r\n                .subscribe((data: SectionTraffic) => {\r\n                    if (data) {\r\n                        this.sectionTrafficModel = data;\r\n                        this.populateVesselDetails(this.sectionTrafficModel.vesselCode);\r\n                        this.populateShippingDetails(this.sectionTrafficModel.shippingStatusCode);\r\n                    }\r\n                }));\r\n\r\n        }\r\n        if (!isEdit || this.isTradeImage || !this.vesselNamePrivilege) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n\r\n        return entity;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            vesselCtrl: this.vesselCtrl,\r\n            shippingStatusCtrl: this.shippingStatusCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateVesselDetails(vesselCode: string) {\r\n        if (vesselCode) {\r\n            const vessel = this.masterdata.vessels.find(\r\n                (item) => item.vesselName === vesselCode,\r\n            );\r\n            if (vessel) {\r\n                this.vesselCtrl.patchValue(vessel);\r\n            }\r\n        }\r\n    }\r\n\r\n    populateShippingDetails(shippingStatusCode: string) {\r\n        if (shippingStatusCode) {\r\n            const shippingStatus = this.masterdata.shippingStatus.find(\r\n                (item) => item.shippingStatusCode === shippingStatusCode,\r\n            );\r\n            if (shippingStatus) {\r\n                this.shippingStatusCtrl.patchValue(shippingStatus.description);\r\n            }\r\n        }\r\n    }\r\n\r\n    checkShipmentFormPrivileges() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') && this.authorizationService.isPrivilegeAllowed(this.company, 'TrafficTab')) {\r\n                this.vesselNamePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'VesselName');\r\n            }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"shipment-details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Shipment Period</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"25%\\\"\\r\\n                 [class.displayMode]=\\\"!periodTypeCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!periodTypeCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"periodTypeCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Period Type\\\"\\r\\n                           [required]=\\\"periodTypeCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"periodTypes\\\"\\r\\n                           [formControl]=\\\"periodTypeCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [matTooltip]=\\\"'Period Type'\\\">\\r\\n                    <mat-autocomplete #periodTypes=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      [displayWith]=\\\"displayPeriodType.bind(this)\\\">\\r\\n                        <mat-option *ngFor=\\\"let periodType of filteredPeriodType\\\"\\r\\n                                    [value]=\\\"periodType.periodTypeId\\\">\\r\\n                            {{periodType.periodTypeCode}} | {{periodType.periodTypeDescription}}\\r\\n                        </mat-option>\\r\\n\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"periodTypeCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"periodTypeCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"periodTypeCtrl.isRequired && periodTypeCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"20%\\\"\\r\\n                 [class.displayMode]=\\\"!periodFromCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!periodFromCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"periodFromCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [required]=\\\"periodFromCtrl.isRequired\\\"\\r\\n                           [matDatepicker]=\\\"frompicker\\\"\\r\\n                           placeholder=\\\"From\\\"\\r\\n                           value=\\\"frompicker\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]='periodFromCtrl'>\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"frompicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #frompicker></mat-datepicker>\\r\\n                    <mat-error *ngIf=\\\"periodFromCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"periodToCtrl.hasError('isBeforeDate')\\\">\\r\\n                        Cannot be After Period To\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"periodFromCtrl.isRequired && periodFromCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"20%\\\"\\r\\n                 [class.displayMode]=\\\"!periodToCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!periodToCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"periodToCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [required]=\\\"periodToCtrl.isRequired\\\"\\r\\n                           [matDatepicker]=\\\"topicker\\\"\\r\\n                           placeholder=\\\"To\\\"\\r\\n                           value=\\\"topicker\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]='periodToCtrl'>\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"topicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #topicker></mat-datepicker>\\r\\n                    <mat-error *ngIf=\\\"periodToCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"periodToCtrl.hasError('isBeforeDate')\\\">\\r\\n                        Cannot be before Period From\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"periodToCtrl.isRequired && periodToCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 [class.displayMode]=\\\"!positionTypeCtrl.enabled\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-select placeholder=\\\"Position Type\\\"\\r\\n                                [required]=\\\"positionTypeCtrl.isRequired\\\"\\r\\n                                [formControl]=\\\"positionTypeCtrl\\\">\\r\\n                        <mat-option *ngFor=\\\"let type of masterdata.positionMonthTypes\\\"\\r\\n                                    [value]=\\\"type.positionMonthTypeCode\\\">{{type.positionMonthTypeDescription}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { PeriodType } from './../../../../../shared/entities/period-type.entity';\r\nimport { TradeImageField } from './../../../../../shared/services/trading/dtos/tradeImageField';\r\nimport { dateAfter } from './shipment-period-date-validator.validator';\r\n\r\n@Component({\r\n    selector: 'atlas-shipment-period-form',\r\n    templateUrl: './shipment-period-form.component.html',\r\n    styleUrls: ['./shipment-period-form.component.scss'],\r\n})\r\nexport class ShipmentPeriodFormComponent extends BaseFormComponent implements OnInit {\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n\r\n    periodTypeCtrl = new AtlasFormControl('PeriodTypeId');\r\n    periodFromCtrl = new AtlasFormControl('DeliveryPeriodStart');\r\n    periodToCtrl = new AtlasFormControl('DeliveryPeriodEnd');\r\n    positionTypeCtrl = new AtlasFormControl('PositionMonthType');\r\n    filteredPeriodType: PeriodType[];\r\n    tradeImageDetails: TradeImageField[] = [];\r\n\r\n    masterdata: MasterData = new MasterData();\r\n    masterdataList: string[] = [\r\n        MasterDataProps.PositionMonthTypes,\r\n        MasterDataProps.PeriodTypes,\r\n    ];\r\n    company: string;\r\n    periodTypePrivilege: boolean = false;\r\n    fromDatePrivilege: boolean = false;\r\n    toDatePrivilege: boolean = false;\r\n    positionTypePrivilege: boolean = false;\r\n    isImage = false;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected route: ActivatedRoute,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isImage = true;\r\n        }\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredPeriodType = this.masterdata.periodTypes;\r\n        this.periodTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredPeriodType =\r\n                this.utilService.filterListforAutocompleteWithTechnicalId(\r\n                    input,\r\n                    this.masterdata.periodTypes,\r\n                    ['periodTypeCode', 'periodTypeDescription'],\r\n                    'periodTypeId');\r\n        });\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n\r\n        const startPositionMonthType = this.masterdata.positionMonthTypes\r\n            .filter((position) => position.positionMonthTypeDescription === 'Start');\r\n        if (startPositionMonthType.length > 0) {\r\n            this.positionTypeCtrl.patchValue(startPositionMonthType[0].positionMonthTypeCode);\r\n        }\r\n        if (!this.isImage) {\r\n            this.checkShipmentFormPrivileges();\r\n        }\r\n\r\n    }\r\n\r\n    setValidators() {\r\n        this.periodTypeCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.periodTypes,\r\n                    nameof<PeriodType>('periodTypeId'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    displayPeriodType(periodTypeId: number): string {\r\n        if (periodTypeId) {\r\n            const selectedPeriod = this.filteredPeriodType.filter(\r\n                (periodType) => periodType.periodTypeId === periodTypeId,\r\n            );\r\n\r\n            if (selectedPeriod.length > 0) {\r\n                return selectedPeriod[0].periodTypeDescription;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group(\r\n            {\r\n                periodTypeCtrl: this.periodTypeCtrl,\r\n                periodFromCtrl: this.periodFromCtrl,\r\n                periodToCtrl: this.periodToCtrl,\r\n                positionTypeCtrl: this.positionTypeCtrl,\r\n            },\r\n            { validator: dateAfter('periodToCtrl', 'periodFromCtrl') },\r\n        );\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n\r\n        if (this.model.periodTypeCode != null) {\r\n            const periodTypeFiltered = this.masterdata.periodTypes.find((periodType) => {\r\n                return periodType.periodTypeCode === this.model.periodTypeCode;\r\n            });\r\n            if (periodTypeFiltered) {\r\n                this.model.periodTypeId = periodTypeFiltered.periodTypeId;\r\n                this.formGroup.patchValue({ periodTypeCtrl: this.model.periodTypeId });\r\n            }\r\n        }\r\n        if (this.model.deliveryPeriodStart != null) {\r\n            this.formGroup.patchValue({ periodFromCtrl: this.model.deliveryPeriodStart });\r\n        }\r\n        if (this.model.deliveryPeriodEnd != null) {\r\n            this.formGroup.patchValue({ periodToCtrl: this.model.deliveryPeriodEnd });\r\n        }\r\n\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else if (this.model.blDate && !this.isImage) {\r\n            this.periodFromCtrl.disable();\r\n            this.periodToCtrl.disable();\r\n        }\r\n        if (this.isImage) {\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n\r\n                const checkPeriodTypeIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PeriodTypeId');\r\n                if (checkPeriodTypeIdIsImage && !checkPeriodTypeIdIsImage.isEdit) {\r\n                    this.periodTypeCtrl.disable();\r\n                }\r\n\r\n                const checkDeliveryPeriodStartIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'DeliveryPeriodStart');\r\n                if (checkDeliveryPeriodStartIsImage && !checkDeliveryPeriodStartIsImage.isEdit) {\r\n                    this.periodFromCtrl.disable();\r\n                    this.periodToCtrl.disable();\r\n                }\r\n\r\n                const checkPositionMonthTypeIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PositionMonthType');\r\n                if (checkPositionMonthTypeIsImage && !checkPositionMonthTypeIsImage.isEdit) {\r\n                    this.positionTypeCtrl.disable();\r\n                }\r\n\r\n                const checkPeriodTypeIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'PeriodTypeId');\r\n                if (checkPeriodTypeIdIsCopy && !checkPeriodTypeIdIsCopy.isCopy) {\r\n                    this.periodTypeCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkDeliveryPeriodStartIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'DeliveryPeriodStart');\r\n                if (checkDeliveryPeriodStartIsCopy && !checkDeliveryPeriodStartIsCopy.isCopy) {\r\n                    this.periodFromCtrl.patchValue(null);\r\n                    this.periodToCtrl.patchValue(null);\r\n                }\r\n            }\r\n        }\r\n        if (this.model.positionMonthIndex != null) {\r\n\r\n            const monthType = this.masterdata.positionMonthTypes.filter((position) =>\r\n                position.positionMonthTypeDescription.startsWith(this.model.positionMonthType) &&\r\n                position.positionMonthTypeCode.month === this.model.positionMonthIndex);\r\n            if (monthType.length > 0) {\r\n                this.formGroup.patchValue({ positionTypeCtrl: monthType[0].positionMonthTypeCode });\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n\r\n        section.periodTypeId = ((this.periodTypeCtrl.value === '' && !this.periodTypeCtrl.isRequired) ? 0 : this.periodTypeCtrl.value);\r\n        section.deliveryPeriodStartDate = this.periodFromCtrl.value;\r\n        section.deliveryPeriodEndDate = this.periodToCtrl.value;\r\n        section.positionMonthType = Number(this.positionTypeCtrl.value.type);\r\n        section.positionMonthIndex = Number(this.positionTypeCtrl.value.month);\r\n\r\n        return section;\r\n    }\r\n    checkShipmentFormPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') && this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.periodTypePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'PeriodType');\r\n                this.fromDatePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'FromDate');\r\n                this.toDatePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'ToDate');\r\n                this.positionTypePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'PositionType');\r\n            }\r\n        });\r\n        if (!this.periodTypePrivilege) {\r\n            this.periodTypeCtrl.disable();\r\n        }\r\n        if (!this.fromDatePrivilege) {\r\n            this.periodFromCtrl.disable();\r\n        }\r\n        if (!this.toDatePrivilege) {\r\n            this.periodToCtrl.disable();\r\n        }\r\n        if (!this.positionTypePrivilege) {\r\n            this.positionTypeCtrl.disable();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Terms</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!contractTermsCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!contractTermsCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"contractTermsCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Contract Terms\\\"\\r\\n                           [required]=\\\"contractTermsCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"contractTerms\\\"\\r\\n                           [formControl]=\\\"contractTermsCtrl\\\"\\r\\n                           [matTooltip]=\\\"'Contract Terms Code'\\\">\\r\\n                    <mat-icon *ngIf=\\\"isEdit\\\"\\r\\n                              class=\\\"bookmark-icon\\\"\\r\\n                              matSuffix>bookmark</mat-icon>\\r\\n                    <mat-autocomplete #contractTerms=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (closed)=\\\"clearDescription()\\\"\\r\\n                                      (optionSelected)=\\\"contractTermsCodeSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let coTerm of filteredContractTerms\\\"\\r\\n                                    [value]=\\\"coTerm.contractTermCode\\\">\\r\\n                            {{coTerm.contractTermCode}} | {{coTerm.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"contractTermsCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"contractTermsCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"contractTermsCtrl.isRequired && contractTermsCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"70%\\\"\\r\\n                              [fieldControl]=\\\"contractTermsDescriptionCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Contract Terms Description'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\"\\r\\n                 [class.displayMode]=\\\"!portTermsCtrl.enabled\\\"\\r\\n                 [class.isEmpty]=\\\"!portTermsCtrl.value\\\"\\r\\n                 [class.required-field]=\\\"portTermsCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Port Terms\\\"\\r\\n                           [required]=\\\"portTermsCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"portTerms\\\"\\r\\n                           [formControl]=\\\"portTermsCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [matTooltip]=\\\"'Port Terms Code'\\\">\\r\\n                    <mat-icon *ngIf=\\\"isEdit\\\"\\r\\n                              class=\\\"bookmark-icon\\\"\\r\\n                              matSuffix>bookmark</mat-icon>\\r\\n                    <mat-autocomplete #portTerms=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      (closed)=\\\"clearDescription()\\\"\\r\\n                                      (optionSelected)=\\\"portCodeSelected($event.option.value)\\\">\\r\\n                        <mat-option *ngFor=\\\"let poTerm of filteredPortTerms\\\"\\r\\n                                    [value]=\\\"poTerm.portCode\\\">\\r\\n                            {{poTerm.portCode}} | {{poTerm.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"portTermsCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"portTermsCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"portTermsCtrl.isRequired && portTermsCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"70%\\\"\\r\\n                              [fieldControl]=\\\"portTermsDescriptionCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Port Description'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\"\\r\\n             class=\\\"custom-form\\\"\\r\\n             [class.required-field]=\\\"arbitrationCtrl.isRequired\\\"\\r\\n             [class.displayMode]=\\\"!arbitrationCtrl.enabled\\\">\\r\\n\\r\\n            <mat-form-field fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Arbitration\\\"\\r\\n                       [required]=\\\"arbitrationCtrl.isRequired\\\"\\r\\n                       [matAutocomplete]=\\\"arbitration\\\"\\r\\n                       [formControl]=\\\"arbitrationCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [matTooltip]=\\\"'Arbitration Code'\\\">\\r\\n                <mat-icon *ngIf=\\\"isEdit\\\"\\r\\n                          class=\\\"bookmark-icon\\\"\\r\\n                          matSuffix>bookmark</mat-icon>\\r\\n                <mat-autocomplete #arbitration=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\"\\r\\n                                  (closed)=\\\"clearDescription()\\\"\\r\\n                                  (optionSelected)=\\\"arbitrationCodeSelected($event.option.value)\\\">\\r\\n                    <mat-option *ngFor=\\\"let arCode of filteredArbitration\\\"\\r\\n                                [value]=\\\"arCode.arbitrationCode\\\">\\r\\n                        {{arCode.arbitrationCode}} | {{arCode.description}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"arbitrationCtrl.hasError('required')\\\">\\r\\n                    This field is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"arbitrationCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"arbitrationCtrl.isRequired && arbitrationCtrl.enabled\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <atlas-form-input fxFlex=\\\"60%\\\"\\r\\n                              [fieldControl]=\\\"arbitrationDescriptionCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Arbitration Description'\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { Arbitration } from '../../../../../shared/entities/arbitration.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Commodity } from '../../../../../shared/entities/commodity.entity';\r\nimport { ContractTerm } from '../../../../../shared/entities/contract-term.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { Port } from '../../../../../shared/entities/port.entity';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { PermissionLevels } from './../../../../../shared/enums/permission-level.enum';\r\nimport { TradeImageField } from './../../../../../shared/services/trading/dtos/tradeImageField';\r\n\r\n@Component({\r\n    selector: 'atlas-terms-form-component',\r\n    templateUrl: './terms-form-component.component.html',\r\n    styleUrls: ['./terms-form-component.component.scss'],\r\n})\r\nexport class TermsFormComponent extends BaseFormComponent implements OnInit {\r\n    isInputField = false;\r\n    isTradeImage = false;\r\n    isEdit: boolean = true;\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n\r\n    contractTermsCtrl = new AtlasFormControl('ContractTermId');\r\n    contractTermsDescriptionCtrl = new AtlasFormControl('ContractTermsDescription');\r\n    portTermsCtrl = new AtlasFormControl('ContractTermLocationId');\r\n    portTermsDescriptionCtrl = new AtlasFormControl('ContractTermsPortDescription');\r\n    arbitrationCtrl = new AtlasFormControl('ArbitrationId');\r\n    arbitrationDescriptionCtrl = new AtlasFormControl('ArbitrationDescription');\r\n\r\n    filteredContractTerms: ContractTerm[];\r\n    filteredPortTerms: Port[];\r\n    filteredArbitration: Arbitration[];\r\n    tradeImageDetails: TradeImageField[] = [];\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.ContractTerms,\r\n        MasterDataProps.Ports,\r\n        MasterDataProps.Arbitrations,\r\n    ];\r\n    company: string;\r\n    contractTermsPrivilege: boolean = false;\r\n    portTermsPrivilege: boolean = false;\r\n    arbitrationPriviege: boolean = false;\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected utilService: UtilService,\r\n        protected tradingService: TradingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected securityService: SecurityService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.masterdata = data;\r\n\r\n                this.filteredContractTerms = this.masterdata.contractTerms;\r\n                this.contractTermsCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredContractTerms = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.contractTerms,\r\n                        ['contractTermCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.filteredPortTerms = this.masterdata.ports;\r\n                this.portTermsCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredPortTerms = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.ports,\r\n                        ['portCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.filteredArbitration = this.masterdata.arbitrations;\r\n                this.arbitrationCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredArbitration = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.masterdata.arbitrations,\r\n                        ['arbitrationCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                this.setValidators();\r\n                this.bindConfiguration();\r\n            });\r\n        if (this.route.snapshot.data['isImage'] === true) {\r\n            this.isTradeImage = true;\r\n        }\r\n        this.checkTermsFormPrivileges();\r\n    }\r\n\r\n    setValidators() {\r\n        this.contractTermsCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.contractTerms,\r\n                    nameof<ContractTerm>('contractTermCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.portTermsCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.ports,\r\n                    nameof<Port>('portCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.arbitrationCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.arbitrations,\r\n                    nameof<Arbitration>('arbitrationCode'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    contractTermsCodeSelected(contractTermsCode: string) {\r\n        const selectedContractTerm = this.masterdata.contractTerms.find(\r\n            (conTerm) => conTerm.contractTermCode === contractTermsCode,\r\n        );\r\n        if (selectedContractTerm) {\r\n            this.contractTermsDescriptionCtrl.patchValue(\r\n                selectedContractTerm.description,\r\n            );\r\n        }\r\n    }\r\n\r\n    portCodeSelected(portCode: string) {\r\n        const selectedPort = this.masterdata.ports.find(\r\n            (pCode) => pCode.portCode === portCode,\r\n        );\r\n        if (selectedPort) {\r\n            this.portTermsDescriptionCtrl.patchValue(selectedPort.description);\r\n        }\r\n    }\r\n\r\n    arbitrationCodeSelected(arbitrationCode: string) {\r\n        const filteredArbitration = this.masterdata.arbitrations.filter((arbCode) => arbCode.arbitrationCode === arbitrationCode);\r\n        if (filteredArbitration.length === 0) { return; }\r\n        const selectedArbitration = filteredArbitration[0];\r\n        this.arbitrationDescriptionCtrl.patchValue(selectedArbitration.description);\r\n        this.arbitrationDescriptionCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    commodityCodeSelected(commodity: Commodity) {\r\n        if (!this.arbitrationCtrl.value && commodity.arbitrationCode) {\r\n            const filteredArbitration = this.masterdata.arbitrations.filter((arbCode) =>\r\n                arbCode.arbitrationCode === commodity.arbitrationCode);\r\n            if (filteredArbitration.length === 0) { return; }\r\n            this.arbitrationCtrl.patchValue(filteredArbitration[0].arbitrationCode);\r\n            this.arbitrationCodeSelected(commodity.arbitrationCode);\r\n            this.arbitrationCtrl.updateValueAndValidity();\r\n        }\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.model = tradeRecord;\r\n        this.isEdit = isEdit;\r\n        if (this.model.contractTerms != null) {\r\n            this.formGroup.patchValue({ contractTermsCtrl: this.model.contractTerms });\r\n            this.contractTermsCodeSelected(this.model.contractTerms);\r\n        }\r\n        if (this.model.contractTermsLocation != null) {\r\n            this.formGroup.patchValue({ portTermsCtrl: this.model.contractTermsLocation });\r\n            this.portCodeSelected(this.model.contractTermsLocation);\r\n        }\r\n        if (this.model.arbitration != null) {\r\n            this.formGroup.patchValue({ arbitrationCtrl: this.model.arbitration });\r\n            this.arbitrationCodeSelected(this.model.arbitration);\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            if (!this.isTradeImage) {\r\n                this.arbitrationDescriptionCtrl.disable();\r\n                this.contractTermsDescriptionCtrl.disable();\r\n                this.portTermsDescriptionCtrl.disable();\r\n            }\r\n        }\r\n        if (this.isTradeImage) {\r\n            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);\r\n            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {\r\n                const checkContractTermIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ContractTermId');\r\n                if (checkContractTermIdIsImage && !checkContractTermIdIsImage.isEdit) {\r\n                    this.contractTermsCtrl.disable();\r\n                } else {\r\n                    this.contractTermsCtrl.enable();\r\n                }\r\n\r\n                const checkContractLocationIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ContractTermLocationId');\r\n                if (checkContractLocationIdIsImage && !checkContractLocationIdIsImage.isEdit) {\r\n                    this.portTermsCtrl.disable();\r\n                } else {\r\n                    this.portTermsCtrl.enable();\r\n                }\r\n\r\n                const checkArbitrationIdIsImage = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ArbitrationId');\r\n                if (checkArbitrationIdIsImage && !checkArbitrationIdIsImage.isEdit) {\r\n                    this.arbitrationCtrl.disable();\r\n                }\r\n\r\n                const checkContractTermIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ContractTermId');\r\n                if (checkContractTermIdIsCopy && !checkContractTermIdIsCopy.isCopy) {\r\n                    this.contractTermsCtrl.patchValue(null);\r\n                    this.contractTermsDescriptionCtrl.patchValue(null);\r\n                }\r\n\r\n                const checkContractTermLocationIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ContractTermLocationId');\r\n                if (checkContractTermLocationIdIsCopy && !checkContractTermLocationIdIsCopy.isCopy) {\r\n                    this.portTermsCtrl.patchValue(null);\r\n                    this.portTermsDescriptionCtrl.patchValue(null);\r\n                }\r\n                const checkArbitrationIdIsCopy = this.tradeImageDetails.find((e) => e.tradeFieldName === 'ArbitrationId');\r\n                if (checkArbitrationIdIsCopy && !checkArbitrationIdIsCopy.isCopy) {\r\n                    this.arbitrationCtrl.patchValue(null);\r\n                    this.arbitrationDescriptionCtrl.patchValue(null);\r\n                }\r\n            }\r\n        } else {\r\n            if (this.model.invoiceReference &&\r\n                this.authorizationService.getPermissionLevel(\r\n                    this.company,\r\n                    'Trades', 'Physicals', 'SuperTradeEdition',\r\n                ) <= PermissionLevels.None) {\r\n                this.contractTermsCtrl.disable();\r\n                this.portTermsCtrl.disable();\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any) {\r\n        const section = entity as PhysicalFixedPricedContract;\r\n\r\n        section.contractTerms = this.contractTermsCtrl.value;\r\n        section.contractTermsLocation = this.portTermsCtrl.value;\r\n        section.arbitration = this.arbitrationCtrl.value && this.arbitrationCtrl.value.length > 0 ? this.arbitrationCtrl.value : null;\r\n\r\n        return section;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            contractTermsCtrl: this.contractTermsCtrl,\r\n            contractTermsDescrptionCtrl: this.contractTermsDescriptionCtrl,\r\n            portTermsCtrl: this.portTermsCtrl,\r\n            portTermsDescriptionCtrl: this.portTermsDescriptionCtrl,\r\n            arbitrationCtrl: this.arbitrationCtrl,\r\n            arbitrationDescriptionCtrl: this.arbitrationDescriptionCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n    checkTermsFormPrivileges() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades') && this.authorizationService.isPrivilegeAllowed(this.company, 'MainTab')) {\r\n                this.contractTermsPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'ContractTerms');\r\n                this.portTermsPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'PortTerms');\r\n                this.arbitrationPriviege = this.authorizationService.isPrivilegeAllowed(this.company, 'Arbitration');\r\n            }\r\n        });\r\n        if (!this.contractTermsPrivilege) {\r\n            this.contractTermsCtrl.disable();\r\n            this.contractTermsDescriptionCtrl.disable();\r\n        }\r\n        if (!this.portTermsPrivilege) {\r\n            this.portTermsCtrl.disable();\r\n            this.portTermsDescriptionCtrl.disable();\r\n        }\r\n        if (!this.arbitrationPriviege) {\r\n            this.arbitrationCtrl.disable();\r\n            this.arbitrationDescriptionCtrl.disable();\r\n        }\r\n    }\r\n\r\n    clearDescription() {\r\n        if (!this.arbitrationCtrl.value) {\r\n            this.arbitrationDescriptionCtrl.patchValue('');\r\n        }\r\n        if (!this.portTermsCtrl.value) {\r\n            this.portTermsDescriptionCtrl.patchValue('');\r\n        }\r\n        if (!this.contractTermsCtrl.value) {\r\n            this.contractTermsDescriptionCtrl.patchValue('');\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"cost-impact-warning-dialog\\\">\\r\\n    <div fxLayoutAlign=\\\"space-between center\\\">\\r\\n        <h1 class=\\\"no-margin\\\">Cost Impact Warning Message</h1>\\r\\n        <button mat-button\\r\\n                class=\\\"close-button\\\">\\r\\n            <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n        </button>\\r\\n    </div>\\r\\n    <mat-dialog-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\">\\r\\n            <p>{{dialogText}}</p>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\">\\r\\n            <div class=\\\"chip-list\\\">\\r\\n                <atlas-chip-list *ngIf=\\\"chipStringList\\\"\\r\\n                                 [textList]='chipStringList'></atlas-chip-list>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             *ngIf=\\\"warningListForDiffFields\\\">\\r\\n            <p>The following field(s) \\\"{{warningListForDiffFields}}\\\" are different on both trades. Do you wish to\\r\\n                continue.\\r\\n            </p>\\r\\n        </div>\\r\\n    </mat-dialog-content>\\r\\n    <mat-dialog-actions>\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start start\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onNoButtonClicked()\\\">No</button>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start end\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <button mat-button\\r\\n                    class=\\\"add-cost-button\\\"\\r\\n                    (click)=\\\"onYesButtonClicked()\\\">Yes</button>\\r\\n        </div>\\r\\n    </mat-dialog-actions>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-impact-warning-dialog',\r\n    templateUrl: './cost-impact-warning-dialog.component.html',\r\n    styleUrls: ['./cost-impact-warning-dialog.component.scss'],\r\n})\r\nexport class CostImpactWarningDialogComponent implements OnInit {\r\n\r\n    chipStringList: string[];\r\n    warningListForDiffFields: string;\r\n\r\n    dialogData: {\r\n        confirmationMessage: string,\r\n        contractReference: string[],\r\n        warningList: string,\r\n\r\n    };\r\n    dialogText: string = '';\r\n    constructor(public thisDialogRef: MatDialogRef<CostImpactWarningDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            confirmationMessage: string, contractReference: string[], warningList: string,\r\n        }) {\r\n        this.dialogData = data;\r\n        this.dialogText = this.dialogData.confirmationMessage;\r\n        this.chipStringList = this.dialogData.contractReference;\r\n        this.warningListForDiffFields = this.dialogData.warningList;\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    onYesButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n    onNoButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Merge Options</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <atlas-dropdown-select [label]=\\\"'Merge Options'\\\"\\r\\n                                   [options]=\\\"mergeOptionsList\\\"\\r\\n                                   [fieldControl]=\\\"mergeOptionsCtrl\\\"\\r\\n                                   isEditable=true\\r\\n                                   (optionSelected)=\\\"onMergeOptionSelectionChanged($event)\\\"\\r\\n                                   [selectProperties]=\\\"['name']\\\">\\r\\n            </atlas-dropdown-select>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { MergeContracts } from '../../../../../../shared/entities/merge-contracts.entity';\r\nimport { TradeMergeOptions } from '../../../../../../shared/entities/trade-merge-options.entity';\r\nimport { ContractMergeOptions } from '../../../../../../shared/enums/trade-merge-options.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-merge-options',\r\n    templateUrl: './merge-options.component.html',\r\n    styleUrls: ['./merge-options.component.scss'],\r\n})\r\nexport class MergeOptionsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly mergeOptionSelected = new EventEmitter<any>();\r\n\r\n    mergeOptionsList: TradeMergeOptions[] = [];\r\n    mergeOptionsCtrl = new FormControl();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n        this.mergeOptionsList = TradeMergeOptions.getTradeMergeOptionsList();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.mergeOptionsCtrl = new FormControl(this.mergeOptionsList.find((option) => option.name === 'Contract Header(.0000)'));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            mergeOptionsCtrl: this.mergeOptionsCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onMergeOptionSelectionChanged(mergeOptionNames) {\r\n        this.mergeOptionSelected.emit(mergeOptionNames.value);\r\n    }\r\n\r\n    populateEntity(entity: MergeContracts[]): MergeContracts[] {\r\n        const selectedContracts = entity;\r\n\r\n        if (this.mergeOptionsCtrl.value && this.mergeOptionsCtrl.value.value && this.mergeOptionsCtrl.value.value === ContractMergeOptions.ContractHeader) {\r\n\r\n            this.mergeOptionSelected.emit(ContractMergeOptions.ContractHeader);\r\n        }\r\n        return selectedContracts;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"trade-merge-validations-messages\\\">\\r\\n    <div *ngIf=\\\"showWarningMessageCard\\\">\\r\\n        <mat-card *ngFor=\\\"let text of contractSectionCodeWarningList\\\"\\r\\n                  class=\\\"trade-merge-validation-warning-card\\\">\\r\\n            <div class=\\\"warning-circle-icon\\\">\\r\\n                <mat-icon>warning_outline</mat-icon>\\r\\n            </div>\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h4>{{text.contractSectionCode}} at risk for Merging</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-subtitle>\\r\\n                    {{text.blockingOrWarningInput}} are different\\r\\n                </mat-card-subtitle>\\r\\n                <button class=\\\"remove-button\\\"\\r\\n                        mat-button\\r\\n                        (click)=\\\"onWarningRemoveButtonClicked(text.sectionId)\\\">REMOVE\\r\\n                </button>\\r\\n            </mat-card-header>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"showRestrictedMessageCard\\\">\\r\\n        <mat-card *ngFor=\\\"let text of contractSectionCodeBlockingList\\\"\\r\\n                  class=\\\"trade-merge-validation-warning-card\\\">\\r\\n            <div class=\\\"error-circle-icon\\\">\\r\\n                <mat-icon>remove_circle</mat-icon>\\r\\n            </div>\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h4>{{text.contractSectionCode}} impossible to merge</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-subtitle>\\r\\n                    {{text.blockingOrWarningInput}} are different\\r\\n                </mat-card-subtitle>\\r\\n                <button class=\\\"remove-button\\\"\\r\\n                        mat-button\\r\\n                        (click)=\\\"onRestrictRemoveButtonClicked(text.sectionId)\\\">REMOVE\\r\\n                </button>\\r\\n            </mat-card-header>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n\\r\\n</div>\"","module.exports = \"mat-card.trade-merge-validation-warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n  mat-card.trade-merge-validation-warning-card.mat-card button {\\n    margin: 0px 15px 0 10px;\\n    box-shadow: none; }\\n  mat-card.trade-merge-validation-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n  mat-card.trade-merge-validation-warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n  mat-card.trade-merge-validation-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n  button.remove-button.mat-button {\\n  position: absolute;\\n  right: 10px;\\n  bottom: 15px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute, Route } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../../shared/services/http-services/trading.service';\r\nimport { TradeMergeMessage } from '../../../../../../trading/entities/trade-merge-message.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-merge-validations',\r\n    templateUrl: './merge-validations.component.html',\r\n    styleUrls: ['./merge-validations.component.scss'],\r\n})\r\nexport class MergeValidationsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly removeClick = new EventEmitter<any>();\r\n\r\n    @Output() readonly mergeButtonEnabled = new EventEmitter<any>();\r\n    @Output() readonly noWarningCardToButtonEnable = new EventEmitter<any>();\r\n    @Output() readonly warningMessageOnDiffFields = new EventEmitter<any>();\r\n\r\n    dataVersionId: number;\r\n    showRestrictedMessageCard: boolean = false;\r\n    showWarningMessageCard: boolean = false;\r\n\r\n    blockingOrWarningSectionIds: number;\r\n    isBlocking: boolean = false;\r\n    isWarning: boolean = false;\r\n    contractSectionCode: string;\r\n    blockingInput: string[] = [];\r\n    warningInput: string[] = [];\r\n    blockingSectionIds: number;\r\n    warningSectionIds: number;\r\n    contractSectionCodeWarningList: TradeMergeMessage[] = [];\r\n    contractSectionCodeBlockingList: TradeMergeMessage[] = [];\r\n\r\n    warningMessageList: string[] = [];\r\n    blockingMessageList: string[] = [];\r\n    existingSectionIds: number[] = [];\r\n    resultWarningOrBlcokingMessages: TradeMergeMessage[] = [];\r\n    warningListWithDiffMessages: string[] = [];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private tradingService: TradingService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n    }\r\n\r\n    removeCardOnUnCheck(event) {\r\n        if (this.existingSectionIds && this.existingSectionIds.length > 0) {\r\n            if (this.contractSectionCodeBlockingList && this.contractSectionCodeBlockingList.length > 0) {\r\n                this.contractSectionCodeBlockingList = this.contractSectionCodeBlockingList.filter((item) =>\r\n                    item.sectionId !== event);\r\n            }\r\n            if (this.contractSectionCodeWarningList && this.contractSectionCodeWarningList.length > 0) {\r\n                this.contractSectionCodeWarningList = this.contractSectionCodeWarningList.filter((item) =>\r\n                    item.sectionId !== event);\r\n            }\r\n            this.existingSectionIds = this.existingSectionIds.filter((item) => item !== event);\r\n        }\r\n    }\r\n\r\n    getSelectedSectionIds(sectionIds: number[]) {\r\n        if (sectionIds && sectionIds.length > 0) {\r\n            this.tradingService.getSectionIdsForSelectedContractsToMerge(sectionIds, this.dataVersionId)\r\n                .subscribe((data) => {\r\n                    if (data && data.value.length > 0) {\r\n                        this.resultWarningOrBlcokingMessages = data.value;\r\n                        data.value.forEach((element) => {\r\n                            this.blockingOrWarningSectionIds = element.sectionId;\r\n                            this.contractSectionCode = element.contractSectionCode;\r\n                            if (this.existingSectionIds && this.existingSectionIds.length === 0) {\r\n                                this.existingSectionIds.push(element.sectionId);\r\n                                this.setWarningOrBlockingMessages(element);\r\n                            } else if (!this.existingSectionIds.includes(element.sectionId)) {\r\n                                this.setWarningOrBlockingMessages(element);\r\n                                this.existingSectionIds.push(element.sectionId);\r\n                            }\r\n                        });\r\n                    } else if (data && data.value.length === 0) {\r\n                        this.noWarningCardToButtonEnable.emit();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    private setWarningOrBlockingMessages(element: TradeMergeMessage) {\r\n        this.isBlocking = false;\r\n        this.isWarning = false;\r\n\r\n        const blockingMessage: TradeMergeMessage = this.resultWarningOrBlcokingMessages.find((result) =>\r\n            result.sectionId === element.sectionId && result.isBlocking);\r\n        if (blockingMessage) {\r\n            this.isBlocking = blockingMessage.isBlocking;\r\n        }\r\n\r\n        const warningMessage: TradeMergeMessage = this.resultWarningOrBlcokingMessages.find((result) =>\r\n            result.sectionId === element.sectionId && result.isWarning);\r\n\r\n        if (warningMessage) {\r\n            this.isWarning = warningMessage.isWarning;\r\n        }\r\n\r\n        if (this.isBlocking) {\r\n            this.showRestrictedMessageCard = true;\r\n            this.blockingInput = this.resultWarningOrBlcokingMessages.find((result) =>\r\n                result.sectionId === element.sectionId && result.isBlocking).blockingOrWarningInput;\r\n            this.blockingSectionIds = element.sectionId;\r\n            const message = new TradeMergeMessage();\r\n            message.contractSectionCode = element.contractSectionCode;\r\n            message.blockingOrWarningInput = this.blockingInput;\r\n            message.sectionId = element.sectionId;\r\n            this.contractSectionCodeBlockingList.push(message);\r\n            this.contractSectionCodeBlockingList = Array.from(new Set(this.contractSectionCodeBlockingList.map((contract) => contract)));\r\n        }\r\n        if (this.isWarning) {\r\n            this.showWarningMessageCard = true;\r\n            this.warningInput = this.resultWarningOrBlcokingMessages.find((result) =>\r\n                result.sectionId === element.sectionId && result.isWarning).blockingOrWarningInput;\r\n            const message = new TradeMergeMessage();\r\n            message.contractSectionCode = element.contractSectionCode;\r\n            message.blockingOrWarningInput = this.warningInput;\r\n            message.sectionId = element.sectionId;\r\n            this.contractSectionCodeWarningList.push(message);\r\n            this.contractSectionCodeWarningList = Array.from(new Set(this.contractSectionCodeWarningList.map((contract) => contract)));\r\n            this.warningSectionIds = element.sectionId;\r\n        }\r\n        this.mergeButtonEnabled.emit({\r\n            blockingList: this.contractSectionCodeBlockingList,\r\n            warningList: this.contractSectionCodeWarningList,\r\n        });\r\n        this.warningMessageOnDiffFields.emit({\r\n            warningList: this.warningInput.toString(),\r\n        });\r\n    }\r\n\r\n    onWarningRemoveButtonClicked(sectionId) {\r\n        this.contractSectionCodeWarningList = this.contractSectionCodeWarningList.filter((item) => item.sectionId !== sectionId);\r\n        this.removeClick.emit({\r\n            blockingSectionId: null,\r\n            warningSectionId: sectionId,\r\n            warningList: this.contractSectionCodeWarningList,\r\n            blockingList: this.contractSectionCodeBlockingList,\r\n        });\r\n    }\r\n\r\n    onRestrictRemoveButtonClicked(sectionId) {\r\n        this.contractSectionCodeBlockingList = this.contractSectionCodeBlockingList.filter((item) => item.sectionId !== sectionId);\r\n        this.removeClick.emit({\r\n            blockingSectionId: sectionId,\r\n            warningSectionId: null,\r\n            blockingList: this.contractSectionCodeBlockingList,\r\n            warningList: this.contractSectionCodeWarningList,\r\n        });\r\n    }\r\n\r\n    getNoSelectedRows() {\r\n        if (this.showRestrictedMessageCard) {\r\n            this.showRestrictedMessageCard = !this.showRestrictedMessageCard;\r\n        }\r\n        if (this.showWarningMessageCard) {\r\n            this.showWarningMessageCard = !this.showWarningMessageCard;\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"tradeMergeForm\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <atlas-trades-list #tradesListComponent\\r\\n                           (selectedSectionIds)=\\\"onSelectionOfSelectedIds($event)\\\"\\r\\n                           (selectedContractLabels)=\\\"onSelectedContractLabels($event)\\\"\\r\\n                           (mergeToContractLabel)=\\\"onSelectedMergeToContractLabel($event)\\\"\\r\\n                           (noRowsSelected)=\\\"onNoRowsSelected()\\\"\\r\\n                           (multipleMergeSelected)=\\\"onMultipleMergeOptionSelected($event)\\\"\\r\\n                           (selectedSectionIds)=\\\"selectedSectionIds($event)\\\"\\r\\n                           (successMsg)=\\\"onShowMessage($event)\\\"\\r\\n                           (removeCardOnUnCheck)=\\\"onRemoveCardOnUncheck($event)\\\"></atlas-trades-list>\\r\\n        <atlas-merge-validations #mergeValidationsComponent\\r\\n                                 (removeClick)=\\\"onRemoveClick($event)\\\"\\r\\n                                 (mergeButtonEnabled)=\\\"enableMergeButton($event)\\\"\\r\\n                                 (noWarningCardToButtonEnable)=\\\"enableMergeOnNoWarning($event)\\\"\\r\\n                                 (warningMessageOnDiffFields)=\\\"messageOnCostPopup($event)\\\">\\r\\n        </atlas-merge-validations>\\r\\n        <atlas-merge-options #mergeOptionsComponent\\r\\n                             (mergeOptionSelected)=\\\"onMergeOptionSelected($event)\\\"></atlas-merge-options>\\r\\n\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             class=\\\"button-details\\\">\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                    DISCARD\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"end start \\\">\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"onMergeButtonClicked()\\\"\\r\\n                            [disabled]=\\\"displayMergeButton\\\">\\r\\n                        Merge Selected Splits\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ContractFamilyToTradeMerge } from '../../../../../shared/entities/contract-family-to-trade-merge.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { MergeContracts } from '../../../../../shared/entities/merge-contracts.entity';\r\nimport { ContractMergeOptions } from '../../../../../shared/enums/trade-merge-options.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { MergeOptionsComponent } from './merge-options/merge-options.component';\r\nimport { MergeValidationsComponent } from './merge-validations/merge-validations.component';\r\nimport { TradesListComponent } from './trades-list/trades-list.component';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-merge',\r\n    templateUrl: './trade-merge.component.html',\r\n    styleUrls: ['./trade-merge.component.scss'],\r\n})\r\nexport class TradeMergeComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('tradesListComponent') tradesListComponent: TradesListComponent;\r\n    @ViewChild('mergeValidationsComponent') mergeValidationsComponent: MergeValidationsComponent;\r\n    @ViewChild('mergeOptionsComponent') mergeOptionsComponent: MergeOptionsComponent;\r\n\r\n    company: string;\r\n    contractLabel: string;\r\n    sectionId: number;\r\n    formComponents: BaseFormComponent[] = [];\r\n    tradeMergeForm: FormGroup;\r\n    displayMergeButton: boolean = true;\r\n    dataVersionId?: number;\r\n    selectedContractLabels: string;\r\n    selectedSectionId: number[] = [];\r\n    message: boolean = false;\r\n    contract: MergeContracts[] = [];\r\n    multipleMergeMessage: string;\r\n\r\n    constructor(private router: Router,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected tradingService: TradingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected lockService: LockService,\r\n        protected snackbarService: SnackbarService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.sectionId = this.route.snapshot.params['currentSection.sectionId'];\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.tradeMergeForm = this.formBuilder.group({\r\n            tradesListComponent: this.tradesListComponent.getFormGroup(),\r\n            mergeOptionsComponent: this.mergeOptionsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.mergeOptionsComponent, this.tradesListComponent);\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());\r\n    }\r\n\r\n    selectedSectionIds(event) {\r\n        this.selectedSectionId = event.sectiondIds;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        for (let i = 0; i < this.selectedSectionId.length; i++) {\r\n            const sectionId = this.selectedSectionId[i];\r\n            this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.TradeMerge)\r\n                .subscribe(() => {\r\n                    this.selectedSectionId = this.selectedSectionId.filter((id) => id !== sectionId);\r\n                }));\r\n        }\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/display/' +\r\n            encodeURIComponent(String(this.sectionId))]);\r\n    }\r\n\r\n    onSelectionOfSelectedIds(event) {\r\n        if (event.sectiondIds && event.sectiondIds.length > 0) {\r\n            this.mergeValidationsComponent.getSelectedSectionIds(event.sectiondIds);\r\n        }\r\n    }\r\n\r\n    messageOnCostPopup(event) {\r\n        this.tradesListComponent.warningMessageForDiffFields(event.warningList);\r\n    }\r\n\r\n    onSelectedContractLabels(contracts: string) {\r\n        this.selectedContractLabels = contracts;\r\n    }\r\n\r\n    onSelectedMergeToContractLabel(contractLabel: string) {\r\n        this.contractLabel = contractLabel;\r\n    }\r\n\r\n    enableMergeOnNoWarning(event) {\r\n        this.displayMergeButton = false;\r\n    }\r\n\r\n    enableMergeButton(event) {\r\n        if (event.blockingList && event.blockingList.length > 0) {\r\n            this.displayMergeButton = true;\r\n        } else if (event.warningList && event.warningList.length > 0) {\r\n            this.displayMergeButton = false;\r\n        }\r\n    }\r\n\r\n    onRemoveClick(event) {\r\n        if (event.blockingSectionId && event.warningSectionId === null) {\r\n            this.tradesListComponent.disableSelectedRowClick(event.blockingSectionId);\r\n            if (event.blockingList && event.blockingList.length > 0) {\r\n                this.displayMergeButton = true;\r\n            } else {\r\n                this.displayMergeButton = false;\r\n            }\r\n        } else if (event.warningSectionId && event.blockingSectionId === null) {\r\n            this.tradesListComponent.disableSelectedRowClick(event.warningSectionId);\r\n            if (event.warningList && event.warningList.length > 0) {\r\n                this.displayMergeButton = false;\r\n                if (event.blockingList && event.blockingList.length > 0) {\r\n                    this.displayMergeButton = true;\r\n                }\r\n            } else {\r\n                this.displayMergeButton = true;\r\n            }\r\n        } else {\r\n            this.displayMergeButton = false;\r\n        }\r\n    }\r\n\r\n    onRemoveCardOnUncheck(event) {\r\n        this.mergeValidationsComponent.removeCardOnUnCheck(event);\r\n    }\r\n\r\n    onNoRowsSelected() {\r\n        this.mergeValidationsComponent.getNoSelectedRows();\r\n        this.displayMergeButton = true;\r\n    }\r\n\r\n    onMergeOptionSelected(event) {\r\n        this.tradesListComponent.mergeOption = event;\r\n        this.tradesListComponent.onMergeOptionSelected(event);\r\n    }\r\n\r\n    onMultipleMergeOptionSelected(message: string) {\r\n        this.multipleMergeMessage = message;\r\n    }\r\n\r\n    onMergeButtonClicked() {\r\n        this.formComponents.forEach((comp) => {\r\n            this.contract = comp.populateEntity(this.contract);\r\n        });\r\n        this.tradesListComponent.onDisplayWarningMessage(this.contract);\r\n    }\r\n\r\n    onShowMessage(event) {\r\n        let messageText: string;\r\n        this.message = event;\r\n        if (this.message) {\r\n            const isMultipleMerge = this.contract.find((trade) => trade.mergeOption === ContractMergeOptions.ContractParent);\r\n            messageText = isMultipleMerge ? this.multipleMergeMessage :\r\n                'The Trade ' + this.selectedContractLabels + ' is merged To Trade ' + this.contractLabel + '';\r\n\r\n            this.subscriptions.push(this.tradingService\r\n                .saveContractsToTradeMerge(this.contract, this.dataVersionId)\r\n                .subscribe((data) => {\r\n                    this.snackbarService.informationSnackBar(messageText);\r\n                    this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/display/' +\r\n                        encodeURIComponent(String(this.sectionId))]);\r\n                }));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription: Subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">{{dataLength}} {{dataLength > 1 ? 'Sections' : 'Section'}} Found</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"tradesListToMergeGridOptions && tradesListToMergeGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"tradesListToMergeGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"componentId\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"tradesListToMergeGridOptions\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"tradesListToMergeGridRows\\\"\\r\\n                             [gridOptions]=\\\"tradesListToMergeGridOptions\\\"\\r\\n                             [columnDefs]=\\\"tradesListToMergeGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"50\\\"\\r\\n                             (columnVisible)=\\\"onAddOrDeleteColumn($event)\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             rowSelection=\\\"multiple\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Route } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { concatMap } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { ContractFamilyToTradeMerge } from '../../../../../../shared/entities/contract-family-to-trade-merge.entity';\r\nimport { IsLocked } from '../../../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { MergeContracts } from '../../../../../../shared/entities/merge-contracts.entity';\r\nimport { Port } from '../../../../../../shared/entities/port.entity';\r\nimport { TradeMergeOptions } from '../../../../../../shared/entities/trade-merge-options.entity';\r\nimport { DiscountTypes } from '../../../../../../shared/enums/discount-type.enum';\r\nimport { ContractMergeOptions } from '../../../../../../shared/enums/trade-merge-options.enum';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { LockService } from '../../../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../shared/services/ui.service';\r\nimport { TradeMergeMessage } from '../../../../../../trading/entities/trade-merge-message.entity';\r\nimport { CostImpactWarningDialogComponent } from '../cost-impact-warning-dialog/cost-impact-warning-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-trades-list',\r\n    templateUrl: './trades-list.component.html',\r\n    styleUrls: ['./trades-list.component.scss'],\r\n})\r\nexport class TradesListComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected dialog: MatDialog,\r\n        public gridService: AgGridService,\r\n        private route: ActivatedRoute,\r\n        private securityService: SecurityService,\r\n        private uiService: UiService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        protected lockService: LockService,\r\n        protected tradingService: TradingService,\r\n        protected snackbarService: SnackbarService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    gridContext = {\r\n        componentParent: this,\r\n    };\r\n\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @Output() readonly selectedSectionIds = new EventEmitter<any>();\r\n    @Output() readonly selectedContractLabels = new EventEmitter<string>();\r\n    @Output() readonly mergeToContractLabel = new EventEmitter<string>();\r\n    @Output() readonly noRowsSelected = new EventEmitter();\r\n    @Output() readonly multipleMergeSelected = new EventEmitter<string>();\r\n    @Output() readonly successMsg = new EventEmitter();\r\n    @Output() readonly removeCardOnUnCheck = new EventEmitter<any>();\r\n\r\n    tradesListToMergeGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    tradesListToMergeGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    componentId: string = 'tradesListToMergeGrid';\r\n    hasGridSharing: boolean = false;\r\n    sectionId: number;\r\n    dataVersionId: number;\r\n    tradesListToMergeGridRows: ContractFamilyToTradeMerge[];\r\n    masterdata: MasterData;\r\n    dataLength: number = 0;\r\n    selectedContractsForMerge: ContractFamilyToTradeMerge[];\r\n    sectionIds: number[] = [];\r\n    company: string;\r\n    sectionIdSelectedToMerge: MergeContracts;\r\n    sectionsSelectedToMerge: MergeContracts[] = [];\r\n    sectionIdMergeTo: number;\r\n    firstSelectedSplit: number;\r\n    contractLabel: string;\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    contractVariable: string = 'Contract';\r\n    mergeToHasCost: boolean;\r\n    mergeFromsectionIdWithCost: string[] = [];\r\n    mergeFromsectionIdWithInvoiced: string[] = [];\r\n    mergeFromContractLabel: string[] = [];\r\n    message: boolean = false;\r\n    mergeOption: number = ContractMergeOptions.ContractHeader;\r\n    MergeContracts;\r\n    warningListForDiffFields: string = '';\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.sectionId = this.route.snapshot.params['currentSection.sectionId'];\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.getContractsFamily(this.sectionId);\r\n        this.initializeGridColumns();\r\n\r\n        this.securityService.isSecurityReady().pipe(\r\n            concatMap(() => {\r\n                return this.gridConfigurationProvider.getConfiguration(this.company, this.componentId);\r\n            }),\r\n        ).subscribe((configuration) => {\r\n\r\n            this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n        });\r\n        this.sectionIdMergeTo = this.sectionId;\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.tradesListToMergeGridColumns;\r\n        this.tradesListToMergeGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            const allColumnIds = [];\r\n            if (this.tradesListToMergeGridColumns) {\r\n                this.tradesListToMergeGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.tradesListToMergeGridOptions = {\r\n            context: this.gridContext,\r\n            getRowStyle: this.isContractToMergeRowStyle.bind(this),\r\n            isRowSelectable: this.isMergeAllowed.bind(this),\r\n        };\r\n\r\n        this.tradesListToMergeGridColumns = [\r\n            {\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n            },\r\n            {\r\n                headerName: 'Contract Ref',\r\n                field: 'contractSectionCode',\r\n                colId: 'contractSectionCode',\r\n                tooltip: (node) => {\r\n                    if (!node.data.isMergeAllowed) {\r\n                        return 'contract cannot be merged because: ' + node.data.message;\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Parent Contract',\r\n                field: 'parentContract',\r\n                colId: 'parentContract',\r\n            },\r\n            {\r\n                headerName: 'Department ',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n            },\r\n            {\r\n                headerName: 'Allocated',\r\n                field: 'allocatedContract',\r\n                colId: 'allocatedContract',\r\n            },\r\n            {\r\n                headerName: 'CounterParty',\r\n                field: 'counterpartyCode',\r\n                colId: 'counterpartyCode',\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                colId: 'weightCode',\r\n                field: 'weightCode',\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'Cmy1',\r\n                headerTooltip: 'Cmy1',\r\n                field: 'principalCommodity',\r\n                colId: 'principalCommodity',\r\n            },\r\n            {\r\n                headerName: 'Cmy2',\r\n                headerTooltip: 'Cmy2',\r\n                field: 'part2',\r\n                colId: 'part2',\r\n            },\r\n            {\r\n                headerName: 'Cmy3',\r\n                field: 'part3',\r\n                colId: 'part3',\r\n            },\r\n            {\r\n                headerName: 'Cmy4',\r\n                field: 'part4',\r\n                colId: 'part4',\r\n            },\r\n            {\r\n                headerName: 'Cmy5',\r\n                field: 'part5',\r\n                colId: 'part5',\r\n            },\r\n            {\r\n                headerName: 'Price Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                colId: 'price',\r\n                field: 'price',\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'BL date',\r\n                colId: 'bLDate',\r\n                field: 'bLDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Charter Reference',\r\n                colId: 'charterCode',\r\n                field: 'charterCode',\r\n            },\r\n            {\r\n                headerName: 'Price Premium/Discount',\r\n                field: 'premiumDiscountValue',\r\n                colId: 'premiumDiscountValue',\r\n            },\r\n\r\n            {\r\n                headerName: 'Price Premium/Discount Currency',\r\n                field: 'premiumDiscountCurrency',\r\n                colId: 'premiumDiscountCurrency',\r\n            },\r\n\r\n            {\r\n                headerName: 'Price Premium/Discount Rate/Amount',\r\n                field: 'premiumDiscountCode',\r\n                colId: 'premiumDiscountCode',\r\n            },\r\n            {\r\n                headerName: 'Shipping Period',\r\n                field: 'shippingPeriod',\r\n                colId: 'shippingPeriod',\r\n            },\r\n            {\r\n                headerName: 'Shipping Start Date',\r\n                field: 'deliveryPeriodStart',\r\n                colId: 'deliveryPeriodStart',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Shipping End Date',\r\n                field: 'deliveryPeriodEnd',\r\n                colId: 'deliveryPeriodEnd',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Port of origin',\r\n                colId: 'portOriginCode',\r\n                field: 'portOriginCode',\r\n            },\r\n            {\r\n                headerName: 'Port of destination',\r\n                colId: 'portDestinationCode',\r\n                field: 'portDestinationCode',\r\n            },\r\n            {\r\n                headerName: 'Contract Terms',\r\n                colId: 'contractTermCode',\r\n                field: 'contractTermCode',\r\n            },\r\n            {\r\n                headerName: 'Payment Terms',\r\n                colId: 'paymentTermCode',\r\n                field: 'paymentTermCode',\r\n            },\r\n            {\r\n                headerName: 'Arbitration Code',\r\n                field: 'arbitrationCode',\r\n                colId: 'arbitrationCode',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onAddOrDeleteColumn(event) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(event);\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        this.grantLock(Number(event.data.sectionId), event.node);\r\n\r\n        if (this.gridApi.getSelectedRows().length === 0) {\r\n            this.noRowsSelected.emit();\r\n        }\r\n        if (!event.node.isSelected()) {\r\n            this.removeCardOnUnCheck.emit(event.data.sectionId);\r\n        } else {\r\n            this.selectedContractsForMerge = this.gridApi.getSelectedRows();\r\n\r\n            if (this.selectedContractsForMerge.length === 1) {\r\n                this.firstSelectedSplit = this.selectedContractsForMerge.map((contract) => contract.sectionId)[0];\r\n            }\r\n            if (this.selectedContractsForMerge && this.selectedContractsForMerge.length > 0) {\r\n                this.sectionIds = this.selectedContractsForMerge.map((contract) => contract.sectionId);\r\n                this.sectionIds.splice(0, 0, this.sectionIdMergeTo);\r\n\r\n                this.selectedSectionIds.emit({\r\n                    sectiondIds: this.sectionIds,\r\n                });\r\n                const contractLabels: string = this.selectedContractsForMerge.map((contract) => contract.contractSectionCode).join(',');\r\n                this.selectedContractLabels.emit(contractLabels);\r\n                if (this.mergeOption) {\r\n                    this.onMergeOptionSelected(this.mergeOption);\r\n                }\r\n            } else {\r\n                this.noRowsSelected.emit();\r\n            }\r\n        }\r\n    }\r\n\r\n    disableSelectedRowClick(sectionId: number) {\r\n        if (sectionId) {\r\n            this.gridApi.forEachNode((node) => {\r\n                if (node.data.sectionId === sectionId) {\r\n                    node.setSelected(false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    isContractToMergeRowStyle(node) {\r\n        if (!node.data.isMergeAllowed) {\r\n            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };\r\n        }\r\n    }\r\n\r\n    isMergeAllowed(node): boolean {\r\n        if (node.data.isMergeAllowed) {\r\n            if (node.data.parentContract === null) {\r\n                return false;\r\n            } else { return true; }\r\n        } else {\r\n            return (!node.data.isMergeAllowed) ? false : true;\r\n        }\r\n    }\r\n\r\n    getContractsFamily(sectionId: number) {\r\n        const getContractFamilySubscription = this.tradingService.getContractFamilyOfSectionToMerge(sectionId, this.dataVersionId).\r\n            subscribe((data) => {\r\n                data.value.forEach((contract) => {\r\n                    contract.departmentCode = this.getDepartmentCodeFromId(contract.departmentId);\r\n                    contract.weightCode = this.getWeightUnitCodeFromId(contract.weightUnitId);\r\n                    contract.priceCode = this.getPriceCodeFromId(contract.priceUnitId);\r\n                    contract.premiumDiscountCode = this.getPremiumDiscountCodeFromId(contract.premiumDiscountTypeId);\r\n                    contract.portOriginCode = this.getPortOriginCodeFromId(contract.portOriginId);\r\n                    contract.portDestinationCode = this.getPortDestinationCodeFromId(contract.portDestinationId);\r\n                    contract.contractTermCode = this.getContractTermCodeFromId(contract.contractTermId);\r\n                    contract.paymentTermCode = this.getPaymentTermCodeFromId(contract.paymentTermId);\r\n                    contract.arbitrationCode = this.getArbitrationCodeFromId(contract.arbitrationId);\r\n                    contract.counterpartyCode = this.getCounterpartyCodeFromId(contract.counterparty);\r\n                });\r\n                this.tradesListToMergeGridRows = data.value;\r\n                this.dataLength = this.tradesListToMergeGridRows.length;\r\n            });\r\n        this.subscriptions.push(getContractFamilySubscription);\r\n    }\r\n\r\n    getDepartmentCodeFromId(id: number): string {\r\n        const departmentCode = this.masterdata.departments.find(\r\n            (deparment) => deparment.departmentId === id);\r\n        return departmentCode ? departmentCode.departmentCode : null;\r\n    }\r\n\r\n    getWeightUnitCodeFromId(id: number): string {\r\n        const weightCode = this.masterdata.weightUnits.find(\r\n            (weight) => weight.weightUnitId === id);\r\n        return weightCode ? weightCode.weightCode : null;\r\n    }\r\n\r\n    getPriceCodeFromId(id: number) {\r\n        const priceCode = this.masterdata.priceUnits.find(\r\n            (e) => e.priceUnitId === id);\r\n        return priceCode ? priceCode.priceCode : '';\r\n    }\r\n\r\n    getPremiumDiscountCodeFromId(id: number) {\r\n        const premiumDiscountCode = DiscountTypes[id];\r\n        return premiumDiscountCode ? premiumDiscountCode : null;\r\n    }\r\n\r\n    getPortOriginCodeFromId(id: number) {\r\n        const portOriginCode = this.masterdata.ports.find(\r\n            (e) => e.portId === id);\r\n        return portOriginCode ? portOriginCode.portCode : '';\r\n    }\r\n\r\n    getPortDestinationCodeFromId(id: number) {\r\n        const portDestinationCode = this.masterdata.ports.find(\r\n            (e) => e.portId === id);\r\n        return portDestinationCode ? portDestinationCode.portCode : '';\r\n    }\r\n\r\n    getArbitrationCodeFromId(id: number) {\r\n        const arbitrationCode = this.masterdata.arbitrations.find(\r\n            (e) => e.arbitrationId === id);\r\n        return arbitrationCode ? arbitrationCode.arbitrationCode : '';\r\n    }\r\n\r\n    getContractTermCodeFromId(id: number) {\r\n        const contractTermCode = this.masterdata.contractTerms.find(\r\n            (e) => e.contractTermId === id);\r\n        return contractTermCode ? contractTermCode.contractTermCode : '';\r\n    }\r\n\r\n    getPaymentTermCodeFromId(id: number) {\r\n        const paymentTermCode = this.masterdata.paymentTerms.find(\r\n            (e) => e.paymentTermsId === id);\r\n        return paymentTermCode ? paymentTermCode.paymentTermCode : '';\r\n    }\r\n\r\n    getFormGroup() {\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onMergeOptionSelected(event) {\r\n        this.mergeOption = event;\r\n        this.sectionIdSelectedToMerge = new MergeContracts();\r\n        this.sectionsSelectedToMerge = [];\r\n        const selectedContractsToSave: ContractFamilyToTradeMerge[] = this.gridApi.getSelectedRows();\r\n\r\n        if (event === ContractMergeOptions.ContractHeader) {\r\n            this.sectionIdSelectedToMerge.mergeFromSectionIds = selectedContractsToSave.map((contract) => contract.sectionId);\r\n            const rowNode = this.gridApi.getDisplayedRowAtIndex(0);\r\n            if (rowNode) {\r\n                this.sectionIdSelectedToMerge.mergeToSectionId = rowNode.data.sectionId;\r\n                this.sectionIdMergeTo = rowNode.data.sectionId;\r\n            }\r\n            this.getContractLabelFromId(this.sectionIdSelectedToMerge.mergeToSectionId);\r\n        } else if (event === ContractMergeOptions.ContractParent) {\r\n\r\n            const parentSections: string[] = [];\r\n            if (selectedContractsToSave && selectedContractsToSave.length > 0) {\r\n                selectedContractsToSave.forEach((contract) => {\r\n                    if (!parentSections.includes(contract.parentContract)) {\r\n                        parentSections.push(contract.parentContract);\r\n                    }\r\n                });\r\n                parentSections.forEach((parentSection) => {\r\n                    const selectedSectionToMerge = new MergeContracts();\r\n                    const parentContractSectionCode = this.tradesListToMergeGridRows.find((contract) =>\r\n                        contract.contractSectionCode === parentSection);\r\n                    if (parentContractSectionCode) {\r\n                        selectedSectionToMerge.mergeToSectionId = parentContractSectionCode.sectionId;\r\n                        selectedSectionToMerge.mergeFromSectionIds = selectedContractsToSave.filter((contract) =>\r\n                            contract.parentContract === parentSection && contract.sectionId !== parentContractSectionCode.sectionId)\r\n                            .map((selectedContract) => selectedContract.sectionId);\r\n                        selectedSectionToMerge.mergeOption = event;\r\n                        this.sectionsSelectedToMerge.push(selectedSectionToMerge);\r\n                        this.sectionIds = selectedContractsToSave.filter((contract) =>\r\n                            contract.parentContract === parentSection && contract.sectionId !== parentContractSectionCode.sectionId)\r\n                            .map((selectedContract) => selectedContract.sectionId);\r\n                        this.sectionIds.splice(0, 0, selectedSectionToMerge.mergeToSectionId);\r\n                        this.selectedSectionIds.emit({\r\n                            sectiondIds: this.sectionIds,\r\n                        });\r\n                    }\r\n                });\r\n                this.getSaveMessageForMergeOption();\r\n            }\r\n\r\n        } else if (event === ContractMergeOptions.FirstSelectedSplit) {\r\n            const filterSelectedContracts = selectedContractsToSave.filter((contract) => contract.sectionId !== this.firstSelectedSplit);\r\n            this.sectionIdSelectedToMerge.mergeFromSectionIds = filterSelectedContracts.map((contract) => contract.sectionId);\r\n            this.sectionIdSelectedToMerge.mergeToSectionId = this.firstSelectedSplit;\r\n            this.sectionIds = filterSelectedContracts.map((contract) => contract.sectionId);\r\n            this.sectionIds.splice(0, 0, this.sectionIdSelectedToMerge.mergeToSectionId);\r\n\r\n            if (this.sectionIds && this.sectionIds.length > 0) {\r\n                if (this.sectionIds.length < 2) {\r\n                    const messageText = 'Select atleast 2 splits to merge.';\r\n                    this.snackbarService.informationSnackBar(messageText);\r\n                } else {\r\n                    this.selectedSectionIds.emit({\r\n                        sectiondIds: this.sectionIds,\r\n                    });\r\n                }\r\n            }\r\n            if (this.sectionIdSelectedToMerge.mergeToSectionId) {\r\n                this.getContractLabelFromId(this.sectionIdSelectedToMerge.mergeToSectionId);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getContractLabelFromId(mergeToSectionId: number) {\r\n        const sectionId = this.tradesListToMergeGridRows.find((trade) =>\r\n            trade.sectionId === Number(mergeToSectionId));\r\n        if (sectionId) {\r\n            this.contractLabel = sectionId.contractSectionCode;\r\n            this.mergeToContractLabel.emit(this.contractLabel);\r\n        }\r\n    }\r\n\r\n    onDisplayWarningMessage(selectedSectionId: MergeContracts[]) {\r\n        let mergeToSectionId;\r\n        const mergeFromSectionIds: number[] = [];\r\n        if (selectedSectionId && selectedSectionId.length > 1) {\r\n            selectedSectionId.forEach((element) => {\r\n                mergeToSectionId = element.mergeToSectionId;\r\n                element.mergeFromSectionIds.forEach((sectionId) => {\r\n                    mergeFromSectionIds.push(sectionId);\r\n                });\r\n\r\n            });\r\n        } else if (selectedSectionId && selectedSectionId.length === 1) {\r\n            mergeToSectionId = selectedSectionId[0].mergeToSectionId;\r\n            selectedSectionId[0].mergeFromSectionIds.forEach((sectionId) => {\r\n                mergeFromSectionIds.push(sectionId);\r\n            });\r\n        }\r\n\r\n        const sectionIdMergeTo = this.tradesListToMergeGridRows.find((trade) => trade.sectionId === Number(mergeToSectionId));\r\n        mergeFromSectionIds.forEach((sectionId) => {\r\n            const tradeList = this.tradesListToMergeGridRows.find((trade) => trade.sectionId === sectionId);\r\n            if (tradeList) {\r\n                if (tradeList.hasCost) {\r\n                    this.mergeFromsectionIdWithCost.push(String(tradeList.sectionId));\r\n                    this.mergeFromsectionIdWithCost.forEach((contractId) => {\r\n                        const id = this.tradesListToMergeGridRows.find((trade) => trade.sectionId === Number(contractId));\r\n                        if (id) {\r\n                            this.mergeFromContractLabel.push(id.contractSectionCode);\r\n                            this.mergeFromContractLabel = Array.from(new Set(this.mergeFromContractLabel.map((contract) => contract)));\r\n                        }\r\n                    });\r\n                }\r\n                if (tradeList.hasCost && tradeList.isInvoiced) {\r\n                    this.mergeFromsectionIdWithInvoiced.push(String(tradeList.sectionId));\r\n                    this.mergeFromsectionIdWithInvoiced.forEach((contractId) => {\r\n                        const id = this.tradesListToMergeGridRows.find((trade) => trade.sectionId === Number(contractId));\r\n                        if (id) {\r\n                            this.mergeFromContractLabel.push(id.contractSectionCode);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        if (sectionIdMergeTo) {\r\n            this.mergeToHasCost = sectionIdMergeTo.hasCost;\r\n        }\r\n        if (this.mergeToHasCost && this.mergeFromsectionIdWithCost.length < 1) {\r\n            const costWarningDialog = this.dialog.open(CostImpactWarningDialogComponent, {\r\n                width: '40%',\r\n                height: '40%',\r\n                data: {\r\n                    confirmationMessage: 'The cost of the following contracts will be dropped, please check the cost estimates and P&L impact',\r\n                    contractReference: this.mergeFromContractLabel,\r\n                    warningList: this.warningListForDiffFields,\r\n                },\r\n            });\r\n            const confirmationSubscription = costWarningDialog.afterClosed().subscribe((result) => {\r\n                if (result) {\r\n                    this.message = result ? true : false;\r\n                    this.successMsg.emit(this.message);\r\n                    return;\r\n                }\r\n            });\r\n            this.subscriptions.push(confirmationSubscription);\r\n        }\r\n\r\n        if (!this.mergeToHasCost && this.mergeFromsectionIdWithCost.length > 0) {\r\n            const costWarningDialog = this.dialog.open(CostImpactWarningDialogComponent, {\r\n                width: '40%',\r\n                height: '40%',\r\n                data: {\r\n                    confirmationMessage: 'The cost of the following contracts will be dropped, please check the cost estimates and P&L impact',\r\n                    contractReference: this.mergeFromContractLabel,\r\n                    warningList: this.warningListForDiffFields,\r\n                },\r\n            });\r\n            costWarningDialog.afterClosed().subscribe((result) => {\r\n                if (result) {\r\n                    this.message = result ? true : false;\r\n                    this.successMsg.emit(this.message);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!this.mergeToHasCost && this.mergeFromsectionIdWithInvoiced.length > 0) {\r\n            const costWarningDialog = this.dialog.open(CostImpactWarningDialogComponent, {\r\n                width: '40%',\r\n                height: '40%',\r\n                data: {\r\n                    confirmationMessage: 'The cost of the following contracts will be updated, please check the cost estimates and P&L impact',\r\n                    contractReference: this.mergeFromContractLabel,\r\n                    warningList: this.warningListForDiffFields,\r\n                },\r\n            });\r\n            costWarningDialog.afterClosed().subscribe((result) => {\r\n                if (result) {\r\n                    this.message = result ? true : false;\r\n                    this.successMsg.emit(this.message);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        if (this.mergeToHasCost && this.mergeFromsectionIdWithCost.length > 0 ||\r\n            !this.mergeToHasCost && this.mergeFromsectionIdWithCost.length < 1) {\r\n            this.successMsg.emit(true);\r\n        }\r\n    }\r\n\r\n    populateEntity(entity: MergeContracts[]) {\r\n        if (this.mergeOption === ContractMergeOptions.ContractParent) {\r\n            return this.sectionsSelectedToMerge;\r\n        } else {\r\n            const selectedContracts = entity;\r\n            this.sectionIdSelectedToMerge.mergeOption = this.mergeOption;\r\n            selectedContracts.push(this.sectionIdSelectedToMerge);\r\n            return selectedContracts;\r\n        }\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.tradesListToMergeGridOptions.api.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        this.subscriptions.push(\r\n                            this.lockService.lockContract(sectionId, LockFunctionalContext.TradeMerge)\r\n                                .subscribe(() => {\r\n                                    this.refeshResourceInformation();\r\n                                    this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                }));\r\n\r\n                    }\r\n                }));\r\n            } else {\r\n                if (!this.unlocking.includes(sectionId)) {\r\n                    this.unlocking.push(sectionId);\r\n                    this.refeshResourceInformation();\r\n                    const sectionInfo = this.resourcesInformation.filter((rsc) => rsc.resourceId === sectionId);\r\n                    if (sectionInfo && sectionInfo.length === 0) {\r\n                        this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.TradeMerge)\r\n                            .subscribe(() => {\r\n                                node.setRowSelectable(true);\r\n                                this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                            }));\r\n                    } else {\r\n                        node.setRowSelectable(true);\r\n                        this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    warningMessageForDiffFields(warningList: string) {\r\n        if (this.warningListForDiffFields) {\r\n            if (this.warningListForDiffFields.length > 0) {\r\n                this.warningListForDiffFields = this.warningListForDiffFields + ' , ' + warningList;\r\n            } else {\r\n                this.warningListForDiffFields = this.warningListForDiffFields + warningList;\r\n            }\r\n        } else {\r\n            this.warningListForDiffFields = warningList;\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.tradesListToMergeGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = this.contractVariable;\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription: Subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n\r\n    getSaveMessageForMergeOption() {\r\n        let mergeFromContractReference: string[] = [];\r\n        let message: string = '';\r\n        let mergeToSectionReference: string = '';\r\n        if (this.sectionsSelectedToMerge) {\r\n            this.sectionsSelectedToMerge.forEach((section) => {\r\n                mergeToSectionReference = this.tradesListToMergeGridRows.find((trade) =>\r\n                    trade.sectionId === Number(section.mergeToSectionId)).contractSectionCode;\r\n                if (section.mergeFromSectionIds) {\r\n                    mergeFromContractReference = [];\r\n                    section.mergeFromSectionIds.forEach((contract) => {\r\n                        mergeFromContractReference.push(this.tradesListToMergeGridRows.find((trade) =>\r\n                            trade.sectionId === Number(contract)).contractSectionCode);\r\n                    });\r\n                }\r\n                message = message + 'The Trade ' + mergeFromContractReference.toString() +\r\n                    ' is merged to ' + mergeToSectionReference + '. ';\r\n            });\r\n            this.multipleMergeSelected.emit(message);\r\n        }\r\n    }\r\n\r\n    getCounterpartyCodeFromId(id: number): string {\r\n        const counterpartyCode = this.masterdata.counterparties.find(\r\n            (counterParty) => counterParty.counterpartyID === id);\r\n        return counterpartyCode ? counterpartyCode.counterpartyCode : null;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\"\\r\\n         class=\\\"search\\\">\\r\\n        <mat-form-field>\\r\\n            <input matInput\\r\\n                   [formControl]=\\\"searchValueCtrl\\\"\\r\\n                   placeholder=\\\"First Criteria\\\"\\r\\n                   (keydown.enter)=\\\"onSearchButtonClick()\\\"\\r\\n                   #message>\\r\\n        </mat-form-field>\\r\\n        <button mat-raised-button\\r\\n                (click)=\\\"onSearchButtonClick()\\\"\\r\\n                class=\\\"heroGradient\\\">\\r\\n            <mat-icon aria-label=\\\"Search\\\"\\r\\n                      class=\\\"search-icon\\\">search</mat-icon>\\r\\n        </button>\\r\\n    </div>\\r\\n</mat-card>\\r\\n\\r\\n<atlas-list-and-search class=\\\"default-height\\\" *ngIf=\\\"!isLoading\\\"\\r\\n                       [gridCode]=\\\"gridCode\\\"\\r\\n                       [gridTitle]=\\\"(childSectionsSearchResult ? childSectionsSearchResult.length + ' ' : '') + 'Tranche & Split Found'\\\"\\r\\n                       [company]=\\\"company\\\"\\r\\n                       [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                       [dataLoader]=\\\"dataLoader\\\"\\r\\n                       [isFilterSetDisplay]=\\\"false\\\"\\r\\n                       [dataVersionId]=\\\"dataVersionId\\\"\\r\\n                       #listAndSearchComponent>\\r\\n</atlas-list-and-search>\\r\\n<atlas-invoice-status #invoiceStatusComponent\\r\\n                      [hidden]=\\\"true\\\"></atlas-invoice-status>\\r\\n<atlas-invoicing-form-component #invoiceFormComponent\\r\\n                                [hidden]=\\\"true\\\"></atlas-invoicing-form-component>\\r\\n<atlas-allocation-info-form-component #allocationInfoComponent\\r\\n                                      [hidden]=\\\"true\\\"></atlas-allocation-info-form-component>\\r\\n\"","module.exports = \".atr-grid-option {\\n  height: 500px; }\\n\"","import { Component, Input, NgZone, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ListAndSearchComponent } from '../../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { Section } from '../../../../../shared/entities/section.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { ListAndSearchFilterType } from '../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { PositionMonthTypes } from '../../../../../shared/enums/position-month-type.enum';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { ChildSectionsDataLoader } from '../../../../../shared/services/list-and-search/childSections-data-loader';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { InvoiceStatusComponent } from '../../invoice-marking-tab/components/invoice-status/invoice-status.component';\r\nimport { AllocationInfoFormComponentComponent } from '../allocation-info-form-component/allocation-info-form-component.component';\r\nimport { InvoicingFormComponentComponent } from '../invoicing-form-component/invoicing-form-component.component';\r\nimport { ChildSectionsSearchResult } from './../../../../../shared/dtos/chilesection-search-result';\r\nimport { MasterData } from './../../../../../shared/entities/masterdata.entity';\r\nimport { ContractStatus } from './../../../../../shared/enums/contract-status.enum';\r\nimport { PricingMethods } from './../../../../../shared/enums/pricing-method.enum';\r\nimport { SectionReference } from './../../../../entities/section-reference';\r\nimport { TradeActionsService } from './../../../../services/trade-actions.service';\r\n\r\n@Component({\r\n    selector: 'atlas-tranche-split-grid',\r\n    providers: [ChildSectionsDataLoader],\r\n    templateUrl: './tranche-split-grid.component.html',\r\n    styleUrls: ['./tranche-split-grid.component.scss'],\r\n})\r\nexport class TrancheSplitGridComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    @ViewChild('invoiceStatusComponent') invoiceStatusComponent: InvoiceStatusComponent;\r\n    @ViewChild('invoiceFormComponent') invoiceFormComponent: InvoicingFormComponentComponent;\r\n    @ViewChild('allocationInfoComponent') allocationInfoComponent: AllocationInfoFormComponentComponent;\r\n\r\n    @Input() childSectionsSearchResult: ChildSectionsSearchResult[];\r\n\r\n    gridCode = 'tradeChildSectionListGrid';\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    isFilterDisplay: boolean = false;\r\n\r\n    company: string;\r\n    searchForm: FormGroup;\r\n    dataLength = 0;\r\n    isLoading: boolean = true;\r\n    searchTerm: string;\r\n    masterdata: MasterData;\r\n    searchValueCtrl = new AtlasFormControl('SearchTrade');\r\n    toggleClicked: boolean = false;\r\n    contractStatus: string = null;\r\n\r\n    gridOptions: agGrid.GridOptions = {};\r\n    gridColumns: agGrid.ColDef[];\r\n    autoGroupColumnDef: agGrid.ColDef[];\r\n    trancheAndSplitRows: Section[];\r\n    childSections: Section[];\r\n\r\n    private getSectionSubscription: Subscription;\r\n\r\n    componentId: string = 'trancheSplitList';\r\n    sectionId: number;\r\n    parentModel: Section;\r\n    dataVersionId: number;\r\n\r\n    gridContext: TrancheSplitGridComponent;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        private companyManager: CompanyManagerService,\r\n        protected utilService: UtilService,\r\n        protected router: Router,\r\n        private route: ActivatedRoute,\r\n        protected tradingService: TradingService,\r\n        public dataLoader: ChildSectionsDataLoader,\r\n        protected tradeActionsService: TradeActionsService,\r\n        protected ngZone: NgZone,\r\n        private gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.gridContext = this;\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        // Override getData because data is already loaded\r\n        this.dataLoader.getData = this.getData.bind(this);\r\n\r\n        const filter = new ListAndSearchFilter();\r\n        filter.fieldId = 0;\r\n        filter.fieldName = 'sectionId';\r\n        filter.predicate = {\r\n            filterType: ListAndSearchFilterType.Text,\r\n            operator: 'eq',\r\n            value1: String(this.sectionId),\r\n        };\r\n        filter.isActive = true;\r\n        this.additionalFilters.push(filter);\r\n    }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        offset?: number,\r\n        limit?: number): Observable<ChildSectionsSearchResult[]> {\r\n\r\n        const current: ChildSectionsSearchResult = this.getChildSectionSearchResultFromSection(this.parentModel);\r\n\r\n        let list: ChildSectionsSearchResult[] = [];\r\n        if (this.childSectionsSearchResult) {\r\n            list = this.childSectionsSearchResult;\r\n        }\r\n\r\n        list.unshift(current);\r\n\r\n        list = list.sort((section1, section2) => section1.contractLabel < section2.contractLabel ? -1 : 1);\r\n\r\n        if (this.searchValueCtrl.value) {\r\n            list = list.filter((section: ChildSectionsSearchResult) =>\r\n                section.contractLabel.toUpperCase().startsWith((this.searchValueCtrl.value.toString().toUpperCase())));\r\n        }\r\n        if (this.contractStatus) {\r\n            // only approve child sections\r\n            const sectionOriginId = list.find((item) => item.sectionId === this.sectionId).sectionOriginId;\r\n            for (const val of list) {\r\n                if (!sectionOriginId || sectionOriginId === 0) {\r\n                    val.status = this.contractStatus;\r\n                } else {\r\n                    if (val.sectionId === this.sectionId || val.sectionOriginId === this.sectionId) {\r\n                        val.status = this.contractStatus;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return of(list);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.getSectionSubscription) {\r\n            this.getSectionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    getChildSectionSearchResultFromSection(section: Section): ChildSectionsSearchResult {\r\n        const department = this.masterdata.departments.find((dep) => dep.departmentId === section.departmentId);\r\n        const commodity = this.masterdata.commodities.find((com) => com.commodityId === section.commodityId);\r\n        const weightUnit = this.masterdata.weightUnits.find((unit) => unit.weightUnitId === section.weightUnitId);\r\n        const priceUnit = this.masterdata.priceUnits.find((unit) => unit.priceUnitId === section.priceUnitId);\r\n        const arbitration = this.masterdata.arbitrations.find((unit) => unit.arbitrationCode === section.arbitration);\r\n        const portOrigin = this.masterdata.ports.find((unit) => unit.portCode === section.portOfOrigin);\r\n        const portDestination = this.masterdata.ports.find((unit) => unit.portCode === section.portOfDestination);\r\n        const periodType = this.masterdata.periodTypes.find((unit) => unit.periodTypeCode === section.periodTypeCode);\r\n        const invoiceStatus = this.masterdata.invoiceStatus.find((unit) =>\r\n            Number(unit.code) === section.invoicingStatusId);\r\n\r\n        const sectionResult: ChildSectionsSearchResult = {\r\n            contractLabel: section.contractLabel,\r\n            sectionId: section.sectionId,\r\n            status: section.status || section.status === 0 ? ContractStatus[section.status] : null,\r\n            blDate: section.blDate,\r\n            allocatedTo: section.allocatedTo ? section.allocatedTo.contractLabel : '',\r\n            assignedCharterReference: section.assignedCharterReference,\r\n            department: department ? department.description : '',\r\n            departmentCode: department ? department.departmentCode : '',\r\n            counterpartyReference: section.counterpartyReference,\r\n            contractTerm: section.contractTerms,\r\n            contractTermsLocation: section.contractTermsLocation,\r\n            commodityCode: commodity ? commodity.commodityType : '',\r\n            commodityOrigin: commodity ? commodity.commodityOrigin : '',\r\n            commodityGrade: commodity ? commodity.commodityGrade : '',\r\n            commodityLvl4: commodity ? commodity.commodityLvl4 : '',\r\n            commodityLvl5: commodity ? commodity.commodityLvl5 : '',\r\n            weightUnit: weightUnit ? weightUnit.weightCode : '',\r\n            quantity: section.quantity,\r\n            currency: section.currencyCode,\r\n            priceUnit: priceUnit ? priceUnit.priceCode : '',\r\n            price: section.price,\r\n            paymentTerm: section.paymentTerms,\r\n            deliveryPeriodStartDate: section.deliveryPeriodStartDate,\r\n            positionMonthIndex: section.positionMonthIndex,\r\n            contractDate: section.header ? section.header.contractDate : section.contractDate,\r\n            pricingMethod: section.pricingMethod || section.pricingMethod === 0 ? PricingMethods[section.pricingMethod] : null,\r\n            lastModifiedBy: section.lastModifiedBy,\r\n            physicalContractId: section.physicalContractId,\r\n            createdDateTime: section.creationDate,\r\n            createdBy: section.createdBy,\r\n            modifiedDateTime: section.lastModifiedDate,\r\n            modifiedBy: section.lastModifiedBy,\r\n            contractType: section.contractType,\r\n            contractId: section.contractId,\r\n            sectionNumber: section.sectionNumber,\r\n            firstApprovalDateTime: section.firstApprovalDateTime,\r\n            departmentId: section.departmentId,\r\n            buyerCode: section.buyerCode,\r\n            buyerDescription: section.buyerDescription,\r\n            charterDescription: section.charterDescription,\r\n            sellerDescription: section.sellerDescription,\r\n            paymentTermDescription: section.paymentTermDescription,\r\n            contractTermLocationDescription: section.contractTermLocationDescription,\r\n            currencyDescription: section.currencyDescription,\r\n            weightUnitDescription: section.weightUnitDescription,\r\n            priceUnitDescription: section.priceUnitDescription,\r\n            traderDisplayName: section.traderDisplayName,\r\n            companyId: section.companyId,\r\n            contractTermDescription: section.contractTermDescription,\r\n            sellerCode: section.sellerCode,\r\n            counterparty: section.contractType === ContractTypes.Purchase\r\n                ? section.sellerCode : section.buyerCode,\r\n            commodityId: section.commodityId,\r\n            originalQuantity: section.originalQuantity,\r\n            weightUnitId: section.weightUnitId,\r\n            toleranceMin: null,\r\n            toleranceMax: null,\r\n            portOriginCode: section.portOfOrigin,\r\n            portDestinationCode: section.portOfDestination,\r\n            positionMonthType: section.positionMonthType,\r\n            allocationDate: section.allocationDate,\r\n            charterAssignmentDate: section.charterAssignmentDate,\r\n            creationDate: section.creationDate,\r\n            lastModifiedDate: section.lastModifiedDate,\r\n            finalInvoiceRequired: false,\r\n            cropYear: section.cropYear,\r\n            packingCode: section.packingCode,\r\n            paymentTermCode: section.paymentTerms,\r\n            contractTermCode: section.contractTerms,\r\n            periodTypeCode: periodType ? periodType.periodTypeDescription : '',\r\n            priceUnitId: section.priceUnitId,\r\n            priceCode: priceUnit.priceCode,\r\n            arbitrationCode: section.arbitration,\r\n            premiumDiscountTypeId: section.premiumDiscountTypeId,\r\n            premiumDiscountValue: section.premiumDiscountValue,\r\n            premiumDiscountCurrency: section.premiumDiscountCurrency,\r\n            premiumDiscountBasis: section.premiumDiscountBasis,\r\n            contractedValue: section.contractedValue,\r\n            sectionTypeId: section.sectionTypeId,\r\n            portOfOrigin: portOrigin ? portOrigin.description : '',\r\n            portOfDestination: portDestination ? portDestination.description : '',\r\n            deliveryPeriodEndDate: section.deliveryPeriodEndDate,\r\n            contractTerms: section.contractTerms,\r\n            periodType: periodType ? periodType.periodTypeDescription : '',\r\n            paymentTerms: section.paymentTerms,\r\n            cropYearTo: section.cropYearTo,\r\n            arbitration: section.arbitration,\r\n            positionMonth: section.positionMonth,\r\n            charterId: section.charterId,\r\n            invoiceReference: section.invoiceReference,\r\n            otherReference: section.otherReference,\r\n            shippingPeriod: section.shippingPeriod,\r\n            periodTypeId: section.periodTypeId,\r\n            invoicingStatusId: section.invoicingStatusId,\r\n            invoiceTypeId: section.invoiceTypeId,\r\n            sectionOriginId: section.sectionOriginId,\r\n            contractValue: Number(section.contractedValue),\r\n            memo: section.memorandum,\r\n            commodityDescription: commodity ? commodity.commodityDescription : '',\r\n            arbitrationDescription: arbitration ? arbitration.description : '',\r\n            positionType: PositionMonthTypes[section.positionMonthType],\r\n            portOfOriginDescription: portOrigin ? portOrigin.description : '',\r\n            portOfDestinationDescription: portDestination ? portDestination.description : '',\r\n            groupingNumber: this.allocationInfoComponent.groupingNumberCtrl.value,\r\n            mainInvoiceReference: section.invoiceReference,\r\n            mainInvoiceDate: section.invoiceDate,\r\n            percentageInvoiced: section.totalInvoicePercent,\r\n            invoiceValue: section.totalInvoiceValue,\r\n            paymentDate: null,\r\n            quantityInvoiced: section.totalInvoiceQuantity,\r\n            invoicingStatus: invoiceStatus ? invoiceStatus.description : '',\r\n            amendedBy: section.lastModifiedBy,\r\n            amendedOn: section.lastModifiedDate,\r\n            vesselName: null,\r\n            bLReference: '',\r\n            charterManager: '',\r\n            counterpartyRef: section.counterpartyReference,\r\n            contractIssuedOn: section.lastDocumentIssuedDate,\r\n            contractTypeCode: ContractTypes[section.contractType],\r\n            quantityCodeInvoiced: weightUnit ? weightUnit.weightCode : '',\r\n            allocatedSectionId: section.allocatedTo ? section.allocatedTo.sectionId : null,\r\n            estimatedMaturityDate: section.estimatedMaturityDate,\r\n        };\r\n        return sectionResult;\r\n\r\n    }\r\n\r\n    initForm(entity: Section, isEdit: boolean): any {\r\n        this.parentModel = entity;\r\n        this.childSections = entity.childSections;\r\n        this.dataLength = this.childSections ? this.childSections.length : 0;\r\n        if (this.dataLength > 0) {\r\n            this.trancheAndSplitRows = this.childSections.map((o) => o);\r\n        }\r\n        this.isLoading = false;\r\n        return entity;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSearchButtonClick() {\r\n        this.listAndSearchComponent.loadData(true);\r\n\r\n    }\r\n\r\n    contractStatusChanged(contractStatus: ContractStatus) {\r\n        this.contractStatus = ContractStatus[contractStatus];\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n    onTabActive() {\r\n        this.gridService.sizeColumns(this.listAndSearchComponent.agGridOptions);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>Inter Company Transfer</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div style=\\\"margin-bottom: 10px\\\">\\r\\n            You selected LDC companies both as buyer and seller\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  [checked]=\\\"isInterco\\\"\\r\\n                                  (change)=\\\"toggleIntercoTrade()\\\">Create an Inter-company contract</mat-slide-toggle>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"100%\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 *ngIf=\\\"isInterco\\\">\\r\\n                <mat-divider class=\\\"divider\\\"></mat-divider>\\r\\n                <div fxFlex=\\\"100%\\\"\\r\\n                     class=\\\"dropdown-height\\\">\\r\\n                     <div class=\\\"dropdown-width\\\">\\r\\n                    <atlas-dropdown-select fxFlex='30%'\\r\\n                                           fxLayout=\\\"row\\\"\\r\\n                                           fxLayoutAlign=\\\"start left\\\"\\r\\n                                           label=\\\"Company\\\"\\r\\n                                           [fieldControl]=\\\"companyCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"companyList\\\"\\r\\n                                           [selectProperties]=\\\"company\\\"\\r\\n                                           [displayProperty]=\\\"companyDisplay\\\"\\r\\n                                           (optionSelected)=\\\"bindDepartments($event)\\\"\\r\\n                                           [required]=\\\"companyCtrl.isRequired\\\">\\r\\n                    </atlas-dropdown-select>\\r\\n                </div>\\r\\n                    <atlas-dropdown-select fxLayout=\\\"row\\\"\\r\\n                                           fxFlex='30%'\\r\\n                                           label=\\\"Department\\\"\\r\\n                                           [fieldControl]=\\\"departmentCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"filteredDepartmentList\\\"\\r\\n                                           selected=\\\"true\\\"\\r\\n                                           [isAutocompleteActivated]=\\\"true\\\"\\r\\n                                           [displayProperty]=\\\"departmentDisplay\\\"\\r\\n                                           (optionSelected)=\\\"bindTraders($event)\\\"\\r\\n                                           [selectProperties]=\\\"department\\\">\\r\\n                    </atlas-dropdown-select>\\r\\n                    <atlas-dropdown-select fxLayout=\\\"row\\\"\\r\\n                                           fxFlex='30%'\\r\\n                                           label=\\\"Trader\\\"\\r\\n                                           [fieldControl]=\\\"traderCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [readonly]=\\\"true\\\"\\r\\n                                           [options]=\\\"filteredTraderList\\\"\\r\\n                                           selected=\\\"true\\\"\\r\\n                                           [selectProperties]=\\\"trader\\\"\\r\\n                                           [isAutocompleteActivated]=\\\"true\\\"\\r\\n                                           [displayProperty]=\\\"traderDisplay\\\">\\r\\n                    </atlas-dropdown-select>\\r\\n                </div>\\r\\n            </div>\\r\\n            <atlas-intero-state-banner *ngIf=\\\"isInterco\\\"\\r\\n                                       [title]=\\\"bannerTitle\\\"\\r\\n                                       [description]=\\\"bannerDescription\\\"\\r\\n                                       [state]=\\\"bannerState\\\"></atlas-intero-state-banner>\\r\\n\\r\\n            <mat-card *ngIf=\\\"isInterco &&  isValueMissing\\\">\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h2>Values to set up</h2>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <div ag-grid=\\\"\\\"\\r\\n                         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                        <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                                         class=\\\"ag-theme-material\\\"\\r\\n                                         [columnDefs]=\\\"interoGridCols\\\"\\r\\n                                         [rowData]=\\\"intercoMissingData\\\"\\r\\n                                         [gridOptions]=\\\"\\\"\\r\\n                                         domLayout=\\\"autoHeight\\\"\\r\\n                                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                         (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                                         [suppressRowClickSelection]=\\\"true\\\"\\r\\n                                         [enableSorting]=\\\"true\\\"\\r\\n                                         [enableColResize]=\\\"true\\\"\\r\\n                                         enableFilter\\r\\n                                         [pagination]=\\\"true\\\"\\r\\n                                         [paginationPageSize]=\\\"5\\\">\\r\\n                        </ag-grid-angular>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <div class=\\\"btn-container\\\">\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start start\\\">\\r\\n                <button *ngIf=\\\"isInterco\\\"\\r\\n                        mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                    Discard\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button *ngIf=\\\"!isInterco\\\"\\r\\n                        mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\">\\r\\n                    Cancel\\r\\n                </button>\\r\\n                <button mat-raised-button\\r\\n                        type=\\\"button\\\"\\r\\n                        [disabled]=\\\"disableSaveButton\\\"\\r\\n                        (click)=\\\"onSaveButtonClicked()\\\">\\r\\n                    save\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".divider {\\n  margin: auto !important; }\\n\\n.dropdown-height {\\n  margin-top: 15px !important; }\\n\\ndiv.dropdown-width {\\n  width: 100%; }\\n\"","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridHyperlinkComponent } from '../../../../shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { IntercoTrade } from '../../../../shared/entities/interco-trade.entity';\r\nimport { IntercoField, IntercoValidation } from '../../../../shared/entities/interco-validation.entity';\r\nimport { MasterDataProps } from '../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { Trader } from '../../../../shared/entities/trader.entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../shared/services/util.service';\r\nimport { BannerStates } from './intero-state-banner/intero-state-banner.component';\r\n\r\n@Component({\r\n    selector: 'atlas-interco-trade-dialog',\r\n    templateUrl: './interco-trade-dialog.component.html',\r\n    styleUrls: ['./interco-trade-dialog.component.scss'],\r\n})\r\nexport class IntercoTradeDialogComponent extends BaseFormComponent implements OnInit {\r\n    isInterco: boolean = false;\r\n    companyCtrl = new AtlasFormControl('Company');\r\n    departmentCtrl = new AtlasFormControl('Department');\r\n    traderCtrl = new AtlasFormControl('Trader');\r\n    company: string[] = ['companyId'];\r\n    department: string[] = ['departmentCode', 'description'];\r\n    selectPropertiesDept = ['departmentCode'];\r\n    trader: string[] = ['samAccountName', 'displayName'];\r\n    traderDisplay: string = 'samAccountName';\r\n    departmentDisplay: string = 'departmentCode';\r\n    companyDisplay: 'companyId';\r\n    masterdata: MasterData;\r\n    companyList: Company[] = [];\r\n    departmentList: Department[] = [];\r\n    filteredDepartmentList: Department[] = [];\r\n    traderList: Trader[] = [];\r\n    filteredTraderList: Trader[] = [];\r\n    filteredCompany: Company[] = [];\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Companies,\r\n        MasterDataProps.Traders,\r\n        MasterDataProps.Departments,\r\n    ];\r\n    formGroup: FormGroup;\r\n    isValueMissing: boolean = false;\r\n    bannerState: BannerStates;\r\n    bannerTitle: string;\r\n    bannerDescription: string;\r\n    interoGridCols: agGrid.ColDef[];\r\n    rowData: any[] = [];\r\n    intercoTradeData: IntercoTrade = {} as IntercoTrade;\r\n    selectedCompany: Company;\r\n    disableSaveButton: boolean;\r\n    intercoValidation: IntercoValidation;\r\n    intercoMissingData: IntercoField[] = [];\r\n    constructor(public thisDialogRef: MatDialogRef<IntercoTradeDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        protected masterdataService: MasterdataService,\r\n        protected tradingService: TradingService,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected snackbarservice: SnackbarService,\r\n        private route: ActivatedRoute,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        thisDialogRef.disableClose = true;\r\n        this.companyList = data.counterpartyCompanies;\r\n        this.intercoValidation = data.intercoValidation;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.tradingService.getAllTraders()\r\n            .subscribe((traders) => {\r\n                this.traderList = traders.value;\r\n                this.filteredTraderList = this.traderList;\r\n                this.traderCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredTraderList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.traderList,\r\n                        ['samAccountName', 'displayName'],\r\n                    );\r\n                });\r\n                this.setValidators();\r\n            });\r\n\r\n        this.initIntercoGridColumns();\r\n        this.masterdataService.getMasterData(this.masterdataList).subscribe((masterData: MasterData) => {\r\n            this.masterdata = masterData;\r\n        });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            companyCtrl: this.companyCtrl,\r\n            departmentCtrl: this.departmentCtrl,\r\n            traderCtrl: this.traderCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    handleCancel(isCancel: boolean) {\r\n        this.intercoTradeData.isInterco = false;\r\n        this.intercoTradeData.isCancelled = isCancel;\r\n        this.thisDialogRef.close(this.intercoTradeData);\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.handleCancel(true);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.handleCancel(true);\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (this.formBuilder) {\r\n            if (this.isInterco) {\r\n                this.intercoTradeData.companyId = this.companyCtrl.value.companyId;\r\n                const department = this.departmentList.find((dep) =>\r\n                    (dep.departmentCode === this.departmentCtrl.value.departmentCode &&\r\n                        dep.companyId === this.companyCtrl.value.id\r\n                    ));\r\n                if (department) {\r\n                    this.intercoTradeData.departmentId = department.departmentId;\r\n                } else {\r\n                    const intercoCompany = this.masterdata.companies.find((e) =>\r\n                        e.id === this.companyCtrl.value.id);\r\n                    this.intercoTradeData.departmentId = intercoCompany.defaultDepartmentId;\r\n                }\r\n\r\n                const trader = this.filteredTraderList.find((trade) => trade.samAccountName === this.traderCtrl.value.samAccountName);\r\n                if (trader) {\r\n                    this.intercoTradeData.traderId = trader.userId;\r\n                } else {\r\n                    this.intercoTradeData.traderId = null;\r\n                }\r\n\r\n                this.intercoTradeData.isInterco = true;\r\n                this.intercoTradeData.isCancelled = false;\r\n                this.thisDialogRef.close(this.intercoTradeData);\r\n            } else {\r\n                this.handleCancel(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleIntercoTrade() {\r\n        this.isInterco = !this.isInterco;\r\n        if (!this.isInterco) {\r\n            this.selectedCompany = null;\r\n            this.intercoMissingData = [];\r\n            this.isValueMissing = false;\r\n        }\r\n        if (this.companyList && this.companyList.length > 0 && this.isInterco) {\r\n            this.disableSaveButton = true;\r\n            this.companyCtrl.patchValue(this.companyList[0]);\r\n            this.bindDepartments(this.companyCtrl.value);\r\n        }\r\n        if (this.isInterco && !this.selectedCompany) {\r\n            this.disableSaveButton = true;\r\n        } else if (!this.isInterco) {\r\n            this.disableSaveButton = false;\r\n        }\r\n    }\r\n\r\n    onGridReady() {\r\n    }\r\n\r\n    setValidators() {\r\n        this.companyCtrl.setValidators(\r\n            Validators.compose([\r\n                Validators.required,\r\n                inDropdownListValidator(\r\n                    this.companyList,\r\n                    nameof<Company>('companyId'),\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.traderCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.traderList,\r\n                    nameof<Trader>('samAccountName'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    bindDepartments(event: any) {\r\n        this.selectedCompany = event;\r\n        this.masterdataService.getDepartmentsByCompanyIdInterco(event.companyId)\r\n            .subscribe((data) => {\r\n                this.departmentList = data.value;\r\n                this.filteredDepartmentList = this.departmentList;\r\n                this.departmentCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredDepartmentList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.departmentList,\r\n                        ['departmentCode', 'description'],\r\n                    );\r\n                });\r\n\r\n                if (this.departmentList) {\r\n                    this.departmentCtrl.setValidators(\r\n                        Validators.compose([\r\n                            inDropdownListValidator(\r\n                                this.departmentList,\r\n                                nameof<Department>('departmentCode'),\r\n                            ),\r\n                        ]),\r\n                    );\r\n                }\r\n            });\r\n\r\n        this.intercoValidation.companyId = this.selectedCompany.companyId;\r\n        this.tradingService.validateIntercoFields(this.intercoValidation)\r\n            .subscribe((data) => {\r\n                if (this.isInterco) {\r\n                    this.disableSaveButton = false;\r\n                    this.isValueMissing = false;\r\n                    if (data && data.intercoFields && data.intercoFields.length > 0) {\r\n                        this.intercoMissingData = data.intercoFields;\r\n                        this.intercoMissingData.forEach((missingData) => {\r\n                            missingData.setValue = 'Set up value';\r\n                        });\r\n                        this.isValueMissing = true;\r\n\r\n                    }\r\n                    if (this.isValueMissing) {\r\n                        this.bannerState = BannerStates.Error;\r\n                        this.bannerTitle = 'Missing values';\r\n                        this.bannerDescription = 'The following values has not been set up for this company \\\"' +\r\n                            this.selectedCompany.companyId + '\\\". Unable to create Interco contract.';\r\n                        this.disableSaveButton = true;\r\n                    } else {\r\n                        this.bannerState = BannerStates.Success;\r\n                        this.bannerTitle = 'All values are set!';\r\n                        this.bannerDescription = 'You can save your Interco contract';\r\n                        this.disableSaveButton = false;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    bindTraders(event: any) {\r\n        this.filteredTraderList = this.traderList;\r\n    }\r\n\r\n    initIntercoGridColumns() {\r\n        this.interoGridCols = [\r\n            {\r\n                headerName: 'Type',\r\n                colId: 'type',\r\n                field: 'type',\r\n            },\r\n            {\r\n                headerName: 'Name',\r\n                colId: 'name',\r\n                field: 'name',\r\n            },\r\n            {\r\n                headerName: 'Value',\r\n                colId: 'value',\r\n                field: 'value',\r\n            },\r\n            {\r\n                headerName: 'Action',\r\n                colId: 'setValue',\r\n                field: 'setValue',\r\n                cellRendererFramework: AgGridHyperlinkComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n    hyperlinkClicked(rowSelected: any, event) {\r\n        this.snackbarservice.informationSnackBar('This feature is not available.');\r\n        event.preventDefault();\r\n    }\r\n}\r\n","module.exports = \"<div>\\r\\n    <mat-card class=\\\"state-banner-card\\\">\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxFlex=\\\"20%\\\"\\r\\n                 fxLayout=\\\"row\\\">\\r\\n                <div [ngClass]=\\\"circleIconClass\\\">\\r\\n                    <mat-icon>{{icon}}</mat-icon>\\r\\n                </div>\\r\\n\\r\\n                <div fxFlex=\\\"80%\\\"\\r\\n                     fxLayout=\\\"column\\\">\\r\\n                    <div fxFlex=\\\"40%\\\"\\r\\n                         fxLayout=\\\"column\\\">\\r\\n                        <h3>{{title}}</h3>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"40%\\\"\\r\\n                         fxLayout=\\\"column\\\">\\r\\n                        {{description}}\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".error-circle-icon {\\n  color: red !important;\\n  position: relative;\\n  top: 2px;\\n  margin-right: 10px; }\\n\\n.done {\\n  color: #53c234 !important;\\n  position: relative;\\n  top: 2px;\\n  margin-right: 10px; }\\n\\n:host ::ng-deep .mat-icon {\\n  width: 36px !important; }\\n\\n:host ::ng-deep.material-icons {\\n  font-size: 39px !important; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\r\nexport enum BannerStates {\r\n    Success,\r\n    Error,\r\n    Warning,\r\n    Information,\r\n}\r\n@Component({\r\n    selector: 'atlas-intero-state-banner',\r\n    templateUrl: './intero-state-banner.component.html',\r\n    styleUrls: ['./intero-state-banner.component.scss']\r\n})\r\nexport class InteroStateBannerComponent implements OnInit {\r\n\r\n    @Input() state: BannerStates;\r\n    @Input() title: string;\r\n    @Input() description: string;\r\n    icon: string;\r\n    circleIconClass: string;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setBannerStyle();\r\n    }\r\n\r\n    setBannerStyle() {\r\n        switch (this.state) {\r\n            case BannerStates.Success:\r\n                this.icon = 'check_circle';\r\n                this.circleIconClass = 'done';\r\n                break;\r\n            case BannerStates.Warning:\r\n                this.icon = 'warning_outline';\r\n                this.circleIconClass = 'warning-circle-icon';\r\n                break;\r\n            case BannerStates.Error:\r\n                this.icon = 'remove_circle';\r\n                this.circleIconClass = 'error-circle-icon';\r\n                break;\r\n            case BannerStates.Information:\r\n                this.icon = 'info';\r\n                this.circleIconClass = 'info-circle-icon';\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between left\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"5px\\\"\\r\\n         class=\\\"atlas-grid-card-header\\\">\\r\\n        <h3 class=\\\"atlas-grid-card-title\\\">\\r\\n            {{translationKeyPrefix + 'TITLE' | translate}}</h3>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"invoiceMarkingGridOptions && invoiceMarkingGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"invoiceMarkingGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"componentId\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <atlas-grid-enlargement [gridOptions]=\\\"invoiceMarkingGridOptions\\\"\\r\\n                                    [userPreferencesParameters]=\\\"gridPreferences\\\"\\r\\n                                    (rowClicked)=\\\"onDetailedViewRowClicked($event)\\\">\\r\\n            </atlas-grid-enlargement>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"invoiceMarkingGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n         style=\\\"width: 100%; height:100%\\\">\\r\\n        <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [gridOptions]=\\\"invoiceMarkingGridOptions\\\"\\r\\n                         [rowData]=\\\"invoiceMarkingGridRows\\\"\\r\\n                         [columnDefs]=\\\"invoicemarkingcolumnDefs\\\"\\r\\n                         domLayout=autoHeight\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableFilter]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"false\\\"\\r\\n                         [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                         (rowClicked)=\\\"onDetailedViewRowClicked($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                         [headerHeight]=\\\"atlasAgGridParam.headerHeight\\\"\\r\\n                         (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</mat-card>\\r\\n\"","module.exports = \".mat-icon {\\n  width: 32px;\\n  height: 32px;\\n  color: #605c5e; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { concatMap } from 'rxjs/operators';\r\nimport { AtlasTranslationService } from '../../../../../../core/services/atlas-translation.service';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { AgContextualMenuComponent } from '../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorDatePickerComponent } from '../../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { InvoiceMarkingSearchResult } from '../../../../../../shared/dtos/invoice-marking';\r\nimport { AgContextualMenuAction } from '../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InvoiceMarkings } from '../../../../../../shared/entities/invoice-markings.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { InvoiceTypes } from '../../../../../../shared/enums/invoice-type.enum';\r\nimport { PostingStatus } from '../../../../../../shared/enums/posting-status.enum';\r\nimport { ViewDocumentType } from '../../../../../../shared/enums/view-document-type.enum';\r\nimport { ViewModeBehaviour } from '../../../../../../shared/enums/view-mode-behaviour.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../../shared/models/section-complete-display-view';\r\nimport { CustomNumberMask } from '../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { ApiPaginatedCollection } from '../../../../../../shared/services/common/models';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../shared/services/http-services/execution.service';\r\nimport { SecurityService } from '../../../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../shared/services/util.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../../entities/physical-fixed-priced-contract.entity';\r\nimport { PermissionLevels } from './../../../../../../shared/enums/permission-level.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-detailed-view',\r\n    templateUrl: './detailed-view.component.html',\r\n    styleUrls: ['./detailed-view.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class DetailedViewComponent extends BaseFormComponent implements OnInit, OnChanges {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @Output() readonly setCashMatchDate = new EventEmitter<any>();\r\n\r\n    translationKeyPrefix: string = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.DETAILED_VIEW.';\r\n\r\n    deleteStringKey: string = this.translationKeyPrefix + 'DELETE';\r\n    invoiceMarkingDeletionStringKey: string = this.translationKeyPrefix + 'INVOICE_MARKING_DELETION';\r\n    irreversibleDeletionStringKey: string = this.translationKeyPrefix + 'IRREVERSIBLE_DELETION';\r\n    deleteAnywayStringKey: string = this.translationKeyPrefix + 'DELETE_ANYWAY';\r\n    cancelStringKey: string = this.translationKeyPrefix + 'CANCEL';\r\n    rowDeletedStringKey: string = this.translationKeyPrefix + 'ROW_DELETED';\r\n    toDeleteSelectionStringKey: string = this.translationKeyPrefix + 'TO_DELETE_SELECTION';\r\n    warningNullQuantityStringKey: string = this.translationKeyPrefix + 'WARNING_NULL_QUANTITY';\r\n    warningInvoicePercantageTooHighStringKey: string = this.translationKeyPrefix + 'WARNING_INVOICE_PERCENTAGE_TOO_HIGH';\r\n    warningPaidPercentageTooHighStringKey: string = this.translationKeyPrefix + 'WARNING_PAID_PERCENTAGE_TOO_HIGH';\r\n\r\n    // ressource map => keys = translation keys | values = translations in the current application language\r\n    translationRessourceMap: Map<string, string> = new Map([\r\n        [this.deleteStringKey, ''],\r\n        [this.invoiceMarkingDeletionStringKey, ''],\r\n        [this.irreversibleDeletionStringKey, ''],\r\n        [this.deleteAnywayStringKey, ''],\r\n        [this.cancelStringKey, ''],\r\n        [this.rowDeletedStringKey, ''],\r\n        [this.toDeleteSelectionStringKey, ''],\r\n        [this.warningNullQuantityStringKey, ''],\r\n        [this.warningInvoicePercantageTooHighStringKey, ''],\r\n        [this.warningPaidPercentageTooHighStringKey, ''],\r\n    ]);\r\n\r\n    invoiceMarkingGridOptions: agGrid.GridOptions = {};\r\n    invoicemarkingcolumnDefs: agGrid.ColDef[];\r\n    invoiceMarkingGridRows: InvoiceMarkingSearchResult[];\r\n    isLoading: boolean;\r\n    sectionId?: number;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    totalQuantityPercent: number;\r\n    totalInvoiceValue: number;\r\n    totalInvoiceValuePercent: number;\r\n    tradeRecord: SectionCompleteDisplayView;\r\n    defaultDate = 'Mon Jan 01 0001';\r\n    viewModeFilter: string;\r\n    quantityCellEdited = false;\r\n    invoiceAmountCellEdited = false;\r\n    deleted: string = 'Deleted';\r\n    isDeleted: boolean = false;\r\n    invoiceMarkingToBeMatched: string;\r\n    documentTypeFilter: string;\r\n    invoiceStatusId: number;\r\n    childFlag: number = 0;\r\n    company: string;\r\n    decimalOptionValue: number = 2;\r\n    formatType: string = 'en-US';\r\n    dataVersionId: number;\r\n    @Input() documentType: string;\r\n    @Input() isEditToggle: boolean;\r\n    @Output() readonly totalValuesCalculated = new EventEmitter<any>();\r\n    invoiceMarkingMenuActions: { [key: string]: string } = {\r\n        deleteinvoiceMarking: 'delete',\r\n    };\r\n    invoiceMarkingGridContextualMenuActions: AgContextualMenuAction[];\r\n    masterdata: MasterData = new MasterData();\r\n    userActiveDirectoryName: string;\r\n\r\n    hasGridSharing: boolean = false;\r\n    componentId: string = 'invoiceMarkingsInContract';\r\n    gridContext = {\r\n        editMode: false,\r\n    };\r\n\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atrDate: CellEditorDatePickerComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n\r\n    gridPreferences: UserGridPreferencesParameters;\r\n\r\n    constructor(private route: ActivatedRoute, protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private executionService: ExecutionService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        protected router: Router,\r\n        private authorizationService: AuthorizationService,\r\n        private datePipe: DatePipe,\r\n        public gridService: AgGridService,\r\n        private securityService: SecurityService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private atlasTranslationService: AtlasTranslationService,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.isLoading = true;\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.atlasTranslationService.getTranslatedRessourceMap(this.translationRessourceMap);\r\n        this.invoiceMarkingGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: this.translationRessourceMap[this.deleteStringKey],\r\n                action: this.invoiceMarkingMenuActions.deleteInvoiceMarking,\r\n                disabled: this.isDeleteDisabled.bind(this),\r\n            },\r\n        ];\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data['masterdata'] as MasterData;\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.bindConfiguration();\r\n        this.getInvoiceDetailsBySection(this.childFlag);\r\n        this.initializeGridColumns();\r\n        this.init();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean) {\r\n        this.tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.gridContext.editMode = false;\r\n        this.calculateTotalValue();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = this.invoiceMarkingGridOptions.api;\r\n        this.gridColumnApi = this.invoiceMarkingGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.invoiceMarkingGridOptions);\r\n        this.invoiceMarkingGridOptions.columnDefs = this.invoicemarkingcolumnDefs;\r\n        this.atlasTranslationService.translateGridOptionsColDefs(this.invoiceMarkingGridOptions)\r\n            .subscribe(() => this.gridApi.refreshHeader());\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridService.sizeColumns(params);\r\n    }\r\n\r\n    onTabActive() {\r\n        this.gridService.sizeColumns(this.invoiceMarkingGridOptions);\r\n    }\r\n\r\n    toInvoiceMarking(rawData: InvoiceMarkingSearchResult): InvoiceMarkings {\r\n        const invoiceMarking: InvoiceMarkings = {\r\n            cashMatchDate: rawData.cashMatchDate,\r\n            companyId: this.company,\r\n            contractReference: rawData.contractReference,\r\n            costType: rawData.costType,\r\n            currencyCode: rawData.currencyCode,\r\n            customerReference: rawData.customerReference,\r\n            documentType: rawData.documentType,\r\n            dueDate: rawData.dueDate,\r\n            invoiceAmount: rawData.invoiceAmount,\r\n            invoiceDate: rawData.invoiceDate,\r\n            invoiceLineId: rawData.invoiceLineId,\r\n            invoiceMarkingId: rawData.invoiceMarkingId,\r\n            invoicePercent: rawData.invoicePercent,\r\n            costId: null,\r\n            contractValue: 0, // not used here, but should not be null\r\n            invoiceReference: rawData.invoiceReference,\r\n            paidAmount: null,\r\n            paidPercentage: rawData.paidPercentage,\r\n            paymentTermCode: rawData.paymentTermCode,\r\n            postingStatusId: rawData.postingStatusId,\r\n            price: rawData.price,\r\n            quantity: rawData.invoicedQuantity,\r\n            remainingAmount: null,\r\n            sectionId: rawData.sectionId,\r\n            sectionType: rawData.sectionType,\r\n        };\r\n\r\n        return invoiceMarking;\r\n    }\r\n\r\n    getGridData(): InvoiceMarkings[] {\r\n        const invoices = new Array<InvoiceMarkings>();\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data.sectionId) {\r\n                rowData.data.sectionId = this.sectionId;\r\n                invoices.push(this.toInvoiceMarking(rowData.data));\r\n            }\r\n        });\r\n        return invoices;\r\n    }\r\n\r\n    handleAction(action: string, invoiceMarkings: InvoiceMarkings) {\r\n        switch (action) {\r\n            case this.invoiceMarkingMenuActions.deleteInvoiceMarking:\r\n                this.onRemoveSelectedButtonClicked(invoiceMarkings);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    onRemoveSelectedButtonClicked(invoiceMarkings: InvoiceMarkings) {\r\n        if (invoiceMarkings.invoiceMarkingId) {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: this.translationRessourceMap[this.invoiceMarkingDeletionStringKey],\r\n                    text: this.translationRessourceMap[this.irreversibleDeletionStringKey],\r\n                    okButton: this.translationRessourceMap[this.deleteAnywayStringKey],\r\n                    cancelButton: this.translationRessourceMap[this.cancelStringKey],\r\n                },\r\n            });\r\n\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    if (invoiceMarkings.invoiceMarkingId) {\r\n                        this.subscriptions.push(\r\n                            this.executionService.deleteInvoiceMarking(invoiceMarkings.invoiceMarkingId).subscribe(() => {\r\n                                this.snackbarService.informationSnackBar(this.translationRessourceMap[this.rowDeletedStringKey]);\r\n                                this.gridApi.updateRowData({ remove: [invoiceMarkings] });\r\n                            }));\r\n                    } else {\r\n                        this.gridApi.updateRowData({ remove: [invoiceMarkings] });\r\n                    }\r\n                    this.calculateTotalValue();\r\n                }\r\n            });\r\n        } else {\r\n            this.snackbarService.informationSnackBar(this.translationRessourceMap[this.toDeleteSelectionStringKey]);\r\n        }\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newData = new InvoiceMarkings();\r\n        newData.contractReference = this.tradeRecord.reference;\r\n        return newData;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        const physicalFixedPricedContract = entity as PhysicalFixedPricedContract;\r\n        this.securityService.isSecurityReady().pipe(\r\n            concatMap(() => {\r\n                return this.gridConfigurationProvider.getConfiguration(this.company, this.componentId);\r\n            }),\r\n        ).subscribe((configuration) => {\r\n            this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            physicalFixedPricedContract.invoices = this.getGridData();\r\n\r\n            this.gridPreferences = {\r\n                company: this.company,\r\n                gridId: this.componentId,\r\n                gridOptions: this.invoiceMarkingGridOptions,\r\n                sharingEnabled: this.hasGridSharing,\r\n            };\r\n        });\r\n\r\n        return physicalFixedPricedContract;\r\n    }\r\n\r\n    isDateNull(date: Date): boolean {\r\n        return !date || date.toDateString() === this.defaultDate;\r\n    }\r\n\r\n    getInvoiceDetailsBySection(childFlag: any) {\r\n        this.childFlag = childFlag;\r\n        this.subscriptions.push(\r\n            this.executionService.getInvoiceDetailsBySection(this.sectionId, this.childFlag, this.dataVersionId)\r\n                .subscribe((data: ApiPaginatedCollection<InvoiceMarkingSearchResult>) => {\r\n                    this.invoiceMarkingGridRows = this.getDocumentTypeForGrid(data.value);\r\n                    for (const rows of this.invoiceMarkingGridRows) {\r\n                        rows.cashMatchDate = this.isDateNull(rows.cashMatchDate) ? null : rows.cashMatchDate;\r\n                        if (rows.cashMatchDate) {\r\n                            this.setCashMatchDate.emit(rows.cashMatchDate.toDateString());\r\n                        }\r\n                        rows.dueDate = this.isDateNull(rows.dueDate) ? null : rows.dueDate;\r\n                        rows.invoiceDate = this.isDateNull(rows.invoiceDate) ? null : rows.invoiceDate;\r\n                        rows.invoiceReference = rows.isDeleted ? this.deleted : rows.invoiceReference;\r\n                        if (rows.isDeleted) {\r\n                            this.isDeleted = true;\r\n                        }\r\n                        this.invoiceStatusId = rows.invoicingStatusId;\r\n                    }\r\n                    this.calculateTotalValue();\r\n                    this.isLoading = false;\r\n                }));\r\n    }\r\n\r\n    postingStatusFormatter(params) {\r\n        if (params.value) {\r\n            return PostingStatus[params.value].toString();\r\n        }\r\n        return '';\r\n    }\r\n\r\n    onQuantityValueChanged(params) {\r\n        if (params.data.quantity) {\r\n            this.quantityCellEdited = true;\r\n            this.calculateTotalValue();\r\n        }\r\n    }\r\n\r\n    onInvoiceValueChanged(params) {\r\n        if (params.data.invoiceAmount) {\r\n            this.invoiceAmountCellEdited = true;\r\n            this.calculateTotalValue();\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.invoiceMarkingGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: this.translationRessourceMap[this.deleteStringKey],\r\n                action: this.invoiceMarkingMenuActions.deleteInvoiceMarking,\r\n                disabled: this.isDeleteDisabled,\r\n            },\r\n        ];\r\n\r\n    }\r\n\r\n    isDeleteDisabled(params) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                'DeleteInvoiceMarking',\r\n                'InvoiceCreation',\r\n                'Invoices');\r\n            if (userPermissionLevel >= PermissionLevels.Read) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.invoiceMarkingGridOptions = {\r\n            context: this.gridContext,\r\n            rowSelection: 'single',\r\n        };\r\n\r\n        this.invoicemarkingcolumnDefs = [\r\n            {\r\n                headerName: 'Section Id',\r\n                colId: this.translationKeyPrefix + 'SECTION_ID',\r\n                field: 'sectionId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                colId: this.translationKeyPrefix + 'CONTRACT_REFERENCE',\r\n                field: 'contractReference',\r\n                minWidth: 150,\r\n                maxWidth: 150,\r\n            },\r\n\r\n            {\r\n                headerName: 'Invoice Reference',\r\n                colId: this.translationKeyPrefix + 'INVOICE_REFERENCE',\r\n                field: 'invoiceReference',\r\n            },\r\n            {\r\n                headerName: 'Invoice Date',\r\n                colId: this.translationKeyPrefix + 'INVOICE_DATE',\r\n                field: 'invoiceDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Posting Status',\r\n                colId: this.translationKeyPrefix + 'POSTING_STATUS',\r\n                field: 'postingStatusId',\r\n                valueFormatter: this.postingStatusFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Invoice Quantity',\r\n                colId: this.translationKeyPrefix + 'INVOICE_QUANTITY',\r\n                field: 'invoicedQuantity',\r\n                type: 'numericColumn',\r\n                cellEditor: 'atlasNumeric',\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.invoicedQuantity : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n                tooltip: () => {\r\n                    return this.translationRessourceMap[this.warningNullQuantityStringKey];\r\n                },\r\n                onCellValueChanged: this.onQuantityValueChanged.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                colId: this.translationKeyPrefix + 'CURRENCY',\r\n                field: 'currencyCode',\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.masterdata.currencies.map((currencies) => currencies.currencyCode),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Invoice Value',\r\n                colId: this.translationKeyPrefix + 'INVOICE_VALUE',\r\n                field: 'invoiceAmount',\r\n                type: 'numericColumn',\r\n                cellEditor: 'atlasNumeric',\r\n                valueFormatter: (params) => (this.decimalFormatter(\r\n                    (!params.node.group ? params.data.invoiceAmount : params.value),\r\n                    this.decimalOptionValue,\r\n                    this.formatType)),\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n                onCellValueChanged: this.onInvoiceValueChanged.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Percentage Invoice',\r\n                colId: this.translationKeyPrefix + 'PERCENTAGE_INVOICE',\r\n                field: 'invoicePercent',\r\n                type: 'numericColumn',\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(3, 3, false),\r\n                    isRightAligned: false,\r\n                },\r\n                tooltip: () => {\r\n                    return this.translationRessourceMap[this.warningInvoicePercantageTooHighStringKey];\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Document Type',\r\n                colId: this.translationKeyPrefix + 'DOC_TYPE',\r\n                field: 'documentType',\r\n            },\r\n            {\r\n                headerName: 'Due Date',\r\n                colId: this.translationKeyPrefix + 'DUE_DATE',\r\n                field: 'dueDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Payment Terms',\r\n                colId: this.translationKeyPrefix + 'PAYMENT_TERMS',\r\n                field: 'paymentTermCode',\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.masterdata.paymentTerms.map((paymentTerms) => paymentTerms.paymentTermCode),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Customer Reference',\r\n                colId: this.translationKeyPrefix + 'CUSTOMER_REF',\r\n                field: 'customerReference',\r\n            },\r\n            {\r\n                headerName: 'Main Invoice',\r\n                colId: this.translationKeyPrefix + 'MAIN_INVOICE',\r\n                field: 'mainInvoice',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: true,\r\n                    params: this.gridContext,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Paid Percentage',\r\n                colId: this.translationKeyPrefix + 'PAID_PERCENTAGE',\r\n                field: 'paidPercentage',\r\n                type: 'numericColumn',\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(3, 2, false),\r\n                    isRightAligned: false,\r\n                },\r\n                tooltip: () => {\r\n                    return this.translationRessourceMap[this.warningPaidPercentageTooHighStringKey];\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Cash Match Date',\r\n                colId: this.translationKeyPrefix + 'CASH_MATCH_DATE',\r\n                field: 'cashMatchDate',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.invoiceMarkingGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n    decimalFormatter(input, decimalOption: number, format: string) {\r\n        const formattedInput = new Intl.NumberFormat(\r\n            format,\r\n            { minimumFractionDigits: decimalOption }).format(input);\r\n        return formattedInput.toLocaleString();\r\n    }\r\n\r\n    getDocumentTypeForGrid(contracts: InvoiceMarkingSearchResult[]) {\r\n        contracts.forEach((contract) => {\r\n            const selectedDocumentType = this.masterdata.invoiceTypes.find((invoice) =>\r\n                invoice.name === contract.documentType);\r\n            if (selectedDocumentType) {\r\n                if (selectedDocumentType.invoiceTypeId === InvoiceTypes.GoodsCostPurchase ||\r\n                    selectedDocumentType.invoiceTypeId === InvoiceTypes.GoodsCostSales) {\r\n                    contract.documentType = ViewDocumentType.Commercial;\r\n                }\r\n            }\r\n        });\r\n        return contracts;\r\n    }\r\n\r\n    calculateTotalValue() {\r\n        let totalInvoicedQuantity = 0;\r\n        this.totalQuantityPercent = 0;\r\n        this.totalInvoiceValue = 0;\r\n        this.totalInvoiceValuePercent = 0;\r\n        if (this.invoiceMarkingGridRows) {\r\n            if (this.invoiceMarkingGridRows.length > 0) {\r\n                if (this.documentTypeFilter && this.documentTypeFilter !== ViewDocumentType['All']) {\r\n                    this.invoiceMarkingGridRows = this.invoiceMarkingGridRows.filter((val) => val.documentType === this.documentTypeFilter);\r\n                }\r\n                let filterinvoiceMarkingGridRows = [];\r\n                if (this.tradeRecord) {\r\n                    filterinvoiceMarkingGridRows =\r\n                        this.invoiceMarkingGridRows.filter((val) => val.contractReference === this.tradeRecord.reference);\r\n                    filterinvoiceMarkingGridRows.forEach(\r\n                        (row: InvoiceMarkingSearchResult) => {\r\n                            if (row.invoiceReference !== this.deleted) {\r\n                                totalInvoicedQuantity += row.invoicedQuantity;\r\n                                this.totalInvoiceValue += row.invoiceAmount;\r\n                            }\r\n                        },\r\n                    );\r\n                    this.totalQuantityPercent = (totalInvoicedQuantity / this.tradeRecord.quantity) * 100;\r\n                    this.totalInvoiceValuePercent = (this.totalInvoiceValue /\r\n                        (this.tradeRecord.price * this.tradeRecord.quantity *\r\n                            (filterinvoiceMarkingGridRows.length > 0 ?\r\n                                filterinvoiceMarkingGridRows[0].priceConversionFactor\r\n                                * filterinvoiceMarkingGridRows[0].weightConversionFactor\r\n                                : 0))) * 100;\r\n                }\r\n\r\n                /* below code has to be removed once the SP changes are done to\r\n                 update invoice marking table invoice line amount while reversal - start*/\r\n\r\n                if (totalInvoicedQuantity === 0) {\r\n                    this.totalInvoiceValue = 0;\r\n                    this.totalInvoiceValuePercent = 0;\r\n                }\r\n            }\r\n        }\r\n        this.totalValuesCalculated.emit({\r\n            totalQuantity: totalInvoicedQuantity,\r\n            totalQuantityPercent: this.totalQuantityPercent,\r\n            totalInvoiceValue: this.totalInvoiceValue,\r\n            totalInvoiceValuePercent: this.totalInvoiceValuePercent,\r\n            isDeleted: this.isDeleted,\r\n            invoiceStatusId: this.invoiceStatusId,\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.documentType) {\r\n            if (changes.documentType.currentValue && changes.documentType.currentValue.length > 1) {\r\n                this.viewModeFilter = changes.documentType.currentValue[0];\r\n                this.documentTypeFilter = changes.documentType.currentValue[1];\r\n            }\r\n            if (this.sectionId) {\r\n                this.getInvoiceDetailsBySection(ViewModeBehaviour[this.viewModeFilter]);\r\n            }\r\n        }\r\n\r\n        if (this.sectionId) {\r\n            this.getInvoiceDetailsBySection(this.childFlag);\r\n        }\r\n    }\r\n\r\n    onDetailedViewRowClicked(event) {\r\n        this.router.navigate([\r\n            '/' + this.company +\r\n            '/financial/accounting/entries/'\r\n            + encodeURIComponent(event.data.invoiceReference)]);\r\n    }\r\n\r\n    onRefreshButtonClicked() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.resetColumnState();\r\n            this.invoicemarkingcolumnDefs.forEach((colf) => {\r\n                colf.hide = !this.gridColumnApi.getColumn(colf.colId).isVisible();\r\n            });\r\n            this.gridService.sizeColumns(this.invoiceMarkingGridOptions);\r\n        }\r\n    }\r\n\r\n    showOrHideColum(event, col: agGrid.ColDef) {\r\n        const cols = this.invoicemarkingcolumnDefs.filter((colf) => colf.colId === col.colId);\r\n        if (cols.length === 1) {\r\n            cols[0].hide = !(col.hide || false);\r\n\r\n            this.gridColumnApi.setColumnVisible(col.colId, !cols[0].hide);\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        let screenName: string;\r\n        screenName = 'Invoice' + '' + 'Marking';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'Invoice' + '' + 'Marking';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.invoiceMarkingGridOptions) {\r\n            this.gridService.sizeColumns(this.invoiceMarkingGridOptions);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card style=\\\"width: 100%\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>{{translationKeyPrefix + 'TITLE' | translate}}</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\">\\r\\n            <div>\\r\\n                <mat-form-field fxFlex=\\\"100%\\\">\\r\\n                    <mat-select placeholder=\\\"{{translationKeyPrefix + 'PLACEHOLDER' | translate}}\\\"\\r\\n                                [formControl]=\\\"invoiceStatusCtrl\\\"\\r\\n                                [disabled]=\\\"!(isEdit && this.editPrivileges.statusEditable)\\\">\\r\\n                        <mat-option *ngFor=\\\"let status of invoiceStatusOptions\\\"\\r\\n                                    [value]=\\\"status.code\\\">{{status.description}}</mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { InvoiceStatus } from '../../../../../../shared/entities/invoice-status.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { InvoiceStatus as InvoiceStatusEnum } from '../../../../../../shared/enums/invoice-status.enum';\r\nimport { PermissionLevels } from '../../../../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { PhysicalFixedPricedContract } from '../../../../../entities/physical-fixed-priced-contract.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-status',\r\n    templateUrl: './invoice-status.component.html',\r\n    styleUrls: ['./invoice-status.component.scss'],\r\n})\r\nexport class InvoiceStatusComponent extends BaseFormComponent implements OnInit {\r\n\r\n    translationKeyPrefix: string = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.INVOICING_STATUS.';\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        private authorizationService: AuthorizationService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    invoiceStatusCtrl = new AtlasFormControl('invoiceStatus');\r\n\r\n    masterdata: MasterData;\r\n    @Input() isEditToggle: boolean;\r\n    invoiceStatusOptions: InvoiceStatus[];\r\n    masterdataList: string[] = [\r\n        MasterDataProps.InvoiceStatus,\r\n    ];\r\n    defaultInvoiceStatus: string;\r\n    invoicedQuantityPercent: number;\r\n    company: string;\r\n    isEdit = false;\r\n\r\n    editEstimatedColumnsPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'Invoices',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'InvoiceCreation',\r\n        privilegeParentLevelTwo: 'EditInvoicingMarkingStatus',\r\n    };\r\n    superTradeEditionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'SuperTradeEdition',\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: 'Physicals',\r\n        privilegeParentLevelTwo: 'Trades',\r\n    };\r\n\r\n    editPrivileges = {\r\n        statusEditable: false,\r\n        superTradeEdition: false,\r\n    };\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.invoiceStatusOptions = this.masterdata.invoiceStatus;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.editPrivileges.statusEditable = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);\r\n        this.editPrivileges.superTradeEdition = this.checkIfUserHasRequiredPrivileges(this.superTradeEditionPrivilege);\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.isEdit = isEdit;\r\n        this.invoiceStatusCtrl.patchValue(entity.invoicingStatusId.toString());\r\n        this.defaultInvoiceStatus = this.invoiceStatusCtrl.value;\r\n        // If value is not available, add it\r\n        if (!this.invoiceStatusOptions.find((invoiceStatus) => invoiceStatus.code === this.invoiceStatusCtrl.value)) {\r\n            const currentInvoiceStatus = this.masterdata.invoiceStatus\r\n                .find((invoiceStatus) => invoiceStatus.code === this.invoiceStatusCtrl.value);\r\n            if (currentInvoiceStatus) {\r\n                this.invoiceStatusOptions.push(currentInvoiceStatus);\r\n            }\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: PhysicalFixedPricedContract): PhysicalFixedPricedContract {\r\n        entity.invoiceStatus = this.invoiceStatusCtrl.value;\r\n        return entity;\r\n    }\r\n\r\n    filterOptionList(model) {\r\n        // If user has super trade edition privilege, he can put any invoice marking status\r\n        if (this.editPrivileges.superTradeEdition) {\r\n            return;\r\n        }\r\n        // Not invoiced\r\n        if (!model.totalInvoiceValuePercent || model.totalInvoiceValuePercent === 0) {\r\n            this.invoiceStatusOptions = this.masterdata.invoiceStatus.\r\n                filter((invoiceStatus) => invoiceStatus.code === InvoiceStatusEnum.NotInvoiced.toString()\r\n                    || invoiceStatus.code === this.invoiceStatusCtrl.value);\r\n        } else if (model.totalInvoiceValuePercent < 100) {\r\n            this.invoiceStatusOptions = this.masterdata.invoiceStatus.\r\n                filter((invoiceStatus) => invoiceStatus.code !== InvoiceStatusEnum.NotInvoiced.toString()\r\n                    || invoiceStatus.code === this.invoiceStatusCtrl.value);\r\n        } else {\r\n            // Fully invoiced\r\n            this.invoiceStatusOptions = this.masterdata.invoiceStatus.\r\n                filter((invoiceStatus) => invoiceStatus.code === InvoiceStatusEnum.FullyInvoiced.toString()\r\n                    || invoiceStatus.code === this.invoiceStatusCtrl.value);\r\n        }\r\n    }\r\n\r\n    setInvoiceStatusOnChange(totalValues) {\r\n        if (totalValues.isDeleted) {\r\n            this.setReversalInvoiceStatus(totalValues.totalQuantity, totalValues.isDeleted);\r\n        } else {\r\n            if (!this.invoiceStatusCtrl.value) {\r\n                if (!totalValues.totalInvoiceValuePercent || totalValues.totalInvoiceValuePercent === 0) {\r\n                    this.invoiceStatusCtrl.patchValue(InvoiceStatusEnum.NotInvoiced.toString());\r\n                } else if (totalValues.totalInvoiceValuePercent < 100) {\r\n                    // Has been invoiced, but not fully\r\n                    this.invoiceStatusCtrl.patchValue(InvoiceStatusEnum.NotFullyInvoiced.toString());\r\n                } else {\r\n                    // Fully invoiced\r\n                    this.invoiceStatusCtrl.patchValue(InvoiceStatusEnum.FullyInvoiced.toString());\r\n                }\r\n            }\r\n            this.defaultInvoiceStatus = this.invoiceStatusCtrl.value;\r\n            this.invoicedQuantityPercent = totalValues.totalQuantityPercent;\r\n        }\r\n        this.filterOptionList(totalValues);\r\n    }\r\n\r\n    setInvoiceStatusOnPageLoad(totalValues) {\r\n        this.invoicedQuantityPercent = totalValues.totalQuantityPercent;\r\n        this.filterOptionList(totalValues);\r\n    }\r\n\r\n    setReversalInvoiceStatus(totalQuantity: number, isDeleted: boolean) {\r\n        if (isDeleted && !this.invoiceStatusCtrl.value) { // Value should come from backend, not calculated\r\n            const finalInvoiceStatus: string = this.invoiceStatusCtrl.value;\r\n            if (finalInvoiceStatus === InvoiceStatusEnum.NotFullyInvoiced.toString() ||\r\n                finalInvoiceStatus === InvoiceStatusEnum.FullyInvoiced.toString()) {\r\n                if (totalQuantity === 0) {\r\n                    this.invoiceStatusCtrl.patchValue(InvoiceStatusEnum.NotInvoiced.toString());\r\n                } else {\r\n                    this.invoiceStatusCtrl.patchValue(InvoiceStatusEnum.NotFullyInvoiced.toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n            this.company,\r\n            userCompanyPrivilege.privilegeName,\r\n            userCompanyPrivilege.privilegeParentLevelOne,\r\n            userCompanyPrivilege.privilegeParentLevelTwo);\r\n        if (userPermissionLevel >= userCompanyPrivilege.permission) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","module.exports = \"<mat-card style=\\\"width: 100%\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h3>{{translationKeyPrefix + 'TITLE' | translate}}</h3>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"5%\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\">\\r\\n                <span class=\\\"subtotal-title\\\">{{translationKeyPrefix + 'QTY' | translate}}</span>\\r\\n                <span>{{totalQuantity |number:'1.2-3'}}</span>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\">\\r\\n                <span class=\\\"subtotal-title\\\">{{translationKeyPrefix + 'QTY%' | translate}}</span>\\r\\n                <span>{{totalQuantityPercent|number:'1.2-2'}}</span>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\">\\r\\n                <span class=\\\"subtotal-title\\\">{{translationKeyPrefix + 'INVOICE_VALUE' | translate}}</span>\\r\\n                <span>{{totalInvoiceValue|number:'1.2-2'}}</span>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\">\\r\\n                <span class=\\\"subtotal-title\\\">{{translationKeyPrefix + 'INVOICE_VALUE' | translate}}%</span>\\r\\n                <span>{{totalInvoiceValuePercent|number:'1.2-2'}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".mat-card {\\n  width: 100%; }\\n\\n.subtotal-title {\\n  margin-bottom: 5px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-totals',\r\n    templateUrl: 'invoice-totals.component.html',\r\n    styleUrls: ['invoice-totals.component.scss'],\r\n})\r\nexport class InvoiceTotalsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    translationKeyPrefix: string = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.TOTALS.';\r\n\r\n    totalQuantity: number = 0;\r\n    totalQuantityPercent: number = 0;\r\n    totalInvoiceValue: number = 0;\r\n    totalInvoiceValuePercent: number = 0;\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.bindConfiguration();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row wrap\\\">\\r\\n            <div fxFlex=\\\"50\\\">\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h3>{{'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.VIEW_MODE.VIEW_MODE_TITLE' | translate}}</h3>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <mat-form-field>\\r\\n                        <mat-select [formControl]=\\\"showDetailsCtrl\\\"\\r\\n                                    (selectionChange)=\\\"onViewModeChange($event)\\\">\\r\\n                            <mat-option *ngFor=\\\"let detail of viewModeTrades\\\"\\r\\n                                        [value]=\\\"detail\\\">\\r\\n                                {{detail}}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </mat-card-content>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\">\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h3>{{translationKeyPrefix + 'DOC_TYPE_TITLE' | translate}}</h3>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <mat-form-field>\\r\\n                        <mat-select [formControl]=\\\"viewDocumentTypeCtrl\\\"\\r\\n                                    (selectionChange)=\\\"onDocumentTypeChange($event)\\\">\\r\\n                            <mat-option *ngFor=\\\"let document of viewDocumentTypes\\\"\\r\\n                                        [value]=\\\"document\\\">\\r\\n                                {{document}}\\r\\n                            </mat-option>\\r\\n                        </mat-select>\\r\\n                    </mat-form-field>\\r\\n                </mat-card-content>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n    <mat-slide-toggle (change)=\\\"onChange($event)\\\"\\r\\n                      [disabled]=\\\"!editPrivileges.buttonEditable || !isEdit\\\">\\r\\n        {{translationKeyPrefix + 'EDIT_MODE' | translate}} {{toggleText | translate}}\\r\\n    </mat-slide-toggle>\\r\\n</mat-card>\\r\\n\"","module.exports = \".mat-card {\\n  width: 100%; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { PermissionLevels } from '../../../../../../shared/enums/permission-level.enum';\r\nimport { ViewDocumentType } from '../../../../../../shared/enums/view-document-type.enum';\r\nimport { ViewMode } from '../../../../../../shared/enums/view-mode.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-view-mode',\r\n    templateUrl: './invoice-view-mode.component.html',\r\n    styleUrls: ['./invoice-view-mode.component.scss'],\r\n})\r\nexport class InvoiceViewModeComponent extends BaseFormComponent implements OnInit {\r\n\r\n    translationKeyPrefix: string = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.VIEW_MODE.';\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private authorizationService: AuthorizationService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n    @Output() readonly documentTypeSelected = new EventEmitter<string[]>();\r\n    @Output() readonly editToggleChanged = new EventEmitter<boolean>();\r\n    showDetailsCtrl = new AtlasFormControl('showDetailsCtrl');\r\n    viewDocumentTypeCtrl = new AtlasFormControl('viewDocumentTypeCtrl');\r\n    toggleText: string = this.translationKeyPrefix + 'INACTIVE';\r\n\r\n    viewModeTrades: string[];\r\n    viewDocumentTypes: string[];\r\n    masterdata: MasterData;\r\n    company: string;\r\n    isEdit = false;\r\n    viewModeFilters: string[];\r\n\r\n    editEstimatedColumnsPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'Trades',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Physical',\r\n        privilegeParentLevelTwo: null,\r\n    };\r\n\r\n    editPrivileges = {\r\n        buttonEditable: true,\r\n    };\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.bindConfiguration();\r\n        this.viewDocumentTypes = this.getDocumentTypesEnumArray();\r\n        this.viewModeTrades = this.getViewModeEnumArray();\r\n        this.viewDocumentTypeCtrl.patchValue(ViewDocumentType.All);\r\n        this.showDetailsCtrl.patchValue(ViewMode.ThisTrade);\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    getDocumentTypesEnumArray(): string[] {\r\n        const viewModeEnum = Object.values(ViewDocumentType);\r\n        return viewModeEnum;\r\n    }\r\n\r\n    getViewModeEnumArray(): string[] {\r\n        const viewModeObjectEnum = Object.values(ViewMode);\r\n        return viewModeObjectEnum;\r\n    }\r\n\r\n    onDocumentTypeChange(value) {\r\n        this.viewModeFilters = [this.showDetailsCtrl.value, value.source.triggerValue];\r\n        this.documentTypeSelected.emit(this.viewModeFilters);\r\n    }\r\n\r\n    onViewModeChange(value) {\r\n        this.viewModeFilters = [value.source.triggerValue, this.viewDocumentTypeCtrl.value];\r\n        this.documentTypeSelected.emit(this.viewModeFilters);\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.isEdit = isEdit;\r\n        this.editPrivileges.buttonEditable = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);\r\n        return entity;\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel >= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onChange(value: MatSlideToggleChange) {\r\n        if (value.checked) {\r\n            this.toggleText = this.translationKeyPrefix + 'ACTIVE';\r\n            this.editToggleChanged.emit(true);\r\n        } else {\r\n            this.toggleText = this.translationKeyPrefix + 'INACTIVE';\r\n            this.editToggleChanged.emit(false);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div class=\\\"atlas-invoice-top-card\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"70%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"{{translationKeyPrefix + 'COMMODITY_DESCRIPTION' | translate}}\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='commodityDescrCtrl'\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"30%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"{{translationKeyPrefix + 'CPY_CODE'| translate}}\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='counterPartyCodeCtrl'\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"20%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"{{translationKeyPrefix + 'QTY' | translate}}\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='quantityCtrl'\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"20%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"{{translationKeyPrefix + 'PRICING' | translate}}\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='pricingCtrl'\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                            fxFlex=\\\"60%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"{{translationKeyPrefix + 'SHIPPING_PERIOD' | translate}}\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       [formControl]='shippingPeriodCtrl'\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".atlas-invoice-top-card {\\n  margin: 3% 0 4% 0; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from '../../../../../../shared/enums/contract-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../../shared/models/section-complete-display-view';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-physical-contract-capture-invoice-marking-top-card',\r\n    templateUrl: './top-card.component.html',\r\n    styleUrls: ['./top-card.component.scss'],\r\n})\r\nexport class TopCardComponent extends BaseFormComponent implements OnInit {\r\n\r\n    translationKeyPrefix: string = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.TOP_CARD.';\r\n\r\n    commodityDescrCtrl = new AtlasFormControl('invoiceMarkingCommodityDescr');\r\n    counterPartyCodeCtrl = new AtlasFormControl('invoiceMarkingCounterPartyCode');\r\n    quantityCtrl = new AtlasFormControl('invoiceMarkingQuantity');\r\n    pricingCtrl = new AtlasFormControl('invoiceMarkingPricing');\r\n    shippingPeriodCtrl = new AtlasFormControl('invoiceMarkingShippingPeriod');\r\n    tradeRecord: SectionCompleteDisplayView;\r\n    masterdataList: string[] = [MasterDataProps.Commodities];\r\n    private masterDataSubscription: Subscription;\r\n    masterdata: MasterData;\r\n    formattedQuantity: string;\r\n    formattedPrice: string;\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected masterdataService: MasterdataService,\r\n        protected route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.masterDataSubscription) {\r\n            this.masterDataSubscription.unsubscribe();\r\n        }\r\n    }\r\n    initForm(entity: any, isEdit: boolean) {\r\n        this.tradeRecord = new SectionCompleteDisplayView(entity);\r\n\r\n        if (this.tradeRecord.type === ContractTypes[ContractTypes.Purchase]) {\r\n            this.counterPartyCodeCtrl.patchValue(this.tradeRecord.sellerCode);\r\n        } else if (this.tradeRecord.type === ContractTypes[ContractTypes.Sale]) {\r\n            this.counterPartyCodeCtrl.patchValue(this.tradeRecord.buyerCode);\r\n        }\r\n        this.quantityCtrl.patchValue(this.tradeRecord.quantity);\r\n\r\n        this.formattedQuantity = this.formatValue(this.tradeRecord.quantity, 3, 3);\r\n\r\n        this.shippingPeriodCtrl.patchValue(this.tradeRecord.shippingPeriod);\r\n        const filteredCommodities = this.masterdata.commodities.filter((c) => c.commodityId === this.tradeRecord.commodityId);\r\n        if (filteredCommodities.length > 0) {\r\n            this.commodityDescrCtrl.patchValue(filteredCommodities[0].commodityDescription);\r\n        }\r\n        const filteredWeightUnit = this.masterdata.weightUnits.filter((weight) => weight.weightUnitId === this.tradeRecord.weightUnitId);\r\n        if (filteredWeightUnit.length > 0) {\r\n            this.quantityCtrl.patchValue(this.formattedQuantity + '' + filteredWeightUnit[0].weightCode);\r\n        }\r\n        const filteredPriceCode = this.masterdata.priceUnits.filter((price) => price.priceUnitId === this.tradeRecord.priceUnitId);\r\n        if (filteredPriceCode.length > 0) {\r\n            this.formattedPrice = this.formatValue(this.tradeRecord.price, 2, 2);\r\n            this.pricingCtrl.patchValue((this.tradeRecord.currency) + '' + (this.formattedPrice) + '' +\r\n                (filteredPriceCode[0].priceCode));\r\n        }\r\n    }\r\n\r\n    formatValue(amount: number, minimumFractionDigits: number, maximumFractionDigits: number): string {\r\n        if (isNaN(amount) || amount === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', {\r\n            minimumFractionDigits, maximumFractionDigits\r\n        }).format(amount);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            commodityDescrCtrl: this.commodityDescrCtrl,\r\n            counterPartyCodeCtrl: this.counterPartyCodeCtrl,\r\n            quantityCtrl: this.quantityCtrl,\r\n            pricingCtrl: this.pricingCtrl,\r\n            shippingPeriodCtrl: this.shippingPeriodCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"invoiceMarkingForm\\\">\\r\\n    <div fxLayoutAlign=\\\"center\\\"\\r\\n         fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"space-between\\\"\\r\\n         class=\\\"cards-fxLayout\\\">\\r\\n        <atlas-invoice-view-mode #invoiceViewModeComponent\\r\\n                                 (documentTypeSelected)=\\\"documentTypeSelected($event)\\\"\\r\\n                                 (editToggleChanged)=\\\"editToggleChanged($event)\\\"\\r\\n                                 fxFlex=\\\"calc(50% - 16px)\\\"\\r\\n                                 fxFlex.lt-md=\\\"100\\\"\\r\\n                                 class=\\\"flex-item\\\">\\r\\n        </atlas-invoice-view-mode>\\r\\n\\r\\n        <atlas-physical-contract-capture-invoice-marking-top-card #topCardComponent\\r\\n                                                                  fxFlex=\\\"calc(50% - 16px)\\\"\\r\\n                                                                  fxFlex.lt-md=\\\"100\\\">\\r\\n        </atlas-physical-contract-capture-invoice-marking-top-card>\\r\\n\\r\\n        <atlas-detailed-view #detailedViewComponent\\r\\n                             [documentType]=\\\"documentType\\\"\\r\\n                             [isEditToggle]=\\\"isEditToggle\\\"\\r\\n                             (totalValuesCalculated)=\\\"onTotalValuesCalculated($event)\\\"\\r\\n                             (setCashMatchDate)=\\\"onGetCashMatchDate($event)\\\"\\r\\n                             fxFlex=\\\"100\\\">\\r\\n        </atlas-detailed-view>\\r\\n        <atlas-invoice-totals #invoiceTotalsComponent\\r\\n                              fxFlex=\\\"calc(50% - 16px)\\\"\\r\\n                              fxFlex.lt-sm=\\\"100\\\"\\r\\n                              class=\\\"flex-item\\\">\\r\\n        </atlas-invoice-totals>\\r\\n        <atlas-invoice-status #invoiceStatusComponent\\r\\n                              fxFlex=\\\"calc(50% - 16px)\\\"\\r\\n                              fxFlex.lt-sm=\\\"100\\\"\\r\\n                              class=\\\"flex-item\\\"\\r\\n                              [isEditToggle]=\\\"isEditToggle\\\">\\r\\n        </atlas-invoice-status>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { DetailedViewComponent } from './components/detailed-view/detailed-view.component';\r\nimport { InvoiceStatusComponent } from './components/invoice-status/invoice-status.component';\r\nimport { InvoiceTotalsComponent } from './components/invoice-totals/invoice-totals.component';\r\nimport { InvoiceViewModeComponent } from './components/invoice-view-mode/invoice-view-mode.component';\r\nimport { TopCardComponent } from './components/top-card/top-card.component';\r\n\r\n@Component({\r\n    selector: 'atlas-physical-contract-capture-form-invoice-marking-tab',\r\n    templateUrl: './physical-contract-capture-form-invoice-marking-tab.component.html',\r\n    styleUrls: ['./physical-contract-capture-form-invoice-marking-tab.component.scss'],\r\n})\r\nexport class PhysicalContractCaptureFormInvoiceMarkingTabComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly setCashMatchDate = new EventEmitter<any>();\r\n    @ViewChild('detailedViewComponent') detailedViewComponent: DetailedViewComponent;\r\n    @ViewChild('invoiceTotalsComponent') invoiceTotalsComponent: InvoiceTotalsComponent;\r\n    @ViewChild('invoiceStatusComponent') invoiceStatusComponent: InvoiceStatusComponent;\r\n    @ViewChild('invoiceViewModeComponent') invoiceViewModeComponent: InvoiceViewModeComponent;\r\n    @ViewChild('topCardComponent') topCardComponent: TopCardComponent;\r\n    @Output() readonly totalInvoicePercent = new EventEmitter<any>();\r\n\r\n    @Output() readonly totalValuesCalculated = new EventEmitter<any>();\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    invoiceMarkingForm: FormGroup;\r\n    documentType: string[];\r\n    isEditToggle: boolean = false;\r\n\r\n    constructor(protected formBuilder: FormBuilder, protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.invoiceMarkingForm = this.formBuilder.group({\r\n\r\n            detailedViewComponent: this.detailedViewComponent.getFormGroup(),\r\n            invoiceTotalsComponent: this.invoiceTotalsComponent.getFormGroup(),\r\n            invoiceStatusComponent: this.invoiceStatusComponent.getFormGroup(),\r\n            topCardComponent: this.topCardComponent.getFormGroup(),\r\n            invoiceViewModeComponent: this.invoiceViewModeComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.detailedViewComponent,\r\n            this.invoiceTotalsComponent,\r\n            this.invoiceStatusComponent,\r\n            this.topCardComponent,\r\n            this.invoiceViewModeComponent,\r\n        );\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.initForm(entity, isEdit);\r\n        });\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    onTotalValuesCalculated(model: any) {\r\n        this.invoiceTotalsComponent.totalQuantity = model.totalQuantity;\r\n        this.invoiceTotalsComponent.totalQuantityPercent = model.totalQuantityPercent;\r\n        this.invoiceTotalsComponent.totalInvoiceValue = model.totalInvoiceValue;\r\n        this.invoiceTotalsComponent.totalInvoiceValuePercent = model.totalInvoiceValuePercent;\r\n        (this.isEditToggle) ? this.invoiceStatusComponent.setInvoiceStatusOnChange(model) :\r\n            this.invoiceStatusComponent.setInvoiceStatusOnPageLoad(model);\r\n        this.totalValuesCalculated.emit(model);\r\n        this.totalInvoicePercent.emit({ totalInvoiceValuePercent: this.invoiceTotalsComponent.totalInvoiceValuePercent });\r\n    }\r\n\r\n    documentTypeSelected(documentTypeValue: string[]) {\r\n        this.documentType = documentTypeValue;\r\n    }\r\n\r\n    editToggleChanged(value: boolean) {\r\n        this.isEditToggle = value;\r\n    }\r\n\r\n    onGetCashMatchDate(cashMatchDate: any) {\r\n        this.setCashMatchDate.emit(cashMatchDate);\r\n    }\r\n\r\n    onTabSelected() {\r\n        this.detailedViewComponent.onTabActive();\r\n    }\r\n}\r\n","module.exports = \"<!-- container -->\\r\\n<div fxLayout=\\\"column wrap\\\"\\r\\n     fxLayoutAlign=\\\"start\\\"\\r\\n     class=\\\"container-flex\\\">\\r\\n\\r\\n    <atlas-counterparty-form-component #CounterpartyComponent\\r\\n                                       class=\\\"flex-item\\\"></atlas-counterparty-form-component>\\r\\n    <atlas-commodity-form-component #CommodityComponent\\r\\n                                    (commodityCodeSelected)=\\\"commodityCodeSelected($event)\\\"\\r\\n                                    (commBlockWarnMessage)=\\\"commBlockWarnMessage($event)\\\"\\r\\n                                    class=\\\"flex-item\\\"></atlas-commodity-form-component>\\r\\n    <atlas-custom-quantity-form-component #QuantityFormComponent\\r\\n                                          (quantitySelected)=\\\"quantitySelected($event)\\\"\\r\\n                                          (quantityCodeSelected)=\\\"quantityCodeSelected($event)\\\"\\r\\n                                          class=\\\"flex-item\\\"></atlas-custom-quantity-form-component>\\r\\n    <atlas-terms-form-component #TermsFormComponent\\r\\n                                class=\\\"flex-item\\\"></atlas-terms-form-component>\\r\\n    <atlas-price-form-component #PriceFormComponent\\r\\n                                class=\\\"flex-item\\\"></atlas-price-form-component>\\r\\n\\r\\n    <div class=\\\"shipment-location-section\\\"\\r\\n         fxLayout=\\\"column\\\"\\r\\n         class=\\\"flex-item\\\">\\r\\n        <atlas-shipment-period-form #ShipmentPeriodFormComponent></atlas-shipment-period-form>\\r\\n        <atlas-location-form-component #LocationFormComponent\\r\\n                                       (portsWarningMessage)=\\\"portsWarningMessage($event)\\\">\\r\\n        </atlas-location-form-component>\\r\\n    </div>\\r\\n    <atlas-memo-form-component #MemoComponent\\r\\n                               class=\\\"flex-item\\\"></atlas-memo-form-component>\\r\\n</div>\"","module.exports = \".container-flex {\\n  display: flex;\\n  flex-flow: column wrap;\\n  align-content: flex-start;\\n  height: 100%; }\\n\\n/* 3 columns */\\n\\n@media screen and (min-width: 1590px) {\\n  .container-flex {\\n    /* Your container needs a fixed height, and it \\r\\n        * needs to be taller than your tallest column. */\\n    max-height: 765px; }\\n  .flex-item {\\n    width: 32%; }\\n  /* Re-order items into 3 rows */\\n  .flex-item:nth-child(3n+1) {\\n    order: 1; }\\n  .flex-item:nth-child(3n+2) {\\n    order: 2; }\\n  .flex-item:nth-child(3n) {\\n    order: 3; }\\n  /* Force new columns */\\n  .container-flex::before,\\n  .container-flex::after {\\n    content: \\\"\\\";\\n    flex-basis: 100%;\\n    width: 0;\\n    order: 2; } }\\n\\n/* 2 columns */\\n\\n@media screen and (max-width: 1590px) {\\n  .container-flex {\\n    max-height: 1028px; }\\n  .flex-item {\\n    width: 49%; }\\n  /* Re-order items into 3 rows */\\n  .flex-item:nth-child(2n+1) {\\n    order: 1; }\\n  .flex-item:nth-child(2n+2) {\\n    order: 2; } }\\n\\n/* 1 column */\\n\\n@media screen and (max-width: 850px) {\\n  .container-flex {\\n    max-height: none; }\\n  .flex-item {\\n    width: 98%;\\n    order: 1; } }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { Commodity } from '../../../../shared/entities/commodity.entity';\r\nimport { WeightUnit } from '../../../../shared/entities/weight-unit.entity';\r\nimport { ContractTypes } from '../../../../shared/enums/contract-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { CommodityFormComponent } from '../form-components/commodity-form-component/commodity-form-component.component';\r\nimport { CounterpartyFormComponent } from '../form-components/counterparty-form-component/counterparty-form-component.component';\r\nimport { LocationFormComponent } from '../form-components/location-form-component/location-form-component.component';\r\nimport { MemoFormComponent } from '../form-components/memo-form-component/memo-form-component.component';\r\nimport { PriceFormComponent } from '../form-components/price-form-component/price-form-component.component';\r\nimport { QuantityFormComponent } from '../form-components/quantity-form-component/quantity-form-component.component';\r\nimport { TermsFormComponent } from '../form-components/terms-form-component/terms-form-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-physical-contract-capture-form-main-tab',\r\n    templateUrl: './physical-contract-capture-form-main-tab.component.html',\r\n    styleUrls: ['./physical-contract-capture-form-main-tab.component.scss'],\r\n})\r\nexport class PhysicalContractCaptureFormMainTabComponent\r\n    extends BaseFormComponent\r\n    implements OnInit {\r\n    @ViewChild('CounterpartyComponent') counterpartyComponent: CounterpartyFormComponent;\r\n    @ViewChild('CommodityComponent') commodityComponent: CommodityFormComponent;\r\n    @ViewChild('QuantityFormComponent') quantityComponent: QuantityFormComponent;\r\n    @ViewChild('TermsFormComponent') termsComponent: TermsFormComponent;\r\n    @ViewChild('PriceFormComponent') priceComponent: PriceFormComponent;\r\n    @ViewChild('ShipmentPeriodFormComponent') shipmentPeriodComponent: TermsFormComponent;\r\n    @ViewChild('LocationFormComponent') locationFormComponent: LocationFormComponent;\r\n    @ViewChild('MemoComponent') memoComponent: MemoFormComponent;\r\n    @Output() readonly updateTrafficTabQuantity = new EventEmitter<any>();\r\n    @Output() readonly commodityBlockOrWarnMessage = new EventEmitter<any>();\r\n    @Output() readonly portWarningMessage = new EventEmitter<any>();\r\n    formComponents: BaseFormComponent[] = [];\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.formComponents.push(\r\n            this.counterpartyComponent,\r\n            this.commodityComponent,\r\n            this.quantityComponent,\r\n            this.termsComponent,\r\n            this.priceComponent,\r\n            this.shipmentPeriodComponent,\r\n            this.locationFormComponent,\r\n            this.memoComponent,\r\n        );\r\n    }\r\n\r\n    contractTypeSelected(contractType: ContractTypes) {\r\n        this.counterpartyComponent.contractTypeSelected(contractType);\r\n    }\r\n\r\n    contractDateSelected(contractDate: Date) {\r\n        this.commodityComponent.contractDateSelected(contractDate);\r\n    }\r\n\r\n    commodityCodeSelected(commodity: Commodity) {\r\n        this.priceComponent.commodityCodeSelected(commodity);\r\n        this.termsComponent.commodityCodeSelected(commodity);\r\n    }\r\n\r\n    commBlockWarnMessage(isBlocking: any) {\r\n        this.commodityBlockOrWarnMessage.emit(isBlocking);\r\n    }\r\n\r\n    portsWarningMessage(isPortWarning: any) {\r\n        this.portWarningMessage.emit(isPortWarning);\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.initForm(entity, isEdit);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    quantitySelected(quantity: number) {\r\n        this.priceComponent.quantityVal = quantity;\r\n        this.priceComponent.setContractValue();\r\n        this.updateTrafficTabQuantity.emit(quantity);\r\n\r\n    }\r\n    quantityCodeSelected(quantityCode: WeightUnit) {\r\n        this.priceComponent.weightUnit = quantityCode;\r\n        this.priceComponent.setContractValue();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            memoComponent: this.memoComponent.getFormGroup(),\r\n            counterpartyGroup: this.counterpartyComponent.getFormGroup(),\r\n            termsGroup: this.termsComponent.getFormGroup(),\r\n            quantityGroup: this.quantityComponent.getFormGroup(),\r\n            locationFormComponent: this.locationFormComponent.getFormGroup(),\r\n            shipmentPeriodFormComponent: this.shipmentPeriodComponent.getFormGroup(),\r\n            commodityGroup: this.commodityComponent.getFormGroup(),\r\n            priceGroup: this.priceComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h1 class=\\\"no-margin\\\">Save {{dialogData.title}} As Favourite</h1>\\r\\n</div>\\r\\n\\r\\n<mat-dialog-content [FormGroup]=\\\"formGroup\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"30px\\\">\\r\\n        <div fxFlex=\\\"40%\\\"\\r\\n             [class.isEmpty]=\\\"!nameCtrl.value\\\"\\r\\n             [class.required-field]=\\\"nameCtrl.isRequired\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Name\\\"\\r\\n                       [formControl]=\\\"nameCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Name of the Favourite\\\"\\r\\n                       required=\\\"nameCtrl.isRequired\\\"\\r\\n                       (change)=\\\"onNameChanged($event)\\\">\\r\\n                <mat-hint class=\\\"required-field\\\">Required *</mat-hint>\\r\\n                <mat-error *ngIf=\\\"nameCtrl.hasError('required')\\\">Name is Required</mat-error>\\r\\n                <mat-error *ngIf=\\\"nameCtrl.hasError('maxlength')\\\">\\r\\n                    Name cannot be more than 50 characters\\r\\n                </mat-error>\\r\\n                <mat-hint align=\\\"end\\\"\\r\\n                          *ngIf=\\\"nameCtrl.hasError('notUnique')\\\">\\r\\n                    Name already used\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"60%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Description\\\"\\r\\n                       [formControl]=\\\"descriptionCtrl\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       matTooltip=\\\"Description of the Favourite\\\">\\r\\n                <mat-error *ngIf=\\\"descriptionCtrl.hasError('maxlength')\\\">\\r\\n                    Description can not be more than 150 characters\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n\\r\\n<mat-dialog-actions>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCloseButtonClicked()\\\">DISCARD</button>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start end\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onSaveAsFavouriteButtonClicked()\\\">{{saveButtonText}}</button>\\r\\n    </div>\\r\\n</mat-dialog-actions>\"","module.exports = \".required-field {\\n  color: #00a9c6; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { SectionCompleteDisplayView } from '../../../../shared/models/section-complete-display-view';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { TradeFavoriteDetail } from '../../../entities/tradeFavoriteDetail.entity';\r\n@Component({\r\n    selector: 'atlas-save-as-favourite-dialog',\r\n    templateUrl: './save-as-favourite-dialog.component.html',\r\n    styleUrls: ['./save-as-favourite-dialog.component.scss'],\r\n})\r\nexport class SaveAsFavouriteDialogComponent implements OnInit {\r\n    formGroup: FormGroup;\r\n    company: string;\r\n    nameCtrl = new AtlasFormControl('Name');\r\n    descriptionCtrl = new AtlasFormControl('Description');\r\n    saveButtonText = 'Save As Favourite';\r\n\r\n    dialogData: {\r\n        title: string,\r\n        sectionId: number,\r\n        companyId: string,\r\n    };\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<SaveAsFavouriteDialogComponent>,\r\n\r\n        protected utilService: UtilService,\r\n        private tradingService: TradingService,\r\n        protected dialog: MatDialog,\r\n        private snackbarService: SnackbarService,\r\n        protected formBuilder: FormBuilder,\r\n        @Inject(MAT_DIALOG_DATA) public data: { title: string, sectionId: number, companyId: string },\r\n    ) {\r\n        this.dialogData = data;\r\n        this.company = this.dialogData.companyId;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setValidators();\r\n        this.formGroup = this.formBuilder.group({\r\n            nameCtrl: this.nameCtrl,\r\n            descriptionCtrl: this.descriptionCtrl,\r\n        });\r\n    }\r\n\r\n    setValidators() {\r\n        this.nameCtrl.setValidators(Validators.compose([\r\n            Validators.required,\r\n            Validators.maxLength(50),\r\n            Validators.pattern(/^[a-zA-Z0-9!@#$%^&*()-_ ~`\"'|]+$/),\r\n        ]));\r\n        this.descriptionCtrl.setValidators(Validators.compose([\r\n            Validators.maxLength(150),\r\n            Validators.pattern(/^[a-zA-Z0-9!@#$%^&*()-_ ~`\"'|]+$/),\r\n        ]));\r\n    }\r\n\r\n    onNameChanged($event) {\r\n        if ($event.target.value) {\r\n            this.tradingService.checkTradeFavoriteNameExists($event.target.value)\r\n                .subscribe((result: boolean) => {\r\n                    if (result) {\r\n                        const confirmOverwriteDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Favorite Name already exits',\r\n                                text: 'The Name is already taken, please provide another name or ' +\r\n                                    'do you want to override the existing favorite trade ? ',\r\n                                okButton: 'Overwrite',\r\n                                cancelButton: 'Cancel',\r\n                            },\r\n                        });\r\n                        confirmOverwriteDialog.afterClosed().subscribe((answer) => {\r\n                            if (answer) {\r\n                                this.saveButtonText = 'Overwrite';\r\n                                confirmOverwriteDialog.close();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    onSaveAsFavouriteButtonClicked() {\r\n        if (this.formGroup.valid) {\r\n            const tradeFavorite = new TradeFavoriteDetail();\r\n            tradeFavorite.name = this.formGroup.value.nameCtrl;\r\n            tradeFavorite.description = this.formGroup.value.descriptionCtrl;\r\n            tradeFavorite.sectionId = this.dialogData.sectionId;\r\n            this.tradingService.createTradeFavorite(tradeFavorite).subscribe((result) => {\r\n                if (result) {\r\n                    this.snackbarService.informationSnackBar('The trade has been successfully saved as favorite');\r\n                    this.onCloseButtonClicked();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\" table-title\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"trancheGridOptions && trancheGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"trancheGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            [gridId]=\\\"componentId\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"trancheGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material atlas-ag-grid\\\"\\r\\n                             [rowData]=\\\"childSectionList\\\"\\r\\n                             [columnDefs]=\\\"trancheGridCols\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [context]=\\\"gridContext\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             [singleClickEdit]=true\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".atlas-ag-grid {\\n  height: 350px; }\\n\\n.atlas-ag-grid-angular {\\n  max-height: 300px; }\\n\"","import { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorDatePickerComponent } from '../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component';\r\nimport { CellEditorSelectComponent } from '../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasNumber } from '../../../../../shared/entities/atlas-number.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { Section } from '../../../../../shared/entities/section.entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { ContractStatus } from '../../../../../shared/enums/contract-status.enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { SectionTypes } from '../../../../../shared/enums/section-type.enum';\r\nimport { TrancheSplitView } from '../../../../../shared/models/tranche-split-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { AgContextualMenuComponent } from './../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridAutocompleteComponent } from './../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { ChildSectionsSearchResult } from './../../../../../shared/dtos/chilesection-search-result';\r\nimport { WINDOW } from './../../../../../shared/entities/window-injection-token';\r\nimport { SplitCreateAndAllocateService } from './../../../../../shared/services/split-create-and-allocate.service';\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'atlas-new-tranche-split-ag-grid',\r\n    templateUrl: './new-tranche-split-ag-grid.component.html',\r\n    styleUrls: ['./new-tranche-split-ag-grid.component.scss'],\r\n})\r\nexport class NewTrancheSplitAgGridComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n\r\n    sectionModel: Section;\r\n    parentContractId: number;\r\n    masterdata: MasterData;\r\n    sectionType: number;\r\n    isGridEditable: boolean = false;\r\n    isGridEditableOnCondition: boolean = false;\r\n    private physicalContractSectionSubscription: Subscription;\r\n    childQuantityTranched = new AtlasNumber('0');\r\n    rowModifiedIndex: number[] = [];\r\n    shippingUserAction: string = 'shipping';\r\n    selectedUserAction: string;\r\n    quantityColumn: string = 'quantity';\r\n    gridRowInvalidCount: number = 0;\r\n    shippingStartColumn: string = 'deliveryPeriodStartDate';\r\n    shippingEndColumn: string = 'deliveryPeriodEndDate';\r\n    isSplitAllocated: boolean = false;\r\n    @Input() childSections: ChildSectionsSearchResult[];\r\n    @Output() readonly childQuantityConsumedEvent = new EventEmitter();\r\n    @Output() readonly enableProceedButton = new EventEmitter();\r\n    gridContext: NewTrancheSplitAgGridComponent;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    newTrancheGridMenuActions: { [key: string]: string } = {\r\n        addNewTranche: 'addLine',\r\n        deleteTranche: 'delete',\r\n    };\r\n    newTrancheGridContextualMenuActions: AgContextualMenuAction[];\r\n    childSectionList: TrancheSplitView[] = [];\r\n    trancheGridOptions: agGrid.GridOptions;\r\n    trancheGridCols: agGrid.ColDef[];\r\n    componentId = 'tranchesAndSplitsGrid';\r\n    hasGridSharing: boolean = false;\r\n    maxLetter = 'Z';\r\n    company: string;\r\n    isValid: boolean;\r\n    recordId: number = 0;\r\n    quantityStyleChange: boolean = false;\r\n    disableAddNewLine: boolean = false;\r\n    errorMessage: string;\r\n    isWeightConverted: boolean = false;\r\n\r\n    gridComponents = {\r\n        atrDate: CellEditorDatePickerComponent,\r\n        atrSelect: CellEditorSelectComponent,\r\n    };\r\n    constructor(private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private splitCreateAndAllocateService: SplitCreateAndAllocateService,\r\n        private companyManager: CompanyManagerService,\r\n        protected dialog: MatDialog,\r\n        protected tradingService: TradingService,\r\n        protected snackbarService: SnackbarService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private uiService: UiService,\r\n        public gridService: AgGridService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.gridContext = this;\r\n        this.setMenuAction();\r\n        this.childSectionList = [];\r\n        this.recordId = 0;\r\n\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.componentId)\r\n            .subscribe((configuration) => {\r\n                // -- used later if this will become L&S maybe\r\n                // this.columnConfiguration = configuration.columns;\r\n                // this.configurationLoaded.emit();\r\n                // this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n\r\n    }\r\n    setMenuAction() {\r\n        this.newTrancheGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.newTrancheGridMenuActions.deleteTranche,\r\n            },\r\n            {\r\n                icon: 'add',\r\n                text: 'Add New Line',\r\n                disabled: this.disableAddNewLine,\r\n                action: this.newTrancheGridMenuActions.addLine,\r\n            },\r\n        ];\r\n    }\r\n\r\n    assignValue(sectionModel: Section, sectionType: number) {\r\n        this.isGridEditable = (sectionModel.allocatedTo === null);\r\n        this.isGridEditableOnCondition = (sectionModel.allocatedTo === null);\r\n        if ((sectionModel.invoicingStatusId === InvoicingStatus.Finalized\r\n            || sectionModel.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired)\r\n            && sectionModel.allocatedTo === null) {\r\n            this.isGridEditable = false;\r\n            this.isGridEditableOnCondition = true;\r\n        }\r\n        this.sectionType = sectionType;\r\n        this.sectionModel = sectionModel;\r\n        this.childSectionList = [];\r\n        this.initTrancheSplitGridCols();\r\n        this.parentContractId = this.sectionModel.contractId;\r\n        this.enableProceedButton.emit(true);\r\n        this.trancheGridOptions.api.setRowData(this.childSectionList);\r\n    }\r\n\r\n    generateSectionNumberForTranche(latestSectionId: string): string {\r\n        let firstCharacter: string;\r\n        let alphabetToIncrement: string = 'A';\r\n        const index: number = 4;\r\n        firstCharacter = latestSectionId.charAt(0);\r\n        if (firstCharacter !== '0') {\r\n            let incrementNumber: number = firstCharacter.charCodeAt(0);\r\n            incrementNumber = incrementNumber + 1;\r\n            alphabetToIncrement = String.fromCharCode(incrementNumber);\r\n        }\r\n        if (alphabetToIncrement <= 'Z') {\r\n            return alphabetToIncrement.padEnd(index, '0');\r\n        }\r\n        return '';\r\n    }\r\n\r\n    generateSectionNumberForSplit(latestSectionId: string): string {\r\n        const startIndex: number = 1;\r\n        const endIndex: number = 4;\r\n        const numberToGenerate: number = Number(latestSectionId.substring(startIndex, endIndex)) + 1;\r\n        let digitsToIncrement: string = numberToGenerate.toString();\r\n        digitsToIncrement = digitsToIncrement.padStart(endIndex - startIndex, '0');\r\n        return numberToGenerate > 999 ? '' : latestSectionId.charAt(0) + digitsToIncrement;\r\n    }\r\n\r\n    populateEntity(entity: any, childSections?: ChildSectionsSearchResult[]) {\r\n        const section = entity as Section;\r\n        this.isValid = true;\r\n        // tslint:disable-next-line:prefer-conditional-expression\r\n        if (childSections) {\r\n            section.childSections = this.getSection(this.populateChildSection(entity, childSections));\r\n        } else {\r\n            section.childSections = this.getSection(this.populateChildSection());\r\n        }\r\n        return section;\r\n    }\r\n\r\n    populateChildSection(allocation?: Section, allocatedChildSections?: ChildSectionsSearchResult[]): TrancheSplitView[] {\r\n        const section = allocation ? allocation : this.sectionModel;\r\n        const child = allocatedChildSections ? allocatedChildSections : this.childSections;\r\n        const physicalContractId: string = section.contractLabel.split('.')[0];\r\n        let validationCount = 0;\r\n\r\n        if (!this.isSplitAllocated) {\r\n            this.childSectionList = this.childSectionList.filter((childSection) => childSection.isTouched === true);\r\n            if (this.childSectionList.length > 0) {\r\n                validationCount = this.childSectionList.filter((chidSection) =>\r\n                    chidSection.deliveryPeriodStartDate > chidSection.deliveryPeriodEndDate).length;\r\n            }\r\n        }\r\n        let childContractLabelId: string;\r\n        let childSectionNumberId: string;\r\n\r\n        if (validationCount === 0) {\r\n            let sectionNumberId = this.sectionType === SectionTypes.Tranche ?\r\n                this.splitCreateAndAllocateService.findLatestContractLabelForTranche(section, child) :\r\n                this.splitCreateAndAllocateService.findLatestContractLabelForSplit(section, child);\r\n\r\n            this.childSectionList.forEach((childSection) => {\r\n                childSectionNumberId = this.sectionType === SectionTypes.Tranche ?\r\n                    this.generateSectionNumberForTranche(sectionNumberId) : this.generateSectionNumberForSplit(sectionNumberId);\r\n                if (childSectionNumberId.length > 0) {\r\n                    childContractLabelId = physicalContractId + '.' + childSectionNumberId;\r\n                    childSection.contractLabel = childContractLabelId;\r\n                    childSection.sectionNumber = childSectionNumberId;\r\n                    childSection.originalQuantity = childSection.quantity;\r\n                    sectionNumberId = childSectionNumberId;\r\n                } else {\r\n                    this.errorMessage = this.sectionType === SectionTypes.Tranche ?\r\n                        'More than 26 Tranches not allowed' :\r\n                        'More than 999 Split not allowed';\r\n                    this.isValid = false;\r\n                }\r\n\r\n            });\r\n        } else {\r\n            this.isValid = false;\r\n        }\r\n\r\n        return this.childSectionList;\r\n    }\r\n\r\n    reset() {\r\n        this.childSectionList = [];\r\n        this.onCellValueChanged(this);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.physicalContractSectionSubscription) {\r\n            this.physicalContractSectionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    getLetterFromNumber(letter: string): number {\r\n        return letter.toLowerCase().charCodeAt(0) - 96;\r\n    }\r\n\r\n    addSplitOrTranches(numberOfLine: number, userAction: string, isSplitAllocated: boolean,\r\n        allocation?: Section, allocatedChildSections?: ChildSectionsSearchResult[]) {\r\n        this.setMenuAction();\r\n        this.initTrancheSplitGridCols();\r\n        let childQuantity = 0;\r\n        this.isSplitAllocated = isSplitAllocated;\r\n        let trancheLength;\r\n        // tslint:disable-next-line:prefer-conditional-expression\r\n        if (this.isSplitAllocated) {\r\n            trancheLength = this.splitCreateAndAllocateService.findLatestContractLabelForTranche(allocation, allocatedChildSections);\r\n        } else {\r\n            trancheLength = this.splitCreateAndAllocateService.findLatestContractLabelForTranche(this.sectionModel, this.childSections);\r\n        }\r\n        if (this.sectionType === SectionTypes.Tranche && trancheLength.charAt(0) > this.maxLetter) {\r\n            this.snackbarService.informationSnackBar('More than ' + this.getLetterFromNumber(this.maxLetter) +\r\n                ' Tranches not allowed');\r\n            return;\r\n        }\r\n        if (userAction === this.shippingUserAction && this.sectionType === SectionTypes.Tranche) {\r\n            this.selectedUserAction = userAction;\r\n            childQuantity = Math.floor((this.sectionModel.quantity / numberOfLine) * 100) / 100;\r\n        }\r\n        let startDeliveryDate: _moment.Moment = moment(this.sectionModel.deliveryPeriodStartDate);\r\n        for (let count = 1; count <= numberOfLine; count++) {\r\n            if (userAction === this.shippingUserAction && count === numberOfLine && this.sectionType === SectionTypes.Tranche) {\r\n                const remainingQuantity: number = (this.sectionModel.quantity) - (childQuantity * (numberOfLine - 1));\r\n                childQuantity = Math.round(remainingQuantity * 100) / 100;\r\n            }\r\n            this.recordId = this.recordId + 1;\r\n            const rowDataItem = new TrancheSplitView(this.sectionModel, childQuantity, this.recordId, this.sectionType);\r\n            if (userAction === this.shippingUserAction) {\r\n                rowDataItem.isTouched = true;\r\n                if (count === numberOfLine) {\r\n                    rowDataItem.deliveryPeriodStartDate = moment(rowDataItem.deliveryPeriodEndDate).startOf('month').toDate();\r\n                } else if (count === 1) {\r\n                    rowDataItem.deliveryPeriodEndDate = moment(rowDataItem.deliveryPeriodStartDate).endOf('month').toDate();\r\n                } else {\r\n                    startDeliveryDate = startDeliveryDate.add(1, 'months');\r\n                    rowDataItem.deliveryPeriodEndDate = startDeliveryDate.endOf('month').toDate();\r\n                    rowDataItem.deliveryPeriodStartDate = startDeliveryDate.startOf('month').toDate();\r\n                }\r\n            }\r\n            this.childSectionList.push(rowDataItem);\r\n            this.trancheGridOptions.api.updateRowData({ add: [rowDataItem] });\r\n            this.trancheGridOptions.columnApi.autoSizeAllColumns();\r\n        }\r\n\r\n        if (userAction === this.shippingUserAction) {\r\n            this.onCellValueChanged(this);\r\n        }\r\n    }\r\n\r\n    numberParser(params) {\r\n        if (params.newValue) {\r\n            const newValue = params.newValue.length > 0 ? parseFloat(params.newValue) : null;\r\n\r\n            if (newValue) {\r\n                return newValue;\r\n            }\r\n            params.newValue = 0;\r\n            return 0;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    quantityValidation(val) {\r\n        this.childQuantityTranched = new AtlasNumber('0');\r\n        this.childSectionList.forEach((element) => {\r\n            if (this.sectionModel.weightUnitId === element.weightUnitId) {\r\n                this.childQuantityTranched.plus(new AtlasNumber(element.quantity.toString()));\r\n            } else {\r\n                const conversionFactor: number = this.masterdata.weightUnits.find((commodities) =>\r\n                    commodities.weightUnitId === element.weightUnitId).conversionFactor;\r\n                const parentConversionFactor = this.masterdata.weightUnits.find((commodities) =>\r\n                    commodities.weightUnitId === this.sectionModel.weightUnitId).conversionFactor;\r\n                const convertedWeight = (element.quantity * conversionFactor) / parentConversionFactor;\r\n                this.childQuantityTranched.plus(new AtlasNumber(convertedWeight.toString()));\r\n            }\r\n        });\r\n        if (this.selectedUserAction === this.shippingUserAction) {\r\n            this.childQuantityTranched = new AtlasNumber(this.childQuantityTranched.toString());\r\n        }\r\n        const conditionToHighlight = this.sectionModel.quantity - Number(this.childQuantityTranched);\r\n        this.quantityStyleChange = true;\r\n        if (val === 0) {\r\n            return 'Quantity should not be 0';\r\n        } else if (this.sectionModel.quantity < Number(this.childQuantityTranched)) {\r\n            this.quantityStyleChange = true;\r\n            return 'Child quantity cannot be more than the parent quantity';\r\n        } else if (conditionToHighlight < 0) {\r\n            this.quantityStyleChange = true;\r\n            return 'Total child quantity cannot be more than the parent quantity';\r\n        } else {\r\n            this.quantityStyleChange = false;\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.trancheGridOptions = params;\r\n        this.trancheGridOptions.columnDefs = this.trancheGridCols;\r\n        this.trancheGridOptions.columnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.trancheGridOptions.columnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.trancheGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onCellValueChanged(event) {\r\n        const rowIndex: number = event.rowIndex;\r\n        if (event.colDef) {\r\n            this.childSectionList[rowIndex].isTouched = true;\r\n            const newValue: string = event.newValue;\r\n            const columnChanged: string = event.colDef.field;\r\n            const oldValue: any = this.sectionModel[columnChanged];\r\n            if (columnChanged !== this.quantityColumn && columnChanged !== this.shippingStartColumn && newValue !== oldValue) {\r\n                this.childSectionList[rowIndex].status = ContractStatus.Unapproved;\r\n            }\r\n            if ((columnChanged === this.shippingStartColumn || columnChanged === this.shippingEndColumn) && newValue !== oldValue) {\r\n                if (this.childSectionList[rowIndex].deliveryPeriodStartDate > this.childSectionList[rowIndex].deliveryPeriodEndDate) {\r\n                    this.snackbarService.throwErrorSnackBar('Shipping Start Date cannot be greater than Shipping End Date');\r\n                }\r\n            }\r\n        }\r\n        this.childQuantityValidation();\r\n\r\n        if (this.rowModifiedIndex.indexOf(rowIndex) === -1) {\r\n            this.rowModifiedIndex.push(rowIndex);\r\n        }\r\n    }\r\n\r\n    childQuantityValidation() {\r\n        this.childQuantityTranched = new AtlasNumber('0');\r\n        this.childSectionList.forEach((element) => {\r\n            if (this.sectionModel.weightUnitId === element.weightUnitId) {\r\n                this.childQuantityTranched.plus(new AtlasNumber(element.quantity.toString()));\r\n            } else {\r\n                const conversionFactor: number = this.masterdata.weightUnits.find(\r\n                    (commodities) => commodities.weightUnitId === element.weightUnitId).conversionFactor;\r\n                const parentConversionFactor = this.masterdata.weightUnits.find(\r\n                    (commodities) => commodities.weightUnitId === this.sectionModel.weightUnitId).conversionFactor;\r\n                const convertedWeight = (element.quantity * conversionFactor) / parentConversionFactor;\r\n                this.childQuantityTranched.plus(new AtlasNumber(convertedWeight.toString()));\r\n                this.isWeightConverted = (Number(this.childQuantityTranched) > this.sectionModel.quantity) ? false : true;\r\n            }\r\n        });\r\n        if (this.selectedUserAction === this.shippingUserAction) {\r\n            this.childQuantityTranched = new AtlasNumber(this.childQuantityTranched.toString());\r\n        }\r\n        if (Number(this.childQuantityTranched) > this.sectionModel.quantity) {\r\n            this.snackbarService.throwErrorSnackBar(this.sectionType === SectionTypes.Tranche ?\r\n                'Cannot tranche more quantity than available parent quantity' :\r\n                'Cannot split more quantity than available parent quantity');\r\n        }\r\n        this.disableAddNewLine = false;\r\n        if ((this.sectionModel.quantity - Number(this.childQuantityTranched)) <= 0) {\r\n            this.disableAddNewLine = true;\r\n        }\r\n        this.setMenuAction();\r\n        this.initTrancheSplitGridCols();\r\n        this.childQuantityConsumedEvent.emit({\r\n            childQuantityConsumed: Number(this.childQuantityTranched),\r\n            isWeightConverted: this.isWeightConverted,\r\n        });\r\n    }\r\n\r\n    onQuantityCodeChanged(params) {\r\n        const selectedQuantity = this.masterdata.weightUnits.find(\r\n            (e) => e.weightUnitId === params.data.weightUnitId);\r\n        if (selectedQuantity) {\r\n            this.childQuantityValidation();\r\n        }\r\n    }\r\n\r\n    initTrancheSplitGridCols() {\r\n        this.trancheGridCols = [\r\n            {\r\n                headerName: 'Quantity',\r\n                colId: 'quantity',\r\n                field: 'quantity',\r\n                type: 'numericColumn',\r\n                editable: true,\r\n                valueFormatter: this.quantityFormatter.bind(this),\r\n                valueParser: this.numberParser,\r\n                cellClassRules: {\r\n                    'ag-grid-invalid-mandatory-field': (() => this.quantityStyleChange),\r\n                    'ag-grid-valid-mandatory-field': (() => !this.quantityStyleChange),\r\n                },\r\n\r\n                tooltip: (params) => {\r\n                    return this.quantityValidation(params.value);\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                colId: 'quantityCode',\r\n                field: 'weightUnitId',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditable,\r\n                    },\r\n                    options: this.masterdata.weightUnits,\r\n                    valueProperty: 'weightUnitId',\r\n                    codeProperty: 'weightCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    valueIsId: true,\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: this.onQuantityCodeChanged.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Shipping Period Type',\r\n                colId: 'periodTypeCode',\r\n                field: 'periodTypeCode',\r\n                editable: this.isGridEditableOnCondition,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellRenderer: this.periodTypeFormatter.bind(this),\r\n                cellEditorParams: (params) => {\r\n                    return {\r\n                        values: this.masterdata.periodTypes.map((periodTypes) => periodTypes.periodTypeDescription),\r\n                        displayPropertyName: 'periodTypeDescription',\r\n                        valuePropertyName: 'periodTypeCode',\r\n                        displayFormat: 'periodTypeDescription',\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Shipping Start Date',\r\n                colId: 'shippingStartDate',\r\n                field: 'deliveryPeriodStartDate',\r\n                editable: this.isGridEditable,\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Shipping End Date',\r\n                colId: 'shippingEndDate',\r\n                field: 'deliveryPeriodEndDate',\r\n                editable: this.isGridEditable,\r\n                valueFormatter: this.uiService.dateFormatter,\r\n                cellEditor: 'atrDate',\r\n            },\r\n            {\r\n                headerName: 'Commodity 1',\r\n                colId: 'commodity',\r\n                field: 'commodityId',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditable,\r\n                    },\r\n                    options: this.masterdata.commodities,\r\n                    valueProperty: 'commodityId',\r\n                    codeProperty: 'commodityCode',\r\n                    displayProperty: 'commodityDescription',\r\n                    isRequired: true,\r\n                    displayCode: true,\r\n                    valueIsId: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    params.api.refreshCells();\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Commodity 2',\r\n                field: 'commodityId',\r\n                colId: 'commodityOrigin',\r\n                editable: false,\r\n                valueFormatter: this.commoditys2ValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Commodity 3',\r\n                field: 'commodityId',\r\n                colId: 'commodityGrade',\r\n                editable: false,\r\n                valueFormatter: this.commoditys3ValueFormatter,\r\n            },\r\n            {\r\n                headerName: 'Commodity 4',\r\n                field: 'commodityId',\r\n                colId: 'commodityLvl4',\r\n                valueFormatter: this.commoditys4ValueFormatter,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Commodity 5',\r\n                field: 'commodityId',\r\n                colId: 'commodityLvl5',\r\n                valueFormatter: this.commoditys5ValueFormatter,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Crop Year',\r\n                colId: 'cropYear',\r\n                field: 'cropYear',\r\n                type: 'numericColumn',\r\n                editable: this.isGridEditableOnCondition,\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                colId: 'currency',\r\n                field: 'currency',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditable,\r\n                    },\r\n                    options: this.masterdata.currencies,\r\n                    valueProperty: 'currencyCode',\r\n                    codeProperty: 'currencyCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                colId: 'priceCode',\r\n                field: 'priceUnitId',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditable,\r\n                    },\r\n                    options: this.masterdata.priceUnits,\r\n                    valueProperty: 'priceUnitId',\r\n                    codeProperty: 'priceCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: true,\r\n                    valueIsId: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                colId: 'price',\r\n                field: 'price',\r\n                type: 'numericColumn',\r\n                editable: this.isGridEditable,\r\n                valueFormatter: this.amountFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Port of origin',\r\n                colId: 'portOrigin',\r\n                field: 'portOfOrigin',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditableOnCondition,\r\n                    },\r\n                    options: this.masterdata.ports,\r\n                    valueProperty: 'portCode',\r\n                    codeProperty: 'portCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: false,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Port of destination',\r\n                colId: 'portDestination',\r\n                field: 'portOfDestination',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditableOnCondition,\r\n                    },\r\n                    options: this.masterdata.ports,\r\n                    valueProperty: 'portCode',\r\n                    codeProperty: 'portCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: false,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Contract Term',\r\n                colId: 'contractTerm',\r\n                field: 'contractTerms',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditable,\r\n                    },\r\n                    options: this.masterdata.contractTerms,\r\n                    valueProperty: 'contractTermCode',\r\n                    codeProperty: 'contractTermCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: false,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Contract Terms port',\r\n                colId: 'contractTermsLocation',\r\n                field: 'contractTermsLocation',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditableOnCondition,\r\n                    },\r\n                    options: this.masterdata.ports,\r\n                    valueProperty: 'portCode',\r\n                    codeProperty: 'portCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Arbitration',\r\n                colId: 'arbitration',\r\n                field: 'arbitration',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditableOnCondition,\r\n                    },\r\n                    options: this.masterdata.arbitrations,\r\n                    valueProperty: 'arbitrationCode',\r\n                    codeProperty: 'arbitrationCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Payment Term',\r\n                colId: 'paymentTerms',\r\n                field: 'paymentTerms',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditableOnCondition,\r\n                    },\r\n                    options: this.masterdata.paymentTerms,\r\n                    valueProperty: 'paymentTermCode',\r\n                    codeProperty: 'paymentTermCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Market Zone',\r\n                colId: 'marketZone',\r\n                field: 'marketSectorId',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        gridEditable: this.isGridEditableOnCondition,\r\n                    },\r\n                    options: this.masterdata.businessSectors,\r\n                    valueProperty: 'sectorId',\r\n                    codeProperty: 'sectorCode',\r\n                    displayProperty: 'description',\r\n                    displayCode: true,\r\n                    isRequired: false,\r\n                    valueIsId: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Client Reference',\r\n                colId: 'clientReference',\r\n                field: 'counterpartyReference',\r\n                type: 'numericColumn',\r\n                editable: this.isGridEditableOnCondition,\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    menuActions: this.newTrancheGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, tranche: TrancheSplitView) {\r\n        switch (action) {\r\n            case this.newTrancheGridMenuActions.addLine:\r\n                const confirmAddLineDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: this.sectionType === SectionTypes.Tranche ? 'Tranche Addition' : 'Split Addition',\r\n                        text: this.sectionType === SectionTypes.Tranche ?\r\n                            'Are you sure you want to add a new tranche?' : 'Are you sure you want to add a new split?',\r\n                        okButton: 'Add Line',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                confirmAddLineDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.addSplitOrTranches(1, 'addLines', false);\r\n                    }\r\n                });\r\n                break;\r\n            case this.newTrancheGridMenuActions.deleteTranche:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: this.sectionType === SectionTypes.Tranche ? 'Tranche Deletion' : 'Split Deletion',\r\n                        text: this.sectionType === SectionTypes.Tranche ?\r\n                            'Are you sure you want to delete this tranche?' : 'Are you sure you want to delete this split?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.trancheGridOptions.api.updateRowData({ remove: [tranche] });\r\n                        this.childSectionList = this.childSectionList.filter((element) => tranche.id !== element.id);\r\n                        this.onCellValueChanged(this);\r\n                    }\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getSection(trancheSplitList: TrancheSplitView[]): Section[] {\r\n        let childSectionList: Section[];\r\n        childSectionList = [];\r\n        trancheSplitList.forEach((section) => {\r\n            const childSection: Section = new Section();\r\n            childSection.contractType = section.contractType;\r\n            childSection.contractLabel = section.contractLabel;\r\n            childSection.contractId = section.contractId;\r\n            childSection.commodityId = section.commodityId;\r\n            childSection.sectionNumber = section.sectionNumber;\r\n            childSection.status = section.status;\r\n            childSection.firstApprovalDateTime = section.firstApprovalDateTime;\r\n            childSection.departmentId = section.departmentId;\r\n            childSection.buyerCode = section.buyerCode;\r\n            childSection.sellerCode = section.sellerCode;\r\n            childSection.counterpartyReference = section.counterpartyReference;\r\n            childSection.originalQuantity = section.originalQuantity;\r\n            childSection.quantity = section.quantity;\r\n            childSection.portOfOrigin = section.portOfOrigin;\r\n            childSection.portOfDestination = section.portOfDestination;\r\n            childSection.deliveryPeriodStartDate = section.deliveryPeriodStartDate;\r\n            childSection.deliveryPeriodEndDate = section.deliveryPeriodEndDate;\r\n            childSection.positionMonthType = section.positionMonthType;\r\n            childSection.positionMonthIndex = section.positionMonthIndex;\r\n            childSection.cropYear = section.cropYear;\r\n            childSection.packingCode = section.packingCode;\r\n            childSection.periodTypeId = section.periodTypeId;\r\n            childSection.contractTerms = section.contractTerms;\r\n            childSection.contractTermsLocation = section.contractTermsLocation;\r\n            childSection.periodTypeId = section.periodTypeId;\r\n            childSection.arbitration = section.arbitration;\r\n            childSection.pricingMethod = section.pricingMethod;\r\n            childSection.paymentTerms = section.paymentTerms;\r\n            childSection.currencyCode = section.currency;\r\n            childSection.price = section.price;\r\n            childSection.blDate = section.blDate;\r\n            childSection.allocatedToId = section.allocatedToId;\r\n            childSection.allocatedTo = section.allocatedTo;\r\n            childSection.allocationDate = section.allocationDate;\r\n            childSection.assignedCharterReference = section.assignedCharterReference;\r\n            childSection.charterAssignmentDate = section.charterAssignmentDate;\r\n            childSection.createdBy = section.createdBy;\r\n            childSection.creationDate = section.creationDate;\r\n            childSection.lastModifiedBy = section.lastModifiedBy;\r\n            childSection.lastModifiedDate = section.lastModifiedDate;\r\n            childSection.header = section.header;\r\n            childSection.sectionOriginId = section.sectionOriginId;\r\n            childSection.contractLabelOrigin = section.contractLabelOrigin;\r\n            childSection.premiumDiscountValue = section.premiumDiscountValue;\r\n            childSection.premiumDiscountCurrency = section.premiumDiscountCurrency;\r\n            childSection.premiumDiscountBasis = section.premiumDiscountBasis;\r\n            childSection.memorandum = section.memorandum;\r\n            childSection.contractedValue = section.contractedValue;\r\n            childSection.weightUnitId = section.weightUnitId;\r\n            childSection.priceUnitId = section.priceUnitId;\r\n            childSection.marketSectorId = section.marketSectorId;\r\n            childSection.sectionTypeId = section.sectionTypeId;\r\n            childSection.costs = section.costs;\r\n            childSection.currency = section.currency;\r\n            childSectionList.push(childSection);\r\n        });\r\n\r\n        return childSectionList;\r\n    }\r\n\r\n    weightUnitDescriptionValueFormatter(params): string {\r\n        if (params) {\r\n            const weightUnit: WeightUnit = this.masterdata.weightUnits.find((weightUnits) =>\r\n                weightUnits.weightUnitId === params);\r\n            return weightUnit.description;\r\n        }\r\n    }\r\n\r\n    periodTypeFormatter(params) {\r\n        if (params.value && params.value.length === 1) {\r\n            const periodType = params.context.masterdata.periodTypes.find((periodTypes) =>\r\n                periodTypes.periodTypeCode === params.value);\r\n            params.value = (periodType ? periodType.periodTypeDescription : '');\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    commoditys2ValueFormatter(params): string {\r\n        if (params.value) {\r\n            const commodity = params.context.masterdata.commodities.find((commodities) =>\r\n                commodities.commodityId === params.value);\r\n            params.value = (commodity ? commodity.commodityOrigin : '');\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    commoditys3ValueFormatter(params): string {\r\n        if (params.value) {\r\n            const commodity = params.context.masterdata.commodities.find((commodities) =>\r\n                commodities.commodityId === params.value);\r\n            params.value = (commodity ? commodity.commodityGrade : '');\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    commoditys4ValueFormatter(params): string {\r\n        if (params.value) {\r\n            const commodity = params.context.masterdata.commodities.find((commodities) =>\r\n                commodities.commodityId === params.value);\r\n            params.value = (commodity ? commodity.commodityLvl4 : '');\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    commoditys5ValueFormatter(params): string {\r\n        if (params.value) {\r\n            const commodity = params.context.masterdata.commodities.find((commodities) =>\r\n                commodities.commodityId === params.value);\r\n            params.value = (commodity ? commodity.commodityLvl5 : '');\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    amountFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 2);\r\n        }\r\n    }\r\n\r\n    quantityFormatter(param) {\r\n        if (param.value) {\r\n            const commonMethods = new CommonMethods();\r\n            return commonMethods.getFormattedNumberValue(param.value, 3);\r\n        }\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\">\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              class=\\\"side-nav-footer-components\\\"\\r\\n                              [fieldControl]=\\\"parentContractNumberCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              label='Parent Contract Number:'>\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              class=\\\"side-nav-footer-components\\\"\\r\\n                              [fieldControl]=\\\"quantityConsumedCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              label={{quantityConsumedLabel}}>\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              class=\\\"side-nav-footer-components\\\"\\r\\n                              [fieldControl]=\\\"quantityAvailableCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              label='Quantity Available:'>\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".side-nav-footer-components {\\n  color: black; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Section } from '../../../../../shared/entities/section.entity';\r\nimport { SectionTypes } from '../../../../../shared/enums/section-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-new-tranche-split-footer',\r\n    templateUrl: './new-tranche-split-footer.component.html',\r\n    styleUrls: ['./new-tranche-split-footer.component.scss'],\r\n})\r\nexport class NewTrancheSplitFooterComponent implements OnInit {\r\n    sectionModel: Section;\r\n    parentContractNumberCtrl = new AtlasFormControl('ParentContract');\r\n    quantityConsumedCtrl = new AtlasFormControl('QuantityConsumed');\r\n    quantityConsumedLabel: string;\r\n    isInputField: boolean = false;\r\n    quantityAvailableCtrl = new AtlasFormControl('QuantityAvailable');\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        this.parentContractNumberCtrl.disable();\r\n        this.quantityConsumedCtrl.disable();\r\n        this.quantityAvailableCtrl.disable();\r\n    }\r\n\r\n    assignValue(sectionModel: Section, sectionType: number) {\r\n        this.quantityConsumedLabel = sectionType === SectionTypes.Tranche ? 'Quantity Tranched:' : 'Quantity Splitted:';\r\n        const childQuantityConsumed: number = 0;\r\n        this.sectionModel = sectionModel;\r\n        this.parentContractNumberCtrl.patchValue(this.sectionModel.contractLabel);\r\n        this.quantityConsumedCtrl.patchValue(this.formatQuantity(childQuantityConsumed));\r\n        this.quantityAvailableCtrl.patchValue(this.formatQuantity(this.sectionModel.quantity));\r\n    }\r\n    formatQuantity(value: number) {\r\n        if (value) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(value);\r\n        }\r\n        return value;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <h1>{{title}} Creation</h1>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isSectionTypeTranche\\\"\\r\\n         fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start end\\\">\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"end start \\\">\\r\\n            <div class=\\\"toggle\\\">\\r\\n                <span class=\\\"atlas-toggle-span\\\">Automatically tranche based on shipping delivery</span>\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleBasedOnShippingDelivery()\\\">\\r\\n                </mat-slide-toggle>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start center\\\"\\r\\n     fxLayoutGap=\\\"10px\\\"\\r\\n     class=\\\"add-line-container\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <h6 class=\\\"no-margin\\\">Add new lines:</h6>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\"\\r\\n         fxFlex=\\\"4\\\">\\r\\n        <mat-form-field>\\r\\n            <input matInput\\r\\n                   [formControl]=\\\"addNewLineCtrl\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!showAddline\\\"\\r\\n                (click)=\\\"onProceedButtonClicked()\\\">Proceed</button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".atlas-toggle-span {\\n  margin-right: 12px; }\\n\\nmat-card > .toggle {\\n  float: right; }\\n\\nh1 {\\n  -webkit-margin-before: 0em !important;\\n          margin-block-start: 0em !important;\\n  -webkit-margin-after: 0em !important;\\n          margin-block-end: 0em !important; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Section } from '../../../../../shared/entities/section.entity';\r\nimport { SectionTypes } from '../../../../../shared/enums/section-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-new-tranche-split-header',\r\n    templateUrl: './new-tranche-split-header.component.html',\r\n    styleUrls: ['./new-tranche-split-header.component.scss'],\r\n})\r\nexport class NewTrancheSplitHeaderComponent implements OnInit {\r\n    @Output() readonly addSplitOrTranchesEvent = new EventEmitter();\r\n    @Output() readonly newTrancheShippingEvent = new EventEmitter();\r\n    addNewLineCtrl = new AtlasFormControl('', 1);\r\n    toggleShippingDeliveryCtrl: boolean = false;\r\n    isSectionTypeTranche: boolean = false;\r\n    title: string;\r\n    public sectionModel: Section;\r\n    showAddline: boolean = false;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    assignSectionType(sectionType: number) {\r\n        this.title = 'Split';\r\n        this.isSectionTypeTranche = false;\r\n        if (sectionType === SectionTypes.Tranche) {\r\n            this.isSectionTypeTranche = true;\r\n            this.title = 'Tranche';\r\n        }\r\n    }\r\n    toggleBasedOnShippingDelivery() {\r\n        this.toggleShippingDeliveryCtrl = !this.toggleShippingDeliveryCtrl;\r\n        this.newTrancheShippingEvent.emit(this.toggleShippingDeliveryCtrl);\r\n    }\r\n\r\n    onProceedButtonClicked() {\r\n        this.addSplitOrTranchesEvent.emit(this.addNewLineCtrl.value);\r\n        this.addNewLineCtrl.patchValue('');\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"end\\\">\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end\\\"\\r\\n         fxFlex=\\\"32\\\">\\r\\n        <span matTooltip={{toolTipMerge}}>\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Trades.Physicals.Merge',company:this.company\\\"\\r\\n                    [disabled]=\\\"disableTradeMerge\\\"\\r\\n                    (click)=\\\"onMergeButtonClicked()\\\">MERGE\\r\\n            </button>\\r\\n        </span>\\r\\n        <span matTooltip={{toolTipSplit}}>\\r\\n            <button mat-button\\r\\n                    *ngIf=\\\"!isCreateMode\\\"\\r\\n                    [disabled]=\\\"disableCreateSplit || isSnapshot\\\"\\r\\n                    (click)=\\\"onUpdateSplitTranchesButtonClicked()\\\">UPDATE\\r\\n                SPLITS & TRANCHES</button>\\r\\n        </span>\\r\\n        <span matTooltip={{toolTipSplit}}>\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Trades.Physicals.CreateTrancheSplit',company:this.company\\\"\\r\\n                    [disabled]=\\\"disableCreateSplit || isSnapshot ||!trancheSplitPrivilege\\\"\\r\\n                    (click)=\\\"onSplitSideNavOpenClicked();\\\">CREATE\\r\\n                SPLIT</button>\\r\\n        </span>\\r\\n        <span matTooltip={{toolTipTranche}}>\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Trades.Physicals.CreateTrancheSplit',company:this.company\\\"\\r\\n                    [disabled]=\\\"disableCreateTranche || isSnapshot||!trancheSplitPrivilege\\\"\\r\\n                    (click)=\\\"onTrancheSideNavOpenClicked();\\\">CREATE\\r\\n                TRANCHE</button>\\r\\n        </span>\\r\\n    </div>\\r\\n</div>\\r\\n<atlas-tranche-split-grid [childSectionsSearchResult]=\\\"childSectionsSearchResult\\\"\\r\\n                          #TranceSplitGridFormComponent></atlas-tranche-split-grid>\"","module.exports = \".physical-section-tab {\\n  padding-top: 16px; }\\n\"","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FixPricedSection } from '../../../../shared/entities/fix-priced-section.entity';\r\nimport { FuturesOptionsPricedSection } from '../../../../shared/entities/futures-options-priced-section.entity';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { ContractStatus } from '../../../../shared/enums/contract-status.enum';\r\nimport { InvoiceTypes } from '../../../../shared/enums/invoice-type.enum';\r\nimport { InvoicingStatus } from '../../../../shared/enums/invoicing-status.enum';\r\nimport { SectionTypes } from '../../../../shared/enums/section-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { TradeActionsService } from '../../../services/trade-actions.service';\r\nimport { TrancheSplitGridComponent } from '../form-components/tranche-split-grid/tranche-split-grid.component';\r\nimport { AuthorizationService } from './../../../../core/services/authorization.service';\r\nimport { ChildSectionsSearchResult } from './../../../../shared/dtos/chilesection-search-result';\r\n\r\n@Component({\r\n    selector: 'atlas-physical-contract-capture-form-section-tab',\r\n    templateUrl: './physical-contract-capture-form-section-tab.component.html',\r\n    styleUrls: ['./physical-contract-capture-form-section-tab.component.scss'],\r\n})\r\nexport class PhysicalContractCaptureFormSectionTabComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    sideNavOpened: number;\r\n\r\n    disableCreateSplit: boolean = false;\r\n    disableCreateTranche: boolean = false;\r\n    disableTradeMerge: boolean = false;\r\n    model: Section;\r\n    company: string;\r\n    isSnapshot = false;\r\n    isCreateMode = true;\r\n    toolTipSplit: string = '';\r\n    toolTipTranche: string = '';\r\n    toolTipMerge: string = '';\r\n    @Input() childSectionsSearchResult: ChildSectionsSearchResult[];\r\n    @Output() readonly newSplitTrancheSideNavEvent = new EventEmitter();\r\n    @ViewChild('TranceSplitGridFormComponent') TranceSplitGridFormComponent: TrancheSplitGridComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    trancheSplitPrivilege: boolean = false;\r\n\r\n    constructor(private route: ActivatedRoute, protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected router: Router,\r\n        protected tradeActionsService: TradeActionsService,\r\n        protected tradingService: TradingService,\r\n        protected securityService: SecurityService,\r\n        protected authorizationService: AuthorizationService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        const dataVersionId = this.route.snapshot.params['dataVersionId'];\r\n        if (dataVersionId) {\r\n            this.isSnapshot = true;\r\n        }\r\n        this.subscriptions.push(\r\n            this.tradeActionsService.trancheSectionSubject.subscribe(() => {\r\n                this.onTrancheSideNavOpenClicked();\r\n            }));\r\n\r\n        this.subscriptions.push(\r\n            this.tradeActionsService.splitSectionSubject.subscribe(() => {\r\n                this.onSplitSideNavOpenClicked();\r\n            }));\r\n\r\n        this.formComponents.push(\r\n            this.TranceSplitGridFormComponent);\r\n        this.checkTradePrivilege();\r\n    }\r\n\r\n    checkTradePrivilege() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'Physicals')) {\r\n                this.trancheSplitPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CreateTrancheSplit');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            tranceSplitGridFormComponent: this.TranceSplitGridFormComponent.getFormGroup(),\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.isCreateMode = false;\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.initForm(entity, isEdit);\r\n        });\r\n        this.model = entity as FixPricedSection | FuturesOptionsPricedSection;\r\n        if (this.model.quantity <= 0) {\r\n            this.disableCreateSplit = true;\r\n            this.toolTipSplit = 'Contract cannot be splitted when quantity is equal to 0';\r\n        }\r\n        if (this.model.quantity <= 0) {\r\n            this.disableCreateTranche = true;\r\n            this.toolTipTranche = 'Contract cannot be tranched when quantity is equal to 0';\r\n        }\r\n        if (this.model.allocatedToId != null) {\r\n            this.disableCreateTranche = true;\r\n            this.toolTipTranche = 'Contract cannot be tranched when it is allocated';\r\n        }\r\n        if (this.model.allocatedTo &&\r\n            this.model.invoiceReference &&\r\n            this.model.invoiceTypeId === InvoiceTypes.Washout &&\r\n            this.model.invoicingStatusId === InvoicingStatus.Finalized &&\r\n            this.model.allocatedTo.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            this.disableCreateSplit = true;\r\n            this.toolTipSplit = 'Contract cannot be splitted when it is allocated and Washout Invoiced';\r\n        }\r\n        if (this.model.sectionId && this.model.dataVersionId) {\r\n            this.subscriptions.push(\r\n                this.tradingService.getContextualDataForContractMerge(this.model.sectionId, this.model.dataVersionId).subscribe((data) => {\r\n                    if (data) {\r\n                        this.disableTradeMerge = !(data.isAllowed);\r\n                        this.toolTipMerge = data.message;\r\n                    }\r\n                }));\r\n        }\r\n        if ((this.model.quantity > 0) && (this.model.isClosed)) {\r\n            this.disableCreateSplit = true;\r\n            this.disableCreateTranche = true;\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    onTrancheSideNavOpenClicked() {\r\n        this.sideNavOpened = SectionTypes.Tranche;\r\n        this.newSplitTrancheSideNavEvent.emit(this.sideNavOpened);\r\n    }\r\n\r\n    onSplitSideNavOpenClicked() {\r\n        this.sideNavOpened = SectionTypes.Split;\r\n        this.newSplitTrancheSideNavEvent.emit(this.sideNavOpened);\r\n    }\r\n\r\n    contractStatusChanged(contractStatus: ContractStatus) {\r\n        this.TranceSplitGridFormComponent.contractStatusChanged(contractStatus);\r\n    }\r\n\r\n    onTabSelected() {\r\n        this.TranceSplitGridFormComponent.onTabActive();\r\n    }\r\n\r\n    onMergeButtonClicked() {\r\n        this.router.navigate(['/' + this.company + '/trades/tradeMerge/'\r\n            + encodeURIComponent(String(this.model.sectionId))]);\r\n    }\r\n\r\n}\r\n","module.exports = \"<!-- Layout divided by column -->\\r\\n<!-- container -->\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"space-around start\\\"\\r\\n     class=\\\"status-tab-main\\\">\\r\\n    <!--left-->\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start left\\\"\\r\\n         fxFlex=\\\"48\\\">\\r\\n        <atlas-allocation-info-form-component #AllocationInfoFormComponentComponent></atlas-allocation-info-form-component>\\r\\n        <atlas-cash-against-invoice-form-component #CashAgainstInvoiceFormComponentComponent></atlas-cash-against-invoice-form-component>\\r\\n        <atlas-document-status-form-component #DocumentStatusFormComponentComponent></atlas-document-status-form-component>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start right\\\"\\r\\n         fxFlex=\\\"48\\\">\\r\\n        <atlas-invoicing-form-component #InvoicingFormComponentComponent></atlas-invoicing-form-component>\\r\\n        <atlas-charter-form-component #CharterFormComponentComponent></atlas-charter-form-component>\\r\\n        <atlas-amendment-audit-form-component #AmendmentAuditFormComponentComponent></atlas-amendment-audit-form-component>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".status-tab-main::ng-deep .mat-form-field-underline {\\n  display: none; }\\n\\n.status-tab-main h6 {\\n  margin: 0; }\\n\\n.status-tab-main h4 {\\n  margin: 0; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { AllocationInfoFormComponentComponent } from '../form-components/allocation-info-form-component/allocation-info-form-component.component';\r\nimport { AmendmentAuditFormComponentComponent } from '../form-components/amendment-audit-form-component/amendment-audit-form-component.component';\r\nimport { CashAgainstInvoiceFormComponentComponent } from '../form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component';\r\nimport { CharterFormComponentComponent } from '../form-components/charter-form-component/charter-form-component.component';\r\nimport { DocumentStatusFormComponentComponent } from '../form-components/document-status-form-component/document-status-form-component.component';\r\nimport { InvoicingFormComponentComponent } from '../form-components/invoicing-form-component/invoicing-form-component.component';\r\n@Component({\r\n    selector: 'atlas-physical-contract-capture-form-status-tab',\r\n    templateUrl: './physical-contract-capture-form-status-tab.component.html',\r\n    styleUrls: ['./physical-contract-capture-form-status-tab.component.scss'],\r\n})\r\nexport class PhysicalContractCaptureFormStatusTabComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('AllocationInfoFormComponentComponent') allocationInfoComponent: AllocationInfoFormComponentComponent;\r\n    @ViewChild('AmendmentAuditFormComponentComponent') amendmentAuditComponent: AmendmentAuditFormComponentComponent;\r\n    @ViewChild('CashAgainstInvoiceFormComponentComponent') cashAgainstInvoiceComponent: CashAgainstInvoiceFormComponentComponent;\r\n    @ViewChild('CharterFormComponentComponent') charterComponent: CharterFormComponentComponent;\r\n    @ViewChild('DocumentStatusFormComponentComponent') documentStatusComponent: DocumentStatusFormComponentComponent;\r\n    @ViewChild('InvoicingFormComponentComponent') invoicingComponent: InvoicingFormComponentComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService, protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n    ngOnInit() {\r\n        this.formComponents.push(\r\n            this.charterComponent,\r\n            this.allocationInfoComponent,\r\n            this.amendmentAuditComponent,\r\n            this.documentStatusComponent,\r\n            this.invoicingComponent,\r\n            this.cashAgainstInvoiceComponent,\r\n        );\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean) {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.initForm(entity, isEdit);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            charterGroup: this.charterComponent.getFormGroup(),\r\n            allocationGroup: this.allocationInfoComponent.getFormGroup(),\r\n            amendmentGroup: this.amendmentAuditComponent.getFormGroup(),\r\n            cashGroup: this.cashAgainstInvoiceComponent.getFormGroup(),\r\n            documentGroup: this.documentStatusComponent.getFormGroup(),\r\n            invoiceGroup: this.invoicingComponent.getFormGroup(),\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    totalValuesCalculated(model: any) {\r\n        this.invoicingComponent.totalValuesCalculated(model);\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-sidenav-container>\\r\\n    <mat-sidenav #sidenav\\r\\n                 class=\\\"side-nav-screen\\\"\\r\\n                 position=\\\"end\\\"\\r\\n                 mode=\\\"over\\\"\\r\\n                 [(opened)]=\\\"sideNavOpened\\\"\\r\\n                 (openedChange)=\\\"onSplitTranchesSideNavOpenedChanged($event)\\\">\\r\\n        <div class=\\\"atr-sidenav-margin\\\">\\r\\n            <atlas-new-tranche-split-header #newTrancheSplitHeaderComponent\\r\\n                                            (addSplitOrTranchesEvent)=\\\"addSplitOrTranchesCalled($event)\\\"\\r\\n                                            (newTrancheShippingEvent)=\\\"newTrancheShippingCalled($event)\\\">\\r\\n            </atlas-new-tranche-split-header>\\r\\n            <atlas-new-tranche-split-ag-grid #newTrancheSplitAgGridComponent\\r\\n                                             [childSections]=\\\"childSectionsSearchResult\\\"\\r\\n                                             (childQuantityConsumedEvent)=\\\"childQuantityConsumedCalled($event)\\\"\\r\\n                                             (enableProceedButton)=\\\"enableProceedButtonCalled($event)\\\">\\r\\n            </atlas-new-tranche-split-ag-grid>\\r\\n            <atlas-new-tranche-split-footer #newTrancheSplitFooterComponent></atlas-new-tranche-split-footer>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <button mat-button\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onDiscardButtonClick()\\\">\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start end\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"onSideNavSaveButtonClick()\\\">\\r\\n                            SAVE\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-sidenav>\\r\\n\\r\\n    <mat-sidenav-content>\\r\\n        <div *ngIf=\\\"isLoading\\\">\\r\\n\\r\\n            <mat-card>\\r\\n                <h2>Loading</h2>\\r\\n                <div class=\\\"custom-line-title\\\"></div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"center center\\\"\\r\\n                     fxLayoutWrap\\r\\n                     fxLayoutGap=\\\"20px\\\">\\r\\n                    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <form [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\"\\r\\n              [formGroup]=\\\"captureFormGroup\\\">\\r\\n            <atlas-header-form-component (contractTypeSelected)=\\\"contractTypeSelected($event)\\\"\\r\\n                                         (contractDateSelected)=\\\"contractDateSelected($event)\\\"\\r\\n                                         #headerComponent></atlas-header-form-component>\\r\\n\\r\\n            <atlas-trade-management-menu-bar *ngIf=\\\"isShow\\\"\\r\\n                                             [currentSection]=\\\"sectionModel\\\"\\r\\n                                             [menuDisable]=\\\"isEdit || !editAllowed\\\"\\r\\n                                             [(index)]=\\\"selectedTab\\\"\\r\\n                                             #tradeManagementMenuBarComponent\\r\\n                                             (showDiscard)=\\\"onShowDiscard()\\\"\\r\\n                                             (showSave)=\\\"onShowSave()\\\"\\r\\n                                             [isIntercoCounterparty]=\\\"isValidIntercoCounterparty\\\"\\r\\n                                             [companiesForInterco]=\\\"counterpartyCompaniesForManaulInterco\\\"\\r\\n                                             (manualIntercoCreation)=\\\"onManualIntercoCreation($event)\\\">\\r\\n            </atlas-trade-management-menu-bar>\\r\\n            <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                                          [fabType]=\\\"fabType\\\"\\r\\n                                          [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                          [isParentLoaded]=\\\"!isLoading\\\"\\r\\n                                          [fabActionsDisabled]=\\\"saveInProgress\\\"\\r\\n                                          (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n            </atlas-floating-action-button>\\r\\n\\r\\n            <div class=\\\"main-container\\\">\\r\\n                <main>\\r\\n                    <div *ifAuthorized=\\\"'Trades.Physicals.AllocateDeallocate',company:company\\\">\\r\\n                        <mat-card *ngIf=\\\"isApprovalBannerDisplayed\\\"\\r\\n                                  class=\\\"trade-approval-success-banner information-banner-card\\\"\\r\\n                                  fxLayoutAlign=\\\"start center\\\">\\r\\n                            <div class=\\\"success-circle-icon\\\">\\r\\n                                <mat-icon>check</mat-icon>\\r\\n                            </div>\\r\\n                            <mat-card-header fxFlex=\\\"fill\\\">\\r\\n                                <mat-card-title>\\r\\n                                    Your contract has been approved\\r\\n                                </mat-card-title>\\r\\n                                <mat-card-subtitle\\r\\n                                                   *ifAuthorized=\\\"'Trades.Physicals.GenerateContractAdvice',company:company\\\">\\r\\n                                    Do you want to generate a contract advice ?\\r\\n                                </mat-card-subtitle>\\r\\n                            </mat-card-header>\\r\\n                            <div class=\\\"button-container\\\"\\r\\n                                 fxFlex=\\\"280px\\\"\\r\\n                                 fxLayoutGap=\\\"8px\\\"\\r\\n                                 *ifAuthorized=\\\"'Trades.Physicals.GenerateContractAdvice',company:company\\\">\\r\\n                                <button mat-button\\r\\n                                        type=\\\"button\\\"\\r\\n                                        (click)=\\\"onGenerateButtonClicked()\\\">generate</button>\\r\\n                                <button mat-button\\r\\n                                        type=\\\"button\\\"\\r\\n                                        (click)=\\\"onCloseApprovalBannerClicked()\\\">no thanks</button>\\r\\n                            </div>\\r\\n                        </mat-card>\\r\\n                    </div>\\r\\n\\r\\n                    <mat-tab-group dynamicHeight\\r\\n                                   (selectedTabChange)=\\\"getPosition($event)\\\"\\r\\n                                   [(selectedIndex)]=selectedTab\\r\\n                                   class=\\\"bright-tab\\\">\\r\\n                        <mat-tab label=\\\"MAIN\\\"\\r\\n                                 [disabled]=\\\"(isClosed && isEdit) || (isSectionCancelled  && isEdit)\\\">\\r\\n                            <atlas-physical-contract-capture-form-main-tab #mainTabComponent\\r\\n                                                                           (updateTrafficTabQuantity)=\\\"updateTrafficTabQuantity($event)\\\"\\r\\n                                                                           (commodityBlockOrWarnMessage)=\\\"commodityBlockOrWarnMessage($event)\\\"\\r\\n                                                                           (portWarningMessage)=\\\"portWarningMessage($event)\\\">\\r\\n                            </atlas-physical-contract-capture-form-main-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"COSTS\\\"\\r\\n                                 [disabled]=\\\"(isClosed && isEdit)\\\">\\r\\n                            <atlas-physical-contract-capture-form-costs-tab #costsTabComponent\\r\\n                                                                            (noOfZeroCostRow)=\\\"zeroCosRowWarning($event)\\\"\\r\\n                                                                            [commodityFormGroup]=\\\"captureFormGroup\\\"\\r\\n                                                                            (costInvoiced)=\\\"invoicePercentOfCost($event)\\\">\\r\\n                            </atlas-physical-contract-capture-form-costs-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"STATUS\\\"\\r\\n                                 [disabled]=\\\"(!isShow && !isEdit)|| isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\\\">\\r\\n                            <atlas-physical-contract-capture-form-status-tab #statusTabComponent>\\r\\n                            </atlas-physical-contract-capture-form-status-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"TRAFFIC\\\"\\r\\n                                 [disabled]=\\\"(!isShow && !isEdit) || isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\\\">\\r\\n                            <atlas-physical-contract-capture-form-traffic-tab #trafficTabComponent\\r\\n                                                                              (quantityValueUpdate)=\\\"quantityValueUpdate($event)\\\"\\r\\n                                                                              (blDateUpdate)=\\\"onBlDateUpdated($event)\\\"\\r\\n                                                                              (shipmentStatusUpdate)=\\\"onShipmentStatusUpdate($event)\\\">\\r\\n                            </atlas-physical-contract-capture-form-traffic-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"SECTION\\\"\\r\\n                                 [disabled]=\\\"(!isShow && !isEdit)  || isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\\\">\\r\\n                            <atlas-physical-contract-capture-form-section-tab #sectionTabComponent\\r\\n                                                                              (newSplitTrancheSideNavEvent)=\\\"sideNavChangeCalled($event)\\\"\\r\\n                                                                              [childSectionsSearchResult]=\\\"childSectionsSearchResult\\\">\\r\\n                            </atlas-physical-contract-capture-form-section-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"INVOICE MARKING\\\"\\r\\n                                 [disabled]=\\\"(!isShow && !isEdit) ||isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\\\">\\r\\n                            <atlas-physical-contract-capture-form-invoice-marking-tab #invoiceMarkingTabComponent\\r\\n                                                                                      (setCashMatchDate)=\\\"setCashMatchDate($event)\\\"\\r\\n                                                                                      (totalValuesCalculated)=\\\"onTotalValuesCalculated($event)\\\"\\r\\n                                                                                      (totalInvoicePercent)=\\\"onTotalInvoiceValue($event)\\\">\\r\\n                            </atlas-physical-contract-capture-form-invoice-marking-tab>\\r\\n                        </mat-tab>\\r\\n                    </mat-tab-group>\\r\\n                </main>\\r\\n\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-sidenav-content>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</mat-sidenav-container>\\r\\n\"","module.exports = \".example-card {\\n  max-width: 100%; }\\n\\n.no-margin {\\n  margin: 0; }\\n\\n.data-label {\\n  color: #928D8F; }\\n\\n.side-nav-screen {\\n  width: calc(100% - 64px);\\n  height: calc(100vh - 53px);\\n  top: 56px; }\\n\\n.atr-sidenav-margin {\\n  margin: 16px; }\\n\\n.isLoading {\\n  width: 0;\\n  height: 0; }\\n\\n.trade-approval-success-banner button {\\n  margin: 0; }\\n\\n.trade-approval-success-banner .mat-card-title {\\n  margin-bottom: 8px; }\\n\\n.trade-approval-success-banner .mat-card-subtitle {\\n  margin-bottom: 0px; }\\n\\n.mat-toolbar {\\n  margin-top: 13px; }\\n\"","import { Location } from '@angular/common';\r\nimport {\r\n    ChangeDetectorRef,\r\n    Component,\r\n    HostListener,\r\n    Inject,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Optional,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MAT_DATE_LOCALE, MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { forkJoin, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { conformToMask } from 'text-mask-core';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AllocateSection } from '../../../shared/entities/allocate-section.entity';\r\nimport { Allocation } from '../../../shared/entities/allocation.entity';\r\nimport {\r\n    IntercoField,\r\n    IntercoValidation,\r\n} from '../../../shared/entities/interco-validation.entity';\r\nimport { InvoiceMarkings } from '../../../shared/entities/invoice-markings.entity';\r\nimport { IsLocked } from '../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../shared/entities/lock-resource-information.entity';\r\nimport { SectionTraffic } from '../../../shared/entities/section-traffic.entity';\r\nimport { Section } from '../../../shared/entities/section.entity';\r\nimport { AllocateTradeOption } from '../../../shared/enums/allocate-trade-option-enum';\r\nimport { CharterStatus } from '../../../shared/enums/charter-status.enum';\r\nimport { ContractInvoiceType } from '../../../shared/enums/contract-invoice-type.enum';\r\nimport { ContractStatus } from '../../../shared/enums/contract-status.enum';\r\nimport { ContractTypes } from '../../../shared/enums/contract-type.enum';\r\nimport { CurrentTradeOption } from '../../../shared/enums/current-trade-option-enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { PricingMethods } from '../../../shared/enums/pricing-method.enum';\r\nimport { SectionTypes } from '../../../shared/enums/section-type.enum';\r\nimport { FormatDatePipe } from '../../../shared/pipes/format-date-pipe.pipe';\r\nimport { UserCompanyPrivilegeDto } from '../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { TrancheSplitCreationResult } from '../../../shared/services/trading/dtos/section';\r\nimport { BlockerWarningMessageComponent } from '../../dialog-boxes/blocker-warning-message/blocker-warning-message.component';\r\nimport { TradeDeallocationDialogComponent } from '../../dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component';\r\nimport { CancelTrade } from '../../entities/cancel-trade.entity';\r\nimport { PhysicalFixedPricedContract } from '../../entities/physical-fixed-priced-contract.entity';\r\nimport { SectionReference } from '../../entities/section-reference';\r\nimport { SectionTabIndex } from '../../entities/section-tab-index';\r\nimport { TradeImage } from '../../entities/trade-image.entity';\r\nimport { TradeActionsService } from '../../services/trade-actions.service';\r\nimport { TradeDataService } from '../../services/trade-data.service';\r\nimport { SaveAsFavouriteDialogComponent } from '../contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component';\r\nimport { TradeImageDialogComponent } from '../contract-physical-capture/trade-image-dialog/trade-image-dialog.component';\r\nimport { ChildSectionsSearchResult } from './../../../shared/dtos/chilesection-search-result';\r\nimport { InvoiceMarkingSearchResult } from './../../../shared/dtos/invoice-marking';\r\nimport { AccountingSetup } from './../../../shared/entities/accounting-setup.entity';\r\nimport { AtlasNumber } from './../../../shared/entities/atlas-number.entity';\r\nimport { Company } from './../../../shared/entities/company.entity';\r\nimport { FloatingActionButtonActions } from './../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { Freeze } from './../../../shared/entities/freeze.entity';\r\nimport { InvoiceLineRecord } from './../../../shared/entities/invoice-line-record.entity';\r\nimport { MasterData } from './../../../shared/entities/masterdata.entity';\r\nimport { Vessel } from './../../../shared/entities/vessel.entity';\r\nimport { CostDirections } from './../../../shared/enums/cost-direction.enum';\r\nimport { DiscountBasis } from './../../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from './../../../shared/enums/discount-type.enum';\r\nimport { InvoiceTypes } from './../../../shared/enums/invoice-type.enum';\r\nimport { InvoicingStatus } from './../../../shared/enums/invoicing-status.enum';\r\nimport { PostingStatus } from './../../../shared/enums/posting-status.enum';\r\nimport { QuantityToInvoiceType } from './../../../shared/enums/quantity-to-invoice.enum';\r\nimport { ShippingType } from './../../../shared/enums/shipping-type-enum';\r\nimport { TransactionDocumentTypes } from './../../../shared/enums/transaction-document-type.enum';\r\nimport { CustomNumberMask } from './../../../shared/numberMask';\r\nimport { ApiPaginatedCollection } from './../../../shared/services/common/models';\r\nimport { ChildSectionsToSplit } from './../../../shared/services/execution/dtos/child-sections-to-split';\r\nimport { InvoiceRecord } from './../../../shared/services/execution/dtos/invoice-record';\r\nimport { DocumentService } from './../../../shared/services/http-services/document.service';\r\nimport { FreezeService } from './../../../shared/services/http-services/freeze.service';\r\nimport { PreaccountingService } from './../../../shared/services/http-services/preaccounting.service';\r\nimport { SplitCreateAndAllocateService } from './../../../shared/services/split-create-and-allocate.service';\r\nimport { UtilService } from './../../../shared/services/util.service';\r\nimport { CancelTradeDialogComponent } from './cancel-trade-dialog/cancel-trade-dialog.component';\r\nimport { CostListDisplayView } from './costs-tab/costs-ag-grid-row';\r\nimport { PhysicalContractCaptureFormCostsTabComponent } from './costs-tab/physical-contract-capture-form-costs-tab.component';\r\nimport { HeaderFormComponent } from './form-components/header-form-component/header-form-component.component';\r\nimport { IntercoTradeDialogComponent } from './interco-trade-dialog/interco-trade-dialog.component';\r\nimport { PhysicalContractCaptureFormInvoiceMarkingTabComponent } from './invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component';\r\nimport { PhysicalContractCaptureFormMainTabComponent } from './main-tab/physical-contract-capture-form-main-tab.component';\r\nimport { NewTrancheSplitAgGridComponent } from './section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component';\r\nimport { NewTrancheSplitFooterComponent } from './section-tab/new-tranche-split-footer/new-tranche-split-footer.component';\r\nimport { NewTrancheSplitHeaderComponent } from './section-tab/new-tranche-split-header/new-tranche-split-header.component';\r\nimport { PhysicalContractCaptureFormSectionTabComponent } from './section-tab/physical-contract-capture-form-section-tab.component';\r\nimport { PhysicalContractCaptureFormStatusTabComponent } from './status-tab/physical-contract-capture-form-status-tab.component';\r\nimport { TradeManagementMenuBarComponent } from './trade-management-menu-bar/trade-management-menu-bar.component';\r\nimport { PhysicalContractCaptureFormTrafficTabComponent } from './traffic-tab/physical-contract-capture-form-traffic-tab.component';\r\n\r\nconst moment = _moment;\r\n@Component({\r\n    selector: 'atlas-trade-capture-page',\r\n    templateUrl: './trade-capture-page.component.html',\r\n    styleUrls: ['./trade-capture-page.component.scss'],\r\n    providers: [TradeDataService],\r\n})\r\nexport class TradeCapturePageComponent implements OnInit, OnDestroy {\r\n    @ViewChild('headerComponent') headerComponent: HeaderFormComponent;\r\n    @ViewChild('tradeManagementMenuBarComponent') tradeManagementMenuBarComponent: TradeManagementMenuBarComponent;\r\n    @ViewChild('invoiceMarkingTabComponent') invoiceMarkingTabComponent: PhysicalContractCaptureFormInvoiceMarkingTabComponent;\r\n    @ViewChild('mainTabComponent') mainTabComponent: PhysicalContractCaptureFormMainTabComponent;\r\n    @ViewChild('trafficTabComponent') trafficTabComponent: PhysicalContractCaptureFormTrafficTabComponent;\r\n    @ViewChild('statusTabComponent') statusTabComponent: PhysicalContractCaptureFormStatusTabComponent;\r\n    @ViewChild('sectionTabComponent') sectionTabComponent: PhysicalContractCaptureFormSectionTabComponent;\r\n    @ViewChild('newTrancheSplitHeaderComponent') newTrancheSplitHeaderComponent: NewTrancheSplitHeaderComponent;\r\n    @ViewChild('newTrancheSplitAgGridComponent') newTrancheSplitAgGridComponent: NewTrancheSplitAgGridComponent;\r\n    @ViewChild('newTrancheSplitFooterComponent') newTrancheSplitFooterComponent: NewTrancheSplitFooterComponent;\r\n    @ViewChild('costsTabComponent') costsTabComponent: PhysicalContractCaptureFormCostsTabComponent;\r\n    private contractId: number;\r\n    public contractLabel: string;\r\n    private formComponents: BaseFormComponent[] = [];\r\n    private model: PhysicalFixedPricedContract;\r\n    private tradeImageModel: PhysicalFixedPricedContract;\r\n    private sectionTrafficModel: SectionTraffic;\r\n    private invoiceMarking: InvoiceMarkings[] = [];\r\n    private invoiceStatusId: number;\r\n    public sectionId: number;\r\n    public selectedTab: number = 0;\r\n    public tabValue: string;\r\n    public isDiscard = true;\r\n    subscriptions: Subscription[] = [];\r\n    sideNavOpened: boolean;\r\n    masterdata: MasterData;\r\n    sideNavScreen: number;\r\n    sectionModel: Section;\r\n    tragetSectionModel: Section;\r\n    childSectionsSearchResult: ChildSectionsSearchResult[];\r\n    private allocateSectionSubscription: Subscription;\r\n    allocationModel: Allocation;\r\n    captureFormGroup: FormGroup;\r\n    saveInProgress = false;\r\n    isShow: boolean = false;\r\n    isEdit = false;\r\n    isTradeImage = false;\r\n    isLoading = true;\r\n    onValidationState = false;\r\n    offsetLeft: number;\r\n    originalQuantity: number;\r\n    trafficTabQuantity: number;\r\n    quantityTrafficSplit: number;\r\n    contractRefs = new Array();\r\n    isApprovalBannerDisplayed: boolean = false;\r\n    blockCommodityMessage: boolean = false;\r\n    warnCommodityMessage: boolean = false;\r\n    isChangedPortOfOrigin = false;\r\n    isChangedPortOfDestination = false;\r\n    portOfOriginColumnName = '';\r\n    portOfDestinationCoulmnName = '';\r\n    CommodityPart1Name = '';\r\n    CommodityPart2Name = '';\r\n    CommodityPart3Name = '';\r\n    CommodityPart4Name = '';\r\n    CommodityPart5Name = '';\r\n    dataVersionId: number;\r\n    editAllowed: boolean = true;\r\n    resourcesInformation: LockResourceInformation[] = new Array<\r\n        LockResourceInformation\r\n        >();\r\n    company: string;\r\n    isSave: boolean = false;\r\n    childFlag: number = 0;\r\n    childQuantity: number = 0;\r\n    copyCostInChild = false;\r\n    totalInvoiceValuePercent: number = 0;\r\n    isZeroCostRow: boolean;\r\n    isFirstApproval: boolean = false;\r\n    isMenuBarVisible: boolean = true;\r\n    isWeightConvertedForSplit: boolean = false;\r\n    isimageAllocate: boolean = false;\r\n    imageAllocateModel: PhysicalFixedPricedContract;\r\n    isEditOnAllocate: boolean = false;\r\n    isInterco: boolean = false;\r\n    isValidIntercoCounterparty: boolean = false;\r\n    childQuantityConsumed: number;\r\n    counterpartyCompaniesForManaulInterco: Company[];\r\n    tradeQuantity: number;\r\n    intercoValidation: IntercoValidation;\r\n    sectionToClose = new Array();\r\n    intercoCounterParty: string;\r\n    @Input() isClosed: boolean = undefined;\r\n    isSectionCancelled: boolean = false;\r\n    totalInvoicePercent: number;\r\n    quantityToBeCompared: number = 0;\r\n    costWithInvoice: CostListDisplayView;\r\n    tradeCanBeApproved: boolean = true;\r\n\r\n    // -- FAB Management\r\n    createTradeActionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'CreateTrade',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'Physicals',\r\n    };\r\n\r\n    editTradeActionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'Physicals',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: null,\r\n    };\r\n\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isSaveActionDisabled =\r\n        this.saveInProgress || (this.isShow && !this.isEdit && !this.isTradeImage);\r\n    isSplitSaveDisabled: boolean = false;\r\n\r\n    constructor(\r\n        private executionService: ExecutionService,\r\n        private cdr: ChangeDetectorRef,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected snackbarService: SnackbarService,\r\n        protected tradingService: TradingService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected router: Router,\r\n        protected tradeActionsService: TradeActionsService,\r\n        public dialog: MatDialog,\r\n        protected utilService: UtilService,\r\n        private location: Location,\r\n        protected lockService: LockService,\r\n        protected freezeService: FreezeService,\r\n        protected preaccountingService: PreaccountingService,\r\n        private formatDate: FormatDatePipe,\r\n        private titleService: TitleService,\r\n        private splitCreateAndAllocateService: SplitCreateAndAllocateService,\r\n        private tradeDataService: TradeDataService,\r\n        private documentService: DocumentService,\r\n        private authorizationService: AuthorizationService,\r\n        @Optional() @Inject(MAT_DATE_LOCALE) private dateLocale?: string,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        // trade actions subscriptions\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n\r\n        this.subscriptions.push(\r\n            this.tradeActionsService.deallocateSectionSubject.subscribe(() => {\r\n                this.onDeallocateTradeButtonClicked();\r\n            }),\r\n            this.tradeActionsService.approveSectionSubject.subscribe(() => {\r\n                this.onApproveSectionButtonClicked();\r\n            }),\r\n            this.tradeActionsService.unApproveSectionSubject.subscribe(() => {\r\n                this.onUnApproveSectionButtonClicked();\r\n            }),\r\n\r\n            this.tradeActionsService.tradeImageSubject.subscribe(() => {\r\n                this.onImageButtonClicked();\r\n            }),\r\n\r\n            this.tradeActionsService.tradeSaveAsFavouriteSubject.subscribe(() => {\r\n                this.onSaveAsFavoriteClicked();\r\n            }),\r\n            this.tradeActionsService.deleteSectionSubject.subscribe(() => {\r\n                this.onDeleteSectionButtonClicked();\r\n            }),\r\n            this.tradeActionsService.reOpenSectionSubject.subscribe(() => {\r\n                this.onReopenSectionButtonClicked();\r\n            }),\r\n            this.tradeActionsService.closeSectionSubject.subscribe(() => {\r\n                this.onCloseSectionButtonClicked(null, null, false, null);\r\n            }),\r\n            this.tradeActionsService.cancelSectionSubject.subscribe(() => {\r\n                this.onCancelTradeButtonClicked();\r\n            }),\r\n            this.tradeActionsService.reverseCancelSectionSubject.subscribe(() => {\r\n                this.onReverseCancelTradeButtonClicked();\r\n            }),\r\n        );\r\n\r\n        this.captureFormGroup = this.formBuilder.group({\r\n            headerGroup: this.headerComponent.getFormGroup(),\r\n            mainTabComponent: this.mainTabComponent.getFormGroup(),\r\n            invoiceMarkingTabComponent: this.invoiceMarkingTabComponent.getFormGroup(),\r\n            statusTabComponent: this.statusTabComponent.getFormGroup(),\r\n            sectionTabComponent: this.sectionTabComponent.getFormGroup(),\r\n            trafficTabComponent: this.trafficTabComponent.getFormGroup(),\r\n            newTrancheHeaderComponent: this.sectionTabComponent.getFormGroup(),\r\n            newTrancheAgGridComponent: this.sectionTabComponent.getFormGroup(),\r\n            newTrancheFooterComponent: this.sectionTabComponent.getFormGroup(),\r\n            costsTabComponent: this.costsTabComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.headerComponent,\r\n            this.mainTabComponent,\r\n            this.sectionTabComponent,\r\n            this.statusTabComponent,\r\n            this.trafficTabComponent,\r\n            this.invoiceMarkingTabComponent,\r\n            this.costsTabComponent,\r\n        );\r\n        this.cdr.detectChanges();\r\n\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId')\r\n            ? Number(this.route.snapshot.paramMap.get('dataVersionId'))\r\n            : null;\r\n        this.tradeDataService.setSectionData(this.sectionId, this.dataVersionId);\r\n        if (this.dataVersionId) {\r\n            this.editAllowed = false;\r\n            this.subscriptions.push(\r\n                forkJoin([\r\n                    this.freezeService.getFreezeByDataVersionId(this.dataVersionId).pipe(\r\n                        map((freeze: Freeze) => {\r\n                            return moment(freeze.freezeDate);\r\n                        }),\r\n                    ),\r\n                    this.preaccountingService.getAccountingSetupDetails().pipe(\r\n                        map((setup: AccountingSetup) => {\r\n                            return moment(setup.lastMonthClosed);\r\n                        }),\r\n                    ),\r\n                ]).subscribe((result: [_moment.Moment, _moment.Moment]) => {\r\n                    const freezeDate = result[0];\r\n                    const closedMonthDate = result[1];\r\n                    this.editAllowed =\r\n                        freezeDate.year() > closedMonthDate.year() ||\r\n                        (freezeDate.year() === closedMonthDate.year() &&\r\n                            freezeDate.month() > closedMonthDate.month());\r\n                }),\r\n            );\r\n        }\r\n        this.getTradeFavoriteDetails();\r\n\r\n        if (this.sectionId !== 0) {\r\n            this.viewEditTrade();\r\n        } else {\r\n            this.initFABActions(); // This method !! cannot !! be called anywhere; please cherche for comment A001\r\n            this.isLoading = false;\r\n            this.isMenuBarVisible = true;\r\n            this.titleService.setTitle('Trade Capture');\r\n        }\r\n    }\r\n\r\n    onShipmentStatusUpdate(shippingStatus: string) {\r\n        if (shippingStatus === 'Cancelled') {\r\n            this.statusTabComponent.charterComponent.updateOnlyShippingState();\r\n        }\r\n    }\r\n\r\n    getTradeFavoriteDetails() {\r\n        const favoriteId = Number(this.route.snapshot.queryParams.favoriteId);\r\n        if (favoriteId) {\r\n            this.subscriptions.push(\r\n                this.tradingService\r\n                    .getTradeFavoriteById(favoriteId)\r\n                    .subscribe((data: Section) => {\r\n                        const favouriteData = data;\r\n                        this.contractTypeSelected(favouriteData.contractType);\r\n                        this.formComponents.forEach((comp) => {\r\n                            comp.initForm(favouriteData, true);\r\n                        });\r\n                    }),\r\n            );\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.isSave === false) {\r\n            if (\r\n                this.captureFormGroup.dirty ||\r\n                this.isTradeImage ||\r\n                this.invoiceMarkingTabComponent.invoiceViewModeComponent\r\n                    .viewDocumentTypeCtrl.dirty\r\n            ) {\r\n                return window.confirm(\r\n                    'Leave an unsave form? \\nYour changes won\\'t be applied!',\r\n                );\r\n            }\r\n            this.costsTabComponent.gridApi.forEachNode((rowData) => {\r\n                if (rowData.data && rowData.data.isDirty) {\r\n                    return window.confirm(\r\n                        'Leave an unsave form? \\nYour changes won\\'t be applied!',\r\n                    );\r\n                }\r\n            });\r\n            this.trafficTabComponent.formComponents.forEach((comp) => {\r\n                if (comp.formGroup && comp.formGroup.dirty) {\r\n                    return window.confirm(\r\n                        'Leave an unsave form? \\nYour changes won\\'t be applied!',\r\n                    );\r\n                }\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification(\r\n        $event: any,\r\n    ) {\r\n        if (\r\n            this.captureFormGroup.dirty ||\r\n            this.isTradeImage ||\r\n            this.invoiceMarkingTabComponent.invoiceViewModeComponent\r\n                .viewDocumentTypeCtrl.dirty\r\n        ) {\r\n            $event.returnValue = true;\r\n        }\r\n        this.costsTabComponent.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data && rowData.data.isDirty) {\r\n                $event.returnValue = true;\r\n            }\r\n        });\r\n        this.trafficTabComponent.formComponents.forEach((comp) => {\r\n            if (comp.formGroup && comp.formGroup.dirty) {\r\n                $event.returnValue = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    viewEditTrade() {\r\n        if (this.route.snapshot.data.isEdit) {\r\n            this.isEdit = true;\r\n            this.isMenuBarVisible = true;\r\n            this.startLockRefresh();\r\n            this.tabValue = this.route.snapshot.paramMap.get('tabIndex');\r\n            if (this.tabValue) {\r\n                this.selectedTab = Number(this.tabValue);\r\n            }\r\n        } else if (this.route.snapshot.data['isImage'] === true) {\r\n            const allocateContract = JSON.parse(\r\n                this.route.snapshot.queryParams.allocateContract,\r\n            );\r\n            this.isimageAllocate = allocateContract;\r\n            this.isEdit = true;\r\n            this.isTradeImage = true;\r\n            this.stopLockRefresh();\r\n        }\r\n        if (this.isEdit && !this.isTradeImage) {\r\n            this.isMenuBarVisible = false;\r\n            this.subscriptions.push(\r\n                this.lockService\r\n                    .lockContract(this.sectionId, LockFunctionalContext.TradeEdit)\r\n                    .subscribe(\r\n                        (data) => {\r\n                            this.loadTradeData();\r\n                        },\r\n                        (err) => {\r\n                            const confirmDialog = this.dialog.open(\r\n                                ConfirmationDialogComponent,\r\n                                {\r\n                                    data: {\r\n                                        title: 'Lock',\r\n                                        text: err.error.detail,\r\n                                        okButton: 'Got it',\r\n                                    },\r\n                                },\r\n                            );\r\n                            this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                                new SectionTabIndex(this.sectionId, this.selectedTab),\r\n                            );\r\n                        },\r\n                    ),\r\n            );\r\n        } else {\r\n            this.isMenuBarVisible = false;\r\n            this.loadTradeData();\r\n        }\r\n    }\r\n\r\n    updateTrafficTabQuantity(quantity: number) {\r\n        this.tradeQuantity = quantity;\r\n        this.trafficTabComponent.adjustWeightComponent.updateQuantityValue(\r\n            quantity,\r\n        );\r\n        this.setContractAmountToCostTab(quantity);\r\n    }\r\n\r\n    setContractAmountToCostTab(quantity: number) {\r\n        this.costsTabComponent.zeroQuantity = true;\r\n        this.costsTabComponent.contractAmountOnSelect = quantity;\r\n        if (this.isEdit) {\r\n            if (this.sectionModel.costs) {\r\n                const costFilteredByAmount = this.sectionModel.costs.filter(\r\n                    (cost) =>\r\n                        cost.rateTypeId === 1 &&\r\n                        cost.invoicePercent === 0 &&\r\n                        !(cost.rate === 0),\r\n                );\r\n                if (\r\n                    Number(quantity) === 0 &&\r\n                    this.sectionModel.costs.length > 0 &&\r\n                    costFilteredByAmount.length > 0 &&\r\n                    this.isEdit &&\r\n                    this.costsTabComponent.zeroQuantity\r\n                ) {\r\n                    const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Update Cost',\r\n                            text: 'Do you want to update the estimates for Amount as well  ?',\r\n                            okButton: 'Yes',\r\n                            cancelButton: 'No',\r\n                        },\r\n                    });\r\n\r\n                    confirmDialog.afterClosed().subscribe((answer) => {\r\n                        if (answer) {\r\n                            costFilteredByAmount.forEach((cost) => {\r\n                                cost.rate = quantity;\r\n                            });\r\n                            this.costsTabComponent.gridApi.forEachNode((rowNode) => {\r\n                                if (\r\n                                    rowNode.data.rateTypeCode === 'Amount' &&\r\n                                    !(rowNode.data.invoicePercent === 100)\r\n                                ) {\r\n                                    const data = rowNode.data;\r\n                                    data.rate = quantity;\r\n                                }\r\n                            });\r\n                        } else {\r\n                            this.mainTabComponent.quantityComponent.quantityCtrl.patchValue(\r\n                                null,\r\n                            );\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.costsTabComponent.gridApi.refreshCells();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    commodityBlockOrWarnMessage(block: any) {\r\n        this.blockCommodityMessage = block.isCommodityBlockerChanged;\r\n        this.warnCommodityMessage = block.isCommodityWarningChanged;\r\n        this.CommodityPart1Name = block.isChangedCmyPart1;\r\n        this.CommodityPart2Name = block.isChangedCmyPart2;\r\n        this.CommodityPart3Name = block.isChangedCmyPart3;\r\n        this.CommodityPart4Name = block.isChangedCmyPart4;\r\n        this.CommodityPart5Name = block.isChangedCmyPart5;\r\n    }\r\n\r\n    portWarningMessage(portWarn: any) {\r\n        this.isChangedPortOfOrigin = portWarn.portOfOriginChanged;\r\n        this.isChangedPortOfDestination = portWarn.portOfDestinationChanged;\r\n        this.portOfOriginColumnName = portWarn.portOfOriginColumn;\r\n        this.portOfDestinationCoulmnName = portWarn.portOfDestinationColumn;\r\n    }\r\n\r\n    loadTradeData() {\r\n        this.tabValue = this.route.snapshot.paramMap.get('tabIndex');\r\n        if (this.tabValue) {\r\n            this.selectedTab = Number(this.tabValue);\r\n        }\r\n\r\n        const getSection = this.dataVersionId\r\n            ? this.tradingService.getSection(this.sectionId, 0, this.dataVersionId)\r\n            : this.tradingService.getSection(this.sectionId, 0);\r\n        this.subscriptions.push(\r\n            getSection.subscribe((data) => {\r\n                this.sectionModel = data;\r\n                if (this.sectionModel) {\r\n                this.isSectionCancelled = this.sectionModel.isCancelled;\r\n                }\r\n                if (!this.isTradeImage) {\r\n                    if (this.isSectionCancelled && this.route.snapshot.data.isEdit) {\r\n                        this.selectedTab = 1;\r\n                    }\r\n                    if (this.sectionModel.isClosed === true) {\r\n                        this.isClosed = true;\r\n                    }\r\n                } else {\r\n                    this.sectionModel.isCancelled = false;\r\n                    this.sectionModel.isClosed = false;\r\n                    this.sectionModel.blDate = null;\r\n                }\r\n                this.originalQuantity = data.quantity;\r\n                this.quantityTrafficSplit = data.quantity;\r\n                this.contractId = data.contractId;\r\n                this.contractLabel = data.contractLabel;\r\n                if (data.firstApprovalDateTime === null) {\r\n                    this.isFirstApproval = true;\r\n                }\r\n                if (\r\n                    this.sectionModel.allocatedTo &&\r\n                    this.sectionModel.allocatedTo.sectionId\r\n                ) {\r\n                    this.tradingService\r\n                        .getSection(\r\n                            this.sectionModel.allocatedTo.sectionId,\r\n                            PricingMethods.Priced,\r\n                            this.dataVersionId,\r\n                        )\r\n                        .subscribe((targetData) => {\r\n                            this.tragetSectionModel = targetData;\r\n                        });\r\n                }\r\n                // disabling condition for SuperTradeEdition for Cost Invoice\r\n                if (\r\n                    data.invoiceReference &&\r\n                    (data.invoiceTypeId === InvoiceTypes.Cost ||\r\n                        data.invoiceTypeId === InvoiceTypes.CostReceivable ||\r\n                        data.invoiceTypeId === InvoiceTypes.CostCreditNote ||\r\n                        data.invoiceTypeId === InvoiceTypes.CostDebitNote)\r\n                ) {\r\n                    data.invoiceReference = null;\r\n                }\r\n\r\n                this.tradingService\r\n                    .getChildSections(this.sectionId, this.dataVersionId)\r\n                    .subscribe((childSections: ChildSectionsSearchResult[]) => {\r\n                        this.childSectionsSearchResult = childSections;\r\n                        this.sectionModel.childSections = childSections.map(\r\n                            (childSectionResult) => {\r\n                                const childSection = new Section();\r\n                                childSection.setSectionFromChildSectionsSearchResult(\r\n                                    childSectionResult,\r\n                                    this.sectionModel.sectionId,\r\n                                );\r\n                                return childSection;\r\n                            },\r\n                        );\r\n\r\n                        if (this.isEdit) {\r\n                            this.startLockRefresh();\r\n                        }\r\n                        if (this.isTradeImage) {\r\n                            this.stopLockRefresh();\r\n                            this.titleService.setTitle(this.contractLabel + ' - Imaging');\r\n                        } else if (this.isEdit && !this.isTradeImage) {\r\n                            this.stopLockRefresh();\r\n                            this.titleService.setTitle(this.contractLabel + ' - Edit Trade');\r\n                        } else {\r\n                            this.titleService.setTitle(this.contractLabel + ' - Trade View');\r\n                        }\r\n                        if (this.route.snapshot.queryParams.showTradeImage) {\r\n                            this.openTradeImageDialog();\r\n                        }\r\n                        if (this.route.snapshot.queryParams.showSaveTradeAsFavourite) {\r\n                            this.openSaveAsFavouriteDialog();\r\n                        }\r\n                        this.formComponents.forEach((comp) => {\r\n                            comp.initForm(data, this.isEdit);\r\n                        });\r\n                        this.isShow = true;\r\n\r\n                        const selectedCounterparty = this.mainTabComponent\r\n                            .counterpartyComponent.selectedCounterparty;\r\n                        if (selectedCounterparty) {\r\n                            this.companyManager\r\n                                .getConfiguration(selectedCounterparty.counterpartyID)\r\n                                .subscribe(data => {\r\n                                    if (data.length > 0 && data[0].isCounterpartyGroupAccount) {\r\n                                        this.isValidIntercoCounterparty = true;\r\n                                        this.counterpartyCompaniesForManaulInterco = data;\r\n                                    }\r\n                                });\r\n                        }\r\n                        this.initFABActions(); // This method !! cannot !! be called anywhere; please cherche for comment A001\r\n                        this.isLoading = false;\r\n                    });\r\n\r\n                this.contractTypeSelected(this.sectionModel.contractType);\r\n                this.checkIntercoTrade(this.sectionModel);\r\n                this.checkIfTradeCanBeApproved(this.sectionModel);\r\n                this.statusTabComponent.invoicingComponent.setContractInvoiceType(\r\n                    this.sectionModel.contractInvoiceTypeId,\r\n                );\r\n            }),\r\n        );\r\n    }\r\n\r\n    checkIfTradeCanBeApproved(sectionModel: Section) {\r\n        const currentCompany = this.companyManager.getCurrentCompany();\r\n        this.tradeCanBeApproved = (currentCompany.defaultDepartmentId === sectionModel.departmentId) ?\r\n            false : true;\r\n    }\r\n\r\n    contractTypeSelected(contractType: ContractTypes) {\r\n        this.mainTabComponent.contractTypeSelected(contractType);\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.save();\r\n    }\r\n\r\n    save() {\r\n        this.isSave = true;\r\n        this.onValidationState = true;\r\n        this.utilService.updateFormGroupValidity(this.captureFormGroup);\r\n\r\n        if (this.captureFormGroup.pending) {\r\n            this.captureFormGroup.statusChanges.subscribe(() => {\r\n                if (this.onValidationState) {\r\n                    this.onValidationState = false;\r\n                    this.handleSave();\r\n                }\r\n            });\r\n        } else {\r\n            this.onValidationState = false;\r\n            this.handleSave();\r\n        }\r\n    }\r\n\r\n    handleSave() {\r\n        if (!this.captureFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (!this.costsTabComponent.validate()) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Cost is invalid. Please review the cost tab to resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n\r\n        if (this.isEdit && !this.isTradeImage) {\r\n            let isAnyCurrentToggleSelected: boolean = false;\r\n            let isAnyAllocationCardCheckFailed: boolean = false;\r\n\r\n            const local = this.dateLocale || moment.locale();\r\n            const blDate = this.trafficTabComponent.blInfoComponent.blDateCtrl.value ? moment(this.trafficTabComponent.blInfoComponent.blDateCtrl.value, 'YYYY-MM-DD').toDate() : null;\r\n            const bldate = (blDate) ? moment.utc(moment.parseZone(blDate).format('YYYY-MM-DD')).locale(local).toDate() : null;\r\n            this.trafficTabComponent.blInfoComponent.blDateCtrl.setValue(bldate);\r\n\r\n            isAnyCurrentToggleSelected = this.trafficTabComponent.currentTradeComponent.checkAnyToggleSelected();\r\n            isAnyAllocationCardCheckFailed = this.trafficTabComponent.allocationComponent.allocationSelectionChecked();\r\n\r\n            if (isAnyCurrentToggleSelected && isAnyAllocationCardCheckFailed) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Please select an option for the allocated trade.',\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.saveInProgress = true;\r\n        this.getPhysicalContractInfo();\r\n        this.checkIfIntercoCounterpartyChanged(this.model);\r\n    }\r\n\r\n    saveTrade() {\r\n        const currentCompany = this.companyManager.getCurrentCompany();\r\n        if (this.isEdit && (this.model.departmentId === currentCompany.defaultDepartmentId)) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Please change the department.',\r\n            );\r\n            return;\r\n        }\r\n        if (this.model.allocatedTo && !this.isTradeImage) {\r\n            if (\r\n                (this.warnCommodityMessage ||\r\n                    this.isChangedPortOfDestination ||\r\n                    this.isChangedPortOfOrigin ||\r\n                    this.blockCommodityMessage) &&\r\n                this.model.allocatedTo.sectionId !== this.sectionId\r\n            ) {\r\n                const confirmDialog = this.dialog.open(BlockerWarningMessageComponent, {\r\n                    data: {\r\n                        messageBlocker: this.blockCommodityMessage\r\n                            ? ' The field ' +\r\n                            this.CommodityPart1Name +\r\n                            ' ' +\r\n                            this.CommodityPart2Name +\r\n                            ' ' +\r\n                            ' you are changing has to be same within the allocation, do you want to update allocated trade ? '\r\n                            : null,\r\n                        messageWarning:\r\n                            this.isChangedPortOfOrigin ||\r\n                                this.isChangedPortOfDestination ||\r\n                                this.warnCommodityMessage\r\n                                ? ' The following field(s) ' +\r\n                                this.portOfOriginColumnName +\r\n                                ' ' +\r\n                                this.portOfDestinationCoulmnName +\r\n                                ' ' +\r\n                                this.CommodityPart3Name +\r\n                                ' ' +\r\n                                this.CommodityPart4Name +\r\n                                ' ' +\r\n                                this.CommodityPart5Name +\r\n                                ' ' +\r\n                                ' will be different between your two allocated contracts. Do you also want to update the allocated contract?'\r\n                                : null,\r\n                        dyanamicMessageWarning:\r\n                            this.isChangedPortOfOrigin ||\r\n                                this.isChangedPortOfDestination ||\r\n                                this.warnCommodityMessage\r\n                                ? ' The field ' +\r\n                                this.portOfOriginColumnName +\r\n                                ' ' +\r\n                                this.portOfDestinationCoulmnName +\r\n                                ' ' +\r\n                                this.CommodityPart3Name +\r\n                                ' ' +\r\n                                this.CommodityPart4Name +\r\n                                ' ' +\r\n                                this.CommodityPart5Name +\r\n                                ' ' +\r\n                                ' are warning and would not be updated'\r\n                                : null,\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog\r\n                    .afterClosed()\r\n                    .subscribe((answer) => {\r\n                        if (!answer) {\r\n                            return;\r\n                        }\r\n                        const blockerMessageAnswer = answer.blockerMessageAnswer;\r\n                        const warningMessageAnswer = answer.warningMessageAnswer;\r\n\r\n                        if (warningMessageAnswer === 'discard') {\r\n                            this.saveInProgress = false;\r\n                            this.isShow = false;\r\n                            this.warnCommodityMessage = false;\r\n                            this.isChangedPortOfDestination = false;\r\n                            this.isChangedPortOfOrigin = false;\r\n                            this.blockCommodityMessage = false;\r\n                            return;\r\n                            //  Go to trade edit page  //\r\n                        } else if (\r\n                            (blockerMessageAnswer === 'no' &&\r\n                                warningMessageAnswer === 'ok') ||\r\n                            (blockerMessageAnswer === 'no' && warningMessageAnswer === null)\r\n                        ) {\r\n                            this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                                new SectionTabIndex(this.sectionId, this.selectedTab),\r\n                            );\r\n                            //  Go to trade view page  //\r\n                        } else if (warningMessageAnswer === 'yes') {\r\n                            this.model.isPortOfDestinationChanged = this.isChangedPortOfDestination;\r\n                            this.model.isPortOfOriginChanged = this.isChangedPortOfOrigin;\r\n\r\n                            this.model.isCommodityChanged =\r\n                                blockerMessageAnswer === 'yes'\r\n                                    ? this.blockCommodityMessage\r\n                                    : this.warnCommodityMessage;\r\n\r\n                            this.callServiceToSave();\r\n                        } else if (\r\n                            blockerMessageAnswer === 'yes' &&\r\n                            (warningMessageAnswer === null || warningMessageAnswer === 'no')\r\n                        ) {\r\n                            this.model.isCommodityChanged = this.blockCommodityMessage;\r\n                            //  update Blocker in both contracts  //\r\n                            this.callServiceToSave();\r\n                        } else if (\r\n                            warningMessageAnswer === 'no' &&\r\n                            blockerMessageAnswer === null\r\n                        ) {\r\n                            //  one contract update//\r\n                            this.callServiceToSave();\r\n                        }\r\n                    });\r\n                this.subscriptions.push(confirmationSubscription);\r\n            } else {\r\n                this.callServiceToSave();\r\n            }\r\n        } else if (this.isTradeImage && this.isimageAllocate) {\r\n            this.imageAllocateModel = this.model;\r\n            if (\r\n                this.warnCommodityMessage ||\r\n                this.isChangedPortOfDestination ||\r\n                this.isChangedPortOfOrigin ||\r\n                this.blockCommodityMessage\r\n            ) {\r\n                const confirmDialog = this.dialog.open(BlockerWarningMessageComponent, {\r\n                    data: {\r\n                        messageBlocker: this.blockCommodityMessage\r\n                            ? ' The field ' +\r\n                            this.CommodityPart1Name +\r\n                            ' ' +\r\n                            this.CommodityPart2Name +\r\n                            ' ' +\r\n                            ' you are changing has to be same within the allocation, do you want to update allocated trade ? '\r\n                            : null,\r\n                        messageWarning:\r\n                            this.isChangedPortOfOrigin ||\r\n                                this.isChangedPortOfDestination ||\r\n                                this.warnCommodityMessage\r\n                                ? ' The following field(s) ' +\r\n                                this.portOfOriginColumnName +\r\n                                ' ' +\r\n                                this.portOfDestinationCoulmnName +\r\n                                ' ' +\r\n                                this.CommodityPart3Name +\r\n                                ' ' +\r\n                                this.CommodityPart4Name +\r\n                                ' ' +\r\n                                this.CommodityPart5Name +\r\n                                ' ' +\r\n                                ' will be different between your two allocated contracts. Do you also want to update the allocated contract?'\r\n                                : null,\r\n                        dyanamicMessageWarning:\r\n                            this.isChangedPortOfOrigin ||\r\n                                this.isChangedPortOfDestination ||\r\n                                this.warnCommodityMessage\r\n                                ? ' The field ' +\r\n                                this.portOfOriginColumnName +\r\n                                ' ' +\r\n                                this.portOfDestinationCoulmnName +\r\n                                ' ' +\r\n                                this.CommodityPart3Name +\r\n                                ' ' +\r\n                                this.CommodityPart4Name +\r\n                                ' ' +\r\n                                this.CommodityPart5Name +\r\n                                ' ' +\r\n                                ' are warning and would not be updated'\r\n                                : null,\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog\r\n                    .afterClosed()\r\n                    .subscribe((answer) => {\r\n                        if (!answer) {\r\n                            return;\r\n                        }\r\n                        const blockerMessageAnswer = answer.blockerMessageAnswer;\r\n                        const warningMessageAnswer = answer.warningMessageAnswer;\r\n                        this.imageAllocateModel.sectionId = this.sectionId;\r\n                        if (warningMessageAnswer === 'discard') {\r\n                            this.saveInProgress = false;\r\n                            this.isShow = false;\r\n                            this.warnCommodityMessage = false;\r\n                            this.isChangedPortOfDestination = false;\r\n                            this.isChangedPortOfOrigin = false;\r\n                            this.blockCommodityMessage = false;\r\n                            return;\r\n                            //  Go to trade edit page  //\r\n                        } else if (\r\n                            (blockerMessageAnswer === 'no' &&\r\n                                warningMessageAnswer === 'ok') ||\r\n                            (blockerMessageAnswer === 'no' && warningMessageAnswer === null)\r\n                        ) {\r\n                            this.model.commodityId = this.sectionModel.commodityId;\r\n                            this.createImageTrade();\r\n                        } else if (warningMessageAnswer === 'yes') {\r\n                            this.isEditOnAllocate = true;\r\n                            this.model.isPortOfDestinationChanged = this.isChangedPortOfDestination;\r\n                            this.model.isPortOfOriginChanged = this.isChangedPortOfOrigin;\r\n                            this.imageAllocateModel.isPortOfDestinationChanged = this.isChangedPortOfDestination;\r\n                            this.imageAllocateModel.isPortOfOriginChanged = this.isChangedPortOfOrigin;\r\n                            this.model.isCommodityChanged =\r\n                                blockerMessageAnswer === 'yes'\r\n                                    ? this.blockCommodityMessage\r\n                                    : this.warnCommodityMessage;\r\n                            this.callServiceToSave();\r\n                        } else if (\r\n                            blockerMessageAnswer === 'yes' &&\r\n                            (warningMessageAnswer === null || warningMessageAnswer === 'no')\r\n                        ) {\r\n                            this.isEditOnAllocate = true;\r\n                            this.model.isCommodityChanged = this.blockCommodityMessage;\r\n                            this.imageAllocateModel.isCommodityChanged = this.blockCommodityMessage;\r\n\r\n                            //  update Blocker in both contracts  //\r\n                            this.callServiceToSave();\r\n                        } else if (\r\n                            warningMessageAnswer === 'no' &&\r\n                            blockerMessageAnswer === null\r\n                        ) {\r\n                            //  one contract update//\r\n                            this.callServiceToSave();\r\n                        }\r\n                    });\r\n                this.subscriptions.push(confirmationSubscription);\r\n            } else {\r\n                this.callServiceToSave();\r\n            }\r\n        } else {\r\n            this.callServiceToSave();\r\n        }\r\n    }\r\n\r\n    callServiceToSave() {\r\n        // call the trading service with correct DTO\r\n\r\n        if (this.sectionId && !this.isTradeImage) {\r\n            if (Number(this.model.quantity) === 0) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        text: 'Quantity is 0. Do you want to save?',\r\n                        okButton: 'SAVE ANYWAY',\r\n                        cancelButton: 'CANCEL',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog\r\n                    .afterClosed()\r\n                    .subscribe((answer) => {\r\n                        if (answer) {\r\n                            this.updatePhysicalContract();\r\n                        } else {\r\n                            this.saveInProgress = false;\r\n                        }\r\n                    });\r\n            } else {\r\n                this.updatePhysicalContract();\r\n            }\r\n        } else if (this.isTradeImage) {\r\n            this.model.numberOfContracts = Number(\r\n                this.route.snapshot.queryParams.numberOfContract,\r\n            );\r\n            const childSection = this.sectionModel.childSections.length;\r\n            const splitAndTranche = JSON.parse(\r\n                this.route.snapshot.queryParams.splitAndTranche,\r\n            );\r\n            this.model = this.checkFieldsToBeCopied(this.model);\r\n            if (splitAndTranche && childSection > 0) {\r\n                const quantity = Number(this.model.quantity) + this.childQuantity;\r\n                this.model.quantity = quantity.toString();\r\n                this.model.childSections = this.overwriteSplitAndTranche(\r\n                    this.model.childSections,\r\n                );\r\n            }\r\n            if (this.model.costs.length > 0) {\r\n                this.createImageTrade();\r\n            } else {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Trade without a cost',\r\n                        text: 'No Costs have been added to this contract.',\r\n                        okButton: 'SAVE ANYWAY',\r\n                        cancelButton: 'ADD COSTS',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog\r\n                    .afterClosed()\r\n                    .subscribe((answer) => {\r\n                        if (answer) {\r\n                            this.createImageTrade();\r\n                        } else {\r\n                            if (Number(this.model.quantity) > 0) {\r\n                                this.saveInProgress = false;\r\n                                this.selectedTab = 1;\r\n                            } else {\r\n                                this.snackbarService.throwErrorSnackBar(\r\n                                    'You Cannot Add costs to a contract with Zero Quantity',\r\n                                );\r\n                                this.saveInProgress = false;\r\n                            }\r\n                        }\r\n                    });\r\n                this.subscriptions.push(confirmationSubscription);\r\n            }\r\n        } else {\r\n            if (this.model.costs.length > 0) {\r\n                const selectedCounterparty = this.mainTabComponent.counterpartyComponent\r\n                    .selectedCounterparty;\r\n                if (selectedCounterparty) {\r\n                    this.companyManager\r\n                        .getConfiguration(selectedCounterparty.counterpartyID)\r\n                        .subscribe((data) => {\r\n                            if (data.length > 0 && data[0].isCounterpartyGroupAccount) {\r\n                                this.intercoModel(data);\r\n                            } else {\r\n                                this.createTrade();\r\n                            }\r\n                        });\r\n                } else {\r\n                    this.createTrade();\r\n                }\r\n            } else {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Trade without a cost',\r\n                        text: 'No Costs have been added to this contract.',\r\n                        okButton: 'SAVE ANYWAY',\r\n                        cancelButton: 'ADD COSTS',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog\r\n                    .afterClosed()\r\n                    .subscribe((answer) => {\r\n                        if (answer) {\r\n                            const selectedCounterparty = this.mainTabComponent\r\n                                .counterpartyComponent.selectedCounterparty;\r\n                            if (selectedCounterparty) {\r\n                                this.companyManager\r\n                                    .getConfiguration(selectedCounterparty.counterpartyID)\r\n                                    .subscribe((data) => {\r\n                                        if (data.length > 0 && data[0].isCounterpartyGroupAccount) {\r\n                                            this.intercoModel(data);\r\n                                        } else {\r\n                                            this.createTrade();\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                this.createTrade();\r\n                            }\r\n                        } else {\r\n                            if (Number(this.model.quantity) > 0) {\r\n                                this.saveInProgress = false;\r\n                                this.selectedTab = 1;\r\n                            } else {\r\n                                this.snackbarService.throwErrorSnackBar(\r\n                                    'You Cannot Add costs to a contract with Zero Quantity',\r\n                                );\r\n                                this.saveInProgress = false;\r\n                            }\r\n                        }\r\n                    });\r\n                this.subscriptions.push(confirmationSubscription);\r\n            }\r\n        }\r\n    }\r\n\r\n    createImageTrade() {\r\n        const isAllocateContract = JSON.parse(\r\n            this.route.snapshot.queryParams.allocateContract,\r\n        );\r\n        if (isAllocateContract && this.isEditOnAllocate) {\r\n            this.tradingService\r\n                .updatePhysicalContract(this.sectionId, this.imageAllocateModel)\r\n                .subscribe(() => {\r\n                    this.subscriptions.push(\r\n                        this.tradingService\r\n                            .createPhysicalFixedPricedContract(this.model)\r\n                            .subscribe(\r\n                                (data: string[]) => {\r\n                                    if (!isAllocateContract) {\r\n                                        for (const val of data) {\r\n                                            this.contractRefs.push(val['contractLabel']);\r\n                                        }\r\n                                        const contracts = this.contractRefs.join(', ');\r\n                                        this.snackbarService.informationAndCopySnackBar(\r\n                                            'The following trades were imaged: ' + contracts,\r\n                                            contracts,\r\n                                        );\r\n                                        this.tradeActionsService.displaySectionSubject.next(\r\n                                            data[0]['sectionId'],\r\n                                        );\r\n                                    } else {\r\n                                        this.tradingService\r\n                                            .getChildSections(\r\n                                                data[0]['sectionId'],\r\n                                                this.dataVersionId,\r\n                                            )\r\n                                            .subscribe(\r\n                                                (childSections: ChildSectionsSearchResult[]) => {\r\n                                                    this.allocateTrade(data, childSections);\r\n                                                },\r\n                                            );\r\n                                    }\r\n                                },\r\n                                (err) => {\r\n                                    this.saveInProgress = false;\r\n                                    throw err;\r\n                                },\r\n                            ),\r\n                    );\r\n                });\r\n        } else {\r\n            this.subscriptions.push(\r\n                this.tradingService\r\n                    .createPhysicalFixedPricedContract(this.model)\r\n                    .subscribe(\r\n                        (data: string[]) => {\r\n                            if (!isAllocateContract) {\r\n                                for (const val of data) {\r\n                                    this.contractRefs.push(val['contractLabel']);\r\n                                }\r\n                                const contracts = this.contractRefs.join(', ');\r\n                                this.snackbarService.informationAndCopySnackBar(\r\n                                    'The following trades were imaged: ' + contracts,\r\n                                    contracts,\r\n                                );\r\n                                this.tradeActionsService.displaySectionSubject.next(\r\n                                    data[0]['sectionId'],\r\n                                );\r\n                            } else {\r\n                                this.tradingService\r\n                                    .getChildSections(data[0]['sectionId'], this.dataVersionId)\r\n                                    .subscribe((childSections: ChildSectionsSearchResult[]) => {\r\n                                        this.allocateTrade(data, childSections);\r\n                                    });\r\n                            }\r\n                        },\r\n                        (err) => {\r\n                            this.saveInProgress = false;\r\n                            throw err;\r\n                        },\r\n                    ),\r\n            );\r\n        }\r\n    }\r\n\r\n    assignCharterToAllocatedContract(sectionId: number, charterId: number) {\r\n        const assignCharterPromise = [];\r\n        this.executionService\r\n            .GetSectionTrafficDetails(sectionId, this.dataVersionId)\r\n            .subscribe((data: SectionTraffic) => {\r\n                if (data) {\r\n                    const sectionTrafficList: SectionTraffic[] = [];\r\n                    sectionTrafficList.push(data);\r\n                    if (!this.dataVersionId) {\r\n                        assignCharterPromise.push(\r\n                            this.executionService\r\n                                .assignSectionsToCharter(charterId, sectionTrafficList)\r\n                                .toPromise(),\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    assignCharter(allocationDetails: AllocateSection[]) {\r\n        allocationDetails.forEach((allocationDetail) => {\r\n            this.tradingService\r\n                .getSection(allocationDetail.sectionId, 0, this.dataVersionId)\r\n                .subscribe((data: Section) => {\r\n                    if (data && data.charterId) {\r\n                        this.assignCharterToAllocatedContract(\r\n                            allocationDetail.allocatedSectionId,\r\n                            data.charterId,\r\n                        );\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    allocateTrade(\r\n        allocatedTradeData: string[],\r\n        allocationChildSections: ChildSectionsSearchResult[],\r\n    ) {\r\n        const allocationDetails = this.getAllocationDetails(\r\n            allocatedTradeData,\r\n            allocationChildSections,\r\n        ) as AllocateSection[];\r\n        const contractLabel = this.sectionModel.contractLabel.split('.')[0];\r\n        this.allocateSectionSubscription = this.executionService\r\n            .allocateImageSections(allocationDetails)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.assignCharter(allocationDetails);\r\n                    const message =\r\n                        'The trade' +\r\n                        ' ' +\r\n                        allocationDetails[0].allocatedSectionReference +\r\n                        ' ' +\r\n                        'has been imaged and  allocated to ' +\r\n                        ' ' +\r\n                        contractLabel +\r\n                        ' ' +\r\n                        ' with the number ' +\r\n                        ' ' +\r\n                        data;\r\n                    this.snackbarService.informationAndCopySnackBar(message, message);\r\n\r\n                    if (this.dataVersionId) {\r\n                        this.tradeActionsService.displaySectionInSnapshotSubject.next(\r\n                            new SectionReference(\r\n                                allocationDetails[0].sectionId,\r\n                                this.dataVersionId,\r\n                            ),\r\n                        );\r\n                    } else {\r\n                        this.tradeActionsService.displaySectionSubject.next(\r\n                            allocationDetails[0].allocatedSectionId,\r\n                        );\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.saveInProgress = false;\r\n                    throw err;\r\n                },\r\n            );\r\n    }\r\n\r\n    getAllocationDetails(\r\n        allocatedTradeData: string[],\r\n        allocationChildSections: ChildSectionsSearchResult[],\r\n    ) {\r\n        const allocateSectionModel: AllocateSection[] = [];\r\n        const allocationDetails = new AllocateSection();\r\n        allocationDetails.sectionId = this.sectionId;\r\n        allocationDetails.allocatedSectionId = allocatedTradeData[0]['sectionId'];\r\n        allocationDetails.allocatedSectionReference =\r\n            allocatedTradeData[0]['contractLabel'];\r\n        allocationDetails.dataVersionId = this.dataVersionId;\r\n        allocationDetails.quantity = Number(\r\n            this.model.quantity.toString().replace(/,/g, ''),\r\n        );\r\n        allocationDetails.shippingType = ShippingType.PurchaseToSale;\r\n        allocateSectionModel.push(allocationDetails);\r\n\r\n        // Child Allocation Details\r\n        const splitAndTranche = JSON.parse(\r\n            this.route.snapshot.queryParams.splitAndTranche,\r\n        );\r\n        if (splitAndTranche && allocationChildSections.length > 0) {\r\n            for (let i = 0; i < allocationChildSections.length; i++) {\r\n                const allocateSectionElement: AllocateSection = new AllocateSection();\r\n                allocateSectionElement.sectionId = this.sectionModel.childSections[\r\n                    i\r\n                ].sectionId;\r\n                allocateSectionElement.allocatedSectionId =\r\n                    allocationChildSections[i].sectionId;\r\n                allocateSectionElement.quantity = this.sectionModel.childSections[\r\n                    i\r\n                ].quantity;\r\n                allocateSectionElement.shippingType = ShippingType.PurchaseToSale;\r\n                allocateSectionElement.dataVersionId = this.dataVersionId;\r\n                allocateSectionModel.push(allocateSectionElement);\r\n            }\r\n        }\r\n        return allocateSectionModel;\r\n    }\r\n\r\n    checkFieldsToBeCopied(\r\n        model: PhysicalFixedPricedContract,\r\n    ): PhysicalFixedPricedContract {\r\n        model.status = ContractStatus.Unapproved;\r\n        model.dataVersionId = this.dataVersionId;\r\n        model.blDate = null;\r\n        model.createdBy = null;\r\n        model.creationDate = null;\r\n        model.modifiedByUserId = null;\r\n        model.lastModifiedBy = null;\r\n        model.lastModifiedDate = null;\r\n        model.allocatedTo = null;\r\n        model.allocateTradeOptionId = 0;\r\n        model.invoiceStatus = null;\r\n        model.firstApprovalTime = null;\r\n        if (this.sectionModel.childSections.length > 0) {\r\n            this.childQuantity = 0;\r\n            for (const section of this.sectionModel.childSections) {\r\n                this.childQuantity += Number(section.quantity);\r\n            }\r\n        }\r\n\r\n        return model;\r\n    }\r\n\r\n    createTrade() {\r\n        this.model.dataVersionId = this.dataVersionId;\r\n        if (this.model.isInterco) {\r\n            this.model.intercoContractType =\r\n                this.model.type === ContractTypes.Purchase\r\n                    ? ContractTypes.Sale\r\n                    : ContractTypes.Purchase;\r\n            this.model.intercoBuyerCode = this.model.sellerCode;\r\n            this.model.intercoSellerCode = this.model.buyerCode;\r\n            const code =\r\n                this.model.type === ContractTypes.Purchase\r\n                    ? this.model.sellerCode\r\n                    : this.model.buyerCode;\r\n            this.model.intercoCosts = this.model.costs.filter(\r\n                (cost) => cost.supplierCode === code,\r\n            );\r\n            if (this.model.intercoCosts) {\r\n                this.model.intercoCosts.forEach((cost) => {\r\n                    cost.costDirectionId = cost.costDirectionId === 1 ? 2 : 1;\r\n                });\r\n            }\r\n        }\r\n\r\n        this.subscriptions.push(\r\n            this.tradingService\r\n                .createPhysicalFixedPricedContract(this.model)\r\n                .subscribe(\r\n                    (data) => {\r\n                        let messageText =\r\n                            'Contract created with reference: ' + data[0]['contractLabel'];\r\n                        let copyText = data[0]['contractLabel'];\r\n                        if (this.isInterco) {\r\n                            messageText =\r\n                                messageText +\r\n                                ', Interco Contract created with reference: ' +\r\n                                data[1]['contractLabel'];\r\n                            copyText = copyText + data[1]['contractLabel'];\r\n                        }\r\n                        this.snackbarService.informationAndCopySnackBar(\r\n                            messageText,\r\n                            copyText,\r\n                        );\r\n\r\n                        if (this.dataVersionId) {\r\n                            this.tradeActionsService.displaySectionInSnapshotSubject.next({\r\n                                sectionId: data[0]['sectionId'],\r\n                                dataVersionId: this.dataVersionId,\r\n                            });\r\n                        } else {\r\n                            this.tradeActionsService.displaySectionSubject.next(\r\n                                data[0]['sectionId'],\r\n                            );\r\n                        }\r\n                    },\r\n                    (err) => {\r\n                        this.saveInProgress = false;\r\n                        throw err;\r\n                    },\r\n                ),\r\n        );\r\n    }\r\n\r\n    overwriteSplitAndTranche(childSections: Section[]): Section[] {\r\n        if (this.route.snapshot.queryParams.costMatrixId) {\r\n            this.copyCostInChild = true;\r\n        }\r\n        this.tradeImageModel = new PhysicalFixedPricedContract();\r\n        // comparing the values from original model\r\n        if (\r\n            this.model.counterpartyReference !==\r\n            this.sectionModel.counterpartyReference\r\n        ) {\r\n            this.tradeImageModel.counterpartyReference = this.model.counterpartyReference;\r\n        }\r\n        if (this.model.sellerCode !== this.sectionModel.sellerCode) {\r\n            this.tradeImageModel.sellerCode = this.model.sellerCode;\r\n        }\r\n        if (this.model.buyerCode !== this.sectionModel.buyerCode) {\r\n            this.tradeImageModel.buyerCode = this.model.buyerCode;\r\n        }\r\n        if (this.model.commodityId !== this.sectionModel.commodityId) {\r\n            this.tradeImageModel.commodityId = this.model.commodityId;\r\n        }\r\n        if (this.model.cropYear !== this.sectionModel.cropYear) {\r\n            this.tradeImageModel.cropYear = this.model.cropYear;\r\n        }\r\n        if (this.model.currencyCode !== this.sectionModel.currencyCode) {\r\n            this.tradeImageModel.currencyCode = this.model.currencyCode;\r\n        }\r\n        if (Number(this.model.priceUnitId) !== this.sectionModel.priceUnitId) {\r\n            this.tradeImageModel.priceUnitId = this.model.priceUnitId;\r\n        }\r\n        if (this.model.price !== this.sectionModel.price) {\r\n            this.tradeImageModel.price = this.model.price;\r\n        }\r\n        if (this.model.traderId !== this.sectionModel.header.traderId) {\r\n            this.tradeImageModel.traderId = this.model.traderId;\r\n        }\r\n        if (this.model.paymentTerms !== this.sectionModel.paymentTerms) {\r\n            this.tradeImageModel.paymentTerms = this.model.paymentTerms;\r\n        }\r\n        if (\r\n            this.model.discountPremiumValue !== this.sectionModel.premiumDiscountValue\r\n        ) {\r\n            this.tradeImageModel.discountPremiumValue = this.model.discountPremiumValue;\r\n        }\r\n        if (this.model.contractTerms !== this.sectionModel.contractTerms) {\r\n            this.tradeImageModel.contractTerms = this.model.contractTerms;\r\n        }\r\n        if (\r\n            this.model.contractTermsLocation !==\r\n            this.sectionModel.contractTermsLocation\r\n        ) {\r\n            this.tradeImageModel.contractTermsLocation = this.model.contractTermsLocation;\r\n        }\r\n        if (this.model.arbitration !== this.sectionModel.arbitration) {\r\n            this.tradeImageModel.arbitration = this.model.arbitration;\r\n        }\r\n        if (this.model.periodTypeId !== this.sectionModel.periodTypeId) {\r\n            this.tradeImageModel.periodTypeId = this.model.periodTypeId;\r\n        }\r\n        if (this.model.positionMonthType !== this.sectionModel.positionMonthType) {\r\n            this.tradeImageModel.positionMonthType = this.model.positionMonthType;\r\n        }\r\n        if (\r\n            this.model.deliveryPeriodStartDate !==\r\n            this.sectionModel.deliveryPeriodStartDate\r\n        ) {\r\n            this.tradeImageModel.deliveryPeriodStartDate = this.model.deliveryPeriodStartDate;\r\n        }\r\n        if (\r\n            this.model.deliveryPeriodEndDate !==\r\n            this.sectionModel.deliveryPeriodEndDate\r\n        ) {\r\n            this.tradeImageModel.deliveryPeriodEndDate = this.model.deliveryPeriodEndDate;\r\n        }\r\n        if (this.model.portOfOrigin !== this.sectionModel.portOfOrigin) {\r\n            this.tradeImageModel.portOfOrigin = this.model.portOfOrigin;\r\n        }\r\n        if (this.model.portOfDestination !== this.sectionModel.portOfDestination) {\r\n            this.tradeImageModel.portOfDestination = this.model.portOfDestination;\r\n        }\r\n        if (this.model.marketSectorId) {\r\n            if (\r\n                Number(this.model.marketSectorId) !== this.sectionModel.marketSectorId\r\n            ) {\r\n                this.tradeImageModel.marketSectorId = this.model.marketSectorId;\r\n            }\r\n        }\r\n        if (this.model.memorandum !== this.sectionModel.memorandum) {\r\n            this.tradeImageModel.memorandum = this.model.memorandum;\r\n        }\r\n        childSections = this.sectionModel.childSections;\r\n        for (const section of childSections) {\r\n            section.contractType = this.model.type;\r\n            section.counterpartyReference = this.tradeImageModel.counterpartyReference\r\n                ? this.tradeImageModel.counterpartyReference\r\n                : null;\r\n            if (this.tradeImageModel.commodityId) {\r\n                section.commodityId = this.tradeImageModel.commodityId;\r\n            }\r\n            if (this.tradeImageModel.buyerCode) {\r\n                section.buyerCode = this.tradeImageModel.buyerCode;\r\n            }\r\n            if (this.tradeImageModel.sellerCode) {\r\n                section.sellerCode = this.tradeImageModel.sellerCode;\r\n            }\r\n            if (this.tradeImageModel.cropYear) {\r\n                section.cropYear = this.tradeImageModel.cropYear;\r\n            }\r\n            if (this.tradeImageModel.currencyCode) {\r\n                section.currencyCode = this.tradeImageModel.currencyCode;\r\n            }\r\n            if (this.model.originalQuantity) {\r\n                section.originalQuantity = this.model.originalQuantity;\r\n            }\r\n            if (this.tradeImageModel.priceUnitId) {\r\n                section.priceUnitId = Number(this.tradeImageModel.priceUnitId);\r\n            }\r\n            if (this.tradeImageModel.price) {\r\n                section.price = this.tradeImageModel.price;\r\n            }\r\n            if (this.tradeImageModel.traderId) {\r\n                section.header.traderId = this.tradeImageModel.traderId;\r\n            }\r\n            if (this.tradeImageModel.paymentTerms) {\r\n                section.paymentTerms = this.tradeImageModel.paymentTerms;\r\n            }\r\n            if (this.tradeImageModel.contractTerms) {\r\n                section.contractTerms = this.tradeImageModel.contractTerms;\r\n            }\r\n            if (this.tradeImageModel.contractTermsLocation) {\r\n                section.contractTermsLocation = this.tradeImageModel.contractTermsLocation;\r\n            }\r\n            if (this.tradeImageModel.arbitration) {\r\n                section.arbitration = this.tradeImageModel.arbitration;\r\n            }\r\n            if (this.tradeImageModel.periodTypeId) {\r\n                section.periodTypeId = this.tradeImageModel.periodTypeId;\r\n            }\r\n            if (this.tradeImageModel.positionMonthType) {\r\n                section.positionMonthType = this.tradeImageModel.positionMonthType;\r\n            }\r\n            if (this.tradeImageModel.deliveryPeriodStartDate) {\r\n                section.deliveryPeriodStartDate = this.tradeImageModel.deliveryPeriodStartDate;\r\n            }\r\n            if (this.tradeImageModel.deliveryPeriodEndDate) {\r\n                section.deliveryPeriodEndDate = this.tradeImageModel.deliveryPeriodEndDate;\r\n            }\r\n            if (this.tradeImageModel.portOfOrigin) {\r\n                section.portOfOrigin = this.tradeImageModel.portOfOrigin;\r\n            }\r\n            if (this.tradeImageModel.portOfDestination) {\r\n                section.portOfDestination = this.tradeImageModel.portOfDestination;\r\n            }\r\n            if (this.tradeImageModel.marketSectorId) {\r\n                section.marketSectorId = Number(this.tradeImageModel.marketSectorId);\r\n            }\r\n            if (this.tradeImageModel.memorandum) {\r\n                section.memorandum = this.tradeImageModel.memorandum;\r\n            }\r\n            if (this.copyCostInChild) {\r\n                section.costs = this.model.costs;\r\n            }\r\n            section.contractDate = this.model.contractDate;\r\n            section.status = ContractStatus.Unapproved;\r\n            section.blDate = null;\r\n            section.allocatedTo = null;\r\n            section.allocatedToId = null;\r\n            section.allocationDate = null;\r\n        }\r\n        return childSections;\r\n    }\r\n\r\n    contractDateSelected(contractDate: Date) {\r\n        this.mainTabComponent.contractDateSelected(contractDate);\r\n        this.trafficTabComponent.contractDateSelected(contractDate);\r\n    }\r\n\r\n    getPhysicalContractInfo() {\r\n        this.model = new PhysicalFixedPricedContract();\r\n\r\n        this.formComponents.forEach((comp) => {\r\n            this.model = comp.populateEntity(this.model);\r\n        });\r\n\r\n        if (!this.isEdit && this.model.isInterco && !this.model.departmentId) {\r\n            const currentCompany = this.masterdata.companies.filter((e) => e.companyId === this.company)[0];\r\n            this.model.departmentId = currentCompany.defaultDepartmentId;\r\n        }\r\n\r\n        this.model.costs.forEach((cost) => {\r\n            if (cost.costId) {\r\n                this.executionService\r\n                    .getInvoiceMarkingsForCost(cost.costId, this.dataVersionId)\r\n                    .subscribe(\r\n                        (data: ApiPaginatedCollection<InvoiceMarkingSearchResult>) => {\r\n                            let invoiceMarkingGridRows = [];\r\n                            invoiceMarkingGridRows = data.value;\r\n                            this.getTotalInvoiceValue(invoiceMarkingGridRows);\r\n                            const costInvoicePercent =\r\n                                (cost.invoicePercent * 100) / this.totalInvoicePercent;\r\n                            invoiceMarkingGridRows.forEach((costMarkingLines) => {\r\n                                costMarkingLines.invoicePercent =\r\n                                    (costInvoicePercent * costMarkingLines.invoicePercent) / 100;\r\n                            });\r\n                            cost.costInvoiceMarkingLines = invoiceMarkingGridRows;\r\n                        },\r\n                    );\r\n            }\r\n        });\r\n    }\r\n\r\n    getTotalInvoiceValue(invoiceMarkingGridRows: InvoiceMarkingSearchResult[]) {\r\n        this.totalInvoicePercent = 0;\r\n        if (invoiceMarkingGridRows) {\r\n            invoiceMarkingGridRows.forEach((invoiceMarking) => {\r\n                this.totalInvoicePercent += invoiceMarking.invoicePercent;\r\n            });\r\n        }\r\n    }\r\n\r\n    onAddCostsButtonClicked() {\r\n        if (this.tradeQuantity > 0) {\r\n            this.isSave = true;\r\n            this.selectedTab = 1;\r\n            this.costsTabComponent.handleAction(\r\n                this.costsTabComponent.costsMenuActions.addCost,\r\n            );\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'You Cannot Add costs to a contract with Zero Quantity',\r\n            );\r\n        }\r\n    }\r\n\r\n    sideNavChangeCalled(sectionType: number) {\r\n        this.sideNavOpened = true;\r\n        this.sideNavScreen = sectionType;\r\n        this.newTrancheSplitAgGridComponent.assignValue(\r\n            this.sectionModel,\r\n            sectionType,\r\n        );\r\n        this.newTrancheSplitFooterComponent.assignValue(\r\n            this.sectionModel,\r\n            sectionType,\r\n        );\r\n        this.newTrancheSplitHeaderComponent.assignSectionType(sectionType);\r\n    }\r\n\r\n    addSplitOrTranchesCalled(result: number) {\r\n        this.newTrancheSplitAgGridComponent.addSplitOrTranches(\r\n            result,\r\n            'addLines',\r\n            false,\r\n        );\r\n    }\r\n\r\n    newTrancheShippingCalled(toggleShippingSelected: boolean) {\r\n        if (toggleShippingSelected) {\r\n            let noOfShippments = 0;\r\n            const deliveryPeriodStartDate = moment(\r\n                this.sectionModel.deliveryPeriodStartDate,\r\n            );\r\n            const deliveryPeriodEndDate = moment(\r\n                this.sectionModel.deliveryPeriodEndDate,\r\n            );\r\n            noOfShippments =\r\n                deliveryPeriodEndDate.month() -\r\n                deliveryPeriodStartDate.month() +\r\n                12 * (deliveryPeriodEndDate.year() - deliveryPeriodStartDate.year());\r\n            this.newTrancheSplitAgGridComponent.addSplitOrTranches(\r\n                noOfShippments + 1,\r\n                'shipping',\r\n                false,\r\n            );\r\n        } else {\r\n            this.newTrancheSplitAgGridComponent.reset();\r\n        }\r\n    }\r\n\r\n    childQuantityConsumedCalled(model) {\r\n        if (model) {\r\n            this.newTrancheSplitHeaderComponent.showAddline = true;\r\n            if (this.sectionModel.quantity - model.childQuantityConsumed <= 0) {\r\n                this.newTrancheSplitHeaderComponent.showAddline = false;\r\n            }\r\n            // if the weight code of parent and child trade for split is different\r\n            // then the correct weight of the quantity to be updated in parent trade\r\n            // after weight conversion\r\n            if (model.isWeightConverted) {\r\n                this.isWeightConvertedForSplit = model.isWeightConverted;\r\n                // setting quantity of parent after creating a split with different\r\n                // weight code\r\n                this.childQuantityConsumed = model.childQuantityConsumed;\r\n            }\r\n            this.newTrancheSplitFooterComponent.quantityConsumedCtrl.patchValue(\r\n                this.formatQuantity(model.childQuantityConsumed),\r\n            );\r\n            this.newTrancheSplitFooterComponent.quantityAvailableCtrl.patchValue(\r\n                this.formatQuantity(\r\n                    Number(\r\n                        new AtlasNumber(this.sectionModel.quantity.toString())\r\n                            .plus(-model.childQuantityConsumed)\r\n                            .toString(),\r\n                    ),\r\n                ),\r\n            );\r\n        }\r\n    }\r\n\r\n    formatQuantity(value: number) {\r\n        if (value) {\r\n            return new Intl.NumberFormat('en-US', {\r\n                minimumFractionDigits: 3,\r\n                maximumFractionDigits: 3,\r\n            }).format(value);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    enableProceedButtonCalled(enableProceedButton: boolean) {\r\n        if (enableProceedButton) {\r\n            this.newTrancheSplitHeaderComponent.showAddline = true;\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.newTrancheSplitAgGridComponent.disableAddNewLine = false;\r\n                this.newTrancheSplitHeaderComponent.showAddline = true;\r\n                this.sideNavOpened = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    onSideNavSaveButtonClick() {\r\n        if (!this.isSplitSaveDisabled) {\r\n            this.isSplitSaveDisabled = true;\r\n            let quantityAvailable: number = 0;\r\n            const errorQuantity: string =\r\n                'Form is invalid. Please resolve the errors';\r\n            this.newTrancheSplitAgGridComponent.populateEntity(this.sectionModel);\r\n            if (this.newTrancheSplitAgGridComponent.isValid) {\r\n                quantityAvailable = this.newTrancheSplitFooterComponent\r\n                    .quantityAvailableCtrl.value\r\n                    ? this.newTrancheSplitFooterComponent.quantityAvailableCtrl.value\r\n                        .split(',')\r\n                        .join('')\r\n                    : this.newTrancheSplitFooterComponent.quantityAvailableCtrl.value;\r\n                if (quantityAvailable >= 0) {\r\n                    const quantityCheck =\r\n                        this.sectionModel.childSections.filter(\r\n                            (childSection) => childSection.quantity === 0,\r\n                        ).length > 0;\r\n                    const checkNewLineAdded =\r\n                        this.sectionModel.childSections.filter(\r\n                            (childElement) => childElement.sectionId === undefined,\r\n                        ).length > 0;\r\n                    if (!quantityCheck) {\r\n                        if (checkNewLineAdded) {\r\n                            if (this.sideNavScreen === SectionTypes.Split) {\r\n                                this.executionService\r\n                                    .getAllocationBySectionId(this.sectionId, this.dataVersionId)\r\n                                    .subscribe((data: Allocation) => {\r\n                                        if (data) {\r\n                                            this.allocationModel = data;\r\n                                            this.splitAllocation();\r\n                                        } else {\r\n                                            this.createTrancheSplit();\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                this.createTrancheSplit();\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this.snackbarService.informationSnackBar(errorQuantity);\r\n                        this.isSplitSaveDisabled = false;\r\n                    }\r\n                } else {\r\n                    this.snackbarService.informationSnackBar(errorQuantity);\r\n                    this.isSplitSaveDisabled = false;\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    this.newTrancheSplitAgGridComponent.errorMessage\r\n                        ? this.newTrancheSplitAgGridComponent.errorMessage\r\n                        : errorQuantity,\r\n                );\r\n                this.isSplitSaveDisabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    createTrancheSplit() {\r\n        this.sectionModel.dataVersionId = this.dataVersionId;\r\n        this.sectionModel.childSections.forEach((element) => {\r\n            element.contractedValue = this.setContractValue(\r\n                element,\r\n                element.quantity,\r\n            );\r\n        });\r\n\r\n        this.subscriptions.push(\r\n            this.tradingService\r\n                .createTrancheSplit(this.sectionModel, this.sideNavScreen)\r\n                .subscribe(\r\n                    (data) => {\r\n                        this.lockService\r\n                            .unlockContract(this.sectionId, this.getLockFunctionalContext())\r\n                            .subscribe();\r\n                        if (this.allocationModel) {\r\n                            this.allocateSections(data);\r\n                        }\r\n\r\n                        this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                            new SectionTabIndex(\r\n                                data.map((result) => result.sectionId)[0],\r\n                                this.selectedTab,\r\n                            ),\r\n                        );\r\n                        if (this.isWeightConvertedForSplit) {\r\n                            this.sectionModel.quantity =\r\n                                this.sectionModel.quantity - this.childQuantityConsumed;\r\n                            this.tradingService\r\n                                .updatePhysicalContract(\r\n                                    this.contractId,\r\n                                    this.convertToPhysicalFixedPricedContract(this.sectionModel),\r\n                                    this.isWeightConvertedForSplit,\r\n                                )\r\n                                .subscribe();\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        this.isSplitSaveDisabled = false;\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    },\r\n                ),\r\n        );\r\n    }\r\n\r\n    setContractValue(sectionModel: Section, quantityValue: number): string {\r\n        let quantityVal: number;\r\n        quantityVal = quantityValue;\r\n        const mask = CustomNumberMask(12, 10, true);\r\n        if (this.masterdata === undefined) {\r\n            return;\r\n        }\r\n        const weightCodeConversion = this.masterdata.weightUnits.find(\r\n            (weightUnit) => weightUnit.weightUnitId === sectionModel.weightUnitId,\r\n        ).conversionFactor;\r\n        const selectedPriceUnit = this.masterdata.priceUnits.filter(\r\n            (priceUnit) => priceUnit.priceUnitId === sectionModel.priceUnitId,\r\n        );\r\n        const priceCodeConversion =\r\n            selectedPriceUnit.length > 0\r\n                ? selectedPriceUnit[0].conversionFactor\r\n                : undefined;\r\n\r\n        if (\r\n            !weightCodeConversion ||\r\n            !priceCodeConversion ||\r\n            !quantityValue ||\r\n            !sectionModel.price\r\n        ) {\r\n            sectionModel.contractedValue = '';\r\n            return;\r\n        }\r\n        const contractPrice = sectionModel.price.toString().replace(/,/g, '');\r\n        let contractPriceDecimal: AtlasNumber = new AtlasNumber(contractPrice);\r\n        const quantity = quantityVal.toString().replace(/,/g, '');\r\n        const quantityDecimal: AtlasNumber = new AtlasNumber(quantity);\r\n\r\n        if (\r\n            sectionModel.premiumDiscountTypeId !== undefined &&\r\n            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&\r\n            sectionModel.premiumDiscountTypeId !== undefined\r\n        ) {\r\n            // discountPremiumValue exists\r\n\r\n            let discountPremiumContractedPrice: number | AtlasNumber = 0;\r\n            const discountPremiumSign =\r\n                (sectionModel.premiumDiscountTypeId as DiscountTypes) ===\r\n                    DiscountTypes.Discount\r\n                    ? -1\r\n                    : 1;\r\n\r\n            if (\r\n                (sectionModel.premiumDiscountBasis as DiscountBasis) ===\r\n                DiscountBasis.Rate\r\n            ) {\r\n                discountPremiumContractedPrice =\r\n                    sectionModel.premiumDiscountValue * discountPremiumSign;\r\n            } else if (\r\n                (sectionModel.premiumDiscountBasis as DiscountBasis) ===\r\n                DiscountBasis.Percent\r\n            ) {\r\n                discountPremiumContractedPrice = contractPriceDecimal.times(\r\n                    (sectionModel.premiumDiscountValue * discountPremiumSign) / 100,\r\n                );\r\n            }\r\n            contractPriceDecimal = contractPriceDecimal.plus(\r\n                discountPremiumContractedPrice,\r\n            );\r\n        }\r\n\r\n        const contractValue = contractPriceDecimal\r\n            .times(quantityDecimal)\r\n            .times(weightCodeConversion * priceCodeConversion)\r\n            .toString();\r\n\r\n        const contractValueFormatted = conformToMask(contractValue, mask, {\r\n            guide: false,\r\n        }).conformedValue;\r\n        sectionModel.contractedValue = contractValueFormatted;\r\n        return sectionModel.contractedValue;\r\n    }\r\n\r\n    getContractValue(sectionModelOrig: Section, quantityValue: number): string {\r\n        const sectionModel = sectionModelOrig;\r\n        let quantityVal;\r\n        quantityVal = quantityValue;\r\n        const mask = CustomNumberMask(12, 10, true);\r\n        if (this.masterdata === undefined) {\r\n            return;\r\n        }\r\n        const weightCodeConversion = this.masterdata.weightUnits.find(\r\n            (weightUnit) => weightUnit.weightUnitId === sectionModel.weightUnitId,\r\n        ).conversionFactor;\r\n        const selectedPriceUnit = this.masterdata.priceUnits.filter(\r\n            (priceUnit) => priceUnit.priceUnitId === sectionModel.priceUnitId,\r\n        );\r\n        const priceCodeConversion =\r\n            selectedPriceUnit.length > 0\r\n                ? selectedPriceUnit[0].conversionFactor\r\n                : undefined;\r\n\r\n        if (\r\n            !weightCodeConversion ||\r\n            !priceCodeConversion ||\r\n            !quantityValue ||\r\n            !sectionModel.price\r\n        ) {\r\n            sectionModel.contractedValue = '';\r\n            return;\r\n        }\r\n        const contractPrice = sectionModel.price.toString().replace(/,/g, '');\r\n        let contractPriceDecimal: AtlasNumber = new AtlasNumber(contractPrice);\r\n        const quantity = quantityVal.toString().replace(/,/g, '');\r\n        const quantityDecimal: AtlasNumber = new AtlasNumber(quantity);\r\n\r\n        if (\r\n            sectionModel.premiumDiscountTypeId !== undefined &&\r\n            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&\r\n            sectionModel.premiumDiscountTypeId !== undefined\r\n        ) {\r\n            // discountPremiumValue exists\r\n\r\n            let discountPremiumContractedPrice: number | AtlasNumber = 0;\r\n            const discountPremiumSign =\r\n                (sectionModel.premiumDiscountTypeId as DiscountTypes) ===\r\n                    DiscountTypes.Discount\r\n                    ? -1\r\n                    : 1;\r\n\r\n            if (\r\n                (sectionModel.premiumDiscountBasis as DiscountBasis) ===\r\n                DiscountBasis.Rate\r\n            ) {\r\n                discountPremiumContractedPrice =\r\n                    sectionModel.premiumDiscountValue * discountPremiumSign;\r\n            } else if (\r\n                (sectionModel.premiumDiscountBasis as DiscountBasis) ===\r\n                DiscountBasis.Percent\r\n            ) {\r\n                discountPremiumContractedPrice = contractPriceDecimal.times(\r\n                    (sectionModel.premiumDiscountValue * discountPremiumSign) / 100,\r\n                );\r\n            }\r\n            contractPriceDecimal = contractPriceDecimal.plus(\r\n                discountPremiumContractedPrice,\r\n            );\r\n        }\r\n\r\n        const contractValue = contractPriceDecimal\r\n            .times(quantityDecimal)\r\n            .times(weightCodeConversion * priceCodeConversion)\r\n            .toString();\r\n\r\n        const contractValueFormatted = conformToMask(contractValue, mask, {\r\n            guide: false,\r\n        }).conformedValue;\r\n        sectionModel.contractedValue = contractValueFormatted;\r\n        return sectionModel.contractedValue;\r\n    }\r\n\r\n    getPosition(event) {\r\n        this.selectedTab = event.index;\r\n\r\n        if (event.tab.textLabel === 'CONTRACT STATUS') {\r\n            const index = event.index;\r\n            const eleRef = document.getElementsByClassName('mat-tab-label-content');\r\n            const el = eleRef[index].parentElement;\r\n\r\n            this.offsetLeft = el.offsetLeft;\r\n            this.offsetLeft = this.offsetLeft - 50;\r\n        }\r\n\r\n        switch (this.selectedTab) {\r\n            case 1:\r\n                this.costsTabComponent.onTabSelected();\r\n                break;\r\n            case 4:\r\n                this.sectionTabComponent.onTabSelected();\r\n                break;\r\n            case 5:\r\n                this.invoiceMarkingTabComponent.onTabSelected();\r\n                break;\r\n        }\r\n        return { offsetLeft: this.offsetLeft };\r\n    }\r\n\r\n    splitAllocation() {\r\n        let allocatedSectionModel: Section;\r\n        this.subscriptions.push(\r\n            this.tradingService\r\n                .getSection(\r\n                    this.allocationModel.allocatedSectionId,\r\n                    0,\r\n                    this.dataVersionId,\r\n                )\r\n                .subscribe((data) => {\r\n                    allocatedSectionModel = data;\r\n                    if (allocatedSectionModel) {\r\n                        this.tradingService\r\n                            .getChildSections(\r\n                                this.allocationModel.allocatedSectionId,\r\n                                this.dataVersionId,\r\n                            )\r\n                            .subscribe(\r\n                                (allocatedChildSections: ChildSectionsSearchResult[]) => {\r\n                                    this.newTrancheSplitAgGridComponent.assignValue(\r\n                                        allocatedSectionModel,\r\n                                        this.sideNavScreen,\r\n                                    );\r\n\r\n                                    this.newTrancheSplitAgGridComponent.addSplitOrTranches(\r\n                                        this.sectionModel.childSections.length,\r\n                                        'addLines',\r\n                                        true,\r\n                                        allocatedSectionModel,\r\n                                        allocatedChildSections,\r\n                                    );\r\n\r\n                                    this.newTrancheSplitAgGridComponent.populateEntity(\r\n                                        allocatedSectionModel,\r\n                                        allocatedChildSections,\r\n                                    );\r\n\r\n                                    let index = 0;\r\n\r\n                                    this.sectionModel.childSections.forEach((obj) => {\r\n                                        allocatedSectionModel.childSections[index].quantity =\r\n                                            obj.quantity;\r\n                                        allocatedSectionModel.childSections[\r\n                                            index\r\n                                        ].originalQuantity = obj.quantity;\r\n                                        index++;\r\n                                    });\r\n\r\n                                    allocatedSectionModel.childSections.forEach((childSection) =>\r\n                                        this.sectionModel.childSections.push(childSection),\r\n                                    );\r\n                                    this.createTrancheSplit();\r\n                                },\r\n                            );\r\n                    } else {\r\n                        allocatedSectionModel.childSections.forEach((childSection) =>\r\n                            this.sectionModel.childSections.push(childSection),\r\n                        );\r\n                        this.createTrancheSplit();\r\n                    }\r\n                }),\r\n        );\r\n    }\r\n\r\n    allocateSections(result) {\r\n        const midLength: number = result.length / 2;\r\n        const allocateSectionModel: AllocateSection[] = [];\r\n        for (let i = 0; i < midLength; i++) {\r\n            const allocateSectionElement: AllocateSection = new AllocateSection();\r\n            allocateSectionElement.sectionId = result[i].sectionId;\r\n            allocateSectionElement.allocatedSectionId =\r\n                result[i + midLength].sectionId;\r\n            allocateSectionElement.quantity = this.sectionModel.childSections[\r\n                i + midLength\r\n            ].quantity;\r\n            allocateSectionElement.shippingType = this.allocationModel.transferShippingOptionId;\r\n            allocateSectionElement.dataVersionId = this.dataVersionId;\r\n            allocateSectionModel.push(allocateSectionElement);\r\n        }\r\n\r\n        this.executionService\r\n            .allocateSections(allocateSectionModel)\r\n            .subscribe(() => {\r\n                this.snackbarService.informationSnackBar(\r\n                    'Split Allocated Successfully',\r\n                );\r\n            });\r\n    }\r\n\r\n    contractStatusChanged(contractStatus: ContractStatus) {\r\n        this.headerComponent.contractStatusChanged(contractStatus);\r\n        this.sectionTabComponent.contractStatusChanged(contractStatus);\r\n    }\r\n\r\n    quantityValueUpdate(quantity) {\r\n        if (quantity >= 0) {\r\n            this.mainTabComponent.quantityComponent.quantityCtrl.patchValue(quantity);\r\n            this.mainTabComponent.quantityComponent.quantityContractedCtrl.patchValue(\r\n                quantity,\r\n            );\r\n            this.mainTabComponent.quantityComponent.onQuantityBlur(quantity);\r\n            this.trafficTabQuantity = quantity;\r\n            this.quantityTrafficSplit = quantity;\r\n        }\r\n\r\n        let isAnyCurrentToggleSelected: boolean = false;\r\n        let isAnyAllocationCardCheckFailed: boolean = false;\r\n        let allocatedSectionCode: string;\r\n\r\n        allocatedSectionCode = this.trafficTabComponent.allocationComponent\r\n            .allocatedSectionCode;\r\n        isAnyCurrentToggleSelected = this.trafficTabComponent.currentTradeComponent.checkAnyToggleSelected();\r\n        isAnyAllocationCardCheckFailed = this.trafficTabComponent.allocationComponent.allocationSelectionChecked();\r\n\r\n        if (\r\n            allocatedSectionCode &&\r\n            allocatedSectionCode.toString().trim().length > 0\r\n        ) {\r\n            this.isEdit =\r\n                isAnyCurrentToggleSelected || !isAnyAllocationCardCheckFailed\r\n                    ? true\r\n                    : false;\r\n        } else {\r\n            this.isEdit = isAnyCurrentToggleSelected ? true : false;\r\n        }\r\n\r\n        if (this.isEdit && !this.isTradeImage) {\r\n            this.startLockRefresh();\r\n        } else {\r\n            this.stopLockRefresh();\r\n        }\r\n    }\r\n\r\n    // -- (De)Allocation Code\r\n    onDeallocateTradeButtonClicked() {\r\n        this.openDeallocationDialog();\r\n    }\r\n\r\n    openDeallocationDialog(): void {\r\n        this.subscriptions.push(\r\n            this.lockService\r\n                .isLockedContract(this.sectionModel.sectionId)\r\n                .subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                    } else {\r\n                        this.subscriptions.push(\r\n                            this.lockService\r\n                                .lockContract(\r\n                                    this.sectionModel.sectionId,\r\n                                    LockFunctionalContext.Deallocation,\r\n                                )\r\n                                .subscribe((lockState) => {\r\n                                    const dialogRef = this.dialog.open(\r\n                                        TradeDeallocationDialogComponent,\r\n                                        {\r\n                                            disableClose: true,\r\n                                        },\r\n                                    );\r\n\r\n                                    this.subscriptions.push(\r\n                                        dialogRef.afterClosed().subscribe((result: boolean) => {\r\n                                            if (result !== undefined) {\r\n                                                this.subscriptions.push(\r\n                                                    this.executionService\r\n                                                        .deallocateContract(\r\n                                                            this.sectionModel.sectionId,\r\n                                                            result,\r\n                                                            this.dataVersionId,\r\n                                                        )\r\n                                                        .subscribe((ok) => {\r\n                                                            if (ok) {\r\n                                                                this.snackbarService.throwErrorSnackBar(\r\n                                                                    'Trade has been successfully de-allocated',\r\n                                                                );\r\n                                                                this.tradeManagementMenuBarComponent.updateDeallocationInfo();\r\n                                                            }\r\n                                                            this.lockService.cleanSessionLocks().subscribe();\r\n                                                        }),\r\n                                                );\r\n                                            } else {\r\n                                                this.lockService.cleanSessionLocks().subscribe();\r\n                                            }\r\n                                        }),\r\n                                    );\r\n                                }),\r\n                        );\r\n                    }\r\n                }),\r\n        );\r\n    }\r\n\r\n    // -- Approve\r\n    onApproveSectionButtonClicked() {\r\n        if (!this.tradeCanBeApproved) {\r\n            this.snackbarService.throwErrorSnackBar('You cannot approve a contract with default department');\r\n            return;\r\n        }\r\n\r\n        if (this.dataVersionId) {\r\n            this.snackbarService.informationSnackBar(\r\n                'You cannot approve a contract in a freeze',\r\n            );\r\n            return;\r\n        }\r\n        if (this.isFirstApproval === true && this.isZeroCostRow === true) {\r\n            const confirmDiscardDialog = this.dialog.open(\r\n                ConfirmationDialogComponent,\r\n                {\r\n                    data: {\r\n                        text:\r\n                            'There are some costs lines with zero values, do you still want to proceed with the first approval of the trade?',\r\n                        okButton: 'YES',\r\n                        cancelButton: 'NO',\r\n                    },\r\n                },\r\n            );\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.subscriptions.push(\r\n                        this.tradingService\r\n                            .approveSection(this.sectionModel.sectionId)\r\n                            .subscribe((ok) => {\r\n                                if (ok) {\r\n                                    this.sectionModel.status = ContractStatus.Approved;\r\n                                    this.headerComponent.contractStatusChanged(\r\n                                        ContractStatus.Approved,\r\n                                    );\r\n                                    this.tradeManagementMenuBarComponent.contractStatusChanged(\r\n                                        ContractStatus.Approved,\r\n                                    );\r\n                                    this.isApprovalBannerDisplayed = true;\r\n                                    this.costsTabComponent.getCosts(this.sectionModel.sectionId);\r\n                                    this.isFirstApproval = false;\r\n                                }\r\n                            }),\r\n                    );\r\n                }\r\n            });\r\n        } else {\r\n            this.subscriptions.push(\r\n                this.tradingService\r\n                    .approveSection(this.sectionModel.sectionId)\r\n                    .subscribe((ok) => {\r\n                        if (ok) {\r\n                            this.sectionModel.status = ContractStatus.Approved;\r\n                            this.headerComponent.contractStatusChanged(\r\n                                ContractStatus.Approved,\r\n                            );\r\n                            this.sectionTabComponent.contractStatusChanged(\r\n                                ContractStatus.Approved,\r\n                            );\r\n                            this.tradeManagementMenuBarComponent.contractStatusChanged(\r\n                                ContractStatus.Approved,\r\n                            );\r\n                            this.isApprovalBannerDisplayed = true;\r\n                            this.costsTabComponent.getCosts(this.sectionModel.sectionId);\r\n                        }\r\n                    }),\r\n            );\r\n        }\r\n    }\r\n\r\n    // --UnApprove\r\n    onUnApproveSectionButtonClicked() {\r\n        if (this.dataVersionId) {\r\n            this.snackbarService.informationSnackBar(\r\n                'You cannot Unapprove a contract in a freeze',\r\n            );\r\n            return;\r\n        }\r\n        if (this.totalInvoiceValuePercent === 100) {\r\n            const confirmDiscardDialog = this.dialog.open(\r\n                ConfirmationDialogComponent,\r\n                {\r\n                    data: {\r\n                        text: 'Trade is already 100% invoiced. Do you want to Unapprove?',\r\n                        okButton: 'CONFIRM',\r\n                        cancelButton: 'CANCEL',\r\n                    },\r\n                },\r\n            );\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.subscriptions.push(\r\n                        this.tradingService\r\n                            .unapproveSection(this.sectionModel.sectionId)\r\n                            .subscribe((ok) => {\r\n                                if (ok) {\r\n                                    this.sectionModel.status = ContractStatus.Unapproved;\r\n\r\n                                    this.headerComponent.contractStatusChanged(\r\n                                        ContractStatus.Unapproved,\r\n                                    );\r\n                                    this.tradeManagementMenuBarComponent.contractStatusChanged(\r\n                                        ContractStatus.Unapproved,\r\n                                    );\r\n                                    this.isApprovalBannerDisplayed = false;\r\n                                }\r\n                            }),\r\n                    );\r\n                }\r\n            });\r\n        } else {\r\n            this.subscriptions.push(\r\n                this.tradingService\r\n                    .unapproveSection(this.sectionModel.sectionId)\r\n                    .subscribe((ok) => {\r\n                        if (ok) {\r\n                            this.sectionModel.status = ContractStatus.Unapproved;\r\n\r\n                            this.headerComponent.contractStatusChanged(\r\n                                ContractStatus.Unapproved,\r\n                            );\r\n                            this.tradeManagementMenuBarComponent.contractStatusChanged(\r\n                                ContractStatus.Unapproved,\r\n                            );\r\n                            this.isApprovalBannerDisplayed = false;\r\n                        }\r\n                    }),\r\n            );\r\n        }\r\n    }\r\n\r\n    // Delete\r\n    onDeleteSectionButtonClicked() {\r\n        const tradePopUpTitle = 'Trade Deletion';\r\n        if (\r\n            this.sectionModel.quantity !== null &&\r\n            this.sectionModel.quantity > 0 &&\r\n            (!this.statusTabComponent.invoicingComponent.invoicePercentage\r\n                || this.statusTabComponent.invoicingComponent.invoicePercentage === 0\r\n                || this.costWithInvoice)\r\n        ) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: tradePopUpTitle,\r\n                    text: 'Not allowed. Quantity is not equal to zero.',\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else if (\r\n            this.statusTabComponent.invoicingComponent.invoicePercentage > 0 ||\r\n            this.costWithInvoice\r\n        ) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: tradePopUpTitle,\r\n                    text:\r\n                        'Not allowed. ' +\r\n                        this.headerComponent.contractReference +\r\n                        ' is invoiced',\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else if (\r\n            this.sectionModel.childSections !== null &&\r\n            this.sectionModel.childSections.length > 0 &&\r\n            this.sectionModel.sectionOriginId === 0\r\n        ) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: tradePopUpTitle,\r\n                    text: 'Not allowed to delete a parent trade.',\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else if (\r\n            this.sectionModel.allocatedTo !== null &&\r\n            this.sectionModel.allocatedToId !== null\r\n        ) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: tradePopUpTitle,\r\n                    text:\r\n                        'Not allowed. ' +\r\n                        this.sectionModel.contractLabel +\r\n                        ' is allocated to ' +\r\n                        this.sectionModel.allocatedTo.contractLabel,\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: tradePopUpTitle,\r\n                    text:\r\n                        'Trade will be deleted. This action is irreversible. Continue with deletion?',\r\n                    okButton: 'Delete anyway',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.subscriptions.push(\r\n                        this.tradingService\r\n                            .deleteSection(this.sectionModel.sectionId)\r\n                            .subscribe((ok) => {\r\n                                if (ok) {\r\n                                    this.router.navigate([\r\n                                        this.companyManager.getCurrentCompanyId() + '/trades',\r\n                                    ]);\r\n                                }\r\n                            }),\r\n                    );\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    invoicePercentOfCost(costData: CostListDisplayView[]) {\r\n        this.costWithInvoice = costData.find((inv) => inv.invoicePercent > 0);\r\n    }\r\n\r\n    onCloseSectionButtonClicked(\r\n        sectionModel: Section,\r\n        invoiceModel: InvoiceMarkingSearchResult[],\r\n        isAllocatedTrade: boolean,\r\n        sectionCancelDetails: CancelTrade,\r\n    ) {\r\n        const unpostedTradeInvoiceStatusList = new Array();\r\n        const cashUnMatchedInvoiceTradeList = new Array();\r\n        let invoiceMarkingGridRows: InvoiceMarkingSearchResult[];\r\n        let allocatedTradeValid: boolean = true;\r\n\r\n        const closeSectionModel: Section =\r\n            sectionModel === null ? this.sectionModel : sectionModel;\r\n\r\n        invoiceMarkingGridRows =\r\n            invoiceModel === null\r\n                ? this.invoiceMarkingTabComponent.detailedViewComponent\r\n                    .invoiceMarkingGridRows\r\n                : invoiceModel;\r\n\r\n        invoiceMarkingGridRows.forEach((x) => {\r\n            if (x.postingStatusId !== PostingStatus.Posted) {\r\n                unpostedTradeInvoiceStatusList.push(x);\r\n            }\r\n            if (\r\n                x.cashMatchDate === null ||\r\n                x.cashMatchDate.toDateString() ===\r\n                this.invoiceMarkingTabComponent.detailedViewComponent.defaultDate\r\n            ) {\r\n                cashUnMatchedInvoiceTradeList.push(x);\r\n            }\r\n        });\r\n        const invoicePercentage =\r\n            invoiceMarkingGridRows.length > 0\r\n                ? invoiceMarkingGridRows.reduce(function(a, b) {\r\n                    return a + b.invoicePercent;\r\n                },                              0)\r\n                : 0;\r\n        const costFilteredByInvoiceStatus = closeSectionModel.costs.filter(\r\n            (cost) => cost.invoiceStatus === InvoicingStatus.Uninvoiced,\r\n        );\r\n\r\n        let confirmPopupData = {};\r\n        let confirmSectionCloseSuccess: boolean = true;\r\n\r\n        // Trade is invoiced and\r\n        // No cash unmatched invoices, No unposted invoice and No uninvoced trade\r\n        if (\r\n            invoiceMarkingGridRows.length > 0 &&\r\n            invoicePercentage === 100 &&\r\n            unpostedTradeInvoiceStatusList.length === 0 &&\r\n            cashUnMatchedInvoiceTradeList.length === 0 &&\r\n            (costFilteredByInvoiceStatus === null ||\r\n                costFilteredByInvoiceStatus.length === 0)\r\n        ) {\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Close Trade',\r\n                    text: 'You are about to close this trade. Continue?',\r\n                    okButton: 'YES',\r\n                    cancelButton: 'NO',\r\n                },\r\n            };\r\n        } else if (\r\n            closeSectionModel.quantity === 0 ||\r\n            closeSectionModel.contractInvoiceTypeId ===\r\n            ContractInvoiceType.Cancellation\r\n        ) {\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Close Trade',\r\n                    text: 'You are about to close this trade. Continue?',\r\n                    okButton: 'YES',\r\n                    cancelButton: 'NO',\r\n                },\r\n            };\r\n        } else if (\r\n            closeSectionModel.invoicingStatusId !== InvoicingStatus.Finalized\r\n        ) {\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Blocking - Close Trade',\r\n                    text: 'Not allowed: Trade is not final invoiced.',\r\n                    okButton: 'Ok',\r\n                },\r\n            };\r\n            confirmSectionCloseSuccess = false;\r\n            if (isAllocatedTrade) {\r\n                allocatedTradeValid = false;\r\n            }\r\n        } else if (unpostedTradeInvoiceStatusList.length > 0) {\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Blocking - Close Trade',\r\n                    text: 'Not allowed: invoices are unposted.',\r\n                    okButton: 'Ok',\r\n                },\r\n            };\r\n            confirmSectionCloseSuccess = false;\r\n            if (isAllocatedTrade) {\r\n                allocatedTradeValid = false;\r\n            }\r\n        } else if (\r\n            closeSectionModel.blDate === null ||\r\n            closeSectionModel.blDate.toDateString() ===\r\n            this.invoiceMarkingTabComponent.detailedViewComponent.defaultDate\r\n        ) {\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Blocking - Close Trade',\r\n                    text:\r\n                        'Not allowed. The trade is unrealized physicals. Make the Quantity 0 or change the shipping status to close it.',\r\n                    okButton: 'Ok',\r\n                },\r\n            };\r\n            confirmSectionCloseSuccess = false;\r\n            if (isAllocatedTrade) {\r\n                allocatedTradeValid = false;\r\n            }\r\n        } else if (costFilteredByInvoiceStatus.length > 0) {\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Warning - Close Trade',\r\n                    text: 'Trade has cost accrual. Continue with closure?',\r\n                    okButton: 'YES',\r\n                    cancelButton: 'NO',\r\n                },\r\n            };\r\n        } else if (\r\n            unpostedTradeInvoiceStatusList.length === 0 &&\r\n            cashUnMatchedInvoiceTradeList.length > 0\r\n        ) {\r\n            confirmPopupData = {\r\n                data: {\r\n                    title: 'Warning - Close Trade',\r\n                    text: 'Invoice(s) are not cash matched. Continue with closure?',\r\n                    okButton: 'YES',\r\n                    cancelButton: 'NO',\r\n                },\r\n            };\r\n        }\r\n\r\n        if (!confirmSectionCloseSuccess) {\r\n            const alertCloseDialog = this.dialog.open(\r\n                ConfirmationDialogComponent,\r\n                confirmPopupData,\r\n            );\r\n            if (isAllocatedTrade) {\r\n                alertCloseDialog.afterClosed().subscribe((answer) => {\r\n                    this.closeTrades(this.sectionToClose, sectionCancelDetails);\r\n                });\r\n            } else if (\r\n                sectionCancelDetails !== null &&\r\n                sectionCancelDetails.isSectionClosed\r\n            ) {\r\n                alertCloseDialog.afterClosed().subscribe((answer) => {\r\n                    this.cancelTrades(sectionCancelDetails);\r\n                });\r\n            }\r\n        } else {\r\n            const confirmCloseDialog = this.dialog.open(\r\n                ConfirmationDialogComponent,\r\n                confirmPopupData,\r\n            );\r\n            confirmCloseDialog.afterClosed().subscribe((answer) => {\r\n                if (answer && !isAllocatedTrade) {\r\n                    this.sectionToClose.push({\r\n                        sectionId: closeSectionModel.sectionId,\r\n                        sectionCode: closeSectionModel.contractLabel,\r\n                    });\r\n\r\n                    if (\r\n                        closeSectionModel.allocatedTo !== null &&\r\n                        !closeSectionModel.allocatedTo.isClosed\r\n                    ) {\r\n                        const confirmCloseAllocationDialog = this.dialog.open(\r\n                            ConfirmationDialogComponent,\r\n                            {\r\n                                data: {\r\n                                    text:\r\n                                        'Do you want to close allocation ' +\r\n                                        closeSectionModel.allocatedTo.contractLabel,\r\n                                    okButton: 'YES',\r\n                                    cancelButton: 'NO',\r\n                                },\r\n                            },\r\n                        );\r\n                        confirmCloseAllocationDialog.afterClosed().subscribe((answer) => {\r\n                            if (answer) {\r\n                                let allocatedSectionModel: Section;\r\n                                let allocatedSectionInvoiceMarkingGridRows: InvoiceMarkingSearchResult[];\r\n\r\n                                this.subscriptions.push(\r\n                                    this.lockService\r\n                                        .isLockedContract(closeSectionModel.allocatedTo.sectionId)\r\n                                        .subscribe((lock: IsLocked) => {\r\n                                            if (lock.isLocked) {\r\n                                                const allocationTradeLockPopup = this.dialog.open(\r\n                                                    ConfirmationDialogComponent,\r\n                                                    {\r\n                                                        data: {\r\n                                                            title: 'Lock',\r\n                                                            text: lock.message,\r\n                                                            okButton: 'Got it',\r\n                                                        },\r\n                                                    },\r\n                                                );\r\n                                                allocationTradeLockPopup\r\n                                                    .afterClosed()\r\n                                                    .subscribe((answer) => {\r\n                                                        this.closeTrades(\r\n                                                            this.sectionToClose,\r\n                                                            sectionCancelDetails,\r\n                                                        );\r\n                                                    });\r\n                                            } else {\r\n                                                this.tradingService\r\n                                                    .getSection(\r\n                                                        closeSectionModel.allocatedTo.sectionId,\r\n                                                        0,\r\n                                                        this.dataVersionId,\r\n                                                    )\r\n                                                    .subscribe((data) => {\r\n                                                        allocatedSectionModel = data;\r\n                                                        if (\r\n                                                            data.invoiceReference &&\r\n                                                            (data.invoiceTypeId === InvoiceTypes.Cost ||\r\n                                                                data.invoiceTypeId ===\r\n                                                                InvoiceTypes.CostReceivable ||\r\n                                                                data.invoiceTypeId ===\r\n                                                                InvoiceTypes.CostCreditNote ||\r\n                                                                data.invoiceTypeId ===\r\n                                                                InvoiceTypes.CostDebitNote)\r\n                                                        ) {\r\n                                                            data.invoiceReference = null;\r\n                                                        }\r\n                                                        this.executionService\r\n                                                            .getInvoiceDetailsBySection(\r\n                                                                closeSectionModel.allocatedTo.sectionId,\r\n                                                                this.childFlag,\r\n                                                                this.dataVersionId,\r\n                                                            )\r\n                                                            .subscribe(\r\n                                                                (\r\n                                                                    data: ApiPaginatedCollection<\r\n                                                                        InvoiceMarkingSearchResult\r\n                                                                        >,\r\n                                                                ) => {\r\n                                                                    allocatedSectionInvoiceMarkingGridRows = this.invoiceMarkingTabComponent.detailedViewComponent.getDocumentTypeForGrid(\r\n                                                                        data.value,\r\n                                                                    );\r\n                                                                    for (const rows of allocatedSectionInvoiceMarkingGridRows) {\r\n                                                                        rows.cashMatchDate = this.invoiceMarkingTabComponent.detailedViewComponent.isDateNull(\r\n                                                                            rows.cashMatchDate,\r\n                                                                        )\r\n                                                                            ? null\r\n                                                                            : rows.cashMatchDate;\r\n                                                                    }\r\n\r\n                                                                    this.executionService\r\n                                                                        .GetSectionTrafficDetails(\r\n                                                                            closeSectionModel.allocatedTo.sectionId,\r\n                                                                            this.dataVersionId,\r\n                                                                        )\r\n                                                                        .subscribe((data: SectionTraffic) => {\r\n                                                                            if (data) {\r\n                                                                                this.onCloseSectionButtonClicked(\r\n                                                                                    allocatedSectionModel,\r\n                                                                                    allocatedSectionInvoiceMarkingGridRows,\r\n                                                                                    true,\r\n                                                                                    null,\r\n                                                                                );\r\n                                                                            }\r\n                                                                        });\r\n                                                                },\r\n                                                            );\r\n                                                    });\r\n                                            }\r\n                                        }),\r\n                                );\r\n                            } else {\r\n                                this.closeTrades(this.sectionToClose, sectionCancelDetails);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        this.closeTrades(this.sectionToClose, sectionCancelDetails);\r\n                    }\r\n                } else if (answer && allocatedTradeValid) {\r\n                    this.sectionToClose.push({\r\n                        sectionId: closeSectionModel.sectionId,\r\n                        sectionCode: closeSectionModel.contractLabel,\r\n                    });\r\n                    this.closeTrades(this.sectionToClose, sectionCancelDetails);\r\n                } else if (\r\n                    sectionCancelDetails !== null &&\r\n                    sectionCancelDetails.isSectionClosed\r\n                ) {\r\n                    this.cancelTrades(sectionCancelDetails);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private closeTrades(\r\n        sectionIToClose: any[],\r\n        sectionCancelDetails: CancelTrade,\r\n    ) {\r\n        const sectionIdsToClose = new Array();\r\n        sectionIToClose.forEach((element) => {\r\n            sectionIdsToClose.push(element.sectionId);\r\n        });\r\n        this.subscriptions.push(\r\n            this.tradingService\r\n                .closeSection(sectionIdsToClose, this.childFlag, this.dataVersionId)\r\n                .subscribe((ok) => {\r\n                    if (ok) {\r\n                        const title =\r\n                            sectionIToClose.length > 1\r\n                                ? sectionIToClose[0].sectionCode +\r\n                                ' and ' +\r\n                                sectionIToClose[1].sectionCode +\r\n                                ' are now closed.'\r\n                                : sectionIToClose[0].sectionCode + ' is now closed.';\r\n                        const closeInfoPopup = this.dialog.open(\r\n                            ConfirmationDialogComponent,\r\n                            {\r\n                                data: {\r\n                                    title: 'Trade Closed',\r\n                                    text: title,\r\n                                    okButton: 'Ok',\r\n                                },\r\n                            },\r\n                        );\r\n                        closeInfoPopup.afterClosed().subscribe((answer) => {\r\n                            if (!this.dataVersionId) {\r\n                                if (\r\n                                    sectionCancelDetails !== null &&\r\n                                    sectionCancelDetails.isSectionClosed\r\n                                ) {\r\n                                    this.cancelTrades(sectionCancelDetails);\r\n                                } else {\r\n                                    this.router.navigate([\r\n                                        this.companyManager.getCurrentCompanyId() +\r\n                                        '/trades/display/' +\r\n                                        this.sectionId,\r\n                                    ]);\r\n                                }\r\n                            } else {\r\n                                this.router.navigate([\r\n                                    this.companyManager.getCurrentCompanyId() +\r\n                                    '/trades/snapshot/' +\r\n                                    this.dataVersionId +\r\n                                    '/display/' +\r\n                                    this.sectionId,\r\n                                ]);\r\n                            }\r\n                        });\r\n                    }\r\n                }),\r\n        );\r\n    }\r\n\r\n    onReopenSectionButtonClicked() {\r\n        if (\r\n            this.sectionModel.assignedCharterReference === null ||\r\n            this.sectionModel.charterStatusId === null ||\r\n            this.sectionModel.charterStatusId === CharterStatus.Open\r\n        ) {\r\n            const sectionsToReOpen = new Array();\r\n            sectionsToReOpen.push({\r\n                sectionId: this.sectionModel.sectionId,\r\n                sectionCode: this.sectionModel.contractLabel,\r\n            });\r\n\r\n            if (\r\n                this.sectionModel.allocatedTo != null &&\r\n                this.sectionModel.allocatedTo.isClosed\r\n            ) {\r\n                const confirmReopenDialog = this.dialog.open(\r\n                    ConfirmationDialogComponent,\r\n                    {\r\n                        data: {\r\n                            title: 'Reopen Trade',\r\n                            text:\r\n                                'This contract is allocated to contract ' +\r\n                                this.sectionModel.allocatedTo.contractLabel +\r\n                                ', Do you wish to reopen this contract too? ',\r\n                            okButton: 'YES',\r\n                            cancelButton: 'NO',\r\n                        },\r\n                    },\r\n                );\r\n                confirmReopenDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        sectionsToReOpen.push({\r\n                            sectionId: this.sectionModel.allocatedTo.sectionId,\r\n                            sectionCode: this.sectionModel.allocatedTo.contractLabel,\r\n                        });\r\n                    }\r\n                    this.reopenTrades(sectionsToReOpen);\r\n                });\r\n            } else {\r\n                this.reopenTrades(sectionsToReOpen);\r\n            }\r\n        } else if (this.sectionModel.charterStatusId === CharterStatus.Closed) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Blocking - Reopen Trade',\r\n                    text:\r\n                        'Not allowed. Trade assigned to closed Charter ' +\r\n                        this.sectionModel.assignedCharterReference +\r\n                        '.',\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private reopenTrades(sectionToReopen: any[]) {\r\n        const sectionIdsToReopen = new Array();\r\n        sectionToReopen.forEach((element) => {\r\n            sectionIdsToReopen.push(element.sectionId);\r\n        });\r\n        this.subscriptions.push(\r\n            this.tradingService\r\n                .reOpenSection(sectionIdsToReopen, this.dataVersionId)\r\n                .subscribe((ok) => {\r\n                    if (ok) {\r\n                        const title =\r\n                            sectionToReopen.length > 1\r\n                                ? sectionToReopen[0].sectionCode +\r\n                                ' and ' +\r\n                                sectionToReopen[1].sectionCode +\r\n                                ' are now reopend'\r\n                                : sectionToReopen[0].sectionCode + ' is now reopened.';\r\n                        const reopenInfoPopup = this.dialog.open(\r\n                            ConfirmationDialogComponent,\r\n                            {\r\n                                data: {\r\n                                    title: 'Trade Reopened',\r\n                                    text: title,\r\n                                    okButton: 'Ok',\r\n                                },\r\n                            },\r\n                        );\r\n                        reopenInfoPopup.afterClosed().subscribe((answer) => {\r\n                            if (!this.dataVersionId) {\r\n                                this.router.navigate([\r\n                                    this.companyManager.getCurrentCompanyId() +\r\n                                    '/trades/display/' +\r\n                                    this.sectionId,\r\n                                ]);\r\n                            } else {\r\n                                this.router.navigate([\r\n                                    this.companyManager.getCurrentCompanyId() +\r\n                                    '/trades/snapshot/' +\r\n                                    this.dataVersionId +\r\n                                    '/display/' +\r\n                                    this.sectionId,\r\n                                ]);\r\n                            }\r\n                        });\r\n                    }\r\n                }),\r\n        );\r\n    }\r\n\r\n    onCloseApprovalBannerClicked() {\r\n        this.isApprovalBannerDisplayed = false;\r\n    }\r\n\r\n    onGenerateButtonClicked() {\r\n        this.tradeActionsService.contractAdviceSubject.next(\r\n            this.sectionModel.sectionId,\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.isEdit) {\r\n            this.stopLockRefresh();\r\n            this.lockService\r\n                .unlockContract(this.sectionId, LockFunctionalContext.TradeEdit)\r\n                .subscribe();\r\n        }\r\n\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n    createSplitForDecreaseQuantity(\r\n        tradeSplitCreationOnQuantityAdjust: boolean,\r\n        alloatedTradeSplitCreationOnQuantityAdjust: boolean,\r\n        allocationOfTrades: boolean,\r\n    ) {\r\n        const sectionIds: number[] = [];\r\n        const contractedValues: string[] = [];\r\n        const splitQuantity = this.originalQuantity - this.quantityTrafficSplit;\r\n\r\n        if (tradeSplitCreationOnQuantityAdjust) {\r\n            sectionIds.push(this.model.sectionId);\r\n            contractedValues.push(\r\n                this.setContractValue(this.sectionModel, splitQuantity),\r\n            );\r\n        }\r\n\r\n        if (this.model.allocatedTo && alloatedTradeSplitCreationOnQuantityAdjust) {\r\n            sectionIds.push(this.model.allocatedTo.sectionId);\r\n            contractedValues.push(\r\n                this.setContractValue(this.tragetSectionModel, splitQuantity),\r\n            );\r\n        }\r\n\r\n        this.tradingService\r\n            .createSplitForContract(\r\n                sectionIds,\r\n                splitQuantity,\r\n                this.dataVersionId,\r\n                contractedValues,\r\n            )\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    const splitResult = data as TrancheSplitCreationResult[];\r\n                    if (splitResult.length > 0) {\r\n                        // Section traffic update\r\n                        if (this.sectionModel.charterId) {\r\n                            const sectionTrafficList: SectionTraffic[] = [];\r\n                            splitResult.forEach((element) => {\r\n                                const sectionTraffic: SectionTraffic = new SectionTraffic();\r\n                                sectionTraffic.sectionId = element.sectionId;\r\n                                sectionTraffic.blDate = this.trafficTabComponent.blInfoComponent\r\n                                    .blDateCtrl.value\r\n                                    ? new Date(\r\n                                        this.trafficTabComponent.blInfoComponent.blDateCtrl.value,\r\n                                    )\r\n                                    : null;\r\n                                sectionTraffic.blReference = this.trafficTabComponent.blInfoComponent.blReferenceCtrl.value;\r\n                                sectionTraffic.vesselCode = this.trafficTabComponent\r\n                                    .shipmentInfoComponent.vesselCtrl.value\r\n                                    ? this.trafficTabComponent.shipmentInfoComponent.vesselCtrl\r\n                                        .value.vesselName\r\n                                    : null;\r\n                                sectionTraffic.shippingStatusCode = this.trafficTabComponent\r\n                                    .shipmentInfoComponent.shippingStatusCtrl.value\r\n                                    ? this.trafficTabComponent.shipmentInfoComponent.shippingStatus.find(\r\n                                        (shipping) =>\r\n                                            shipping.description ===\r\n                                            this.trafficTabComponent.shipmentInfoComponent\r\n                                                .shippingStatusCtrl.value,\r\n                                    ).shippingStatusCode\r\n                                    : null;\r\n\r\n                                sectionTraffic.dataVersionId = this.dataVersionId;\r\n                                sectionTrafficList.push(sectionTraffic);\r\n                            });\r\n\r\n                            this.subscriptions.push(\r\n                                this.executionService\r\n                                    .assignSectionsToCharter(\r\n                                        this.sectionModel.charterId,\r\n                                        sectionTrafficList,\r\n                                    )\r\n                                    .pipe(map(() => { }))\r\n                                    .subscribe(),\r\n                            );\r\n                        }\r\n\r\n                        // Section costs\r\n                        const childSections: ChildSectionsToSplit[] = data.map(\r\n                            (sectionCreated) =>\r\n                                new ChildSectionsToSplit(\r\n                                    sectionCreated.sectionId,\r\n                                    splitQuantity,\r\n                                ),\r\n                        );\r\n                        this.tradingService\r\n                            .splitCostsForSection(this.model.sectionId, childSections)\r\n                            .subscribe(() => { });\r\n\r\n                        // Section allocated update\r\n                        if (this.model.allocatedTo) {\r\n                            if (allocationOfTrades) {\r\n                                this.executionService\r\n                                    .getAllocationBySectionId(\r\n                                        this.model.sectionId,\r\n                                        this.dataVersionId,\r\n                                    )\r\n                                    .subscribe((allocatedResult: Allocation) => {\r\n                                        const allocateSectionModel: AllocateSection[] = [];\r\n                                        const allocateSectionElement: AllocateSection = new AllocateSection();\r\n                                        allocateSectionElement.sectionId = splitResult[0].sectionId;\r\n                                        allocateSectionElement.allocatedSectionId =\r\n                                            splitResult[1].sectionId;\r\n                                        allocateSectionElement.quantity = splitQuantity;\r\n                                        allocateSectionElement.shippingType =\r\n                                            allocatedResult.transferShippingOptionId;\r\n                                        allocateSectionElement.dataVersionId = this.dataVersionId;\r\n                                        allocateSectionModel.push(allocateSectionElement);\r\n                                        this.executionService\r\n                                            .allocateSections(allocateSectionModel)\r\n                                            .subscribe(() => {\r\n                                                this.snackbarService.informationSnackBar(\r\n                                                    splitResult[0].contractLabel +\r\n                                                    ' and ' +\r\n                                                    splitResult[1].contractLabel +\r\n                                                    ' have been created and allocated ',\r\n                                                );\r\n                                            });\r\n                                    });\r\n                            } else if (splitResult.length > 1) {\r\n                                const message =\r\n                                    splitResult[0].contractLabel +\r\n                                    ' and ' +\r\n                                    splitResult[1].contractLabel +\r\n                                    ' have been created without allocation ';\r\n                                this.snackbarService.informationAndCopySnackBar(\r\n                                    message,\r\n                                    message,\r\n                                );\r\n                            } else {\r\n                                this.snackbarService.informationAndCopySnackBar(\r\n                                    splitResult[0].contractLabel + ' has been created ',\r\n                                    splitResult[0].contractLabel,\r\n                                );\r\n                            }\r\n                            this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                                new SectionTabIndex(this.sectionId, this.selectedTab),\r\n                            );\r\n                        } else {\r\n                            this.snackbarService.informationAndCopySnackBar(\r\n                                splitResult[0].contractLabel + ' created not allocated',\r\n                                splitResult[0].contractLabel,\r\n                            );\r\n                        }\r\n\r\n                        this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                            new SectionTabIndex(this.sectionId, this.selectedTab),\r\n                        );\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    // --Trade Image\r\n    onImageButtonClicked() {\r\n        this.openTradeImageDialog();\r\n    }\r\n\r\n    // --Save Trade As Favourite\r\n    onSaveAsFavoriteClicked() {\r\n        this.openSaveAsFavouriteDialog();\r\n    }\r\n\r\n    openSaveAsFavouriteDialog() {\r\n        const company = this.route.snapshot.paramMap.get('company');\r\n        this.dialog.open(SaveAsFavouriteDialogComponent, {\r\n            data: {\r\n                title: this.sectionModel.contractLabel,\r\n                sectionId: this.sectionId,\r\n                companyId: company,\r\n            },\r\n            width: '50%',\r\n        });\r\n    }\r\n\r\n    openTradeImageDialog(): void {\r\n        const company = this.route.snapshot.paramMap.get('company');\r\n        const parentSectionNumber =\r\n            this.sectionModel.sectionNumber === '0000' ? true : false;\r\n        const isAllocateContractDisabled =\r\n            this.sectionModel.allocatedTo === null &&\r\n                this.sectionModel.quantity !== 0 &&\r\n                this.sectionModel.status !== ContractStatus.Unapproved\r\n                ? false\r\n                : true;\r\n        const tradeImageDialog = this.dialog.open(TradeImageDialogComponent, {\r\n            data: {\r\n                title: this.sectionModel.contractLabel,\r\n                type: ContractTypes[this.sectionModel.contractType],\r\n                companyId: company,\r\n                childContracts: this.childSectionsSearchResult.filter(\r\n                    (val) => val.sectionOriginId === this.sectionModel.sectionId,\r\n                ).length,\r\n                parentTrade: parentSectionNumber,\r\n                isAllocateContractDisabled,\r\n                childContractDetails: this.sectionModel.childSections,\r\n                isCancelledTrade: this.sectionModel.isCancelled,\r\n            },\r\n            width: '700px',\r\n        });\r\n\r\n        this.subscriptions.push(\r\n            tradeImageDialog.afterClosed().subscribe((result: TradeImage) => {\r\n                if (result !== undefined) {\r\n                    this.subscriptions.push(\r\n                        this.tradingService\r\n                            .getSection(this.sectionId, PricingMethods.Priced)\r\n                            .subscribe((data: Section) => {\r\n                                this.formComponents.forEach((comp) => {\r\n                                    comp.initForm(data, this.isEdit);\r\n                                });\r\n                            }),\r\n                    );\r\n                    if (result.numberOfContracts > 1) {\r\n                        this.router.navigate(\r\n                            [\r\n                                this.companyManager.getCurrentCompanyId() + '/trades/image',\r\n                                this.sectionModel.sectionId,\r\n                                result.numberOfContracts,\r\n                            ],\r\n                            {\r\n                                queryParams: {\r\n                                    numberOfContract: result.numberOfContracts,\r\n                                    type: result.type,\r\n                                    splitAndTranche: result.trancheAndSplit,\r\n                                    imageEstimates: result.imageEstimates,\r\n                                    costMatrixId: result.costMatrixId,\r\n                                    tradeImageDetails: JSON.stringify(result.tradeImageField),\r\n                                    allocateContract: result.allocateContract,\r\n                                },\r\n                                skipLocationChange: true,\r\n                            },\r\n                        );\r\n                    } else {\r\n                        this.router.navigate(\r\n                            [\r\n                                this.companyManager.getCurrentCompanyId() + '/trades/image',\r\n                                this.sectionModel.sectionId,\r\n                            ],\r\n                            {\r\n                                queryParams: {\r\n                                    numberOfContract: result.numberOfContracts,\r\n                                    type: result.type,\r\n                                    splitAndTranche: result.trancheAndSplit,\r\n                                    imageEstimates: result.imageEstimates,\r\n                                    costMatrixId: result.costMatrixId,\r\n                                    tradeImageDetails: JSON.stringify(result.tradeImageField),\r\n                                    allocateContract: result.allocateContract,\r\n                                },\r\n                                skipLocationChange: true,\r\n                            },\r\n                        );\r\n                    }\r\n                }\r\n            }),\r\n        );\r\n    }\r\n\r\n    updateAllocatedTradeQuantity() {\r\n        if (this.model.allocatedTo) {\r\n            const allocatedSectionId = this.model.allocatedTo.sectionId;\r\n            let allocatedSectionModel: PhysicalFixedPricedContract;\r\n            this.tradingService\r\n                .getSection(allocatedSectionId, 0, this.dataVersionId)\r\n                .subscribe((data) => {\r\n                    this.tradingService\r\n                        .getChildSections(allocatedSectionId, this.dataVersionId)\r\n                        .subscribe((childSections: ChildSectionsSearchResult[]) => {\r\n                            this.childSectionsSearchResult = childSections;\r\n                            data.childSections = childSections.map((childSectionResult) => {\r\n                                const childSection = new Section();\r\n                                childSection.setSectionFromChildSectionsSearchResult(\r\n                                    childSectionResult,\r\n                                    this.sectionModel.sectionId,\r\n                                );\r\n                                return childSection;\r\n                            });\r\n                            allocatedSectionModel = this.convertToPhysicalFixedPricedContract(\r\n                                data,\r\n                            );\r\n                            this.tradingService\r\n                                .updatePhysicalContract(data.contractId, allocatedSectionModel)\r\n                                .subscribe(() => {\r\n                                    this.tradingService\r\n                                        .unapproveSection(allocatedSectionId)\r\n                                        .subscribe((ok) => {\r\n                                            if (ok) {\r\n                                                if (this.dataVersionId) {\r\n                                                    this.tradeActionsService.displaySectionInSnapshotSubject.next(\r\n                                                        new SectionReference(\r\n                                                            this.sectionId,\r\n                                                            this.dataVersionId,\r\n                                                        ),\r\n                                                    );\r\n                                                } else {\r\n                                                    this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                                                        new SectionTabIndex(\r\n                                                            this.sectionId,\r\n                                                            this.selectedTab,\r\n                                                        ),\r\n                                                    );\r\n                                                }\r\n                                                this.snackbarService.informationSnackBar(\r\n                                                    this.sectionModel.contractLabel +\r\n                                                    ' quantity has been adjusted. ' +\r\n                                                    data.contractLabel +\r\n                                                    ' quantity has been adjusted.',\r\n                                                );\r\n                                            }\r\n                                        });\r\n                                });\r\n                        });\r\n                });\r\n        }\r\n    }\r\n\r\n    convertToPhysicalFixedPricedContract(\r\n        section: Section,\r\n    ): PhysicalFixedPricedContract {\r\n        let physicalFixedPricedContract = new PhysicalFixedPricedContract();\r\n        this.formComponents.forEach((comp) => {\r\n            comp.initForm(section, this.isEdit);\r\n        });\r\n        this.formComponents.forEach((comp) => {\r\n            physicalFixedPricedContract = comp.populateEntity(\r\n                physicalFixedPricedContract,\r\n            );\r\n        });\r\n        physicalFixedPricedContract.previousQuantity = section.quantity;\r\n        physicalFixedPricedContract.quantity = this.isWeightConvertedForSplit\r\n            ? section.quantity.toString()\r\n            : this.quantityTrafficSplit.toString();\r\n        physicalFixedPricedContract.originalQuantity = this.quantityTrafficSplit;\r\n        physicalFixedPricedContract.sectionId = section.sectionId;\r\n        physicalFixedPricedContract.dataVersionId = this.dataVersionId;\r\n        return physicalFixedPricedContract;\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.isSave = true;\r\n        this.lockService\r\n            .unlockContract(this.sectionId, LockFunctionalContext.TradeEdit)\r\n            .subscribe();\r\n        this.location.back();\r\n    }\r\n\r\n    setCashMatchDate(cashMatchDate: any) {\r\n        if (cashMatchDate) {\r\n            cashMatchDate = this.formatDate.transform(cashMatchDate);\r\n            this.statusTabComponent.cashAgainstInvoiceComponent.hasEmptyState = false;\r\n            this.statusTabComponent.cashAgainstInvoiceComponent.cashMatchDateCtrl.patchValue(\r\n                cashMatchDate,\r\n            );\r\n        }\r\n    }\r\n    onBlDateUpdated(blUpdatedDate) {\r\n        this.statusTabComponent.charterComponent.setBlDate(blUpdatedDate);\r\n    }\r\n\r\n    onSplitTranchesSideNavOpenedChanged(event) {\r\n        const lockFunctionalContext = this.getLockFunctionalContext();\r\n        if (this.sideNavOpened) {\r\n            this.subscriptions.push(\r\n                this.lockService\r\n                    .lockContract(this.sectionModel.sectionId, lockFunctionalContext)\r\n                    .subscribe(\r\n                        () => {\r\n                            this.startLockRefresh();\r\n                        },\r\n                        (err) => {\r\n                            const confirmDialog = this.dialog.open(\r\n                                ConfirmationDialogComponent,\r\n                                {\r\n                                    data: {\r\n                                        title: 'Lock',\r\n                                        text: err.error.detail,\r\n                                        okButton: 'Got it',\r\n                                    },\r\n                                },\r\n                            );\r\n                            this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                                new SectionTabIndex(this.sectionId, this.selectedTab),\r\n                            );\r\n                        },\r\n                    ),\r\n            );\r\n        } else if (!this.isEdit) {\r\n            this.stopLockRefresh();\r\n            this.subscriptions.push(\r\n                this.lockService\r\n                    .unlockContract(this.sectionModel.sectionId, lockFunctionalContext)\r\n                    .subscribe(),\r\n            );\r\n        }\r\n    }\r\n\r\n    getLockFunctionalContext(): LockFunctionalContext {\r\n        let lockFunctionalContext = LockFunctionalContext.TradeTranche;\r\n        if (this.sideNavScreen === SectionTypes.Split) {\r\n            lockFunctionalContext = LockFunctionalContext.TradeSplit;\r\n        }\r\n        return lockFunctionalContext;\r\n    }\r\n\r\n    startLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Contract';\r\n        resourceInformation.resourceId = this.sectionId;\r\n        resourceInformation.resourceCode = this.contractLabel;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n    onTotalInvoiceValue(model: any) {\r\n        this.totalInvoiceValuePercent = 0;\r\n        this.totalInvoiceValuePercent = model.totalInvoiceValuePercent;\r\n    }\r\n\r\n    changeStatusForAllocatedContract(allocatedSectionId: number) {\r\n        this.subscriptions.push(\r\n            this.tradingService.unapproveSection(allocatedSectionId).subscribe(\r\n                (data) => { },\r\n                (error) => {\r\n                    console.error(error);\r\n                },\r\n            ),\r\n        );\r\n    }\r\n    zeroCosRowWarning(model: any) {\r\n        this.isZeroCostRow = model.isZeroRowExist;\r\n    }\r\n\r\n    onShowDiscard() {\r\n        this.isSave = true;\r\n        this.location.back();\r\n    }\r\n\r\n    onShowSave() {\r\n        this.save();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.onShowDiscard();\r\n    }\r\n\r\n    onTotalValuesCalculated(model: any) {\r\n        this.statusTabComponent.totalValuesCalculated(model);\r\n    }\r\n\r\n    // -- Comment A001\r\n    // To initialize this component and have the actions proposed to the user, we need to understand which mode the user is in\r\n    // Creation / Edition-> Save; Cancel\r\n    // View Mode -> Edit, Previous\r\n    // The mode in which the user is in is set IN SPECIFIC PLACES IN THE CODE.\r\n    // This method can only be called AFTER THE MODE HAS BEEN SET\r\n    initFABActions() {\r\n        this.fabTitle = 'Trade Add/Edit FAB mini';\r\n        this.fabType = FABType.MiniFAB;\r\n\r\n        const actionItemSave: FloatingActionButtonActions = {\r\n            icon: 'save',\r\n            text: 'Save',\r\n            action: 'save',\r\n            disabled: false,\r\n            index: 2,\r\n        };\r\n        const actionItemCancel: FloatingActionButtonActions = {\r\n            icon: 'keyboard_backspace',\r\n            text: 'Cancel',\r\n            action: 'cancel',\r\n            disabled: false,\r\n            index: 3,\r\n        };\r\n\r\n        const actionItemEdit: FloatingActionButtonActions = {\r\n            icon: 'edit',\r\n            text: 'Edit Trade',\r\n            action: 'editTrade',\r\n            index: 0,\r\n            disabled: this.isClosed ? true : false,\r\n        };\r\n\r\n        const actionItemCreate: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'Create Trade',\r\n            action: 'createTrade',\r\n            index: 1,\r\n            disabled: false,\r\n        };\r\n\r\n        if (this.isShow && !this.isEdit) {\r\n            const createTradePrivilegeLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                this.createTradeActionPrivilege.privilegeName,\r\n                this.createTradeActionPrivilege.privilegeParentLevelOne,\r\n                this.createTradeActionPrivilege.privilegeParentLevelTwo,\r\n            );\r\n\r\n            const hasCreateTradePrivilege =\r\n                createTradePrivilegeLevel >= this.createTradeActionPrivilege.permission;\r\n            if (hasCreateTradePrivilege) {\r\n                this.fabMenuActions.push(actionItemCreate);\r\n            }\r\n\r\n            const editTradePrivilegeLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                this.editTradeActionPrivilege.privilegeName,\r\n                this.editTradeActionPrivilege.privilegeParentLevelOne,\r\n                this.editTradeActionPrivilege.privilegeParentLevelTwo,\r\n            );\r\n\r\n            const hasEditTradePrivilege =\r\n                editTradePrivilegeLevel >= this.editTradeActionPrivilege.permission;\r\n            if (hasEditTradePrivilege) {\r\n                this.fabMenuActions.push(actionItemEdit);\r\n            }\r\n        } else {\r\n            this.fabMenuActions.push(actionItemCancel);\r\n            actionItemSave.disabled = this.isSaveActionDisabled;\r\n            this.fabMenuActions.push(actionItemSave);\r\n        }\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'save': {\r\n                this.onSaveButtonClicked();\r\n                break;\r\n            }\r\n            case 'cancel': {\r\n                this.onCancelButtonClicked();\r\n                break;\r\n            }\r\n            case 'createTrade': {\r\n                this.onNewTradeButtonClicked();\r\n                break;\r\n            }\r\n            case 'editTrade': {\r\n                this.onEditTradeButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    onNewTradeButtonClicked() {\r\n        if (this.dataVersionId) {\r\n            this.tradeActionsService.newTradeInSnapshotSubject.next(\r\n                this.dataVersionId,\r\n            );\r\n        } else {\r\n            this.tradeActionsService.newTradeSubject.next();\r\n        }\r\n    }\r\n\r\n    onEditTradeButtonClicked() {\r\n        this.subscriptions.push(\r\n            this.lockService\r\n                .isLockedContract(this.sectionId)\r\n                .subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                    } else {\r\n                        if (this.dataVersionId) {\r\n                            const sectionInformation = new SectionReference(\r\n                                this.sectionId,\r\n                                this.dataVersionId,\r\n                                this.selectedTab,\r\n                            );\r\n                            this.tradeActionsService.editSectionInSnapshotSubject.next(\r\n                                sectionInformation,\r\n                            );\r\n                        } else {\r\n                            const sectionInformation = new SectionTabIndex(\r\n                                this.sectionId,\r\n                                this.selectedTab,\r\n                            );\r\n                            this.tradeActionsService.editSectionSubject.next(\r\n                                sectionInformation,\r\n                            );\r\n                        }\r\n                    }\r\n                }),\r\n        );\r\n    }\r\n\r\n    updatePhysicalContract() {\r\n        let tradeSplitCreationOnQuantityAdjust: boolean = false;\r\n        let adjustAllocatedTradeQuantityAdjusted = false;\r\n        let currentTradeQuantityAdjusted = false;\r\n        let alloatedTradeSplitCreationOnQuantityAdjust: boolean = false;\r\n        let isSplitCreated: boolean = false;\r\n        let allocationOfTrades = false;\r\n        this.subscriptions.push(\r\n            this.lockService\r\n                .validateContractOperation(\r\n                    LockFunctionalContext.TradeEdit,\r\n                    this.sectionModel.sectionId,\r\n                    this.model.allocatedTo,\r\n                )\r\n                .subscribe((lockErrors) => {\r\n                    if (lockErrors != null && lockErrors !== '') {\r\n                        this.saveInProgress = false;\r\n                        this.snackbarService.informationSnackBar(lockErrors);\r\n                        return;\r\n                    } else {\r\n                        this.model.sectionId = this.sectionId;\r\n                        this.model.invoiceReference = this.sectionModel.invoiceReference;\r\n                        if (this.trafficTabQuantity) {\r\n                            this.model.quantity = this.trafficTabQuantity.toString();\r\n                        }\r\n                        if (this.isEdit) {\r\n                            this.sectionTrafficModel = new SectionTraffic();\r\n                            this.sectionTrafficModel.sectionId = this.sectionId;\r\n                            this.sectionTrafficModel.contractDate = this.model.contractDate;\r\n                            this.sectionTrafficModel.blDate = this.trafficTabComponent.blInfoComponent.blDateCtrl.value;\r\n                            this.sectionTrafficModel.blReference = this.trafficTabComponent.blInfoComponent.blReferenceCtrl.value;\r\n                            const selectedVessel: Vessel = this.trafficTabComponent\r\n                                .shipmentInfoComponent.vesselCtrl.value;\r\n                            this.sectionTrafficModel.vesselCode = selectedVessel\r\n                                ? selectedVessel.vesselName\r\n                                : null;\r\n                            this.sectionTrafficModel.shippingStatusCode = this\r\n                                .trafficTabComponent.shipmentInfoComponent.shippingStatusCtrl\r\n                                .value\r\n                                ? this.trafficTabComponent.shipmentInfoComponent.shippingStatus.find(\r\n                                    (shipping) =>\r\n                                        shipping.description ===\r\n                                        this.trafficTabComponent.shipmentInfoComponent\r\n                                            .shippingStatusCtrl.value,\r\n                                ).shippingStatusCode\r\n                                : null;\r\n                            this.model.previousQuantity = this.sectionModel.quantity;\r\n\r\n                            if (\r\n                                this.originalQuantity !== Number(this.model.quantity) &&\r\n                                (this.model.type === ContractTypes.Purchase ||\r\n                                    this.sectionModel.contractType === ContractTypes.Sale)\r\n                            ) {\r\n                                if (!this.model.allocatedTo) {\r\n                                    if (\r\n                                        this.model.currentTradeOptionId ===\r\n                                        CurrentTradeOption.CreateUnallocatedResidualSplit\r\n                                    ) {\r\n                                        tradeSplitCreationOnQuantityAdjust = true;\r\n                                        this.model.quantity = this.originalQuantity.toString();\r\n                                    } else if (\r\n                                        this.model.currentTradeOptionId ===\r\n                                        CurrentTradeOption.AdjustContract\r\n                                    ) {\r\n                                        currentTradeQuantityAdjusted = true;\r\n                                        adjustAllocatedTradeQuantityAdjusted = false;\r\n                                        this.model.contractedValue = this.getContractValue(\r\n                                            this.sectionModel,\r\n                                            Number(this.model.quantity),\r\n                                        );\r\n                                    }\r\n                                } else {\r\n                                    switch (this.model.currentTradeOptionId) {\r\n                                        case CurrentTradeOption.AdjustContract:\r\n                                            if (\r\n                                                this.model.allocateTradeOptionId ===\r\n                                                AllocateTradeOption.AdjustAllocation\r\n                                            ) {\r\n                                                currentTradeQuantityAdjusted = true;\r\n                                                adjustAllocatedTradeQuantityAdjusted = true;\r\n                                                this.model.contractedValue = this.getContractValue(\r\n                                                    this.sectionModel,\r\n                                                    Number(this.model.quantity),\r\n                                                );\r\n                                            } else if (\r\n                                                this.model.allocateTradeOptionId ===\r\n                                                AllocateTradeOption.CreateUnallocatedResidualSplit\r\n                                            ) {\r\n                                                currentTradeQuantityAdjusted = true;\r\n                                                alloatedTradeSplitCreationOnQuantityAdjust = true;\r\n                                            }\r\n                                            break;\r\n                                        case CurrentTradeOption.CreateAllocatedResidualSplit:\r\n                                            if (\r\n                                                this.model.allocateTradeOptionId ===\r\n                                                AllocateTradeOption.LeaveStatus\r\n                                            ) {\r\n                                                tradeSplitCreationOnQuantityAdjust = true;\r\n                                                alloatedTradeSplitCreationOnQuantityAdjust = true;\r\n                                                allocationOfTrades = true;\r\n                                                this.model.quantity = this.originalQuantity.toString();\r\n                                            }\r\n                                            break;\r\n                                        case CurrentTradeOption.CreateUnallocatedResidualSplit:\r\n                                            if (\r\n                                                this.model.allocateTradeOptionId ===\r\n                                                AllocateTradeOption.CreateUnallocatedResidualSplit\r\n                                            ) {\r\n                                                tradeSplitCreationOnQuantityAdjust = true;\r\n                                                alloatedTradeSplitCreationOnQuantityAdjust = true;\r\n                                                this.model.quantity = this.originalQuantity.toString();\r\n                                            } else if (\r\n                                                this.model.allocateTradeOptionId ===\r\n                                                AllocateTradeOption.AdjustAllocation\r\n                                            ) {\r\n                                                tradeSplitCreationOnQuantityAdjust = true;\r\n                                                adjustAllocatedTradeQuantityAdjusted = true;\r\n                                                this.model.quantity = this.originalQuantity.toString();\r\n                                            }\r\n                                            break;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            this.invoiceMarking = this.model.invoices;\r\n                            this.invoiceStatusId = this.model.invoiceStatus;\r\n                            this.model.dataVersionId = this.dataVersionId;\r\n                            this.sectionTrafficModel.dataVersionId = this.dataVersionId;\r\n                            isSplitCreated =\r\n                                tradeSplitCreationOnQuantityAdjust ||\r\n                                alloatedTradeSplitCreationOnQuantityAdjust;\r\n\r\n                            const selectedCounterparty = this.mainTabComponent\r\n                                .counterpartyComponent.selectedCounterparty;\r\n                            if (selectedCounterparty) {\r\n                                this.companyManager\r\n                                    .getConfiguration(selectedCounterparty.counterpartyID)\r\n                                    .subscribe((data) => {\r\n                                        if (data.length > 0 && data[0].isCounterpartyGroupAccount) {\r\n                                            this.intercoModelForEdit(\r\n                                                isSplitCreated,\r\n                                                currentTradeQuantityAdjusted,\r\n                                                adjustAllocatedTradeQuantityAdjusted,\r\n                                                tradeSplitCreationOnQuantityAdjust,\r\n                                                alloatedTradeSplitCreationOnQuantityAdjust,\r\n                                                allocationOfTrades,\r\n                                                data,\r\n                                            );\r\n                                        } else {\r\n                                            this.updateContractDetails(\r\n                                                isSplitCreated,\r\n                                                currentTradeQuantityAdjusted,\r\n                                                adjustAllocatedTradeQuantityAdjusted,\r\n                                                tradeSplitCreationOnQuantityAdjust,\r\n                                                alloatedTradeSplitCreationOnQuantityAdjust,\r\n                                                allocationOfTrades,\r\n                                            );\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                this.updateContractDetails(\r\n                                    isSplitCreated,\r\n                                    currentTradeQuantityAdjusted,\r\n                                    adjustAllocatedTradeQuantityAdjusted,\r\n                                    tradeSplitCreationOnQuantityAdjust,\r\n                                    alloatedTradeSplitCreationOnQuantityAdjust,\r\n                                    allocationOfTrades,\r\n                                );\r\n                            }\r\n                        } else {\r\n                            this.model.dataVersionId = this.dataVersionId;\r\n                            this.subscriptions.push(\r\n                                this.tradingService\r\n                                    .updatePhysicalContract(this.contractId, this.model)\r\n                                    .subscribe(\r\n                                        (res) => {\r\n                                            const result = res[0];\r\n\r\n                                            let messageText =\r\n                                                'Contract updated with reference: ' +\r\n                                                this.contractLabel;\r\n                                            let copyText = this.contractLabel;\r\n                                            if (result && result[0] && result[0].contractLabel) {\r\n                                                messageText =\r\n                                                    messageText +\r\n                                                    ', Interco Contract created with reference: ' +\r\n                                                    result[0].contractLabel;\r\n                                                copyText = copyText + result[0].contractLabel;\r\n                                            }\r\n                                            this.snackbarService.informationAndCopySnackBar(\r\n                                                messageText,\r\n                                                copyText,\r\n                                            );\r\n\r\n                                            if (this.dataVersionId) {\r\n                                                this.tradeActionsService.displaySectionInSnapshotSubject.next(\r\n                                                    new SectionReference(\r\n                                                        this.sectionId,\r\n                                                        this.dataVersionId,\r\n                                                    ),\r\n                                                );\r\n                                            } else {\r\n                                                this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                                                    new SectionTabIndex(this.sectionId, this.selectedTab),\r\n                                                );\r\n                                            }\r\n                                            this.subscriptions.push(\r\n                                                this.lockService\r\n                                                    .unlockContract(\r\n                                                        this.sectionModel.sectionId,\r\n                                                        LockFunctionalContext.TradeEdit,\r\n                                                    )\r\n                                                    .subscribe(),\r\n                                            );\r\n                                        },\r\n                                        (err) => {\r\n                                            this.saveInProgress = false;\r\n                                            throw err;\r\n                                        },\r\n                                    ),\r\n                            );\r\n                        }\r\n                    }\r\n                }),\r\n        );\r\n    }\r\n\r\n    updateContractDetails(\r\n        isSplitCreated,\r\n        currentTradeQuantityAdjusted,\r\n        adjustAllocatedTradeQuantityAdjusted,\r\n        tradeSplitCreationOnQuantityAdjust,\r\n        alloatedTradeSplitCreationOnQuantityAdjust,\r\n        allocationOfTrades,\r\n    ) {\r\n        const updates = [\r\n            this.tradingService.updatePhysicalContract(\r\n                this.contractId,\r\n                this.model,\r\n                isSplitCreated,\r\n            ),\r\n            this.executionService.updateSectionTraffic(this.sectionTrafficModel),\r\n            this.executionService.updateInvoiceMarkingDetails(\r\n                this.sectionModel.sectionId,\r\n                this.invoiceMarking,\r\n                this.invoiceStatusId,\r\n                this.dataVersionId,\r\n            ),\r\n        ];\r\n        this.subscriptions.push(\r\n            forkJoin(updates).subscribe(\r\n                (res) => {\r\n                    const result = res[0];\r\n                    if (currentTradeQuantityAdjusted && !this.dataVersionId) {\r\n                        this.subscriptions.push(\r\n                            this.tradingService\r\n                                .unapproveSection(this.sectionModel.sectionId)\r\n                                .subscribe((ok) => {\r\n                                    if (ok) {\r\n                                        this.sectionModel.status = ContractStatus.Unapproved;\r\n                                        this.headerComponent.contractStatusChanged(\r\n                                            ContractStatus.Unapproved,\r\n                                        );\r\n                                        if (this.sectionModel.allocatedToId && !isSplitCreated) {\r\n                                            this.changeStatusForAllocatedContract(\r\n                                                this.sectionModel.allocatedToId,\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                }),\r\n                        );\r\n                    }\r\n                    if (\r\n                        this.originalQuantity !== Number(this.model.quantity) &&\r\n                        (this.model.type === ContractTypes.Purchase ||\r\n                            this.sectionModel.contractType === ContractTypes.Sale)\r\n                    ) {\r\n                        if (!adjustAllocatedTradeQuantityAdjusted) {\r\n                            this.snackbarService.informationAndCopySnackBar(\r\n                                this.sectionModel.contractLabel +\r\n                                ' quantity has been adjusted.',\r\n                                this.sectionModel.contractLabel,\r\n                            );\r\n                        }\r\n                    } else {\r\n                        let messageText =\r\n                            'Contract updated with reference: ' + this.contractLabel;\r\n                        let copyText = this.contractLabel;\r\n                        if (result && result[0] && result[0].contractLabel) {\r\n                            messageText =\r\n                                messageText +\r\n                                ', Interco Contract created with reference: ' +\r\n                                result[0].contractLabel;\r\n                            copyText = copyText + result[0].contractLabel;\r\n                        }\r\n                        this.snackbarService.informationAndCopySnackBar(\r\n                            messageText,\r\n                            copyText,\r\n                        );\r\n                    }\r\n                    if (adjustAllocatedTradeQuantityAdjusted) {\r\n                        this.updateAllocatedTradeQuantity();\r\n                        if (\r\n                            tradeSplitCreationOnQuantityAdjust ||\r\n                            alloatedTradeSplitCreationOnQuantityAdjust\r\n                        ) {\r\n                            this.createSplitForDecreaseQuantity(\r\n                                tradeSplitCreationOnQuantityAdjust,\r\n                                alloatedTradeSplitCreationOnQuantityAdjust,\r\n                                allocationOfTrades,\r\n                            );\r\n                        }\r\n                    } else if (\r\n                        tradeSplitCreationOnQuantityAdjust ||\r\n                        alloatedTradeSplitCreationOnQuantityAdjust\r\n                    ) {\r\n                        if (this.model.allocatedTo && !isSplitCreated) {\r\n                            this.changeStatusForAllocatedContract(\r\n                                this.model.allocatedTo.sectionId,\r\n                            );\r\n                        }\r\n                        this.createSplitForDecreaseQuantity(\r\n                            tradeSplitCreationOnQuantityAdjust,\r\n                            alloatedTradeSplitCreationOnQuantityAdjust,\r\n                            allocationOfTrades,\r\n                        );\r\n                    } else {\r\n                        if (this.dataVersionId) {\r\n                            this.tradeActionsService.displaySectionInSnapshotSubject.next(\r\n                                new SectionReference(this.sectionId, this.dataVersionId),\r\n                            );\r\n                        } else {\r\n                            this.tradeActionsService.displaySectionAfterEditSubject.next(\r\n                                new SectionTabIndex(this.sectionId, this.selectedTab),\r\n                            );\r\n                        }\r\n                    }\r\n                    this.subscriptions.push(\r\n                        this.lockService\r\n                            .unlockContract(\r\n                                this.sectionModel.sectionId,\r\n                                LockFunctionalContext.TradeEdit,\r\n                            )\r\n                            .subscribe(),\r\n                    );\r\n                },\r\n                (err) => {\r\n                    this.saveInProgress = false;\r\n                    throw err;\r\n                },\r\n            ),\r\n        );\r\n    }\r\n\r\n    intercoModel(companies) {\r\n        this.populateIntercoFields(this.model);\r\n        const confirmDialog = this.dialog.open(IntercoTradeDialogComponent, {\r\n            width: '45%',\r\n            maxHeight: '750px',\r\n            data: {\r\n                counterpartyCompanies: companies,\r\n                intercoValidation: this.intercoValidation,\r\n            },\r\n        });\r\n        const confirmationSubscription = confirmDialog\r\n            .afterClosed()\r\n            .subscribe((intercoData) => {\r\n                if (intercoData && intercoData.isInterco && !intercoData.isCancelled) {\r\n                    this.isInterco = true;\r\n                    this.model.isInterco = this.isInterco;\r\n                    this.model.intercoCompanyId = intercoData.companyId;\r\n                    this.model.intercoDepartmentId = intercoData.departmentId;\r\n                    this.model.intercoTraderId = intercoData.traderId;\r\n                    this.createTrade();\r\n                } else if (\r\n                    intercoData &&\r\n                    !intercoData.isInterco &&\r\n                    !intercoData.isCancelled\r\n                ) {\r\n                    this.createTrade();\r\n                } else {\r\n                    this.saveInProgress = false;\r\n                }\r\n            });\r\n        this.subscriptions.push(confirmationSubscription);\r\n    }\r\n\r\n    intercoModelForEdit(\r\n        isSplitCreated,\r\n        currentTradeQuantityAdjusted,\r\n        adjustAllocatedTradeQuantityAdjusted,\r\n        tradeSplitCreationOnQuantityAdjust,\r\n        alloatedTradeSplitCreationOnQuantityAdjust,\r\n        allocationOfTrades,\r\n        companies,\r\n    ) {\r\n        if (\r\n            !this.sectionModel.isInterCo &&\r\n            this.sectionModel.invoicingStatusId === InvoicingStatus.Uninvoiced &&\r\n            !this.sectionModel.sectionOriginId\r\n        ) {\r\n            this.populateIntercoFields(this.model);\r\n            const confirmDialog = this.dialog.open(IntercoTradeDialogComponent, {\r\n                width: '45%',\r\n                maxHeight: '750px',\r\n                data: {\r\n                    counterpartyCompanies: companies,\r\n                    intercoValidation: this.intercoValidation,\r\n                },\r\n            });\r\n\r\n            const confirmationSubscription = confirmDialog\r\n                .afterClosed()\r\n                .subscribe((intercoData) => {\r\n                    if (\r\n                        intercoData &&\r\n                        intercoData.isInterco &&\r\n                        !intercoData.isCancelled\r\n                    ) {\r\n                        this.isInterco = true;\r\n                        this.model.isInterco = this.isInterco;\r\n                        this.model.intercoCompanyId = intercoData.companyId;\r\n                        this.model.intercoDepartmentId = intercoData.departmentId;\r\n                        this.model.intercoTraderId = intercoData.traderId;\r\n\r\n                        this.updateContractDetails(\r\n                            isSplitCreated,\r\n                            currentTradeQuantityAdjusted,\r\n                            adjustAllocatedTradeQuantityAdjusted,\r\n                            tradeSplitCreationOnQuantityAdjust,\r\n                            alloatedTradeSplitCreationOnQuantityAdjust,\r\n                            allocationOfTrades,\r\n                        );\r\n                    } else if (\r\n                        intercoData &&\r\n                        !intercoData.isInterco &&\r\n                        !intercoData.isCancelled\r\n                    ) {\r\n                        this.updateContractDetails(\r\n                            isSplitCreated,\r\n                            currentTradeQuantityAdjusted,\r\n                            adjustAllocatedTradeQuantityAdjusted,\r\n                            tradeSplitCreationOnQuantityAdjust,\r\n                            alloatedTradeSplitCreationOnQuantityAdjust,\r\n                            allocationOfTrades,\r\n                        );\r\n                    } else {\r\n                        this.saveInProgress = false;\r\n                    }\r\n                });\r\n            this.subscriptions.push(confirmationSubscription);\r\n        } else {\r\n            this.updateContractDetails(\r\n                isSplitCreated,\r\n                currentTradeQuantityAdjusted,\r\n                adjustAllocatedTradeQuantityAdjusted,\r\n                tradeSplitCreationOnQuantityAdjust,\r\n                alloatedTradeSplitCreationOnQuantityAdjust,\r\n                allocationOfTrades,\r\n            );\r\n        }\r\n    }\r\n\r\n    onManualIntercoCreation(event: any) {\r\n        if (event) {\r\n            const selectedCounterparty = this.mainTabComponent.counterpartyComponent\r\n                .selectedCounterparty;\r\n            this.companyManager\r\n                .getConfiguration(selectedCounterparty.counterpartyID)\r\n                .subscribe((data) => {\r\n                    if (data.length > 0 && data[0].isCounterpartyGroupAccount) {\r\n                        this.populateIntercoFieldsForDetails(this.sectionModel);\r\n                        const confirmDialog = this.dialog.open(\r\n                            IntercoTradeDialogComponent,\r\n                            {\r\n                                width: '45%',\r\n                                maxHeight: '750px',\r\n                                data: {\r\n                                    counterpartyCompanies: data,\r\n                                    intercoValidation: this.intercoValidation,\r\n                                },\r\n                            },\r\n                        );\r\n\r\n                        const confirmationSubscription = confirmDialog\r\n                            .afterClosed()\r\n                            .subscribe((intercoData) => {\r\n                                if (\r\n                                    intercoData &&\r\n                                    intercoData.isInterco &&\r\n                                    !intercoData.isCancelled\r\n                                ) {\r\n                                    this.isInterco = true;\r\n                                    const intercoModel = {\r\n                                        isInterco: this.isInterco,\r\n                                        intercoCompanyId: intercoData.companyId,\r\n                                        intercoDepartmentId: intercoData.departmentId,\r\n                                        intercoTraderId: intercoData.traderId,\r\n                                        sectionId: this.sectionModel.sectionId,\r\n                                        dataVersionId: this.sectionModel.dataVersionId,\r\n                                    };\r\n                                    this.createIntercoContract(intercoModel);\r\n                                }\r\n                            });\r\n                        this.subscriptions.push(confirmationSubscription);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    createIntercoContract(intercoModel: any) {\r\n        this.tradingService.createManualInterco(intercoModel).subscribe(\r\n            (data) => {\r\n                const messageText =\r\n                    'Interco Contract created with reference: ' +\r\n                    intercoModel.intercoCompanyId +\r\n                    '/' +\r\n                    data[0]['contractLabel'];\r\n                const copyText = data[0]['contractLabel'];\r\n                this.snackbarService.informationAndCopySnackBar(messageText, copyText);\r\n\r\n                data[0]['sectionId'] = intercoModel.sectionId;\r\n                this.tradeActionsService.displaySectionSubject.next(\r\n                    data[0]['sectionId'],\r\n                );\r\n            },\r\n            (err) => {\r\n                this.saveInProgress = false;\r\n                throw err;\r\n            },\r\n        );\r\n    }\r\n\r\n    populateIntercoFields(model: PhysicalFixedPricedContract) {\r\n        this.intercoValidation = new IntercoValidation();\r\n        this.intercoValidation.companyId = this.company;\r\n\r\n        this.intercoValidation.intercoFields = [];\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'CommodityId',\r\n            value: model.commodityId ? model.commodityId.toString() : null,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'ContractTermId',\r\n            value: model.contractTerms,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'CurrencyCode',\r\n            value: model.currencyCode,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'PaymentTermId',\r\n            value: model.paymentTerms,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'PeriodTypeId',\r\n            value: model.periodTypeId ? model.periodTypeId.toString() : null,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'Price',\r\n            value: model.price ? model.price.toString() : null,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'WeightUnitId',\r\n            value: model.weightUnitId ? model.weightUnitId.toString() : null,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'PriceUnitId',\r\n            value: model.priceUnitId ? model.priceUnitId.toString() : null,\r\n        } as IntercoField);\r\n\r\n        let groupId = 2;\r\n        const selectedCounterparty = this.mainTabComponent.counterpartyComponent\r\n            .selectedCounterparty;\r\n        const costs = model.costs.filter(\r\n            (c) => c.supplierCode === selectedCounterparty.counterpartyCode,\r\n        );\r\n        if (costs && costs.length > 0) {\r\n            costs.forEach((cost) => {\r\n                this.intercoValidation.intercoFields.push({\r\n                    groupId,\r\n                    type: 'cost',\r\n                    name: 'CostTypeCode',\r\n                    mappingName: 'costTypeCode',\r\n                    value: cost.costTypeCode ? cost.costTypeCode.toString() : null,\r\n                } as IntercoField);\r\n                this.intercoValidation.intercoFields.push({\r\n                    groupId,\r\n                    type: 'cost',\r\n                    name: 'CurrencyCode',\r\n                    value: cost.currencyCode,\r\n                } as IntercoField);\r\n                groupId++;\r\n            });\r\n        }\r\n    }\r\n\r\n    populateIntercoFieldsForDetails(model: Section) {\r\n        this.intercoValidation = new IntercoValidation();\r\n        this.intercoValidation.companyId = this.company;\r\n\r\n        this.intercoValidation.intercoFields = [];\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'CommodityId',\r\n            value: model.commodityId ? model.commodityId.toString() : null,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'ContractTermId',\r\n            value: model.contractTerms,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'CurrencyCode',\r\n            value: model.currencyCode,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'PaymentTermId',\r\n            value: model.paymentTerms,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'PeriodTypeId',\r\n            value: model.periodTypeId ? model.periodTypeId.toString() : null,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'Price',\r\n            value: model.price ? model.price.toString() : null,\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'WeightUnitId',\r\n            value: model.weightUnitId ? model.weightUnitId.toString() : '',\r\n        } as IntercoField);\r\n        this.intercoValidation.intercoFields.push({\r\n            groupId: 1,\r\n            type: 'section',\r\n            name: 'PriceUnitId',\r\n            value: model.priceUnitId ? model.priceUnitId.toString() : null,\r\n        } as IntercoField);\r\n\r\n        let groupId = 2;\r\n        const selectedCounterparty = this.mainTabComponent.counterpartyComponent\r\n            .selectedCounterparty;\r\n        const costs = model.costs.filter(\r\n            (c) => c.supplierCode === selectedCounterparty.counterpartyCode,\r\n        );\r\n        if (costs && costs.length > 0) {\r\n            costs.forEach((cost) => {\r\n                this.intercoValidation.intercoFields.push({\r\n                    groupId,\r\n                    type: 'cost',\r\n                    name: 'CostTypeCode',\r\n                    mappingName: 'costTypeCode',\r\n                    value: cost.costTypeCode ? cost.costTypeCode.toString() : null,\r\n                } as IntercoField);\r\n                this.intercoValidation.intercoFields.push({\r\n                    groupId,\r\n                    type: 'cost',\r\n                    name: 'CurrencyCode',\r\n                    value: cost.currencyCode,\r\n                } as IntercoField);\r\n                groupId++;\r\n            });\r\n        }\r\n    }\r\n\r\n    checkIntercoTrade(sectionModel: Section) {\r\n        if (sectionModel.isInterCo) {\r\n            this.intercoCounterParty =\r\n                sectionModel.contractType === ContractTypes.Purchase\r\n                    ? sectionModel.sellerCode\r\n                    : sectionModel.buyerCode;\r\n        }\r\n    }\r\n\r\n    checkIfIntercoCounterpartyChanged(model: PhysicalFixedPricedContract) {\r\n        if (this.intercoCounterParty && this.isEdit && !this.isTradeImage) {\r\n            const newCounterparty =\r\n                model.type === ContractTypes.Purchase\r\n                    ? model.sellerCode\r\n                    : model.buyerCode;\r\n            if (this.intercoCounterParty !== newCounterparty) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Interco Contract',\r\n                        text:\r\n                            'This is an interco contract. If you proceed, it would no longer be an interco contract.',\r\n                        okButton: 'Continue',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.model.isInterco = true;\r\n                        this.model.isRemoveInterco = true;\r\n\r\n                        this.sectionModel.isInterCo = true;\r\n                        this.sectionModel.isRemoveInterco = true;\r\n                        this.saveTrade();\r\n                    } else {\r\n                        this.saveInProgress = false;\r\n                    }\r\n                });\r\n            } else {\r\n                this.saveTrade();\r\n            }\r\n        } else {\r\n            this.saveTrade();\r\n        }\r\n    }\r\n\r\n    onCancelTradeButtonClicked() {\r\n        const confirmDialog = this.dialog.open(CancelTradeDialogComponent, {\r\n            width: '80%',\r\n            maxHeight: '750px',\r\n            data: {\r\n                sectionModel: this.sectionModel,\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((cancelTradeModel: CancelTrade) => {\r\n            if (cancelTradeModel) {\r\n                this.sectionModel.blDate = cancelTradeModel.cancellationDate;\r\n                if (cancelTradeModel.isSectionClosed) {\r\n                    this.sectionModel.contractInvoiceTypeId =\r\n                        ContractInvoiceType.Cancellation;\r\n                    this.onCloseSectionButtonClicked(null, null, false, cancelTradeModel);\r\n                } else {\r\n                    this.cancelTrades(cancelTradeModel);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private cancelTrades(sectionCancelDetails: CancelTrade) {\r\n        this.tradingService\r\n            .cancelSection(\r\n                [this.sectionModel.sectionId],\r\n                sectionCancelDetails.cancellationDate,\r\n                this.childFlag,\r\n                this.dataVersionId,\r\n            )\r\n            .subscribe((ok) => {\r\n                if (ok) {\r\n                    const title = `Trade ${this.sectionModel.contractLabel} is now cancelled`;\r\n                    this.dialog\r\n                        .open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Trade Cancelled',\r\n                                text: title,\r\n                                okButton: 'Ok',\r\n                            },\r\n                        })\r\n                        .afterClosed()\r\n                        .subscribe((answer) => {\r\n                            const messageGenerating = 'Generating invoice... Please wait.';\r\n                            this.snackbarService.informationSnackBar(messageGenerating);\r\n                            this.generateInvoiceLines(sectionCancelDetails);\r\n                        });\r\n                }\r\n            });\r\n    }\r\n\r\n    private generateInvoiceLines(sectionCancelTradeDetails: CancelTrade) {\r\n        const invoiceRecord = new InvoiceRecord();\r\n\r\n        invoiceRecord.agreementDate = sectionCancelTradeDetails.cancellationDate;\r\n        invoiceRecord.authorizedForPosting = true;\r\n        invoiceRecord.costDirection =\r\n            sectionCancelTradeDetails.costType === sectionCancelTradeDetails.costTypeForCancellationLoss\r\n                ? CostDirections.Payable\r\n                : CostDirections.Receivable;\r\n        invoiceRecord.counterpartyCode = sectionCancelTradeDetails.counterParty;\r\n        invoiceRecord.currency = sectionCancelTradeDetails.currency;\r\n        invoiceRecord.dueDate = sectionCancelTradeDetails.dueDate;\r\n        invoiceRecord.externalInhouse = sectionCancelTradeDetails.externalInternal;\r\n        invoiceRecord.externalInvoiceRef = sectionCancelTradeDetails.narrative;\r\n        invoiceRecord.invoiceDate = sectionCancelTradeDetails.cancellationDate;\r\n        invoiceRecord.invoiceType = InvoiceTypes.Cancelled;\r\n        invoiceRecord.paymentTerms = this.sectionModel.paymentTerms;\r\n        invoiceRecord.template = sectionCancelTradeDetails.template;\r\n        invoiceRecord.totalGoodsValue = sectionCancelTradeDetails.quantity;\r\n        invoiceRecord.totalInvoiceValue = 0;\r\n        invoiceRecord.settlementValue = Number(\r\n            sectionCancelTradeDetails.settlementValue,\r\n        );\r\n\r\n        const invoiceLine = new InvoiceLineRecord();\r\n        invoiceLine.contractType = this.sectionModel.contractType;\r\n        invoiceLine.currencyCode = this.sectionModel.currencyCode;\r\n        invoiceLine.invoicePercent = 100;\r\n        invoiceLine.lineAmount = Number(sectionCancelTradeDetails.settlementValue);\r\n        invoiceLine.lineNumber = 1;\r\n        invoiceLine.price = this.sectionModel.price;\r\n        invoiceLine.quantity = sectionCancelTradeDetails.quantity.toString();\r\n        invoiceLine.sectionID = this.sectionId;\r\n        if (this.masterdata.vats && this.masterdata.vats.length > 0) {\r\n            invoiceLine.vatCode = this.masterdata.vats[0].vatCode;\r\n        }\r\n        invoiceRecord.invoiceLines = new Array<InvoiceLineRecord>();\r\n        invoiceRecord.invoiceLines.push(invoiceLine);\r\n\r\n        this.executionService\r\n            .createInvoice(invoiceRecord)\r\n            .subscribe((invoice: InvoiceRecord) => {\r\n                if (invoice) {\r\n                    const messageGenerated =\r\n                        'Invoice ' + invoice.documentReference + ' generated successfully.';\r\n                    this.snackbarService.informationAndCopySnackBar(\r\n                        messageGenerated,\r\n                        messageGenerated,\r\n                    );\r\n                    this.router.navigate([\r\n                        this.companyManager.getCurrentCompanyId() +\r\n                        '/trades/display/' +\r\n                        this.sectionId,\r\n                    ]);\r\n                }\r\n            },         (error) => {\r\n                this.snackbarService.throwErrorSnackBar(error.error.detail);\r\n            });\r\n    }\r\n\r\n    onReverseCancelTradeButtonClicked() {\r\n        const invoiceMarkingDetails = this.statusTabComponent.invoicingComponent.invoiceMarkingDetails;\r\n        this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Trade Reverse Cancellation',\r\n                text: 'You are about to reverse cancellation. Continue?',\r\n                okButton: 'Yes',\r\n                cancelButton: 'No',\r\n            },\r\n        }).afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.tradingService.reverseCancelSection(\r\n                    this.sectionModel.sectionId,\r\n                    this.childFlag,\r\n                    this.dataVersionId,\r\n                ).subscribe((ok) => {\r\n                    if (ok) {\r\n                    const title = `Trade ${this.sectionModel.contractLabel}' is now Reversed`;\r\n                    this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Trade Reverse Cancelled',\r\n                            text: title,\r\n                            okButton: 'Ok',\r\n                        },\r\n                    }).afterClosed().subscribe((answer) => {\r\n                        const messageGenerated = 'Reversing invoice...';\r\n                        this.snackbarService.informationAndCopySnackBar(\r\n                            messageGenerated,\r\n                            messageGenerated,\r\n                        );\r\n                        const invoiceRecord = new InvoiceRecord();\r\n                        invoiceRecord.documentType = TransactionDocumentTypes.Original;\r\n                        invoiceRecord.externalInhouse = invoiceMarkingDetails.externalInhouse;\r\n                        invoiceRecord.externalInvoiceRef = 'reverseCancel';\r\n                        invoiceRecord.invoiceDate = invoiceMarkingDetails.invoiceDate;\r\n                        invoiceRecord.documentReference = invoiceMarkingDetails.invoiceCode;\r\n                        invoiceRecord.invoiceType = InvoiceTypes.Reversal;\r\n                        invoiceRecord.isDraft = false;\r\n                        invoiceRecord.quantityToInvoice = QuantityToInvoiceType.Contract;\r\n                        invoiceRecord.transactionDocumentId = invoiceMarkingDetails.transactionDocumentId;\r\n                        invoiceRecord.transactionDocumentTypeId = invoiceMarkingDetails.transactionDocumentTypeId;\r\n                        invoiceRecord.invoiceId = invoiceMarkingDetails.invoiceId;\r\n\r\n                        this.executionService.createInvoice(invoiceRecord).subscribe((ok) => {\r\n                            if (ok) {\r\n                                const messageGenerated = 'Invoice reversed successfully.';\r\n                                this.snackbarService.informationAndCopySnackBar(\r\n                                    messageGenerated,\r\n                                    messageGenerated,\r\n                                );\r\n                                this.router.navigate([\r\n                                    this.companyManager.getCurrentCompanyId() +\r\n                                    '/trades/display/' +\r\n                                    this.sectionId,\r\n                                ]);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h1 class=\\\"no-margin\\\">Image {{dialogData.title}}</h1>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <h2>Details</h2>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <div fxFlex=\\\"30%\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Number of contracts required\\\"\\r\\n                       [formControl]='contractNumberCtrl'\\r\\n                       required>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div class=\\\"warning\\\"\\r\\n             *ngIf=\\\"showError\\\">\\r\\n            Number of contracts should be a positive integer number\\r\\n        </div>\\r\\n        <mat-error *ngIf=\\\"showTrancheError\\\">\\r\\n            Number of contracts cannot be more than 1, If Image Tranches/Splits is selected\\r\\n        </mat-error>\\r\\n\\r\\n        <!-- button toggle for purchase and sale-->\\r\\n        <div fxFlex=\\\"70%\\\">\\r\\n            <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                     name=\\\"toggleStyle\\\"\\r\\n                                     aria-label=\\\"Contract Type\\\"\\r\\n                                     [formControl]='contractTypeCtrl'\\r\\n                                     (change)='contractTypeChanged()'>\\r\\n                <mat-button-toggle [value]=\\\"ContractType.Purchase\\\">Purchase</mat-button-toggle>\\r\\n                <mat-button-toggle [value]=\\\"ContractType.Sale\\\">Sale</mat-button-toggle>\\r\\n            </mat-button-toggle-group>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Cost details -->\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <h3>Costs</h3>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <div fxFlex=\\\"30%\\\">\\r\\n            <mat-slide-toggle [formControl]='imageEstimatesCtrl'\\r\\n                              (change)=\\\"onImageEstimatesChange($event)\\\"\\r\\n                              [disabled]=setToggle>\\r\\n                Image Estimates\\r\\n            </mat-slide-toggle>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"30%\\\">\\r\\n            <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-costmatrix\\\"\\r\\n                                                     [fieldControl]=\\\"costMatrixCtrl\\\"\\r\\n                                                     [options]=\\\"filteredCostMatrixList\\\"\\r\\n                                                     label=\\\"CostMatrix\\\"\\r\\n                                                     displayProperty=\\\"name\\\"\\r\\n                                                     (valueChange)=\\\"onCostMatrixChange($event)\\\"\\r\\n                                                     (optionSelected)=\\\"onCostMatrixChange($event)\\\"\\r\\n                                                     tooltip=\\\"description\\\"\\r\\n                                                     [selectProperties]=\\\"['name', 'description']\\\"\\r\\n                                                     [errorMap]=\\\"costmatrixErrorMap\\\"\\r\\n                                                     lightBoxTitle=\\\"Results for CostMatrix\\\"\\r\\n                                                     gridId=\\\"costMatrixGrid\\\">\\r\\n            </atlas-masterdata-user-preferences-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <h3>Options</h3>\\r\\n    </div>\\r\\n\\r\\n    <!-- --Tranch and Split -->\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"5%\\\"\\r\\n         class=\\\"costToggle\\\">\\r\\n        <div fxFlex=\\\"50%\\\"\\r\\n             class=\\\"costToggle\\\">\\r\\n            <mat-slide-toggle (change)=\\\"onImageTranchesChange($event)\\\"\\r\\n                              [disabled]=\\\"isSplit\\\">\\r\\n                Image Tranches/Splits\\r\\n            </mat-slide-toggle>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"costToggle\\\">\\r\\n        <mat-slide-toggle *ifAuthorized=\\\"'Trades.Physicals.AllocateDeallocate',company:company\\\"\\r\\n                          (change)=\\\"onAllocateContractsChange($event)\\\"\\r\\n                          [disabled]=\\\"isAllocateContractDisabled || dialogData.isCancelledTrade\\\">\\r\\n            Allocate Contracts\\r\\n        </mat-slide-toggle>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n\\r\\n<mat-dialog-actions>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onCloseButtonClicked()\\\">DISCARD</button>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"50\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxAlignLayout=\\\"start end\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <button mat-button\\r\\n                *ifAuthorized=\\\"'Trades.Physicals.CreateTrade',company:this.company\\\"\\r\\n                (click)=\\\"onImageButtonClicked()\\\">IMAGE</button>\\r\\n    </div>\\r\\n</mat-dialog-actions>\"","module.exports = \".mat-dialog-content {\\n  overflow: hidden;\\n  padding: 0; }\\n\\n.warning {\\n  color: #ec8d2d;\\n  font-size: 12px; }\\n\\n.mat-button,\\n.mat-raised-button {\\n  margin: 0; }\\n\\n.contextual-search-for-costmatrix {\\n  width: 100%; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef, MatSlideToggleChange } from '@angular/material';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { ContractStatus } from '../../../../shared/enums/contract-status.enum';\r\nimport { ContractTypes } from '../../../../shared/enums/contract-type.enum';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { Costmatrix } from '../../../../shared/services/trading/dtos/costmatrix';\r\nimport { TradeImageField } from '../../../../shared/services/trading/dtos/tradeImageField';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { TradeImage } from '../../../entities/trade-image.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-image-dialog',\r\n    templateUrl: './trade-image-dialog.component.html',\r\n    styleUrls: ['./trade-image-dialog.component.scss'],\r\n})\r\nexport class TradeImageDialogComponent implements OnInit {\r\n\r\n    ContractType = ContractTypes;\r\n    contractNumberCtrl = new AtlasFormControl('Number');\r\n    contractTypeCtrl = new AtlasFormControl('ContractType');\r\n    costMatrixCtrl = new AtlasFormControl('costMatrixCtrl');\r\n    imageEstimatesCtrl = new AtlasFormControl('ImageEstimates');\r\n    imageEstimates = false;\r\n    imageTranche = false;\r\n    allocateContract = false;\r\n    tradeImage = new TradeImage();\r\n    showError = false;\r\n    showTrancheError = false;\r\n    setToggle = false;\r\n    company: string;\r\n    filteredCostMatrixList: Costmatrix[];\r\n    costmatrix: Costmatrix[];\r\n    tradeImageDetails: TradeImageField[] = [];\r\n    isSplit: boolean = true;\r\n    isAllocateContractDisabled: boolean = true;\r\n    childSections: Section[] = [];\r\n\r\n    costmatrixErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Costmatrix not in the list.');\r\n\r\n    dialogData: {\r\n        title: string,\r\n        type: string,\r\n        companyId: string,\r\n        childContracts: number,\r\n        parentTrade: boolean,\r\n        isAllocateContractDisabled: boolean,\r\n        childContractDetails: Section[],\r\n        isCancelledTrade: boolean,\r\n    };\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<TradeImageDialogComponent>,\r\n        protected utilService: UtilService,\r\n        private tradingService: TradingService,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            title: string, type: string, companyId: string, childContracts: number,\r\n            parentTrade: boolean, isAllocateContractDisabled: boolean, childContractDetails: Section[], isCancelledTrade: boolean;\r\n        },\r\n        public snackbarService: SnackbarService,\r\n    ) {\r\n        this.dialogData = data;\r\n        this.company = this.dialogData.companyId;\r\n        thisDialogRef.disableClose = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.setSplitTrancheToggle();\r\n        if (this.dialogData.type != null) {\r\n            this.contractTypeCtrl.setValue(ContractTypes[this.dialogData.type]);\r\n        }\r\n        this.isAllocateContractDisabled = this.dialogData.isAllocateContractDisabled;\r\n        // default for number of contract\r\n        this.contractNumberCtrl.patchValue('1');\r\n        this.getCostMatrixList();\r\n        this.getTradeImageFieldsCompany();\r\n\r\n    }\r\n    setSplitTrancheToggle() {\r\n        if (this.dialogData.childContracts > 0 && this.dialogData.parentTrade) {\r\n            this.isSplit = false;\r\n        }\r\n    }\r\n    getCostMatrixList() {\r\n        this.tradingService.getCostmatricesByCompanyId(this.company)\r\n            .subscribe((data) => {\r\n                this.costmatrix = data.value;\r\n                this.filteredCostMatrixList = this.costmatrix;\r\n                this.costMatrixCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredCostMatrixList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.costmatrix,\r\n                        ['name', 'description'],\r\n                    );\r\n                });\r\n            });\r\n    }\r\n    getTradeImageFieldsCompany() {\r\n        this.tradingService.getTradeImageFieldsByCompany()\r\n            .subscribe((data) => {\r\n                this.tradeImageDetails = data.value;\r\n            });\r\n    }\r\n\r\n    setControls() {\r\n        if (this.imageEstimates) {\r\n            this.costMatrixCtrl.disable();\r\n        } else {\r\n            this.costMatrixCtrl.enable();\r\n        }\r\n        if (this.costMatrixCtrl.value) {\r\n            this.setToggle = this.setToggle ? false : true;\r\n        }\r\n\r\n    }\r\n\r\n    onCostMatrixChange(value: any) {\r\n        this.setControls();\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    contractTypeChanged() {\r\n        const res = this.contractTypeCtrl.value as ContractTypes;\r\n    }\r\n\r\n    onImageButtonClicked() {\r\n        if (Number(this.contractNumberCtrl.value) > 1 && this.imageTranche) {\r\n            this.showError = false;\r\n            this.showTrancheError = true;\r\n        } else {\r\n            if (this.contractNumberCtrl.value && this.contractNumberCtrl.value.length > 0 && this.contractNumberCtrl.value > 0) {\r\n                this.tradeImage = this.getData();\r\n                this.thisDialogRef.close(this.tradeImage);\r\n            } else {\r\n                this.showTrancheError = false;\r\n                this.showError = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    onImageEstimatesChange(value: MatSlideToggleChange) {\r\n        this.imageEstimates = value.checked;\r\n        if (this.imageEstimates) {\r\n            this.checkForWarningMessage();\r\n        }\r\n        this.setControls();\r\n\r\n    }\r\n    onImageTranchesChange(value: MatSlideToggleChange) {\r\n        this.imageTranche = value.checked;\r\n        if (this.imageTranche) {\r\n            this.checkForWarningMessage();\r\n        }\r\n        this.checkForChildSectionAllocation();\r\n    }\r\n    checkForChildSectionAllocation() {\r\n        if (this.imageTranche) {\r\n            this.childSections = this.dialogData.childContractDetails;\r\n            for (const node of this.childSections) {\r\n                this.isAllocateContractDisabled = (node.allocationDate === null && !this.isAllocateContractDisabled &&\r\n                    node.quantity !== 0 && node.status !== ContractStatus.Unapproved) ? false : true;\r\n            }\r\n        } else {\r\n            this.isAllocateContractDisabled = this.dialogData.isAllocateContractDisabled;\r\n        }\r\n\r\n    }\r\n\r\n    checkForWarningMessage() {\r\n        if (this.imageEstimates && this.imageTranche) {\r\n            this.snackbarService.informationSnackBar('Please check your costs on the splits/tranches. They do not copy from the parent');\r\n        }\r\n    }\r\n\r\n    onAllocateContractsChange(value: MatSlideToggleChange) {\r\n        this.allocateContract = value.checked;\r\n        const selectedContractType = (ContractTypes[this.dialogData.type]) === ContractTypes.Purchase ?\r\n            ContractTypes.Sale : ContractTypes.Purchase;\r\n        if (this.allocateContract) {\r\n            this.contractNumberCtrl.patchValue('1');\r\n            this.contractNumberCtrl.disable();\r\n            this.contractTypeCtrl.setValue(selectedContractType);\r\n            this.contractTypeCtrl.disable();\r\n        } else {\r\n            this.contractNumberCtrl.enable();\r\n            this.contractTypeCtrl.enable();\r\n        }\r\n    }\r\n\r\n    getData(): TradeImage {\r\n        const tradeImage = new TradeImage();\r\n        tradeImage.numberOfContracts = this.contractNumberCtrl.value;\r\n        tradeImage.costMatrixId = this.costMatrixCtrl.value.costMatrixId;\r\n        tradeImage.imageEstimates = this.imageEstimates;\r\n        tradeImage.type = this.contractTypeCtrl.value;\r\n        tradeImage.trancheAndSplit = this.imageTranche;\r\n        tradeImage.allocateContract = this.allocateContract;\r\n        tradeImage.tradeImageField = this.tradeImageDetails;\r\n        return tradeImage;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-toolbar class=\\\"menu-bar mat-elevation-z6\\\">\\r\\n    <div class=\\\"toolbar-div\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             fxFlex=\\\"40\\\">\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"contract\\\"\\r\\n                    [disabled]=\\\"menuDisable\\\">Contract</button>\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"createEdit\\\"\\r\\n                    *ngIf=\\\"!dataVersionId\\\"\\r\\n                    [disabled]=\\\"menuDisable\\\">Creation & Edit</button>\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"groupEdit\\\"\\r\\n                    *ngIf=\\\"!dataVersionId\\\"\\r\\n                    [disabled]=\\\"menuDisable\\\">Group Edit</button>\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"reports\\\"\\r\\n                    [disabled]=\\\"menuDisable\\\">Reports</button>\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"help\\\">Help</button>\\r\\n            <button mat-button\\r\\n                    [matMenuTriggerFor]=\\\"documents\\\"\\r\\n                    *ngIf=\\\"!dataVersionId && hasDocumentPrivilege\\\"\\r\\n                    [disabled]=\\\"menuDisable\\\">Documents</button>\\r\\n            <mat-menu #contract=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <div id=\\\"notForSnashot\\\"\\r\\n                     *ngIf=\\\"!dataVersionId\\\">\\r\\n                    <span matTooltip={{toolTipSplit}}>\\r\\n                        <button mat-menu-item\\r\\n                                *ifAuthorized=\\\"'Trades.Physicals.CreateTrancheSplit',company:this.company\\\"\\r\\n                                [disabled]=\\\"disableCreateSplit || !trancheSplitPrivilege\\\"\\r\\n                                (click)=\\\"onSplitButtonClicked()\\\">Split</button>\\r\\n                    </span>\\r\\n                    <span matTooltip={{toolTipTranche}}>\\r\\n                        <button mat-menu-item\\r\\n                                *ifAuthorized=\\\"'Trades.Physicals.CreateTrancheSplit',company:this.company\\\"\\r\\n                                [disabled]=\\\"disableCreateTranche || hasAllocation() || !trancheSplitPrivilege\\\"\\r\\n                                (click)=\\\"onTranchButtonClicked()\\\">Tranche</button>\\r\\n                    </span>\\r\\n                    <span matTooltip={{toolTipMerge}}> <button mat-menu-item\\r\\n                                [disabled]=\\\"disableTradeMerge\\\"\\r\\n                                *ifAuthorized=\\\"'Trades.Physicals.Merge',company:this.company\\\"\\r\\n                                (click)=\\\"onMergeButtonClicked()\\\">Merge</button>\\r\\n                    </span>\\r\\n\\r\\n                </div>\\r\\n                <button mat-menu-item\\r\\n                        [disabled]=\\\"(isContractWithBLDate || dataVersionId) || isClosed\\\"\\r\\n                        *ngIf=\\\"hasAllocation() && (!isContractWithBLDate || hasSuperEditionPrivilege)\\\"\\r\\n                        (click)=\\\"onDeallocateButtonClicked()\\\">De-Allocate</button>\\r\\n                <span matTooltip={{toolTipAllocate}}>\\r\\n                    <button mat-menu-item\\r\\n                            [disabled]=\\\"(!isApproved && !dataVersionId) || isClosed || isCancelledSection || disableAllocateButton\\\"\\r\\n                            *ngIf=\\\"!hasAllocation() && (isApproved || dataVersionId || hasSuperEditionPrivilege)\\\"\\r\\n                            (click)=\\\"onAllocateButtonClicked()\\\">\\r\\n                        <ng-container *ifAuthorized=\\\"'Trades.Physicals.AllocateDeallocate',company:company\\\">\\r\\n                        </ng-container>\\r\\n                        Allocate\\r\\n                    </button>\\r\\n                </span>\\r\\n\\r\\n                <div id=\\\"notForSnashot\\\"\\r\\n                     *ngIf=\\\"!dataVersionId\\\">\\r\\n                    <button mat-menu-item\\r\\n                            [matMenuTriggerFor]=\\\"contractStatus\\\">Contract Status</button>\\r\\n                </div>\\r\\n                <div id=\\\"forSnapshot\\\"\\r\\n                     *ngIf=\\\"dataVersionId\\\">\\r\\n                    <button mat-menu-item\\r\\n                            [matMenuTriggerFor]=\\\"contractStatusForSnapshot\\\">Contract Status</button>\\r\\n                </div>\\r\\n            </mat-menu>\\r\\n            <mat-menu #contractStatus=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        [disabled]=\\\"currentSection.status === ContractStatus.Approved || !tradeApprovalPrivilege || isClosed  ||isCancelledSection\\\"\\r\\n                        (click)=\\\"onApproveButtonClicked()\\\">Approve Contract</button>\\r\\n                <button mat-menu-item\\r\\n                        [disabled]=\\\"currentSection.status === ContractStatus.Unapproved || !tradeApprovalPrivilege || isClosed || isCancelledSection \\\"\\r\\n                        (click)=\\\"onUnApproveButtonClicked()\\\">Unapprove Contract</button>\\r\\n                <button mat-menu-item\\r\\n                        *ifAuthorized=\\\"'Trades.Physicals.TradeDeletion',company:company\\\"\\r\\n                        (click)=\\\"onDeleteButtonClicked()\\\">Delete Contract</button>\\r\\n                <button mat-menu-item\\r\\n                        *ngIf=\\\"currentSection.isClosed\\\"\\r\\n                        (click)=\\\"onReOpenButtonClicked()\\\">ReOpen Contract</button>\\r\\n                <button mat-menu-item\\r\\n                        *ngIf=\\\"!currentSection.isClosed && tradeClosePrivilege\\\"\\r\\n                        (click)=\\\"onCloseButtonClicked()\\\">Close Contract</button>\\r\\n                <span [(matTooltip)]=\\\"blockerMessageForCancellingOfTrade\\\"\\r\\n                      *ifAuthorized=\\\"'Trades.Physicals.CancelReverseTrade',company:this.company\\\">\\r\\n                    <button mat-menu-item\\r\\n                            (click)=\\\"onCancelButtonClicked()\\\"\\r\\n                            [disabled]=\\\"!isTradeCancellationAllowed || currentSection.status === ContractStatus.Unapproved\\\">\\r\\n                        Cancel at Settlement Price\\r\\n                    </button>\\r\\n                    <button mat-menu-item\\r\\n                            *ngIf=\\\"currentSection.isCancelled\\\"\\r\\n                            (click)=\\\"onReverseCancelButtonClicked()\\\">\\r\\n                        Reverse Cancellation\\r\\n                    </button>\\r\\n                </span>\\r\\n\\r\\n            </mat-menu>\\r\\n            <mat-menu #contractStatusForSnapshot=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        *ngIf=\\\"currentSection.isClosed\\\"\\r\\n                        (click)=\\\"onReOpenButtonClicked()\\\">ReOpen Contract</button>\\r\\n                <button mat-menu-item\\r\\n                        *ngIf=\\\"!currentSection.isClosed\\\"\\r\\n                        (click)=\\\"onCloseButtonClicked()\\\">Close Contract</button>\\r\\n\\r\\n            </mat-menu>\\r\\n            <mat-menu #createEdit=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        *ifAuthorized=\\\"'Trades.Physicals.ImageCreation',company:this.company\\\"\\r\\n                        (click)=\\\"onImageButtonClicked()\\\">Image</button>\\r\\n                <button mat-menu-item\\r\\n                        [disabled]=\\\"isIntercoCreationIsAllowed()\\\"\\r\\n                        (click)=\\\"onIntercoTradeCreation()\\\">Create Interco</button>\\r\\n                <!-- uninvoiced status / !IsInterco / Valid Counterparty/ Parent Contract -->\\r\\n                <button mat-menu-item\\r\\n                        *ifAuthorized=\\\"'Trades.Physicals.ImageCreation',company:this.company\\\"\\r\\n                        (click)=\\\"onSaveAsFavoriteClicked()\\\">Save As Favourite</button>\\r\\n            </mat-menu>\\r\\n            <mat-menu #groupEdit=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        [matMenuTriggerFor]=\\\"GroupFunction\\\">Group function</button>\\r\\n            </mat-menu>\\r\\n            <mat-menu #GroupFunction=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        disabled>Group Approval</button>\\r\\n            </mat-menu>\\r\\n            <button mat-icon-button\\r\\n                    [matMenuTriggerFor]=\\\"reports\\\">\\r\\n            </button>\\r\\n            <mat-menu #reports=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onviewPLButtonClicked()\\\">View P&L</button>\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onTradeCostClicked()\\\">Trade Cost</button>\\r\\n                <span *ngFor=\\\"let item of filteredTemplates\\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"OnReportClick(item)\\\">\\r\\n                        {{item.name}}\\r\\n                    </button>\\r\\n                </span>\\r\\n\\r\\n            </mat-menu>\\r\\n            <mat-menu #help=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        disabled>Contextual Help</button>\\r\\n            </mat-menu>\\r\\n            <mat-menu #documents=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <button mat-menu-item\\r\\n                        *ifAuthorized=\\\"'Trades.Physicals.GenerateContractAdvice',company:company\\\"\\r\\n                        [disabled]=\\\"isClosed\\\"\\r\\n                        (click)=\\\"onGenerateDocumentButtonClicked()\\\">Generate Document</button>\\r\\n                <button mat-menu-item\\r\\n                        (click)=\\\"onSeeDocumentButtonClicked()\\\">See Documents</button>\\r\\n            </mat-menu>\\r\\n        </div>\\r\\n\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n    </div>\\r\\n</mat-toolbar>\\r\\n\"","module.exports = \"mat-toolbar {\\n  height: 40px !important;\\n  background-color: white !important; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { PhysicalDocumentTemplate } from '../../../../shared/entities/document-template.entity';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { ContractStatus } from '../../../../shared/enums/contract-status.enum';\r\nimport { InvoiceTypes } from '../../../../shared/enums/invoice-type.enum';\r\nimport { InvoicingStatus } from '../../../../shared/enums/invoicing-status.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { DocumentService } from '../../../../shared/services/http-services/document.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { TradeActionsService } from '../../../services/trade-actions.service';\r\nimport { TradeCostReportComponent } from '../../trade-cost-report/trade-cost-report.component';\r\nimport { TradePnlReportComponent } from '../../trade-pnl-report/trade-pnl-report.component';\r\nimport { AuthorizationService } from './../../../../core/services/authorization.service';\r\nimport { GenericReportViewerComponent } from './../../../../shared/components/generic-report-viewer/generic-report-viewer.component';\r\nimport { Company } from './../../../../shared/entities/company.entity';\r\nimport { PermissionLevels } from './../../../../shared/enums/permission-level.enum';\r\nimport { SectionReference } from './../../../entities/section-reference';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-management-menu-bar',\r\n    templateUrl: './trade-management-menu-bar.component.html',\r\n    styleUrls: ['./trade-management-menu-bar.component.scss'],\r\n})\r\nexport class TradeManagementMenuBarComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Input() currentSection: Section = undefined;\r\n    @Input() index: number;\r\n    @Input() menuDisable: boolean = undefined;\r\n    @Input() isClosed: boolean = undefined;\r\n    @Output() readonly showDiscard = new EventEmitter<any>();\r\n    @Output() readonly showSave = new EventEmitter<any>();\r\n    @Input() isIntercoCounterparty: boolean;\r\n    @Output() readonly manualIntercoCreation = new EventEmitter<any>();\r\n    @Input() companiesForInterco: Company[];\r\n    isApproved = false;\r\n    isContractWithBLDate = false;\r\n    company: string;\r\n    physicalContractId: number;\r\n    dataVersionId: number;\r\n    contractSectionCode: number;\r\n    disableCreateSplit: boolean = false;\r\n    disableCreateTranche: boolean = false;\r\n    disableAllocateButton: boolean = false;\r\n    disableTradeMerge: boolean = false;\r\n    hasDocumentPrivilege = false;\r\n    isInvoiced = false;\r\n    hasSuperEditionPrivilege = false;\r\n    toolTipSplit: string = '';\r\n    toolTipTranche: string = '';\r\n    toolTipAllocate: string = '';\r\n    toolTipMerge: string = '';\r\n    // //filteredTemplates: PhysicalDocumentTemplate[] = [];\r\n    filteredTemplates: PhysicalDocumentTemplate[] = new Array<PhysicalDocumentTemplate>();\r\n\r\n    ContractStatus = ContractStatus;\r\n    tradeApprovalPrivilege: boolean = false;\r\n    tradeClosePrivilege: boolean = false;\r\n    isMenuBarVisible: boolean = true;\r\n    isTradeCancellationAllowed: boolean = false;\r\n    blockerMessageForCancellingOfTrade: string = '';\r\n    isCancelledSection: boolean = false;\r\n    trancheSplitPrivilege: boolean = false;\r\n\r\n    constructor(protected tradeActionsService: TradeActionsService,\r\n        protected router: Router,\r\n        private route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected lockService: LockService,\r\n        protected dialog: MatDialog,\r\n        protected authorizationService: AuthorizationService,\r\n        protected tradingService: TradingService,\r\n        protected documentService: DocumentService,\r\n        protected securityService: SecurityService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n    ngOnInit() {\r\n        if (this.currentSection.isClosed === true && (this.router.url.indexOf('/trades/image/') === -1) && (this.router.url !== '/' + this.route.snapshot.params['company']\r\n            + '/trades/display/' + this.currentSection.sectionId)) {\r\n            if (!this.currentSection.dataVersionId) {\r\n                this.router.navigate(['/' + this.route.snapshot.params['company']\r\n                    + '/trades/display', this.currentSection.sectionId]);\r\n            }\r\n        }\r\n        const documentType = 76;\r\n        this.documentService.getTemplates(documentType, 'Trades').subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n        });\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.hasDocumentPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'Documents');\r\n        this.hasSuperEditionPrivilege = this.authorizationService.getPermissionLevel(\r\n            this.company, 'Trades', 'Physicals', 'SuperTradeEdition') > PermissionLevels.None;\r\n        if (this.currentSection.status === ContractStatus.Approved) {\r\n            this.isApproved = true;\r\n        }\r\n        // if (this.route.snapshot.url[0].path === \"edit\") {\r\n        //     this.isMenuBarVisible = true;\r\n        // }\r\n        if (this.currentSection.isClosed === true) {\r\n            this.isClosed = true;\r\n        }\r\n        if (this.currentSection.allocatedToId && this.currentSection.allocatedToId !== 0\r\n            && this.currentSection.blDate) {\r\n            this.isContractWithBLDate = true;\r\n        }\r\n        if (this.currentSection.invoiceReference) {\r\n            this.isInvoiced = true;\r\n        }\r\n\r\n        if (this.currentSection.quantity <= 0) {\r\n            this.disableCreateSplit = true;\r\n            this.toolTipSplit = 'Contract cannot be splitted when quantity is equal to 0';\r\n            this.disableCreateTranche = true;\r\n            this.toolTipTranche = 'Contract cannot be tranched when quantity is equal to 0';\r\n            this.disableAllocateButton = true;\r\n            this.toolTipAllocate = 'Contract cannot be allocated when quantity is equal to 0';\r\n        }\r\n        if (this.currentSection.allocatedToId != null) {\r\n            this.disableCreateTranche = true;\r\n            this.toolTipTranche = 'Contract cannot be tranched when it is allocated';\r\n        }\r\n\r\n        if (this.currentSection.allocatedTo &&\r\n            this.currentSection.invoiceReference &&\r\n            this.currentSection.invoiceTypeId === InvoiceTypes.Washout &&\r\n            this.currentSection.invoicingStatusId === InvoicingStatus.Finalized &&\r\n            this.currentSection.allocatedTo.invoicingStatusId === InvoicingStatus.Finalized) {\r\n            this.disableCreateSplit = true;\r\n            this.toolTipSplit = 'Contract cannot be splitted when it is allocated and Washout Invoiced';\r\n        }\r\n        if (this.currentSection.isCancelled) {\r\n            this.isCancelledSection = true;\r\n            this.disableCreateSplit = true;\r\n            this.disableCreateTranche = true;\r\n        }\r\n        if (this.currentSection.isClosed) {\r\n            this.disableCreateSplit = true;\r\n            this.disableCreateTranche = true;\r\n        }\r\n\r\n        if (this.currentSection.sectionId && this.currentSection.dataVersionId) {\r\n            this.subscriptions.push(\r\n                this.tradingService.getContextualDataForContractMerge(this.currentSection.sectionId, this.currentSection.dataVersionId).subscribe((data) => {\r\n                    if (data) {\r\n                        this.disableTradeMerge = !(data.isAllowed);\r\n                        this.toolTipMerge = data.message;\r\n                    }\r\n                }));\r\n        }\r\n        this.isMenuBarVisible = false;\r\n        this.checkTradePrivilege();\r\n        this.isCancellationOfTradeAllowed();\r\n    }\r\n\r\n    // Contract Menu\r\n    onSplitButtonClicked() {\r\n        this.tradeActionsService.splitSectionSubject.next();\r\n    }\r\n\r\n    onTranchButtonClicked() {\r\n        this.tradeActionsService.trancheSectionSubject.next();\r\n    }\r\n\r\n    onMergeButtonClicked() {\r\n        this.router.navigate(['/' + this.company + '/trades/tradeMerge/'\r\n            + encodeURIComponent(String(this.currentSection.sectionId))]);\r\n    }\r\n\r\n    onAllocateButtonClicked() {\r\n        if (this.dataVersionId) {\r\n            this.tradeActionsService.allocateSectionInSnapshotSubject\r\n                .next(new SectionReference(this.currentSection.sectionId, this.dataVersionId));\r\n        } else {\r\n            this.tradeActionsService.allocateSectionSubject.next(this.currentSection.sectionId);\r\n        }\r\n    }\r\n\r\n    OnReportClick(data: any) {\r\n\r\n        const openTradepnlReportDialog = this.dialog.open(GenericReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: data.name,\r\n                reportPath: data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n\r\n    }\r\n\r\n    onDeallocateButtonClicked() {\r\n        this.tradeActionsService.deallocateSectionSubject.next(this.currentSection.sectionId);\r\n    }\r\n\r\n    onApproveButtonClicked() {\r\n\r\n        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.tradeActionsService.approveSectionSubject.next(this.currentSection.sectionId);\r\n            }\r\n        }));\r\n    }\r\n\r\n    onUnApproveButtonClicked() {\r\n        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.tradeActionsService.unApproveSectionSubject.next(this.currentSection.sectionId);\r\n            }\r\n        }));\r\n    }\r\n\r\n    onDeleteButtonClicked() {\r\n        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.tradeActionsService.deleteSectionSubject.next(this.currentSection.sectionId);\r\n            }\r\n        }));\r\n    }\r\n\r\n    onReOpenButtonClicked() {\r\n        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.tradeActionsService.reOpenSectionSubject.next(this.currentSection.sectionId);\r\n            }\r\n        }));\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.tradeActionsService.closeSectionSubject.next(this.currentSection.sectionId);\r\n            }\r\n        }));\r\n    }\r\n\r\n    onGenerateDocumentButtonClicked() {\r\n        this.router.navigate(\r\n            [this.companyManager.getCurrentCompanyId() + '/execution/document/generation/contractadvice', this.currentSection.sectionId],\r\n        );\r\n    }\r\n\r\n    onSeeDocumentButtonClicked() {\r\n        this.menuDisable = true;\r\n        this.router.navigate(\r\n            [this.companyManager.getCurrentCompanyId() + '/execution/document/list/', 'section', this.currentSection.sectionId],\r\n        );\r\n    }\r\n\r\n    onImageButtonClicked() {\r\n        this.tradeActionsService.tradeImageSubject.next(this.currentSection.sectionId);\r\n    }\r\n\r\n    onSaveAsFavoriteClicked() {\r\n        this.tradeActionsService.tradeSaveAsFavouriteSubject.next(this.currentSection.sectionId);\r\n    }\r\n\r\n    contractStatusChanged(contractStatus: ContractStatus) {\r\n        this.isApproved = true;\r\n        this.currentSection.status = contractStatus;\r\n        this.isCancellationOfTradeAllowed();\r\n    }\r\n\r\n    updateDeallocationInfo() {\r\n        this.currentSection.allocatedTo = null;\r\n        this.tradeActionsService.displaySectionSubject.next(this.currentSection.sectionId);\r\n    }\r\n\r\n    onviewPLButtonClicked() {\r\n        const openTradepnlReportDialog = this.dialog.open(TradePnlReportComponent, {\r\n            data:\r\n            {\r\n                contractSectionCode: this.currentSection.contractLabel,\r\n                dataVersionId: this.dataVersionId,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n\r\n    onTradeCostClicked() {\r\n        const openTradepnlReportDialog = this.dialog.open(TradeCostReportComponent, {\r\n            data:\r\n            {\r\n                sectionId: this.route.snapshot.paramMap.get('sectionId'),\r\n                contractStatus: this.currentSection.status,\r\n                dataVersionId: this.dataVersionId,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n\r\n    checkTradePrivilege() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'Physicals')) {\r\n                this.tradeApprovalPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'ApproveTrade');\r\n                this.tradeClosePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CloseTrade');\r\n                this.trancheSplitPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CreateTrancheSplit');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    hasAllocation(): boolean {\r\n        if (this.currentSection.allocatedTo) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.showDiscard.emit();\r\n    }\r\n\r\n    isIntercoCreationIsAllowed(): boolean {\r\n        let isManualInterco = true;\r\n        if (!this.currentSection.isInterCo && this.currentSection.invoicingStatusId === InvoicingStatus.Uninvoiced\r\n            && !this.currentSection.sectionOriginId && this.isIntercoCounterparty) {\r\n            isManualInterco = false;\r\n        }\r\n        return isManualInterco;\r\n    }\r\n\r\n    onIntercoTradeCreation() {\r\n        this.manualIntercoCreation.emit(true);\r\n    }\r\n    onCancelButtonClicked() {\r\n        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.tradeActionsService.cancelSectionSubject.next(this.currentSection.sectionId);\r\n            }\r\n        }));\r\n\r\n    }\r\n\r\n    isCancellationOfTradeAllowed() {\r\n        if (this.currentSection.status === ContractStatus.Approved) {\r\n            if (this.currentSection.invoicingStatusId !== InvoicingStatus.Uninvoiced) {\r\n                this.isTradeCancellationAllowed = false;\r\n                this.blockerMessageForCancellingOfTrade = `Not Allowed ${this.currentSection.contractLabel} is Invoiced`;\r\n\r\n            } else if (this.currentSection.allocatedTo) {\r\n                this.isTradeCancellationAllowed = false;\r\n                this.blockerMessageForCancellingOfTrade = `Not Allowed ${this.currentSection.contractLabel} is allocated To ${this.currentSection.allocatedTo.contractLabel}`;\r\n            } else if (this.currentSection.blDate) {\r\n                this.isTradeCancellationAllowed = false;\r\n                this.blockerMessageForCancellingOfTrade = `Not Allowed ${this.currentSection.contractLabel} has a BL Date`;\r\n            } else {\r\n                this.isTradeCancellationAllowed = true;\r\n                this.blockerMessageForCancellingOfTrade = '';\r\n            }\r\n\r\n        }\r\n        if (this.currentSection.status === ContractStatus.Unapproved) {\r\n            this.isTradeCancellationAllowed = false;\r\n            this.blockerMessageForCancellingOfTrade = `Only Approved Trade Can be Cancelled`;\r\n        }\r\n        if (this.currentSection.isCancelled) {\r\n            this.isTradeCancellationAllowed = false;\r\n            this.blockerMessageForCancellingOfTrade = `Already Cancelled Trade`;\r\n        }\r\n    }\r\n\r\n    onReverseCancelButtonClicked() {\r\n        this.lockService.isLockedContract(this.currentSection.sectionId).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                this.tradeActionsService.reverseCancelSectionSubject.next(this.currentSection.sectionId);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<!-- Layout divided by column -->\\r\\n<!-- container -->\\r\\n<div class=\\\"cards-fxLayout\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.lt-sm=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\">\\r\\n        <atlas-shipment-info-form-component class=\\\"flex-item\\\"\\r\\n                                            fxFlex=\\\"50\\\"\\r\\n                                            #ShipmentInfoComponent\\r\\n                                            (shipmentStatusUpdate)=\\\"checkShipmentStatusChange($event)\\\"></atlas-shipment-info-form-component>\\r\\n\\r\\n        <atlas-bl-info-form-component class=\\\"flex-item\\\"\\r\\n                                      fxFlex=\\\"50\\\"\\r\\n                                      #BlInfoComponent\\r\\n                                      (blDateChanged)=\\\"onBlDateChanged($event)\\\"></atlas-bl-info-form-component>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayout.lt-sm=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\">\\r\\n        <atlas-adjust-weight-form-component class=\\\"flex-item\\\"\\r\\n                                            fxFlex=\\\"33\\\"\\r\\n                                            #AdjustWeightComponent\\r\\n                                            (checkQuantityChange)=\\\"checkQuantityChange($event)\\\">\\r\\n        </atlas-adjust-weight-form-component>\\r\\n        <atlas-current-trade-form-component class=\\\"flex-item\\\"\\r\\n                                            fxFlex=\\\"34\\\"\\r\\n                                            #CurrentTradeComponent\\r\\n                                            (checkAllocatedResidualSplitChange)=\\\"checkAllocatedResidualSplitChange($event)\\\">\\r\\n        </atlas-current-trade-form-component>\\r\\n        <atlas-allocation-form-component fxFlex=\\\"33\\\"\\r\\n                                         class=\\\"flex-item\\\"\\r\\n                                         #AllocationComponent\\r\\n                                         (checkLeaveStatusChange)=\\\"checkLeaveStatusChange($event)\\\">\\r\\n        </atlas-allocation-form-component>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, HostListener, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { AdjustWeightFormComponent } from '../form-components/adjust-weight-form-component/adjust-weight-form-component.component';\r\nimport { AllocationFormComponent } from '../form-components/allocation-form-component/allocation-form-component.component';\r\nimport { BlInfoFormComponent } from '../form-components/bl-info-form-component/bl-info-form-component.component';\r\nimport { CurrentTradeFormComponent } from '../form-components/current-trade-form-component/current-trade-form-component.component';\r\nimport { ShipmentInfoFormComponent } from '../form-components/shipment-info-form-component/shipment-info-form-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-physical-contract-capture-form-traffic-tab',\r\n    templateUrl: './physical-contract-capture-form-traffic-tab.component.html',\r\n    styleUrls: ['./physical-contract-capture-form-traffic-tab.component.scss'],\r\n})\r\nexport class PhysicalContractCaptureFormTrafficTabComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('BlInfoComponent') blInfoComponent: BlInfoFormComponent;\r\n    @ViewChild('AdjustWeightComponent') adjustWeightComponent: AdjustWeightFormComponent;\r\n    @ViewChild('ShipmentInfoComponent') shipmentInfoComponent: ShipmentInfoFormComponent;\r\n    @ViewChild('CurrentTradeComponent') currentTradeComponent: CurrentTradeFormComponent;\r\n    @ViewChild('AllocationComponent') allocationComponent: AllocationFormComponent;\r\n    @Output() readonly quantityValueUpdate = new EventEmitter<any>();\r\n    @Output() readonly blDateUpdate = new EventEmitter<any>();\r\n    @Output() readonly shipmentStatusUpdate = new EventEmitter<string>();\r\n    formComponents: BaseFormComponent[] = [];\r\n    showAllocation = false;\r\n    allocatedTo: number;\r\n\r\n    constructor(protected formBuilder: FormBuilder, protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.formComponents.push(\r\n            this.blInfoComponent,\r\n            this.shipmentInfoComponent,\r\n            this.adjustWeightComponent,\r\n            this.currentTradeComponent,\r\n            this.allocationComponent,\r\n        );\r\n    }\r\n\r\n    contractDateSelected(contractDate: Date) {\r\n        this.blInfoComponent.contractDateSelected(contractDate);\r\n    }\r\n\r\n    checkLeaveStatusChange(isChecked: boolean) {\r\n        this.currentTradeComponent.resetAllocatedResidualSplit(isChecked);\r\n        this.quantityValueUpdate.emit();\r\n    }\r\n\r\n    checkAllocatedResidualSplitChange(isChecked: boolean) {\r\n\r\n        this.allocationComponent.resetLeaveStatus(isChecked);\r\n        this.quantityValueUpdate.emit();\r\n    }\r\n\r\n    checkQuantityChange(quantity) {\r\n        this.currentTradeComponent.resetControl(this.allocatedTo);\r\n\r\n        if (this.allocatedTo) {\r\n            this.allocationComponent.resetControl();\r\n        }\r\n\r\n        if (quantity.newValue >= 0) {\r\n            if (quantity.oldValue > quantity.newValue) {\r\n                this.currentTradeComponent.resetControlonLowerValue();\r\n                if (this.allocatedTo) {\r\n                    this.allocationComponent.resetControlonLowerValue();\r\n                }\r\n            } else if ((quantity.oldValue < quantity.newValue)) {\r\n                this.currentTradeComponent.resetControlOnHigherValue();\r\n                if (this.allocatedTo) {\r\n                    this.allocationComponent.resetControlonGreaterValue();\r\n                }\r\n            }\r\n        }\r\n        this.quantityValueUpdate.emit(quantity.newValue);\r\n\r\n    }\r\n\r\n    checkShipmentStatusChange(value: string) {\r\n        this.shipmentStatusUpdate.emit(value);\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.initForm(entity, isEdit);\r\n        });\r\n        const sectionModel = entity as Section;\r\n        this.allocatedTo = sectionModel.allocatedToId;\r\n        return entity;\r\n\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            blInfoComponent: this.blInfoComponent.getFormGroup(),\r\n            shipmentInfoComponent: this.shipmentInfoComponent.getFormGroup(),\r\n            adjustWeightComponent: this.adjustWeightComponent.getFormGroup(),\r\n            allocationComponent: this.allocationComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n    onBlDateChanged(bldate) {\r\n        this.blDateUpdate.emit(bldate);\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <header class=\\\"header-background mat-elevation-z2\\\">\\r\\n        <div class=\\\"header-title\\\">\\r\\n            <h2>Cost Matrix {{costMatrixAction}} </h2>\\r\\n        </div>\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"none center\\\"\\r\\n                 fxLayoutGap=\\\"30px\\\">\\r\\n                <div fxFlex=\\\"40%\\\"\\r\\n                     class=\\\"custom-form\\\"\\r\\n                     [class.isEmpty]=\\\"!nameCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"true\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input\\r\\n                            matInput\\r\\n                            placeholder=\\\"Name\\\"\\r\\n                            [formControl]=\\\"nameCtrl\\\"\\r\\n                            label=\\\"Name\\\"\\r\\n                            autocomplete=\\\"off\\\"\\r\\n                            matTooltip=\\\"Name of the Costmatrix\\\"\\r\\n                        />\\r\\n                        <mat-hint class=\\\"costmatrix-required-fields\\\" *ngIf=\\\"isEdit && !isCostMatrixDisplay\\\">Required*</mat-hint>\\r\\n                        <mat-error *ngIf=\\\"nameCtrl.hasError('required')\\\">\\r\\n                            Name is Required\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"nameCtrl.hasError('maxlength')\\\">\\r\\n                            Name cannot be more than 30 characters\\r\\n                        </mat-error>\\r\\n                        <mat-hint align=\\\"end\\\" style=\\\"color:orange\\\" *ngIf=\\\"nameCtrl.hasError('notUnique')\\\">\\r\\n                            Name already used\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"40%\\\" class=\\\"custom-form\\\" [class.isEmpty]=\\\"!descriptionCtrl.value\\\" [class.required-field]=\\\"true\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input\\r\\n                            matInput\\r\\n                            placeholder=\\\"Description\\\"\\r\\n                            [formControl]=\\\"descriptionCtrl\\\"\\r\\n                            label=\\\"Description\\\"\\r\\n                            matTooltip=\\\"Description of the Costmatrix\\\"\\r\\n                            autocomplete=\\\"off\\\"\\r\\n                            [required]=\\\"descriptionCtrl.isRequired\\\"\\r\\n                        />\\r\\n                        <mat-error *ngIf=\\\"descriptionCtrl.hasError('required')\\\">\\r\\n                            Description is Required\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"descriptionCtrl.hasError('maxlength')\\\">\\r\\n                            Description cannot be more than 60 characters\\r\\n                        </mat-error>\\r\\n                        <mat-hint class=\\\"costmatrix-required-fields\\\" *ngIf=\\\"isEdit && !isCostMatrixDisplay\\\">Required*</mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </header>\\r\\n\\r\\n    <atlas-costmatrix-menu-bar\\r\\n        [hideAndShowMenuBarButtons]=\\\"isEdit && !isCostMatrixDisplay\\\"\\r\\n        (costmatrixSaveAction)=\\\"onSaveButtonClicked()\\\"\\r\\n        (costmatrixBackAction)=\\\"onBackButtonClicked()\\\"\\r\\n    >\\r\\n    </atlas-costmatrix-menu-bar>\\r\\n    <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                                  [fabType]=\\\"fabType\\\"\\r\\n                                  [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                  [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                                  (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n    </atlas-floating-action-button>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutWrap *ngIf=\\\"isLoading\\\" class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <div *atlasFeatureFlag=\\\"gaps.gap003\\\">\\r\\n            <atlas-params-list\\r\\n                *ngIf=\\\"paramsReady\\\"\\r\\n                [isCostMatrixDisplay]=\\\"isCostMatrixDisplay\\\"\\r\\n                (iconClicked)=\\\"openSideBar(atlasParamsSidenavSelector)\\\"\\r\\n                [chipStringList]=\\\"paramsToChip()\\\"\\r\\n            ></atlas-params-list>\\r\\n        </div>\\r\\n        <mat-card>\\r\\n            <mat-card-content>\\r\\n                <div fxLayout=\\\"column \\\" fxLayoutAlign=\\\"start end \\\">\\r\\n                    <div fxLayout=\\\"row \\\" fxLayoutAlign=\\\"end start \\\">\\r\\n                        <button mat-button [disabled]=\\\"isCostMatrixDisplay\\\" (click)=\\\"onAddRowButtonClicked()\\\">\\r\\n                            Add cost\\r\\n                        </button>\\r\\n                        <button mat-icon-button [matMenuTriggerFor]=\\\"menu1\\\" matTooltip=\\\"More\\\" [disabled]=\\\"isCostMatrixDisplay\\\">\\r\\n                            <i class=\\\"material-icons\\\">more_vert</i>\\r\\n                        </button>\\r\\n                        <mat-menu #menu1=\\\"matMenu\\\">\\r\\n                            <button mat-menu-item [matMenuTriggerFor]=\\\"exportMenu\\\">\\r\\n                                <span>Export</span>\\r\\n                            </button>\\r\\n                        </mat-menu>\\r\\n                        <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n                            <button mat-menu-item (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                                <span>Export as Excel</span>\\r\\n                            </button>\\r\\n                            <button mat-menu-item (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                                <span>Export as CSV</span>\\r\\n                            </button>\\r\\n                        </mat-menu>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div ag-grid=\\\"costmatrixGridOptions\\\" class=\\\"ag-theme-material pointer-cursor\\\" style=\\\"width: 100%; height: 100%\\\">\\r\\n                    <ag-grid-angular\\r\\n                        style=\\\" height: 100%;\\\"\\r\\n                        class=\\\"ag-theme-material\\\"\\r\\n                        [rowData]=\\\"costmatrixGridRows\\\"\\r\\n                        [columnDefs]=\\\"costmatrixGridColumns\\\"\\r\\n                        [gridOptions]=\\\"costmatrixGridOptions\\\"\\r\\n                        [enableColResize]=\\\"true\\\"\\r\\n                        [pagination]=\\\"true\\\"\\r\\n                        [paginationPageSize]=\\\"10\\\"\\r\\n                        [enableSorting]=\\\"true\\\"\\r\\n                        domLayout=\\\"autoHeight\\\"\\r\\n                        [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                        (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                        (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                        enableFilter\\r\\n                        [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                        [singleClickEdit]=\\\"true\\\"\\r\\n                    >\\r\\n                    </ag-grid-angular>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n\\r\\n    </div>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\"> </atlas-lock-interval>\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #atlasParamsSidenavSelector disableClose [mode]=\\\"'over'\\\" position=\\\"end\\\" [fixedTopGap]=\\\"56\\\" [fixedInViewport]=\\\"true\\\">\\r\\n            <div *ngIf=\\\"!isCostMatrixDisplay && isEdit\\\">\\r\\n                <atlas-params-sidenav-selector\\r\\n                    *atlasFeatureFlag=\\\"gaps.gap003\\\"\\r\\n                    [parameters]=\\\"parameters\\\"\\r\\n                    [tagFields]=\\\"tagFields\\\"\\r\\n                    (closeParamsSidenavSelector)=\\\"keepParamsReceived($event, atlasParamsSidenavSelector)\\\"\\r\\n                ></atlas-params-sidenav-selector>\\r\\n            </div>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</form>\\r\\n\"","module.exports = \".header-background {\\n  padding-bottom: 0px;\\n  min-height: 100px; }\\n\\n.header-title {\\n  padding: 12px 20px; }\\n\\n.header-content {\\n  padding: 0px 30px 8px; }\\n\\n.costmatrix-required-fields {\\n  color: #00a9c6; }\\n\\nmat-sidenav {\\n  width: 65%; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatSidenav } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { ContractTerm } from '../../../../../shared/entities/contract-term.entity';\r\nimport { CostDirection } from '../../../../../shared/entities/cost-direction.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { EnumEntity } from '../../../../../shared/entities/enum-entity.entity';\r\nimport { PagingOptions } from '../../../../../shared/entities/http-services/paging-options';\r\nimport { FloatingActionButtonActions } from '../../../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { PaymentTerm } from '../../../../../shared/entities/payment-term.entity';\r\nimport { Port } from '../../../../../shared/entities/port.entity';\r\nimport { RateType } from '../../../../../shared/entities/rate-type.entity';\r\nimport { Tag } from '../../../../../shared/entities/tag.entity';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { CostMatrixAction } from '../../../../../shared/enums/costmatrix-action.enum';\r\nimport { Gaps } from '../../../../../shared/enums/gaps.enum';\r\nimport { RateTypes } from '../../../../../shared/enums/rate-type.enum';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { FeatureFlagService } from '../../../../../shared/services/http-services/feature-flag.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { Costmatrix } from '../../../../../shared/services/trading/dtos/costmatrix';\r\nimport { CostmatrixLine } from '../../../../../shared/services/trading/dtos/costmatrixLine';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { TagField } from '../../../../entities/tag-field';\r\nimport { CostMatrixNameAsyncValidator } from '../../../../validators/costmatrix-name-async-validator.validator';\r\n\r\n@Component({\r\n    selector: 'atlas-costmatrix-create',\r\n    templateUrl: './costmatrix-create.component.html',\r\n    styleUrls: ['./costmatrix-create.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class CostmatrixCreateComponent extends BaseFormComponent implements OnInit {\r\n    costsMenuActions: { [key: string]: string } = {\r\n        deleteCostMatrixLine: 'delete',\r\n    };\r\n    costMatrix: Costmatrix[];\r\n    parameters: Tag[];\r\n    tagFields: Observable<TagField[]>;\r\n    tagsList: TagField[];\r\n    costmatrixGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    costmatrixGridColumns: agGrid.ColDef[];\r\n    costmatrixGridRows: CostmatrixLine[];\r\n    costMatrixLines: CostmatrixLine[];\r\n    private costMatrixId: number;\r\n    isEdit = false;\r\n    Description: string;\r\n    isDirty: boolean = false;\r\n    costmatricesGridContextualMenuActions: AgContextualMenuAction[];\r\n    isSummaryView: boolean = false;\r\n    formGroup: FormGroup;\r\n    costMatrixAction: string;\r\n    isSave: boolean = false;\r\n    nameCtrl = new AtlasFormControl('Name');\r\n    descriptionCtrl = new AtlasFormControl('Description');\r\n\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    company: string;\r\n    masterdataList: string[] = [MasterDataProps.CostTypes];\r\n    masterdata: MasterData;\r\n    rateTypes: RateType[];\r\n    costDirections: CostDirection[];\r\n    isDescription: boolean;\r\n    isCostMatrixImage: boolean = false;\r\n    isCostMatrixDisplay: boolean = false;\r\n    originalCostMatrixId: number;\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    gridName: string = 'CostMatrixEdit';\r\n    userActiveDirectoryName: string;\r\n    gaps = Gaps;\r\n    paramsReady = false;\r\n    costmatrixId: number;\r\n\r\n    private contractTerms: ContractTerm[];\r\n    private contractTypes: EnumEntity[];\r\n    private counterparties: Counterparty[];\r\n    private paymentTerms: PaymentTerm[];\r\n    private ports: Port[];\r\n\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabType: FABType = FABType.MiniFAB;\r\n    fabTitle: string = 'COST MATRICES mini FAB';\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        protected uiService: UiService,\r\n        protected route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        protected router: Router,\r\n        protected masterdataService: MasterdataService,\r\n        protected tradingService: TradingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected dialog: MatDialog,\r\n        protected lockService: LockService,\r\n        private titleService: TitleService,\r\n        public gridService: AgGridService,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private featureFlagService: FeatureFlagService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.tagFields = this.getTagFields();\r\n        this.tagFields.subscribe((val) => {\r\n            this.tagsList = val;\r\n        });\r\n        this.parameters = null;\r\n        this.isEdit = true;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.costmatrixId = this.route.snapshot.params['costmatrixId'];\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.init();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.rateTypes = [\r\n            {\r\n                code: RateTypes[RateTypes.Rate],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Amount],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Percent],\r\n                description: '',\r\n            },\r\n        ];\r\n\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n        this.initializeGridColumns();\r\n\r\n        this.isCostMatrixImage = this.route.snapshot.data['isImage'];\r\n        this.isCostMatrixDisplay = this.route.snapshot.data['isDisplay'];\r\n        if (this.route.snapshot.url[1].path.toString() === 'edit') {\r\n            this.costMatrixId = Number(this.route.snapshot.paramMap.get('costmatrixId'));\r\n            this.isDirty = true;\r\n            this.costMatrixAction = CostMatrixAction.Edit;\r\n            this.gridContext.gridEditable = true;\r\n        } else if (this.isCostMatrixImage) {\r\n            this.costMatrixId = Number(this.route.snapshot.paramMap.get('originalCostMatrixId'));\r\n            this.isDirty = false;\r\n            this.costMatrixAction = CostMatrixAction.Image;\r\n            this.gridContext.gridEditable = true;\r\n        } else if (this.isCostMatrixDisplay) {\r\n            this.costMatrixId = Number(this.route.snapshot.paramMap.get('costmatrixId'));\r\n            this.gridContext.gridEditable = false;\r\n            this.viewEditCostMatrix();\r\n        } else {\r\n            this.costMatrixAction = CostMatrixAction.Create;\r\n            this.titleService.setTitle('Cost Matrix Creation');\r\n        }\r\n        if (this.costMatrixId && this.costMatrixId !== 0) {\r\n            this.isLoading = true;\r\n            this.viewEditCostMatrix();\r\n        } else {\r\n            this.isLoading = false;\r\n        }\r\n        this.initializeForm();\r\n        this.setValidators();\r\n\r\n        this.getCommodities();\r\n\r\n        this.initFABActions();\r\n    }\r\n\r\n    initializeForm() {\r\n        this.formGroup = this.formBuilder.group({\r\n            nameCtrl: this.nameCtrl,\r\n            descriptionCtrl: this.descriptionCtrl,\r\n        });\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.formGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    viewEditCostMatrix() {\r\n        this.featureFlagService.getFlagInfo(Gaps.gap003).subscribe((flagAuth) => {\r\n            const matrix: Observable<Costmatrix> = this.tradingService.getCostmatricesListByCostmatrixId(this.costMatrixId);\r\n\r\n            if (flagAuth && flagAuth.active) {\r\n                const tags = this.tradingService.GetCostMatricesListWithTags(this.costMatrixId);\r\n                this.subscriptions.push(\r\n                    tags.subscribe((result) => {\r\n                        this.getmatrix(matrix, result);\r\n                    }),\r\n                );\r\n            } else {\r\n                this.subscriptions.push(this.getmatrix(matrix, null));\r\n            }\r\n        });\r\n    }\r\n\r\n    getmatrix(matrix: Observable<Costmatrix>, result) {\r\n        return matrix.subscribe((data) => {\r\n            this.costMatrixLines = data.costMatrixLines;\r\n            this.parameters = (result && result.length > 0) ? result[0].tags : null;\r\n            if (this.isCostMatrixImage) {\r\n                this.nameCtrl.patchValue(null);\r\n                this.descriptionCtrl.patchValue(null);\r\n                this.titleService.setTitle(data.name + ' - Cost Matrix Image');\r\n            } else if (this.isCostMatrixDisplay) {\r\n                this.nameCtrl.disable();\r\n                this.descriptionCtrl.disable();\r\n                this.nameCtrl.patchValue(data.name);\r\n                this.descriptionCtrl.patchValue(data.description);\r\n                this.titleService.setTitle(data.name + ' - Cost Matrix View');\r\n            } else {\r\n                this.lockService\r\n                    .lockCostMatrix(this.costMatrixId, LockFunctionalContext.CostMatrixEdition)\r\n                    .pipe(takeUntil(this.destroy$))\r\n                    .subscribe(\r\n                        (lockData) => {\r\n                            this.startLockRefresh(this.costMatrixId, data.name);\r\n                            this.titleService.setTitle(data.name + ' - Cost Matrix Edit');\r\n                        },\r\n                        (err) => {\r\n                            this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'Lock',\r\n                                    text: err.error.detail,\r\n                                    okButton: 'Got it',\r\n                                },\r\n                            });\r\n                            this.goToCostMatrixHome();\r\n                        },\r\n                    );\r\n\r\n                this.nameCtrl.disable();\r\n                this.nameCtrl.patchValue(data.name);\r\n                this.descriptionCtrl.patchValue(data.description);\r\n            }\r\n            this.initializeGridColumns();\r\n            this.costMatrixLines.forEach((line) => {\r\n                if (this.masterdata) {\r\n                    const counterparty = this.masterdata.counterparties.find((e) => e.counterpartyID === line.supplierId);\r\n                    if (counterparty) {\r\n                        line.supplierCode = counterparty.counterpartyCode;\r\n                    }\r\n\r\n                    const costType = this.masterdata.costTypes.find((e) => e.costTypeId === line.costTypeId);\r\n                    if (costType) {\r\n                        line.costTypeCode = costType.costTypeCode;\r\n                    }\r\n\r\n                    const priceUnit = this.masterdata.priceUnits.find((e) => e.priceUnitId === line.priceUnitId);\r\n                    if (priceUnit) {\r\n                        line.priceCode = priceUnit.priceCode;\r\n                    }\r\n                }\r\n                line.costDirection = this.costDirections.find((e) => e.costDirectionId === line.payReceive).costDirection;\r\n\r\n                line.rateTypeCode = this.getRateTypeCodeFromID(line.rateType);\r\n            });\r\n            this.costmatrixGridRows = this.costMatrixLines;\r\n\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.costmatrixGridColumns;\r\n        this.costmatrixGridOptions = params;\r\n\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi !== undefined) {\r\n            const allColumnIds = [];\r\n            this.costmatrixGridColumns.forEach((columnDefs) => {\r\n                allColumnIds.push(columnDefs.field);\r\n            });\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.costmatrixGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.costmatrixGridColumns = [\r\n            {\r\n                headerName: '',\r\n                valueGetter: this.getRowStatus,\r\n                lockPosition: true,\r\n                hide: this.isCostMatrixDisplay,\r\n            },\r\n            {\r\n                headerName: 'Cost type*',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    options: this.masterdata.costTypes\r\n                        .filter((cost) => cost.isATradeCost === true)\r\n                        .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                    valueProperty: 'costTypeCode',\r\n                    codeProperty: 'costTypeCode',\r\n                    displayProperty: 'costTypeCode',\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    const filteredCostType = this.masterdata.costTypes.find((e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n                    if (filteredCostType) {\r\n                        params.node.setDataValue('description', filteredCostType.name);\r\n                        params.node.setDataValue('inPL', filteredCostType.inPNL);\r\n                        params.node.setDataValue('noAct', filteredCostType.noAction);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'description',\r\n                colId: 'description',\r\n            },\r\n            {\r\n                headerName: 'Supplier',\r\n                field: 'supplierCode',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: params.context.gridEditable,\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.masterdata.counterparties,\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyCode',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: params.context.gridEditable,\r\n                    };\r\n                },\r\n                onCellValueChanged: this.onClientAccountSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec*',\r\n                field: 'costDirection',\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Ccy*',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    options: this.masterdata.currencies,\r\n                    valueProperty: 'currencyCode',\r\n                    codeProperty: 'currencyCode',\r\n                    displayProperty: 'description',\r\n                    isRequired: true,\r\n                },\r\n                onCellValueChanged: (params) => { },\r\n            },\r\n            {\r\n                headerName: 'Rate Type*',\r\n                field: 'rateTypeCode',\r\n                colId: 'rateTypeCode',\r\n                editable: this.isGridEditable,\r\n                cellRenderer: this.requiredCell.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.rateTypes.map((rateType) => rateType.code),\r\n                    valuePropertyName: 'code',\r\n                    displayFormat: 'code',\r\n                    context: this.masterdata,\r\n                },\r\n                onCellValueChanged: this.onRateTypeChange.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n                editable: this.isPriceCodeEditable,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellRenderer: this.priceCodeRequired.bind(this),\r\n                cellEditorParams: {\r\n                    values: this.masterdata.priceUnits.map((priceUnit) => priceUnit.priceCode),\r\n                    displayPropertyName: 'description',\r\n                    valuePropertyName: 'priceCode',\r\n                    displayFormat: 'priceCode | description',\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Rate/Amount',\r\n                field: 'rateAmount',\r\n                type: 'numericColumn',\r\n                editable: this.isGridEditable,\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'in P&L',\r\n                field: 'inPL',\r\n                colId: 'inPL',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: this.isGridCheckboxEditable,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'No Act',\r\n                field: 'noAct',\r\n                colId: 'noAct',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: this.isGridCheckboxEditable,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Narrative',\r\n                field: 'narrative',\r\n                editable: this.isGridEditable,\r\n                cellEditor: 'agLargeTextCellEditor',\r\n                cellEditorParams: {\r\n                    maxLength: 100,\r\n                    rows: 3,\r\n                    cols: 50,\r\n                },\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.costmatricesGridContextualMenuActions,\r\n                    hide: false,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    isGridCheckboxEditable(params) {\r\n        return !params.context.gridEditable;\r\n    }\r\n\r\n    getRowStatus(params) {\r\n        return params.data.costMatrixLineId ? '' : 'N';\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    isPriceCodeEditable(params): boolean {\r\n        if (params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n            return params.context.gridEditable;\r\n        } else {\r\n            params.node.setDataValue('priceCode', '');\r\n        }\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n        }\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onCostTypeChange(params) {\r\n        const filteredCostType = params.colDef.cellEditorParams.context.costTypes.find((e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n        if (filteredCostType) {\r\n            const costTypeDescription = filteredCostType.name;\r\n            const inPNL = filteredCostType.inPNL;\r\n            const noAction = filteredCostType.noAction;\r\n\r\n            params.node.setDataValue('description', costTypeDescription);\r\n            params.node.setDataValue('inPL', inPNL);\r\n            params.node.setDataValue('noAct', noAction);\r\n        }\r\n    }\r\n\r\n    onRateTypeChange(params) {\r\n        if (params.newValue === RateTypes[RateTypes.Rate]) {\r\n            this.priceCodeRequired(params);\r\n        } else {\r\n            this.isPriceCodeEditable(params);\r\n        }\r\n    }\r\n\r\n    priceCodeRequired(params) {\r\n        if ((!params.value || params.value === '') && params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n            params.node.setDataValue('priceCode', this.requiredCell(this));\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onAddRowButtonClicked() {\r\n        this.isSave = true;\r\n        const newItem = this.createNewRowData();\r\n        const res = this.gridApi.updateRowData({ add: [newItem] });\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onClientAccountSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue) {\r\n            const selectedClientAccount = this.masterdata.counterparties.find(\r\n                (clientAccount) => clientAccount.counterpartyCode === params.newValue,\r\n            );\r\n            if (!selectedClientAccount) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : Client Account does not exist');\r\n            }\r\n        }\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newCostRow = new CostmatrixLine();\r\n        return newCostRow;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.goToCostMatrixHome();\r\n            }\r\n        });\r\n    }\r\n\r\n    onBackButtonClicked() {\r\n        this.goToCostMatrixHome();\r\n    }\r\n\r\n    goToCostMatrixHome() {\r\n        let tabIndex: number = 0;\r\n        tabIndex = 1;\r\n        this.router.navigate(['/' + this.company + '/trades'],\r\n            {\r\n                queryParams: { index: tabIndex },\r\n            });\r\n    }\r\n\r\n    goToCostMatrixViewMode(costmatrixId: number) {\r\n        this.router.navigate(['/' + this.company + '/trades/costmatrix/display/' + encodeURIComponent(costmatrixId.toString())]);\r\n    }\r\n\r\n    getGridEditData(): Costmatrix {\r\n        const costmatrix = new Costmatrix();\r\n        costmatrix.costMatrixId = this.costMatrixId;\r\n        costmatrix.description = this.descriptionCtrl.value;\r\n        costmatrix.costMatrixLines = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costmatrixline = new CostmatrixLine();\r\n                if (rowData.data.isDirty && this.isEdit) {\r\n                    if (costmatrixline.costMatrixLineId !== 0) {\r\n                        costmatrixline.costMatrixLineId = rowData.data.costMatrixLineId;\r\n                    }\r\n                    costmatrixline.costMatrixId = this.costMatrixId;\r\n\r\n                    if (this.masterdata) {\r\n                        const costType = this.masterdata.costTypes.find((e) => e.costTypeCode === rowData.data.costTypeCode);\r\n                        if (costType) {\r\n                            costmatrixline.costTypeId = costType.costTypeId;\r\n                        }\r\n\r\n                        const costTypeCode = this.masterdata.costTypes.find((e) => e.costTypeCode === rowData.data.costTypeCode);\r\n                        if (costTypeCode) {\r\n                            costmatrixline.description = costTypeCode.name;\r\n                        }\r\n\r\n                        const supplierCode = this.masterdata.counterparties.find((e) => e.counterpartyCode === rowData.data.supplierCode);\r\n                        if (supplierCode) {\r\n                            costmatrixline.supplierId = supplierCode.counterpartyID;\r\n                        }\r\n\r\n                        const priceUnit = this.masterdata.priceUnits.find((e) => e.priceCode === rowData.data.priceCode);\r\n                        if (priceUnit) {\r\n                            costmatrixline.priceUnitId = priceUnit.priceUnitId;\r\n                        }\r\n                    }\r\n\r\n                    costmatrixline.payReceive = this.costDirections.find(\r\n                        (e) => e.costDirection === rowData.data.costDirection,\r\n                    ).costDirectionId;\r\n\r\n                    costmatrixline.currencyCode = rowData.data.currencyCode;\r\n                    costmatrixline.rateType = this.getRateTypeIdFromCode(rowData.data.rateTypeCode);\r\n\r\n                    costmatrixline.rateAmount = rowData.data.rateAmount;\r\n                    costmatrixline.inPL = rowData.data.inPL;\r\n                    costmatrixline.noAct = rowData.data.noAct;\r\n                    costmatrixline.narrative = rowData.data.narrative;\r\n                    costmatrix.costMatrixLines.push(costmatrixline);\r\n                }\r\n            }\r\n        });\r\n        return costmatrix;\r\n    }\r\n\r\n    getGridData(): Costmatrix {\r\n        const costmatrix = new Costmatrix();\r\n        costmatrix.costMatrixLines = [];\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data) {\r\n                const costmatrixline = new CostmatrixLine();\r\n                if (this.masterdata) {\r\n                    const costType = this.masterdata.costTypes.find((e) => e.costTypeCode === rowData.data.costTypeCode);\r\n                    if (costType) {\r\n                        costmatrixline.costTypeId = costType.costTypeId;\r\n                    }\r\n\r\n                    const supplierCode = this.masterdata.counterparties.find((e) => e.counterpartyCode === rowData.data.supplierCode);\r\n                    if (supplierCode) {\r\n                        costmatrixline.supplierId = supplierCode.counterpartyID;\r\n                    }\r\n\r\n                    const priceUnit = this.masterdata.priceUnits.find((e) => e.priceCode === rowData.data.priceCode);\r\n                    if (priceUnit) {\r\n                        costmatrixline.priceUnitId = priceUnit.priceUnitId;\r\n                    }\r\n                }\r\n                costmatrixline.description = rowData.data.description;\r\n                costmatrixline.payReceive = this.costDirections.find((e) => e.costDirection === rowData.data.costDirection).costDirectionId;\r\n                costmatrixline.currencyCode = rowData.data.currencyCode;\r\n                costmatrixline.rateType = this.getRateTypeIdFromCode(rowData.data.rateTypeCode);\r\n                costmatrixline.rateAmount = rowData.data.rateAmount;\r\n                costmatrixline.inPL = rowData.data.inPL;\r\n                costmatrixline.noAct = rowData.data.noAct;\r\n                costmatrixline.narrative = rowData.data.narrative;\r\n                costmatrix.costMatrixLines.push(costmatrixline);\r\n            }\r\n        });\r\n        costmatrix.name = this.nameCtrl.value;\r\n        costmatrix.description = this.descriptionCtrl.value;\r\n        return costmatrix;\r\n    }\r\n\r\n    keepParamsReceived(taglist: Tag[], paramsSideNav: MatSidenav) {\r\n        paramsSideNav.close();\r\n        this.parameters = taglist;\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.isSave = true;\r\n        if (!this.formGroup.valid || !this.validate()) {\r\n            this.snackbarService.throwErrorSnackBar('Cost matrix is invalid. Please resolve the errors.');\r\n        } else {\r\n            const costmatrix: Costmatrix = this.isDirty ? this.getGridEditData() : this.getGridData();\r\n            let operation: Observable<Costmatrix>;\r\n\r\n            this.featureFlagService\r\n                .getFlagInfo(Gaps.gap003)\r\n                .subscribe(\r\n                    (flagAuth) => {\r\n                        if (flagAuth && flagAuth.active) {\r\n                            costmatrix.tags = this.parameters;\r\n                            operation = this.isDirty\r\n                                ? this.tradingService.updateCostmatrixWithParameters(costmatrix)\r\n                                : this.tradingService.createCostMatrixWithParameters(costmatrix);\r\n                        } else {\r\n                            operation = this.opertationSave(operation, costmatrix);\r\n                        }\r\n                    },\r\n                    (error) => {\r\n                        operation = this.opertationSave(operation, costmatrix);\r\n                    },\r\n                )\r\n                .add(() => {\r\n                    operation.subscribe((data) => {\r\n                        this.snackbarService.informationSnackBar('Cost matrix details updated successfully');\r\n                        this.goToCostMatrixViewMode(data ? data.costMatrixId : costmatrix.costMatrixId);\r\n                    });\r\n                });\r\n        }\r\n    }\r\n\r\n    private opertationSave(operation: Observable<Costmatrix>, costmatrix: Costmatrix) {\r\n        operation = this.isDirty ? this.tradingService.updateCostmatrix(costmatrix) : this.tradingService.createCostmatrix(costmatrix);\r\n        return operation;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.currencyCode && rowData.data.rateTypeCode) {\r\n                if (rowData.data.rateTypeCode === 'Rate' && rowData.data.priceCode.includes('Required*')) {\r\n                    isValid = false;\r\n                }\r\n            } else if (\r\n                !(rowData.data.costTypeCode || rowData.data.costDirection || rowData.data.currencyCode || rowData.data.rateTypeCode)\r\n            ) {\r\n                isValid = false;\r\n            } else if (\r\n                !(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.currencyCode && rowData.data.rateTypeCode)\r\n            ) {\r\n                isValid = false;\r\n            }\r\n        });\r\n        if (!(this.nameCtrl.value && this.descriptionCtrl.value)) {\r\n            isValid = false;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    setValidators() {\r\n        this.descriptionCtrl.setValidators(Validators.compose([Validators.maxLength(60), Validators.required]));\r\n        this.nameCtrl.setValidators(Validators.compose([Validators.maxLength(30), Validators.required]));\r\n        this.nameCtrl.setAsyncValidators(CostMatrixNameAsyncValidator.createValidator(this.tradingService));\r\n    }\r\n\r\n    getRateTypeIdFromCode(code: string): number {\r\n        const rateTypeId = RateTypes[code];\r\n        return rateTypeId;\r\n    }\r\n    getRateTypeCodeFromID(id: number): string {\r\n        const rateTypeCode = RateTypes[id];\r\n        return rateTypeCode;\r\n    }\r\n\r\n    isDeleteDisabledWithPrivileges(params) {\r\n        const costMatrixRow = params.data as CostmatrixLine;\r\n        if (!costMatrixRow.costMatrixLineId) {\r\n            return false;\r\n        }\r\n        let deleteDisable = true;\r\n        if (params.context.actionContext.gridEditable) {\r\n            deleteDisable = false;\r\n        }\r\n        return deleteDisable;\r\n    }\r\n\r\n    init() {\r\n        this.costmatricesGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.costsMenuActions.deleteCostMatrixLine,\r\n                disabled: this.isDeleteDisabledWithPrivileges,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, costMatrixLine: CostmatrixLine) {\r\n        switch (action) {\r\n            case this.costsMenuActions.deleteCostMatrixLine:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'CostMatrixLine Deletion',\r\n                        text: 'Deleting a cost matrix line is permanent. Do you wish to proceed?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        if (costMatrixLine.costMatrixLineId) {\r\n                            const deleteConfirmationSubscription = this.tradingService\r\n                                .deleteCostMatrixLine(costMatrixLine.costMatrixId, costMatrixLine.costMatrixLineId)\r\n                                .subscribe(() => {\r\n                                    this.snackbarService.informationSnackBar('Cost matrix line Deleted');\r\n                                    this.viewEditCostMatrix();\r\n                                });\r\n                            this.subscriptions.push(deleteConfirmationSubscription);\r\n                        } else {\r\n                            this.gridApi.updateRowData({ remove: [costMatrixLine] });\r\n                        }\r\n                    }\r\n                });\r\n                this.subscriptions.push(confirmationSubscription);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    startLockRefresh(costMatrixId: number, costMatrixName: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Cost Matrix';\r\n        resourceInformation.resourceId = costMatrixId;\r\n        resourceInformation.resourceCode = costMatrixName;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.lockService\r\n            .cleanSessionLocks()\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(() => {\r\n                this.destroy$.next();\r\n                this.destroy$.complete();\r\n            });\r\n    }\r\n\r\n    getParamHeaders(format: string) {\r\n        const now = new Date();\r\n        const todayDate = this.datePipe\r\n            .transform(now, 'yyyyMMdd_hhmm')\r\n            .toString()\r\n            .toUpperCase();\r\n        const fileName = todayDate + '_' + this.company + '_' + this.gridName + '_' + this.userActiveDirectoryName + format;\r\n        const name = this.nameCtrl.value;\r\n        const description = this.descriptionCtrl.value;\r\n        const isCsv: boolean = format === '.csv';\r\n        const params: any = {\r\n            fileName,\r\n            customHeader: [],\r\n        };\r\n        if (!isCsv) {\r\n            params.customHeader = [\r\n                [\r\n                    {\r\n                        data: {\r\n                            type: 'String',\r\n                            value: 'Name',\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            type: 'String',\r\n                            value: name,\r\n                        },\r\n                    },\r\n                ],\r\n                [\r\n                    {\r\n                        data: {\r\n                            type: 'String',\r\n                            value: 'Description',\r\n                        },\r\n                    },\r\n                    {\r\n                        data: {\r\n                            type: 'String',\r\n                            value: description,\r\n                        },\r\n                    },\r\n                ],\r\n                [],\r\n            ];\r\n        } else {\r\n            params.customHeader = 'Name,' + name + '\\r\\nDescription,' + description + '\\n';\r\n        }\r\n        return params;\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        const params = this.getParamHeaders('.xlsx');\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        const params = this.getParamHeaders('.csv');\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n\r\n    openSideBar(drawer) {\r\n        drawer.toggle();\r\n    }\r\n\r\n    /**\r\n     * Recover the tagfields of the parameters table\r\n     */\r\n    getTagFields() {\r\n        return this.tradingService.getTagFields();\r\n    }\r\n\r\n    paramsToChip(): string[] {\r\n        let chip: string;\r\n        const chips = new Array<string>();\r\n        let typenameActual: string;\r\n        if (this.tagsList && this.parameters) {\r\n            this.parameters.forEach((param) => {\r\n                if (param.typeName !== typenameActual && param.tagValueId !== null) {\r\n                    const value = this.tagsList.find((a) => param.typeName === a.typeName);\r\n                    if (value) {\r\n                        const label = value.label;\r\n                        chip = label + '=';\r\n                        chip += this.searchValue(param.typeName, param.tagValueId);\r\n                        typenameActual = param.typeName;\r\n                    }\r\n                } else {\r\n                    chip += ',' + param.tagValueId;\r\n                }\r\n                chips.push(chip);\r\n            });\r\n        }\r\n        return chips;\r\n    }\r\n\r\n    searchValue(typename: string, tagValueId: string): string {\r\n        let paramName = '';\r\n        let paramid = '';\r\n        let list: any[];\r\n        if (typename !== '' && typename !== undefined) {\r\n            switch (typename) {\r\n                case 'SectionDto.ContractTermCode':\r\n                    paramName = 'displayName';\r\n                    paramid = 'contractTermId';\r\n                    list = this.contractTerms;\r\n                    break;\r\n                case 'TradeDto.Type':\r\n                    paramName = 'enumEntityValue';\r\n                    paramid = 'enumEntityId';\r\n                    list = this.contractTypes;\r\n                    break;\r\n                case 'SectionDto.PaymentTermCode':\r\n                    paramName = 'paymentTermCode';\r\n                    paramid = 'paymentTermsId';\r\n                    list = this.paymentTerms;\r\n                    break;\r\n                case 'SectionDto.CounterpartyReference':\r\n                    paramName = 'counterpartyCode';\r\n                    paramid = 'counterpartyID';\r\n                    list = this.counterparties;\r\n                    break;\r\n                case 'SectionDto.PortDestinationCode':\r\n                case 'SectionDto.PortOriginCode':\r\n                    paramName = 'portCode';\r\n                    paramid = 'portId';\r\n                    list = this.ports;\r\n                    break;\r\n            }\r\n            if (paramName !== '' && paramid !== '') {\r\n                tagValueId = this.searchTagByid(tagValueId, list, paramName, paramid);\r\n            }\r\n\r\n        }\r\n\r\n        return tagValueId;\r\n    }\r\n\r\n    private searchTagByid(tagValueId: string, list: any[], paramName: string, paramId: string): string {\r\n        const tagsIds = tagValueId.split(',');\r\n        const newTagValueId = new Array();\r\n\r\n        tagsIds.forEach((id) => {\r\n            const tag = list.find((val) => val[paramId] === Number(id));\r\n            newTagValueId.push(tag[paramName]);\r\n        });\r\n        return newTagValueId.join();\r\n    }\r\n\r\n    getCommodities() {\r\n        this.masterdataService.getContractTerms().subscribe((contractTerms) => {\r\n            this.contractTerms = contractTerms.value;\r\n            this.masterdataService.getContractTypes().subscribe((contractType) => {\r\n                this.contractTypes = contractType.value;\r\n                this.masterdataService.getCounterparties('', new PagingOptions()).subscribe((counterparty) => {\r\n                    this.counterparties = counterparty.value;\r\n                    this.masterdataService.getPaymentTerms('', new PagingOptions()).subscribe((paymentTerms) => {\r\n                        this.paymentTerms = paymentTerms.value;\r\n                        this.masterdataService.getPorts('', new PagingOptions()).subscribe((ports) => {\r\n                            this.ports = ports.value;\r\n                            this.paramsReady = true;\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // For FAB\r\n    initFABActions() {\r\n        this.fabMenuActions = [];\r\n\r\n        const actionPrevious: FloatingActionButtonActions = {\r\n            icon: 'keyboard_backspace',\r\n            text: 'Discard',\r\n            action: 'actionBack',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n        const actionSave: FloatingActionButtonActions = {\r\n            icon: 'save',\r\n            text: 'Save',\r\n            action: 'actionSave',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n        const actionAdd: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'New Costmatrix',\r\n            action: 'actionAdd',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n        const actionEdit: FloatingActionButtonActions = {\r\n            icon: 'edit',\r\n            text: 'Edit the Costmatrix',\r\n            action: 'actionEdit',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n\r\n        if (this.isEdit && !this.isCostMatrixDisplay) {\r\n            this.fabMenuActions.push(actionPrevious);\r\n            this.fabMenuActions.push(actionSave);\r\n        } else {\r\n            this.fabMenuActions.push(actionAdd);\r\n            this.fabMenuActions.push(actionEdit);\r\n        }\r\n\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'actionBack': {\r\n                this.onBackButtonClicked();\r\n                break;\r\n            }\r\n            case 'actionSave': {\r\n                this.onSaveButtonClicked();\r\n                break;\r\n            }\r\n            case 'actionAdd': {\r\n                this.router.navigate(['/' + this.company + '/trades/costmatrix/create/']);\r\n                break;\r\n            }\r\n            case 'actionEdit': {\r\n                this.router.navigate(['/' + this.company + '/trades/costmatrix/edit/', this.costmatrixId]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <form [formGroup]=\\\"searchCostMatrixForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           value=\\\"\\\"\\r\\n                           placeholder=\\\"Name\\\"\\r\\n                           (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                           formControlName=\\\"searchCostMatrixNameCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           value=\\\"\\\"\\r\\n                           placeholder=\\\"Description\\\"\\r\\n                           (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                           formControlName=\\\"searchCostMatrixDescriptionCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n\\r\\n                <button mat-raised-button\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\"\\r\\n                              (click)=\\\"onSearchButtonClicked()\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card>\\r\\n\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\">\\r\\n            <mat-card-title>Cost Matrices</mat-card-title>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\">\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"costGridOptions && costGridOptions.columnDefs\\\"\\r\\n                                                [gridOptions]=\\\"costGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"gridCode\\\"\\r\\n                                                [sharingEnabled]=\\\"false\\\"\\r\\n                                                [savingEnabled]=\\\"false\\\"\\r\\n                                                [hasColumnHandling]=\\\"false\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n                <atlas-grid-enlargement *ngIf=\\\"costGridOptions && costGridOptions.columnDefs\\\"\\r\\n                                        [gridOptions]=\\\"costGridOptions\\\"\\r\\n                                        [userPreferencesParameters]=\\\"gridPreferencesParameters\\\"\\r\\n                                        (rowClicked)=\\\"onCostMatrixRowClicked($event)\\\"\\r\\n                                        #gridZoom>\\r\\n                </atlas-grid-enlargement>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <mat-card-content>\\r\\n            <div ag-grid=\\\"costGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"costsGridRows\\\"\\r\\n                                 [columnDefs]=\\\"costsGridCols\\\"\\r\\n                                 [gridOptions]=\\\"costGridOptions\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (rowClicked)=\\\"onCostMatrixRowClicked($event)\\\"\\r\\n                                 [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [singleClickEdit]=\\\"true\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\"> </atlas-lock-interval>\\r\\n</div>\\r\\n\"","module.exports = \".cost-matix-float-right {\\n  float: right; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../../app/core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../../app/core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FlagInfo } from '../../../../../shared/dtos/flag-info';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../shared/entities/lock-resource-information.entity';\r\nimport { Tag } from '../../../../../shared/entities/tag.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { Gaps } from '../../../../../shared/enums/gaps.enum';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { FeatureFlagService } from '../../../../../shared/services/http-services/feature-flag.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { Costmatrix } from '../../../../../shared/services/trading/dtos/costmatrix';\r\nimport { MasterData } from './../../../../../shared/entities/masterdata.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-costmatrix-list',\r\n    templateUrl: './costmatrix-list.component.html',\r\n    styleUrls: ['./costmatrix-list.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class CostmatrixListComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    static i: number;\r\n    costsMenuActions: { [key: string]: string } = {\r\n        deleteCostMatrix: 'delete',\r\n        editCostMatrix: 'edit',\r\n        imageCostMatrix: 'image',\r\n    };\r\n\r\n    costGridOptions: agGrid.GridOptions;\r\n    costsGridCols: agGrid.ColDef[];\r\n    costsGridRows: Costmatrix[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    costmatricesGridContextualMenuActions: AgContextualMenuAction[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    company: string;\r\n    costmatrix: Costmatrix[];\r\n    isDirty: boolean;\r\n    costmatrixId: number;\r\n    searchCostMatrixName: string;\r\n    searchCostMatrixDescription: string;\r\n    searchCostMatrixForm: FormGroup;\r\n    isLoading: boolean;\r\n    isCostMatrixEditPrivilege = false;\r\n\r\n    gridContext = {\r\n        isContractApprovedOnce: false,\r\n        deletePrivileges: true,\r\n    };\r\n\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    userActiveDirectoryName: string;\r\n    excelStyles: any;\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    tagFields: any;\r\n    tagsList: any;\r\n    gridPreferencesParameters: UserGridPreferencesParameters;\r\n    gridCode = 'costMatrixList';\r\n    flagAuth: FlagInfo;\r\n    masterdata: MasterData;\r\n\r\n    constructor(\r\n        private companyManager: CompanyManagerService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private tradingService: TradingService,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        private formBuilder: FormBuilder,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        private formatDate: FormatDatePipe,\r\n        protected lockService: LockService,\r\n        protected securityService: SecurityService,\r\n        public gridService: AgGridService,\r\n        private masterdataService: MasterdataService,\r\n        private featureFlagService: FeatureFlagService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.searchCostMatrixForm = this.formBuilder.group({\r\n            searchCostMatrixNameCtrl: [''],\r\n            searchCostMatrixDescriptionCtrl: [''],\r\n        });\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.tagFields = this.getTagFields();\r\n        this.tagFields.subscribe((val) => {\r\n            this.tagsList = val;\r\n        });\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'CostMatrices')) {\r\n                this.isCostMatrixEditPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'EditCostMatrices');\r\n            }\r\n        });\r\n        this.costmatrixId = Number(this.route.snapshot.paramMap.get('costmatrixId'));\r\n        this.isLoading = true;\r\n        this.init();\r\n        this.featureFlagService.getFlagInfo(Gaps.gap003).subscribe((flagAuth) => {\r\n            this.flagAuth = flagAuth;\r\n            this.initializeGridColumns();\r\n            this.getCostMatrixList();\r\n        });\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        if (this.flagAuth && this.flagAuth.active) {\r\n            this.costsGridCols = [\r\n                {\r\n                    colId: 'name',\r\n                    headerName: 'Name',\r\n                    field: 'name',\r\n                },\r\n                {\r\n                    colId: 'description',\r\n                    headerName: 'Description',\r\n                    field: 'description',\r\n                },\r\n                {\r\n                    colId: 'tags',\r\n                    headerName: 'Parameters',\r\n                    cellStyle: { overflow: 'hidden' },\r\n                    field: 'tags',\r\n                    valueGetter: (params) => {\r\n                        if (params.data.tags) {\r\n                            return this.paramsToChip(params.data.tags).join(' ');\r\n                        }\r\n                        return '';\r\n                    },\r\n                },\r\n                {\r\n                    colId: 'setupby',\r\n                    headerName: 'Set up by',\r\n                    field: 'createdBy',\r\n                },\r\n                {\r\n                    colId: 'setupDate',\r\n                    headerName: 'Set up date',\r\n                    field: 'createdDateTime',\r\n                    cellClass: 'dateFormat',\r\n                    valueGetter: (params) => {\r\n                        const dateFormat: FormatDatePipe = this.formatDate;\r\n                        const val = dateFormat.transformdate(params.data.createdDateTime);\r\n\r\n                        if (val && val.indexOf('/') < 0) {\r\n                            return val;\r\n                        }\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    },\r\n                },\r\n                {\r\n                    colId: 'menu',\r\n                    headerName: '',\r\n                    cellRendererFramework: AgContextualMenuComponent,\r\n                    cellRendererParams: {\r\n                        context: {\r\n                            componentParent: this,\r\n                            actionContext: this.gridContext,\r\n                        },\r\n                        menuActions: this.costmatricesGridContextualMenuActions,\r\n                        showIcon: this.isCostMatrixEditPrivilege,\r\n                    },\r\n                    cellClass: 'ag-contextual-menu',\r\n                    width: 80,\r\n                    minWidth: 80,\r\n                    maxWidth: 80,\r\n                },\r\n            ];\r\n        } else {\r\n            this.costsGridCols = [\r\n                {\r\n                    colId: 'name',\r\n                    headerName: 'Name',\r\n                    field: 'name',\r\n                },\r\n                {\r\n                    colId: 'description',\r\n                    headerName: 'Description',\r\n                    field: 'description',\r\n                },\r\n                {\r\n                    colId: 'setupBy',\r\n                    headerName: 'Set up by',\r\n                    field: 'createdBy',\r\n                },\r\n                {\r\n                    colId: 'setupDate',\r\n                    headerName: 'Set up date',\r\n                    field: 'createdDateTime',\r\n                    cellClass: 'dateFormat',\r\n                    valueGetter: (params) => {\r\n                        const dateFormat: FormatDatePipe = this.formatDate;\r\n                        const val = dateFormat.transformdate(params.data.createdDateTime);\r\n\r\n                        if (val && val.indexOf('/') < 0) {\r\n                            return val;\r\n                        }\r\n                        const split = val.split('/');\r\n                        return split[2] + '-' + split[1] + '-' + split[0];\r\n                    },\r\n                },\r\n                {\r\n                    colId: 'menu',\r\n                    headerName: '',\r\n                    cellRendererFramework: AgContextualMenuComponent,\r\n                    cellRendererParams: {\r\n                        context: {\r\n                            componentParent: this,\r\n                            actionContext: this.gridContext,\r\n                        },\r\n                        menuActions: this.costmatricesGridContextualMenuActions,\r\n                        showIcon: this.isCostMatrixEditPrivilege,\r\n                    },\r\n                    cellClass: 'ag-contextual-menu',\r\n                    width: 80,\r\n                    minWidth: 80,\r\n                    maxWidth: 80,\r\n                },\r\n            ];\r\n        }\r\n\r\n        if (this.costGridOptions) {\r\n            this.costGridOptions.columnDefs = this.costsGridCols;\r\n        }\r\n    }\r\n\r\n    onSearchButtonClicked() {\r\n        this.searchCostMatrixName = this.searchCostMatrixForm.get('searchCostMatrixNameCtrl').value.toUpperCase();\r\n        this.searchCostMatrixDescription = this.searchCostMatrixForm.get('searchCostMatrixDescriptionCtrl').value.toUpperCase();\r\n        if (!this.searchCostMatrixName && !this.searchCostMatrixDescription) {\r\n            return;\r\n        }\r\n        if (this.costmatrix && this.costmatrix.length > 0) {\r\n            const rows = this.costmatrix.filter(\r\n                (item) =>\r\n                    item.name\r\n                        .toString()\r\n                        .toUpperCase()\r\n                        .includes(this.searchCostMatrixName) &&\r\n                    item.description\r\n                        .toString()\r\n                        .toUpperCase()\r\n                        .includes(this.searchCostMatrixDescription),\r\n            );\r\n            this.costsGridRows = rows;\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.costGridOptions = params;\r\n        if (this.costsGridCols) {\r\n            this.costGridOptions.columnDefs = this.costsGridCols;\r\n        }\r\n        this.gridApi = this.costGridOptions.api;\r\n        this.gridColumnApi = this.costGridOptions.columnApi;\r\n\r\n    }\r\n\r\n    setColumnsToFitGrid() {\r\n        this.gridApi.sizeColumnsToFit();\r\n    }\r\n\r\n    getCostMatrixList() {\r\n        this.tradingService.getCostmatricesByCompanyId(this.company).subscribe((data) => {\r\n            this.costmatrix = data.value;\r\n            if (this.flagAuth && this.flagAuth.active) {\r\n                CostmatrixListComponent.i = this.costmatrix.length;\r\n                this.costmatrix.forEach((element) => {\r\n                    this.tradingService.GetCostMatricesListWithTags(element.costMatrixId).subscribe(\r\n                        (valsTags) => {\r\n                            if (valsTags && valsTags.length > 0) {\r\n                                element.tags = valsTags[0].tags as Tag[];\r\n                                CostmatrixListComponent.i--;\r\n                                if (CostmatrixListComponent.i === 0) {\r\n                                    this.costsGridRows = this.costmatrix;\r\n                                    this.isLoading = false;\r\n                                }\r\n                            }\r\n                        },\r\n                        (error) => {\r\n                            CostmatrixListComponent.i--;\r\n                        },\r\n                    );\r\n                });\r\n            } else {\r\n                this.costsGridRows = this.costmatrix;\r\n                this.isLoading = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    paramsToChip(val: Tag[]): string[] {\r\n        let chip: string;\r\n        const chips = new Array<string>();\r\n        let typenameActual: string;\r\n\r\n        if (this.tagsList && val) {\r\n            val.forEach((param) => {\r\n                if (param.typeName !== typenameActual && param.tagValueId !== null) {\r\n                    const value = this.tagsList.find((a) => param.typeName === a.typeName);\r\n                    if (value) {\r\n                        const label = value.label;\r\n                        chip = label + '=';\r\n                        chip += this.searchValue(param.typeName, param.tagValueId);\r\n                        typenameActual = param.typeName;\r\n                    }\r\n                } else {\r\n                    chip += ',' + param.tagValueId;\r\n                }\r\n                chips.push(chip);\r\n            });\r\n        }\r\n        return chips;\r\n    }\r\n\r\n    searchValue(typename: string, tagValueId: string): string {\r\n        let paramName = '';\r\n        let paramid = '';\r\n        let list: any[];\r\n        if (typename !== '' && typename !== undefined) {\r\n            switch (typename) {\r\n                case 'SectionDto.ContractTermCode':\r\n                    paramName = 'displayName';\r\n                    paramid = 'contractTermId';\r\n                    list = this.masterdata.contractTerms;\r\n                    break;\r\n                case 'TradeDto.Type':\r\n                    paramName = 'enumEntityValue';\r\n                    paramid = 'enumEntityId';\r\n                    list = this.masterdata.contractTypes;\r\n                    break;\r\n                case 'SectionDto.PaymentTermCode':\r\n                    paramName = 'paymentTermCode';\r\n                    paramid = 'paymentTermsId';\r\n                    list = this.masterdata.paymentTerms;\r\n                    break;\r\n                case 'SectionDto.CounterpartyReference':\r\n                    paramName = 'counterpartyCode';\r\n                    paramid = 'counterpartyID';\r\n                    list = this.masterdata.counterparties;\r\n                    break;\r\n                case 'SectionDto.PortDestinationCode':\r\n                case 'SectionDto.PortOriginCode':\r\n                    paramName = 'portCode';\r\n                    paramid = 'portId';\r\n                    list = this.masterdata.ports;\r\n                    break;\r\n            }\r\n            if (paramName !== '' && paramid !== '') {\r\n                tagValueId = this.searchTagByid(tagValueId, list, paramName, paramid);\r\n            }\r\n        }\r\n\r\n        return tagValueId;\r\n    }\r\n\r\n    private searchTagByid(tagValueId: string, list: any[], paramName: string, paramId: string): string {\r\n        const tagsIds = tagValueId.split(',');\r\n        const newTagValueId = new Array();\r\n\r\n        tagsIds.forEach((id) => {\r\n            newTagValueId.push(list.find((val) => val[paramId] === Number(id))[paramName]);\r\n        });\r\n        return newTagValueId.join();\r\n    }\r\n    /**\r\n     * Recover the tagfields of the parameters table\r\n     */\r\n    getTagFields() {\r\n        return this.tradingService.getTagFields();\r\n    }\r\n\r\n    init() {\r\n        this.costmatricesGridContextualMenuActions = [\r\n            {\r\n                icon: 'edit',\r\n                text: 'Edit',\r\n                action: this.costsMenuActions.editCostMatrix,\r\n            },\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.costsMenuActions.deleteCostMatrix,\r\n            },\r\n            {\r\n                icon: 'add',\r\n                text: 'Image',\r\n                action: this.costsMenuActions.imageCostMatrix,\r\n            },\r\n        ];\r\n\r\n        this.gridPreferencesParameters = {\r\n            company: this.company,\r\n            gridId: this.gridCode,\r\n            gridOptions: null,\r\n            savingEnabled: false,\r\n            sharingEnabled: false,\r\n            showExport: true,\r\n            hasColumnHandling: false,\r\n        };\r\n    }\r\n\r\n    handleAction(action: string, costMatrix: Costmatrix) {\r\n        switch (action) {\r\n            case this.costsMenuActions.editCostMatrix:\r\n                const costMatrixId = costMatrix.costMatrixId;\r\n                this.lockService\r\n                    .isLockedCostMatrix(costMatrix.costMatrixId)\r\n                    .pipe(takeUntil(this.destroy$))\r\n                    .subscribe((lock: IsLocked) => {\r\n                        if (lock.isLocked) {\r\n                            this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'Lock',\r\n                                    text: lock.message,\r\n                                    okButton: 'Got it',\r\n                                },\r\n                            });\r\n                        } else {\r\n                            this.router.navigate(['/' + this.company + '/trades/costmatrix/edit/', costMatrixId]);\r\n                        }\r\n                    });\r\n\r\n                break;\r\n\r\n            case this.costsMenuActions.deleteCostMatrix:\r\n                const costMatrixName = costMatrix.name;\r\n                this.lockService\r\n                    .isLockedCostMatrix(costMatrix.costMatrixId)\r\n                    .pipe(takeUntil(this.destroy$))\r\n                    .subscribe((lock: IsLocked) => {\r\n                        if (lock.isLocked) {\r\n                            this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'Lock',\r\n                                    text: lock.message,\r\n                                    okButton: 'Got it',\r\n                                },\r\n                            });\r\n                        } else {\r\n                            this.startLockRefresh(costMatrix.costMatrixId, costMatrix.name);\r\n                            this.lockService\r\n                                .lockCostMatrix(costMatrix.costMatrixId, LockFunctionalContext.CostMatrixDeletion)\r\n                                .pipe(takeUntil(this.destroy$))\r\n                                .subscribe((lockState) => {\r\n                                    const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                                        data: {\r\n                                            title: 'Delete ' + costMatrixName + ' ?',\r\n                                            text: 'Deleting a cost matrix is permanent. Do you wish to proceed?',\r\n                                            okButton: 'DELETE ANYWAY',\r\n                                            cancelButton: 'DISCARD',\r\n                                        },\r\n                                    });\r\n                                    const confirmationSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                                        this.stopLockRefresh();\r\n                                        if (answer) {\r\n                                            if (costMatrix.costMatrixId) {\r\n                                                const deleteConfirmationSubscription = this.tradingService\r\n                                                    .deleteCostMatrix(costMatrix.costMatrixId)\r\n                                                    .subscribe(() => {\r\n                                                        this.snackbarService.informationSnackBar('CostMatrix Deleted');\r\n                                                        this.getCostMatrixList();\r\n                                                    });\r\n                                                this.subscriptions.push(deleteConfirmationSubscription);\r\n                                            } else {\r\n                                                this.gridApi.updateRowData({ remove: [costMatrix] });\r\n                                            }\r\n                                        }\r\n                                        this.lockService\r\n                                            .unlockCostMatrix(costMatrix.costMatrixId, LockFunctionalContext.CostMatrixDeletion)\r\n                                            .pipe(takeUntil(this.destroy$))\r\n                                            .subscribe();\r\n                                    });\r\n                                    this.subscriptions.push(confirmationSubscription);\r\n                                });\r\n                        }\r\n                    });\r\n                break;\r\n\r\n            case this.costsMenuActions.imageCostMatrix:\r\n                const originalCostMatrixId = costMatrix.costMatrixId;\r\n                this.router.navigate(['/' + this.company + '/trades/costmatrix/image/', originalCostMatrixId]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onCostMatrixRowClicked(event) {\r\n        const costMatrixId = event.data.costMatrixId;\r\n        this.router.navigate([\r\n            '/' + this.companyManager.getCurrentCompanyId() + '/trades/costmatrix/display/' + encodeURIComponent(costMatrixId),\r\n        ]);\r\n    }\r\n\r\n    onExportButtonClickedAsExcel() {\r\n        const screenName: string = 'Cost Matrix List';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe\r\n            .transform(now, 'yyyyMMdd_hhmm')\r\n            .toString()\r\n            .toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n\r\n    onExportButtonClickedAsCSV() {\r\n        const screenName: string = 'Cost Matrix List';\r\n        const now = new Date();\r\n        const todayDate = this.datePipe\r\n            .transform(now, 'yyyyMMdd_hhmm')\r\n            .toString()\r\n            .toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n\r\n    startLockRefresh(costMatrixId: number, costMatrixName: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'Cost Matrix';\r\n        resourceInformation.resourceId = costMatrixId;\r\n        resourceInformation.resourceCode = costMatrixName;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.lockService\r\n            .cleanSessionLocks()\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(() => {\r\n                this.destroy$.next();\r\n                this.destroy$.complete();\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                              [fabType]=\\\"fabType\\\"\\r\\n                              [fabActions]=\\\"fabMenuActions\\\"\\r\\n                              [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                              (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n</atlas-floating-action-button>\\r\\n<atlas-costmatrix-list #costmatrixListComponent></atlas-costmatrix-list>\\r\\n\"","module.exports = \"\"","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { CostmatrixListComponent } from './components/costmatrix-list/costmatrix-list.component';\r\n\r\n@Component({\r\n    selector: 'atlas-costmatrices',\r\n    templateUrl: './costmatrices.component.html',\r\n    styleUrls: ['./costmatrices.component.scss'],\r\n})\r\nexport class CostmatricesComponent implements OnInit, AfterViewInit {\r\n    @ViewChild('costmatrixListComponent') costmatrixListComponent: CostmatrixListComponent;\r\n    company: string;\r\n\r\n    // FAB\r\n    createCostMatrixActionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'CostMatrices',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: null,\r\n    };\r\n\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabType: FABType = FABType.ExtendedSingleButton;\r\n    fabTitle: string = 'COST MATRICES ACTIONS';\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authorizationService: AuthorizationService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.initFABActions();\r\n    }\r\n\r\n    onCreateCostMatrixButtonClicked() {\r\n        this.router.navigate([this.company + '/trades/costmatrix/create']);\r\n    }\r\n    onTabSelected() {\r\n        this.costmatrixListComponent.setColumnsToFitGrid();\r\n    }\r\n\r\n    // For FAB\r\n    initFABActions() {\r\n        const actionCreateCostMatrix: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'Create Cost Matrix',\r\n            action: 'createCostMatrix',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n\r\n        this.fabMenuActions = [];\r\n\r\n        const createCostMatrixPrivilegeLevel = this.authorizationService.getPermissionLevel(\r\n            this.company,\r\n            this.createCostMatrixActionPrivilege.privilegeName,\r\n            this.createCostMatrixActionPrivilege.privilegeParentLevelOne,\r\n            this.createCostMatrixActionPrivilege.privilegeParentLevelTwo);\r\n        const hasCreateTradePrivilege = (createCostMatrixPrivilegeLevel >= this.createCostMatrixActionPrivilege.permission);\r\n        if (hasCreateTradePrivilege) {\r\n            this.fabMenuActions.push(actionCreateCostMatrix);\r\n        }\r\n\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'createCostMatrix': {\r\n                this.onCreateCostMatrixButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-toolbar class=\\\"menu-bar\\\">\\r\\n    <div class=\\\"toolbar-div\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start center\\\"\\r\\n             fxFlex=\\\"80\\\">\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\"\\r\\n             fxFlex=\\\"20\\\"\\r\\n             *ngIf=\\\"hideAndShowMenuBarButtons\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <a matTooltip=\\\"Back to Previou Page\\\"\\r\\n               (click)=\\\"onPrevPageNavigation()\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">keyboard_backspace</mat-icon>\\r\\n            </a>\\r\\n            <a matTooltip=\\\"Save Costmatrix\\\"\\r\\n               (click)=\\\"onSaveButtonClicked()\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <div class=\\\"white-icon outline-save-icon\\\"></div>\\r\\n            </a>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\"\\r\\n             fxFlex=\\\"20\\\"\\r\\n             *ngIf=\\\"!hideAndShowMenuBarButtons\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <a matTooltip=\\\"New Costmatrix\\\"\\r\\n               (click)=\\\"onNewCostmatrixButtonClicked()\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">add</mat-icon>\\r\\n            </a>\\r\\n            <a matTooltip=\\\"Edit the Costmatrix\\\"\\r\\n               (click)=\\\"onCreateButtonClicked()\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">create</mat-icon>\\r\\n            </a>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</mat-toolbar>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'atlas-costmatrix-menu-bar',\r\n    templateUrl: './costmatrix-menu-bar.component.html',\r\n    styleUrls: ['./costmatrix-menu-bar.component.scss'],\r\n})\r\nexport class CostmatrixMenuBarComponent implements OnInit {\r\n    @Input() hideAndShowMenuBarButtons: boolean = undefined;\r\n    @Output() readonly costmatrixSaveAction = new EventEmitter<void>();\r\n    @Output() readonly costmatrixBackAction = new EventEmitter<void>();\r\n    costmatrixId: number;\r\n    company: string;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router) { }\r\n\r\n    ngOnInit() {\r\n        this.costmatrixId = this.route.snapshot.params['costmatrixId'];\r\n        this.company = this.route.snapshot.params['company'];\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.costmatrixSaveAction.emit();\r\n    }\r\n\r\n    onPrevPageNavigation() {\r\n        this.costmatrixBackAction.emit();\r\n    }\r\n\r\n    onCreateButtonClicked() {\r\n        this.router.navigate(['/' + this.company + '/trades/costmatrix/edit/', this.costmatrixId]);\r\n    }\r\n\r\n    onNewCostmatrixButtonClicked() {\r\n        this.router.navigate(['/' + this.company + '/trades/costmatrix/create/']);\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"captureFxdealFormGroup\\\">\\r\\n    <div>\\r\\n        <atlas-fxdeal-header-form #fxDealHeaderFormComponent></atlas-fxdeal-header-form>\\r\\n    </div>\\r\\n    <mat-divider></mat-divider>\\r\\n    <div class=\\\"fx-deal-main\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-around start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"48\\\">\\r\\n            <atlas-deal-terms-form- #dealTermsFormComponent\\r\\n                                    (dealTypeChange)=\\\"onDealTypeChanged($event)\\\"\\r\\n                                    (maturityDateChange)=\\\"onMaturityDateChanged($event)\\\"></atlas-deal-terms-form->\\r\\n        </div>\\r\\n        <div fxLayout=\\\"\\r\\n                                    column\\\"\\r\\n             fxLayoutAlign=\\\"start right\\\"\\r\\n             fxFlex=\\\"49\\\">\\r\\n            <atlas-bank-form #bankFormComponent> </atlas-bank-form>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"fx-deal-main\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-around start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"48\\\">\\r\\n            <atlas-deal-form #dealFormComponent\\r\\n                             (defaultRoeTypeValuePassed)=\\\"onDefaultSpotRoeTypeValue($event)\\\"\\r\\n                             (fxRateValuePassed)=\\\"onFxRateValue($event)\\\"\\r\\n                             (spotRoeWarningValuePassed)=\\\"onSpotRoeWarningValue($event)\\\"></atlas-deal-form>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start right\\\"\\r\\n             fxFlex=\\\"49\\\">\\r\\n            <atlas-rate-entry #rateEntryComponent\\r\\n                              (valueSelected)=\\\"onTraderROECalculation($event)\\\"\\r\\n                              (roeTypeSelected)=\\\"onSettledAmountCalculation($event)\\\"\\r\\n                              (settledAmountValuePassed)=\\\"onSettledAmountEvaluation($event)\\\"></atlas-rate-entry>\\r\\n            <atlas-settlement-documents #settlementDocumentsComponent></atlas-settlement-documents>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"fx-deal-main\\\"\\r\\n         fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start left\\\">\\r\\n        <div>\\r\\n            <atlas-internal-memo-form #internalMemoFormComponent></atlas-internal-memo-form>\\r\\n        </div>\\r\\n        <div class=\\\"button-icon-action\\\"\\r\\n             fxLayout=\\\"column\\\">\\r\\n            <a title=\\\"Cancel\\\"\\r\\n            *ngIf=\\\"!isViewMode\\\"\\r\\n               (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">backspace</mat-icon>\\r\\n            </a>\\r\\n\\r\\n            <a title=\\\"Create\\\"\\r\\n            *ngIf=\\\"isEditShow && isEditPrivilege\\\"\\r\\n               (click)=\\\"onCreateButtonClicked()\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">add</mat-icon>\\r\\n            </a>\\r\\n\\r\\n            <a title=\\\"Edit\\\"\\r\\n            *ngIf=\\\"isViewMode && isEditShow && isEditPrivilege\\\"\\r\\n               (click)=\\\"onEditButtonClicked()\\\"\\r\\n               [ngClass]=\\\"isSettled == true ? 'menu-bar-action-icon-disabled': 'menu-bar-action-icon'\\\"\\r\\n               [matTooltip]=\\\"isSettled == true ? 'Edition of a settled FX deal is not possible': null \\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">create</mat-icon>\\r\\n            </a>\\r\\n\\r\\n\\r\\n            <a title=\\\"Save\\\"\\r\\n               *ngIf=\\\"!isViewMode\\\"\\r\\n               (click)=\\\"onSaveButtonClicked()\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">save</mat-icon>\\r\\n            </a>\\r\\n\\r\\n\\r\\n            <a title=\\\"Delete\\\"\\r\\n            *ngIf=\\\"isViewMode && isDeletePrivilege\\\"\\r\\n               (click)=\\\"onDeleteButtonClicked()\\\"\\r\\n               [ngClass]=\\\"isDeleteShow == true ? 'menu-bar-action-icon-disabled': 'menu-bar-action-icon'\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">delete</mat-icon>\\r\\n            </a>\\r\\n\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \".menu-bar-action-icon {\\n  cursor: pointer;\\n  background-color: #81cf5c;\\n  border-radius: 50%;\\n  width: 40px;\\n  height: 40px;\\n  text-align: center;\\n  margin-bottom: 8px; }\\n\\n.menu-bar-action-icon-disabled {\\n  cursor: pointer;\\n  background-color: rgba(0, 0, 0, 0.38);\\n  cursor: not-allowed;\\n  border-radius: 50%;\\n  width: 40px;\\n  height: 40px;\\n  text-align: center;\\n  margin-bottom: 8px; }\\n\\n.white-icon {\\n  color: white;\\n  height: 24px;\\n  width: 24px;\\n  padding: 7px; }\\n\\n.fx-deal-main {\\n  margin-top: 20px;\\n  margin-right: 20px;\\n  margin-left: 20px; }\\n\\n.button-icon-action {\\n  padding: 8px; }\\n\"","import { Component, OnInit, ViewChild, HostListener } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FxTradeType } from '../../../../shared/entities/fx-trade-type.entity';\r\nimport { FxDealDetail } from '../../../../shared/entities/fxdeal-detail.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { FxDealStatus } from '../../../../shared/enums/fx-deals-status.enum';\r\nimport { PostingStatus } from '../../../../shared/enums/posting-status.enum';\r\nimport { SpotRoeType } from '../../../../shared/enums/spot-roe-type.enum';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { BankFormComponent } from '../form-components/bank-form-component/bank-form.component';\r\nimport { DealFormComponent } from '../form-components/deal-form-comonent/deal-form.component';\r\nimport { DealTermsFormComponent } from '../form-components/deal-terms-component/deal-terms-form.component';\r\nimport { FxDealHeaderFormComponent } from '../form-components/header-form-component/fxdeal-header-form.component';\r\nimport { InternalMemoFormComponent } from '../form-components/internal-memo-form-component/internal-memo-form.component';\r\nimport { RateEntryComponent } from '../form-components/rate-entry-form-component/rate-entry-form.component';\r\nimport { SettlementDocumentsComponent } from '../form-components/settlement-documents-component/settlement-documents.component';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-fx-deals-capture',\r\n    templateUrl: './fx-deals-capture.component.html',\r\n    styleUrls: ['./fx-deals-capture.component.scss'],\r\n})\r\nexport class FxDealsCaptureComponent implements OnInit {\r\n    @ViewChild('fxDealHeaderFormComponent') fxDealHeaderFormComponent: FxDealHeaderFormComponent;\r\n    @ViewChild('dealTermsFormComponent') dealTermsFormComponent: DealTermsFormComponent;\r\n    @ViewChild('bankFormComponent') bankFormComponent: BankFormComponent;\r\n    @ViewChild('dealFormComponent') dealFormComponent: DealFormComponent;\r\n    @ViewChild('rateEntryComponent') rateEntryComponent: RateEntryComponent;\r\n    @ViewChild('internalMemoFormComponent') internalMemoFormComponent: InternalMemoFormComponent;\r\n    @ViewChild('settlementDocumentsComponent') settlementDocumentsComponent: SettlementDocumentsComponent;\r\n\r\n    fxDealDeatil: FxDealDetail;\r\n    private formComponents: BaseFormComponent[] = [];\r\n    saveInProgress: boolean;\r\n    captureFxdealFormGroup: FormGroup;\r\n    onValidationState = false;\r\n    model: FxDealDetail;\r\n    subscriptions: Subscription[] = [];\r\n    isViewMode: boolean = false;\r\n    isEdit: boolean = false;\r\n    fxDealId: number;\r\n    isDeleteShow: boolean = false;\r\n    isEditShow: boolean = false;\r\n    company: string;\r\n    isEditPrivilege: boolean = false;\r\n    isDeletePrivilege: boolean = false;\r\n    masterData: MasterData;\r\n    filteredFxTradeTypes: FxTradeType[];\r\n    isNdf: boolean = false;;\r\n    ndfAgreedRate: number;\r\n    ndfAgreedDate?: Date;\r\n    messageGenerated: string;\r\n    mappingFields = new Array();\r\n    isSettled: boolean = false;\r\n\r\n    destroy$ = new Subject();\r\n\r\n    constructor(private route: ActivatedRoute, protected tradingService: TradingService,\r\n        protected utilService: UtilService,\r\n        protected snackbarService: SnackbarService,\r\n        protected formBuilder: FormBuilder,\r\n        private authorizationService: AuthorizationService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected lockService: LockService,\r\n        protected router: Router,\r\n        public dialog: MatDialog) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredFxTradeTypes = this.masterData.fxTradeTypes;\r\n        this.captureFxdealFormGroup = this.formBuilder.group({\r\n            fxDealHeaderFormComponent: this.fxDealHeaderFormComponent.getFormGroup(),\r\n            dealTermsFormComponent: this.dealTermsFormComponent.getFormGroup(),\r\n            bankFormComponent: this.bankFormComponent.getFormGroup(),\r\n            dealFormComponent: this.dealFormComponent.getFormGroup(),\r\n            rateEntryComponent: this.rateEntryComponent.getFormGroup(),\r\n            internalMemoFormComponent: this.internalMemoFormComponent.getFormGroup(),\r\n            settlementDocumentsComponent: this.settlementDocumentsComponent.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(\r\n            this.fxDealHeaderFormComponent,\r\n            this.dealTermsFormComponent,\r\n            this.bankFormComponent,\r\n            this.dealFormComponent,\r\n            this.rateEntryComponent,\r\n            this.internalMemoFormComponent,\r\n            this.settlementDocumentsComponent,\r\n        );\r\n\r\n        if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n            && this.authorizationService.isPrivilegeAllowed(this.company, 'FxDeals')) {\r\n            this.isEditPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CreateEditFxDeal');\r\n            this.isDeletePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'DeleteFxDeal');\r\n        }\r\n\r\n        this.fxDealId = Number(this.route.snapshot.paramMap.get('fxDealId'));\r\n        if (this.route.snapshot.data.isView) {\r\n            this.isEdit = false;\r\n            this.isViewMode = true;\r\n            this.loadFxDealData();\r\n        }\r\n        if (this.route.snapshot.data.isEdit) {\r\n            this.isEdit = true;\r\n            this.loadFxDealData();\r\n        }\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.saveInProgress = true;\r\n        this.onValidationState = true;\r\n        this.utilService.updateFormGroupValidity(this.captureFxdealFormGroup);\r\n\r\n        if (this.captureFxdealFormGroup.pending) {\r\n            this.captureFxdealFormGroup.statusChanges.subscribe(() => {\r\n                if (this.onValidationState) {\r\n                    this.onValidationState = false;\r\n                    this.handleSave();\r\n                }\r\n            });\r\n        } else {\r\n            this.onValidationState = false;\r\n            this.handleSave();\r\n        }\r\n    }\r\n\r\n    handleSave() {\r\n        try {\r\n            if (!this.captureFxdealFormGroup.valid) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Form is invalid. Please resolve the errors.',\r\n                );\r\n                this.saveInProgress = false;\r\n                return;\r\n            }\r\n\r\n            if (!this.model) {\r\n                this.model = new FxDealDetail();\r\n            }\r\n\r\n            this.model.isEditMode = this.isEdit;\r\n            this.fxDealHeaderFormComponent.populateEntity(this.model);\r\n            this.dealTermsFormComponent.populateEntity(this.model);\r\n            this.bankFormComponent.populateEntity(this.model);\r\n            this.dealFormComponent.populateEntity(this.model);\r\n            this.rateEntryComponent.populateEntity(this.model);\r\n            this.internalMemoFormComponent.populateEntity(this.model);\r\n\r\n            if (this.isEdit) {\r\n                this.subscriptions.push(this.tradingService.updateFxDeal(this.fxDealId, this.model)\r\n                .subscribe(() => {\r\n                    this.saveInProgress = false;\r\n                    this.snackbarService.informationSnackBar('Fx Deal has been updated successfully.');\r\n                    this.tradingService.settleFxDeal(this.fxDealId).subscribe((response) => {\r\n                        this.saveInProgress = false;\r\n                        if (response) {\r\n                            const documentReferences = response.map((r) => r.documentReference).toString();\r\n                            const messageGenerated = 'FxDeal document(s): ' + documentReferences + ' generated successfully';\r\n                            this.snackbarService.informationAndCopySnackBar(messageGenerated, documentReferences);\r\n                        }\r\n                        if (this.fxDealId) {\r\n                            this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + this.fxDealId]);\r\n                        } else {\r\n                            this.goToFxDealHome();\r\n                        }\r\n                    });\r\n                },\r\n                    (err) => {\r\n                        this.saveInProgress = false;\r\n                        this.snackbarService.informationSnackBar('Some fields have incorrect values, please correct them before saving.');\r\n                    }));\r\n\r\n            } else {\r\n                this.subscriptions.push(this.tradingService.createFxDeal(this.model)\r\n                    .subscribe((data: any) => {\r\n                        if (data) {\r\n                            this.saveInProgress = false;\r\n                            this.fxDealId = data.fxDealId;\r\n                            if (data.c2CCode && data.departmentAlternativeCode\r\n                                && data.nominalAlternativeAccount && data.settlementNominalAccount) {\r\n                                this.messageGenerated = 'Fx Deal has been created successfully.';\r\n\r\n                            } else {\r\n                                if (!data.c2CCode) {\r\n                                    this.mappingFields.push('\" bank / broker account :' + data.counterpartyCode + '\"');\r\n                                }\r\n                                if (!data.departmentAlternativeCode) {\r\n                                    this.mappingFields.push('\"Department :' + data.departmentMappingCode + '\"');\r\n                                }\r\n                                if (!data.nominalAlternativeAccount) {\r\n                                    this.mappingFields.push('\"Nominal Account :' + data.nominalAccountNumber + '\"');\r\n                                }\r\n                                if (!data.settlementNominalAccount) {\r\n                                    this.mappingFields.push('\"Settlement Nominal Account :' + data.settlementAccountNumber + '\"');\r\n                                }\r\n                                const mappingErrorFields = this.mappingFields.join(', ');\r\n                                this.messageGenerated = 'The FJ document of the deal' + data.fxReference +\r\n                                    ' will not be sent to the accounting interface because the accounting interface code of '\r\n                                    + mappingErrorFields + ' is/are not filled in. Please contact the accountant';\r\n                            }\r\n                            this.snackbarService.informationAndCopySnackBar(this.messageGenerated, this.messageGenerated);\r\n\r\n                            this.tradingService.settleFxDeal(data.fxDealId).subscribe((response) => {\r\n                                if (response) {\r\n                                    const documentReferences = response.map((r) => r.documentReference).toString();\r\n                                    const messageGenerated = 'FxDeal document(s): ' + documentReferences + ' generated successfully';\r\n                                    this.snackbarService.informationAndCopySnackBar(messageGenerated, documentReferences);\r\n                                }\r\n                                if (this.fxDealId) {\r\n                                    this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + this.fxDealId]);\r\n                                } else {\r\n                                    this.goToFxDealHome();\r\n                                }\r\n                            });\r\n                        } else {\r\n                            this.saveInProgress = false;\r\n                        }\r\n                    },\r\n                        (err) => {\r\n                            this.saveInProgress = false;\r\n                            this.snackbarService.informationSnackBar('Some fields have incorrect values, please correct them before saving.');\r\n                        }));\r\n            }\r\n        } catch (ex) {\r\n            this.saveInProgress = false;\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n\r\n    onCreateButtonClicked() {\r\n        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/capture']);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        if (this.fxDealId) {\r\n            this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + this.fxDealId]);\r\n        } else {\r\n            this.goToFxDealHome();\r\n        }\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n    goToFxDealHome() {\r\n        const tabIndex: number = 2;\r\n        this.router.navigate(['/' + this.company + '/trades'],\r\n            {\r\n                queryParams: { index: tabIndex },\r\n            });\r\n    }\r\n\r\n    loadFxDealData() {\r\n        this.tradingService.getfxDealById(this.fxDealId)\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.fxDealDeatil = data;\r\n                    this.isDeleteShow = (this.fxDealDeatil.fxDealStatusId === FxDealStatus.Deleted) ? true : false;\r\n                    this.isEditShow = (this.fxDealDeatil.fxDealStatusId === FxDealStatus.Deleted) ? false : true;\r\n                    this.formComponents.forEach((comp) => {\r\n                        comp.initForm(this.fxDealDeatil, this.isEdit);\r\n                        const fxTradeType = this.filteredFxTradeTypes.find((x) => x.code == this.dealTermsFormComponent.dealTypeCtrl.value);\r\n                        if (fxTradeType && fxTradeType.isNdf) {\r\n                            this.rateEntryComponent.ndfChange = false;\r\n                            this.isNdf = true;\r\n                        }\r\n                    });\r\n                    if (this.fxDealDeatil.fxDealStatusId === FxDealStatus.Settled) {\r\n                        this.isSettled = true;\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    onDeleteButtonClicked() {\r\n        if (!this.isDeleteShow) {\r\n            let warningMessage: string;\r\n            if (this.fxDealDeatil.fxDealStatusId === FxDealStatus.Open) {\r\n                warningMessage = 'Do you confirm the deletion of this deal ?';\r\n            } else if (this.fxDealDeatil.fxDealStatusId === FxDealStatus.Settled) {\r\n                warningMessage = 'This FX deal is already settled, do you really wish do delete it ?';\r\n                if (this.fxDealDeatil.fxSettlementDealDocumentPostingStatusId !== PostingStatus.Posted ||\r\n                    this.fxDealDeatil.fxSettlementSettlementDocumentPostingStatusId !== PostingStatus.Posted) {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'The FX deal has already matured but the settlement documents have not been posted yet.' +\r\n                        ' Please post the documents before deleting the deal',\r\n                    );\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Delete FxDeal',\r\n                    text: warningMessage,\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    if (this.fxDealDeatil.fxDealStatusId === FxDealStatus.Open) {\r\n                        this.tradingService.deleteFxDeal(this.fxDealId).subscribe((data) => {\r\n                            this.snackbarService.informationSnackBar('FxDeal has been deleted successfully');\r\n                            this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + this.fxDealId]);\r\n                        });\r\n                    } else {\r\n                        this.tradingService.reverseFxDeal(this.fxDealId).subscribe((response) => {\r\n                            setTimeout(() => {\r\n                                const documentReferences = response.map((r) => r.documentReference).toString();\r\n                                this.tradingService.deleteFxDeal(this.fxDealId).subscribe((data) => {\r\n                                    const messageGenerated = 'FxDeal has been deleted successfully. The reversal document references are ' + documentReferences;\r\n                                    this.snackbarService.informationAndCopySnackBar(messageGenerated, documentReferences);\r\n                                    this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + this.fxDealId]);\r\n                                });\r\n                            });\r\n                        });\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onEditButtonClicked() {\r\n        this.lockService.isLockedFxDeal(this.fxDealId).pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {               \r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            }\r\n            else {\r\n                this.subscriptions.push(this.lockService.lockFxDeal(this.fxDealId, LockFunctionalContext.FxDeal).pipe(\r\n                    takeUntil(this.destroy$),\r\n                ).subscribe(\r\n                    (data) => {\r\n        if (!this.isSettled) {\r\n            this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/edit/' + this.fxDealId]);\r\n        }\r\n    }))}});\r\n\r\n    }\r\n\r\n    onTraderROECalculation(result: number) {\r\n        if (result) {\r\n            this.dealFormComponent.tradedROECtrl.patchValue(result);\r\n        }\r\n    }\r\n\r\n    onSettledAmountCalculation(result: string) {\r\n        if (result) {\r\n            if (result === SpotRoeType.Division) {\r\n                this.dealFormComponent.isDivideROEType = true;\r\n            } else {\r\n                this.dealFormComponent.isDivideROEType = false;\r\n            }\r\n            this.dealFormComponent.onSettledAmountCalculate();\r\n        }\r\n    }\r\n\r\n    onSettledAmountEvaluation(settledAmount: number) {\r\n        this.dealFormComponent.settledAmountCtrl.patchValue(settledAmount);\r\n    }\r\n\r\n    onDefaultSpotRoeTypeValue(defaultSpotRoeValue: number) {\r\n        if (defaultSpotRoeValue && this.route.snapshot.data.isCreate) {\r\n            this.rateEntryComponent.mdCtrl.patchValue(defaultSpotRoeValue);\r\n        }\r\n    }\r\n\r\n    onFxRateValue(fxRateValue: number) {\r\n        if (fxRateValue) {\r\n            this.rateEntryComponent.fxRateValue = fxRateValue;\r\n        }\r\n    }\r\n    onSpotRoeWarningValue(isWarning: boolean) {\r\n        if (isWarning) {\r\n            this.rateEntryComponent.isWarningDisplay = true;\r\n        } else {\r\n            this.rateEntryComponent.isWarningDisplay = false;\r\n        }\r\n    }\r\n\r\n    onDealTypeChanged(event) {\r\n        this.rateEntryComponent.ndfChange = event;\r\n        this.isNdf = true;\r\n        if (this.rateEntryComponent.ndfChange) {\r\n            this.isNdf = false;\r\n            this.ndfAgreedRate = this.rateEntryComponent.ndfAgreedRateCtrl.value;\r\n        } else {\r\n            this.rateEntryComponent.ndfAgreedRateCtrl.patchValue(this.ndfAgreedRate);\r\n            const noOfDays = this.masterData.fxTradeTypes.find((ndfAgreed) => ndfAgreed.isNdf === this.isNdf);\r\n            const noOfDays2 = noOfDays ? noOfDays.noOfDays : null;\r\n            const ndfAgreedDate = new Date(this.dealTermsFormComponent.maturityDateCtrl.value);\r\n            ndfAgreedDate.setDate(ndfAgreedDate.getDate() - noOfDays2);\r\n            this.rateEntryComponent.ndfAgreedDateCtrl.patchValue(ndfAgreedDate);\r\n        }\r\n    }\r\n\r\n    onMaturityDateChanged(event) {\r\n        if (this.isNdf && this.dealTermsFormComponent.maturityDateCtrl.value) {\r\n            const noOfDays = this.masterData.fxTradeTypes.find((ndfAgreed) => ndfAgreed.isNdf === this.isNdf);\r\n            const noOfDays2 = noOfDays ? noOfDays.noOfDays : null;\r\n            const ndfAgreedDate = new Date(this.dealTermsFormComponent.maturityDateCtrl.value);\r\n            ndfAgreedDate.setDate(ndfAgreedDate.getDate() - noOfDays2);\r\n            this.rateEntryComponent.ndfAgreedDateCtrl.patchValue(ndfAgreedDate);\r\n        } else {\r\n            this.ndfAgreedRate = this.rateEntryComponent.ndfAgreedRateCtrl.value;\r\n            this.rateEntryComponent.ndfAgreedDateCtrl.patchValue('');\r\n            this.rateEntryComponent.ndfAgreedRateCtrl.patchValue('');\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"fx-deals-capture Bank details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Bank</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"financeCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterparties\\\"\\r\\n                                                         label=\\\"Bank/broker\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"financetErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"counterpartyCodeSelected($event)\\\"\\r\\n                                                         (valueChange)='onValueChanged($event)'>\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"financeFxCtrl\\\"\\r\\n                                  [errorMap]=\\\"financeFxErrorMap\\\"\\r\\n                                  [required]=\\\"financeFxCtrl.isRequired\\\"\\r\\n                                  label=\\\"Bank/broker description\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Bank's Reference\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"bankReferenceCtrl\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { FxDealDetail } from '../../../../../shared/entities/fxdeal-detail.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { BankBrokerContextualDataLoader } from '../../../../../shared/services/trading/bank-broker-contextual-data-loader';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-bank-form',\r\n    templateUrl: './bank-form.component.html',\r\n    styleUrls: ['./bank-form.component.scss'],\r\n    providers: [BankBrokerContextualDataLoader],\r\n})\r\n\r\nexport class BankFormComponent extends BaseFormComponent implements OnInit {\r\n    financeFxCtrl = new AtlasFormControl('FinanceFx');\r\n    financeCtrl = new AtlasFormControl('Finance');\r\n    bankReferenceCtrl = new AtlasFormControl('BankReference');\r\n\r\n    counterPartyId: number;\r\n    filteredCounterparties: Counterparty[];\r\n    counterparties: Counterparty[];\r\n    masterdata: MasterData;\r\n    company :Company;\r\n    financetErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Bank not in the list or not authorized.');\r\n\r\n    financeFxErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected companyManagerService: CompanyManagerService,\r\n        protected utilService: UtilService,\r\n        protected formBuilder: FormBuilder,\r\n        public bankBrokerContextualDataLoader: BankBrokerContextualDataLoader,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.financeFxCtrl.disable();\r\n        this.bankBrokerContextualDataLoader.getData().subscribe((data) => {\r\n            if (data) {\r\n                this.filteredCounterparties = data;\r\n                this.counterparties = data;\r\n                this.financeCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredCounterparties = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.counterparties,\r\n                        ['counterpartyCode', 'description'],\r\n                    );\r\n                });\r\n                this.tradeValidator();\r\n            }\r\n        });\r\n\r\n    this.company= this.companyManagerService.getCurrentCompany();\r\n\r\n    if(this.company)\r\n    {\r\n        const counterparty = this.getBroker(this.company.defaultBrokerId);\r\n        if (counterparty) {\r\n            this.financeCtrl.patchValue(counterparty.counterpartyCode);\r\n            this.financeFxCtrl.patchValue(counterparty.description);\r\n        } else {\r\n            this.financeCtrl.patchValue('');\r\n            this.financeFxCtrl.patchValue('');\r\n        }\r\n    }\r\n\r\n        this.setValidators();\r\n    }\r\n\r\n    tradeValidator() {\r\n        this.financeCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.filteredCounterparties,\r\n                nameof<Counterparty>('counterpartyCode'),\r\n            ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    setValidators() {\r\n        this.financeFxCtrl.setValidators([Validators.required, Validators.maxLength(200)]);\r\n        this.bankReferenceCtrl.setValidators([Validators.maxLength(15)]);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            financeFxCtrl: this.financeFxCtrl,\r\n            financeCtrl: this.financeCtrl,\r\n            bankReferenceCtrl: this.bankReferenceCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(fxDealDetail: FxDealDetail, isEdit: boolean) {\r\n        if (fxDealDetail) {\r\n            const counterparty = this.getBroker(fxDealDetail.brokerId);\r\n            if (counterparty) {\r\n                this.financeCtrl.patchValue(counterparty.counterpartyCode);\r\n                this.financeFxCtrl.patchValue(counterparty.description);\r\n            } else {\r\n                this.financeCtrl.patchValue('');\r\n                this.financeFxCtrl.patchValue('');\r\n            }\r\n            this.bankReferenceCtrl.patchValue(fxDealDetail.bankReference);\r\n            if (!isEdit) {\r\n                this.disableFields();\r\n            }\r\n        }\r\n    }\r\n\r\n    disableFields() {\r\n        this.financeCtrl.disable();\r\n        this.financeFxCtrl.disable();\r\n        this.bankReferenceCtrl.disable();\r\n    }\r\n\r\n    populateEntity(model: FxDealDetail) {\r\n        if (!model.isEditMode) {\r\n            model.brokerId = this.getBrokerId(this.financeCtrl.value.counterpartyCode);\r\n        } else {\r\n            if (this.financeCtrl.value.counterpartyCode) {\r\n                model.brokerId = this.getBrokerId(this.financeCtrl.value.counterpartyCode);\r\n            } else {\r\n                model.brokerId = this.getBrokerId(this.financeCtrl.value);\r\n            }\r\n        }\r\n        model.bankReference = this.bankReferenceCtrl.value;\r\n    }\r\n\r\n    counterpartyCodeSelected(value: Counterparty) {\r\n        if (value) {\r\n            const selectedCounterparty = this.masterdata.counterparties.find(\r\n                (item) => item.counterpartyCode === value.counterpartyCode,\r\n            );\r\n            if (selectedCounterparty) {\r\n                this.financeFxCtrl.patchValue(selectedCounterparty.description);\r\n            }\r\n        }\r\n    }\r\n\r\n    onValueChanged(value) {\r\n        this.financeFxCtrl.patchValue(value.description);\r\n    }\r\n\r\n    getBrokerId(code: string): number {\r\n        const counterparty = this.masterdata.counterparties.find((cp) => cp.counterpartyCode === code);\r\n        if (counterparty) {\r\n            return counterparty.counterpartyID;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getBroker(id: number): Counterparty {\r\n        const counterparty = this.masterdata.counterparties.find((cp) => cp.counterpartyID === id);\r\n        return counterparty;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"fx-deals-capture Deal terms details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Deal</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div class=\\\"bottom-space\\\">\\r\\n            <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                                     name=\\\"toggleStyle\\\"\\r\\n                                     aria-label=\\\"FX Deal Type\\\"\\r\\n                                     [formControl]='fxDealDirectionCtrl'\\r\\n                                     (change)='onStatusChanged($event.value)'>\\r\\n                <mat-button-toggle [value]=\\\"fxDealDirection.Buy\\\"\\r\\n                                   [checked]=\\\"true\\\">Buy</mat-button-toggle>\\r\\n                <mat-button-toggle [value]=\\\"fxDealDirection.Sell\\\">Sell</mat-button-toggle>\\r\\n            </mat-button-toggle-group>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 class=\\\"bottom-space\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"currencyDealtCtrl\\\"\\r\\n                                                         [options]=\\\"dealtFilteredCurrencies\\\"\\r\\n                                                         label=\\\"Currency Dealt\\\"\\r\\n                                                         [errorMap]=\\\"currencyDealtErrorMap\\\"\\r\\n                                                         displayProperty=\\\"currencyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['currencyCode','description']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Currency\\\"\\r\\n                                                         (valueChange)='onDealtRoeTypeValue($event)'\\r\\n                                                         (optionSelected)='onDealtRoeTypeValue($event)'\\r\\n                                                         gridId=\\\"currenciesGrid\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 class=\\\"custom-form\\\"\\r\\n                 [class.required-field]=\\\"dealtAmountCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Dealt Amount\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [textMask]=\\\"{mask:mask}\\\"\\r\\n                           [formControl]=\\\"dealtAmountCtrl\\\"\\r\\n                           (blur)=\\\"onSettledAmountCalculate()\\\">\\r\\n                    <mat-error *ngIf=\\\"dealtAmountCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"dealtAmountCtrl.hasError('isGreatherThanZero')\\\">\\r\\n                        Amount must be greater than Zero.\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"dealtAmountCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Traded ROE\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [textMask]=\\\"{mask:masked}\\\"\\r\\n                           [formControl]=\\\"tradedROECtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"tradedROECtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"tradedROECtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"settlementCurrencyCtrl\\\"\\r\\n                                                         [options]=\\\"settlementFilteredCurrency\\\"\\r\\n                                                         label=\\\"Settlement Currency\\\"\\r\\n                                                         [errorMap]=\\\"currencyDealtErrorMap\\\"\\r\\n                                                         displayProperty=\\\"currencyCode\\\"\\r\\n                                                         [errorMap]=\\\"settlementCurrencyErrorMap\\\"\\r\\n                                                         [selectProperties]=\\\"['currencyCode','description']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Currency\\\"\\r\\n                                                         (valueChange)='onSettlementRoeTypeValue($event)'\\r\\n                                                         (optionSelected)='onSettlementRoeTypeValue($event)'\\r\\n                                                         gridId=\\\"currenciesGrid\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Settled Amount\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [textMask]=\\\"{mask:mask}\\\"\\r\\n                           [formControl]=\\\"settledAmountCtrl\\\">\\r\\n                    <mat-error *ngIf=\\\"settledAmountCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"settledAmountCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".bottom-space {\\n  margin-bottom: 30px; }\\n\"","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Validators, FormBuilder } from '@angular/forms';\r\nimport { FxDealDirection } from '../../../../../shared/enums/fx-deals-direction.enum';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { UtilService, nameof } from '../../../../../shared/services/util.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FxDealDetail } from '../../../../../shared/entities/fxdeal-detail.entity';\r\nimport { TwoDigitsDecimalNumberMask, FourDigitsDecimalNegativeNumberMask, ConvertToNumber } from '../../../../../shared/numberMask';\r\nimport { isGreatherThanZero } from '../../../../../shared/directives/number-validators.directive';\r\nimport { ForeignExchangeService } from '../../../../../shared/services/http-services/foreign-exchange.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { SpotRoeType } from '../../../../../shared/enums/spot-roe-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-deal-form',\r\n    templateUrl: './deal-form.component.html',\r\n    styleUrls: ['./deal-form.component.scss']\r\n})\r\n\r\nexport class DealFormComponent extends BaseFormComponent implements OnInit {\r\n    fxDealDirection = FxDealDirection;\r\n    fxDealDirectionCtrl = new AtlasFormControl('fxDealDirection');\r\n    currencyDealtCtrl = new AtlasFormControl('CurrencyDeal');\r\n    tradedROECtrl = new AtlasFormControl('TradedROE');\r\n    settlementCurrencyCtrl = new AtlasFormControl('SettlementCurrency');\r\n    settledAmountCtrl = new AtlasFormControl('SettledAmount');\r\n    dealtAmountCtrl = new AtlasFormControl('DealtAmount');\r\n    dealtFilteredCurrencies: Currency[];\r\n    settlementFilteredCurrency: Currency[];\r\n    masterdata: any;\r\n    dealDirectionId: number = 1;\r\n    isDivideROEType: boolean;\r\n    settledAmount: number;\r\n    dealtRoeType: string;\r\n    settlementRoeType: string;\r\n    dealtExchangeRate: number;\r\n    settlementExchangeRate: number;\r\n    companyConfiguration: Company;\r\n    fxRate: number;\r\n    spotRate: number;\r\n    isEditMode: boolean = false;\r\n    mask = TwoDigitsDecimalNumberMask();\r\n    masked = FourDigitsDecimalNegativeNumberMask();\r\n    @Output() readonly defaultRoeTypeValuePassed = new EventEmitter<string>();\r\n    @Output() readonly fxRateValuePassed = new EventEmitter<number>();\r\n    @Output() readonly spotRoeWarningValuePassed = new EventEmitter<boolean>();\r\n\r\n    currencyDealtErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Currency not in the list.');\r\n\r\n    settlementCurrencyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Currency not in the list.');\r\n\r\n    constructor(protected utilService: UtilService,\r\n        protected route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private foreignExchangeService: ForeignExchangeService,\r\n        private companyManager: CompanyManagerService,\r\n        protected formBuilder: FormBuilder, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.dealtFilteredCurrencies = this.masterdata.currencies;\r\n        this.settlementFilteredCurrency = this.masterdata.currencies;\r\n        if (this.route.snapshot.data.isEdit) {\r\n            this.isEditMode = true;\r\n        }\r\n        this.settlementCurrencyCtrl.valueChanges.subscribe((input) => {\r\n            this.settlementFilteredCurrency =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.currencies,\r\n                    ['currencyCode', 'description']);\r\n        });\r\n\r\n        this.currencyDealtCtrl.valueChanges.subscribe((input) => {\r\n            this.dealtFilteredCurrencies =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.currencies,\r\n                    ['currencyCode', 'description']);\r\n        });\r\n        this.tradedROECtrl.disable();\r\n        this.settledAmountCtrl.disable();\r\n        this.setValidators();\r\n    }\r\n\r\n    setValidators() {\r\n        this.dealtAmountCtrl.setValidators(Validators.required);\r\n        this.dealtAmountCtrl.setValidators(\r\n            Validators.compose([isGreatherThanZero()]),\r\n        );\r\n\r\n        this.settledAmountCtrl.setValidators(Validators.required);\r\n        this.tradedROECtrl.setValidators(Validators.required);\r\n        this.settlementCurrencyCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.masterdata.currencies,\r\n                nameof<Currency>('currencyCode'),\r\n            ),\r\n            ]),\r\n        );\r\n\r\n        this.currencyDealtCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.masterdata.currencies,\r\n                nameof<Currency>('currencyCode'),\r\n            ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            fxDealDirectionCtrl: this.fxDealDirectionCtrl,\r\n            currencyDealtCtrl: this.currencyDealtCtrl,\r\n            tradedROECtrl: this.tradedROECtrl,\r\n            settlementCurrencyCtrl: this.settlementCurrencyCtrl,\r\n            settledAmountCtrl: this.settledAmountCtrl,\r\n            dealtAmountCtrl: this.dealtAmountCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(fxDealDetail: FxDealDetail, isEdit: boolean) {\r\n        if (fxDealDetail) {\r\n            this.currencyDealtCtrl.patchValue(fxDealDetail.currencyCode);\r\n            this.settlementCurrencyCtrl.patchValue(fxDealDetail.settlementCurrencyCode);\r\n            this.dealtAmountCtrl.patchValue(fxDealDetail.amount);\r\n            this.fxDealDirectionCtrl.patchValue(fxDealDetail.dealDirectionId);\r\n\r\n            if (isEdit) {\r\n                this.spotRate = fxDealDetail.spotRate;\r\n\r\n                if (fxDealDetail.currencyCode) {\r\n                    const currency: Currency = <Currency>({ currencyCode: fxDealDetail.currencyCode })\r\n                    this.onDealtRoeTypeValue(currency);\r\n                }\r\n\r\n                if (fxDealDetail.settlementCurrencyCode) {\r\n                    const currencyCode: Currency = <Currency>({ currencyCode: fxDealDetail.settlementCurrencyCode })\r\n                    this.onSettlementRoeTypeValue(currencyCode);\r\n                }\r\n            }\r\n\r\n            if (!isEdit) {\r\n                this.disableFields();\r\n            }\r\n        }\r\n    }\r\n\r\n    hideShowWarningMessage() {\r\n        if (this.fxRate && this.spotRate) {\r\n            let value = this.spotRate - this.fxRate;\r\n            if (value < 0) {\r\n                value = Math.abs(value);\r\n            }\r\n            const fxRate = 0.05 * this.fxRate;\r\n            if (value > fxRate) {\r\n                this.spotRoeWarningValuePassed.emit(true);\r\n            }\r\n            else {\r\n                this.spotRoeWarningValuePassed.emit(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    disableFields() {\r\n        this.fxDealDirectionCtrl.disable();\r\n        this.currencyDealtCtrl.disable();\r\n        this.settlementCurrencyCtrl.disable();\r\n        this.dealtAmountCtrl.disable();\r\n        this.tradedROECtrl.disable();\r\n        this.settledAmountCtrl.disable();\r\n    }\r\n\r\n    onStatusChanged(event: any) {\r\n        if (event === FxDealDirection.Buy) {\r\n            this.dealDirectionId = 1\r\n        }\r\n        else {\r\n            this.dealDirectionId = 2;\r\n        }\r\n    }\r\n\r\n    populateEntity(model: FxDealDetail) {\r\n        model.dealDirectionId = this.dealDirectionId;\r\n        model.amount = this.dealtAmountCtrl.value;\r\n        if (!model.isEditMode) {\r\n            model.currencyCode = this.currencyDealtCtrl.value.currencyCode;\r\n            model.settlementCurrencyCode = this.settlementCurrencyCtrl.value.currencyCode;\r\n        }\r\n        else {\r\n            if (this.currencyDealtCtrl.value.currencyCode) {\r\n                model.departmentId = this.currencyDealtCtrl.value.currencyCode;\r\n            }\r\n            else {\r\n                model.currencyCode = this.currencyDealtCtrl.value;\r\n            }\r\n\r\n            if (this.settlementCurrencyCtrl.value.currencyCode) {\r\n                model.settlementCurrencyCode = this.settlementCurrencyCtrl.value.currencyCode;\r\n            }\r\n            else {\r\n                model.settlementCurrencyCode = this.settlementCurrencyCtrl.value;\r\n            }\r\n        }\r\n    }\r\n\r\n    onSettledAmountCalculate() {\r\n        if (this.dealtAmountCtrl.value && this.tradedROECtrl.value) {\r\n            var dealtAmountValue = this.getFinalValue(this.dealtAmountCtrl.value.toString());\r\n\r\n            if (this.isDivideROEType) {\r\n                this.settledAmount = dealtAmountValue / Number(this.tradedROECtrl.value);\r\n                this.settledAmountCtrl.patchValue(this.settledAmount);\r\n            }\r\n            else {\r\n                this.settledAmount = dealtAmountValue * Number(this.tradedROECtrl.value);\r\n                this.settledAmountCtrl.patchValue(this.settledAmount);\r\n            }\r\n        }\r\n    }\r\n    onDealtRoeTypeValue(value: Currency) {\r\n        if (value.currencyCode) {\r\n            this.foreignExchangeService.getForeignExchangeRate(\r\n                this.companyManager.getCurrentCompanyDate().toDate(),\r\n                value.currencyCode)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.dealtExchangeRate = ConvertToNumber(data.rate);\r\n                        this.dealtRoeType = data.currencyRoeType;\r\n                        this.defaultRoeTypeCalculation();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    onSettlementRoeTypeValue(value: Currency) {\r\n        if (value.currencyCode) {\r\n            this.foreignExchangeService.getForeignExchangeRate(\r\n                this.companyManager.getCurrentCompanyDate().toDate(),\r\n                value.currencyCode)\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.settlementExchangeRate = ConvertToNumber(data.rate);\r\n                        this.settlementRoeType = data.currencyRoeType;\r\n                        this.defaultRoeTypeCalculation();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    defaultRoeTypeCalculation() {\r\n        if (this.dealtRoeType && this.settlementRoeType &&\r\n            this.dealtExchangeRate && this.settlementExchangeRate) {\r\n\r\n            if (this.dealtRoeType === SpotRoeType.Multiplication &&\r\n                this.settlementRoeType === SpotRoeType.Division) {\r\n                this.defaultRoeTypeValuePassed.emit(this.dealtRoeType);\r\n                this.fxRate = this.dealtExchangeRate * this.settlementExchangeRate;\r\n                this.fxRateValuePassed.emit(this.fxRate);\r\n            }\r\n\r\n            if (this.dealtRoeType === SpotRoeType.Division &&\r\n                this.settlementRoeType === SpotRoeType.Multiplication) {\r\n                this.defaultRoeTypeValuePassed.emit(this.dealtRoeType);\r\n                this.fxRate = this.dealtExchangeRate * this.settlementExchangeRate;\r\n                this.fxRateValuePassed.emit(this.fxRate);\r\n            }\r\n\r\n            if (this.dealtRoeType === SpotRoeType.Multiplication &&\r\n                this.settlementRoeType === SpotRoeType.Multiplication) {\r\n                this.defaultRoeTypeValuePassed.emit(this.settlementRoeType);\r\n                this.fxRate = this.dealtExchangeRate / this.settlementExchangeRate;\r\n                this.fxRateValuePassed.emit(this.fxRate);\r\n            }\r\n\r\n            if (this.dealtRoeType === SpotRoeType.Division &&\r\n                this.settlementRoeType === SpotRoeType.Division) {\r\n                this.defaultRoeTypeValuePassed.emit('M');\r\n                this.fxRate = this.settlementExchangeRate / this.dealtExchangeRate;\r\n                this.fxRateValuePassed.emit(this.fxRate);\r\n            }\r\n\r\n            if (this.isEditMode) {\r\n                this.hideShowWarningMessage();\r\n            }\r\n        }\r\n    }\r\n\r\n    getFinalValue(value: string): number {\r\n        if (typeof (value) === 'string' && value.indexOf(',') > 0) {\r\n            return Number(value.replace(/,/g, ''));\r\n        }\r\n        if (typeof (value) === 'string' && value.indexOf('_') > 0) {\r\n            return Number(value.replace('_', ''));\r\n        }\r\n        return Number(value);\r\n    }\r\n}\r\n\r\n","module.exports = \"<mat-card class=\\\"fx-deals-capture Deal terms details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Deal Terms</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"dealTypeCtrl\\\"\\r\\n                                                         label=\\\"Deal Type\\\"\\r\\n                                                         [options]=\\\"filteredFxTradeTypes\\\"\\r\\n                                                         displayProperty=\\\"code\\\"\\r\\n                                                         [selectProperties]=\\\"['code','description']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Fx Deal Types\\\"\\r\\n                                                         gridId=\\\"fxTradeTypeGrid\\\"\\r\\n                                                         (onBlankSelected)=\\\"onBlankSelectionChanged();\\\"\\r\\n                                                         (optionSelected)=\\\"onDealTypeSelectionChanged($event);\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 class=\\\"custom-form\\\"\\r\\n                 [class.required-field]=\\\"contractDateCtrl.isRequired\\\">\\r\\n\\r\\n                <atlas-date-picker fxFlex=\\\"100%\\\"\\r\\n                                   [errorMap]=\\\"contractDateErrorMap\\\"\\r\\n                                   [max]=\\\"maxDate\\\"\\r\\n                                   label=\\\"Contract Date\\\"\\r\\n                                   [fieldControl]=\\\"contractDateCtrl\\\"\\r\\n                                   (dateChanged)=\\\"onContractDateChanged($event)\\\"\\r\\n                                   [isEditable]=\\\"contractDateCtrl.enabled\\\">\\r\\n                </atlas-date-picker>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 class=\\\"custom-form\\\"\\r\\n                 [class.required-field]=\\\"maturityDateCtrl.isRequired\\\">\\r\\n                <atlas-date-picker fxFlex=\\\"100%\\\"\\r\\n                                   [errorMap]=\\\"maturityDateErrorMap\\\"\\r\\n                                   label=\\\"Maturity Date\\\"\\r\\n                                   [fieldControl]=\\\"maturityDateCtrl\\\"\\r\\n                                   [isEditable]=\\\"maturityDateCtrl.enabled\\\"\\r\\n                                   (dateChanged)=\\\"onDateSelectionChanged($event)\\\">\\r\\n                </atlas-date-picker>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { UtilService, nameof } from '../../../../../shared/services/util.service';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { FxTradeType } from '../../../../../shared/entities/fx-trade-type.entity';\r\nimport { Validators, FormBuilder } from '@angular/forms';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FxDealDetail } from '../../../../../shared/entities/fxdeal-detail.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { isBeforeDate, isAfterDate, isDateBeforeControlDate } from '../../../../../shared/validators/date-validators.validator';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { dateAfter } from '../../../contract-physical-capture/form-components/shipment-period-form/shipment-period-date-validator.validator';\r\nimport { RateEntryComponent } from '../rate-entry-form-component/rate-entry-form.component';\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n    selector: 'atlas-deal-terms-form-',\r\n    templateUrl: './deal-terms-form.component.html',\r\n    styleUrls: ['./deal-terms-form.component.scss'],\r\n})\r\n\r\nexport class DealTermsFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly dealTypeChange = new EventEmitter<boolean>();\r\n    @Output() readonly maturityDateChange = new EventEmitter<boolean>();\r\n\r\n    dealTypeCtrl = new AtlasFormControl('DealType');\r\n    maturityDateCtrl = new AtlasFormControl('MaturityDate');\r\n    contractDateCtrl = new AtlasFormControl('ContractDate');\r\n\r\n    filteredFxTradeTypes: FxTradeType[];\r\n    masterdata: MasterData;\r\n    fxTrades: FxTradeType[];\r\n    rateEntry: RateEntryComponent;\r\n    maxDate = this.companyManager.getCurrentCompanyDate().toDate();\r\n\r\n    contractDateErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('isDateValid', 'The Contract date cannot be in the future');\r\n\r\n    maturityDateErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('isBeforeDateValid', 'The Maturity date cannot be previous to the Contract date');\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredFxTradeTypes = this.masterdata.fxTradeTypes;\r\n\r\n        this.dealTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredFxTradeTypes = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.fxTradeTypes,\r\n                ['code', 'description'],\r\n            );\r\n        });\r\n        if (this.route.snapshot.data.isCreate) {\r\n            this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        }\r\n        if (this.filteredFxTradeTypes && this.filteredFxTradeTypes.length > 0) {\r\n            this.dealTypeCtrl.setValue(this.filteredFxTradeTypes[0]);\r\n        }\r\n        this.setValidators();\r\n    }\r\n\r\n\r\n    setValidators() {\r\n\r\n        this.contractDateCtrl.setValidators([\r\n            Validators.required,\r\n            isBeforeDate(this.companyManager.getCurrentCompanyDate()),\r\n        ]);\r\n\r\n        this.maturityDateCtrl.setValidators([\r\n            Validators.required,\r\n            isDateBeforeControlDate(this.contractDateCtrl.value),\r\n        ]);\r\n\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            maturityDateCtrl: this.maturityDateCtrl,\r\n            contractDateCtrl: this.contractDateCtrl,\r\n        });\r\n           \r\n        return super.getFormGroup();\r\n    }\r\n    initForm(fxDealDetail: FxDealDetail, isEdit: boolean) {\r\n        if (fxDealDetail) {\r\n            if (fxDealDetail.fxTradeTypeId && this.masterdata.fxTradeTypes && this.masterdata.fxTradeTypes.length > 0) {\r\n                const selectedfxTrade = this.masterdata.fxTradeTypes.find((value) => value.fxTradeTypeId === fxDealDetail.fxTradeTypeId);\r\n                if (selectedfxTrade) {\r\n                    this.dealTypeCtrl.patchValue(selectedfxTrade.code);\r\n                }\r\n            }\r\n            this.contractDateCtrl.patchValue(fxDealDetail.contractDate);\r\n            this.maturityDateCtrl.patchValue(fxDealDetail.maturityDate);\r\n            if (!isEdit) {\r\n                this.disableFields();\r\n            }\r\n        }\r\n    }\r\n\r\n    disableFields() {\r\n        this.dealTypeCtrl.disable();\r\n        this.contractDateCtrl.disable();\r\n        this.maturityDateCtrl.disable();\r\n    }\r\n\r\n\r\n    onBlankSelectionChanged() {\r\n        let fxTradeType = this.filteredFxTradeTypes.find(x => x.code == this.dealTypeCtrl.value.code)\r\n        if (fxTradeType && fxTradeType.isNdf) {\r\n            this.dealTypeChange.emit(false);\r\n        }\r\n        else {\r\n            this.dealTypeChange.emit(true);\r\n        }\r\n    }\r\n    onDealTypeSelectionChanged(event) {\r\n        let fxTradeType = this.filteredFxTradeTypes.find(x => x.code == this.dealTypeCtrl.value.code)\r\n        if (fxTradeType && fxTradeType.isNdf) {\r\n            this.dealTypeChange.emit(false);\r\n        }\r\n        else {\r\n            this.dealTypeChange.emit(true);\r\n        }\r\n    }\r\n\r\n    populateEntity(model: FxDealDetail) {\r\n        model.contractDate = this.contractDateCtrl.value;\r\n        model.maturityDate = this.maturityDateCtrl.value;\r\n        if (!model.isEditMode) {\r\n            model.fxTradeTypeId = this.getId(this.dealTypeCtrl.value.code);\r\n        }\r\n        else {\r\n            if (this.dealTypeCtrl.value.code) {\r\n                model.fxTradeTypeId = this.getId(this.dealTypeCtrl.value.code);\r\n            }\r\n            else {\r\n                model.fxTradeTypeId = this.getId(this.dealTypeCtrl.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getId(code: string): number {\r\n        const selectedCode = this.masterdata.fxTradeTypes.find(\r\n            (selectedCode) => selectedCode.code === code);\r\n        if (selectedCode) {\r\n            return selectedCode.fxTradeTypeId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onDateSelectionChanged(event) {\r\n        this.maturityDateChange.emit(this.maturityDateCtrl.value);\r\n        this.maturityDateCtrl.clearValidators();\r\n        this.setValidators();\r\n    }\r\n\r\n    onContractDateChanged(event) {\r\n        this.maturityDateCtrl.clearValidators();\r\n        this.setValidators();\r\n    }\r\n\r\n}\r\n","module.exports = \"<header class=\\\"header-background fxDeal \\\"\\r\\n        [class.fxDeal-capture]=\\\"!isShow\\\">\\r\\n    <div class=\\\"header-container\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"1%\\\">\\r\\n                <div fxFlex=\\\"15%\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Deal No.\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]=\\\"dealNoCtrl\\\">\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <mat-chip-list *ngIf=\\\"isShow || isEditMode\\\"\\r\\n                               class=\\\"chip-list\\\">\\r\\n                    <mat-chip selected\\r\\n                              disabled>\\r\\n                        {{dealType}}\\r\\n                    </mat-chip>\\r\\n                    <mat-chip selected\\r\\n                              class='mat-approved'\\r\\n                              disabled>\\r\\n                        {{dealStatus}}\\r\\n                    </mat-chip>\\r\\n                </mat-chip-list>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"1%\\\">\\r\\n                <div fxFlex=\\\"10%\\\">\\r\\n                    <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                             isEditable=\\\"true\\\"\\r\\n                                                             [fieldControl]=\\\"traderCtrl\\\"\\r\\n                                                             [options]=\\\"filteredTradeOwners\\\"\\r\\n                                                             label=\\\"Trader\\\"\\r\\n                                                             displayProperty=\\\"displayName\\\"\\r\\n                                                             [errorMap]=\\\"traderErrorMap\\\"\\r\\n                                                             [selectProperties]=\\\"['samAccountName','displayName']\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for Trader\\\"\\r\\n                                                             gridId=\\\"traderGrid\\\">\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\">\\r\\n                    <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                             isEditable=\\\"true\\\"\\r\\n                                                             [fieldControl]=\\\"departmentCodeCtrl\\\"\\r\\n                                                             [options]=\\\"filteredDepartments\\\"\\r\\n                                                             label=\\\"Department Code\\\"\\r\\n                                                             displayProperty=\\\"departmentCode\\\"\\r\\n                                                             [errorMap]=\\\"departmentErrorMap\\\"\\r\\n                                                             [selectProperties]=\\\"['departmentCode','description']\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for Department\\\"\\r\\n                                                             (valueChange)='onValueChanged($event)'\\r\\n                                                             (optionSelected)=\\\"onOptionSelected($event)\\\"\\r\\n                                                             gridId=\\\"departmentsGrid\\\">\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\">\\r\\n                    <atlas-form-input [fieldControl]=\\\"departmentDescriptionCtrl\\\"\\r\\n                                      [required]=\\\"departmentDescriptionCtrl.isRequired\\\"\\r\\n                                      [errorMap]=\\\"departmentDescriptionErrorMap\\\"\\r\\n                                      [label]=\\\"'Department Desc'\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\"\\r\\n                     [class.required-field]=\\\"accountCtrl.isRequired\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Account ref\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               [formControl]=\\\"accountCtrl\\\">\\r\\n                        <mat-error *ngIf=\\\"accountCtrl.hasError('required')\\\">\\r\\n                            This field is required\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"accountCtrl.isRequired\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\">\\r\\n                    <atlas-form-input [fieldControl]=\\\"accountDescriptionCtrl\\\"\\r\\n                                      [errorMap]=\\\"accountDescriptionErrorMap\\\"\\r\\n                                      [label]=\\\"'Account Desc'\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\"\\r\\n                     *ngIf=\\\"showAuditInformation\\\">\\r\\n                    <atlas-form-input [fieldControl]=\\\"createdByCtrl\\\"\\r\\n                                      [label]=\\\"'Created By'\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\"\\r\\n                     *ngIf=\\\"showAuditInformation\\\">\\r\\n                    <atlas-form-input [fieldControl]=\\\"createdOnCtrl\\\"\\r\\n                                      [label]=\\\"'Created On'\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\"\\r\\n                     *ngIf=\\\"showAuditInformation && showAmendedFields\\\">\\r\\n                    <atlas-form-input [fieldControl]=\\\"amendedByCtrl\\\"\\r\\n                                      [label]=\\\"'Amended By'\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"10%\\\"\\r\\n                     *ngIf=\\\"showAuditInformation && showAmendedFields\\\">\\r\\n                    <atlas-form-input [fieldControl]=\\\"amendedOnCtrl\\\"\\r\\n                                      [label]=\\\"'Amended On'\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</header>\"","module.exports = \".header-container {\\n  height: 130px; }\\n\\ndiv.mat-form-field-infix {\\n  padding: 0px;\\n  border-top: none !important; }\\n\\n.header-meta {\\n  margin-top: 19px; }\\n\\n.mat-form-field-wrapper {\\n  padding-bottom: 1em; }\\n\\n.mat-form-field-infix {\\n  padding: 0px 0px 5px 0px; }\\n\\n.header-background.fxDeal {\\n  height: 100px;\\n  width: 100%;\\n  background: bottom/cover url(\\\"/assets/img/pattern-small.jpg\\\") no-repeat; }\\n\\n.header-background.fxDeal.fxDeal-capture {\\n    background: top/contain url(\\\"/assets/img/luke-waves-gray.svg\\\") no-repeat;\\n    background-position-x: right;\\n    background-color: white; }\\n\\n.header-background.fxDeal.fxDeal-capture .header-container {\\n      background: none; }\\n\\n.header-background.fxDeal.fxDeal-capture .header-container h2,\\n      .header-background.fxDeal.fxDeal-capture .header-container .mat-input-element:disabled,\\n      .header-background.fxDeal.fxDeal-capture .header-container label,\\n      .header-background.fxDeal.fxDeal-capture .header-container span,\\n      .header-background.fxDeal.fxDeal-capture .header-container .mat-form-field {\\n        color: #332f30; }\\n\\n.header-background.fxDeal.fxDeal-capture .header-container ::ng-deep.mat-input-element:disabled {\\n        color: #332f30 !important; }\\n\\n.header-background.fxDeal.fxDeal-capture .header-meta {\\n      margin-top: 4px; }\\n\\n.header-background.fxDeal .header-container {\\n    background: rgba(24, 91, 157, 0.84);\\n    background: -webkit-gradient(left top, right top, color-stop(0%, rgba(24, 91, 157, 0.84)), color-stop(100%, rgba(53, 129, 28, 0.68)));\\n    background: linear-gradient(to right, rgba(24, 91, 157, 0.84) 0%, rgba(53, 129, 28, 0.68) 100%);\\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#185b9d',\\r endColorstr='#35811c',\\r GradientType=1); }\\n\\n.header-background.fxDeal .header-container h2,\\n    .header-background.fxDeal .header-container .mat-input-element:disabled,\\n    .header-background.fxDeal .header-container label,\\n    .header-background.fxDeal .header-container span,\\n    .header-background.fxDeal .header-container .mat-icon-button,\\n    .header-background.fxDeal .header-container .mat-form-field {\\n      color: white; }\\n\\n.header-background.fxDeal .header-container .chip-list {\\n      margin-bottom: 4px; }\\n\\n.header-background.fxDeal .header-container ::ng-deep.mat-input-element:disabled {\\n      color: white !important; }\\n\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { DepartmentDataLoader } from '../../../../../shared/services/masterdata/department-data-loader';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { UtilService, nameof } from '../../../../../shared/services/util.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { UserIdentityService } from '../../../../../shared/services/http-services/user-identity.service';\r\nimport { User } from '../../../../../shared/entities/user.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Validators, FormBuilder } from '@angular/forms';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { TradeContextualDataLoader } from '../../../../../shared/services/trading/trader-contextual-data-loader';\r\nimport { FxDealDetail } from '../../../../../shared/entities/fxdeal-detail.entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { FxDealStatus } from '../../../../../shared/enums/fx-deals-status.enum';\r\nimport { FxDealDirection } from '../../../../../shared/enums/fx-deals-direction.enum';\r\nimport { Trader } from '../../../../../shared/entities/trader.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-fxdeal-header-form',\r\n    templateUrl: './fxdeal-header-form.component.html',\r\n    styleUrls: ['./fxdeal-header-form.component.scss'],\r\n    providers: [DepartmentDataLoader, TradeContextualDataLoader]\r\n\r\n})\r\n\r\nexport class FxDealHeaderFormComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly documentDateSelected = new EventEmitter<Date>();\r\n\r\n    traderCtrl = new AtlasFormControl('Trader');\r\n    departmentCodeCtrl = new AtlasFormControl('Department');\r\n    departmentDescriptionCtrl = new AtlasFormControl('DepartmentDescription');\r\n    dealNoCtrl = new AtlasFormControl('DealNo');\r\n    accountCtrl = new AtlasFormControl('Account');\r\n    accountDescriptionCtrl = new AtlasFormControl('AccountDescription');\r\n    createdByCtrl = new AtlasFormControl('CreatedBy');\r\n    createdOnCtrl = new AtlasFormControl('CreatedOn');\r\n    amendedByCtrl = new AtlasFormControl('AmendedBy');\r\n    amendedOnCtrl = new AtlasFormControl('AmendedOn');\r\n\r\n    masterdata: MasterData;\r\n    masterdataList: string[] = [MasterDataProps.Departments];\r\n    traderName: string;\r\n    filteredDepartments: Department[];\r\n    filteredTradeOwners: Trader[];\r\n    traders: Trader[];\r\n    isShow: boolean = false;\r\n    isEditMode: boolean = false;\r\n    date = false;\r\n    counterpartyId: number;\r\n    dealType: string;\r\n    dealStatus: string;\r\n    filteredCompany: Company[];\r\n    filteredCounterparty: Counterparty[];\r\n    company: string;\r\n    fxDealId: number;\r\n    showAmendedFields: boolean = false;\r\n    showAuditInformation: boolean = false;\r\n\r\n    departmentErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');\r\n\r\n    departmentDescriptionErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n\r\n    accountDescriptionErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n\r\n    traderErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Trader not in the list or not authorized.');\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        public departmentDataLoader: DepartmentDataLoader,\r\n        protected utilService: UtilService,\r\n        protected tradingService: TradingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected userIdentityService: UserIdentityService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected route: ActivatedRoute,\r\n        public tradeContextualDataLoader: TradeContextualDataLoader, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.departmentDescriptionCtrl.disable();\r\n\r\n        this.fxDealId = Number(this.route.snapshot.paramMap.get('fxDealId'));\r\n\r\n        if (this.route.snapshot.data.isView) {\r\n            this.isShow = true;\r\n        }\r\n\r\n        if (this.route.snapshot.data.isEdit) {\r\n            this.isEditMode = true;\r\n        }\r\n\r\n        if (this.fxDealId) {\r\n            this.showAuditInformation = true;\r\n        }\r\n\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredDepartments = this.masterdata.departments;\r\n        this.filteredCompany = this.masterdata.companies;\r\n        this.filteredCounterparty = this.masterdata.counterparties;\r\n\r\n        this.departmentCodeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartments =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.departments,\r\n                    ['departmentCode', 'description']);\r\n\r\n        });\r\n\r\n        this.tradeContextualDataLoader.getData().subscribe((traders) => {\r\n            if (traders) {\r\n                this.filteredTradeOwners = traders;\r\n                this.traders = traders;\r\n                this.traderCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredTradeOwners = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.traders,\r\n                        ['samAccountName', 'displayName'],\r\n                    );\r\n                });\r\n                this.tradeValidator();\r\n            }\r\n        });\r\n\r\n        if (this.company) {\r\n            let counterparty = this.filteredCompany.find((id) => id.companyId === this.company).counterpartyId;\r\n            if (counterparty) {\r\n                this.counterpartyId = counterparty;\r\n                let counterpartyCode = this.filteredCounterparty.find((code) => code.counterpartyID === counterparty).counterpartyCode;\r\n                if (counterpartyCode) {\r\n                    this.accountCtrl.patchValue(counterpartyCode);\r\n                }\r\n                let counterpartyDescription = this.filteredCounterparty.find((code) => code.counterpartyID === counterparty).description;\r\n                if (counterpartyDescription) {\r\n\r\n                    this.accountDescriptionCtrl.patchValue(counterpartyDescription);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.accountCtrl.disable();\r\n        this.accountDescriptionCtrl.disable();\r\n        this.dealNoCtrl.disable();\r\n        this.createdByCtrl.disable();\r\n        this.createdOnCtrl.disable();\r\n        this.amendedByCtrl.disable();\r\n        this.amendedOnCtrl.disable();\r\n        this.setValidators();\r\n    }\r\n\r\n    setValidators() {\r\n        this.departmentCodeCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.masterdata.departments,\r\n                nameof<Department>('departmentCode'),\r\n            ),\r\n            ]),\r\n        );\r\n\r\n        this.departmentDescriptionCtrl.setValidators(Validators.required);\r\n\r\n        this.accountCtrl.setValidators([Validators.required, Validators.maxLength(10)])\r\n        this.accountDescriptionCtrl.setValidators([Validators.required, Validators.maxLength(200)])\r\n\r\n    }\r\n\r\n    tradeValidator() {\r\n        this.traderCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.filteredTradeOwners,\r\n                nameof<User>('displayName'),\r\n            ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            traderCtrl: this.traderCtrl,\r\n            departmentCodeCtrl: this.departmentCodeCtrl,\r\n            departmentDescriptionCtrl: this.departmentDescriptionCtrl,\r\n            dealNoCtrl: this.dealNoCtrl,\r\n            accountCtrl: this.accountCtrl,\r\n            accountDescriptionCtrl: this.accountDescriptionCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(fxDealDetail: FxDealDetail, isEdit: boolean) {\r\n        if (fxDealDetail) {\r\n            this.dealType = FxDealDirection[fxDealDetail.dealDirectionId];\r\n            this.dealStatus = FxDealStatus[fxDealDetail.fxDealStatusId];\r\n            this.traderCtrl.patchValue(fxDealDetail.traderDisplayName);\r\n            this.dealNoCtrl.patchValue(fxDealDetail.reference);\r\n            this.createdByCtrl.patchValue(fxDealDetail.createdBy);\r\n            this.createdOnCtrl.patchValue((fxDealDetail.createdDateTime) ? fxDealDetail.createdDateTime.toDateString() : '');\r\n            if (fxDealDetail.modifiedBy && fxDealDetail.modifiedDateTime) {\r\n                this.showAmendedFields = true;\r\n                this.amendedByCtrl.patchValue(fxDealDetail.modifiedBy);\r\n                this.amendedOnCtrl.patchValue((fxDealDetail.modifiedDateTime) ? fxDealDetail.modifiedDateTime.toDateString() : '');\r\n            }\r\n            this.departmentCodeCtrl.patchValue(fxDealDetail.departmentCode);\r\n            if (fxDealDetail.departmentCode) {\r\n                const description = this.filteredDepartments.find((value) => value.departmentCode === fxDealDetail.departmentCode).description;\r\n                this.departmentDescriptionCtrl.patchValue(description);\r\n            }\r\n            if (!isEdit) {\r\n                this.disableFields();\r\n            }\r\n        }\r\n    }\r\n\r\n    populateEntity(model: FxDealDetail) {\r\n        if (!model.isEditMode) {\r\n            model.departmentId = this.getDepartmentId(this.departmentCodeCtrl.value.departmentCode);\r\n            model.traderId = this.traderCtrl.value.userId;\r\n        }\r\n        else {\r\n            if (this.departmentCodeCtrl.value.departmentCode) {\r\n                model.departmentId = this.getDepartmentId(this.departmentCodeCtrl.value.departmentCode);\r\n            }\r\n            else {\r\n                model.departmentId = this.getDepartmentId(this.departmentCodeCtrl.value);\r\n            }\r\n            if (this.traderCtrl.value.userId) {\r\n                model.traderId = this.traderCtrl.value.userId;\r\n            }\r\n            else {\r\n                model.traderId = this.getTraderId(this.traderCtrl.value);\r\n            }\r\n        }\r\n        model.counterpartyId = this.counterpartyId;\r\n    }\r\n\r\n    getDepartmentId(code: string): number {\r\n        const selectedDepartment = this.masterdata.departments.find(\r\n            (department) => department.departmentCode === code,\r\n        );\r\n        if (selectedDepartment) {\r\n            return selectedDepartment.departmentId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getTraderId(code: string): number {\r\n        const selectedTrader = this.filteredTradeOwners.find(\r\n            (value) => value.displayName === code,\r\n        );\r\n        if (selectedTrader) {\r\n            return selectedTrader.userId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    disableFields() {\r\n        this.traderCtrl.disable();\r\n        this.dealNoCtrl.disable();\r\n        this.accountCtrl.disable();\r\n        this.departmentCodeCtrl.disable();\r\n    }\r\n\r\n    onValueChanged(value) {\r\n        this.departmentDescriptionCtrl.patchValue(value.description);\r\n    }\r\n\r\n    onOptionSelected(value: Department) {\r\n        const department = this.masterdata.departments.find(\r\n            (item) => item.departmentCode === value.departmentCode,\r\n        );\r\n        if (department) {\r\n            this.departmentDescriptionCtrl.patchValue(department.description);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2 class=\\\"memo-field\\\">Internal Memorandum</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <mat-form-field fxFlex=\\\"100%\\\">\\r\\n            <textarea matInput\\r\\n                      rows=\\\"2\\\"\\r\\n                      maxlength=\\\"4000\\\"\\r\\n                      [formControl]=\\\"internalMemorandumCtrl\\\"\\r\\n                      (keypress)=\\\"customValidation($event)\\\"\\r\\n                      class=\\\"fxDeal-input-fields\\\"></textarea>\\r\\n            <mat-icon class=\\\"validIcon\\\"\\r\\n                      *ngIf=\\\"internalMemorandumCtrl.valid && (internalMemorandumCtrl.value)\\\">\\r\\n                check_circle</mat-icon>\\r\\n        </mat-form-field>\\r\\n\\r\\n    </mat-card-content>\\r\\n\\r\\n</mat-card>\"","module.exports = \".memo-field {\\n  width: 1150px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormBuilder, Validators } from '@angular/forms';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FxDealDetail } from '../../../../../shared/entities/fxdeal-detail.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-internal-memo-form',\r\n    templateUrl: './internal-memo-form.component.html',\r\n    styleUrls: ['./internal-memo-form.component.scss']\r\n})\r\nexport class InternalMemoFormComponent extends BaseFormComponent implements OnInit {\r\n    internalMemorandumCtrl = new FormControl('');\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            internalMemorandumCtrl: this.internalMemorandumCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(fxDealDetail: FxDealDetail, isEdit: boolean) {\r\n        if (fxDealDetail) {\r\n            this.internalMemorandumCtrl.patchValue(fxDealDetail.memorandum);\r\n            if (!isEdit) {\r\n                this.disableFields();\r\n            }\r\n        }\r\n\r\n        this.setValidators();\r\n    }\r\n\r\n    disableFields() {\r\n        this.internalMemorandumCtrl.disable();\r\n    }\r\n\r\n    populateEntity(model: FxDealDetail) {\r\n        model.memorandum = this.internalMemorandumCtrl.value;\r\n    }\r\n\r\n    setValidators() {\r\n        this.internalMemorandumCtrl.setValidators([Validators.maxLength(4000)])\r\n    }\r\n\r\n\r\n    customValidation(event: any) {\r\n        const pattern = /[\\\\;,\\r|\\n]/;\r\n        let inputChar = String.fromCharCode(event.charCode);\r\n        if (pattern.test(inputChar)) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"fx-deals-capture Deal terms details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Rate Entry</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\"\\r\\n             class=\\\"rate-form-field\\\">\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n\\r\\n                <atlas-form-input [fieldControl]=\\\"spotROECtrl\\\"\\r\\n                                  [required]=\\\"spotROECtrl.isRequired\\\"\\r\\n                                  [textMask]=\\\"{mask:mask}\\\"\\r\\n                                  label=\\\"Spot ROE\\\"\\r\\n                                  [errorMap]=\\\"spotRoeErrorMap\\\"\\r\\n                                  [isEditable]=\\\"spotROECtrl.enabled\\\"\\r\\n                                  [hasWarning]=\\\"isWarningDisplay\\\"\\r\\n                                  warningMessage=\\\"Warning ! The Spot ROE value presents a difference\\r\\n                                  with the FX rate for this currency\\\"\\r\\n                                  (blur)=\\\"onTradedROECalculation()\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"F/W Points\\\"\\r\\n                           [textMask]=\\\"{mask:mask}\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"fwPointsCtrl\\\"\\r\\n                           (blur)=\\\"onTradedROECalculation()\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"15%\\\"\\r\\n                 class=\\\"custom-form\\\"\\r\\n                 [class.required-field]=\\\"mdCtrl.isRequired\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"M/D\\\"\\r\\n                           [required]=\\\"mdCtrl.isRequired\\\"\\r\\n                           [matAutocomplete]=\\\"roeTypes\\\"\\r\\n                           [formControl]=\\\"mdCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           (blur)=\\\"onSettledAmountCalculation($event.target.value)\\\"\\r\\n                           [matTooltip]=\\\"'M/D'\\\">\\r\\n                    <mat-autocomplete #roeTypes=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                      [displayWith]=\\\"displayMD.bind(this)\\\">\\r\\n                        <mat-option *ngFor=\\\"let roeType of filteredRoeTypes\\\"\\r\\n                                    [value]=\\\"roeType.code\\\">\\r\\n                            {{roeType.code}} | {{roeType.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"mdCtrl.hasError('required')\\\">\\r\\n                        This field is required\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"mdCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"mdCtrl.isRequired && mdCtrl.enabled\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 [hidden]=\\\"ndfChange\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"NDF Agreed rate\\\"\\r\\n                           [textMask]=\\\"{mask:mask}\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]=\\\"ndfAgreedRateCtrl\\\"\\r\\n                           (blur)=\\\"onTradedROECalculation()\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"dealNominalAccountCtrl\\\"\\r\\n                                                         label=\\\"Nominal account (Deal)\\\"\\r\\n                                                         [options]=\\\"filteredDealtNominalAccounts\\\"\\r\\n                                                         displayProperty=\\\"accountNumber\\\"\\r\\n                                                         [errorMap]=\\\"dealNominalAccountErrorMap\\\"\\r\\n                                                         [selectProperties]=\\\"['accountNumber','mainAccountTitle']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for DealNominal Account\\\"\\r\\n                                                         gridId=\\\"nominalAccountsGrid\\\">\\r\\n\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"settledNominalAccountCtrl\\\"\\r\\n                                                         [options]=\\\"filteredSettledNominalAccounts\\\"\\r\\n                                                         label=\\\"Nominal account (Settlement)\\\"\\r\\n                                                         displayProperty=\\\"accountNumber\\\"\\r\\n                                                         [errorMap]=\\\"settledNominalAccountErrorMap\\\"\\r\\n                                                         [selectProperties]=\\\"['accountNumber','mainAccountTitle']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for SettledNominal Account\\\"\\r\\n                                                         gridId=\\\"nominalAccountsGrid\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 [hidden]=\\\"ndfChange\\\"\\r\\n                 class=\\\"custom-form\\\">\\r\\n                <atlas-date-picker fxFlex=\\\"100%\\\"\\r\\n                                   label=\\\"NDF Agreed Date\\\"\\r\\n                                   [fieldControl]=\\\"ndfAgreedDateCtrl\\\">\\r\\n                </atlas-date-picker>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".rate-form-field {\\n  margin-bottom: 32px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { DefaultAccountingSetup } from '../../../../../shared/entities/default-accounting-setup.entity';\r\nimport { FxDealDetail } from '../../../../../shared/entities/fxdeal-detail.entity';\r\nimport { FxDealRoeType } from '../../../../../shared/entities/fxdeal-roe-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../../shared/entities/nominal-account.entity';\r\nimport { SpotRoeType } from '../../../../../shared/enums/spot-roe-type.enum';\r\nimport { FourDigitsDecimalNegativeNumberMask } from '../../../../../shared/numberMask';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-rate-entry',\r\n    templateUrl: './rate-entry-form.component.html',\r\n    styleUrls: ['./rate-entry-form.component.scss'],\r\n})\r\n\r\nexport class RateEntryComponent extends BaseFormComponent implements OnInit {\r\n    spotROECtrl = new AtlasFormControl('SpotROE');\r\n    fwPointsCtrl = new AtlasFormControl('FwPoints');\r\n    mdCtrl = new AtlasFormControl('Md');\r\n    dealNominalAccountCtrl = new AtlasFormControl('DealNominalAccount');\r\n    settledNominalAccountCtrl = new AtlasFormControl('SettledNominalAccount');\r\n    ndfAgreedRateCtrl = new AtlasFormControl('NdfAgreedRate');\r\n    ndfAgreedDateCtrl = new AtlasFormControl('NdfAgreedDate');\r\n    nominalAccounts: NominalAccount[];\r\n    filteredSettledNominalAccounts: NominalAccount[];\r\n    filteredDealtNominalAccounts: NominalAccount[];\r\n    filteredNominalAccounts: NominalAccount[];\r\n    filteredRoeTypes: FxDealRoeType[];\r\n    roeTypes: FxDealRoeType[];\r\n    masterdata: MasterData;\r\n    defaultNominalAccountDeal: string;\r\n    defaultNominalAccountSettlement: string;\r\n    company: string;\r\n    filteredCompany: Company[];\r\n    mask = FourDigitsDecimalNegativeNumberMask();\r\n    tradedROEValue: number;\r\n    settledAmount: number;\r\n    fxRateValue: number;\r\n    isWarningDisplay: boolean = false;\r\n    ndfChange: boolean = true;\r\n\r\n    @Output() readonly valueSelected = new EventEmitter<number>();\r\n    @Output() readonly roeTypeSelected = new EventEmitter<number>();\r\n    @Output() readonly settledAmountValuePassed = new EventEmitter<number>();\r\n\r\n    dealNominalAccountErrorMap: Map<string, string> = new Map()\r\n\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');\r\n\r\n    settledNominalAccountErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');\r\n\r\n    spotRoeErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n\r\n    constructor(protected utilService: UtilService,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected configurationService: ConfigurationService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.ndfAgreedDateCtrl.disable();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredNominalAccounts = this.masterdata.nominalAccounts.filter((e) => e.bankAccount === true);\r\n        this.filteredNominalAccounts = this.filteredNominalAccounts.map(\r\n            (nominal) => {\r\n                nominal.accountNumber = nominal.accountNumber;\r\n                nominal.mainAccountTitle = nominal.shortDescription;\r\n                return nominal;\r\n            });\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n\r\n        this.filteredSettledNominalAccounts = this.filteredNominalAccounts;\r\n        this.filteredDealtNominalAccounts = this.filteredNominalAccounts;\r\n\r\n        this.getRoeTypes();\r\n\r\n        this.filteredRoeTypes = this.roeTypes;\r\n        this.mdCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredRoeTypes =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.roeTypes,\r\n                    ['code', 'description']);\r\n        });\r\n\r\n        this.dealNominalAccountCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDealtNominalAccounts = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.filteredNominalAccounts,\r\n                ['accountNumber', 'mainAccountTitle'],\r\n            );\r\n        });\r\n\r\n        this.settledNominalAccountCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredSettledNominalAccounts = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.filteredNominalAccounts,\r\n                ['accountNumber', 'mainAccountTitle'],\r\n            );\r\n        });\r\n\r\n        this.filteredCompany = this.masterdata.companies;\r\n\r\n        this.setValidators();\r\n\r\n        if (this.route.snapshot.data.isCreate) {\r\n        this.getDefaultNominalAccount();\r\n        }\r\n    }\r\n\r\n    getDefaultNominalAccount() {\r\n        this.configurationService.getDefaultAccounting(this.company)\r\n            .subscribe((defaultAccountingResult: DefaultAccountingSetup) => {\r\n                if (defaultAccountingResult) {\r\n\r\n                    const dealAccountItem = this.filteredNominalAccounts.find((x) => x.accountNumber\r\n                        === defaultAccountingResult.dealNominalAccount);\r\n\r\n                    const settlementAccountItem = this.filteredNominalAccounts.find((x) => x.accountNumber\r\n                        === defaultAccountingResult.settlementNominalAccount);\r\n\r\n                    this.defaultNominalAccountDeal = dealAccountItem ? dealAccountItem.accountNumber : null;\r\n                    this.defaultNominalAccountSettlement = settlementAccountItem ? settlementAccountItem.accountNumber : null;\r\n\r\n                    this.dealNominalAccountCtrl.setValue(this.defaultNominalAccountDeal);\r\n                    this.settledNominalAccountCtrl.setValue(this.defaultNominalAccountSettlement);\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    getRoeTypes() {\r\n        this.roeTypes = [];\r\n        const FxDealRoeTypeM: FxDealRoeType = { code: 'M', description: 'M' };\r\n        this.roeTypes.push(FxDealRoeTypeM);\r\n        const FxDealRoeTypeD: FxDealRoeType = { code: 'D', description: 'D' };\r\n        this.roeTypes.push(FxDealRoeTypeD);\r\n    }\r\n\r\n    setValidators() {\r\n        this.spotROECtrl.setValidators(Validators.required);\r\n        this.settledNominalAccountCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.masterdata.nominalAccounts,\r\n                nameof<NominalAccount>('accountNumber'),\r\n            ),\r\n            ]),\r\n        );\r\n\r\n        this.dealNominalAccountCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.masterdata.nominalAccounts,\r\n                nameof<NominalAccount>('accountNumber'),\r\n            ),\r\n            ]),\r\n        );\r\n\r\n        this.mdCtrl.setValidators(\r\n            Validators.compose([Validators.required,\r\n            inDropdownListValidator(\r\n                this.roeTypes,\r\n                nameof<FxDealRoeType>('code'),\r\n            ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            dealNominalAccountCtrl: this.dealNominalAccountCtrl,\r\n            fwPointsCtrl: this.fwPointsCtrl,\r\n            mdCtrl: this.mdCtrl,\r\n            spotROECtrl: this.spotROECtrl,\r\n            settledNominalAccountCtrl: this.settledNominalAccountCtrl,\r\n            ndfAgreedRateCtrl: this.ndfAgreedRateCtrl,\r\n            ndfAgreedDateCtrl: this.ndfAgreedDateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(fxDealDetail: FxDealDetail, isEdit: boolean) {\r\n        if (fxDealDetail) {\r\n            if (!isEdit) {\r\n                this.disableFields();\r\n            }\r\n            this.spotROECtrl.patchValue(fxDealDetail.spotRate);\r\n            this.fwPointsCtrl.patchValue(fxDealDetail.fwPoints);\r\n            this.ndfAgreedRateCtrl.patchValue(fxDealDetail.ndfAgreedRate);\r\n            this.ndfAgreedDateCtrl.patchValue(fxDealDetail.ndfAgreedDate);\r\n            this.mdCtrl.patchValue(fxDealDetail.spotRateType);\r\n            if (fxDealDetail.spotRate) {\r\n                const spotROEValue = this.getFinalValue(fxDealDetail.spotRate.toString());\r\n                const fwPointsValue = this.getFinalValue(fxDealDetail.fwPoints.toString());\r\n                const amountValue = this.getFinalValue(fxDealDetail.amount.toString());\r\n\r\n                this.tradedROEValue = spotROEValue + fwPointsValue;\r\n                if (this.tradedROEValue) {\r\n                    this.valueSelected.emit(this.tradedROEValue);\r\n                    if (fxDealDetail.amount && fxDealDetail.spotRateType) {\r\n                        if (fxDealDetail.spotRateType === SpotRoeType.Division) {\r\n\r\n                            this.settledAmount = amountValue / this.tradedROEValue;\r\n                        } else {\r\n                            this.settledAmount = amountValue * this.tradedROEValue;\r\n                        }\r\n\r\n                        this.settledAmountValuePassed.emit(this.settledAmount);\r\n                    }\r\n                }\r\n            }\r\n            if (fxDealDetail.nominalAccountId) {\r\n                const nominalAccount = this.filteredNominalAccounts.find((value) => value.nominalAccountId === fxDealDetail.nominalAccountId).accountNumber;\r\n                if (nominalAccount) {\r\n                    this.dealNominalAccountCtrl.patchValue(nominalAccount);\r\n                }\r\n            }\r\n\r\n            if (fxDealDetail.settlementNominalAccountId) {\r\n                const settlementAccount = this.filteredSettledNominalAccounts.find((value) => value.nominalAccountId === fxDealDetail.settlementNominalAccountId).accountNumber;\r\n                if (settlementAccount) {\r\n                    this.settledNominalAccountCtrl.patchValue(settlementAccount);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    disableFields() {\r\n        this.spotROECtrl.disable();\r\n        this.fwPointsCtrl.disable();\r\n        this.ndfAgreedRateCtrl.disable();\r\n        this.ndfAgreedDateCtrl.disable();\r\n        this.mdCtrl.disable();\r\n        this.dealNominalAccountCtrl.disable();\r\n        this.settledNominalAccountCtrl.disable();\r\n    }\r\n\r\n    populateEntity(model: FxDealDetail) {\r\n        model.spotRate = this.spotROECtrl.value;\r\n        model.spotRateType = this.mdCtrl.value;\r\n        model.fwPoints = this.fwPointsCtrl.value;\r\n        if (!model.fwPoints) {\r\n            model.fwPoints = 0;\r\n        }\r\n        model.ndfAgreedRate = this.ndfAgreedRateCtrl.value;\r\n        model.ndfAgreedDate = this.ndfAgreedDateCtrl.value;\r\n        if (!model.isEditMode) {\r\n            if (this.dealNominalAccountCtrl.value.accountNumber) {\r\n                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value.accountNumber);\r\n            } else {\r\n                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value);\r\n            }\r\n            if (this.settledNominalAccountCtrl.value.accountNumber) {\r\n                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value.accountNumber);\r\n            } else {\r\n                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value);\r\n            }\r\n        } else {\r\n            if (this.dealNominalAccountCtrl.value.accountNumber) {\r\n                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value.accountNumber);\r\n            } else {\r\n                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value);\r\n            }\r\n\r\n            if (this.settledNominalAccountCtrl.value.accountNumber) {\r\n                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value.accountNumber);\r\n            } else {\r\n                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    getAccountId(code: string): number {\r\n        const selectedId = this.masterdata.nominalAccounts.find(\r\n            (accountId) => accountId.accountNumber === code,\r\n        );\r\n        if (selectedId) {\r\n            return selectedId.nominalAccountId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    displayMD(code: string): string {\r\n        if (code) {\r\n            const selectedMD = this.filteredRoeTypes.find((md) => md.code === code);\r\n            if (selectedMD) {\r\n                return selectedMD.description;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    onTradedROECalculation() {\r\n        if (this.spotROECtrl.value) {\r\n\r\n            const spotRoeValue = this.getFinalValue(this.spotROECtrl.value);\r\n            this.checkWarningMessage(spotRoeValue);\r\n\r\n            if (!this.fwPointsCtrl.value) {\r\n                this.tradedROEValue = spotRoeValue;\r\n            } else {\r\n                const fwPointsValue = this.getFinalValue(this.fwPointsCtrl.value);\r\n                this.tradedROEValue = spotRoeValue + fwPointsValue;\r\n            }\r\n\r\n            this.valueSelected.emit(this.tradedROEValue);\r\n        }\r\n    }\r\n\r\n    onSettledAmountCalculation(targetValue) {\r\n        if (this.mdCtrl.valid) {\r\n            this.roeTypeSelected.emit(targetValue);\r\n        }\r\n    }\r\n\r\n    checkWarningMessage(spotRoeValue: number) {\r\n        if (spotRoeValue && this.fxRateValue) {\r\n            let value = spotRoeValue - this.fxRateValue;\r\n            if (value < 0) {\r\n                value = Math.abs(value);\r\n            }\r\n\r\n            const fxRate = 0.05 * this.fxRateValue;\r\n            this.isWarningDisplay = false;\r\n\r\n            if (value > fxRate) {\r\n                this.isWarningDisplay = true;\r\n            }\r\n        }\r\n    }\r\n    getFinalValue(value: string): number {\r\n        if (typeof (value) === 'string' && value.indexOf(',') > 0) {\r\n            return Number(value.replace(/,/g, ''));\r\n        }\r\n        if (typeof (value) === 'string' && value.indexOf('_') > 0) {\r\n            return Number(value.replace('_', ''));\r\n        }\r\n        return Number(value);\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"fx-deals-capture Bank details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Settlement Documents</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"1%\\\"\\r\\n                 *ngIf=\\\"isShow\\\"\\r\\n                 fxFlex=\\\"100%\\\">\\r\\n                <div fxFlex=\\\"10%\\\"\\r\\n                     class=\\\"min-wid-65\\\">\\r\\n                    <mat-form-field *ngIf=\\\"isfxDealSettled\\\">\\r\\n                        <input matInput\\r\\n                               class=\\\"fxdeal-settlement-card\\\"\\r\\n                               [formControl]=\\\"fjDealDocumentReferenceCtrl\\\"\\r\\n                               (click)=\\\"onFJDocumentReferenceCtrlClicked()\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\"\\r\\n                     fxFlex=\\\"60%\\\"\\r\\n                     *ngIf=isReversedFJ>\\r\\n                    <div class=\\\"reversal-by\\\">\\r\\n                        <span>Reversed by </span>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   class=\\\"fxdeal-settlement-card\\\"\\r\\n                                   [formControl]=\\\"fjDealReverseDocumentReferenceCtrl\\\"\\r\\n                                   (click)=\\\"onFJDealDocumentReverseReferenceCtrlClicked()\\\"\\r\\n                                   readonly>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"left start\\\"\\r\\n                 fxLayoutGap=\\\"1%\\\"\\r\\n                 *ngIf=\\\"isShow\\\"\\r\\n                 fxFlex=\\\"100%\\\">\\r\\n                <div fxFlex=\\\"10%\\\"\\r\\n                     class=\\\"min-wid-65\\\">\\r\\n                    <mat-form-field *ngIf=\\\"isfxDealSettled\\\">\\r\\n                        <input matInput\\r\\n                               class=\\\"fxdeal-settlement-card\\\"\\r\\n                               [formControl]=\\\"fjSettlementDocumentReferenceCtrl\\\"\\r\\n                               (click)=\\\"onFJSettlementDocumentReferenceCtrlClicked()\\\"\\r\\n                               readonly>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start center\\\"\\r\\n                     fxFlex=\\\"60%\\\"\\r\\n                     *ngIf=isReversedFJ>\\r\\n                    <div class=\\\"reversal-by\\\">\\r\\n                        <span>Reversed by </span>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   class=\\\"fxdeal-settlement-card\\\"\\r\\n                                   [formControl]=\\\"fjSettlementReverseDocumentReferenceCtrl\\\"\\r\\n                                   (click)=\\\"onfJSettlementReverseDocumentReferenceCtrlClicked()\\\"\\r\\n                                   readonly>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".fxdeal-settlement-card {\\n  color: #0000EE;\\n  text-decoration: underline;\\n  cursor: pointer; }\\n\\n:host ::ng-deep .mat-form-field-appearance-legacy .mat-form-field-underline {\\n  height: 0px !important; }\\n\\n.reversal-by {\\n  margin-bottom: 15px !important;\\n  margin-right: 10px !important; }\\n\\n.min-wid-65 {\\n  min-width: 65px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { FxDealDetail } from '../../../../../shared/entities/fxdeal-detail.entity';\r\nimport { FormConfigurationProviderService } from './../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from './../../../../../shared/components/base-form-component/base-form-component.component';\r\n\r\n@Component({\r\n    selector: 'atlas-settlement-documents',\r\n    templateUrl: './settlement-documents.component.html',\r\n    styleUrls: ['./settlement-documents.component.scss']\r\n})\r\nexport class SettlementDocumentsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    company: string;\r\n    isShow: boolean = false;\r\n    fjDealDocumentReferenceCtrl = new AtlasFormControl('fjDealDocumentReferenceCtrl');\r\n    fjSettlementDocumentReferenceCtrl = new AtlasFormControl('fjSettlementDocumentReferenceCtrl');\r\n    fjDealReverseDocumentReferenceCtrl = new AtlasFormControl('fjDealReverseDocumentReferenceCtrl');\r\n    fjSettlementReverseDocumentReferenceCtrl = new AtlasFormControl('fjSettlementReverseDocumentReferenceCtrl');\r\n    fxDealDetail: FxDealDetail;\r\n    dealDocument: string;\r\n    settlementDocument: string;\r\n    reverseDealDocument: string;\r\n    reverseSettlementDocument: string;\r\n    isfxDealSettled: boolean = false;\r\n    isReversedFJ: boolean = false;\r\n\r\n    constructor\r\n        (protected router: Router,\r\n            protected companyManager: CompanyManagerService,\r\n            private route: ActivatedRoute,\r\n            protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.route.snapshot.data.isView || this.route.snapshot.data.isEdit) {\r\n            this.isShow = true;\r\n        }\r\n    }\r\n    onFJDocumentReferenceCtrlClicked() {\r\n        const dealDocument = this.dealDocument;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + dealDocument]);\r\n\r\n\r\n    }\r\n    onFJSettlementDocumentReferenceCtrlClicked() {\r\n        const settlementDocument = this.settlementDocument;\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + settlementDocument]);\r\n\r\n    }\r\n\r\n    onFJDealDocumentReverseReferenceCtrlClicked() {\r\n        const reverseDealDocument = this.reverseDealDocument;\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + reverseDealDocument]);\r\n    }\r\n\r\n    onfJSettlementReverseDocumentReferenceCtrlClicked() {\r\n        const reverseSettlementDocument = this.reverseSettlementDocument;\r\n        this.router.navigate(\r\n            ['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + reverseSettlementDocument]);\r\n    }\r\n\r\n    initForm(fxDealDetail: FxDealDetail, isShow: boolean) {\r\n        this.fjDealDocumentReferenceCtrl.patchValue(fxDealDetail.fxDealDocument);\r\n        this.dealDocument = fxDealDetail.fxDealDocument;\r\n        this.fjSettlementDocumentReferenceCtrl.patchValue(fxDealDetail.fxSettlementDocument);\r\n        this.settlementDocument = fxDealDetail.fxSettlementDocument;\r\n        this.fjDealReverseDocumentReferenceCtrl.patchValue(fxDealDetail.fxDealReverseDocument);\r\n        this.reverseDealDocument = fxDealDetail.fxDealReverseDocument;\r\n        this.fjSettlementReverseDocumentReferenceCtrl.patchValue(fxDealDetail.fxSettlementReverseDocument);\r\n        this.reverseSettlementDocument = fxDealDetail.fxSettlementReverseDocument;\r\n        if (fxDealDetail.fxSettlementDocumentId && fxDealDetail.fxDealDocumentId) {\r\n            this.isfxDealSettled = true;\r\n        }\r\n        if (fxDealDetail.fxSettlementReverseDocumentId && fxDealDetail.fxDealReverseDocumentId) {\r\n            this.isReversedFJ = true;\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"dealCtrl\\\"\\r\\n                       placeholder=\\\"Deal N°\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       #message>\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                           [gridCode]=\\\"gridCode\\\"\\r\\n                           [gridTitle]=\\\"'FX Deals'\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           (rowClicked)=\\\"onFxDealClicked($event)\\\"\\r\\n                           [dataVersionId]=\\\"dataVersionId\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.md=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"end\\\"\\r\\n         fxFlex=\\\"50%\\\">\\r\\n        <button mat-raised-button\\r\\n                class=\\\"fab-text-button\\\"\\r\\n                color=\\\"accent\\\"\\r\\n                [matMenuTriggerFor]=\\\"menu\\\">\\r\\n            <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n            FX DEALS ACTIONS\\r\\n        </button>\\r\\n        <mat-menu #menu=\\\"matMenu\\\"\\r\\n                  class=\\\"floating-menu has-header\\\">\\r\\n            <button mat-menu-item\\r\\n                    class=\\\"menu-header\\\"\\r\\n                    disabled=true>\\r\\n                <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n                <span>FX DEALS ACTIONS</span>\\r\\n            </button>\\r\\n            <button *ifAuthorized=\\\"'Trades.FxDeals.CreateEditFxDeal',company:this.company\\\"\\r\\n                    mat-menu-item\\r\\n                    (click)=\\\"onCreateFxDealButtonClicked()\\\">\\r\\n                <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n                Create FX Deal\\r\\n            </button>\\r\\n            <button mat-menu-item>\\r\\n                <mat-icon class=\\\"material-icons\\\">favorite</mat-icon>\\r\\n                Favourites FX Deals\\r\\n            </button>\\r\\n            <button mat-menu-item>\\r\\n                <mat-icon class=\\\"material-icons\\\">bar_chart</mat-icon>\\r\\n                FX Deals Report\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".mat-raised-button.fab-text-button {\\n  top: -10px !important;\\n  height: 50px !important; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ListAndSearchFilter } from '../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { FxDealDataLoader } from '../../../shared/services/list-and-search/fxDeal-data-loader';\r\nimport { ListAndSearchComponent } from './../../../shared/components/list-and-search/list-and-search.component';\r\nimport { ListAndSearchFilterType } from './../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-fx-deals',\r\n    templateUrl: './fx-deals.component.html',\r\n    styleUrls: ['./fx-deals.component.scss'],\r\n    providers: [FxDealDataLoader],\r\n})\r\nexport class FxDealsComponent implements OnInit {\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    dealCtrl: FormControl = new FormControl();\r\n    gridCode = 'fxDealList';\r\n    company: string;\r\n    dataVersionId: number;\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        public dataLoader: FxDealDataLoader,\r\n        protected companyManager: CompanyManagerService,\r\n        protected router: Router) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        const DealNumberField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'DealNumber');\r\n        if (!this.dealCtrl.value || !this.listAndSearchComponent ||\r\n            !DealNumberField) {\r\n            return;\r\n        }\r\n        const filter = new ListAndSearchFilter();\r\n        filter.fieldId = DealNumberField.fieldId;\r\n        filter.fieldName = DealNumberField.fieldName;\r\n        filter.predicate = {\r\n            filterType: ListAndSearchFilterType.Text,\r\n            operator: 'eq',\r\n            value1: this.dealCtrl.value + '%',\r\n        };\r\n        filter.isActive = true;\r\n        this.additionalFilters = [filter];\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n    onCreateFxDealButtonClicked() {\r\n        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/capture']);\r\n    }\r\n    onFxDealClicked(event) {\r\n        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + event.data.fxDealId]);\r\n    }\r\n}\r\n","module.exports = \"<mat-card *ifAuthorized=\\\"'Trades.Physicals.AllocateDeallocate',company:company\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Bulk Allocation</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let groupFunctionType of groupFunctionTypeMenu\\\">\\r\\n            <mat-checkbox #bulkAllocationsCtrl\\r\\n                          [formControl]=\\\"bulkAllocationCtrl\\\"\\r\\n                          [value]=\\\"groupFunctionType.functionTypeCode\\\"\\r\\n                          (change)=\\\"onSelectionChange($event,bulkAllocationsCtrl.checked, groupFunctionType)\\\">\\r\\n                {{groupFunctionType.name}}\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { GroupSelection } from '../../../../trading/entities/group-selection-entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-allocation',\r\n    templateUrl: './bulk-allocation.component.html',\r\n    styleUrls: ['./bulk-allocation.component.scss']\r\n})\r\nexport class BulkAllocationComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly bulkAllocationOptionChecked = new EventEmitter<any>();\r\n\r\n    bulkAllocationCtrl = new AtlasFormControl('bulkAllocationType');\r\n    company: string;\r\n    groupFunctionTypeMenu: GroupSelection[] = [];\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(\r\n            (functionType) => functionType.functionTypeCode === GroupFunctionTypes.TradeBulkAllocation);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            bulkAllocationCtrl: this.bulkAllocationCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSelectionChange($event, value, groupFunctionType) {\r\n        this.bulkAllocationOptionChecked.emit({\r\n            bulkAllocationOption: Number(groupFunctionType.functionTypeCode),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n\r\n    bulkAllocationOptionDisable() {\r\n        this.bulkAllocationCtrl.disable();\r\n    }\r\n    bulkAllocationOptionEnable() {\r\n        this.bulkAllocationCtrl.enable();\r\n    }\r\n\r\n\r\n}\r\n","module.exports = \"<mat-card *ifAuthorized=\\\"'Trades.GroupFunctions.BulkApproval',company:this.company\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Bulk Approval</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let groupFunctionType of groupFunctionTypeMenu\\\">\\r\\n            <mat-checkbox #bulkApproveCtrl\\r\\n                          [formControl]=\\\"bulkApprovalCtrl\\\"\\r\\n                          [value]=\\\"groupFunctionType.functionTypeCode\\\"\\r\\n                          (change)=\\\"onSelectionChange($event,bulkApproveCtrl.checked, groupFunctionType)\\\">\\r\\n                {{groupFunctionType.name}}\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GroupSelection } from '../../../entities/group-selection-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-approval',\r\n    templateUrl: './bulk-approval.component.html',\r\n    styleUrls: ['./bulk-approval.component.scss'],\r\n})\r\nexport class BulkApprovalComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly bulkApprovalOptionChecked = new EventEmitter<any>();\r\n\r\n    bulkApprovalCtrl = new AtlasFormControl('bulkApprovalType');\r\n    company: string;\r\n    groupFunctionTypeMenu: GroupSelection[] = [];\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(\r\n            (functionType) => functionType.functionTypeCode === GroupFunctionTypes.TradeBulkApproval);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            bulkApprovalCtrl: this.bulkApprovalCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSelectionChange($event, value, groupFunctionType) {\r\n        this.bulkApprovalOptionChecked.emit({\r\n            bulkApprovalOption: Number(groupFunctionType.functionTypeCode),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n\r\n    bulkApprovalOptionDisable() {\r\n        this.bulkApprovalCtrl.disable();\r\n    }\r\n    bulkApprovalOptionEnable() {\r\n        this.bulkApprovalCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card *ifAuthorized=\\\"'Trades.Physicals.CloseTrade',company:this.company\\\">\\r\\n    <mat-card-title>\\r\\n        <h2>Bulk Closure</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let groupFunctionType of groupFunctionTypeMenu\\\">\\r\\n            <mat-checkbox #bulkClosureCtrls\\r\\n                          [formControl]=\\\"bulkClosureCtrl\\\"\\r\\n                          [value]=\\\"groupFunctionType.functionTypeCode\\\"\\r\\n                          (change)=\\\"onSelectionChange($event,bulkClosureCtrls.checked, groupFunctionType)\\\">\\r\\n                {{groupFunctionType.name}}\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { GroupSelection } from '../../../../trading/entities/group-selection-entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-closure',\r\n    templateUrl: './bulk-closure.component.html',\r\n    styleUrls: ['./bulk-closure.component.scss']\r\n})\r\n\r\nexport class BulkClosureComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly bulkClosureOptionChecked = new EventEmitter<any>();\r\n\r\n    bulkClosureCtrl = new AtlasFormControl('bulkClosureType');\r\n    company: string;\r\n    groupFunctionTypeMenu: GroupSelection[] = [];\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(\r\n            (functionType) => functionType.functionTypeCode === GroupFunctionTypes.TradeBulkClosure);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            bulkClosureCtrl: this.bulkClosureCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSelectionChange($event, value, groupFunctionType) {\r\n        this.bulkClosureOptionChecked.emit({\r\n            bulkClosureOption: Number(groupFunctionType.functionTypeCode),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n\r\n    bulkClosureOptionDisable() {\r\n        this.bulkClosureCtrl.disable();\r\n    }\r\n\r\n    bulkClosureOptionEnable() {\r\n        this.bulkClosureCtrl.enable();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Bulk DeAllocation</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let groupFunctionType of groupFunctionTypeMenu\\\">\\r\\n            <mat-checkbox #bulkDeAllocationsCtrl\\r\\n                          [formControl]=\\\"bulkDeAllocationCtrl\\\"\\r\\n                          [value]=\\\"groupFunctionType.functionTypeCode\\\"\\r\\n                          (change)=\\\"onSelectionChange($event,bulkDeAllocationsCtrl.checked, groupFunctionType)\\\">\\r\\n                {{groupFunctionType.name}}\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { GroupSelection } from '../../../../trading/entities/group-selection-entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-deallocation',\r\n    templateUrl: './bulk-deallocation.component.html',\r\n    styleUrls: ['./bulk-deallocation.component.scss']\r\n})\r\n\r\nexport class BulkDeallocationComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly bulkDeAllocationOptionChecked = new EventEmitter<any>();\r\n\r\n    bulkDeAllocationCtrl = new AtlasFormControl('bulkDeAllocationType');\r\n    company: string;\r\n    groupFunctionTypeMenu: GroupSelection[] = [];\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(\r\n            (functionType) => functionType.functionTypeCode === GroupFunctionTypes.TradeBulkDeAllocation);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            bulkDeAllocationCtrl: this.bulkDeAllocationCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSelectionChange($event, value, groupFunctionType) {\r\n        this.bulkDeAllocationOptionChecked.emit({\r\n            bulkDeAllocationOption: Number(groupFunctionType.functionTypeCode),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n\r\n    bulkDeAllocationOptionDisable() {\r\n        this.bulkDeAllocationCtrl.disable();\r\n    }\r\n\r\n    bulkDeAllocationOptionEnable() {\r\n        this.bulkDeAllocationCtrl.enable();\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Bulk Edition</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let groupFunctionType of groupFunctionTypeMenu\\\">\\r\\n            <mat-checkbox #bulkEditCtrl\\r\\n                          [formControl]=\\\"bulkEditionCtrl\\\"\\r\\n                          [value]=\\\"groupFunctionType.functionTypeCode\\\"\\r\\n                          (change)=\\\"onSelectionChange($event,bulkEditCtrl.checked, groupFunctionType)\\\">\\r\\n                {{groupFunctionType.name}}\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GroupSelection } from '../../../entities/group-selection-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-edition',\r\n    templateUrl: './bulk-edition.component.html',\r\n    styleUrls: ['./bulk-edition.component.scss'],\r\n})\r\nexport class BulkEditionComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly bulkEditOptionChecked = new EventEmitter<any>();\r\n\r\n    bulkEditionCtrl = new AtlasFormControl('bulkEditionType');\r\n    company: string;\r\n    groupFunctionTypeMenu: GroupSelection[] = [];\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(\r\n            (functionType) => functionType.functionTypeCode === GroupFunctionTypes.TradeBulkEdition);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            bulkEditionCtrl: this.bulkEditionCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSelectionChange($event, value, groupFunctionType) {\r\n        this.bulkEditOptionChecked.emit({\r\n            bulkEditOption: Number(groupFunctionType.functionTypeCode),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n\r\n    bulkEditionOptionDisable() {\r\n        this.bulkEditionCtrl.disable();\r\n    }\r\n    bulkEditionOptionEnable() {\r\n        this.bulkEditionCtrl.enable();\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-title>\\r\\n        <h2>Others</h2>\\r\\n    </mat-card-title>\\r\\n    <mat-card-content>\\r\\n        <div *ngFor=\\\"let groupFunctionType of groupFunctionTypeMenu\\\">\\r\\n            <mat-checkbox #bulkCostsCtrl\\r\\n                          [formControl]=\\\"bulkCostsUpdateCtrl\\\"\\r\\n                          [value]=\\\"groupFunctionType.functionTypeCode\\\"\\r\\n                          (change)=\\\"onSelectionChange($event,bulkCostsCtrl.checked, groupFunctionType)\\\">\\r\\n                {{groupFunctionType.name}}\\r\\n            </mat-checkbox>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GroupSelection } from '../../../entities/group-selection-entity';\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-update-costs',\r\n    templateUrl: './bulk-update-costs.component.html',\r\n    styleUrls: ['./bulk-update-costs.component.scss'],\r\n})\r\nexport class BulkUpdateCostsComponent extends BaseFormComponent implements OnInit {\r\n    bulkCostsUpdateCtrl = new AtlasFormControl('bulkUpdateCostsType');\r\n    company: string;\r\n    groupFunctionTypeMenu: GroupSelection[] = [];\r\n    @Output() readonly bulkCostsUpdateOptionChecked = new EventEmitter<any>();\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(\r\n            (functionType) => functionType.functionTypeCode === GroupFunctionTypes.Costs);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            bulkCostsUpdateCtrl: this.bulkCostsUpdateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSelectionChange($event, value, groupFunctionType) {\r\n        this.bulkCostsUpdateOptionChecked.emit({\r\n            bulkCostUpdateOption: Number(groupFunctionType.functionTypeCode),\r\n            checked: Boolean(value),\r\n        });\r\n    }\r\n\r\n    bulkCostsUpdateOptionDisable() {\r\n        this.bulkCostsUpdateCtrl.disable();\r\n    }\r\n    bulkCostsUpdateOptionEnable() {\r\n        this.bulkCostsUpdateCtrl.enable();\r\n    }\r\n}\r\n","module.exports = \"<form>\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <div fxLayout=\\\"row wrap\\\"\\r\\n             fxLayoutAlign=\\\"space-around start\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"48\\\">\\r\\n                <atlas-bulk-edition #bulkEditionComponent\\r\\n                                    (bulkEditOptionChecked)=\\\"onBulkEditionOptionChecked($event)\\\">\\r\\n                </atlas-bulk-edition>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"50\\\">\\r\\n                <atlas-bulk-approval #bulkApprovalComponent\\r\\n                                     (bulkApprovalOptionChecked)=\\\"onBulkApprovalOptionChecked($event)\\\">\\r\\n                </atlas-bulk-approval>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"48\\\">\\r\\n                <atlas-bulk-update-costs #bulkUpdateCostsComponent\\r\\n                                         (bulkCostsUpdateOptionChecked)=\\\"onBulkCostsUpdateOptionChecked($event)\\\">\\r\\n\\r\\n                </atlas-bulk-update-costs>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"50\\\">\\r\\n                <atlas-bulk-closure #bulkClosureComponent\\r\\n                                    (bulkClosureOptionChecked)=\\\"onBulkClosureOptionChecked($event)\\\">\\r\\n                </atlas-bulk-closure>\\r\\n            </div>\\r\\n\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start left\\\"\\r\\n                 fxFlex=\\\"48\\\">\\r\\n                <atlas-bulk-allocation #bulkAllocationComponent\\r\\n                                       (bulkAllocationOptionChecked)=\\\"onBulkAllocationOptionChecked($event)\\\">\\r\\n\\r\\n                </atlas-bulk-allocation>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start right\\\"\\r\\n                 fxFlex=\\\"50\\\">\\r\\n                <atlas-bulk-deallocation #bulkDeAllocationComponent\\r\\n                                         (bulkDeAllocationOptionChecked)=\\\"onBulkDeAllocationOptionChecked($event)\\\">\\r\\n\\r\\n                </atlas-bulk-deallocation>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"btn-container\\\">\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                    Discard\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onNextButtonClicked(bulkActionTypeId)\\\"\\r\\n                        [disabled]=\\\"isDisabled\\\">\\r\\n                    Next\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \".cost-update {\\n  margin-left: 11px; }\\n\"","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { GroupFunctionTypes } from '../../../shared/enums/group-function-type';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { GroupSelection } from '../../entities/group-selection-entity';\r\nimport { BulkApprovalComponent } from './bulk-approval/bulk-approval.component';\r\nimport { BulkEditionComponent } from './bulk-edition/bulk-edition.component';\r\nimport { BulkUpdateCostsComponent } from './bulk-update-costs/bulk-update-costs.component';\r\nimport { BulkClosureComponent } from './bulk-closure/bulk-closure.component';\r\nimport { BulkAllocationComponent } from './bulk-allocation/bulk-allocation.component';\r\nimport { BulkDeallocationComponent } from './bulk-deallocation/bulk-deallocation.component'\r\n\r\n@Component({\r\n    selector: 'atlas-group-amendments',\r\n    templateUrl: './group-amendments.component.html',\r\n    styleUrls: ['./group-amendments.component.scss'],\r\n})\r\n\r\nexport class GroupAmendmentsComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('bulkEditionComponent') bulkEditionComponent: BulkEditionComponent;\r\n    @ViewChild('bulkApprovalComponent') bulkApprovalComponent: BulkApprovalComponent;\r\n    @ViewChild('bulkUpdateCostsComponent') bulkUpdateCostsComponent: BulkUpdateCostsComponent;\r\n    @ViewChild('bulkClosureComponent') bulkClosureComponent: BulkClosureComponent;\r\n    @ViewChild('bulkAllocationComponent') bulkAllocationComponent: BulkAllocationComponent;\r\n    @ViewChild('bulkDeAllocationComponent') bulkDeAllocationComponent: BulkDeallocationComponent;\r\n\r\n    private formComponents: BaseFormComponent[] = [];\r\n    groupFunctionFormGroup: FormGroup;\r\n    bulkActionTypeId: number;\r\n    isBulkEditChecked: boolean = false;\r\n    isBulkAppovalChecked: boolean = false;\r\n    isSave: boolean = false;\r\n    isDisabled: boolean = true;\r\n    groupFunctionTypeMenu: GroupSelection[] = [];\r\n    groupFunctionFieldList: GroupSelection[] = [];\r\n\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private router: Router,\r\n        protected dialog: MatDialog,\r\n        private companyManager: CompanyManagerService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n        this.populateListofOptions();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.bulkApprovalComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;\r\n        this.bulkEditionComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;\r\n        this.bulkUpdateCostsComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;\r\n        this.bulkClosureComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;\r\n        this.bulkAllocationComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;\r\n        this.bulkDeAllocationComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;\r\n        this.groupFunctionFormGroup = this.formBuilder.group({\r\n            bulkEditionComponent: this.bulkEditionComponent.getFormGroup(),\r\n            bulkApprovalComponent: this.bulkApprovalComponent.getFormGroup(),\r\n            bulkUpdateCostsComponent: this.bulkUpdateCostsComponent.getFormGroup(),\r\n            bulkClosureComponent: this.bulkClosureComponent.getFormGroup(),\r\n            bulkAllocationComponent: this.bulkAllocationComponent.getFormGroup(),\r\n            bulkDeAllocationComponent: this.bulkDeAllocationComponent.getFormGroup(),\r\n\r\n        });\r\n        this.titleService.setTitle('Bulk Actions');\r\n        this.formComponents.push(\r\n            this.bulkEditionComponent,\r\n            this.bulkApprovalComponent,\r\n            this.bulkUpdateCostsComponent,\r\n            this.bulkClosureComponent,\r\n            this.bulkAllocationComponent,\r\n            this.bulkDeAllocationComponent,\r\n        );\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.groupFunctionFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.groupFunctionFormGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n    }\r\n\r\n    onNextButtonClicked(bulkActionTypeId) {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/trades/bulkActions/' + encodeURIComponent(bulkActionTypeId)]);\r\n    }\r\n\r\n    populateListofOptions() {\r\n        this.groupFunctionFieldList.push({\r\n            bulkFunctionTypeId: 1,\r\n            name: 'Bulk Edit Trades',\r\n            functionTypeCode: GroupFunctionTypes.TradeBulkEdition,\r\n        });\r\n        this.groupFunctionFieldList.push({\r\n            bulkFunctionTypeId: 2,\r\n            name: 'Bulk Approve Trades',\r\n            functionTypeCode: GroupFunctionTypes.TradeBulkApproval,\r\n        });\r\n        this.groupFunctionFieldList.push({\r\n            bulkFunctionTypeId: 3,\r\n            name: 'Costs',\r\n            functionTypeCode: GroupFunctionTypes.Costs,\r\n        });\r\n        this.groupFunctionFieldList.push({\r\n            bulkFunctionTypeId: 4,\r\n            name: 'Bulk Closure Trades',\r\n            functionTypeCode: GroupFunctionTypes.TradeBulkClosure,\r\n        });\r\n        this.groupFunctionFieldList.push({\r\n            bulkFunctionTypeId: 5,\r\n            name: 'Bulk Allocation Trades',\r\n            functionTypeCode: GroupFunctionTypes.TradeBulkAllocation,\r\n        });\r\n\r\n        this.groupFunctionFieldList.push({\r\n            bulkFunctionTypeId: 6,\r\n            name: 'Bulk DeAllocation Trades',\r\n            functionTypeCode: GroupFunctionTypes.TradeBulkDeAllocation,\r\n        });\r\n        this.groupFunctionFieldList.filter((e) => {\r\n            this.groupFunctionTypeMenu.push(e);\r\n        });\r\n    }\r\n\r\n    onBulkEditionOptionChecked($event) {\r\n        this.bulkActionTypeId = $event.bulkEditOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.bulkApprovalComponent.bulkApprovalOptionDisable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();\r\n            this.bulkClosureComponent.bulkClosureOptionDisable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionDisable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.bulkApprovalComponent.bulkApprovalOptionEnable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();\r\n            this.bulkClosureComponent.bulkClosureOptionEnable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionEnable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();\r\n        }\r\n    }\r\n\r\n    onBulkApprovalOptionChecked($event) {\r\n        this.bulkActionTypeId = $event.bulkApprovalOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.bulkEditionComponent.bulkEditionOptionDisable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();\r\n            this.bulkClosureComponent.bulkClosureOptionDisable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionDisable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.bulkEditionComponent.bulkEditionOptionEnable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();\r\n            this.bulkClosureComponent.bulkClosureOptionEnable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionEnable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();\r\n        }\r\n    }\r\n\r\n    onBulkCostsUpdateOptionChecked($event) {\r\n        this.bulkActionTypeId = $event.bulkCostUpdateOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.bulkEditionComponent.bulkEditionOptionDisable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionDisable();\r\n            this.bulkClosureComponent.bulkClosureOptionDisable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionDisable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.bulkEditionComponent.bulkEditionOptionEnable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionEnable();\r\n            this.bulkClosureComponent.bulkClosureOptionEnable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionEnable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();\r\n        }\r\n    }\r\n\r\n    onBulkClosureOptionChecked($event) {\r\n        this.bulkActionTypeId = $event.bulkClosureOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.bulkEditionComponent.bulkEditionOptionDisable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionDisable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionDisable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.bulkEditionComponent.bulkEditionOptionEnable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionEnable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionEnable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();\r\n        }\r\n    }\r\n\r\n    onBulkAllocationOptionChecked($event) {\r\n        this.bulkActionTypeId = $event.bulkAllocationOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.bulkEditionComponent.bulkEditionOptionDisable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionDisable();\r\n            this.bulkClosureComponent.bulkClosureOptionDisable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.bulkEditionComponent.bulkEditionOptionEnable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionEnable();\r\n            this.bulkClosureComponent.bulkClosureOptionEnable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();\r\n            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();\r\n        }\r\n    }\r\n    onBulkDeAllocationOptionChecked($event) {\r\n        this.bulkActionTypeId = $event.bulkDeAllocationOption;\r\n        if ($event.checked) {\r\n            this.isDisabled = false;\r\n            this.bulkEditionComponent.bulkEditionOptionDisable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionDisable();\r\n            this.bulkClosureComponent.bulkClosureOptionDisable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionDisable();\r\n        } else {\r\n            this.isDisabled = true;\r\n            this.bulkEditionComponent.bulkEditionOptionEnable();\r\n            this.bulkApprovalComponent.bulkApprovalOptionEnable();\r\n            this.bulkClosureComponent.bulkClosureOptionEnable();\r\n            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();\r\n            this.bulkAllocationComponent.bulkAllocationOptionEnable();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <form [formGroup]=\\\"searchContractForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 *ngIf=\\\"!showDeallocationSearch\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Contract Search\\\"\\r\\n                           formControlName=\\\"searchContractReferenceCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchContracts()\\\"\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 *ngIf=\\\"showDeallocationSearch\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Contract Search\\\"\\r\\n                           formControlName=\\\"searchContractReferenceDeallocationCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Group Number\\\"\\r\\n                           formControlName=\\\"groupNumberDeallocationCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchContractsDeallocation()\\\"\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card>\\r\\n    <atlas-filter-set-display (filtersChanged)=\\\"onFilterSetDetailsChange($event)\\\"\\r\\n                              [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                              [gridCode]=\\\"gridCode\\\"\\r\\n                              [company]=\\\"company\\\">\\r\\n    </atlas-filter-set-display>\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"quick-sum-div-height\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\">\\r\\n            <h2 class=\\\"no-margin\\\">{{gridTitle}}</h2>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-around center\\\"\\r\\n                 class=\\\"accEntriesSum\\\">\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"groupFunctionsGridOptions && groupFunctionsGridOptions.columnDefs && groupFunctionsGridOptions.columnApi\\\"\\r\\n                                                [gridOptions]=\\\"groupFunctionsGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"gridCode\\\"\\r\\n                                                [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                                [hasDeleteViewPrivilege]=\\\"hasDeleteViewPrivilege\\\"\\r\\n                                                (columnStateSetToGrid)=\\\"onColumnStateSetToGrid()\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"quick-sum-div-height\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\">\\r\\n            <mat-slide-toggle mat-raised-button\\r\\n                              (change)=\\\"toggleQuickSum($event.checked)\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                    <span class=\\\"quick-sum-span\\\"\\r\\n                          *ngIf=\\\"quickSumModeActivated\\\">{{column.name}}:{{column.sum | number }}</span>\\r\\n                </div>\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                        class=\\\"mat-button-user-margin\\\"\\r\\n                        *ngIf=\\\"quickSumModeActivated\\\">\\r\\n                    Clear Selection\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"groupFunctionsGridOptions\\\"\\r\\n             [ngClass]='classApplied'\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\"\\r\\n                             style=\\\"height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"ContractGridRows\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [enableRangeSelection]=\\\"true\\\"\\r\\n                             (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             enableFilter\\r\\n                             [gridOptions]=\\\"groupFunctionsGridOptions\\\"\\r\\n                             (firstDataRendered)=\\\"onFirstDataRendered()\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             [singleClickEdit]=\\\"true\\\"\\r\\n                             [suppressRowClickSelection]=\\\"true\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\"></atlas-lock-interval>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { ColumnState } from 'ag-grid-community/dist/lib/columnController/columnController';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { EnumEntity } from '../../../../shared/entities/enum-entity.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../shared/entities/grid-column-configuration.entity';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../../shared/entities/window-injection-token';\r\nimport { ContractStatus } from '../../../../shared/enums/contract-status.enum';\r\nimport { ContractTypes } from '../../../../shared/enums/contract-type.enum';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\nimport { ListAndSearchFilterType } from '../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../shared/services/grid-configuration-provider.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { ContractsForBulkFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-group-function-contracts',\r\n    templateUrl: './group-function-contracts.component.html',\r\n    styleUrls: ['./group-function-contracts.component.scss'],\r\n})\r\nexport class GroupFunctionContractsComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly contractSelected = new EventEmitter<boolean>();\r\n    @Input() hasDeleteViewPrivilege = true;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @Output() readonly resetAllocationGrids = new EventEmitter<boolean>();\r\n\r\n    searchContractForm: FormGroup;\r\n    company: string;\r\n    isLoading: boolean = false;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    groupFunctionsGridColumns: agGrid.ColDef[];\r\n    groupFunctionType = GroupFunctionTypes;\r\n    savedColumnStates: ColumnState[];\r\n    groupFunctionsGridOptions: agGrid.GridOptions = {};\r\n    ContractGridRows: ContractsForBulkFunctions[];\r\n    contractsToedit: ContractsForBulkFunctions[];\r\n    contractsToApprove: ContractsForBulkFunctions[];\r\n    selectedContractsForBulkFunctions: ContractsForBulkFunctions[];\r\n    private getTradesForSubscription: Subscription;\r\n    totalContractList: ContractsForBulkFunctions[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    dataLength: number = 0;\r\n    subscriptions: Subscription[] = [];\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    selectedSectionIds: number[] = [];\r\n    unlocking: number[] = [];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    gridTitle = 'Physical Contracts';\r\n    gridCode = 'tradeList';\r\n    filters: ListAndSearchFilter[];\r\n    masterdata: MasterData;\r\n    columnDefs: agGrid.ColDef[];\r\n    hasGridSharing = false;\r\n    savedSearchTerm: string;\r\n    searchContractReference: any;\r\n    searchContractReferenceDeallocation: any;\r\n    groupingNumber: any;\r\n    isContractSelected: boolean = false;\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    isQuickSumDisplay: boolean = false;\r\n    allowedColumnsForQuickSum: string[] = [];\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    bulkActionTypeId: number;\r\n    showDeallocationSearch: boolean = false;\r\n    bulkAllocationColumns = ['ContractLabel', 'Counterparty', 'Commodity1', 'Commodity2', 'Commodity3', 'Commodity4',\r\n        'Commodity5', 'Quantity', 'WeightUnitCode', 'ShippingPeriod', 'ContractTermCode',\r\n        'ContractTermDescription', 'CharterReference', 'BLDate',\r\n        'CurrencyCode', 'Price', 'PriceCode', 'DepartmentCode', 'AllocatedContractReference', 'Status', 'ShipmentPeriod', 'IsTradeClosed'];\r\n\r\n    bulkDeAllocationColumns = ['ContractLabel', 'Counterparty', 'Commodity1', 'Commodity2', 'Commodity3', 'Commodity4',\r\n        'Commodity5', 'Quantity', 'WeightUnitCode', 'AllocatedContractReference'\r\n        , 'CharterReference', 'GroupNumber', 'BLDate', 'ContractType', 'GroupingNumber'];\r\n    lockedContracts: EnumEntity[] = [];\r\n    constructor(private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private tradingService: TradingService,\r\n        private lockService: LockService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected uiService: UiService,\r\n        private agGridService: AgGridService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        public gridService: AgGridService,\r\n        @Inject(WINDOW) private window: Window,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.bulkActionTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('bulkActionTypeId')));\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.searchContractForm = this.formBuilder.group({\r\n            searchContractReferenceCtrl: [''],\r\n            searchContractReferenceDeallocationCtrl: [''],\r\n            groupNumberDeallocationCtrl: [''],\r\n\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.isLoading = true;\r\n        if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n            this.showDeallocationSearch = true;\r\n        }\r\n        this.loadGridConfiguration();\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.searchContractForm.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    toggleQuickSum(value: boolean) {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = value;\r\n        this.classApplied = (this.quickSumModeActivated) ? this.cellSelectionClass : this.defaultClass;\r\n        this.selectedColumnsArray = [];\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.gridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n\r\n    onRangeSelectionChanged(event) {\r\n        this.selectedColumnsArray = [];\r\n        const cellInfos: any = [];\r\n\r\n        const rangeSelections = this.gridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        if (rangeSelections && rangeSelections.length === 1) {\r\n            this.rangeSelectionCalculation(event);\r\n        } else {\r\n            const selectedCells: any = [];\r\n            rangeSelections.forEach((row) => {\r\n                const cellExists = selectedCells.find((cell) => cell.start.rowIndex === row.start.rowIndex &&\r\n                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId());\r\n                if (cellExists === null || cellExists === undefined) {\r\n                    selectedCells.push(row);\r\n\r\n                    const obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };\r\n                    cellInfos.push(obj);\r\n                }\r\n            });\r\n\r\n            const api = this.gridApi;\r\n            let sum = 0;\r\n            let columnName: string;\r\n            let columnHeader: string;\r\n            const selectedColumnsArray = this.selectedColumnsArray;\r\n            const allowedColumnsForQuickSum = this.allowedColumnsForQuickSum;\r\n\r\n            selectedCells.forEach((row) => {\r\n                row.columns.forEach((column) => {\r\n                    sum = 0;\r\n                    columnName = column.getColDef().colId.toLowerCase();\r\n                    columnHeader = column.getColDef().headerName;\r\n                    if (allowedColumnsForQuickSum.includes(columnName)) {\r\n                        for (let rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {\r\n                            if (cellInfos[rowIndex].columnName.toLowerCase() === columnName) {\r\n                                const rowModel = api.getModel();\r\n                                const rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));\r\n                                const value = api.getValue(column, rowNode);\r\n                                sum += Number(value);\r\n                            }\r\n                        }\r\n\r\n                        const columnObj = selectedColumnsArray.find((sum) => sum.name === columnHeader);\r\n                        if (columnObj) {\r\n                            columnObj.sum = sum;\r\n                        } else {\r\n                            selectedColumnsArray.push({ name: columnHeader, sum });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            this.selectedColumnsArray = selectedColumnsArray;\r\n        }\r\n    }\r\n\r\n    rangeSelectionCalculation(event) {\r\n        this.selectedColumnsArray = [];\r\n        const rangeSelections = this.gridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        const firstRange = rangeSelections[0];\r\n        const startRow = Math.min(firstRange.start.rowIndex, firstRange.end.rowIndex);\r\n        const endRow = Math.max(firstRange.start.rowIndex, firstRange.end.rowIndex);\r\n        const api = this.gridApi;\r\n        let sum = 0;\r\n        let columnName: string;\r\n        let columnHeader: string;\r\n        const selectedColumnsArray = this.selectedColumnsArray;\r\n        const allowedColumnsForQuickSum = this.allowedColumnsForQuickSum;\r\n        firstRange.columns.forEach((column) => {\r\n            sum = 0;\r\n            columnName = column.getColDef().colId.toLowerCase();\r\n            columnHeader = column.getColDef().headerName;\r\n            if (allowedColumnsForQuickSum.includes(columnName)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = api.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = api.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n\r\n                selectedColumnsArray.push({ name: columnHeader, sum });\r\n            }\r\n        });\r\n        this.selectedColumnsArray = selectedColumnsArray;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.groupFunctionsGridOptions = params;\r\n        this.groupFunctionsGridOptions.columnDefs = this.columnDefs;\r\n        this.gridApi = this.groupFunctionsGridOptions.api;\r\n        this.gridColumnApi = this.groupFunctionsGridOptions.columnApi;\r\n        if (this.savedColumnStates) {\r\n            this.groupFunctionsGridOptions.columnApi.setColumnState(this.savedColumnStates);\r\n        }\r\n        this.agGridService.sizeColumns(this.groupFunctionsGridOptions);\r\n        this.gridApi.sizeColumnsToFit();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.window.onresize = () => {\r\n            this.agGridService.sizeColumns(this.groupFunctionsGridOptions);\r\n        };\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                const allocationColumnConfiguration = configuration.columns;\r\n                if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation) {\r\n                    this.columnConfiguration = this.loadBulkAllocationColumns(allocationColumnConfiguration);\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n                    this.columnConfiguration = this.loadBulkDeAllocationColumns(allocationColumnConfiguration);\r\n                } else {\r\n                    this.columnConfiguration = configuration.columns;\r\n                }\r\n                this.initColumns(this.columnConfiguration);\r\n                this.isQuickSumDisplay = false;\r\n                if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkEdition) {\r\n                    this.getContractsToEdit();\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkApproval) {\r\n                    this.getContractsToApprove();\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkClosure) {\r\n                    this.getContractsToClosure();\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation) {\r\n                    this.getContractsToAllocation();\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n                    this.getContractsToDeAllocation();\r\n                }\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        // selection column\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'left',\r\n            });\r\n\r\n        // grid config\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.allowedColumnsForQuickSum = numericColumns;\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                hide: !config.isVisible,\r\n            };\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            return columnDef;\r\n        }));\r\n        if (this.groupFunctionsGridOptions) {\r\n            this.groupFunctionsGridOptions.columnDefs = this.columnDefs;\r\n        }\r\n    }\r\n\r\n    onColumnStateSetToGrid() {\r\n        this.gridColumnApi.setColumnVisible('selection', true);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.getTradesForSubscription) {\r\n            this.getTradesForSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    getContractsToEdit() {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration && this.columnConfiguration.length > 0) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            this.tradingService.searchContractsForBulkEdit(filters)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.contractsToedit = data;\r\n                        this.ContractGridRows = this.contractsToedit;\r\n                        this.dataLength = this.ContractGridRows.length;\r\n                        this.totalContractList = this.ContractGridRows;\r\n                        this.isQuickSumDisplay = true;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    getContractsToClosure() {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration && this.columnConfiguration.length > 0) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            this.tradingService.searchContractsForBulkEdit(filters)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.contractsToedit = data;\r\n                        this.ContractGridRows = this.contractsToedit;\r\n                        this.dataLength = this.ContractGridRows.length;\r\n                        this.totalContractList = this.ContractGridRows;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    getContractsToApprove() {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration && this.columnConfiguration.length > 0) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            const tradeApprovalStatusColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'Status');\r\n            if (tradeApprovalStatusColumn && ContractStatus[ContractStatus.Unapproved]) {\r\n                const filterContractStatusType = new ListAndSearchFilter();\r\n                filterContractStatusType.fieldId = tradeApprovalStatusColumn.fieldId;\r\n                filterContractStatusType.fieldName = tradeApprovalStatusColumn.fieldName;\r\n                filterContractStatusType.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: ContractStatus[ContractStatus.Unapproved],\r\n                };\r\n                filterContractStatusType.isActive = true;\r\n                filters.push(filterContractStatusType);\r\n            }\r\n            this.tradingService.searchContractsForBulkEdit(filters)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.contractsToedit = data;\r\n                        this.ContractGridRows = this.contractsToedit;\r\n                        this.dataLength = this.ContractGridRows.length;\r\n                        this.totalContractList = this.ContractGridRows;\r\n                        this.isQuickSumDisplay = true;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    getContractsToAllocation(isEmit: boolean = false) {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration && this.columnConfiguration.length > 0) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            const quantityColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'Quantity');\r\n            if (quantityColumn) {\r\n\r\n                const filterQuantityType = new ListAndSearchFilter();\r\n                filterQuantityType.fieldId = quantityColumn.fieldId;\r\n                filterQuantityType.fieldName = quantityColumn.fieldName;\r\n                filterQuantityType.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'ne',\r\n                    value1: '0',\r\n                };\r\n                filterQuantityType.isActive = true;\r\n                filters.push(filterQuantityType);\r\n            }\r\n            const allocatedContractColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'AllocatedContractReference');\r\n            if (allocatedContractColumn) {\r\n                const filterAllocationStatusType = new ListAndSearchFilter();\r\n                filterAllocationStatusType.fieldId = allocatedContractColumn.fieldId;\r\n                filterAllocationStatusType.fieldName = allocatedContractColumn.fieldName;\r\n                filterAllocationStatusType.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'empty',\r\n                    value1: null,\r\n                    value2: '',\r\n                };\r\n                filterAllocationStatusType.isActive = true;\r\n                filters.push(filterAllocationStatusType);\r\n            }\r\n\r\n            const tradeApprovalStatusColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'Status');\r\n            if (tradeApprovalStatusColumn) {\r\n                const filterContractStatusType = new ListAndSearchFilter();\r\n                filterContractStatusType.fieldId = tradeApprovalStatusColumn.fieldId;\r\n                filterContractStatusType.fieldName = tradeApprovalStatusColumn.fieldName;\r\n                filterContractStatusType.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: ContractStatus[ContractStatus.Approved],\r\n                };\r\n                filterContractStatusType.isActive = true;\r\n                filters.push(filterContractStatusType);\r\n            }\r\n\r\n            const isTradeClosedColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'IsTradeClosed');\r\n            if (isTradeClosedColumn) {\r\n                const filterTradeClosed = new ListAndSearchFilter();\r\n                filterTradeClosed.fieldId = isTradeClosedColumn.fieldId;\r\n                filterTradeClosed.fieldName = isTradeClosedColumn.fieldName;\r\n                filterTradeClosed.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: 'Open',\r\n\r\n                };\r\n                filterTradeClosed.isActive = true;\r\n                filters.push(filterTradeClosed);\r\n            }\r\n\r\n            this.tradingService.searchContractsForBulkEdit(filters)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.contractsToedit = data;\r\n                        this.ContractGridRows = this.contractsToedit;\r\n                        if (isEmit) {\r\n                            this.resetAllocationGrids.emit(true);\r\n                        }\r\n                        this.dataLength = this.ContractGridRows.length;\r\n                        this.totalContractList = this.ContractGridRows;\r\n                        this.autoSizeContractsGrid();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    getContractsToDeAllocation(isEmit: boolean = false) {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration && this.columnConfiguration.length > 0) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            const allocatedContractColumn = this.columnConfiguration\r\n                .find((column) => column.fieldName === 'AllocatedContractReference');\r\n            if (allocatedContractColumn) {\r\n                const filterAllocationStatusType = new ListAndSearchFilter();\r\n                filterAllocationStatusType.fieldId = allocatedContractColumn.fieldId;\r\n                filterAllocationStatusType.fieldName = allocatedContractColumn.fieldName;\r\n                filterAllocationStatusType.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'notEmpty',\r\n                    value1: null,\r\n                    value2: '',\r\n                };\r\n                filterAllocationStatusType.isActive = true;\r\n                filters.push(filterAllocationStatusType);\r\n            }\r\n\r\n            this.tradingService.searchContractsForBulkEdit(filters)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                )\r\n                .subscribe((data) => {\r\n                    if (data) {\r\n                        this.contractsToedit = data;\r\n                        this.ContractGridRows = this.contractsToedit;\r\n                        if (isEmit) {\r\n                            this.resetAllocationGrids.emit(true);\r\n                        }\r\n                        this.dataLength = this.ContractGridRows.length;\r\n                        this.totalContractList = this.ContractGridRows;\r\n                        this.autoSizeContractsGrid();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onSearchContracts() {\r\n        this.searchContractReference = this.searchContractForm.get('searchContractReferenceCtrl').value;\r\n        const rows: ContractsForBulkFunctions[] = [];\r\n        const contractRows: number = 0;\r\n        this.ContractGridRows = [];\r\n        if (!this.searchContractReference) {\r\n            const selectedRows = this.gridApi.getSelectedRows();\r\n            this.ContractGridRows = this.totalContractList;\r\n            this.gridApi.setRowData(this.ContractGridRows);\r\n            this.dataLength = this.ContractGridRows.length;\r\n            this.autoSizeContractsGrid();\r\n            this.isLoading = false;\r\n            (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n            if (selectedRows) {\r\n                this.gridApi.forEachNode((node) => {\r\n                    const row = selectedRows.find((data) => data.sectionId === node.data.sectionId);\r\n                    if (row) {\r\n                        node.setSelected(true);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return;\r\n        }\r\n        if (this.totalContractList && this.totalContractList.length > 0) {\r\n            this.isLoading = true;\r\n            if (this.searchContractReference) {\r\n                this.checkExistingRows();\r\n            }\r\n        }\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n\r\n        this.gridApi.forEachNode((node) => {\r\n            if (event.node.isSelected() && event.node.data.sectionId === node.data.sectionId) {\r\n                node.setSelected(true);\r\n            }\r\n            if (node.data.isTradeClosed === 'Closed' && node.data.contractLabel === event.data.contractLabel) {\r\n                node.selectable = true;\r\n            }\r\n            if (this.bulkActionTypeId !== GroupFunctionTypes.TradeBulkClosure) {\r\n                if (node.data.isTradeCancelled === 'Cancelled' && node.data.contractLabel === event.data.contractLabel) {\r\n                    node.selectable = true;\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.isContractSelected = selectedRows.length > 0;\r\n        if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation) {\r\n            if (selectedRows.length > 1) {\r\n                const purchaseContract = selectedRows.find((contract) => contract.contractType === ContractTypes[0]);\r\n                const salesContract = selectedRows.find((contract) => contract.contractType === ContractTypes[1]);\r\n                if (purchaseContract && salesContract) {\r\n                    this.contractSelected.emit(this.isContractSelected);\r\n                } else {\r\n                    this.contractSelected.emit(false);\r\n                }\r\n            } else {\r\n                this.contractSelected.emit(false);\r\n            }\r\n        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n            this.gridApi.forEachNode((node) => {\r\n                if (node.data.allocatedContractReference === event.node.data.contractLabel) {\r\n                    if (event.node.isSelected() && event.node.data.contractType === ContractTypes[1] && event.node.data.blDate) {\r\n                        event.node.setSelected(false);\r\n                        node.setSelected(false);\r\n                        this.snackbarService.informationSnackBar('Allocated Sales Contract having BL Date can not be De-allocated');\r\n                    } else if (node.data.contractType === ContractTypes[1] && node.data.blDate) {\r\n                        event.node.setSelected(false);\r\n                        node.setSelected(false);\r\n                        this.snackbarService.informationSnackBar('Allocated Sales Contract having BL Date can not be De-allocated');\r\n                    } else if (event.node.isSelected()) {\r\n                        node.setSelected(true);\r\n                    } else {\r\n                        node.setSelected(false);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const selectedRows = this.gridApi.getSelectedRows();\r\n            this.isContractSelected = selectedRows.length > 1;\r\n            this.contractSelected.emit(this.isContractSelected);\r\n        } else {\r\n            this.contractSelected.emit(this.isContractSelected);\r\n        }\r\n\r\n        this.gridApi.refreshCells(event.data);\r\n        this.grantLock(Number(event.data.sectionId), event.node, event.data.isLocked);\r\n        this.selectedContractsForBulkFunctions = selectedRows;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.selectedContractsForBulkFunctions = this.gridApi.getSelectedRows();\r\n\r\n        return this.selectedContractsForBulkFunctions;\r\n    }\r\n    grantLock(sectionId: number, node: agGrid.RowNode, isLocked: boolean) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkEdition) {\r\n                            this.locking = this.locking.filter((id) => id !== sectionId);\r\n                            this.lockedContracts.push({ enumEntityId: sectionId, enumEntityValue: lock.message });\r\n                        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkApproval\r\n                            || this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation\r\n                            || this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n                            isLocked = true;\r\n                            const selectedSection = this.selectedContractsForBulkFunctions.filter((item) => item.sectionId === sectionId);\r\n                            if (selectedSection.length > 0) {\r\n                                selectedSection[0].isLocked = isLocked;\r\n                                selectedSection[0].lockMessage = lock.message;\r\n                            }\r\n                            this.locking = this.locking.filter((id) => id !== sectionId);\r\n                        }\r\n                    } else {\r\n                        if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkEdition) {\r\n                            this.subscriptions.push(\r\n                                this.lockService.lockContract(sectionId, LockFunctionalContext.BulkEdition)\r\n                                    .subscribe(() => {\r\n                                        this.refeshResourceInformation();\r\n                                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                    }));\r\n                        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkApproval) {\r\n                            this.subscriptions.push(\r\n                                this.lockService.lockContract(sectionId, LockFunctionalContext.BulkApproval)\r\n                                    .subscribe(() => {\r\n                                        this.refeshResourceInformation();\r\n                                        isLocked = false;\r\n                                        const selectedSection = this.selectedContractsForBulkFunctions.filter\r\n                                            ((item) => item.sectionId === sectionId);\r\n                                        if (selectedSection.length > 0) {\r\n                                            selectedSection[0].isLocked = isLocked;\r\n                                            selectedSection[0].lockMessage = lock.message;\r\n                                        }\r\n                                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                    }));\r\n                        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation) {\r\n                            this.subscriptions.push(\r\n                                this.lockService.lockContract(sectionId, LockFunctionalContext.BulkAllocation)\r\n                                    .subscribe(() => {\r\n                                        this.refeshResourceInformation();\r\n                                        isLocked = false;\r\n                                        const selectedSection = this.selectedContractsForBulkFunctions.filter\r\n                                            ((item) => item.sectionId === sectionId);\r\n                                        if (selectedSection.length > 0) {\r\n                                            selectedSection[0].isLocked = isLocked;\r\n                                            selectedSection[0].lockMessage = lock.message;\r\n                                        }\r\n                                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                    }));\r\n                        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n                            this.subscriptions.push(\r\n                                this.lockService.lockContract(sectionId, LockFunctionalContext.BulkDeallocation)\r\n                                    .subscribe(() => {\r\n                                        this.refeshResourceInformation();\r\n                                        isLocked = false;\r\n                                        const selectedSection = this.selectedContractsForBulkFunctions.filter\r\n                                            ((item) => item.sectionId === sectionId);\r\n                                        if (selectedSection.length > 0) {\r\n                                            selectedSection[0].isLocked = isLocked;\r\n                                            selectedSection[0].lockMessage = lock.message;\r\n                                        }\r\n                                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                    }));\r\n                        }\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            this.lockedContracts = this.lockedContracts.filter((item) => item.enumEntityId !== sectionId);\r\n\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkEdition) {\r\n                    this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.BulkEdition)\r\n                        .subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                        }));\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkApproval) {\r\n                    this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.BulkApproval)\r\n                        .subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                        }));\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation) {\r\n                    this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.BulkAllocation)\r\n                        .subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                        }));\r\n                } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n                    this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.BulkDeallocation)\r\n                        .subscribe(() => {\r\n                            node.setRowSelectable(true);\r\n                            this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.groupFunctionsGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n            this.agGridService.sizeColumns(this.groupFunctionsGridOptions);\r\n        }\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]): void {\r\n        this.filters = filters;\r\n        if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkEdition) {\r\n            this.getContractsToEdit();\r\n        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkApproval) {\r\n            this.getContractsToApprove();\r\n        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkClosure) {\r\n            this.getContractsToClosure();\r\n        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation) {\r\n            this.getContractsToAllocation();\r\n        } else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n            this.getContractsToDeAllocation();\r\n        }\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n    loadBulkAllocationColumns(columnConfiguration) {\r\n        let allocationColumnConfiguration: any;\r\n        allocationColumnConfiguration = this.getColumnConfiguration(columnConfiguration, this.bulkAllocationColumns);\r\n        return allocationColumnConfiguration;\r\n    }\r\n    loadBulkDeAllocationColumns(columnConfiguration) {\r\n        let deAllocationColumnConfiguration: any;\r\n        deAllocationColumnConfiguration = this.getColumnConfiguration(columnConfiguration, this.bulkDeAllocationColumns);\r\n        return deAllocationColumnConfiguration;\r\n    }\r\n\r\n    getColumnConfiguration(columnConfiguration, columnsInList) {\r\n        const gridColumnConfiguration = [];\r\n        if (columnConfiguration.length > 0) {\r\n            columnConfiguration.forEach((column) => {\r\n                if (columnsInList.indexOf(column.fieldName) > -1) {\r\n                    column.isVisible = true;\r\n                    gridColumnConfiguration.push(column);\r\n                }\r\n\r\n            });\r\n        }\r\n        return gridColumnConfiguration;\r\n    }\r\n\r\n    onFirstDataRendered() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    checkExistingRows() {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        let rows = [];\r\n        if (selectedRows && selectedRows.length > 0) {\r\n            rows = this.gridApi.getSelectedRows();\r\n        }\r\n        this.contractsToedit = this.totalContractList.filter((item) => item.contractLabel != null);\r\n        const data = this.contractsToedit.filter((item) =>\r\n            item.contractLabel.toString().toUpperCase().includes(this.searchContractReference.toUpperCase()));\r\n        if (data) {\r\n            data.forEach((rowSelected) => {\r\n                let addAllocatedSection: boolean = false;\r\n                if (rows && rows.length > 0) {\r\n                    const rowExists = rows.find((section) => section.sectionId === rowSelected.sectionId);\r\n                    if (!rowExists) {\r\n                        rows.push(rowSelected);\r\n                        addAllocatedSection = true;\r\n                    }\r\n                } else {\r\n                    rows.push(rowSelected);\r\n                    addAllocatedSection = true;\r\n                }\r\n                if (addAllocatedSection && rowSelected.allocatedContractReference\r\n                    && this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n                    const allocatedSection = this.totalContractList.find(\r\n                        (section) => section.contractLabel === rowSelected.allocatedContractReference);\r\n                    if (allocatedSection) {\r\n                        rows.push(allocatedSection);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        this.ContractGridRows = rows;\r\n        this.gridApi.setRowData(this.ContractGridRows);\r\n        this.dataLength = this.ContractGridRows.length;\r\n        this.autoSizeContractsGrid();\r\n        this.isLoading = false;\r\n        (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n        if (this.dataLength > 0) {\r\n            this.gridApi.forEachNode((node) => {\r\n                const row = selectedRows.find((data) => data.sectionId === node.data.sectionId);\r\n                if (row) {\r\n                    node.setSelected(true);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onSearchContractsDeallocation() {\r\n        this.searchContractReferenceDeallocation = this.searchContractForm.get('searchContractReferenceDeallocationCtrl').value;\r\n        this.groupingNumber = this.searchContractForm.get('groupNumberDeallocationCtrl').value;\r\n        this.ContractGridRows = [];\r\n        let rows: ContractsForBulkFunctions[] = [];\r\n        if (!this.searchContractReferenceDeallocation && !this.groupingNumber) {\r\n            const selectedRows = this.gridApi.getSelectedRows();\r\n            this.ContractGridRows = this.totalContractList;\r\n            this.gridApi.setRowData(this.ContractGridRows);\r\n            this.dataLength = this.ContractGridRows.length;\r\n            this.autoSizeContractsGrid();\r\n            this.isLoading = false;\r\n            (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n            if (selectedRows) {\r\n                this.gridApi.forEachNode((node) => {\r\n                    const row = selectedRows.find((data) => data.sectionId === node.data.sectionId);\r\n                    if (row) {\r\n                        node.setSelected(true);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return;\r\n        }\r\n        if (this.totalContractList && this.totalContractList.length > 0) {\r\n            this.isLoading = true;\r\n            if (this.searchContractReferenceDeallocation) {\r\n                this.contractsToedit = this.totalContractList.filter((item) => item.contractLabel != null);\r\n                rows = this.contractsToedit.filter((item) =>\r\n                    item.contractLabel.toString().toUpperCase().includes(this.searchContractReferenceDeallocation.toUpperCase()));\r\n            }\r\n            if (this.groupingNumber) {\r\n                this.contractsToedit = this.totalContractList.filter((item) => item.groupingNumber != null);\r\n                rows = this.contractsToedit.filter((item) =>\r\n                    item.groupingNumber === (Number(this.groupingNumber)));\r\n            }\r\n\r\n            const selectedRows = this.gridApi.getSelectedRows();\r\n            if (selectedRows) {\r\n                selectedRows.forEach((row) => {\r\n                    const rowAlreadyExists = rows.find((section) => section.sectionId === row.sectionId);\r\n                    if (!rowAlreadyExists) {\r\n                        rows.push(row);\r\n\r\n                    }\r\n\r\n                },\r\n                );\r\n            }\r\n            const alloactedRows = rows;\r\n            alloactedRows.forEach((row) => {\r\n                if (row.allocatedContractReference) {\r\n                    const allocatedRow = this.totalContractList.find((allocatedRow) => allocatedRow.contractLabel === row.allocatedContractReference);\r\n                    if (allocatedRow) {\r\n                        const rowAlreadyExists = rows.find((section) => section.sectionId === allocatedRow.sectionId);\r\n                        if (!rowAlreadyExists) {\r\n                            rows.push(allocatedRow);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n            this.ContractGridRows = rows;\r\n            this.gridApi.setRowData(this.ContractGridRows);\r\n            this.dataLength = this.ContractGridRows.length;\r\n            this.autoSizeContractsGrid();\r\n            this.isLoading = false;\r\n            (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n            if (this.dataLength > 0) {\r\n                this.gridApi.forEachNode((node) => {\r\n                    const row = selectedRows.find((data) => data.sectionId === node.data.sectionId);\r\n                    if (row) {\r\n                        node.setSelected(true);\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <div class=\\\"group-function-warning-banner\\\">\\r\\n        <mat-card class=\\\"group-function-warning-card\\\">\\r\\n            <div class=\\\"question-circle-icon\\\">\\r\\n                <mat-icon>help_outline</mat-icon>\\r\\n            </div>\\r\\n            <mat-card-header>\\r\\n                <mat-card-title *ngIf=\\\"bulkActionTypeId==GroupFunctionTypes.TradeBulkEdition\\\">\\r\\n                    <h4>Please select contracts to bulk edit</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-title *ngIf=\\\"bulkActionTypeId==GroupFunctionTypes.TradeBulkApproval\\\">\\r\\n                    <h4>Please select contracts for bulk approval</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-title *ngIf=\\\"bulkActionTypeId==GroupFunctionTypes.TradeBulkClosure\\\">\\r\\n                    <h4>Please select contracts for bulk closure</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-title *ngIf=\\\"bulkActionTypeId==GroupFunctionTypes.TradeBulkAllocation\\\">\\r\\n                    <h4>Please select contracts for bulk allocation</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-title *ngIf=\\\"bulkActionTypeId==GroupFunctionTypes.TradeBulkDeAllocation\\\">\\r\\n                    <h4>Please select contracts for bulk deAllocation</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-subtitle>\\r\\n                    be sure to filter the list accordingly\\r\\n                </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"mat-card.group-function-warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n  mat-card.group-function-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n  mat-card.group-function-warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n  mat-card.group-function-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { GroupFunctionTypes } from '../../../../shared/enums/group-function-type';\r\n\r\n@Component({\r\n    selector: 'atlas-group-function-warning',\r\n    templateUrl: './group-function-warning.component.html',\r\n    styleUrls: ['./group-function-warning.component.scss'],\r\n})\r\nexport class GroupFunctionWarningComponent extends BaseFormComponent implements OnInit {\r\n    bulkActionTypeId: number;\r\n    GroupFunctionTypes = GroupFunctionTypes;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.bulkActionTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('bulkActionTypeId')));\r\n    }\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","module.exports = \"<div [ngSwitch]=\\\"bulkActionTypeId\\\">\\r\\n    <atlas-trade-bulk-edit #tradeBulkEdition\\r\\n                           *ngSwitchDefault>\\r\\n    </atlas-trade-bulk-edit>\\r\\n    <atlas-trade-bulk-approval #tradeBulkApproval\\r\\n                               *ngSwitchCase=GroupFunctionTypes.TradeBulkApproval>\\r\\n    </atlas-trade-bulk-approval>\\r\\n    <atlas-trade-cost-bulk-update #costBulkUpdate\\r\\n                                  *ngSwitchCase=GroupFunctionTypes.Costs>\\r\\n\\r\\n    </atlas-trade-cost-bulk-update>\\r\\n    <atlas-trade-bulk-closure #tradeBulkClosure\\r\\n                              *ngSwitchCase=GroupFunctionTypes.TradeBulkClosure>\\r\\n    </atlas-trade-bulk-closure>\\r\\n    <atlas-trade-bulk-allocation #tradeBulkAllocation\\r\\n                                 *ngSwitchCase=GroupFunctionTypes.TradeBulkAllocation>\\r\\n    </atlas-trade-bulk-allocation>\\r\\n    <atlas-trade-bulk-deallocation #tradeBulkDeAllocation\\r\\n                                   *ngSwitchCase=GroupFunctionTypes.TradeBulkDeAllocation>\\r\\n    </atlas-trade-bulk-deallocation>\\r\\n</div>\"","module.exports = \"\"","import { AfterViewInit, Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { GroupFunctionTypes } from '../../../shared/enums/group-function-type';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { TradeBulkApprovalComponent } from './trade-bulk-approval/trade-bulk-approval.component';\r\nimport { TradeBulkEditComponent } from './trade-bulk-edit/trade-bulk-edit.component';\r\nimport { TradeCostBulkUpdateComponent } from './trade-cost-bulk-update/trade-cost-bulk-update.component';\r\nimport { TradeBulkClosureComponent } from './trade-bulk-closure/trade-bulk-closure.component';\r\nimport { TradeBulkAllocationComponent } from './trade-bulk-allocation/trade-bulk-allocation.component';\r\nimport { TradeBulkDeallocationComponent } from './trade-bulk-deallocation/trade-bulk-deallocation.component';\r\n\r\n@Component({\r\n    selector: 'atlas-group-functions',\r\n    templateUrl: './group-functions.component.html',\r\n    styleUrls: ['./group-functions.component.scss'],\r\n})\r\nexport class GroupFunctionsComponent extends BaseFormComponent implements OnInit, AfterViewInit {\r\n    @ViewChild('tradeBulkEdition') tradeBulkEdition: TradeBulkEditComponent;\r\n    @ViewChild('tradeBulkApproval') tradeBulkApproval: TradeBulkApprovalComponent;\r\n    @ViewChild('costBulkUpdate') costBulkUpdate: TradeCostBulkUpdateComponent;\r\n    @ViewChild('tradeBulkClosure') tradeBulkClosure: TradeBulkClosureComponent;\r\n    @ViewChild('tradeBulkAllocation') tradeBulkAllocation: TradeBulkAllocationComponent;\r\n    @ViewChild('tradeBulkDeAllocation') tradeBulkDeAllocation: TradeBulkDeallocationComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    groupFunctionsFormGroup: FormGroup;\r\n    GroupFunctionTypes = GroupFunctionTypes;\r\n    company: string;\r\n    bulkActionTypeId: number;\r\n    isSave: boolean = false;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        private formBuilder: FormBuilder,\r\n        protected dialog: MatDialog,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.bulkActionTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('bulkActionTypeId')));\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.groupFunctionsFormGroup = this.formBuilder.group({\r\n            dummyFormControl: new FormControl(),\r\n        });\r\n\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.groupFunctionsFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkEdition) {\r\n            this.isSave = true;\r\n            this.titleService.setTitle('Trade Bulk Edition');\r\n            this.groupFunctionsFormGroup = this.formBuilder.group({\r\n                tradeBulkEdition: this.tradeBulkEdition.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.tradeBulkEdition);\r\n        }\r\n        else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkApproval) {\r\n            this.titleService.setTitle('Trade Bulk Approval');\r\n            this.groupFunctionsFormGroup = this.formBuilder.group({\r\n                tradeBulkApproval: this.tradeBulkApproval.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.tradeBulkApproval);\r\n        }\r\n        else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkClosure) {\r\n            this.titleService.setTitle('Trade Closure Approval');\r\n            this.groupFunctionsFormGroup = this.formBuilder.group({\r\n                tradeBulkClosure: this.tradeBulkClosure.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.tradeBulkClosure);\r\n        }\r\n        else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkAllocation) {\r\n            this.titleService.setTitle('Trade Bulk Allocation');\r\n            this.groupFunctionsFormGroup = this.formBuilder.group({\r\n                tradeBulkAllocation: this.tradeBulkAllocation.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.tradeBulkAllocation);\r\n        }\r\n        else if (this.bulkActionTypeId === GroupFunctionTypes.TradeBulkDeAllocation) {\r\n            this.titleService.setTitle('Trade Bulk DeAllocation');\r\n            this.groupFunctionsFormGroup = this.formBuilder.group({\r\n                tradeBulkDeAllocation: this.tradeBulkDeAllocation.getFormGroup(),\r\n            });\r\n            this.formComponents.push(this.tradeBulkDeAllocation);\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"mat-elevation-z1 padding-small\\\">\\r\\n    <div fxFlex=\\\"100%\\\"\\r\\n         fxFlex.xs=\\\"100%\\\"\\r\\n         fxFlex.sm=\\\"100%\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"table-title\\\">\\r\\n            <h3>Purchase Contracts</h3>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"contractGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"contractPurchaseRows\\\"\\r\\n                             [columnDefs]=\\\"allocationGridColumns\\\"\\r\\n                             domLayout=autoHeight\\r\\n                             (gridReady)=\\\"onGridReadyPurchase($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             (rowSelected)=\\\"onPurcahseRowSelected($event)\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"false\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             rowSelection='multiple'\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<mat-card class=\\\"mat-elevation-z1 padding-small atr-ag-grid\\\">\\r\\n    <div fxFlex=\\\"100%\\\"\\r\\n         fxFlex.xs=\\\"100%\\\"\\r\\n         fxFlex.sm=\\\"100%\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"table-title\\\">\\r\\n            <h3>Sales Contracts</h3>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"contractGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"contractSalesRows\\\"\\r\\n                             [columnDefs]=\\\"allocationGridColumns\\\"\\r\\n                             domLayout=autoHeight\\r\\n                             (gridReady)=\\\"onGridReadySales($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             (rowSelected)=\\\"onSaleRowSelected($event)\\\"\\r\\n                             [enableColResize]=\\\"false\\\"\\r\\n                             rowSelection='multiple'\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-card>\\r\\n\\r\\n<div class=\\\"trade-allocation-messages\\\"\\r\\n     *ngFor=\\\"let warningMessage of showWarningMessage\\\">\\r\\n    <mat-card class=\\\"trade-allocation-warning-card\\\"\\r\\n              *ngIf=\\\"warningMessage.showRestrictedDescriptionCard\\\">\\r\\n        <div class=\\\"error-circle-icon\\\">\\r\\n            <mat-icon>remove_circle</mat-icon>\\r\\n        </div>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h4>Allocation cannot be completed for {{warningMessage.sourceContract}} and\\r\\n                    {{warningMessage.targetContract}}\\r\\n                </h4>\\r\\n            </mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n                {{warningMessage.restrictedWarningMessage}}\\r\\n            </mat-card-subtitle>\\r\\n            <button class=\\\"remove-button\\\"\\r\\n                    mat-button\\r\\n                    (click)=\\\"onRestrictRemoveclicked(warningMessage.sourceContract,warningMessage.targetContract,warningMessage.showRestrictedDescriptionCard)\\\">REMOVE\\r\\n            </button>\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n\\r\\n    <mat-card class=\\\"trade-allocation-warning-card\\\"\\r\\n              *ngIf=\\\"warningMessage.showWarningDescriptionCard\\\">\\r\\n        <div class=\\\"warning-circle-icon\\\">\\r\\n            <mat-icon>warning_outline</mat-icon>\\r\\n        </div>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h4>Allocation can be completed for {{warningMessage.sourceContract}} and\\r\\n                    {{warningMessage.targetContract}}\\r\\n                </h4>\\r\\n            </mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n                {{warningMessage.warningMessage}}\\r\\n            </mat-card-subtitle>\\r\\n            <button class=\\\"remove-button\\\"\\r\\n                    mat-button\\r\\n                    (click)=\\\"onWarningRemoveButtonClicked($event)\\\">REMOVE\\r\\n            </button>\\r\\n\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n\\r\\n    <mat-card class=\\\"trade-allocation-warning-card\\\"\\r\\n              *ngIf=\\\"warningMessage.showAllowDescriptionCard\\\">\\r\\n        <button mat-fab\\r\\n                disabled>\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </button>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h4>Allocation is allowed for {{warningMessage.sourceContract}} and {{warningMessage.targetContract}}\\r\\n                </h4>\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\\r\\n<mat-card class=\\\"trade-allocation-shipping-card\\\">\\r\\n    <h3>Allocation Options</h3>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"60\\\">\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-select placeholder=\\\"Transfer Shipping\\\"\\r\\n                            [formControl]=\\\"shippingTypeCtrl\\\">\\r\\n                    <mat-option *ngFor=\\\"let type of shippingTypes\\\"\\r\\n                                [value]=\\\"type.value\\\">{{type.shippingDescription}}</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field *ngIf=\\\"isOneToOneAllocation\\\">\\r\\n                <input matInput\\r\\n                       [textMask]=\\\"{mask:mask}\\\"\\r\\n                       [formControl]=\\\"sourceQuantityCtrl\\\"\\r\\n                       placeholder=\\\"Quantity to allocate\\\"\\r\\n                       (blur)=\\\"checkQuantityValue()\\\"\\r\\n                       (keydown.enter)=\\\"$event.preventDefault()\\\"\\r\\n                       [required]=\\\"sourceQuantityCtrl.isRequired\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('required')\\\">\\r\\n                    Quantity to allocate is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('isPositiveError')\\\">\\r\\n                    Quantity to allocate must be positive.\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('max')\\\">\\r\\n                    Cannot be greater than quantity available.\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('min')\\\">\\r\\n                    Quantity cannot be zero.\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <atlas-form-input fxFlex=\\\"30%\\\"\\r\\n                              *ngIf=\\\"isOneToNAllocation\\\"\\r\\n                              class=\\\"side-nav-footer-components\\\"\\r\\n                              [fieldControl]=\\\"sumOfQuantitiesCtrl\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              label='Sum Of Quantities'>\\r\\n            </atlas-form-input>\\r\\n\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"mat-card.trade-allocation-warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n  mat-card.trade-allocation-warning-card.mat-card button {\\n    margin: 0px 15px 0 10px;\\n    box-shadow: none; }\\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n  button.remove-button.mat-button {\\n  position: absolute;\\n  right: 10px;\\n  bottom: 15px; }\\n\"","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { ContractsForBulkFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { AllocationMessage } from '../../../../../trading/entities/allocation-message';\r\nimport { GetWarningMessages } from '../../../../../shared/validators/warning-messages-validator.validator';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { WarningMessageTypes } from '../../../../../shared/enums/warning-message-type.enum';\r\nimport { AllocationWarning } from '../../../../../trading/entities/allocation-warning';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { isPositive } from '../../../../../shared/directives/number-validators.directive';\r\nimport { ShippingType } from '../../../../../shared/enums/shipping-type-enum';\r\nimport { ShippingTypes } from '../../../../../shared/entities/shipping-type-entity';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { min } from 'rxjs/operators';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { AllocationSetUp } from '../../../../../shared/entities/allocation-set-up-entity';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-allocation-grids',\r\n    templateUrl: './allocation-grids.component.html',\r\n    styleUrls: ['./allocation-grids.component.scss']\r\n})\r\nexport class AllocationGridsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    allocationGridColumns: agGrid.ColDef[];\r\n    contractPurchaseRows: ContractsForBulkFunctions[];\r\n    contractSalesRows: ContractsForBulkFunctions[];\r\n    purchaseGridOptions: agGrid.GridOptions = {};\r\n    salesGridOptions: agGrid.GridOptions = {};\r\n    gridApiPurchaseSelected: agGrid.GridApi;\r\n    gridColumnApiPurchaseSelected: agGrid.ColumnApi;\r\n    gridApiSaleSelected: agGrid.GridApi;\r\n    gridColumnApiSaleSelected: agGrid.ColumnApi;\r\n    allocationMessage: AllocationMessage[] = [];\r\n    showAllowDescriptionCard: boolean = false;\r\n    showRestrictedDescriptionCard: boolean = false;\r\n    showWarningDescriptionCard: boolean = false;\r\n    showWarningMessage: AllocationWarning[] = [];\r\n    WarningMessage: string;\r\n    restrictedWarningMessage: string;\r\n    masterData: MasterData = new MasterData();\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    shippingTypeCtrl = new AtlasFormControl('shippingType');\r\n    sourceQuantityCtrl = new AtlasFormControl('sourceQuantity');\r\n    sumOfQuantitiesCtrl = new AtlasFormControl('sumOfQuantities');\r\n    maxQuantity: number = 0;\r\n    shippingTypes: ShippingTypes[] = [];\r\n    mask = CustomNumberMask(12, 10, true);\r\n    isOneToOneAllocation: boolean = false;\r\n    isInputField: boolean = false;\r\n    isOneToNAllocation: boolean = false;\r\n\r\n    @Output() readonly isSaveDisabled = new EventEmitter<boolean>();\r\n    allocationSetUpData: AllocationSetUp[] = [];\r\n    company: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected snackbarService: SnackbarService,\r\n        private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        public gridService: AgGridService,\r\n        protected formBuilder: FormBuilder,\r\n        protected configurationService: ConfigurationService, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.sumOfQuantitiesCtrl.disable();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.initializeGridColumns();\r\n        for (const type in ShippingType) {\r\n            if (typeof ShippingType[type] === 'number') {\r\n                this.shippingTypes.push({ value: ShippingType[type] as any, shippingDescription: type });\r\n            }\r\n        }\r\n        this.shippingTypeCtrl.patchValue(ShippingType.PurchaseToSale);\r\n\r\n        this.setValidators();\r\n        this.getAllocationSetUpData(this.company);\r\n    }\r\n\r\n    onGridReadyPurchase(params) {\r\n        params.columnDefs = this.contractPurchaseRows;\r\n        this.purchaseGridOptions = params;\r\n        this.gridApiPurchaseSelected = params.api;\r\n        this.gridColumnApiPurchaseSelected = params.columnApi;\r\n        window.onresize = () => {\r\n            this.gridColumnApiPurchaseSelected.autoSizeAllColumns();\r\n        };\r\n        this.gridColumnApiPurchaseSelected.autoSizeAllColumns();\r\n    }\r\n\r\n    onGridReadySales(params) {\r\n        this.gridApiSaleSelected = params.api;\r\n        this.gridColumnApiSaleSelected = params.columnApi;\r\n        window.onresize = () => {\r\n            this.gridColumnApiSaleSelected.autoSizeAllColumns();\r\n        };\r\n        this.gridColumnApiSaleSelected.autoSizeAllColumns();\r\n    }\r\n\r\n\r\n    initializeGridColumns() {\r\n        this.allocationGridColumns = [\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                pinned: 'left',\r\n            },\r\n\r\n            {\r\n                headerName: 'Contract reference',\r\n                field: 'contractLabel',\r\n                colId: 'contractLabel',\r\n            },\r\n            {\r\n                headerName: 'CounterParty',\r\n                field: 'counterparty',\r\n                colId: 'counterparty',\r\n            },\r\n\r\n            {\r\n                headerName: 'Commodity',\r\n                field: 'commodityId',\r\n                colId: 'commodityId',\r\n                valueFormatter: this.commodityDescriptionFormatter.bind(this),\r\n            },\r\n\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                colId: 'quantity',\r\n            },\r\n            {\r\n                headerName: 'Quantity Code',\r\n                field: 'quantityCodeInvoiced',\r\n                colId: 'quantityCodeInvoiced',\r\n            },\r\n            {\r\n                headerName: 'Charter Ref',\r\n                field: 'charterReference',\r\n                colId: 'charterReference',\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n            },\r\n            {\r\n                headerName: 'Price',\r\n                field: 'price',\r\n                colId: 'price',\r\n            },\r\n            {\r\n                headerName: 'Shipping Period',\r\n                field: 'shipmentPeriod',\r\n                colId: 'shipmentPeriod',\r\n            },\r\n            {\r\n                headerName: 'Section Id',\r\n                field: 'sectionId',\r\n                colId: 'sectionId',\r\n                hide: true,\r\n            },\r\n        ]\r\n    }\r\n\r\n    onPurcahseRowSelected(event) {\r\n        this.isSaveEnabled();\r\n        if (event.node.selected === true) {\r\n            const isValid = this.checkValidations(event);\r\n            if (!isValid) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Only one Purcahse contract  can be allocated to multiple Sales contracts',\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            this.hideWarningMessages(event.node.data.contractLabel);\r\n\r\n        }\r\n        this.showTotalQuantities();\r\n\r\n    }\r\n\r\n    onSaleRowSelected(event) {\r\n        this.isSaveEnabled();\r\n        if (event.node.selected === true) {\r\n            const isValid = this.checkValidations(event);\r\n            if (!isValid) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Only one Sale contract can be allocated to multiple Purchase contracts',\r\n                );\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            this.hideWarningMessages(event.node.data.contractLabel);\r\n        }\r\n        this.showTotalQuantities();\r\n    }\r\n\r\n    checkValidations(event) {\r\n        const purchaseSelectedRows = this.gridApiPurchaseSelected.getSelectedRows();\r\n        const saleSelectedRows = this.gridApiSaleSelected.getSelectedRows();\r\n        if (purchaseSelectedRows.length > 1 && saleSelectedRows.length > 1) {\r\n            event.node.setSelected(false);\r\n            return false;\r\n        }\r\n        else if (purchaseSelectedRows.length === 1 && saleSelectedRows.length > 1) {\r\n            let sumQuantity = 0;\r\n            saleSelectedRows.forEach((contract) => {\r\n                sumQuantity += contract.quantity;\r\n\r\n            });\r\n            if (sumQuantity > purchaseSelectedRows[0].quantity) {\r\n                event.node.setSelected(false);\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Sum of quantity of Sales contract should be less that or equal to Purchase quantity',\r\n                );\r\n            }\r\n            else {\r\n                this.checkWarningMessages(event);\r\n            }\r\n        }\r\n        else if (saleSelectedRows.length === 1 && purchaseSelectedRows.length > 1) {\r\n            let sumQuantity = 0;\r\n            purchaseSelectedRows.forEach((contract) => {\r\n                sumQuantity += contract.quantity;\r\n\r\n            });\r\n            if (sumQuantity > saleSelectedRows[0].quantity) {\r\n                event.node.setSelected(false);\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Sum of quantity of Purchase contract should be less that or equal to Sale quantity',\r\n                );\r\n            }\r\n            else {\r\n                this.checkWarningMessages(event);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.checkWarningMessages(event);\r\n        }\r\n        this.isSaveEnabled();\r\n        return true;\r\n\r\n    }\r\n    checkWarningMessages(event) {\r\n        let selectedContracts;\r\n        if (event.node.data.contractType === ContractTypes[0]) {\r\n            selectedContracts = this.gridApiSaleSelected.getSelectedRows();\r\n        }\r\n        else {\r\n            selectedContracts = this.gridApiPurchaseSelected.getSelectedRows();\r\n        }\r\n        this.generateWarnings(selectedContracts, event);\r\n\r\n    }\r\n\r\n\r\n\r\n    validateWarningMessages(warningMessages: AllocationMessage[], sourceContract: string, targetContract: string) {\r\n        let isValidTrade = true;\r\n        let allocationwarningObj = new AllocationWarning();\r\n        allocationwarningObj.sourceContract = sourceContract;\r\n        allocationwarningObj.targetContract = targetContract;\r\n\r\n        //this.resetAllDescriptionComponents();\r\n        if (warningMessages.length > 0) {\r\n            warningMessages.forEach((item) => {\r\n                // trade is Restricted , so return isValid =false;\r\n                if (item.errorTypeId === WarningMessageTypes.Restricted) {\r\n                    allocationwarningObj.showRestrictedDescriptionCard = true;\r\n                    allocationwarningObj.restrictedWarningMessage = item.message;\r\n                    isValidTrade = false;\r\n\r\n\r\n                } else if (item.errorTypeId === WarningMessageTypes.Warning) {\r\n                    // trade is Warning, allocation can be done , so return isValid =true;\r\n                    allocationwarningObj.showWarningDescriptionCard = true;\r\n                    allocationwarningObj.warningMessage = item.message;\r\n                }\r\n            });\r\n            allocationwarningObj.showAllowDescriptionCard = isValidTrade;\r\n        }\r\n        allocationwarningObj.showAllowDescriptionCard = isValidTrade;\r\n        this.showWarningMessage.push(allocationwarningObj);\r\n        this.isSaveEnabled();\r\n        return isValidTrade;\r\n    }\r\n\r\n    generateWarnings(selectedContracts, event) {\r\n        if (selectedContracts.length > 0) {\r\n            this.allocationMessage = [];\r\n\r\n            selectedContracts.forEach((selectedContract) => {\r\n                this.executionService.getWarningMessages(selectedContract.sectionId, event.data.sectionId)\r\n                    .subscribe((data) => {\r\n                        if (data.value.length > 1) {\r\n                            this.allocationMessage = GetWarningMessages(data.value, this.allocationSetUpData);\r\n                            this.validateWarningMessages(this.allocationMessage, selectedContract.contractLabel, event.data.contractLabel);\r\n                        }\r\n\r\n                    });\r\n            });\r\n        }\r\n    }\r\n\r\n    hideWarningMessages(contractLabel) {\r\n\r\n        if (this.showWarningMessage.length > 0) {\r\n            const deselectedContract = this.showWarningMessage.filter((contract) => (contract.targetContract === contractLabel || contract.sourceContract === contractLabel));\r\n            if (deselectedContract) {\r\n                deselectedContract.forEach((contract) => {\r\n                    const index: number = this.showWarningMessage.indexOf(contract);\r\n                    if (index !== -1) {\r\n                        this.showWarningMessage.splice(index, 1);\r\n                        this.isSaveEnabled();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    onRestrictRemoveclicked(sourceContract, targetContract, showRestrictedDescriptionCard) {\r\n        showRestrictedDescriptionCard = !showRestrictedDescriptionCard;\r\n        const saleContracts = this.gridApiSaleSelected.getSelectedRows();\r\n        const purchaseContracts = this.gridApiPurchaseSelected.getSelectedRows();\r\n        this.gridApiPurchaseSelected.forEachNode((node) => {\r\n            const selectedContract = purchaseContracts.find((contract) => node.data.contractLabel === sourceContract || node.data.contractLabel === targetContract);\r\n            if (selectedContract) {\r\n                node.setSelected(false);\r\n                this.isSaveDisabled.emit(false);\r\n            }\r\n        });\r\n        this.gridApiSaleSelected.forEachNode((node) => {\r\n            const selectedContract = saleContracts.find((contract) => node.data.contractLabel === sourceContract || node.data.contractLabel === targetContract);\r\n            if (selectedContract) {\r\n                node.setSelected(false);\r\n                this.isSaveDisabled.emit(false);\r\n            }\r\n        });\r\n    }\r\n    onWarningRemoveButtonClicked(params) {\r\n        if (params) {\r\n            params.currentTarget.parentElement.parentElement.remove();\r\n        }\r\n    }\r\n\r\n    isSaveEnabled() {\r\n        this.isOneToOneAllocation = false;\r\n        const saleContracts = this.gridApiSaleSelected.getSelectedRows();\r\n        const purchaseContracts = this.gridApiPurchaseSelected.getSelectedRows();\r\n        const isRestrictedContract = this.showWarningMessage.find((contract) => contract.showRestrictedDescriptionCard === true)\r\n        if (saleContracts && purchaseContracts && saleContracts.length === 1 && purchaseContracts.length === 1) {\r\n            this.isOneToOneAllocation = true;\r\n            this.maxQuantity = Math.min(saleContracts[0].quantity, purchaseContracts[0].quantity)\r\n            this.sourceQuantityCtrl.patchValue(this.maxQuantity);\r\n        }\r\n        if (isRestrictedContract) {\r\n            this.isSaveDisabled.emit(true);\r\n        }\r\n        else {\r\n            if (saleContracts.length > 0 && purchaseContracts.length > 0) {\r\n                this.isSaveDisabled.emit(false);\r\n            }\r\n            else {\r\n                this.isSaveDisabled.emit(true);\r\n            }\r\n        }\r\n    }\r\n    setValidators() {\r\n        this.sourceQuantityCtrl.setValidators(\r\n            Validators.compose([isPositive()\r\n                , Validators.required, Validators.min(0.0000000001), (control: AbstractControl) => Validators.max(Number(this.maxQuantity) > 0 ? Number(this.maxQuantity) : null)]),\r\n        );\r\n\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            shippingTypeCtrl: this.shippingTypeCtrl,\r\n            sourceQuantityCtrl: this.sourceQuantityCtrl,\r\n            sumOfQuantitiesCtrl: this.sumOfQuantitiesCtrl\r\n        },\r\n        );\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    checkQuantityValue() {\r\n        if (this.sourceQuantityCtrl.value) {\r\n            const formattedNumber = Number(this.sourceQuantityCtrl.value.toString().replace(/,/g, \"\"));\r\n            if (formattedNumber > this.maxQuantity) {\r\n                this.sourceQuantityCtrl.setErrors({ 'max': true });\r\n            }\r\n        }\r\n    }\r\n    resetGrids(saleContractData, purchaseRowData) {\r\n        this.gridApiSaleSelected.setRowData(saleContractData);\r\n        this.gridApiPurchaseSelected.setRowData(purchaseRowData);\r\n        this.showWarningMessage = [];\r\n        this.isOneToOneAllocation = false;\r\n        this.isOneToNAllocation = false;\r\n        this.isSaveDisabled.emit(true);\r\n\r\n    }\r\n    showTotalQuantities() {\r\n        let totalQuantities = 0;\r\n        this.isOneToNAllocation = false;\r\n        const saleSelectedContracts = this.gridApiSaleSelected.getSelectedRows();\r\n        const purchaseContracts = this.gridApiPurchaseSelected.getSelectedRows();\r\n        if (saleSelectedContracts && saleSelectedContracts.length > 1) {\r\n            saleSelectedContracts.forEach((contract) => {\r\n                totalQuantities += contract.quantity;\r\n            });\r\n\r\n        }\r\n        if (purchaseContracts && purchaseContracts.length > 1) {\r\n            purchaseContracts.forEach((contract) => {\r\n                totalQuantities += contract.quantity;\r\n            });\r\n\r\n        }\r\n        if (totalQuantities !== 0) {\r\n            this.sumOfQuantitiesCtrl.patchValue(totalQuantities);\r\n            this.isOneToNAllocation = true;\r\n        }\r\n\r\n    }\r\n    commodityDescriptionFormatter(params) {\r\n        const commodity = this.masterData.commodities.find((com) => com.commodityId === params.value);\r\n        return commodity ? commodity.commodityCode : '';\r\n    }\r\n\r\n    // this method will fetch allocationsetupdata for a company\r\n    getAllocationSetUpData(company: string) {\r\n        this.configurationService.getAllocationSetUpByCompany(company)\r\n            .subscribe((data) => {\r\n                if (data && data.length > 0) {\r\n                    this.allocationSetUpData = data;\r\n                }\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"bulkAllocationForm\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Selection</ng-template>\\r\\n                <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\\r\\n                <atlas-group-function-contracts #contractSelection\\r\\n                                                (resetAllocationGrids)=\\\"resetAllocationGrids($event)\\\"\\r\\n                                                (contractSelected)=\\\"isContractSelected($event)\\\">\\r\\n                </atlas-group-function-contracts>\\r\\n\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onContractSelectionDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onContractSelectionNextButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isContractsNextDisabled\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Allocation</ng-template>\\r\\n                <atlas-allocation-grids #allocationGridsComponent\\r\\n                                        (isSaveDisabled)=\\\"isSaveDisabled($event)\\\"></atlas-allocation-grids>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"center center\\\"\\r\\n                     fxLayoutWrap\\r\\n                     *ngIf=\\\"isLoading\\\"\\r\\n                     class=\\\"loading\\\">\\r\\n                    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     *ngIf=\\\"!isLoading\\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onContractSelectionDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onNoMoreAllocationClicked()\\\">\\r\\n                                No more Allocation\\r\\n                            </button>\\r\\n                            <button mat-raised-button\\r\\n                                    [disabled]=\\\"disableSave\\\"\\r\\n                                    (click)=\\\"onAllocateButtonClicked()\\\">\\r\\n                                Allocate\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatStepper, MatDialog } from '@angular/material';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { ContractsForBulkFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { GroupFunctionWarningComponent } from '../group-function-warning/group-function-warning.component';\r\nimport { GroupFunctionContractsComponent } from '../group-function-contracts/group-function-contracts.component';\r\nimport { AllocationGridsComponent } from './allocation-grids/allocation-grids.component';\r\nimport { ContractTypes } from '../../../../shared/enums/contract-type.enum';\r\nimport { Section } from '../../../../shared/entities/section.entity';\r\nimport { AtlasNumber } from '../../../../shared/entities/atlas-number.entity';\r\nimport { DiscountBasis } from '../../../../shared/enums/discount-basis.enum';\r\nimport { conformToMask } from 'text-mask-core';\r\nimport { DiscountTypes } from '../../../../shared/enums/discount-type.enum';\r\nimport { CustomNumberMask } from '../../../../shared/numberMask';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { TrancheSplitCreationResult } from '../../../../shared/services/trading/dtos/section';\r\nimport { AllocateSection } from '../../../../shared/entities/allocate-section.entity';\r\nimport { ExecutionService } from '../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { ContractInvoiceType } from '../../../../shared/enums/contract-invoice-type.enum';\r\nimport { AnimateShowChangeCellRenderer } from 'ag-grid-community';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-bulk-allocation',\r\n    templateUrl: './trade-bulk-allocation.component.html',\r\n    styleUrls: ['./trade-bulk-allocation.component.scss']\r\n})\r\nexport class TradeBulkAllocationComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('contractSelection') contractSelection: GroupFunctionContractsComponent;\r\n    @ViewChild('allocationGridsComponent') allocationGridsComponent: AllocationGridsComponent;\r\n    @ViewChild('groupFunctionWarning') groupFunctionWarning: GroupFunctionWarningComponent;\r\n\r\n    currentStep: number = 0;\r\n    isContractsNextDisabled: boolean = true;\r\n    formComponents: BaseFormComponent[] = [];\r\n    bulkAllocationForm: FormGroup;\r\n    disableSave: boolean = true;\r\n    sectionModel: Section;\r\n    masterData: MasterData = new MasterData();\r\n    splitResult: TrancheSplitCreationResult[];\r\n    subscription: Subscription[] = [];\r\n    isLoading: boolean = false;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private router: Router,\r\n        private executionService: ExecutionService,\r\n        private companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n        protected tradingService: TradingService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.bulkAllocationForm = this.formBuilder.group({\r\n            contractSelection: this.contractSelection.getFormGroup(),\r\n            allocationGridsComponent: this.allocationGridsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.contractSelection, this.allocationGridsComponent);\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    onContractSelectionDiscardButtonClicked() {\r\n        if (this.isContractsNextDisabled) {\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n        } else {\r\n            this.discardButtonDialog();\r\n        }\r\n    }\r\n\r\n    isContractSelected(contractSelected: boolean) {\r\n        this.isContractsNextDisabled = !contractSelected;\r\n    }\r\n\r\n    onContractSelectionNextButtonClicked() {\r\n        const selectedContracts = this.contractSelection.selectedContractsForBulkFunctions as ContractsForBulkFunctions[];\r\n        this.allocationGridsComponent.contractPurchaseRows = selectedContracts.filter((contract) => contract.contractType === ContractTypes[0]);\r\n        this.allocationGridsComponent.contractSalesRows = selectedContracts.filter((contract) => contract.contractType === ContractTypes[1]);\r\n        this.stepper.next();\r\n    }\r\n\r\n    discardButtonDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n            }\r\n        });\r\n    }\r\n\r\n    onFieldSelectionPreviousButtonClicked() {\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onAllocateButtonClicked() {\r\n        //call create bulk split\r\n        let sectionQuantities = [];\r\n        const purchaseSelectedRows = this.allocationGridsComponent.gridApiPurchaseSelected.getSelectedRows();\r\n        const saleSelectedRows = this.allocationGridsComponent.gridApiSaleSelected.getSelectedRows();\r\n        if (purchaseSelectedRows && saleSelectedRows) {\r\n            this.isLoading = true;\r\n            if (purchaseSelectedRows.length === 1 && saleSelectedRows.length === 1) {\r\n                this.oneToOneAllocation(purchaseSelectedRows, saleSelectedRows, sectionQuantities);\r\n            }\r\n            else if (purchaseSelectedRows.length == 1 && saleSelectedRows.length > 1) {\r\n                saleSelectedRows.forEach((contract) => {\r\n                    sectionQuantities.push(contract.quantity);\r\n\r\n                });\r\n                this.calculateContractValue(purchaseSelectedRows[0].sectionId, sectionQuantities, saleSelectedRows)\r\n            }\r\n            else if (saleSelectedRows.length == 1 && purchaseSelectedRows.length > 1) {\r\n                purchaseSelectedRows.forEach((contract) => {\r\n                    sectionQuantities.push(contract.quantity);\r\n                });\r\n                this.calculateContractValue(saleSelectedRows[0].sectionId, sectionQuantities, purchaseSelectedRows)\r\n            }\r\n        }\r\n\r\n    }\r\n    isSaveDisabled(params: boolean) {\r\n        this.disableSave = params;\r\n    }\r\n    setContractValue(sectionModel: Section, quantityValue: number, formatValue = true): string {\r\n        let quantityVal;\r\n        quantityVal = quantityValue;\r\n        const mask = CustomNumberMask(12, 10, true);\r\n        if (this.masterData === undefined) {\r\n            return;\r\n        }\r\n        const weightCodeConversion = this.masterData.weightUnits.\r\n            find((weightUnit) => weightUnit.weightUnitId === sectionModel.weightUnitId).conversionFactor;\r\n        const selectedPriceUnit = this.masterData.priceUnits.filter(\r\n            (priceUnit) => priceUnit.priceUnitId === sectionModel.priceUnitId,\r\n        );\r\n        const priceCodeConversion =\r\n            selectedPriceUnit.length > 0\r\n                ? selectedPriceUnit[0].conversionFactor\r\n                : undefined;\r\n\r\n        if (!weightCodeConversion || !priceCodeConversion\r\n            || !quantityValue\r\n            || !sectionModel.price) {\r\n            sectionModel.contractedValue = '';\r\n            return;\r\n        }\r\n        const contractPrice = sectionModel.price.toString().replace(/,/g, '');\r\n        let contractPriceDecimal: AtlasNumber = new AtlasNumber(contractPrice);\r\n        const quantity = quantityVal.toString().replace(/,/g, '');\r\n        const quantityDecimal: AtlasNumber = new AtlasNumber(quantity);\r\n\r\n        if (sectionModel.premiumDiscountTypeId !== undefined &&\r\n            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&\r\n            sectionModel.premiumDiscountTypeId !== undefined) {\r\n            // discountPremiumValue exists\r\n\r\n            let discountPremiumContractedPrice: number | AtlasNumber = 0;\r\n            const discountPremiumSign = ((sectionModel.premiumDiscountTypeId as DiscountTypes) === DiscountTypes.Discount ? -1 : 1);\r\n\r\n            // tslint:disable-next-line:prefer-conditional-expression\r\n            if ((sectionModel.premiumDiscountBasis as DiscountBasis) === DiscountBasis.Rate) {\r\n                discountPremiumContractedPrice = sectionModel.premiumDiscountValue * discountPremiumSign;\r\n            } else if ((sectionModel.premiumDiscountBasis as DiscountBasis) === DiscountBasis.Percent) {\r\n                discountPremiumContractedPrice = contractPriceDecimal\r\n                    .times((sectionModel.premiumDiscountValue * discountPremiumSign / 100));\r\n            }\r\n            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);\r\n        }\r\n\r\n        const contractValue = contractPriceDecimal.times(quantityDecimal).times(\r\n            weightCodeConversion *\r\n            priceCodeConversion).toString();\r\n\r\n        if (formatValue) {\r\n            const contractValueFormatted = conformToMask(contractValue, mask, { guide: false }).conformedValue;\r\n            sectionModel.contractedValue = contractValueFormatted;\r\n        } else {\r\n            sectionModel.contractedValue = contractValue;\r\n        }\r\n\r\n        return sectionModel.contractedValue;\r\n\r\n    }\r\n\r\n    createSplitsAndAllocate(sectionId, quantities, contractValues, targetSelectedRows: ContractsForBulkFunctions[]) {\r\n        targetSelectedRows = this.checkWashoutContracts(targetSelectedRows);\r\n        this.creatingPopupForWashoutContract(targetSelectedRows, sectionId, quantities, contractValues)\r\n    }\r\n\r\n\r\n    allocateTrade(allocateSectionModel) {\r\n        this.executionService.allocateSections(allocateSectionModel).subscribe(() => {\r\n            this.contractSelection.getContractsToAllocation(true);\r\n            this.snackbarService.informationSnackBar('Allocation  of selected contracts is done successfully');\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    calculateContractValue(sectionId, sectionQuantities, targetSelectedRows) {\r\n        let sectionContractValues = [];\r\n        this.tradingService.getSection(sectionId, 0)\r\n            .subscribe((data) => {\r\n                this.sectionModel = data;\r\n\r\n                if (sectionQuantities) {\r\n                    sectionQuantities.forEach((quantity) => {\r\n                        let value = this.setContractValue(this.sectionModel, quantity, false);\r\n                        sectionContractValues.push(value);\r\n                    });\r\n                    this.createSplitsAndAllocate(sectionId, sectionQuantities, sectionContractValues, targetSelectedRows);\r\n                }\r\n            });\r\n    }\r\n    oneToOneAllocation(purchaseSelectedRows, saleSelectedRows, sectionQuantities) {\r\n        let sectionIds = [];\r\n        let isWashoutContract: boolean = false;\r\n        isWashoutContract = this.checkWashoutConditionForOneToOneAllocation(purchaseSelectedRows, saleSelectedRows);\r\n        if (this.allocationGridsComponent.formGroup.valid) {\r\n            if (purchaseSelectedRows[0].quantity === saleSelectedRows[0].quantity) {\r\n                if (this.allocationGridsComponent.sourceQuantityCtrl.value === purchaseSelectedRows[0].quantity) {\r\n                    const allocateSectionModel: AllocateSection[] = [];\r\n                    const allocateSectionElement: AllocateSection = new AllocateSection();\r\n\r\n                    if (isWashoutContract) {\r\n                        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Washout Contract',\r\n                                text: 'Do you want to mark this contract as washout ?',\r\n                                okButton: 'Yes',\r\n                                cancelButton: 'No',\r\n                            },\r\n                        });\r\n                        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                            if (answer) {\r\n                                allocateSectionElement.contractInvoiceTypeId = ContractInvoiceType.Washout;\r\n                                this.onAllocationOfOnetoOneTrade(allocateSectionElement, purchaseSelectedRows, saleSelectedRows, allocateSectionModel);\r\n                            }\r\n                            else {\r\n                                this.onAllocationOfOnetoOneTrade(allocateSectionElement, purchaseSelectedRows, saleSelectedRows, allocateSectionModel);\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onAllocationOfOnetoOneTrade(allocateSectionElement, purchaseSelectedRows, saleSelectedRows, allocateSectionModel);\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    sectionIds.push(purchaseSelectedRows[0].sectionId, saleSelectedRows[0].sectionId);\r\n                    let quantitity = this.allocationGridsComponent.sourceQuantityCtrl.value;\r\n                    let washoutRequired: boolean = false;\r\n                    if (isWashoutContract) {\r\n                        this.popUpForOnetoOneAllocationForWashout(sectionIds, quantitity)\r\n                    }\r\n                    else {\r\n                        this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired)\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            else if (purchaseSelectedRows[0].quantity > saleSelectedRows[0].quantity) {\r\n                if (saleSelectedRows[0].quantity === this.allocationGridsComponent.sourceQuantityCtrl.value) {\r\n                    sectionQuantities.push(saleSelectedRows[0].quantity);\r\n                    this.calculateContractValue(purchaseSelectedRows[0].sectionId, sectionQuantities, saleSelectedRows)\r\n                }\r\n                else {\r\n                    sectionIds.push(purchaseSelectedRows[0].sectionId, saleSelectedRows[0].sectionId);\r\n                    let quantitity = this.allocationGridsComponent.sourceQuantityCtrl.value;\r\n                    let washoutRequired: boolean = false;\r\n                    if (isWashoutContract) {\r\n                        this.popUpForOnetoOneAllocationForWashout(sectionIds, quantitity)\r\n                    }\r\n                    else {\r\n                        this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired)\r\n                    }\r\n                }\r\n            }\r\n            else if (purchaseSelectedRows[0].quantity < saleSelectedRows[0].quantity) {\r\n                if (purchaseSelectedRows[0].quantity === this.allocationGridsComponent.sourceQuantityCtrl.value) {\r\n                    sectionQuantities.push(purchaseSelectedRows[0].quantity);\r\n                    this.calculateContractValue(saleSelectedRows[0].sectionId, sectionQuantities, purchaseSelectedRows)\r\n                }\r\n                else {\r\n                    sectionIds.push(purchaseSelectedRows[0].sectionId, saleSelectedRows[0].sectionId);\r\n                    let quantitity = this.allocationGridsComponent.sourceQuantityCtrl.value;\r\n                    let washoutRequired: boolean = false;\r\n                    if (isWashoutContract) {\r\n                        this.popUpForOnetoOneAllocationForWashout(sectionIds, quantitity)\r\n                    }\r\n                    else {\r\n                        this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.isLoading = false;\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors.');\r\n        }\r\n\r\n    }\r\n\r\n    async createSplitOneToOneAndAllocate(sectionIds, quantitity, contractValues, washoutRequired: boolean) {\r\n        this.tradingService.createSplitForContract(sectionIds, quantitity, null, contractValues)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.splitResult = data as TrancheSplitCreationResult[];\r\n                    if (this.splitResult) {\r\n                        const allocateSectionModel: AllocateSection[] = [];\r\n                        const allocateSectionElement: AllocateSection = new AllocateSection();\r\n                        allocateSectionElement.sectionId = this.splitResult[0].sectionId;\r\n                        allocateSectionElement.allocatedSectionId = this.splitResult[1].sectionId;\r\n                        allocateSectionElement.quantity = quantitity;\r\n                        allocateSectionElement.shippingType = this.allocationGridsComponent.shippingTypeCtrl.value;\r\n                        allocateSectionElement.dataVersionId = null;\r\n                        if (washoutRequired) {\r\n                            allocateSectionElement.contractInvoiceTypeId = ContractInvoiceType.Cancellation\r\n                        }\r\n                        allocateSectionModel.push(allocateSectionElement);\r\n                        this.allocateTrade(allocateSectionModel);\r\n                    }\r\n                });\r\n    }\r\n    calculateContractValueForSingleAllocation(sectionIds, sectionQuantitity, washoutRequired: boolean) {\r\n        let sectionContractValues = [];\r\n        if (sectionIds && sectionIds.length > 0) {\r\n            sectionIds.forEach((sectionId) => {\r\n                this.subscription.push(this.tradingService.getSection(sectionId, 0)\r\n                    .subscribe((data) => {\r\n                        this.sectionModel = data;\r\n                        const contractValue = this.setContractValue(this.sectionModel, sectionQuantitity, false)\r\n                        sectionContractValues.push(contractValue);\r\n                        if (sectionContractValues && sectionContractValues.length == 2) {\r\n                            this.createSplitOneToOneAndAllocate(sectionIds, sectionQuantitity, sectionContractValues, washoutRequired);\r\n                        }\r\n                    }));\r\n            });\r\n\r\n        }\r\n    }\r\n    onNoMoreAllocationClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n    }\r\n    resetAllocationGrids(params: boolean) {\r\n        if (params) {\r\n            let purchaseRowData = [];\r\n            let saleRowData = [];\r\n            const rowData = this.contractSelection.ContractGridRows;\r\n            const saleSelectedContracts = this.allocationGridsComponent.contractSalesRows;\r\n            const purchaseContracts = this.allocationGridsComponent.contractPurchaseRows;\r\n            if (rowData && saleSelectedContracts && purchaseContracts) {\r\n                rowData.forEach((data) => {\r\n                    let saleContract = saleSelectedContracts.find((contract) => contract.sectionId === data.sectionId);\r\n                    if (saleContract) {\r\n                        saleRowData.push(data);\r\n                    }\r\n                    let purchaseContract = purchaseContracts.find((contract) => contract.sectionId === data.sectionId);\r\n                    if (purchaseContract) {\r\n                        purchaseRowData.push(data);\r\n                    }\r\n\r\n\r\n                });\r\n                this.allocationGridsComponent.resetGrids(saleRowData, purchaseRowData)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    checkWashoutContracts(targetSelectedRows: ContractsForBulkFunctions[]) {\r\n        let code: string = ''\r\n        if (this.sectionModel.contractType === ContractTypes.Purchase) {\r\n            code = this.sectionModel.sellerCode;\r\n        } else if (this.sectionModel.contractType === ContractTypes.Sale) {\r\n            code = this.sectionModel.buyerCode;\r\n        }\r\n        targetSelectedRows.forEach((element) => {\r\n            if (element.currencyCode === this.sectionModel.currencyCode && element.counterparty === code) {\r\n                element.isWashout = true;\r\n            }\r\n            else {\r\n                element.isWashout = false;\r\n            }\r\n\r\n        });\r\n        return targetSelectedRows;\r\n    }\r\n\r\n    onSplitAndAllocation(sectionId, quantities, contractValues, targetSelectedRows: ContractsForBulkFunctions[], isWashoutRequire) {\r\n        this.tradingService.createBulkSplitForContract(sectionId, quantities, null, contractValues)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.splitResult = data as TrancheSplitCreationResult[];\r\n                    const allocateSectionModel: AllocateSection[] = [];\r\n                    if (this.splitResult && this.splitResult.length > 0) {\r\n                        for (let i = 0; i < this.splitResult.length; i++) {\r\n                            const allocateSectionElement: AllocateSection = new AllocateSection();\r\n                            allocateSectionElement.sectionId = this.splitResult[i].sectionId;\r\n                            allocateSectionElement.allocatedSectionId = targetSelectedRows[i].sectionId;\r\n                            allocateSectionElement.quantity = targetSelectedRows[i].quantity;\r\n                            allocateSectionElement.shippingType = this.allocationGridsComponent.shippingTypeCtrl.value;\r\n                            allocateSectionElement.dataVersionId = null;\r\n                            if (isWashoutRequire && targetSelectedRows[i].isWashout) {\r\n                                allocateSectionElement.contractInvoiceTypeId = ContractInvoiceType.Washout;\r\n                            }\r\n                            allocateSectionModel.push(allocateSectionElement);\r\n                        }\r\n                    }\r\n                    this.allocateTrade(allocateSectionModel);\r\n                });\r\n    }\r\n\r\n    creatingPopupForWashoutContract(targetSelectedRows, sectionId, quantities, contractValues) {\r\n        let isWashoutRequired: boolean = false;\r\n        let message: string = '';\r\n        targetSelectedRows.forEach((element) => {\r\n            if (element.isWashout) {\r\n                message = message + ' , ' + element.contractLabel;\r\n            }\r\n        });\r\n        if (message != '') {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Washout Contract',\r\n                    text: `Do you want to mark  ${message} contract as washout ?`,\r\n                    okButton: 'Yes',\r\n                    cancelButton: 'No',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    isWashoutRequired = true;\r\n                    this.onSplitAndAllocation(sectionId, quantities, contractValues, targetSelectedRows, isWashoutRequired)\r\n                }\r\n                else {\r\n                    isWashoutRequired = false;\r\n                    this.onSplitAndAllocation(sectionId, quantities, contractValues, targetSelectedRows, isWashoutRequired)\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            isWashoutRequired = false;\r\n            this.onSplitAndAllocation(sectionId, quantities, contractValues, targetSelectedRows, isWashoutRequired)\r\n        }\r\n\r\n    }\r\n    checkWashoutConditionForOneToOneAllocation(purchaseSelectedRows: ContractsForBulkFunctions[], saleSelectedRows: ContractsForBulkFunctions[]) {\r\n        if (purchaseSelectedRows[0].counterparty === saleSelectedRows[0].counterparty &&\r\n            purchaseSelectedRows[0].currencyCode === saleSelectedRows[0].currencyCode) {\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    onAllocationOfOnetoOneTrade(allocateSectionElement: AllocateSection, purchaseSelectedRows: ContractsForBulkFunctions[],\r\n        saleSelectedRows: ContractsForBulkFunctions[], allocateSectionModel: AllocateSection[]) {\r\n\r\n        allocateSectionElement.sectionId = purchaseSelectedRows[0].sectionId;\r\n        allocateSectionElement.allocatedSectionId = saleSelectedRows[0].sectionId;\r\n        allocateSectionElement.quantity = purchaseSelectedRows[0].quantity;\r\n        allocateSectionElement.shippingType = this.allocationGridsComponent.shippingTypeCtrl.value;\r\n        allocateSectionElement.dataVersionId = null;\r\n        allocateSectionModel.push(allocateSectionElement);\r\n        this.allocateTrade(allocateSectionModel);\r\n    }\r\n    popUpForOnetoOneAllocationForWashout(sectionIds, quantitity) {\r\n        let washoutRequired: boolean\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Washout Contract',\r\n                text: 'Do you want to mark this contract as washout ?',\r\n                okButton: 'Yes',\r\n                cancelButton: 'No',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                washoutRequired = true;\r\n                this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired)\r\n            }\r\n            else {\r\n                washoutRequired = false;\r\n                this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired)\r\n            }\r\n        });\r\n\r\n\r\n\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\\r\\n    <atlas-group-function-contracts #contractSelection\\r\\n                                    (contractSelected)=\\\"isContractSelected($event)\\\"></atlas-group-function-contracts>\\r\\n    <div fxLayout=\\\"row \\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"start \\\">\\r\\n            <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                    mat-button>\\r\\n                DISCARD\\r\\n            </button>\\r\\n            <button (click)=\\\"onPreviousButtonClicked()\\\"\\r\\n                    mat-button>\\r\\n                PREVIOUS\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start \\\">\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"end start \\\">\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onApproveButtonCliked()\\\"\\r\\n                        [disabled]=\\\"!isContractsNextDisabled\\\">\\r\\n                    APPROVE\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { BulkApprovalDialogComponent } from '../../../../../app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { ChildTradeForSection } from '../../../../shared/services/trading/dtos/ChildTradesForSection';\r\nimport { ContractsForBulkFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { GroupFunctionContractsComponent } from '../group-function-contracts/group-function-contracts.component';\r\nimport { GroupFunctionWarningComponent } from '../group-function-warning/group-function-warning.component';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-bulk-approval',\r\n    templateUrl: './trade-bulk-approval.component.html',\r\n    styleUrls: ['./trade-bulk-approval.component.scss'],\r\n})\r\nexport class TradeBulkApprovalComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('contractSelection') contractSelection: GroupFunctionContractsComponent;\r\n    @ViewChild('groupFunctionWarning') groupFunctionWarning: GroupFunctionWarningComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    company: string;\r\n    bulkApprovalFormGroup: FormGroup;\r\n\r\n    selectedApprovalList: ContractsForBulkFunctions[];\r\n    interCoTradeList: ContractsForBulkFunctions[] = [];\r\n    lockedTrades: ContractsForBulkFunctions[] = [];\r\n    ChildTradeForSectionTrades: ContractsForBulkFunctions[] = [];\r\n    childFilterList: number[] = [];\r\n    subscriptions: Subscription[] = [];\r\n    totalContractList: ContractsForBulkFunctions[] = [];\r\n    ChildTradesList: ChildTradeForSection[] = [];\r\n    isContractsNextDisabled: boolean;\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        public dialog: MatDialog,\r\n        protected tradingService: TradingService,\r\n        protected lockService: LockService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.bulkApprovalFormGroup = this.formBuilder.group({\r\n            contractSelection: this.contractSelection.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.contractSelection);\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n    }\r\n\r\n    onPreviousButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/groupfunctions']);\r\n    }\r\n\r\n    onApproveButtonCliked() {\r\n        let selectedList: ContractsForBulkFunctions[];\r\n        selectedList = this.getSelectedApprovalList();\r\n        this.lockedTrades = [];\r\n        this.lockedTrades = selectedList.filter((id) => id.isLocked === true);\r\n        selectedList = selectedList.filter((id) => id.isLocked === false);\r\n        this.selectedApprovalList = [];\r\n        this.totalContractList = [];\r\n        this.selectedApprovalList = selectedList;\r\n        const allTradeRows = this.contractSelection.totalContractList as ContractsForBulkFunctions[];\r\n        this.totalContractList = allTradeRows;\r\n        this.childFilterList = [];\r\n        let childCountCheck = 0;\r\n        this.interCoTradeList = [];\r\n        let chkSubscribeState = false;\r\n        if (selectedList.length > 0) {\r\n            selectedList.forEach((selectedelement, index) => {\r\n                this.subscriptions.push(\r\n                    this.tradingService.getChildTradesForSection(selectedelement.sectionId)\r\n                        .subscribe((data) => {\r\n                            childCountCheck++;\r\n                            if (data) {\r\n                                let checkInterco: ChildTradeForSection[] = [];\r\n                                const ChildTradesParentList = data.value as ChildTradeForSection[];\r\n                                checkInterco = (ChildTradesParentList.filter((item) => item.sectionID === selectedelement.sectionId));\r\n                                if (!checkInterco[0].isInterCo) {\r\n                                    const childCount = (ChildTradesParentList.filter((item) => item.sectionID !== selectedelement.sectionId)).length;\r\n                                    if (childCount > 0) {\r\n                                        this.ChildTradesList = (ChildTradesParentList.filter((item) => item.sectionID !== selectedelement.sectionId));\r\n                                        let checkCount = 0;\r\n                                        for (let k = 0; k < this.ChildTradesList.length; k++) {\r\n                                            chkSubscribeState = true;\r\n                                            this.subscriptions.push(this.lockService.isLockedContract(this.ChildTradesList[k].sectionID).subscribe((lock: IsLocked) => {\r\n                                                checkCount++;\r\n                                                if (checkCount === childCount) {\r\n                                                    chkSubscribeState = false;\r\n                                                } else {\r\n                                                    chkSubscribeState = true;\r\n                                                }\r\n                                                if (!lock.isLocked && !this.ChildTradesList[k].isInterCo) {\r\n                                                    this.childFilterList.push(this.ChildTradesList[k].sectionID);\r\n                                                    if ((selectedList.length === (childCountCheck)) && (checkCount === childCount)) {\r\n                                                        this.openDialog();\r\n                                                    }\r\n                                                } else {\r\n                                                    if ((selectedList.length === (childCountCheck)) && (checkCount === childCount)) {\r\n                                                        this.openDialog();\r\n                                                    }\r\n                                                }\r\n                                            }));\r\n\r\n                                        }\r\n\r\n                                    } else {\r\n                                        if (selectedList.length === (childCountCheck) && (chkSubscribeState === false)) {\r\n                                            this.openDialog();\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    const interCo = this.totalContractList.filter((id) => id.sectionId === checkInterco[0].sectionID);\r\n                                    interCo.forEach((element) => {\r\n                                        this.interCoTradeList.push(element);\r\n                                        this.selectedApprovalList = this.selectedApprovalList.filter((id) => id.sectionId !== element.sectionId);\r\n                                    });\r\n                                    if (selectedList.length === (childCountCheck)) {\r\n                                        this.openDialog();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }));\r\n            });\r\n        } else {\r\n            this.openDialog();\r\n        }\r\n    }\r\n\r\n    openDialog() {\r\n        this.ChildTradeForSectionTrades = [];\r\n        const childList = this.childFilterList;\r\n        childList.forEach((element) => {\r\n            const childTrades = (this.totalContractList.filter((item) => item.sectionId === element));\r\n            childTrades.forEach((childelement) => {\r\n                this.ChildTradeForSectionTrades.push(childelement);\r\n            });\r\n        });\r\n        this.ChildTradeForSectionTrades.forEach((childelement) => {\r\n            this.selectedApprovalList.push(childelement);\r\n        });\r\n        this.selectedApprovalList = this.selectedApprovalList.filter((el, i, a) => i === a.indexOf(el));\r\n\r\n        const openDialog = this.dialog.open(BulkApprovalDialogComponent, {\r\n            data: {\r\n                company: this.company,\r\n                tradeSelectedList: this.selectedApprovalList,\r\n                lockedTrades: this.lockedTrades,\r\n                interCoList: this.interCoTradeList,\r\n            },\r\n        });\r\n    }\r\n\r\n    getSelectedApprovalList() {\r\n        let selectedApprovalList: ContractsForBulkFunctions[];\r\n        this.formComponents.forEach((comp) => {\r\n            selectedApprovalList = comp.populateEntity(selectedApprovalList);\r\n        });\r\n        return selectedApprovalList;\r\n    }\r\n\r\n    isContractSelected(contractSelected: boolean) {\r\n        this.isContractsNextDisabled = contractSelected;\r\n    }\r\n}\r\n","module.exports = \"<div>\\r\\n    <mat-form-field>\\r\\n        <input matInput\\r\\n               [formControl]=\\\"popUpStatusDisplayCtrl\\\"\\r\\n               readonly>\\r\\n        <mat-icon matSuffix\\r\\n                  *ngIf=\\\"ispopUpcellRendererLoaded()\\\"\\r\\n                  (click)=\\\"onExploreClicked($event)\\\">launch</mat-icon>\\r\\n\\r\\n    </mat-form-field>\\r\\n</div>\"","module.exports = \".launch-icons {\\n  cursor: pointer; }\\n\\nmat-form-field.ng-valid mat-icon, atlas-commodity-input.ng-valid mat-icon {\\n  color: grey; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { PopUpDialogComponentComponent } from '../dialog/pop-up-dialog-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'atlas-ag-grid-pop-up',\r\n    templateUrl: './ag-grid-pop-up.component.html',\r\n    styleUrls: ['./ag-grid-pop-up.component.scss']\r\n})\r\n\r\nexport class AgGridPopUpComponent extends BaseFormComponent implements ICellRendererAngularComp {\r\n    data: any;\r\n    params: any;\r\n\r\n    popUpStatusDisplayCtrl = new AtlasFormControl('PopUpStatusDisplay');\r\n    ngOnInit() {\r\n\r\n\r\n    }\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.data = params.value;\r\n        this.popUpStatusDisplayCtrl.patchValue(this.data);\r\n    }\r\n\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n\r\n    ispopUpcellRendererLoaded() {\r\n        if (this.params.value) {\r\n            if (this.params.data.contractLabel[0] == 'Contracts available for closure') {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n        else { return false; }\r\n    }\r\n\r\n\r\n    onExploreClicked() {\r\n        let link;\r\n        if (this.params.data) {\r\n            if (this.params.data.status === 'Cost accrual') {\r\n                link = `${this.params.context.componentParent.companyManager.getCurrentCompanyId()}/trades/display/${this.params.data.sectionId}/1`;\r\n                window.open(link, '_blank');\r\n            }\r\n            else if (this.params.data.status === 'Invoices not cash matched') {\r\n                link = `${this.params.context.componentParent.companyManager.getCurrentCompanyId()}/trades/display/${this.params.data.sectionId}/5`;\r\n                window.open(link, '_blank');\r\n            }\r\n            else if (this.params.data.status === 'Cargo accrual') {\r\n                link = `${this.params.context.componentParent.companyManager.getCurrentCompanyId()}/trades/display/${this.params.data.sectionId}/5`;\r\n                window.open(link, '_blank');\r\n            }\r\n            else if (this.params.data.status === 'Invoices not posted') {\r\n                link = `${this.params.context.componentParent.companyManager.getCurrentCompanyId()}/trades/display/${this.params.data.sectionId}/5`;\r\n                window.open(link, '_blank');\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n        protected router: Router,\r\n        protected dialog: MatDialog) {\r\n        super(formConfigurationProvider);\r\n        this.formGroup = this.formBuilder.group({\r\n            popUpStatusDisplayCtrl: this.popUpStatusDisplayCtrl\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <div ag-grid=\\\"bulkClosureGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"bulkClosureGridRows\\\"\\r\\n                         [gridOptions]=\\\"bulkClosureGridOptions\\\"\\r\\n                         [columnDefs]=\\\"bulkClosureGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [singleClickClosure]=true\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         [treeData]=\\\"true\\\"\\r\\n                         [animateRows]=\\\"true\\\"\\r\\n                         [groupDefaultExpanded]=\\\"groupDefaultExpanded\\\"\\r\\n                         [getDataPath]=\\\"getDataPath\\\"\\r\\n                         [autoGroupColumnDef]=\\\"autoGroupColumnDef\\\"\\r\\n                         (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                         [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                         (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"28\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=32>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"::ng-deep .ag-row-group-indent-0 {\\n  font-weight: bold; }\\n\\n::ng-deep .status-background-color {\\n  color: #635e5e !important; }\\n\"","import { Component, OnInit, Output, EventEmitter, HostListener } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router, ChildActivationEnd } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { TradePropertyPrivilege } from '../../../../../shared/entities/trade-property-privilege.entity';\r\nimport { Trader } from '../../../../../shared/entities/trader.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { ContractsForBulkFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { AgGridPopUpComponent } from '../ag-grid-pop-up/ag-grid-pop-up.component';\r\nimport { AgGridHyperlinkComponent } from '../../../../../shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { PostingStatus } from '../../../../../shared/enums/posting-status.enum';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { ContractsForBulkClosureFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-closure-functions';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-closure-matrix',\r\n    templateUrl: './bulk-closure-matrix.component.html',\r\n    styleUrls: ['./bulk-closure-matrix.component.scss']\r\n})\r\n\r\nexport class BulkClosureMatrixComponent extends BaseFormComponent implements OnInit {\r\n    company: string;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    bulkClosureGridColumns: agGrid.ColDef[];\r\n    bulkClosureGridOptions: agGrid.GridOptions = {};\r\n    bulkClosureGridRows = [];\r\n    bulkEditGridRows: ContractsForBulkFunctions[];\r\n    contractsToedit: ContractsForBulkFunctions[];\r\n    selectContractStatusValue: ContractsForBulkFunctions[];\r\n    allContractStatusValue: ContractsForBulkFunctions[];\r\n    traders: Trader[] = [];\r\n    masterdata: MasterData;\r\n    columnDefs: agGrid.ColDef[];\r\n    copyselectedallocatedIds = [];\r\n    companyConfiguration: Company;\r\n    selectedallocatedIds = [];\r\n    allocateClosureContract = [];\r\n    duplicateAllocateClosureContract = [];\r\n    selectedAllocatedValue = [];\r\n    allocatedSection = [];\r\n    tooltipMessage: string = '';\r\n    availableClosure: string = \"Contracts available for closure\";\r\n    riskyClosure: string = \"Contracts risky for closure\";\r\n    unavailableClosure: string = \"Contracts unavailable for closure\";\r\n    defaultDate = 'Mon Jan 01 0001';\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n    };\r\n    gridComponents = {\r\n    };\r\n    destroy$ = new Subject();\r\n    selectedContractsClosureForBulkFunctions: ContractsForBulkClosureFunctions[];\r\n    isContractClosureSelected: boolean = false;\r\n    rowData: any;\r\n    groupDefaultExpanded: any;\r\n    getDataPath: any;\r\n    autoGroupColumnDef: any;\r\n    privileges: TradePropertyPrivilege;\r\n    @Output() readonly contractClosureSelected = new EventEmitter<boolean>();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private gridService: AgGridService,\r\n        private uiService: UiService,\r\n        private agGridService: AgGridService,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        private route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected router: Router,\r\n        protected lockService: LockService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected tradingService: TradingService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.initializeGridColumns();\r\n        this.initializeGridRows();\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.bulkClosureGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n\r\n        this.bulkClosureGridColumns =\r\n            [\r\n                {\r\n                    headerName: 'Status',\r\n                    field: 'status',\r\n                    colId: 'status',\r\n                    cellClass: 'status-background-color',\r\n\r\n                    cellStyle: (params) => {\r\n                        if (params.value) {\r\n\r\n                            if (params.data.contractLabel[0] == 'Contracts available for closure') {\r\n                            }\r\n                            if (params.data.contractLabel[0] == 'Contracts risky for closure') {\r\n                                return { backgroundColor: '#fff2ec', borderRadius: '2px !important;' };\r\n                            }\r\n                            if (params.data.contractLabel[0] == 'Contracts unavailable for closure') {\r\n                                return { backgroundColor: 'hsl(0, 70%, 82%)', borderRadius: '2px !important;' };\r\n                            }\r\n                        }\r\n\r\n                    },\r\n                    cellRendererFramework: AgGridPopUpComponent,\r\n                    cellRendererParams: {\r\n                        context: {\r\n                            componentParent: this,\r\n                        },\r\n                    },\r\n\r\n                    tooltip: (params) => {\r\n                        if (params.data) {\r\n                            if (params.data.status === 'Cost accrual') {\r\n                                this.tooltipMessage = 'link to ‘cost’ tab';\r\n                            }\r\n                            else if (params.data.status === 'Invoices not cash matched') {\r\n                                this.tooltipMessage = 'link to ‘Invoice marking’ tab';\r\n                            }\r\n                            else if (params.data.status === 'Cargo accrual') {\r\n                                this.tooltipMessage = 'link to ‘Invoice marking’ tab';\r\n                            }\r\n                            else if (params.data.status === 'Invoices not posted') {\r\n                                this.tooltipMessage = 'link to ‘Invoice marking’ tab';\r\n                            }\r\n                            else if (params.data.status === 'Unrealized physicals') {\r\n                                this.tooltipMessage = 'Make the Qty 0 or change the Invoice type to close it';\r\n                            }\r\n                            else if (params.data.contractLabel[0] === 'Contracts available for closure') {\r\n                                this.tooltipMessage = '';\r\n                            }\r\n                            else if (params.data.contractLabel[0] === 'Contracts risky for closure') {\r\n                                this.tooltipMessage = '';\r\n                            }\r\n                            else if (params.data.contractLabel[0] === 'Contracts unavailable for closure') {\r\n                                this.tooltipMessage = '';\r\n                            }\r\n                            return this.tooltipMessage;\r\n                        }\r\n\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Net accrual/P&L impact ',\r\n                    field: 'netaccrual',\r\n                    colId: 'netaccrual',\r\n                },\r\n                {\r\n                    headerName: '%Invoice ',\r\n                    field: 'invoice',\r\n                    colId: 'invoice',\r\n                },\r\n                {\r\n                    headerName: '',\r\n                    field: 'sectionId',\r\n                    colId: 'sectionId',\r\n                    hide: true,\r\n                },\r\n            ];\r\n    }\r\n\r\n    onColumnVisibilityChanged(event: any) {\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        let obj;\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        const allocatedRows = selectedRows;\r\n        this.isContractClosureSelected = selectedRows.length > 0;\r\n        this.contractClosureSelected.emit(this.isContractClosureSelected);\r\n        this.gridApi.forEachNode((node) => {\r\n            if (node.parent.key === 'Contracts unavailable for closure') {\r\n                node.setSelected(false);\r\n                node.selectable = false;\r\n                Object.values(node.childrenMapped).forEach((childNode) => {\r\n                    childNode.selectable = node.isSelected();\r\n                    node.selectable = false;\r\n                });\r\n            }\r\n            else if (node.key === 'Contracts unavailable for closure') {\r\n                node.setSelected(false);\r\n                node.selectable = false;\r\n            }\r\n            else if (node.isSelected()) {\r\n                if (node.allChildrenCount) {\r\n                    Object.values(node.childrenMapped).forEach((childNode) => {\r\n                        childNode.setSelected(true)\r\n                    });\r\n                }\r\n                else {\r\n                    node.setSelected(true)\r\n                }\r\n            }\r\n            else {\r\n                if (node.allChildrenCount) {\r\n                    Object.values(node.childrenMapped).forEach((childNode) => {\r\n                        if (!childNode.isSelected()) {\r\n                            childNode.setSelected(false)\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    node.setSelected(false)\r\n                }\r\n            }\r\n        });\r\n\r\n        this.gridApi.refreshCells(event.data);\r\n\r\n        allocatedRows.forEach((contract) => {\r\n            if (contract.contractLabel[2]) {\r\n                let element = this.selectContractStatusValue.find((section) =>\r\n                    section.contractLabel == contract.contractLabel[2]);\r\n                if (element) {\r\n                    obj = {\r\n                        contractLabel: ['', element.contractLabel, contract.contractLabel[1]],\r\n                        status: null,\r\n                        netaccrual: element.netAccrual,\r\n                        invoice: element.invoicePercent,\r\n                        sectionId: element.sectionId\r\n                    };\r\n                    selectedRows.push(obj);\r\n                }\r\n            }\r\n        });\r\n        this.selectedContractsClosureForBulkFunctions = selectedRows;\r\n    }\r\n\r\n    initializeGridRows() {\r\n        let allocatedContractsList = [];\r\n        allocatedContractsList = this.allContractStatusValue;\r\n        this.selectedAllocatedValue = this.selectContractStatusValue;\r\n        this.bulkClosureGridRows = [];\r\n        if (this.selectedAllocatedValue) {\r\n            this.selectedAllocatedValue.forEach((contract) => {\r\n                let postingCount = 0;\r\n                let costPostingCount = 0;\r\n                let redTradesPostingCount = 0;\r\n                let cashMatchCount = 0;\r\n                let costCashMatchCount = 0;\r\n                let isLock = false;\r\n                let isRedLock = false;\r\n                let isRedTrades = false;\r\n                let lockMessage = '';\r\n                let unInvoiceCost = null;\r\n                let netAccrualVal = null;\r\n                if (contract.invoices) {\r\n                    contract.invoices.forEach((invoice) => {\r\n                        if (invoice.postingStatusId !== PostingStatus.Posted) {\r\n                            postingCount = postingCount + 1;\r\n                        }\r\n                        if (invoice.cashMatchPercentage !== 100) {\r\n                            cashMatchCount = cashMatchCount + 1;\r\n                        }\r\n                    });\r\n                }\r\n                if (contract.costs && contract.costs.length > 0) {\r\n                    unInvoiceCost = contract.costs.filter((cost) =>\r\n                        cost.invoiceStatus === InvoicingStatus.Uninvoiced ||\r\n                        cost.invoiceStatus === InvoicingStatus.FinalInvoiceRequired ||\r\n                        cost.invoiceStatus === InvoicingStatus.Finalized);\r\n                    contract.costs.forEach((cost) => {\r\n                        if (cost.postingStatusId !== PostingStatus.Posted) {\r\n                            costPostingCount = costPostingCount + 1;\r\n                        }\r\n                        if (cost.cashMatchPercentage !== 100) {\r\n                            costCashMatchCount = costCashMatchCount + 1;\r\n                        }\r\n                    });\r\n                }\r\n                this.lockService.isLockedContract(contract.sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        isLock = true;\r\n                        lockMessage = lock.message;\r\n                    }\r\n                    else {\r\n                        this.subscriptions.push(this.lockService.lockContract(contract.sectionId, LockFunctionalContext.TradeBulkClosure).subscribe((res) => { }));\r\n                    }\r\n                });\r\n                let selectedContracts = this.selectedAllocatedValue.find((section) =>\r\n                    section.contractLabel == contract.allocatedContractReference);\r\n                if (selectedContracts) {\r\n                    this.lockService.isLockedContract(selectedContracts.sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                        if (lock.isLocked) {\r\n                            isRedLock = true;\r\n                        }\r\n                    });\r\n                    selectedContracts.invoices.forEach((invoice) => {\r\n                        if (invoice.postingStatusId !== PostingStatus.Posted) {\r\n                            redTradesPostingCount = redTradesPostingCount + 1;\r\n                        }\r\n                    });\r\n                    if (contract.contractTypeId === ContractTypes.Sale &&\r\n                        (isRedLock || selectedContracts.blDate === null || selectedContracts.blDate === this.defaultDate ||\r\n                            selectedContracts.invoicingStatusId === InvoicingStatus.Uninvoiced ||\r\n                            selectedContracts.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired ||\r\n                            (selectedContracts.invoicingStatusId === InvoicingStatus.Finalized && redTradesPostingCount > 0)) && selectedContracts.costs.length === 0) {\r\n                        isRedTrades = true;\r\n                    }\r\n                }\r\n\r\n                if (contract.quantity === 0 || contract.isTradeCancelled === \"Cancelled\" ||\r\n                    (contract.invoicingStatusId === InvoicingStatus.Finalized && postingCount === 0 &&\r\n                        cashMatchCount === 0) && !isLock) {\r\n                    let obj;\r\n                    if (contract.costs.length > 0) {\r\n                        if (unInvoiceCost !== null && unInvoiceCost.length === 0) {\r\n                            if (contract.allocatedContractReference && allocatedContractsList.find((section) =>\r\n                                section.contractLabel == contract.allocatedContractReference)) {\r\n                                if (contract.contractTypeId === ContractTypes.Purchase || !selectedContracts ||\r\n                                    isRedTrades) {\r\n                                    let element = allocatedContractsList.find((section) =>\r\n                                        section.contractLabel == contract.allocatedContractReference);\r\n                                    if (element) {\r\n                                        obj = {\r\n                                            contractLabel: [this.availableClosure]\r\n                                        };\r\n                                        this.bulkClosureGridRows.push(obj);\r\n                                        obj = {\r\n                                            contractLabel: [this.availableClosure, contract.contractLabel],\r\n                                            status: null,\r\n                                            netaccrual: netAccrualVal,\r\n                                            invoice: contract.invoicePercent,\r\n                                            sectionId: contract.sectionId\r\n                                        };\r\n                                        this.bulkClosureGridRows.push(obj);\r\n                                        obj = {\r\n                                            contractLabel: [this.availableClosure, contract.contractLabel,\r\n                                            element.contractLabel],\r\n                                            status: null,\r\n                                            netaccrual: netAccrualVal,\r\n                                            invoice: element.invoicePercent,\r\n                                            sectionId: element.sectionId\r\n                                        };\r\n                                        this.bulkClosureGridRows.push(obj);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                obj = {\r\n                                    contractLabel: [this.availableClosure]\r\n                                };\r\n                                this.bulkClosureGridRows.push(obj);\r\n                                obj = {\r\n                                    contractLabel: [this.availableClosure, contract.contractLabel],\r\n                                    status: null,\r\n                                    netaccrual: netAccrualVal,\r\n                                    invoice: contract.invoicePercent,\r\n                                    sectionId: contract.sectionId\r\n                                };\r\n                                this.bulkClosureGridRows.push(obj);\r\n                            }\r\n                        }\r\n                        else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&\r\n                            contract.blDate !== this.defaultDate) || (contract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                                postingCount === 0 && cashMatchCount > 0) && !isLock) {\r\n                            let obj, riskyClosureStatus;\r\n                            if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&\r\n                                contract.blDate !== this.defaultDate) && costPostingCount > 0) {\r\n                                riskyClosureStatus = 'Cost accrual';\r\n                                contract.costs.sort((a, b) => new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime());\r\n                                netAccrualVal = contract.costs[0].netAccrual + ' ' + contract.costs[0].currencyCode;\r\n                            }\r\n                            else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && costPostingCount === 0 &&\r\n                                costCashMatchCount > 0) || (contract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                                    postingCount === 0 && cashMatchCount > 0)) {\r\n                                riskyClosureStatus = 'Invoices not cash matched';\r\n                            }\r\n                            if (contract.allocatedContractReference && allocatedContractsList.find((section) =>\r\n                                section.contractLabel == contract.allocatedContractReference)) {\r\n                                if (contract.contractTypeId === ContractTypes.Purchase || !selectedContracts ||\r\n                                    isRedTrades) {\r\n                                    let element = allocatedContractsList.find((section) =>\r\n                                        section.contractLabel == contract.allocatedContractReference);\r\n                                    if (element) {\r\n                                        let allocatedPostingCount = 0;\r\n                                        let allocatedCostPostingCount = 0;\r\n                                        let allocatedCashMatchCount = 0;\r\n                                        let allocatedCostCashMatchCount = 0;\r\n                                        let allocatedIsLock = false;\r\n                                        let allocatedLockMessage = '';\r\n                                        let allocatedUnInvoiceCost = null;\r\n                                        let allocatedNetAccrualVal = null;\r\n                                        let allocatedClosureStatus;\r\n                                        let allocatedContractList = [];\r\n                                        allocatedContractList = this.selectContractStatusValue;\r\n                                        let allocatedContract =\r\n                                            allocatedContractList.find((contract) =>\r\n                                                contract.contractLabel == element.contractLabel\r\n                                            );\r\n                                        if (allocatedContract.invoices) {\r\n                                            allocatedContract.invoices.forEach((invoice) => {\r\n                                                if (invoice.postingStatusId !== PostingStatus.Posted) {\r\n                                                    allocatedPostingCount = allocatedPostingCount + 1;\r\n                                                }\r\n                                                if (invoice.cashMatchPercentage !== 100) {\r\n                                                    allocatedCashMatchCount = allocatedCashMatchCount + 1;\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                        if (allocatedContract.costs && allocatedContract.costs.length > 0) {\r\n                                            allocatedUnInvoiceCost = allocatedContract.costs.filter((cost) =>\r\n                                                cost.invoiceStatus === InvoicingStatus.Uninvoiced ||\r\n                                                cost.invoiceStatus === InvoicingStatus.FinalInvoiceRequired ||\r\n                                                cost.invoiceStatus === InvoicingStatus.Finalized);\r\n                                            allocatedContract.costs.forEach((cost) => {\r\n                                                if (cost.postingStatusId !== PostingStatus.Posted) {\r\n                                                    allocatedCostPostingCount = allocatedCostPostingCount + 1;\r\n                                                }\r\n                                                if (cost.cashMatchPercentage !== 100) {\r\n                                                    allocatedCostCashMatchCount = allocatedCostCashMatchCount + 1;\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                        this.lockService.isLockedContract(allocatedContract.sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                                            if (lock.isLocked) {\r\n                                                allocatedIsLock = true;\r\n                                                allocatedLockMessage = lock.message;\r\n                                            }\r\n                                            else {\r\n                                                this.subscriptions.push(this.lockService.lockContract(allocatedContract.sectionId, LockFunctionalContext.TradeBulkClosure).subscribe((res) => { }));\r\n                                            }\r\n                                        });\r\n                                        if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract.blDate !== null &&\r\n                                            allocatedContract.blDate !== this.defaultDate) || (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                                                allocatedPostingCount === 0 && allocatedCashMatchCount > 0) && !allocatedIsLock) {\r\n                                            if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract.blDate !== null &&\r\n                                                allocatedContract.blDate !== this.defaultDate) && allocatedCostPostingCount > 0) {\r\n                                                allocatedClosureStatus = 'Cost accrual';\r\n                                                allocatedContract.costs.sort((a, b) => new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime());\r\n                                                allocatedNetAccrualVal = allocatedContract.costs[0].netAccrual + ' ' + allocatedContract.costs[0].currencyCode;\r\n                                            }\r\n                                            else if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedCostPostingCount === 0 &&\r\n                                                allocatedCostCashMatchCount > 0) || (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                                                    allocatedPostingCount === 0 && allocatedCashMatchCount > 0)) {\r\n                                                allocatedClosureStatus = 'Invoices not cash matched';\r\n                                            }\r\n                                        }\r\n                                        else if (allocatedIsLock || allocatedContract.blDate === null || allocatedContract.blDate === this.defaultDate ||\r\n                                            allocatedContract.invoicingStatusId === InvoicingStatus.Uninvoiced ||\r\n                                            allocatedContract.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired ||\r\n                                            (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized && allocatedPostingCount > 0)) {\r\n                                            if (allocatedIsLock) {\r\n                                                allocatedClosureStatus = allocatedLockMessage;\r\n                                            }\r\n                                            else if (allocatedContract.blDate === null || allocatedContract.blDate === this.defaultDate) {\r\n                                                allocatedClosureStatus = 'Unrealized physicals';\r\n                                            }\r\n                                            else if (allocatedContract.invoicingStatusId === InvoicingStatus.Uninvoiced ||\r\n                                                allocatedContract.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired) {\r\n                                                allocatedClosureStatus = 'Cargo accrual';\r\n                                                allocatedNetAccrualVal = allocatedContract.netAccrual + ' ' + allocatedContract.currencyCode;\r\n                                            }\r\n                                            else if (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized && allocatedPostingCount > 0) {\r\n                                                allocatedClosureStatus = 'Invoices not posted';\r\n                                            }\r\n                                        }\r\n                                        obj = {\r\n                                            contractLabel: [this.riskyClosure]\r\n                                        };\r\n                                        this.bulkClosureGridRows.push(obj);\r\n                                        obj = {\r\n                                            contractLabel: [this.riskyClosure, contract.contractLabel],\r\n                                            status: riskyClosureStatus,\r\n                                            netaccrual: netAccrualVal,\r\n                                            invoice: contract.invoicePercent,\r\n                                            sectionId: contract.sectionId\r\n                                        };\r\n                                        this.bulkClosureGridRows.push(obj);\r\n                                        obj = {\r\n                                            contractLabel: [this.riskyClosure, contract.contractLabel,\r\n                                            element.contractLabel],\r\n                                            status: allocatedClosureStatus,\r\n                                            netaccrual: allocatedNetAccrualVal,\r\n                                            invoice: allocatedContract.invoicePercent,\r\n                                            sectionId: allocatedContract.sectionId\r\n                                        };\r\n                                        this.bulkClosureGridRows.push(obj);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                obj = {\r\n                                    contractLabel: [this.riskyClosure]\r\n                                };\r\n                                this.bulkClosureGridRows.push(obj);\r\n                                obj = {\r\n                                    contractLabel: [this.riskyClosure, contract.contractLabel],\r\n                                    status: riskyClosureStatus,\r\n                                    netaccrual: netAccrualVal,\r\n                                    invoice: contract.invoicePercent,\r\n                                    sectionId: contract.sectionId\r\n                                };\r\n                                this.bulkClosureGridRows.push(obj);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (contract.allocatedContractReference && allocatedContractsList.find((section) =>\r\n                            section.contractLabel == contract.allocatedContractReference)) {\r\n                            if (contract.contractTypeId === ContractTypes.Purchase || !selectedContracts ||\r\n                                isRedTrades) {\r\n                                let element = allocatedContractsList.find((section) =>\r\n                                    section.contractLabel == contract.allocatedContractReference);\r\n                                if (element) {\r\n                                    obj = {\r\n                                        contractLabel: [this.availableClosure]\r\n                                    };\r\n                                    this.bulkClosureGridRows.push(obj);\r\n                                    obj = {\r\n                                        contractLabel: [this.availableClosure, contract.contractLabel],\r\n                                        status: null,\r\n                                        netaccrual: netAccrualVal,\r\n                                        invoice: contract.invoicePercent,\r\n                                        sectionId: contract.sectionId\r\n                                    };\r\n                                    this.bulkClosureGridRows.push(obj);\r\n                                    obj = {\r\n                                        contractLabel: [this.availableClosure, contract.contractLabel,\r\n                                        element.contractLabel],\r\n                                        status: null,\r\n                                        netaccrual: netAccrualVal,\r\n                                        invoice: element.invoicePercent,\r\n                                        sectionId: element.sectionId\r\n                                    };\r\n                                    this.bulkClosureGridRows.push(obj);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            obj = {\r\n                                contractLabel: [this.availableClosure]\r\n                            };\r\n                            this.bulkClosureGridRows.push(obj);\r\n                            obj = {\r\n                                contractLabel: [this.availableClosure, contract.contractLabel],\r\n                                status: null,\r\n                                netaccrual: netAccrualVal,\r\n                                invoice: contract.invoicePercent,\r\n                                sectionId: contract.sectionId\r\n                            };\r\n                            this.bulkClosureGridRows.push(obj);\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n                else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&\r\n                    contract.blDate !== this.defaultDate) || (contract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                        postingCount === 0 && cashMatchCount > 0) && !isLock) {\r\n                    let obj, riskyClosureStatus;\r\n                    if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&\r\n                        contract.blDate !== this.defaultDate) && costPostingCount > 0) {\r\n                        riskyClosureStatus = 'Cost accrual';\r\n                        contract.costs.sort((a, b) => new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime());\r\n                        netAccrualVal = contract.costs[0].netAccrual + ' ' + contract.costs[0].currencyCode;\r\n                    }\r\n                    else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && costPostingCount === 0 &&\r\n                        costCashMatchCount > 0) || (contract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                            postingCount === 0 && cashMatchCount > 0)) {\r\n                        riskyClosureStatus = 'Invoices not cash matched';\r\n                    }\r\n                    if (contract.allocatedContractReference && allocatedContractsList.find((section) =>\r\n                        section.contractLabel == contract.allocatedContractReference)) {\r\n                        if (contract.contractTypeId === ContractTypes.Purchase || !selectedContracts ||\r\n                            isRedTrades) {\r\n                            let element = allocatedContractsList.find((section) =>\r\n                                section.contractLabel == contract.allocatedContractReference);\r\n                            if (element) {\r\n                                let allocatedPostingCount = 0;\r\n                                let allocatedCostPostingCount = 0;\r\n                                let allocatedCashMatchCount = 0;\r\n                                let allocatedCostCashMatchCount = 0;\r\n                                let allocatedIsLock = false;\r\n                                let allocatedLockMessage = '';\r\n                                let allocatedUnInvoiceCost = null;\r\n                                let allocatedNetAccrualVal = null;\r\n                                let allocatedClosureStatus;\r\n                                let allocatedContractList = [];\r\n                                allocatedContractList = this.selectContractStatusValue;\r\n                                let allocatedContract =\r\n                                    allocatedContractList.find((contract) =>\r\n                                        contract.contractLabel == element.contractLabel\r\n                                    );\r\n                                if (allocatedContract.invoices) {\r\n                                    allocatedContract.invoices.forEach((invoice) => {\r\n                                        if (invoice.postingStatusId !== PostingStatus.Posted) {\r\n                                            allocatedPostingCount = allocatedPostingCount + 1;\r\n                                        }\r\n                                        if (invoice.cashMatchPercentage !== 100) {\r\n                                            allocatedCashMatchCount = allocatedCashMatchCount + 1;\r\n                                        }\r\n                                    });\r\n                                }\r\n                                if (allocatedContract.costs && allocatedContract.costs.length > 0) {\r\n                                    allocatedUnInvoiceCost = allocatedContract.costs.filter((cost) =>\r\n                                        cost.invoiceStatus === InvoicingStatus.Uninvoiced ||\r\n                                        cost.invoiceStatus === InvoicingStatus.FinalInvoiceRequired ||\r\n                                        cost.invoiceStatus === InvoicingStatus.Finalized);\r\n                                    allocatedContract.costs.forEach((cost) => {\r\n                                        if (cost.postingStatusId !== PostingStatus.Posted) {\r\n                                            allocatedCostPostingCount = allocatedCostPostingCount + 1;\r\n                                        }\r\n                                        if (cost.cashMatchPercentage !== 100) {\r\n                                            allocatedCostCashMatchCount = allocatedCostCashMatchCount + 1;\r\n                                        }\r\n                                    });\r\n                                }\r\n                                this.lockService.isLockedContract(allocatedContract.sectionId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                                    if (lock.isLocked) {\r\n                                        allocatedIsLock = true;\r\n                                        allocatedLockMessage = lock.message;\r\n                                    }\r\n                                    else {\r\n                                        this.subscriptions.push(this.lockService.lockContract(allocatedContract.sectionId, LockFunctionalContext.TradeBulkClosure).subscribe((res) => { }));\r\n                                    }\r\n                                });\r\n                                if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract.blDate !== null &&\r\n                                    allocatedContract.blDate !== this.defaultDate) || (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                                        allocatedPostingCount === 0 && allocatedCashMatchCount > 0) && !allocatedIsLock) {\r\n                                    if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract.blDate !== null &&\r\n                                        allocatedContract.blDate !== this.defaultDate) && allocatedCostPostingCount > 0) {\r\n                                        allocatedClosureStatus = 'Cost accrual';\r\n                                        allocatedContract.costs.sort((a, b) => new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime());\r\n                                        allocatedNetAccrualVal = allocatedContract.costs[0].netAccrual + ' ' + allocatedContract.costs[0].currencyCode;\r\n                                    }\r\n                                    else if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedCostPostingCount === 0 &&\r\n                                        allocatedCostCashMatchCount > 0) || (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized &&\r\n                                            allocatedPostingCount === 0 && allocatedCashMatchCount > 0)) {\r\n                                        allocatedClosureStatus = 'Invoices not cash matched';\r\n                                    }\r\n                                }\r\n                                else if (allocatedIsLock || allocatedContract.blDate === null || allocatedContract.blDate === this.defaultDate ||\r\n                                    allocatedContract.invoicingStatusId === InvoicingStatus.Uninvoiced ||\r\n                                    allocatedContract.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired ||\r\n                                    (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized && allocatedPostingCount > 0)) {\r\n                                    if (allocatedIsLock) {\r\n                                        allocatedClosureStatus = allocatedLockMessage;\r\n                                    }\r\n                                    else if (allocatedContract.blDate === null || allocatedContract.blDate === this.defaultDate) {\r\n                                        allocatedClosureStatus = 'Unrealized physicals';\r\n                                    }\r\n                                    else if (allocatedContract.invoicingStatusId === InvoicingStatus.Uninvoiced ||\r\n                                        allocatedContract.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired) {\r\n                                        allocatedClosureStatus = 'Cargo accrual';\r\n                                        allocatedNetAccrualVal = allocatedContract.netAccrual + ' ' + allocatedContract.currencyCode;\r\n                                    }\r\n                                    else if (allocatedContract.invoicingStatusId === InvoicingStatus.Finalized && allocatedPostingCount > 0) {\r\n                                        allocatedClosureStatus = 'Invoices not posted';\r\n                                    }\r\n                                }\r\n                                obj = {\r\n                                    contractLabel: [this.riskyClosure]\r\n                                };\r\n                                this.bulkClosureGridRows.push(obj);\r\n                                obj = {\r\n                                    contractLabel: [this.riskyClosure, contract.contractLabel],\r\n                                    status: riskyClosureStatus,\r\n                                    netaccrual: netAccrualVal,\r\n                                    invoice: contract.invoicePercent,\r\n                                    sectionId: contract.sectionId\r\n                                };\r\n                                this.bulkClosureGridRows.push(obj);\r\n                                obj = {\r\n                                    contractLabel: [this.riskyClosure, contract.contractLabel,\r\n                                    element.contractLabel],\r\n                                    status: allocatedClosureStatus,\r\n                                    netaccrual: allocatedNetAccrualVal,\r\n                                    invoice: allocatedContract.invoicePercent,\r\n                                    sectionId: allocatedContract.sectionId\r\n                                };\r\n                                this.bulkClosureGridRows.push(obj);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        obj = {\r\n                            contractLabel: [this.riskyClosure]\r\n                        };\r\n                        this.bulkClosureGridRows.push(obj);\r\n                        obj = {\r\n                            contractLabel: [this.riskyClosure, contract.contractLabel],\r\n                            status: riskyClosureStatus,\r\n                            netaccrual: netAccrualVal,\r\n                            invoice: contract.invoicePercent,\r\n                            sectionId: contract.sectionId\r\n                        };\r\n                        this.bulkClosureGridRows.push(obj);\r\n                    }\r\n                }\r\n                else if (isLock || contract.blDate === null || contract.blDate === this.defaultDate ||\r\n                    contract.invoicingStatusId === InvoicingStatus.Uninvoiced ||\r\n                    contract.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired ||\r\n                    (contract.invoicingStatusId === InvoicingStatus.Finalized && postingCount > 0)) {\r\n                    let obj, unavailableClosureStatus;\r\n                    if (isLock) {\r\n                        unavailableClosureStatus = lockMessage;\r\n                    }\r\n                    else if (contract.blDate === null || contract.blDate === this.defaultDate) {\r\n                        unavailableClosureStatus = 'Unrealized physicals';\r\n                    }\r\n                    else if (contract.invoicingStatusId === InvoicingStatus.Uninvoiced ||\r\n                        contract.invoicingStatusId === InvoicingStatus.FinalInvoiceRequired) {\r\n                        unavailableClosureStatus = 'Cargo accrual';\r\n                        netAccrualVal = contract.netAccrual + ' ' + contract.currencyCode;\r\n                    }\r\n                    else if (contract.invoicingStatusId === InvoicingStatus.Finalized && postingCount > 0) {\r\n                        unavailableClosureStatus = 'Invoices not posted';\r\n                    }\r\n                    obj = {\r\n                        contractLabel: [this.unavailableClosure]\r\n                    };\r\n                    this.bulkClosureGridRows.push(obj);\r\n                    obj = {\r\n                        contractLabel: [this.unavailableClosure, contract.contractLabel],\r\n                        status: unavailableClosureStatus,\r\n                        netaccrual: netAccrualVal,\r\n                        invoice: contract.invoicePercent,\r\n                        sectionId: contract.sectionId\r\n                    };\r\n                    this.bulkClosureGridRows.push(obj);\r\n                }\r\n\r\n            });\r\n        }\r\n        this.bulkClosureGridRows.sort((compareTo, compareFrom) => {\r\n            if (compareTo.contractLabel[0] == 'Contracts available for closure' && (compareFrom.contractLabel[0] == 'Contracts risky for closure' || compareFrom.contractLabel[0] == 'Contracts unavailable for closure')) {\r\n                return -1;\r\n            }\r\n            else if (compareTo.contractLabel[0] == 'Contracts risky for closure' && compareFrom.contractLabel[0] == 'Contracts unavailable for closure') {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        });\r\n\r\n        this.groupDefaultExpanded = -1;\r\n        this.getDataPath = function (data) {\r\n            return data.contractLabel;\r\n        };\r\n\r\n        this.autoGroupColumnDef = {\r\n            headerName: \"\",\r\n            cellRendererParams: {\r\n                suppressCount: true,\r\n                checkbox: true,\r\n                innerRendererFramework: AgGridHyperlinkComponent,\r\n            },\r\n        };\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event'])\r\n    unloadNotification(event) {\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n    ContractsForClosure(contracts: ContractsForBulkFunctions[], allContracts: ContractsForBulkFunctions[]) {\r\n        this.bulkEditGridRows = contracts;\r\n        this.selectContractStatus(this.bulkEditGridRows, allContracts);\r\n        this.initializeGridRows();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    selectContractStatus(selectedcontracts: ContractsForBulkFunctions[], allcontracts: ContractsForBulkFunctions[]) {\r\n        this.selectContractStatusValue = selectedcontracts;\r\n        this.allContractStatusValue = allcontracts;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.bulkClosureGridColumns;\r\n        this.bulkClosureGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (!this.gridApi) return;\r\n\r\n        setTimeout(() => {\r\n            this.gridApi.sizeColumnsToFit();\r\n            this.gridApi.forEachNode((node) => {\r\n                if (node.key === 'Contracts available for closure') {\r\n                    if (node.allChildrenCount) {\r\n                        Object.values(node.childrenMapped).forEach((childNode) => {\r\n                            childNode.setSelected(true)\r\n                        });\r\n                    }\r\n                    else {\r\n                        node.setSelected(true)\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    hyperlinkClicked(rowSelected: ContractsForBulkFunctions, event) {\r\n        const link = `${this.companyManager.getCurrentCompanyId()}/trades/display/${rowSelected.sectionId}`;\r\n        window.open(link, '_blank');\r\n    }\r\n}\r\n","module.exports = \"<p>\\r\\n  pop-up-dialog-component works!\\r\\n</p>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-pop-up-dialog-component',\r\n    templateUrl: './pop-up-dialog-component.component.html',\r\n    styleUrls: ['./pop-up-dialog-component.component.scss']\r\n})\r\n\r\nexport class PopUpDialogComponentComponent implements OnInit {\r\n\r\n    constructor(@Inject(MAT_DIALOG_DATA) public data: any) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <div ag-grid=\\\"bulkClosureGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"bulkClosureGridRows\\\"\\r\\n                         [gridOptions]=\\\"bulkClosureGridOptions\\\"\\r\\n                         [columnDefs]=\\\"bulkClosureGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                         [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=32>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { Trader } from '../../../../../shared/entities/trader.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TradeEditService } from '../../../../../shared/services/trade-edit.service';\r\nimport { ContractsForBulkFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { ContractsForBulkClosureFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-closure-functions';\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-summary-closure-matrix',\r\n    templateUrl: './summary-closure-matrix.component.html',\r\n    styleUrls: ['./summary-closure-matrix.component.scss']\r\n})\r\nexport class SummaryClosureMatrixComponent implements OnInit {\r\n    company: string;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    bulkClosureGridColumns: agGrid.ColDef[];\r\n    bulkClosureGridOptions: agGrid.GridOptions = {};\r\n    bulkClosureGridRows = [];\r\n    bulkEditGridRows: ContractsForBulkFunctions[];\r\n    bulkContractGridRows: ContractsForBulkClosureFunctions[];\r\n    traders: Trader[] = [];\r\n    masterdata: MasterData;\r\n    columnDefs: agGrid.ColDef[];\r\n    copyselectedallocatedIds = [];\r\n    companyConfiguration: Company;\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n    };\r\n    gridComponents = {\r\n    };\r\n    constructor(\r\n        private gridService: AgGridService,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService,\r\n        private route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected authorizationService: AuthorizationService,\r\n        protected tradingService: TradingService,\r\n    ) { }\r\n\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    ContractsForClosureSummary(contracts: ContractsForBulkClosureFunctions[]) {\r\n        this.bulkContractGridRows = contracts;\r\n        this.initializeGridRows();\r\n    }\r\n\r\n    onColumnVisibilityChanged(event: any) {\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        return params.context.gridEditable;\r\n    }\r\n    initializeGridColumns() {\r\n        this.bulkClosureGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n\r\n        this.bulkClosureGridColumns =\r\n            [\r\n                {\r\n                    headerName: 'Contract',\r\n                    field: 'contractLabel',\r\n                    colId: 'contractLabel',\r\n                },\r\n                {\r\n                    headerName: 'Status',\r\n                    field: ' status',\r\n                    colId: ' status',\r\n                },\r\n                {\r\n                    headerName: 'Net accrual/P&L impact ',\r\n                    field: 'netaccrual',\r\n                    colId: 'netaccrual',\r\n                },\r\n                {\r\n                    headerName: '%Invoice ',\r\n                    field: 'invoice',\r\n                    colId: 'invoice',\r\n                },\r\n            ];\r\n    }\r\n\r\n    initializeGridRows() {\r\n        this.bulkClosureGridRows = [];\r\n        let obj;\r\n        this.bulkContractGridRows.forEach((contract) => {\r\n            obj = {\r\n                contractLabel: [contract.contractLabel[1]],\r\n                netaccrual: contract.netaccrual,\r\n                invoice: contract.invoice,\r\n                status: contract.status,\r\n            };\r\n            this.bulkClosureGridRows.push(obj);\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.bulkClosureGridColumns;\r\n        this.bulkClosureGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (!this.gridApi) return;\r\n\r\n        setTimeout(() => {\r\n            this.gridApi.sizeColumnsToFit();\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"bulkEditionFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Contracts</ng-template>\\r\\n                <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\\r\\n                <atlas-group-function-contracts #contractSelection\\r\\n                                                (contractSelected)=\\\"isContractSelected($event)\\\">\\r\\n                </atlas-group-function-contracts>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onContractSelectedDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onContractSelectionPreviousButtonClicked()\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onContractSelectionNextButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isContractsNextDisabled\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n\\r\\n\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Details</ng-template>\\r\\n                <atlas-bulk-closure-matrix #closurematrix\\r\\n                                           (contractClosureSelected)=\\\"isContractClosureSelected($event)\\\">\\r\\n                </atlas-bulk-closure-matrix>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onClosureMatrixDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onClosureMatrixPreviousButtonClicked()\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onClosureMatrixNextButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isContractsClosureNextDisabled\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Summary</ng-template>\\r\\n                <atlas-summary-closure-matrix #summarymatrix>\\r\\n                </atlas-summary-closure-matrix>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onSummaryFinishClosureMatrixButtonClicked()\\\">\\r\\n                                FINISH\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","\r\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription, throwError } from 'rxjs';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { TradePropertyPrivilege } from '../../../../shared/entities/trade-property-privilege.entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { TradeEditService } from '../../../../shared/services/trade-edit.service';\r\nimport { ContractsForBulkFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { TradeActionsService } from '../../../services/trade-actions.service';\r\nimport { GroupFunctionContractsComponent } from '../group-function-contracts/group-function-contracts.component';\r\nimport { GroupFunctionWarningComponent } from '../group-function-warning/group-function-warning.component';\r\nimport { BulkClosureMatrixComponent } from './bulk-closure-matrix/bulk-closure-matrix.component';\r\nimport { SummaryClosureMatrixComponent } from './summary/summary-closure-matrix.component';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport { ContractsForBulkClosureFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-closure-functions';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-bulk-closure',\r\n    templateUrl: './trade-bulk-closure.component.html',\r\n    styleUrls: ['./trade-bulk-closure.component.scss'],\r\n})\r\n\r\nexport class TradeBulkClosureComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('contractSelection') contractSelection: GroupFunctionContractsComponent;\r\n    @ViewChild('groupFunctionWarning') groupFunctionWarning: GroupFunctionWarningComponent;\r\n    @ViewChild('closurematrix') closureMatrix: BulkClosureMatrixComponent;\r\n    @ViewChild('summarymatrix') summaryMatrix: SummaryClosureMatrixComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    selectedContractsForClosureFunctions: ContractsForBulkFunctions[];\r\n    selectedContractsForClosureSummaryFunctions: ContractsForBulkClosureFunctions[];\r\n    privileges: TradePropertyPrivilege;\r\n    company: string;\r\n    bulkEditionFormGroup: FormGroup;\r\n    isContractsNextDisabled: boolean = true;\r\n    isContractsClosureNextDisabled: boolean = true;\r\n    currentStep: number = 0;\r\n    selectedSectionIds: number[] = [];\r\n    selectContractValue: any;\r\n    isEditButtonClicked: boolean;\r\n    fetchingInProgress: boolean;\r\n    dataVersionId: number;\r\n    childFlag: number = 0;\r\n    private getTradesForSubscription: Subscription;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        private tradingService: TradingService,\r\n        private tradeEditService: TradeEditService,\r\n        protected lockService: LockService,\r\n        private tradeActionService: TradeActionsService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.bulkEditionFormGroup = this.formBuilder.group({\r\n            contractSelection: this.contractSelection.getFormGroup(),\r\n            closureMatrix: this.closureMatrix.getFormGroup(),\r\n        });\r\n\r\n        this.formComponents.push(this.contractSelection,\r\n            this.closureMatrix);\r\n    }\r\n\r\n    onContractSelectionDiscardButtonClicked() {\r\n        if (this.isContractsNextDisabled) {\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n        } else {\r\n            this.discardButtonDialog();\r\n        }\r\n    }\r\n\r\n    onContractSelectionPreviousButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/groupfunctions']);\r\n    }\r\n\r\n    contractsSelected(buttonClicked) {\r\n        this.isEditButtonClicked = buttonClicked;\r\n        const selectedContracts = this.contractSelection.selectedContractsForBulkFunctions as ContractsForBulkFunctions[];\r\n        const privileges = this.tradeActionService.getTradePropertyPrivileges();\r\n        this.privileges = privileges as TradePropertyPrivilege;\r\n        this.selectedSectionIds = [];\r\n        selectedContracts.forEach((element) => {\r\n            this.selectedSectionIds.push(element.sectionId);\r\n        });\r\n        if (this.selectedSectionIds) {\r\n            this.fetchingInProgress = false;\r\n            this.subscriptions.push(this.tradingService.getTradesForBulkClosure(this.selectedSectionIds)\r\n                .pipe(catchError((error) => {\r\n                    return throwError(error);\r\n                }),\r\n                    finalize(() => {\r\n                        this.fetchingInProgress = true;\r\n                    })).subscribe((data) => {\r\n                        if (data) {\r\n                            this.selectedContractsForClosureFunctions = data.value;\r\n                            this.closureMatrix.ContractsForClosure(this.selectedContractsForClosureFunctions, this.contractSelection.ContractGridRows);\r\n                        }\r\n                    }));\r\n        }\r\n    }\r\n\r\n    afterContractsFetched() {\r\n        this.closureMatrix.ContractsForClosure(this.selectedContractsForClosureFunctions, this.contractSelection.ContractGridRows);\r\n        this.stepper.previous();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.getTradesForSubscription) {\r\n            this.getTradesForSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    contractsClosureSelected() {\r\n        const selectedContracts = this.closureMatrix.selectedContractsClosureForBulkFunctions as ContractsForBulkClosureFunctions[];\r\n        this.selectedContractsForClosureSummaryFunctions = selectedContracts;\r\n\r\n    }\r\n\r\n    onClosureMatrixDiscardButtonClicked() {\r\n        if (this.isContractsClosureNextDisabled) {\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n        } else {\r\n            this.discardButtonDialog();\r\n        }\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n    discardButtonDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n            }\r\n        });\r\n    }\r\n\r\n    isContractSelected(contractSelected: boolean) {\r\n        this.isContractsNextDisabled = !contractSelected;\r\n    }\r\n\r\n    isContractClosureSelected(contractClosureSelected: boolean) {\r\n        this.isContractsClosureNextDisabled = !contractClosureSelected;\r\n    }\r\n\r\n    onContractSelectionNextButtonClicked() {\r\n        this.contractsSelected(this.isEditButtonClicked = false);\r\n        this.stepper.next();\r\n    }\r\n\r\n    onClosureMatrixPreviousButtonClicked() {\r\n        this.stepper.previous();\r\n        this.lockService.cleanSessionLocks().subscribe(() => {\r\n        });\r\n    }\r\n\r\n    onClosureMatrixNextButtonClicked() {\r\n        this.contractsClosureSelected();\r\n        let sectionIds = [];\r\n        this.selectedContractsForClosureSummaryFunctions.forEach((contract) => {\r\n            sectionIds.push(contract.sectionId);\r\n        });\r\n        this.subscriptions.push(this.tradingService.closeSection(sectionIds, this.childFlag, this.dataVersionId)\r\n            .subscribe((ok) => {\r\n                if (ok) {\r\n                    this.summaryMatrix.ContractsForClosureSummary(this.selectedContractsForClosureSummaryFunctions);\r\n                    this.stepper.next();\r\n                }\r\n            }));\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n    onSummaryFinishClosureMatrixButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n    }\r\n\r\n    onContractSelectedDiscardButtonClicked() {\r\n        this.contractSelection.gridApi.forEachNode((node) => {\r\n            node.setSelected(false);\r\n\r\n        });\r\n        this.contractSelection.loadGridConfiguration();\r\n        this.contractSelection.searchContractForm.reset();\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"section-light-box lightbox-width\\\">\\r\\n    <h1>De-Allocation</h1>\\r\\n    <div>\\r\\n        <p>\\r\\n            You are about to deallocate the trades. Unselect the ones for which you want to re-instate pre-allocation\\r\\n            traffic details.\\r\\n        </p>\\r\\n        <mat-chip-list multiple>\\r\\n            <mat-chip *ngFor=\\\"let contract of model.selectedContracts\\\"\\r\\n                      [selected]=\\\"contract.removeSectionTrafficInfo\\\"\\r\\n                      (click)=\\\"onSelectedContractClicked(contract)\\\">\\r\\n                <mat-icon>{{ contract.removeSectionTrafficInfo ? 'check_circle' : 'panorama_fish_eye'}}</mat-icon>\\r\\n                {{contract.contractLabel}}\\r\\n            </mat-chip>\\r\\n        </mat-chip-list>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between end\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">discard</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDeAllocateButtonClicked()\\\">DeAllocate</button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".lightbox-width {\\n  width: 1000px; }\\n\\n.mat-divider {\\n  margin: 8px 0; }\\n\\n.icon-padding {\\n  background-color: #ec8d2d;\\n  border-radius: 50%;\\n  padding: 8px;\\n  height: 24px;\\n  width: 24px; }\\n\\n.icon-padding.mat-icon {\\n    color: white; }\\n\\n.full-invoiced-contract-list {\\n  margin: 8px 0; }\\n\\nh1 {\\n  margin-top: 0; }\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ContractsForBulkFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { BulkDeallocateSectionCommand } from '../../../../../shared/services/execution/dtos/bulk-deallocation-section-command';\r\nimport { DeallocateBulkSections } from '../../../../../shared/services/execution/dtos/deallocate-bulk-sections';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-section-dialog',\r\n    templateUrl: './section-dialog.component.html',\r\n    styleUrls: ['./section-dialog.component.scss']\r\n})\r\n\r\nexport class BulkDeAllocationSectionDialogComponent implements OnInit {\r\n    model: any;\r\n    company: string;\r\n    dataVersionId: number;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<BulkDeAllocationSectionDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private executionService: ExecutionService,\r\n        protected snackbarService: SnackbarService, ) {\r\n        this.model = data;\r\n        this.company = data.company;\r\n        this.dataVersionId = data.dataVersionId;\r\n        thisDialogRef.disableClose = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.model) {\r\n            this.model.selectedContracts.forEach((element) => {\r\n                element.removeSectionTrafficInfo = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectedContractClicked(section: ContractsForBulkFunctions) {\r\n        const sectionFiltered: ContractsForBulkFunctions = this.model.selectedContracts.find((sec) =>\r\n            sec.sectionId === section.sectionId);\r\n        if (sectionFiltered) {\r\n            sectionFiltered.removeSectionTrafficInfo = !sectionFiltered.removeSectionTrafficInfo;\r\n            if (sectionFiltered.allocatedContractReference) {\r\n                this.model.selectedContracts.forEach((element) => {\r\n                    if (sectionFiltered.allocatedContractReference === element.contractLabel) {\r\n                        element.removeSectionTrafficInfo = !element.removeSectionTrafficInfo;\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.thisDialogRef.close(null);\r\n    }\r\n\r\n    onDeAllocateButtonClicked() {\r\n        let bulkDeallocateCommand: BulkDeallocateSectionCommand = new BulkDeallocateSectionCommand();\r\n        bulkDeallocateCommand.deallocateBulkSections = [];\r\n        bulkDeallocateCommand.company = this.company;\r\n        bulkDeallocateCommand.dataVersionId = this.dataVersionId;\r\n        this.model.selectedContracts.forEach((contract) => {\r\n            let deAllocateBulkSection: DeallocateBulkSections = new DeallocateBulkSections();\r\n            deAllocateBulkSection.reInstateTrafficDetails = contract.removeSectionTrafficInfo;\r\n            deAllocateBulkSection.sectionId = contract.sectionId;\r\n            bulkDeallocateCommand.deallocateBulkSections.push(deAllocateBulkSection);\r\n        });\r\n        this.executionService.deallocateBulkContract(bulkDeallocateCommand)\r\n            .subscribe((ok) => {\r\n                if (ok) {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Trades has been successfully de-allocated',\r\n                    );\r\n                    this.thisDialogRef.close(true);\r\n                }\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"bulkDeAllocationForm\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n\\r\\n        <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\\r\\n        <atlas-group-function-contracts #contractSelection\\r\\n                                        (contractSelected)=\\\"isContractSelected($event)\\\">\\r\\n        </atlas-group-function-contracts>\\r\\n\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\"\\r\\n             class=\\\"button-details\\\">\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <button (click)=\\\"onContractSelectionDiscardButtonClicked()\\\"\\r\\n                        mat-button>\\r\\n                    DISCARD\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column \\\"\\r\\n                 fxLayoutAlign=\\\"start \\\">\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"end start \\\">\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"onDeAllocationButtonClicked()\\\"\\r\\n                            [disabled]=\\\"isContractsNextDisabled\\\">\\r\\n                        DEALLOCATE\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatStepper, MatDialog } from '@angular/material';\r\nimport { GroupFunctionContractsComponent } from '../group-function-contracts/group-function-contracts.component';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { GroupFunctionWarningComponent } from '../group-function-warning/group-function-warning.component';\r\nimport { BulkDeAllocationSectionDialogComponent } from './section-dialog/section-dialog.component';\r\nimport { ContractsForBulkFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-bulk-deallocation',\r\n    templateUrl: './trade-bulk-deallocation.component.html',\r\n    styleUrls: ['./trade-bulk-deallocation.component.scss']\r\n})\r\n\r\nexport class TradeBulkDeallocationComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('contractSelection') contractSelection: GroupFunctionContractsComponent;\r\n    @ViewChild('groupFunctionWarning') groupFunctionWarning: GroupFunctionWarningComponent;\r\n\r\n    bulkDeAllocationForm: FormGroup;\r\n    isContractsNextDisabled: boolean = true;\r\n    company: string;\r\n    dataVersionId: number;\r\n    masterData: MasterData = new MasterData();\r\n    formComponents: BaseFormComponent[] = [];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        protected dialog: MatDialog, ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.bulkDeAllocationForm = this.formBuilder.group({\r\n            contractSelection: this.contractSelection.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.contractSelection);\r\n    }\r\n\r\n    isContractSelected(contractSelected: boolean) {\r\n        this.isContractsNextDisabled = !contractSelected;\r\n    }\r\n\r\n    onDeAllocationButtonClicked() {\r\n        const selectedContracts = this.contractSelection.selectedContractsForBulkFunctions as ContractsForBulkFunctions[];\r\n        const deAllocateSectionDialog = this.dialog.open(BulkDeAllocationSectionDialogComponent, {\r\n            data: { selectedContracts, company: this.company, dataVersionId: this.dataVersionId },\r\n        });\r\n        deAllocateSectionDialog.afterClosed().subscribe((data) => {\r\n            if (data) {\r\n                this.contractSelection.getContractsToDeAllocation();\r\n            }\r\n        });\r\n    }\r\n\r\n    onContractSelectionDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <div ag-grid=\\\"bulkEditGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"bulkEditGridRows\\\"\\r\\n                         [gridOptions]=\\\"bulkEditGridOptions\\\"\\r\\n                         [columnDefs]=\\\"bulkEditGridColumns\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [singleClickEdit]=true\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                         [pinnedTopRowData]=\\\"pinnedTopRowData\\\"\\r\\n                         (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                         [pagination]=\\\"true\\\"\\r\\n                         [paginationPageSize]=\\\"10\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableSorting]=\\\"true\\\"\\r\\n                         [enableColResize]=\\\"true\\\"\\r\\n                         enableFilter\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Inject, Input, OnInit, Optional, Output, ViewChild } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorDatePickerComponent } from '../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component';\r\nimport { CellEditorNumericComponent } from '../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasNumber } from '../../../../../shared/entities/atlas-number.entity';\r\nimport { Commodity } from '../../../../../shared/entities/commodity.entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { DiscountPremiumBasis } from '../../../../../shared/entities/discount-premium-basis.entity';\r\nimport { DiscountPremiumType } from '../../../../../shared/entities/discount-premium-type.entity';\r\nimport { EnumEntity } from '../../../../../shared/entities/enum-entity.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { PhysicalContractToUpdate } from '../../../../../shared/entities/physical-contract-to-update.entity';\r\nimport { PhysicalTradeBulkEdit } from '../../../../../shared/entities/physical-trade-bulk-edit';\r\nimport { SectionToUpdate } from '../../../../../shared/entities/section-to-update.entity';\r\nimport { TradePropertyPrivilege } from '../../../../../shared/entities/trade-property-privilege.entity';\r\nimport { Trader } from '../../../../../shared/entities/trader.entity';\r\nimport { DateFormats } from '../../../../../shared/enums/date-format.enum';\r\nimport { DiscountBasis } from '../../../../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from '../../../../../shared/enums/discount-type.enum';\r\nimport { InvoiceStatus } from '../../../../../shared/enums/invoice-status.enum';\r\nimport { InvoicingStatus } from '../../../../../shared/enums/invoicing-status.enum';\r\nimport { PositionMonthTypes } from '../../../../../shared/enums/position-month-type.enum';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TradeEditService } from '../../../../../shared/services/trade-edit.service';\r\nimport { ContractsForBulkFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { getCropYearValue } from '../../../../../trading/services/form-field-handler.service';\r\nimport { getContractValue, getMaturityDate } from '../../../../Library/trading-businessrules';\r\nimport { TradeActionsService } from '../../../../services/trade-actions.service';\r\nimport { PropertySelection } from './bulk-edit-property-selection';\r\nimport { MasterRowApplyComponent } from './master-row-apply/master-row-apply.component';\r\n\r\n@Component({\r\n    selector: 'atlas-edition-matrix',\r\n    templateUrl: './edition-matrix.component.html',\r\n    styleUrls: ['./edition-matrix.component.scss'],\r\n})\r\nexport class EditionMatrixComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @Output() readonly blockingErrorMessage = new EventEmitter<any>();\r\n    company: string;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    bulkEditGridColumns: agGrid.ColDef[];\r\n    bulkEditGridOptions: agGrid.GridOptions = {};\r\n    bulkEditGridRows: ContractsForBulkFunctions[];\r\n    updatedSections: SectionToUpdate[] = [];\r\n    updatedPhysicalContracts: PhysicalContractToUpdate[] = [];\r\n    updatedContractRows: ContractsForBulkFunctions[] = [];\r\n    updatedContracts: PhysicalTradeBulkEdit;\r\n    filteredCommodityList: Commodity[];\r\n    traders: Trader[] = [];\r\n    filteredTradeOwners: Trader[];\r\n    masterdata: MasterData;\r\n    discountType: DiscountTypes;\r\n    discountBasis: DiscountBasis;\r\n    privileges: TradePropertyPrivilege;\r\n    columnDefs: agGrid.ColDef[];\r\n    requiredString: string = 'Required*';\r\n    noErrorMessage: string = 'noError';\r\n    ammendedStatus: string = 'A';\r\n    validationError: boolean = false;\r\n    companyConfiguration: Company;\r\n    isSummaryView: boolean = false;\r\n    pinnedTopRowData: any;\r\n    isSaveInProgress: boolean;\r\n    isRequiredCell: boolean;\r\n    isCurrencyRequired: boolean;\r\n    isValueChanged: boolean = false;\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n    };\r\n    columnName: any;\r\n    rowValue: any;\r\n    bulkEditField: string = 'Master Row';\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasDatePicker: CellEditorDatePickerComponent,\r\n    };\r\n    premiumDiscountBasis: DiscountPremiumBasis[];\r\n    premiumDiscountType: DiscountPremiumType[];\r\n    contractValueCalculated: number;\r\n\r\n    dateFormat = {\r\n        Date: DateFormats.Date,\r\n    };\r\n    errorMessage: string = 'Invalid Entry. Value not in list';\r\n    isSave: boolean;\r\n    colDefSelected: PropertySelection[] = [];\r\n    @Input() lockedContracts: EnumEntity[] = [];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private gridService: AgGridService,\r\n        private uiService: UiService,\r\n        protected snackbarService: SnackbarService,\r\n        private route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected authorizationService: AuthorizationService,\r\n        private tradeEditService: TradeEditService,\r\n        private tradeActionService: TradeActionsService,\r\n        protected tradingService: TradingService,\r\n        private lockService: LockService,\r\n        @Optional() @Inject(MAT_DATE_LOCALE) private dateLocale?: string,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.populateListofFields();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.premiumDiscountType = [\r\n            {\r\n                discountPremiumTypeId: DiscountTypes.Discount,\r\n                discountPremium: DiscountTypes[DiscountTypes.Discount],\r\n            },\r\n            {\r\n                discountPremiumTypeId: DiscountTypes.Premium,\r\n                discountPremium: DiscountTypes[DiscountTypes.Premium],\r\n            },\r\n        ];\r\n        this.premiumDiscountBasis = [\r\n            {\r\n                discountPremiumBasis: DiscountBasis[DiscountBasis.Percent],\r\n                discountPremiumBasisId: DiscountBasis.Percent,\r\n            },\r\n            {\r\n                discountPremiumBasisId: DiscountBasis.Rate,\r\n                discountPremiumBasis: DiscountBasis[DiscountBasis.Rate],\r\n            },\r\n        ];\r\n\r\n        this.tradingService.getAllTraders()\r\n            .subscribe((traders) => {\r\n                this.traders = this.filteredTradeOwners = traders.value;\r\n            });\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.privileges = this.tradeActionService.getTradePropertyPrivileges();\r\n        this.filteredCommodityList = this.masterdata.commodities;\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (params.data.premiumDiscountTypeId) {\r\n            return '<div class=\\'bulk-edit-cell-value-required\\'>Required*</div>';\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.bulkEditGridOptions = {\r\n            context: this.gridContext,\r\n            getRowStyle: this.isContractLockedRowStyle.bind(this),\r\n        };\r\n        this.bulkEditGridColumns =\r\n            [\r\n                {\r\n                    headerName: '',\r\n                    pinned: 'left',\r\n                    colId: 'rowStatus',\r\n                    field: 'rowStatus',\r\n                    hide: true,\r\n                    minWidth: 90,\r\n                    maxWidth: 90,\r\n                    editable: false,\r\n                    suppressMenu: true,\r\n                    pinnedRowCellRendererFramework: MasterRowApplyComponent,\r\n                    pinnedRowCellRendererParams: {\r\n                        context: {\r\n                            componentParent: this,\r\n                        },\r\n                    },\r\n                    cellRenderer: (params) => {\r\n                        if (params.data.rowStatus) {\r\n                            return '<mat-chip-list><mat-chip class=\"status-flag-chip\">' + params.data.rowStatus +\r\n                                '</mat-chip></mat-chip-list>';\r\n                        }\r\n                        return '';\r\n                    },\r\n                    tooltip: (params) => {\r\n                        return params.context.componentParent.getContractTooltipMessage(params);\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Contract Reference',\r\n                    field: 'contractLabel',\r\n                    colId: 'contractLabel',\r\n                    editable: false,\r\n                    pinned: 'left',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        return params.context.componentParent.getContractTooltipMessage(params);\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Approval Status',\r\n                    field: 'status',\r\n                    colId: 'status',\r\n                    editable: false,\r\n                    pinned: 'left',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        return params.context.componentParent.getContractTooltipMessage(params);\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Allocated Section Id',\r\n                    field: 'allocatedSectionId',\r\n                    colId: 'allocatedSectionId',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Contract Type',\r\n                    field: 'contractType',\r\n                    colId: 'contractType',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Physical Contract Id',\r\n                    field: 'physicalContractId',\r\n                    colId: 'physicalContractId',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Section Id',\r\n                    field: 'sectionId',\r\n                    colId: 'sectionId',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Section Origin Id',\r\n                    field: 'sectionOriginId',\r\n                    colId: 'sectionOriginId',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Contract Date *',\r\n                    field: 'contractDate',\r\n                    colId: 'contractDate',\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    hide: true,\r\n                    cellEditor: 'atlasDatePicker',\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        maxDate: this.companyManager.getCurrentCompanyDate(),\r\n                        isRequired: true,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.newValue && params.oldValue !== params.newValue) {\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.contractDateChange = true;\r\n                            this.isValueChanged = true;\r\n                        }\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                        if ((params.context.componentParent.isSummaryView\r\n                            && params.data.contractDateChange) || params.data.isCancelled || params.data.isClosed) {\r\n                            return 'ag-grid-row-gray-background';\r\n                        }\r\n                        if ((!params.context.componentParent.isSummaryView\r\n                            && params.data.isChildTrade) || params.data.isCancelled || params.data.isClosed) {\r\n                            return 'ag-grid-disable-field';\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (params.data.islocked) {\r\n                            return params.data.lockMessage;\r\n                        } else if (!params.context.componentParent.isSummaryView && params.data.sectionOriginId) {\r\n                            params.data.isChildTrade = true;\r\n                            return 'Not Allowed to Edit in Child Trade';\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Trader *',\r\n                    field: 'userId',\r\n                    colId: 'userId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                        if ((params.context.componentParent.isSummaryView && params.data.traderValueChanged)\r\n                            || params.data.isCancelled || params.data.isClosed) {\r\n                            return 'ag-grid-row-gray-background';\r\n                        }\r\n                        if ((!params.context.componentParent.isSummaryView\r\n                            && params.data.isChildTrade) || params.data.isCancelled || params.data.isClosed) {\r\n                            return 'ag-grid-disable-field';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: true,\r\n                            },\r\n                            options: this.traders,\r\n                            valueProperty: 'userId',\r\n                            codeProperty: 'samAccountName',\r\n                            displayProperty: 'displayName',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.traders,\r\n                            valueProperty: 'userId',\r\n                            codeProperty: 'samAccountName',\r\n                            displayProperty: 'displayName',\r\n                            isRequired: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.userId !== params.value) {\r\n                            if (params.data.userId) {\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.traderValueChanged = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (params.data.islocked) {\r\n                            return params.data.lockMessage;\r\n                        } else if (!params.context.componentParent.isSummaryView && params.data.sectionOriginId) {\r\n                            params.data.isChildTrade = true;\r\n                            return 'Not Allowed to Edit in Child Trade';\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Department Code*',\r\n                    field: 'departmentId',\r\n                    colId: 'departmentId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridContextualSearchComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: true,\r\n                            },\r\n                            gridId: 'departmentsGrid',\r\n                            options: this.masterdata.departments,\r\n                            valueProperty: 'departmentId',\r\n                            codeProperty: 'departmentCode',\r\n                            descriptionProperty: 'description',\r\n                            displayProperty: 'departmentCode',\r\n                            showContextualSearchIcon: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            gridId: 'departmentsGrid',\r\n                            options: this.masterdata.departments,\r\n                            displayProperty: 'departmentCode',\r\n                            codeProperty: 'departmentCode',\r\n                            descriptionProperty: 'description',\r\n                            valueProperty: 'departmentId',\r\n                            lightBoxTitle: 'Results for Departments',\r\n                            isRequired: true,\r\n                            showContextualSearchIcon: this.tradeEditService\r\n                                .isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                        };\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => (!params.context.componentParent.isSummaryView\r\n                            && params.data.isInvoicedorAllocated) || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => (params.context.componentParent.isSummaryView\r\n                            && params.data.departmentValueChange) || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.departmentDescriptionFormatter(params);\r\n                        if (params.data.departmentId !== params.value) {\r\n                            this.isValueChanged = true;\r\n                            if (params.data.departmentId) {\r\n                                params.node.setDataValue('departmentDescription', params.data.departmentDescription);\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.departmentValueChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            return params.data.invoicingAllocationConditionErrorMessage;\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Department Description',\r\n                    field: 'departmentDescription',\r\n                    colId: 'departmentDescription',\r\n                    cellRenderer: this.departmentDescriptionFormatter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => (!params.context.componentParent.isSummaryView\r\n                            && params.data.isInvoicedorAllocated) || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => (params.context.componentParent.isSummaryView\r\n                            && params.data.departmentValueChange) || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            return params.data.invoicingAllocationConditionErrorMessage;\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Buyer Code *',\r\n                    field: 'buyerCounterpartyId',\r\n                    colId: 'buyerCounterpartyId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridContextualSearchComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.buyerCodePrivilege),\r\n                            },\r\n                            gridId: 'counterpartiesGrid',\r\n                            options: this.masterdata.counterparties,\r\n                            codeProperty: 'counterpartyCode',\r\n                            descriptionProperty: 'description',\r\n                            valueProperty: 'counterpartyID',\r\n                            displayProperty: 'counterpartyCode',\r\n                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView\r\n                                && params.context.componentParent.privileges.buyerCodePrivilege),\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            gridId: 'counterpartiesGrid',\r\n                            options: this.masterdata.counterparties,\r\n                            displayProperty: 'counterpartyCode',\r\n                            codeProperty: 'counterpartyCode',\r\n                            descriptionProperty: 'description',\r\n                            valueProperty: 'counterpartyID',\r\n                            lightBoxTitle: 'Results for Counterparty',\r\n                            isRequired: true,\r\n                            showContextualSearchIcon: this.tradeEditService\r\n                                .isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.buyerDescriptionFormatter(params);\r\n                        if (params.data.buyerCounterpartyId !== params.value) {\r\n                            if (params.data.buyerCounterpartyId) {\r\n                                params.node.setDataValue('buyerDescription', params.data.buyerDescription);\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.buyerValueChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.buyerCodePrivilege\r\n                                || !params.data.isbuyerCounterpartyEditable)),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.buyerValueChange),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        this.tradeEditService.isCounterpartyEditable(params);\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.buyerCodePrivilege) {\r\n                                return params.data.buyerErrorMessage;\r\n                            } else if (!params.data.isbuyerCounterpartyEditable) {\r\n                                return params.data.isbuyerCounterpartyErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Buyer Description',\r\n                    field: 'buyerDescription',\r\n                    colId: 'buyerDescription',\r\n                    cellRenderer: this.buyerDescriptionFormatter.bind(this),\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.buyerCodePrivilege\r\n                                || !params.data.isbuyerCounterpartyEditable)),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.buyerValueChange),\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.buyerCodePrivilege) {\r\n                                return params.data.buyerErrorMessage;\r\n                            } else if (!params.data.isbuyerCounterpartyEditable) {\r\n                                return params.data.isbuyerCounterpartyErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Seller Code *',\r\n                    field: 'sellerCounterpartyId',\r\n                    colId: 'sellerCounterpartyId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridContextualSearchComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.sellerCodePrivilege),\r\n                            },\r\n                            gridId: 'counterpartiesGrid',\r\n                            options: this.masterdata.counterparties,\r\n                            codeProperty: 'counterpartyCode',\r\n                            descriptionProperty: 'description',\r\n                            valueProperty: 'counterpartyID',\r\n                            displayProperty: 'counterpartyCode',\r\n                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView\r\n                                && params.context.componentParent.privileges.sellerCodePrivilege),\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            gridId: 'counterpartiesGrid',\r\n                            options: this.masterdata.counterparties,\r\n                            displayProperty: 'counterpartyCode',\r\n                            codeProperty: 'counterpartyCode',\r\n                            descriptionProperty: 'description',\r\n                            valueProperty: 'counterpartyID',\r\n                            lightBoxTitle: 'Results for Counterparty',\r\n                            isRequired: true,\r\n                            showContextualSearchIcon: this.tradeEditService\r\n                                .isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.sellerDescriptionFormatter(params);\r\n                        if (params.data.sellerCounterpartyId !== params.value) {\r\n                            if (params.data.sellerCounterpartyId) {\r\n                                params.node.setDataValue('sellerDescription', params.data.sellerDescription);\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.sellerValueChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => (!params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.sellerCodePrivilege\r\n                                || !params.data.isSellerCounterpartyEditable) || params.data.isCancelled || params.data.isClosed)),\r\n                        'ag-grid-row-gray-background': ((params) => (params.context.componentParent.isSummaryView\r\n                            && params.data.sellerValueChange) || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts);\r\n                            if (!params.context.componentParent.privileges.sellerCodePrivilege) {\r\n                                return params.data.sellerErrorMessage;\r\n                            } else if (!params.data.isSellerCounterpartyEditable) {\r\n                                return params.data.issellerCounterpartyErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Seller Description',\r\n                    field: 'sellerDescription',\r\n                    colId: 'sellerDescription',\r\n                    cellRenderer: this.sellerDescriptionFormatter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.sellerCodePrivilege\r\n                                || !params.data.isSellerCounterpartyEditable) || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.sellerValueChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.sellerCodePrivilege) {\r\n                                return params.data.sellerErrorMessage;\r\n                            } else if (!params.data.isSellerCounterpartyEditable) {\r\n                                return params.data.issellerCounterpartyErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Counterparty Reference',\r\n                    field: 'counterpartyReference',\r\n                    colId: 'counterpartyReference',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellEditor: 'agLargeTextCellEditor',\r\n                    cellEditorParams: {\r\n                        maxLength: 40,\r\n                        rows: 1,\r\n                        cols: 50,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.counterpartyReference !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.counterpartyReferenceChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.counterPartyPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.counterpartyReferenceChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {\r\n                                return params.data.counterpartyErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'commodity1 *',\r\n                    field: 'commodityId',\r\n                    colId: 'commodityId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridContextualSearchComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.counterPartyPrivilege),\r\n                            },\r\n                            gridId: 'commodityGrid',\r\n                            options: this.filteredCommodityList,\r\n                            codeProperty: 'commodityCode',\r\n                            descriptionProperty: 'commodityDescription',\r\n                            valueProperty: 'commodityId',\r\n                            displayProperty: 'commodityType',\r\n                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView\r\n                                && params.context.componentParent.privileges.counterPartyPrivilege),\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            gridId: 'commodityGrid',\r\n                            options: this.filteredCommodityList,\r\n                            codeProperty: 'commodityCode',\r\n                            descriptionProperty: 'commodityDescription',\r\n                            displayProperty: 'commodityType',\r\n                            valueProperty: 'commodityId',\r\n                            lightBoxTitle: 'Results for Commodities',\r\n                            isRequired: true,\r\n                            showContextualSearchIcon: this.tradeEditService\r\n                                .isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                        };\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.counterPartyPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {\r\n                                return params.data.commodityErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.commodityId !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        this.tradeEditService.onCommodityValueChange\r\n                            (params, 'commodityCode', this.filteredCommodityList);\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'commodity2',\r\n                    field: 'commodity2',\r\n                    colId: 'commodity2',\r\n                    cellRenderer: this.commodityValueGetter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.counterPartyPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {\r\n                                return params.data.commodityErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'commodity3',\r\n                    field: 'commodity3',\r\n                    colId: 'commodity3',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.counterPartyPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {\r\n                                return params.data.commodityErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'commodity4',\r\n                    field: 'commodity4',\r\n                    colId: 'commodity4',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.counterPartyPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {\r\n                                return params.data.commodityErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'commodity5',\r\n                    field: 'commodity5',\r\n                    colId: 'commodity5',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.counterPartyPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {\r\n                                return params.data.commodityErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Crop Year',\r\n                    field: 'cropYear',\r\n                    colId: 'cropYear',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.cropYear !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        this.tradeEditService.isCropYearValid(params);\r\n                        params.data.cropYearChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-invalid-mandatory-field': ((params) => params.data.cropYearValidationMessage),\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.cropYearPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.cropYearChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.cropYearPrivilege) {\r\n                                return params.data.cropYearErrorMessage;\r\n                            } else if (params.data.cropYearValidationMessage) {\r\n                                return params.data.cropYearValidationMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Quantity Code *',\r\n                    field: 'weightUnitId',\r\n                    colId: 'weightUnitId',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    field: 'weightCodeConversion',\r\n                    colId: 'weightCodeConversion',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Quantity *',\r\n                    field: 'quantity',\r\n                    colId: 'quantity',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Contract Term Code *',\r\n                    field: 'contractTermId',\r\n                    colId: 'contractTermId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.contractTermsPrivilege),\r\n                            },\r\n                            options: this.masterdata.contractTerms,\r\n                            valueProperty: 'contractTermId',\r\n                            codeProperty: 'contractTermCode',\r\n                            displayProperty: 'description',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.contractTerms,\r\n                            valueProperty: 'contractTermId',\r\n                            codeProperty: 'contractTermCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: true,\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredContractTerms = this.masterdata.contractTerms.find((e) =>\r\n                            e.contractTermId === params.data.contractTermId);\r\n                        if (filteredContractTerms) {\r\n                            params.node.setDataValue('contractTermDescription', filteredContractTerms.description);\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.contractTermChange = true;\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.contractTermsPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractTermChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.contractTermsPrivilege) {\r\n                                return params.data.contractTermsErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Contract Term Description',\r\n                    field: 'contractTermDescription',\r\n                    colId: 'contractTermDescription',\r\n                    cellRenderer: this.contractTermDescriptionFormatter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.contractTermsPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractTermChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.contractTermsPrivilege) {\r\n                                return params.data.contractTermsErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Port Terms *',\r\n                    field: 'portTermId',\r\n                    colId: 'portTermId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.portTermsPrivilege),\r\n                            },\r\n                            options: this.masterdata.ports,\r\n                            valueProperty: 'portId',\r\n                            codeProperty: 'portCode',\r\n                            displayProperty: 'description',\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.ports,\r\n                            valueProperty: 'portId',\r\n                            codeProperty: 'portCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: true,\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.portTermId !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        const filteredPortCode = params.context.componentParent.masterdata.ports.find((e) =>\r\n                            e.portId === params.data.portTermId);\r\n                        if (!params.data.portTermChange && (params.data.portTermId !== params.value)) {\r\n                            if (filteredPortCode) {\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.portTermChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.portTermsPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.portTermChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.portTermsPrivilege) {\r\n                                return params.data.portTermsErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Arbitration Code',\r\n                    field: 'arbitrationId',\r\n                    colId: 'arbitrationId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.arbitrationPrivilege),\r\n                            },\r\n                            options: this.masterdata.arbitrations,\r\n                            valueProperty: 'arbitrationId',\r\n                            codeProperty: 'arbitrationCode',\r\n                            displayProperty: 'description',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.arbitrations,\r\n                            valueProperty: 'arbitrationId',\r\n                            codeProperty: 'arbitrationCode',\r\n                            displayProperty: 'description',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.arbitrationId !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        const filteredArbitrationCode = this.masterdata.arbitrations.find((e) =>\r\n                            e.arbitrationId === params.data.arbitrationId);\r\n                        if (filteredArbitrationCode) {\r\n                            params.node.setDataValue('arbitrationDescription', filteredArbitrationCode.description);\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.arbitrationCodeChange = true;\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.arbitrationPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.arbitrationCodeChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.arbitrationPrivilege) {\r\n                                return params.data.arbitrationErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Arbitration Description',\r\n                    field: 'arbitrationDescription',\r\n                    colId: 'arbitrationDescription',\r\n                    cellRenderer: this.arbitrationDescriptionFormatter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.arbitrationPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.arbitrationCodeChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.arbitrationPrivilege) {\r\n                                return params.data.arbitrationErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Currency Code *',\r\n                    field: 'currencyCode',\r\n                    colId: 'currencyCode',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.currencyPrivilege),\r\n                            },\r\n                            options: this.masterdata.currencies,\r\n                            valueProperty: 'currencyCode',\r\n                            codeProperty: 'currencyCode',\r\n                            displayProperty: 'description',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.currencies,\r\n                            valueProperty: 'currencyCode',\r\n                            codeProperty: 'currencyCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: true,\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.currencyCode !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        const filteredCurrencyCode = this.masterdata.currencies.find((e) =>\r\n                            e.currencyCode === params.data.currencyCode);\r\n                        if (filteredCurrencyCode) {\r\n                            this.contractValueCalculation(params);\r\n                            params.node.setDataValue('currencyDescription', filteredCurrencyCode.description);\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.currencyCodeChange = true;\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.currencyPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.currencyCodeChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.currencyPrivilege) {\r\n                                return params.data.currencyErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Currency Description',\r\n                    field: 'currencyDescription',\r\n                    colId: 'currencyDescription',\r\n                    cellRenderer: this.currencyDescriptionFormatter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.currencyPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.currencyCodeChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.currencyPrivilege) {\r\n                                return params.data.currencyErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Price Code *',\r\n                    field: 'priceUnitId',\r\n                    colId: 'priceUnitId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (params.context.componentParent.privileges.priceCodePrivilege),\r\n                            },\r\n                            options: this.masterdata.priceUnits,\r\n                            valueProperty: 'priceUnitId',\r\n                            codeProperty: 'priceCode',\r\n                            displayProperty: 'description',\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.priceUnits,\r\n                            valueProperty: 'priceUnitId',\r\n                            codeProperty: 'priceCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredPriceCode = this.masterdata.priceUnits.find((e) =>\r\n                            e.priceUnitId === params.data.priceUnitId);\r\n                        if (filteredPriceCode) {\r\n                            if ((params.data.portTermId !== params.value)) {\r\n                                this.contractValueCalculation(params);\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.priceCodeChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.priceCodePrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.priceCodeChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.priceCodePrivilege) {\r\n                                return params.data.priceCodeErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    field: 'priceCodeConversion',\r\n                    colId: 'priceCodeConversion',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Contract Price *',\r\n                    field: 'contractPrice',\r\n                    colId: 'contractPrice',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasNumeric',\r\n                    cellRenderer: this.requiredString,\r\n                    cellEditorParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: false,\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRenderer: 'atlasNumeric',\r\n                    pinnedRowCellRendererParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: false,\r\n                        editable: true,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.contractValueCalculation(params);\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.contractPriceChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced\r\n                                || !params.context.componentParent.privileges.contractPricePrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractPriceChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (!params.context.componentParent.privileges.contractPricePrivilege) {\r\n                                return params.data.contractPriceErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Contract Value',\r\n                    field: 'contractValue',\r\n                    colId: 'contractValue',\r\n                    hide: true,\r\n                    editable: false,\r\n                    valueFormatter: this.numberFormatter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView && (params.data.isInvoiced\r\n                            || !params.context.componentParent.privileges.contractValuePrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractValueChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Payment Term Code *',\r\n                    field: 'paymentTermsId',\r\n                    colId: 'paymentTermsId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.paymentTermsPrivilege),\r\n                            },\r\n                            options: this.masterdata.paymentTerms,\r\n                            valueProperty: 'paymentTermsId',\r\n                            codeProperty: 'paymentTermCode',\r\n                            displayProperty: 'description',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.paymentTerms,\r\n                            valueProperty: 'paymentTermsId',\r\n                            codeProperty: 'paymentTermCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: true,\r\n                            editable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.paymentTermsId !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        const filteredPaymentTerms = this.masterdata.paymentTerms.find((e) =>\r\n                            e.paymentTermsId === params.data.paymentTermsId);\r\n                        if (filteredPaymentTerms) {\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.paymentTermChange = true;\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.paymentTermsPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.paymentTermChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.paymentTermsPrivilege) {\r\n                                return params.data.paymentTermsErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Period Type *',\r\n                    field: 'periodTypeDescription',\r\n                    colId: 'periodTypeId',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellEditorParams: () => {\r\n                        return {\r\n                            values: this.masterdata.periodTypes.map((basis) => basis.periodTypeDescription),\r\n                            displayPropertyName: 'periodTypeDescription',\r\n                            valuePropertyName: 'periodTypeId',\r\n                        };\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.periodTypePrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.periodTypePrivilege || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredPeriodType = this.masterdata.periodTypes.find((e) =>\r\n                            e.periodTypeDescription === params.newValue);\r\n                        if (filteredPeriodType) {\r\n                            params.node.setDataValue('periodTypeDescription', params.newValue);\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.periodTypeChange = true;\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.periodTypePrivilege) {\r\n                                return params.data.periodTypeErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Shipping Period Start *',\r\n                    field: 'deliveryPeriodStart',\r\n                    colId: 'deliveryPeriodStart',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        isRequired: true,\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.shipmentPeriodValidationStyleChange && (params.newValue && params.oldValue !== params.newValue)) {\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.shipmentperiodChange = true;\r\n                            this.isValueChanged = true;\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-invalid-mandatory-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.data.shipmentPeriodValidationStyleChange),\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && (!params.data.isPeriodEditable || !params.context.componentParent.privileges.fromDatePrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.shipmentperiodChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.fromDatePrivilege) {\r\n                                return params.data.fromDateErrorMessage;\r\n                            } else {\r\n                                return this.tradeEditService.ShipmentFromDateValidationMessage(params);\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Shipping Period End *',\r\n                    field: 'deliveryPeriodEnd',\r\n                    colId: 'deliveryPeriodEnd',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        isRequired: true,\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-invalid-mandatory-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.data.shipmentPeriodValidationStyleChange),\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && (!params.data.isPeriodEditable || !params.context.componentParent.privileges.toDatePrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.shipmentToDateChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.shipmentPeriodValidationStyleChange && (params.newValue && params.oldValue !== params.newValue)) {\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.shipmentToDateChange = true;\r\n                            this.isValueChanged = true;\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.toDatePrivilege) {\r\n                                return params.data.toDateErrorMessage;\r\n                            } else {\r\n                                return this.tradeEditService.ShipmentToDateValidationMessage(params);\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    field: 'positionMonthType',\r\n                    colId: 'positionMonthType',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    field: 'monthPositionIndex',\r\n                    colId: 'monthPositionIndex',\r\n                    cellRenderer: this.positionMonthTypeFormatter.bind(this),\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Position Month *',\r\n                    field: 'positionMonthValue',\r\n                    colId: 'positionMonthValue',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.positionTypePrivilege),\r\n                            },\r\n                            options: this.masterdata.positionMonthTypes,\r\n                            valueProperty: 'value',\r\n                            codeProperty: 'value',\r\n                            displayProperty: 'positionMonthTypeDescription',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.positionMonthTypes,\r\n                            valueProperty: 'value',\r\n                            codeProperty: 'value',\r\n                            displayProperty: 'positionMonthTypeDescription',\r\n                            isRequired: false,\r\n                            editable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredPositionMonth = params.context.componentParent.masterdata.positionMonthTypes.find((e) =>\r\n                            e.value === params.data.positionMonthValue);\r\n                        if (params.newValue && (params.data.positionMonthValue !== params.newValue)) {\r\n                            if (filteredPositionMonth) {\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.positionMonthChange = true;\r\n                                params.data.positionMonthType = filteredPositionMonth.positionMonthTypeCode.type;\r\n                                params.data.monthPositionIndex = filteredPositionMonth.positionMonthTypeCode.month;\r\n                            }\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.positionTypePrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.positionMonthChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.positionTypePrivilege) {\r\n                                return params.data.positionTypeErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Port of Origin',\r\n                    field: 'portOriginId',\r\n                    colId: 'portOriginId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (params.context.componentParent.privileges.portOfOriginPrivilege),\r\n                            },\r\n                            options: this.masterdata.ports,\r\n                            valueProperty: 'portId',\r\n                            codeProperty: 'portCode',\r\n                            displayProperty: 'description',\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.ports,\r\n                            valueProperty: 'portId',\r\n                            codeProperty: 'portCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: false,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredPortOriginCode = this.masterdata.ports.find((e) =>\r\n                            e.portId === params.data.portOriginId);\r\n                        if (!params.data.portOfOriginChange && (params.data.portTermId !== params.value)) {\r\n                            if (filteredPortOriginCode) {\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.portOfOriginChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.portOfOriginPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.portOfOriginChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.portOfOriginPrivilege) {\r\n                                return params.data.portOfOriginErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Port Destination',\r\n                    field: 'portDestinationId',\r\n                    colId: 'portDestinationId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (params.context.componentParent.privileges.portOfDestinationPrivilege),\r\n                            },\r\n                            options: this.masterdata.ports,\r\n                            valueProperty: 'portId',\r\n                            codeProperty: 'portCode',\r\n                            displayProperty: 'description',\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.ports,\r\n                            valueProperty: 'portId',\r\n                            codeProperty: 'portCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: false,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredPortDestinationCode = this.masterdata.ports.find((e) =>\r\n                            e.portId === params.data.portDestinationId);\r\n                        if (!params.data.portTermChange && (params.data.portTermId !== params.value)) {\r\n                            if (filteredPortDestinationCode) {\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.portDestinationChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.portOfDestinationPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.portDestinationChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.portOfDestinationPrivilege) {\r\n                                return params.data.portOfDestinationErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Business Sector',\r\n                    field: 'businessSectorId',\r\n                    colId: 'businessSectorId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.businessSectorPrivilege),\r\n                            },\r\n                            options: this.masterdata.businessSectors,\r\n                            valueProperty: 'sectorId',\r\n                            codeProperty: 'sectorCode',\r\n                            displayProperty: 'description',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.businessSectors,\r\n                            valueProperty: 'sectorId',\r\n                            codeProperty: 'sectorCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: false,\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredBusinessSectorCode = this.masterdata.businessSectors.find((e) =>\r\n                            e.sectorId === params.data.businessSectorId);\r\n                        if (filteredBusinessSectorCode) {\r\n                            params.node.setDataValue('businessSectorDescription', filteredBusinessSectorCode.description);\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.businessSectorChange = true;\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView && (params.data.isInvoiced\r\n                            || !params.context.componentParent.privileges.businessSectorPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.businessSectorChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.businessSectorPrivilege) {\r\n                                return params.data.businessSectorErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Business Sector Description',\r\n                    field: 'businessSectorDescription',\r\n                    colId: 'businessSectorDescription',\r\n                    cellRenderer: this.businessSectorDescriptionFormatter.bind(this),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView && (params.data.isInvoiced\r\n                            || !params.context.componentParent.privileges.businessSectorPrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.businessSectorChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.businessSectorPrivilege) {\r\n                                return params.data.businessSectorErrorMessage;\r\n                            } else {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Internal Memorandum',\r\n                    field: 'memorandum',\r\n                    colId: 'memorandum',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellEditor: 'agLargeTextCellEditor',\r\n                    cellEditorParams: {\r\n                        maxLength: 2000,\r\n                        rows: 8,\r\n                        cols: 50,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.memorandum !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.memoValueChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.memoPrivilege || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.memoValueChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.memoPrivilege) {\r\n                                return params.data.memoErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Contract Issued Date',\r\n                    field: 'contractIssuedDate',\r\n                    colId: 'contractIssuedDate',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        mode: DateFormats.Date,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.contractIssuedDateChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.contractIssuedOnPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractIssuedDateChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.contractIssuedOnPrivilege) {\r\n                                return params.data.contractIssuedErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Other Reference',\r\n                    field: 'otherReference',\r\n                    colId: 'otherReference',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellEditor: 'agLargeTextCellEditor',\r\n                    cellEditorParams: {\r\n                        maxLength: 12,\r\n                        rows: 1,\r\n                        cols: 12,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.otherReferenceChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.otherReferencePrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.otherReferenceChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.otherReferencePrivilege) {\r\n                                return params.data.otherReferenceErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Vessel Name',\r\n                    field: 'vesselId',\r\n                    colId: 'vesselId',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridContextualSearchComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.vesselNamePrivilege),\r\n                            },\r\n                            gridId: 'vesselsGrid',\r\n                            options: this.masterdata.vessels,\r\n                            codeProperty: 'vesselName',\r\n                            descriptionProperty: 'description',\r\n                            valueProperty: 'vesselId',\r\n                            displayProperty: 'vesselName',\r\n                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView\r\n                                && params.context.componentParent.privileges.vesselNamePrivilege),\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridContextualSearchComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            gridId: 'vesselsGrid',\r\n                            options: this.masterdata.vessels,\r\n                            codeProperty: 'vesselName',\r\n                            descriptionProperty: 'description',\r\n                            displayProperty: 'vesselName',\r\n                            valueProperty: 'vesselId',\r\n                            lightBoxTitle: 'Results for Vessels',\r\n                            isRequired: false,\r\n                            showContextualSearchIcon: this.tradeEditService\r\n                                .isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredVessel = this.masterdata.vessels.find((e) =>\r\n                            e.vesselId === params.data.vesselId);\r\n                        if (filteredVessel) {\r\n                            this.setAmmendedStatus(params);\r\n                            params.data.vesselValueChange = true;\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.vesselNamePrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.vesselValueChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.vesselNamePrivilege) {\r\n                                return params.data.vesselNameErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'BL Date',\r\n                    field: 'blDate',\r\n                    colId: 'blDate',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellEditorParams: {\r\n                        maxDate: this.companyManager.getCurrentCompanyDate(),\r\n                        isRequired: false,\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-invalid-mandatory-field': ((params) => params.data.blDateValidationStyleChange),\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (!params.data.isEditable\r\n                                || !params.context.componentParent.privileges.blDatePrivilege)\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.blDateChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: this.onblDateValueChanged.bind(this),\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.blDatePrivilege) {\r\n                                return params.data.blDateErrorMessage;\r\n                            } else if (params.data.isInvoiced && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            } else {\r\n                                return this.tradeEditService.blDateValidation(params);\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'BL Reference',\r\n                    field: 'blReference',\r\n                    colId: 'blReference',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellEditor: 'agLargeTextCellEditor',\r\n                    cellEditorParams: {\r\n                        maxLength: 255,\r\n                        rows: 4,\r\n                        cols: 12,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.blReferenceChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.blReferencePrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.blReferenceChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.blReferencePrivilege) {\r\n                                return params.data.blReferenceErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Discount/Premium',\r\n                    field: 'premiumDiscountTypeId',\r\n                    colId: 'premiumDiscountTypeId',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellEditorParams: () => {\r\n                        return {\r\n                            values: this.premiumDiscountType.map((basis) => basis.discountPremium),\r\n                            displayPropertyName: 'discountPremium',\r\n                            valuePropertyName: 'discountPremium',\r\n                            displayFormat: 'discountPremium',\r\n                        };\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege\r\n                            && params.data.discountPremiumTypeChange || params.data.isCancelled\r\n                            || params.data.isClosed || params.data.isInvoiced),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.discountPremiumTypeChange || params.data.isCancelled\r\n                            || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.newValue && params.oldValue !== params.newValue) {\r\n                            if (params.data.premiumDiscountTypeId) {\r\n                                this.isRequiredCell = (params.data.premiumDiscountTypeId) ? true : false;\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.discountPremiumTypeChange = true;\r\n                                this.contractValueCalculation(params);\r\n                            }\r\n                            if (this.gridApi && params.data.premiumDiscountTypeId) {\r\n                                this.gridApi.refreshCells({\r\n                                    rowNodes: [params.node],\r\n                                    force: true,\r\n                                });\r\n                            }\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (params.data.isInvoiced) {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'D/P Ccy',\r\n                    field: 'premiumDiscountCurrency',\r\n                    colId: 'premiumDiscountCurrency',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView),\r\n                            },\r\n                            options: this.masterdata.currencies,\r\n                            valueProperty: 'currencyCode',\r\n                            codeProperty: 'currencyCode',\r\n                            displayProperty: 'description',\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege\r\n                            && params.data.discountPremiumBasisChange || params.data.isCancelled\r\n                            || params.data.isClosed || params.data.isInvoiced),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.discountPremiumBasisChange || params.data.isCancelled\r\n                            || params.data.isClosed),\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.data.premiumDiscountTypeId\r\n                                    && !params.data.isInvoiced),\r\n                            },\r\n                            options: this.masterdata.currencies,\r\n                            valueProperty: 'currencyCode',\r\n                            codeProperty: 'currencyCode',\r\n                            displayProperty: 'description',\r\n                            isRequired: () => {\r\n                                return this.isRequiredCell ? true : false;\r\n                            },\r\n                            displayCode: true,\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (params.data.isInvoiced) {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'D/P Type',\r\n                    field: 'premiumDiscountBasis',\r\n                    colId: 'premiumDiscountBasis',\r\n                    hide: true,\r\n                    editable: (params) => (!params.context.componentParent.isSummaryView\r\n                        && params.data.premiumDiscountTypeId\r\n                        && !params.data.isInvoiced),\r\n                    cellEditor: 'agRichSelectCellEditor',\r\n                    cellEditorParams: {\r\n                        values: this.premiumDiscountBasis.map((basis) => basis.discountPremiumBasis),\r\n                        displayPropertyName: 'discountPremiumBasis',\r\n                        valuePropertyName: 'discountPremiumBasis',\r\n                        displayFormat: 'discountPremiumBasis',\r\n                        isRequired: this.isRequiredCell,\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRenderer: 'agRichSelectCellEditor',\r\n                    pinnedRowCellRendererParams: {\r\n                        values: this.premiumDiscountBasis.map((basis) => basis.discountPremiumBasis),\r\n                        displayPropertyName: 'discountPremiumBasis',\r\n                        valuePropertyName: 'discountPremiumBasis',\r\n                        displayFormat: 'discountPremiumBasis',\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege\r\n                            && params.data.discountPremiumBasisChange || params.data.isCancelled\r\n                            || params.data.isClosed || params.data.isInvoiced),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.discountPremiumBasisChange || params.data.isCancelled\r\n                            || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.newValue && params.oldValue !== params.newValue) {\r\n                            if (params.data.premiumDiscountBasis) {\r\n                                this.setAmmendedStatus(params);\r\n                                params.data.discountPremiumBasisChange = true;\r\n                            }\r\n                        }\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (params.data.isInvoiced) {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'D/P Value',\r\n                    field: 'premiumDiscountValue',\r\n                    colId: 'premiumDiscountValue',\r\n                    hide: true,\r\n                    editable: (params) => (!params.context.componentParent.isSummaryView\r\n                        && params.data.premiumDiscountBasis\r\n                        && !params.data.isInvoiced),\r\n                    cellEditor: 'atlasNumeric',\r\n                    cellEditorParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: false,\r\n                        isRequired: this.isRequiredCell,\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRenderer: 'atlasNumeric',\r\n                    pinnedRowCellRendererParams: {\r\n                        displayMask: CustomNumberMask(12, 10, false),\r\n                        isRightAligned: true,\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.data.premiumDiscountValue !== params.value) {\r\n                            this.isValueChanged = true;\r\n                        }\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.discountPremiumValueChange = true;\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView &&\r\n                            !params.context.componentParent.privileges.hasSuperTradePrivilege\r\n                            && params.data.discountPremiumValueChange || params.data.isCancelled\r\n                            || params.data.isClosed || params.data.isInvoiced),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.discountPremiumValueChange || params.data.isCancelled\r\n                            || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {\r\n                            if (params.data.isInvoiced) {\r\n                                return params.data.invoicingConditionErrorMessage;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Maturity Date',\r\n                    field: 'maturityDate',\r\n                    colId: 'maturityDate',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        isRequired: false,\r\n                    },\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.maturityDate || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.maturityDate || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        if (params.newValue && params.oldValue !== params.newValue) {\r\n                            this.setAmmendedStatus(params);\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Invoicing Status',\r\n                    field: 'invoicingStatus',\r\n                    colId: 'invoicingStatus',\r\n                    hide: true,\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    pinnedRowCellRendererFramework: AgGridAutocompleteComponent,\r\n                    pinnedRowCellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: (!params.context.componentParent.isSummaryView\r\n                                    && params.context.componentParent.privileges.invoicingStatusPrivilege),\r\n                            },\r\n                            options: this.masterdata.invoiceStatus,\r\n                            valueProperty: 'code',\r\n                            displayProperty: 'description',\r\n                        };\r\n                    },\r\n                    cellRendererFramework: AgGridAutocompleteComponent,\r\n                    cellRendererParams: (params) => {\r\n                        return {\r\n                            context: {\r\n                                componentParent: this,\r\n                                gridEditable: this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                            },\r\n                            options: this.masterdata.invoiceStatus,\r\n                            valueProperty: 'code',\r\n                            displayProperty: 'description',\r\n                        };\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        const filteredInvoiceStatus = this.masterdata.invoiceStatus.find((e) =>\r\n                            e.code === params.data.invoicingStatus);\r\n                        if (filteredInvoiceStatus) {\r\n                            this.setAmmendedStatus(params);\r\n                        }\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => !params.context.componentParent.isSummaryView\r\n                            && !params.context.componentParent.privileges.invoicingStatusPrivilege\r\n                            || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.invoicingStatusPrivilege || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    tooltip: (params) => {\r\n                        if (!params.context.componentParent.isSummaryView) {\r\n                            if (!params.context.componentParent.privileges.invoicingStatusPrivilege) {\r\n                                return params.data.invoiceStatusErrorMessage;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'isLocked',\r\n                    field: 'isLocked',\r\n                    colId: 'isLocked',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'lockMessage',\r\n                    field: 'lockMessage',\r\n                    colId: 'lockMessage',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Invoice Status',\r\n                    field: 'invoicingStatusId',\r\n                    colId: 'invoicingStatusId',\r\n                    hide: true,\r\n                    valueFormatter: this.invoiceStatus.bind(this),\r\n                },\r\n                {\r\n                    headerName: 'allocatedInvoiceStatus',\r\n                    field: 'allocatedInvoiceStatus',\r\n                    colId: 'allocatedInvoiceStatus',\r\n                    hide: true,\r\n                },\r\n                {\r\n                    headerName: 'Contract Sent Date',\r\n                    field: 'contractSentDate',\r\n                    colId: 'contractSentDate',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        mode: DateFormats.Date,\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractSentDateChange || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractSentDateChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.contractSentDateChange = true;\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Contract Returned Date',\r\n                    field: 'contractReturnedDate',\r\n                    colId: 'contractReturnedDate',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        mode: DateFormats.Date,\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractReturnedDateChange || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.contractReturnedDateChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.contractReturnedDateChange = true;\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Email Received Date',\r\n                    field: 'lastEmailReceivedDate',\r\n                    colId: 'lastEmailReceivedDate',\r\n                    hide: true,\r\n                    editable: (params) => this.tradeEditService.isGridCellEditable(params, this.privileges, this.lockedContracts),\r\n                    cellEditor: 'atlasDatePicker',\r\n                    cellClass: (params) => {\r\n                        if (params.node.rowPinned) {\r\n                            return 'pinnedRow';\r\n                        }\r\n                    },\r\n                    valueFormatter: this.uiService.dateFormatter,\r\n                    cellEditorParams: {\r\n                        mode: DateFormats.Date,\r\n                    },\r\n                    cellClassRules: {\r\n                        'ag-grid-disable-field': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.lastEmailReceivedDateChange || params.data.isCancelled || params.data.isClosed),\r\n                        'ag-grid-row-gray-background': ((params) => params.context.componentParent.isSummaryView\r\n                            && params.data.lastEmailReceivedDateChange || params.data.isCancelled || params.data.isClosed),\r\n                    },\r\n                    onCellValueChanged: (params) => {\r\n                        this.setAmmendedStatus(params);\r\n                        params.data.lastEmailReceivedDateChange = true;\r\n                    },\r\n                },\r\n            ];\r\n        this.pinnedTopRowData = this.getPinnedTopData();\r\n    }\r\n\r\n    numberFormatter(params) {\r\n        if (isNaN(params.value) || params.value === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);\r\n    }\r\n\r\n    onblDateValueChanged(params) {\r\n\r\n        if (params.newValue && params.oldValue !== params.newValue) {\r\n            this.setAmmendedStatus(params);\r\n            params.data.blDateChange = true;\r\n            this.rowValue = params.data.blDate;\r\n            const selectedSection = params.data.allocatedSectionId;\r\n            if (selectedSection) {\r\n                const filteredRow = this.bulkEditGridRows.find((e) =>\r\n                    e.sectionId === selectedSection,\r\n                );\r\n                if (filteredRow) {\r\n                    this.gridApi.forEachNode((rowData) => {\r\n                        if (rowData.data.sectionId === selectedSection && rowData.data.invoicingStatusId === InvoicingStatus.Uninvoiced) {\r\n                            rowData.setDataValue('blDate', this.rowValue);\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.subscriptions.push(this.lockService.isLockedContract(selectedSection).subscribe((lock: IsLocked) => {\r\n                        if (lock.isLocked) {\r\n                            const oldBlDateValue = this.bulkEditGridRows.find((e) =>\r\n                                e.sectionId === params.data.sectionId,\r\n                            );\r\n                            params.node.setDataValue('blDate', oldBlDateValue.blDate);\r\n                        } else {\r\n                            if (params.data.allocatedInvoiceStatus === InvoicingStatus.Uninvoiced) {\r\n                                params.data.isBlDateUpdatable = true;\r\n                            }\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    setAmmendedStatus(params) {\r\n        params.node.setDataValue('rowStatus', this.ammendedStatus);\r\n    }\r\n\r\n    getPinnedTopData() {\r\n        if (!this.isSummaryView) {\r\n            return [\r\n                {\r\n                    rowstatus: '',\r\n                    contractLabel: 'Master Row',\r\n                    status: '',\r\n                    contractDate: '',\r\n                    userId: '',\r\n                    departmentId: '',\r\n                    departmentDescription: '',\r\n                    buyerCounterpartyId: '',\r\n                    buyerDescription: '',\r\n                    sellerCounterpartyId: '',\r\n                    sellerDescription: '',\r\n                    counterpartyReference: '',\r\n                    commodity1: '',\r\n                    commodity2: '',\r\n                    commodity3: '',\r\n                    commodity4: '',\r\n                    commodity5: '',\r\n                    cropYear: '',\r\n                    weightCodeConversion: '',\r\n                    contractTermId: '',\r\n                    contractTermDescription: '',\r\n                    portTerm: '',\r\n                    arbitrationCode: '',\r\n                    arbitrationDescription: '',\r\n                    currencyCode: '',\r\n                    currencyDescription: '',\r\n                    priceUnitId: '',\r\n                    priceCodeConversion: '',\r\n                    price: '',\r\n                    contractValue: '',\r\n                    paymentTermsId: '',\r\n                    periodTypeId: '',\r\n                    deliveryPeriodStart: '',\r\n                    deliveryPeriodEnd: '',\r\n                    positionMonthType: '',\r\n                    portOrigin: '',\r\n                    portDestination: '',\r\n                    businessSector: '',\r\n                    businessSectorDescription: '',\r\n                    memorandum: '',\r\n                    contractIssuedDate: '',\r\n                    otherReference: '',\r\n                    vesselId: '',\r\n                    blDate: '',\r\n                    blReference: '',\r\n                    premiumDiscountBasis: '',\r\n                    premiumDiscountCurrency: '',\r\n                    premiumDiscountTypeId: '',\r\n                    premiumDiscountValue: '',\r\n                    maturityDate: '',\r\n                    sectionId: '',\r\n                    invoicingStatus: '',\r\n                    allocatedSectionId: '',\r\n                    contractType: '',\r\n                    contractSentDate: '',\r\n                    contractReturnedDate: '',\r\n                    lastEmailReceivedDate: '',\r\n                },\r\n            ];\r\n        }\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n            if (params.colDef) {\r\n                if (params.colDef.colId === 'premiumDiscountTypeId') {\r\n                    if (params.data && params.data.premiumDiscountValue === 0) {\r\n                        params.node.setDataValue('premiumDiscountValue', this.requiredString);\r\n                    }\r\n                    if (params.data && !params.data.premiumDiscountBasis) {\r\n                        params.node.setDataValue('premiumDiscountBasis', this.requiredString);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onCellClicked(params) {\r\n        if (this.bulkEditGridOptions.onCellClicked) {\r\n            if (params.colDef.colId === 'premiumDiscountValue' ||\r\n                params.colDef.colId === 'premiumDiscountBasis') {\r\n                if (params.oldValue === 'Required*') {\r\n                    params.node.setDataValue('premiumDiscountCurrency', '');\r\n                    params.node.setDataValue('premiumDiscountValue', '');\r\n                    params.node.setDataValue('premiumDiscountBasis', '');\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.isSave = true;\r\n        this.gridApi.stopEditing();\r\n        const errorMessage = this.validateGridData();\r\n        this.blockingErrorMessage.emit(errorMessage);\r\n    }\r\n\r\n    validateGridData() {\r\n        let isRowDirty: boolean;\r\n        let isRowDataValid: boolean;\r\n        let errorMessage: string = this.noErrorMessage;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            isRowDirty = true;\r\n            isRowDataValid = false;\r\n            this.columnDefs.forEach((column) => {\r\n                if (!isRowDataValid) {\r\n                    isRowDataValid = this.validateEmpty(column.colId, rowData);\r\n                }\r\n            });\r\n            if (isRowDataValid) {\r\n                if (this.isNullEmptyOrRequiredString(rowData.data.contractDate) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.userId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.departmentId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.buyerCounterpartyId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.sellerCounterpartyId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.commodityId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.contractTermId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.portTermId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.currencyCode) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.priceUnitId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.paymentTermsId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.periodTypeId) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodStart) ||\r\n                    this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodEnd) ||\r\n                    rowData.data.contractPrice === this.requiredString || rowData.data.contractPrice === '' ||\r\n                    rowData.data.premiumDiscountCurrency === this.requiredString ||\r\n                    rowData.data.premiumDiscountTypeId === this.requiredString ||\r\n                    rowData.data.validationError === true ||\r\n                    rowData.data.premiumDiscountValue === this.requiredString) {\r\n                    if (!(this.isNullEmptyOrRequiredString(rowData.data.contractDate) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.userId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.departmentId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.buyerCounterpartyId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.sellerCounterpartyId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.commodityId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.contractTermId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.portTermId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.currencyCode) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.priceUnitId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.paymentTermsId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.periodTypeId) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodStart) &&\r\n                        this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodEnd) &&\r\n                        rowData.data.contractPrice !== this.requiredString &&\r\n                        rowData.data.validationError === false &&\r\n                        rowData.data.premiumDiscountCurrency !== this.requiredString &&\r\n                        rowData.data.premiumDiscountTypeId !== this.requiredString &&\r\n                        rowData.data.premiumDiscountValue !== this.requiredString)) {\r\n                        errorMessage = 'Grid data is invalid. Please resolve the errors.';\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return isRowDirty === true ? errorMessage : '';\r\n    }\r\n\r\n    isNullEmptyOrRequiredString(value) {\r\n        return value === null || value === '' || value === this.requiredString;\r\n    }\r\n\r\n    validateEmpty(colId: string, rowData: any) {\r\n        if (rowData.data[colId] && rowData.data[colId] !== null\r\n            && rowData.data[colId].toString().trim() !== '' && rowData.data[colId] !== 'Required*') {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getGridData() {\r\n        const updatedSections = new Array<SectionToUpdate>();\r\n        const updatedPhysicalContracts = new Array<PhysicalContractToUpdate>();\r\n        const updatedPhysicalTradeList = new Array<ContractsForBulkFunctions>();\r\n        let isRowDataValid: boolean;\r\n        this.gridApi.forEachNode((rowdata: agGrid.RowNode) => {\r\n            isRowDataValid = false;\r\n            this.columnDefs.forEach((column: agGrid.ColDef) => {\r\n                if (column.colId === 'cropYear') {\r\n                    this.validateCropYearValue(rowdata);\r\n                }\r\n                if (column.colId === 'premiumDiscountBasis') {\r\n                    this.validateDiscountPremiumType(rowdata);\r\n                }\r\n                if (column.colId === 'premiumDiscountTypeId') {\r\n                    this.validateDiscountPremiumBasis(rowdata);\r\n                }\r\n                if (column.colId === 'periodTypeId') {\r\n                    rowdata.data.periodTypeId = this.validatePeriodType(rowdata);\r\n                }\r\n                if (column.colId === 'invoicingStatus') {\r\n                    rowdata.data.invoicingStatusId = Number(rowdata.data.invoicingStatus);\r\n                }\r\n                if (column.colId === 'bldate' || column.colId === 'deliveryPeriodStart' || column.colId === 'deliveryPeriodEnd' ||\r\n                    column.colId === 'contractIssuedDate' || column.colId === 'contractSentDate' || column.colId === 'contractReturnedDate'\r\n                    || column.colId === 'lastEmailReceivedDate') {\r\n                    this.validateDateFunctions(rowdata);\r\n                }\r\n                if (!isRowDataValid) {\r\n                    isRowDataValid = this.validateEmpty(column.colId, rowdata);\r\n                }\r\n            });\r\n            updatedSections.push(rowdata.data);\r\n            updatedPhysicalContracts.push(rowdata.data);\r\n            updatedPhysicalTradeList.push(rowdata.data);\r\n        });\r\n        const updatedContracts: PhysicalTradeBulkEdit = new PhysicalTradeBulkEdit(this.company, updatedPhysicalContracts, updatedSections);\r\n        this.updatedContractRows = updatedPhysicalTradeList;\r\n        return updatedContracts;\r\n    }\r\n\r\n    validatePeriodType(rowData) {\r\n        const pertiodType = this.masterdata.periodTypes.find((x) => x.periodTypeDescription ===\r\n            rowData.data.periodTypeDescription);\r\n        if (pertiodType) {\r\n            rowData.data.periodTypeId = pertiodType.periodTypeId;\r\n        }\r\n        return rowData.data.periodTypeId;\r\n    }\r\n\r\n    validateDateFunctions(rowdata) {\r\n        const local = this.dateLocale || moment.locale();\r\n        const blDateValue = rowdata.data.blDate ? moment(rowdata.data.blDate, 'YYYY-MM-DD').toDate() : null;\r\n        rowdata.data.blDate = (blDateValue) ? moment.utc(moment.parseZone(blDateValue).format('YYYY-MM-DD')).locale(local) : null;\r\n        const periodFromValue = rowdata.data.deliveryPeriodStart ? moment(rowdata.data.deliveryPeriodStart, 'YYYY-MM-DD').toDate() : null;\r\n        rowdata.data.deliveryPeriodStart = moment.utc(moment.parseZone(periodFromValue).format('YYYY-MM-DD')).locale(local);\r\n        const periodToValue = rowdata.data.deliveryPeriodEnd ? moment(rowdata.data.deliveryPeriodEnd, 'YYYY-MM-DD').toDate() : null;\r\n        rowdata.data.deliveryPeriodEnd = moment.utc(moment.parseZone(periodToValue).format('YYYY-MM-DD')).locale(local);\r\n        const contractIssuedDate = rowdata.data.contractIssuedDate ? moment(rowdata.data.contractIssuedDate, 'YYYY-MM-DD').toDate() : null;\r\n        rowdata.data.contractIssuedDate = moment.utc(moment.parseZone(contractIssuedDate).format('YYYY-MM-DD')).locale(local);\r\n        const contractSentDate = rowdata.data.contractSentDate ? moment(rowdata.data.contractSentDate, 'YYYY-MM-DD').toDate() : null;\r\n        rowdata.data.contractSentDate = moment.utc(moment.parseZone(contractSentDate).format('YYYY-MM-DD')).locale(local);\r\n        const contractReturnedDate = rowdata.data.contractReturnedDate\r\n            ? moment(rowdata.data.contractReturnedDate, 'YYYY-MM-DD').toDate() : null;\r\n        rowdata.data.contractReturnedDate = moment.utc(moment.parseZone(contractReturnedDate).format('YYYY-MM-DD')).locale(local);\r\n        const lastEmailReceivedDate = rowdata.data.lastEmailReceivedDate\r\n            ? moment(rowdata.data.lastEmailReceivedDate, 'YYYY-MM-DD').toDate() : null;\r\n        rowdata.data.lastEmailReceivedDate = moment.utc(moment.parseZone(lastEmailReceivedDate).format('YYYY-MM-DD')).locale(local);\r\n    }\r\n\r\n    updateAllRow(rowData) {\r\n        this.bulkEditGridColumns.forEach((x) => {\r\n            this.columnName = x.field;\r\n            let columnValue;\r\n            const columnDefs = this.colDefSelected.find((item) => item.columnName === this.columnName);\r\n            columnValue = (columnDefs) ? columnDefs.columnName : null;\r\n\r\n            if (rowData[this.columnName] && rowData[this.columnName] !== this.bulkEditField) {\r\n                this.gridApi.forEachNode((rowNode) => {\r\n                    let isContractLocked = false;\r\n                    if (this.lockedContracts) {\r\n                        const lockedContract = this.lockedContracts.find((id) => id === rowNode.data.sectionId);\r\n                        // selected contract is locked  by the user. So make grideditable to false;\r\n                        if (lockedContract) {\r\n                            isContractLocked = true;\r\n                        }\r\n                    }\r\n\r\n                    if (!rowNode.data.isCancelled && !rowNode.data.isClosed && !isContractLocked) {\r\n                        if (this.columnName === 'deliveryPeriodStart' || this.columnName === 'deliveryPeriodEnd') {\r\n                            if (rowNode.data.blDate === null) {\r\n                                rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                            }\r\n                        } else if (this.columnName === 'buyerCounterpartyId' || this.columnName === 'buyerDescription') {\r\n                            if (rowNode.data.invoicingStatusId === InvoiceStatus.NotInvoiced) {\r\n                                if (rowNode.data.contractType === 'Sale') {\r\n                                    rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                                }\r\n                            }\r\n                        } else if (this.columnName === 'sellerCounterpartyId' || this.columnName === 'sellerDescription') {\r\n                            if (rowNode.data.invoicingStatusId === InvoiceStatus.NotInvoiced) {\r\n                                if (rowNode.data.contractType === 'Purchase') {\r\n                                    rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                                }\r\n                            }\r\n                        } else if (this.columnName === 'contractDate' || this.columnName === 'userId') {\r\n                            if (rowNode.data.sectionOriginId === null) {\r\n                                rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                            }\r\n                        } else if (this.columnName === 'departmentId' || this.columnName === 'departmentDescription') {\r\n                            if (rowNode.data.invoicingStatusId === InvoiceStatus.NotInvoiced) {\r\n                                if (rowNode.data.allocatedSectionId === null) {\r\n                                    rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                                }\r\n                            }\r\n                        } else if (this.columnName === 'blDate') {\r\n                            if (rowNode.data.invoicingStatusId === InvoiceStatus.NotInvoiced) {\r\n                                if (rowNode.data.contractType === 'Purchase') {\r\n                                    rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                                } else if (rowNode.data.contractType === 'Sale' && rowNode.data.allocatedSectionId !== null) {\r\n                                    rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                                }\r\n                            }\r\n                        } else if (this.columnName === columnValue) {\r\n                            if (rowNode.data.invoicingStatusId === InvoiceStatus.NotInvoiced) {\r\n                                rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                            }\r\n                        } else {\r\n                            if (this.columnName !== 'rowStatus') {\r\n                                rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    validateCropYearValue(rowdata) {\r\n        if (rowdata.data.cropYear) {\r\n            const cropYearValues = getCropYearValue(rowdata.data.cropYear);\r\n            rowdata.data.cropYearFrom = cropYearValues.from;\r\n            rowdata.data.cropYearTo = cropYearValues.to;\r\n        }\r\n    }\r\n\r\n    validateDiscountPremiumBasis(rowdata) {\r\n        if (rowdata.data.premiumDiscountBasis) {\r\n            const value = this.premiumDiscountBasis.find(\r\n                (basis) => basis.discountPremiumBasis === rowdata.data.premiumDiscountBasis);\r\n            rowdata.data.premiumDiscountBasis = value.discountPremiumBasisId;\r\n        }\r\n    }\r\n\r\n    validateDiscountPremiumType(rowdata) {\r\n        if (rowdata.data.premiumDiscountTypeId) {\r\n            const value = this.premiumDiscountType.find(\r\n                (basis) => basis.discountPremium === rowdata.data.premiumDiscountTypeId);\r\n            rowdata.data.premiumDiscountTypeId = value.discountPremiumTypeId;\r\n        }\r\n    }\r\n\r\n    premiumDiscountBasisFormatter(params) {\r\n        if (params.premiumDiscountBasis) {\r\n            const selectedType = this.premiumDiscountBasis.find((x) =>\r\n                x.discountPremiumBasisId === params.premiumDiscountBasis);\r\n            params.premiumDiscountBasis = (selectedType ? selectedType.discountPremiumBasis : '');\r\n        }\r\n        return params.premiumDiscountBasis;\r\n    }\r\n\r\n    premiumDiscountTypeFormatter(params) {\r\n        if (params.premiumDiscountTypeId) {\r\n            const selectedType = this.premiumDiscountType.find((x) =>\r\n                x.discountPremiumTypeId === params.premiumDiscountTypeId);\r\n            params.premiumDiscountTypeId = (selectedType ? selectedType.discountPremium : '');\r\n        }\r\n        return params.premiumDiscountTypeId;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnApi.autoSizeAllColumns();\r\n        params.columnDefs = this.bulkEditGridColumns;\r\n        this.columnDefs = params.columnDefs;\r\n        this.bulkEditGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridApi.showNoRowsOverlay();\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    departmentDescriptionFormatter(params) {\r\n        if (params.data.departmentId) {\r\n            const departmentDescription = params.context.componentParent.masterdata.departments.find((department) =>\r\n                department.departmentId === params.data.departmentId);\r\n            params.data.departmentDescription = (departmentDescription ? departmentDescription.description : '');\r\n        }\r\n        return params.data.departmentDescription;\r\n    }\r\n\r\n    commodityValueGetter(params) {\r\n        if (params.data.commodityId) {\r\n            const commodtityValues = params.context.componentParent.masterdata.commodities.find((commoidty) =>\r\n                commoidty.commodityId === params.data.commodityId);\r\n            params.data.commodity2 = (commodtityValues ? commodtityValues.commodityOrigin : '');\r\n            params.data.commodity3 = (commodtityValues ? commodtityValues.commodityGrade : '');\r\n            params.data.commodity4 = (commodtityValues ? commodtityValues.commodityLvl4 : '');\r\n            params.data.commodity5 = (commodtityValues ? commodtityValues.commodityLvl5 : '');\r\n        }\r\n        return params.data.commodity2;\r\n    }\r\n\r\n    positionMonthTypeFormatter(params) {\r\n        if (params.data.positionMonthType !== null && params.data.positionMonthType !== undefined) {\r\n            if (params.data.monthPositionIndex !== null && params.data.monthPositionIndex !== undefined) {\r\n                const monthType = PositionMonthTypes[params.data.positionMonthType];\r\n                const positionMonthValue = params.context.componentParent.masterdata.positionMonthTypes.filter((position) =>\r\n                    position.positionMonthTypeDescription.startsWith(monthType) &&\r\n                    position.positionMonthTypeCode.month === params.data.monthPositionIndex);\r\n                params.node.setDataValue('positionMonthValue', positionMonthValue[0].value);\r\n            }\r\n        }\r\n    }\r\n\r\n    businessSectorDescriptionFormatter(params) {\r\n        if (params.data.businessSectorId) {\r\n            const businessSectorDescription = params.context.componentParent.masterdata.businessSectors.find((businessSector) =>\r\n                businessSector.sectorId === params.data.businessSectorId);\r\n            params.data.businessSectorDescription = (businessSectorDescription ? businessSectorDescription.description : '');\r\n        }\r\n        return params.data.businessSectorDescription;\r\n    }\r\n\r\n    buyerDescriptionFormatter(params) {\r\n        if (params.data.buyerCounterpartyId) {\r\n            const selectedBuyerCode = params.context.componentParent.masterdata.counterparties.find((buyer) =>\r\n                buyer.counterpartyID === params.data.buyerCounterpartyId);\r\n            params.data.buyerDescription = (selectedBuyerCode ? selectedBuyerCode.description : '');\r\n        }\r\n        return params.data.buyerDescription;\r\n    }\r\n\r\n    sellerDescriptionFormatter(params) {\r\n        if (params.data.sellerCounterpartyId) {\r\n            const selectedSellerCode = params.context.componentParent.masterdata.counterparties.find((seller) =>\r\n                seller.counterpartyID === params.data.sellerCounterpartyId);\r\n            params.data.sellerDescription = (selectedSellerCode ? selectedSellerCode.description : '');\r\n        }\r\n        return params.data.sellerDescription;\r\n    }\r\n\r\n    contractTermDescriptionFormatter(params) {\r\n        if (params.data.contractTermId) {\r\n            const contractTerms = params.context.componentParent.masterdata.contractTerms.find((contractTerm) =>\r\n                contractTerm.contractTermId === params.data.contractTermId);\r\n            params.data.contractTermDescription = (contractTerms ? contractTerms.description : '');\r\n        }\r\n        return params.data.contractTermDescription;\r\n    }\r\n\r\n    arbitrationDescriptionFormatter(params) {\r\n        if (params.data.arbitrationId) {\r\n            const arbitration = params.context.componentParent.masterdata.arbitrations.find((description) =>\r\n                description.arbitrationId === params.data.arbitrationId,\r\n            );\r\n            params.data.arbitrationDescription = (arbitration ? arbitration.description : '');\r\n        }\r\n        return params.data.arbitrationDescription;\r\n\r\n    }\r\n\r\n    currencyDescriptionFormatter(params) {\r\n        if (params.data.currencyCode) {\r\n            const currency = params.context.componentParent.masterdata.currencies.find((description) =>\r\n                description.currencyCode === params.data.currencyCode,\r\n            );\r\n            params.data.currencyDescription = (currency ? currency.description : '');\r\n        }\r\n        return params.data.currencyDescription;\r\n    }\r\n\r\n    selectedContractsToEdit(isSummaryView: boolean, contracts: ContractsForBulkFunctions[], privileges: TradePropertyPrivilege) {\r\n        this.isSummaryView = isSummaryView;\r\n        contracts.forEach((contract) => this.periodTypeFormatter(contract));\r\n        this.bulkEditGridRows = contracts;\r\n        contracts.forEach((contract) => this.bindValueToControls(contract));\r\n        this.privileges = privileges;\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    periodTypeFormatter(rowData) {\r\n        if (rowData.periodTypeId) {\r\n            const periodTypeDescription = this.masterdata.periodTypes.find((x) => x.periodTypeId ===\r\n                rowData.periodTypeId);\r\n            if (periodTypeDescription) {\r\n                rowData.periodTypeDescription = periodTypeDescription.periodTypeDescription;\r\n            }\r\n        }\r\n        return rowData.periodTypeDescription;\r\n    }\r\n\r\n    bindValueToControls(contract) {\r\n        this.maturtiyDateCalculation(contract);\r\n        this.premiumDiscountBasisFormatter(contract);\r\n        this.premiumDiscountTypeFormatter(contract);\r\n        if (contract.invoicingStatusId) {\r\n            contract.invoicingStatus = contract.invoicingStatusId.toString();\r\n        }\r\n        // update islocked property\r\n        if (this.lockedContracts) {\r\n            const lockedContract = this.lockedContracts.find((item) => item.enumEntityId === contract.sectionId);\r\n            // selected contract is locked  by the user.\r\n            if (lockedContract) {\r\n                contract.islocked = true;\r\n                contract.lockMessage = lockedContract.enumEntityValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    onContractPriceChage() {\r\n        return true;\r\n    }\r\n    contractValueCalculation(params: any) {\r\n        let priceCodeConversion: number;\r\n        let weightCodeConversion: number;\r\n        const contractPrice = params.data.contractPrice ? params.data.contractPrice.toString().replace(/,/g, '') : null;\r\n        const contractPriceDecimal: AtlasNumber = new AtlasNumber(contractPrice);\r\n        const quantity = params.data.quantity ? params.data.quantity.toString().replace(/,/g, '') : null;\r\n        const quantityDecimal: AtlasNumber = new AtlasNumber(quantity);\r\n        // weight Code Conversion calculation\r\n\r\n        const filteredWeight = this.masterdata.weightUnits;\r\n        const selectedWeight = filteredWeight.find((e) =>\r\n            e.weightUnitId === params.data.weightUnitId || e.weightCode === params.data.weightUnitCode);\r\n        if (selectedWeight) {\r\n            weightCodeConversion = selectedWeight.conversionFactor;\r\n        }\r\n\r\n        // Price Code Conversion calculation\r\n\r\n        const filteredPrice = this.masterdata.priceUnits;\r\n        const selectedPrice = filteredPrice.find((e) =>\r\n            e.priceUnitId === params.data.priceUnitId || e.priceUnitId === params.data.priceCode);\r\n        if (selectedPrice) {\r\n            priceCodeConversion = selectedPrice.conversionFactor;\r\n        }\r\n\r\n        const calculatedContractValue = getContractValue\r\n            // tslint:disable-next-line:max-line-length\r\n            (params.data.premiumDiscountBasis, params.data.currencyCode, params.data.premiumDiscountBasis, params.data.premiumDiscountTypeId, weightCodeConversion, priceCodeConversion, contractPriceDecimal, quantityDecimal, params.data.premiumDiscountValue, false);\r\n        if (calculatedContractValue) {\r\n            params.node.setDataValue('contractValue', calculatedContractValue);\r\n        }\r\n    }\r\n\r\n    maturtiyDateCalculation(contract: ContractsForBulkFunctions) {\r\n        let creditAgainst: string;\r\n        let creditDays: number;\r\n        const companyDate = this.companyManager.getCurrentCompanyDate().toDate();\r\n        const filteredcreditAgainst = this.masterdata.paymentTerms;\r\n\r\n        const selectedcreditAgainst = filteredcreditAgainst.find((e) =>\r\n            e.paymentTermsId === contract.paymentTermsId);\r\n        if (selectedcreditAgainst) {\r\n            creditAgainst = selectedcreditAgainst.creditAgainst;\r\n        }\r\n        const filteredcreditDays = this.masterdata.paymentTerms;\r\n\r\n        const selectedcreditDays = filteredcreditDays.find((e) =>\r\n            e.paymentTermsId === contract.paymentTermsId);\r\n        if (selectedcreditDays) {\r\n            creditDays = selectedcreditAgainst.creditDays;\r\n        }\r\n        const deliveryPeriodStart = new Date(contract.deliveryPeriodStart);\r\n        const deliveryPeriodEnd = new Date(contract.deliveryPeriodEnd);\r\n        const calculatedMaturityDate =\r\n            getMaturityDate(creditAgainst, creditDays, companyDate, contract.blDate, deliveryPeriodStart, deliveryPeriodEnd);\r\n        if (calculatedMaturityDate) {\r\n            contract.maturityDate = calculatedMaturityDate;\r\n        }\r\n    }\r\n\r\n    // this will be removed and values will be fetched from DB once the configuration in step3 is completed\r\n    populateListofFields() {\r\n        this.colDefSelected.push({\r\n            id: 1,\r\n            columnName: 'departmentId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 2,\r\n            columnName: 'departmentDescription',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 3,\r\n            columnName: 'buyerCounterpartyId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 4,\r\n            columnName: 'buyerDescription',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 5,\r\n            columnName: 'sellerCounterpartyId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 6,\r\n            columnName: 'sellerDescription',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 7,\r\n            columnName: 'commodityId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 8,\r\n            columnName: 'commodity1',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 9,\r\n            columnName: 'commodity2',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 10,\r\n            columnName: 'commodity3',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 11,\r\n            columnName: 'commodity4',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 12,\r\n            columnName: 'commodity5',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 16,\r\n            columnName: 'contractTermId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 17,\r\n            columnName: 'contractTermDescription',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 18,\r\n            columnName: 'portTermId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 20,\r\n            columnName: 'currencyCode',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 21,\r\n            columnName: 'currencyDescription',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 22,\r\n            columnName: 'priceUnitId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 23,\r\n            columnName: 'contractValue',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 24,\r\n            columnName: 'contractPrice',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 25,\r\n            columnName: 'premiumDiscountCurrency',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 26,\r\n            columnName: 'premiumDiscountTypeId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 27,\r\n            columnName: 'premiumDiscountValue',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 28,\r\n            columnName: 'businessSectorId',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 29,\r\n            columnName: 'businessSectorDescription',\r\n\r\n        });\r\n        this.colDefSelected.push({\r\n            id: 30,\r\n            columnName: 'blDate',\r\n        });\r\n    }\r\n\r\n    isContractLockedRowStyle(node) {\r\n        if (node.data.islocked) {\r\n            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };\r\n        }\r\n    }\r\n\r\n    getContractTooltipMessage(params): string {\r\n        if (params.data.islocked) {\r\n            return params.data.lockMessage;\r\n        }\r\n    }\r\n    invoiceStatus(params) {\r\n        if (params.data.invoicingStatusId) {\r\n            return InvoicingStatus[params.data.invoicingStatusId].toString();\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","module.exports = \"<button mat-button\\r\\n        class=\\\"button\\\"\\r\\n        [disabled]=\\\"params.context.componentParent.isSummaryView\\\"\\r\\n        (click)=\\\"onApplyButtonClicked()\\\">\\r\\n    APPLY\\r\\n</button>\"","module.exports = \".button {\\n  width: 110%;\\n  height: 95%;\\n  margin: 0%; }\\n\"","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\n@Component({\r\n    selector: 'atlas-master-row-apply',\r\n    templateUrl: './master-row-apply.component.html',\r\n    styleUrls: ['./master-row-apply.component.scss'],\r\n})\r\nexport class MasterRowApplyComponent implements ICellRendererAngularComp {\r\n    public params: any;\r\n    rowIndex: any;\r\n    pinnedRowData: any;\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.rowIndex = params.rowIndex;\r\n        this.pinnedRowData = params.data;\r\n    }\r\n    constructor() { }\r\n    ngOnInit() {\r\n    }\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n    onApplyButtonClicked() {\r\n        if (!this.params.context.componentParent.isSummaryView) {\r\n            this.params.context.componentParent.updateAllRow(this.pinnedRowData);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"bulkEditionFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Contracts</ng-template>\\r\\n                <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\\r\\n                <atlas-group-function-contracts #contractSelection\\r\\n                                                (contractSelected)=\\\"isContractSelected($event)\\\">\\r\\n                </atlas-group-function-contracts>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onContractSelectionDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onContractSelectionNextButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isContractsNextDisabled\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Fields</ng-template>\\r\\n                <atlas-trade-bulk-fields #tradeBulkFields\\r\\n                                         (selectedFieldsToEdit)=\\\"getSelectedFieldsToEdit($event)\\\">\\r\\n                </atlas-trade-bulk-fields>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onFieldSelectionDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onFieldSelectionPreviousButtonClicked()\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onFieldSelectionNextButtonClicked()\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Details</ng-template>\\r\\n                <atlas-edition-matrix #editionMatrix\\r\\n                                      (blockingErrorMessage)=saveBlockingMessage($event)></atlas-edition-matrix>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onEditionMatrixDiscardButtonClicked()\\\"\\r\\n                                [disabled]=\\\"isSaveInProgress\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onEditionMatrixPreviousButtonClicked()\\\"\\r\\n                                [disabled]=\\\"isSaveInProgress\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onBulkEditionSaveButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isSaveInProgress\\\">\\r\\n                                SAVE\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Summary</ng-template>\\r\\n                <atlas-edition-matrix #summaryGrid></atlas-edition-matrix>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onSummaryEditButtonClicked()\\\"\\r\\n                                [disabled]=\\\"!fetchingInProgress\\\"\\r\\n                                mat-button>\\r\\n                            EDIT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onCloseButtonClicked()\\\">\\r\\n                                CLOSE\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \"\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { PhysicalTradeBulkEdit } from '../../../../shared/entities/physical-trade-bulk-edit';\r\nimport { TradePropertyPrivilege } from '../../../../shared/entities/trade-property-privilege.entity';\r\nimport { TradeApprovalStatus } from '../../../../shared/enums/trade-approval-status.enum';\r\nimport { TradeBulkEditFields } from '../../../../shared/enums/trade-bulk-edit-fields.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TradeEditService } from '../../../../shared/services/trade-edit.service';\r\nimport { ContractsForBulkFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { TradeFieldsForBulkEdit } from '../../../../shared/services/trading/dtos/tradeFieldsForBulkEdit';\r\nimport { TradeActionsService } from '../../../services/trade-actions.service';\r\nimport { GroupFunctionContractsComponent } from '../group-function-contracts/group-function-contracts.component';\r\nimport { GroupFunctionWarningComponent } from '../group-function-warning/group-function-warning.component';\r\nimport { EditionMatrixComponent } from './edition-matrix/edition-matrix.component';\r\nimport { TradeBulkFieldsComponent } from './trade-bulk-fields/trade-bulk-fields.component';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-bulk-edit',\r\n    templateUrl: './trade-bulk-edit.component.html',\r\n    styleUrls: ['./trade-bulk-edit.component.scss'],\r\n})\r\nexport class TradeBulkEditComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('contractSelection') contractSelection: GroupFunctionContractsComponent;\r\n    @ViewChild('groupFunctionWarning') groupFunctionWarning: GroupFunctionWarningComponent;\r\n    @ViewChild('editionMatrix') editionMatrix: EditionMatrixComponent;\r\n    @ViewChild('tradeBulkFields') tradeBulkFields: TradeBulkFieldsComponent;\r\n    @ViewChild('summaryGrid') summaryGrid: EditionMatrixComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    matrixGridFormComponents: EditionMatrixComponent;\r\n    selectedContractsForBulkFunctions: ContractsForBulkFunctions[];\r\n    tradeFieldList: TradeFieldsForBulkEdit[] = [];\r\n    updatedContracts: PhysicalTradeBulkEdit;\r\n    privileges: TradePropertyPrivilege;\r\n    company: string;\r\n    bulkEditionFormGroup: FormGroup;\r\n    isContractsNextDisabled: boolean = true;\r\n    currentStep: number = 0;\r\n    errorMessage: string;\r\n    noErrorMessage: string = 'noError';\r\n    isSaveInProgress: boolean;\r\n    selectedSectionIds: number[] = [];\r\n    selectedFieldsToEdit: string[] = [];\r\n    unlocking: number[] = [];\r\n    private getTradesForSubscription: Subscription;\r\n    // Additional Editable Columns in Edition Matrix Grid\r\n    departmentDescriptionColumn: string = 'departmentDescription';\r\n    buyerDescriptionColumn: string = 'buyerDescription';\r\n    sellerDescriptionColumn: string = 'sellerDescription';\r\n    commodityColumn = ['commodity2', 'commodity3', 'commodity4', 'commodity5'];\r\n    contractTermDescriptionColumn: string = 'contractTermDescription';\r\n    arbitrationDescriptionColumn: string = 'arbitrationDescription';\r\n    currencyDescriptionColumn: string = 'currencyDescription';\r\n    businessSectorDescription: string = 'businessSectorDescription';\r\n    isEditButtonClicked: boolean;\r\n    fetchingInProgress: boolean;\r\n    isDepartmentselected: boolean;\r\n    isBuyerSelected: boolean;\r\n    isSellerSelected: boolean;\r\n    isCommoditySelected: boolean;\r\n    isContractTermSelected: boolean;\r\n    isArbitrationSelected: boolean;\r\n    isCurrencySelected: boolean;\r\n    isbusinessSectorSelected: boolean;\r\n    isStatusApproved: boolean;\r\n    approvalStatus: boolean;\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        private lockService: LockService,\r\n        private tradingService: TradingService,\r\n        private tradeEditService: TradeEditService,\r\n        protected snackbarService: SnackbarService,\r\n        private tradeActionService: TradeActionsService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.bulkEditionFormGroup = this.formBuilder.group({\r\n            contractSelection: this.contractSelection.getFormGroup(),\r\n            editionMatrix: this.editionMatrix.getFormGroup(),\r\n            summaryGrid: this.summaryGrid.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.contractSelection, this.editionMatrix, this.summaryGrid);\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    isContractSelected(contractSelected: boolean) {\r\n        this.isContractsNextDisabled = !contractSelected;\r\n    }\r\n\r\n    onContractSelectionNextButtonClicked() {\r\n        this.editionMatrix.lockedContracts = this.contractSelection.lockedContracts;\r\n        this.contractsSelected(this.isEditButtonClicked = false);\r\n        this.stepper.next();\r\n    }\r\n\r\n    contractsSelected(buttonClicked) {\r\n        this.isEditButtonClicked = buttonClicked;\r\n        const selectedContracts = this.contractSelection.selectedContractsForBulkFunctions as ContractsForBulkFunctions[];\r\n        const privileges = this.tradeActionService.getTradePropertyPrivileges();\r\n        this.privileges = privileges as TradePropertyPrivilege;\r\n        this.selectedSectionIds = [];\r\n        selectedContracts.forEach((element) => {\r\n            this.selectedSectionIds.push(element.sectionId);\r\n        });\r\n        if (this.selectedSectionIds) {\r\n            this.fetchingInProgress = false;\r\n            this.subscriptions.push(this.tradingService.getTradesForBulkEdit(this.selectedSectionIds)\r\n                .pipe(catchError((error) => {\r\n                    return throwError(error);\r\n                }),\r\n                      finalize(() => {\r\n                        this.fetchingInProgress = true;\r\n                    })).subscribe((data) => {\r\n                        if (data) {\r\n                            this.selectedContractsForBulkFunctions = data.value;\r\n                            if (this.isEditButtonClicked) {\r\n                                this.afterContractsFetched();\r\n                            }\r\n                        }\r\n                    }));\r\n        }\r\n    }\r\n\r\n    getSelectedFieldsToEdit(selectedFields: TradeFieldsForBulkEdit[]) {\r\n        this.tradeFieldList = selectedFields;\r\n    }\r\n\r\n    onFieldSelectionNextButtonClicked() {\r\n        this.populateEditableColumns();\r\n        this.checkAdditionalFieldsSelected();\r\n        this.editionMatrix.selectedContractsToEdit(false, this.selectedContractsForBulkFunctions, this.privileges);\r\n        this.editionMatrix.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, true);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible('rowStatus', true);\r\n        this.summaryGrid.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, true);\r\n        this.isDescriptionColumnsVisible();\r\n        this.stepper.next();\r\n    }\r\n\r\n    populateEditableColumns() {\r\n        this.tradeFieldList = this.tradeFieldList.filter((e) => e.isChecked === true);\r\n        const selectedFieldRows = this.tradeFieldList as TradeFieldsForBulkEdit[];\r\n        this.selectedFieldsToEdit = [];\r\n        this.selectedFieldsToEdit = selectedFieldRows.map((row) => row.bulkEditFieldName);\r\n    }\r\n\r\n    checkAdditionalFieldsSelected() {\r\n        const departmentColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.DepartmentId);\r\n        this.isDepartmentselected = (departmentColumn) ? departmentColumn.isChecked : false;\r\n        const buyerColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.BuyerId);\r\n        this.isBuyerSelected = (buyerColumn) ? buyerColumn.isChecked : false;\r\n        const sellerColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.SellerId);\r\n        this.isSellerSelected = (sellerColumn) ? sellerColumn.isChecked : false;\r\n        const commodityColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.CommodityId);\r\n        this.isCommoditySelected = (commodityColumn) ? commodityColumn.isChecked : false;\r\n        const contractTermColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.ContractTermId);\r\n        this.isContractTermSelected = (contractTermColumn) ? contractTermColumn.isChecked : false;\r\n        const arbitrationColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.ArbitrationId);\r\n        this.isArbitrationSelected = (arbitrationColumn) ? arbitrationColumn.isChecked : false;\r\n        const currencyColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.CurrencyCode);\r\n        this.isCurrencySelected = (currencyColumn) ? currencyColumn.isChecked : false;\r\n        const businessSectorColumn = this.tradeFieldList.find((e) => e.bulkEditFieldName === TradeBulkEditFields.MarketSectorId);\r\n        this.isbusinessSectorSelected = (businessSectorColumn) ? businessSectorColumn.isChecked : false;\r\n        const approvalStatus = this.tradeFieldList.find((e) => e.unapproval === TradeApprovalStatus.ApprovedStatus);\r\n        this.isStatusApproved = approvalStatus ? true : false;\r\n    }\r\n\r\n    isDescriptionColumnsVisible() {\r\n        // for the edition matrix step\r\n        this.editionMatrix.gridColumnApi.setColumnVisible(this.departmentDescriptionColumn, this.isDepartmentselected);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible(this.buyerDescriptionColumn, this.isBuyerSelected);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible(this.sellerDescriptionColumn, this.isSellerSelected);\r\n        this.editionMatrix.gridColumnApi.setColumnsVisible(this.commodityColumn, this.isCommoditySelected);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible(this.contractTermDescriptionColumn, this.isContractTermSelected);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible(this.arbitrationDescriptionColumn, this.isArbitrationSelected);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible(this.currencyDescriptionColumn, this.isCurrencySelected);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible(this.businessSectorDescription, this.isbusinessSectorSelected);\r\n\r\n        // for the summary step\r\n        this.summaryGrid.gridColumnApi.setColumnVisible(this.departmentDescriptionColumn, this.isDepartmentselected);\r\n        this.summaryGrid.gridColumnApi.setColumnVisible(this.buyerDescriptionColumn, this.isBuyerSelected);\r\n        this.summaryGrid.gridColumnApi.setColumnVisible(this.sellerDescriptionColumn, this.isSellerSelected);\r\n        this.summaryGrid.gridColumnApi.setColumnsVisible(this.commodityColumn, this.isCommoditySelected);\r\n        this.summaryGrid.gridColumnApi.setColumnVisible(this.contractTermDescriptionColumn, this.isContractTermSelected);\r\n        this.summaryGrid.gridColumnApi.setColumnVisible(this.arbitrationDescriptionColumn, this.isArbitrationSelected);\r\n        this.summaryGrid.gridColumnApi.setColumnVisible(this.currencyDescriptionColumn, this.isCurrencySelected);\r\n        this.summaryGrid.gridColumnApi.setColumnVisible(this.businessSectorDescription, this.isbusinessSectorSelected);\r\n\r\n    }\r\n\r\n    onFieldSelectionPreviousButtonClicked() {\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onEditionMatrixPreviousButtonClicked() {\r\n        this.editionMatrix.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, false);\r\n        this.summaryGrid.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, false);\r\n        this.isDescriptionColumnsVisible();\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onBulkEditionSaveButtonClicked() {\r\n        this.editionMatrix.onSaveButtonClicked();\r\n        if (this.errorMessage !== '') {\r\n            if (this.errorMessage !== this.noErrorMessage) {\r\n                this.snackbarService.throwErrorSnackBar(this.errorMessage);\r\n            } else {\r\n                this.isSaveInProgress = true;\r\n                this.getApprovalStatus();\r\n                this.updatedContracts = this.editionMatrix.getGridData();\r\n                this.updatedContracts.sectionToUpdate[0].contractStatusCode = Number(this.approvalStatus);\r\n                this.subscriptions.push(this.tradingService.PhysicalTradeBulkEdit(this.updatedContracts)\r\n                    .pipe(catchError((error) => {\r\n                        return throwError(error);\r\n                    }),   finalize(() => {\r\n                        this.isSaveInProgress = false;\r\n                    }),\r\n                    ).subscribe(() => {\r\n                        this.afterContractsUpdated();\r\n                    }));\r\n            }\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Please Update any one grid row');\r\n        }\r\n    }\r\n\r\n    getApprovalStatus() {\r\n        if (this.isStatusApproved) {\r\n            this.approvalStatus = this.editionMatrix.isValueChanged ? false : true;\r\n        }\r\n    }\r\n\r\n    afterContractsUpdated() {\r\n        const updatedContractRows = this.editionMatrix.updatedContractRows;\r\n        if (this.isStatusApproved) {\r\n            updatedContractRows[0].status = this.editionMatrix.isValueChanged ?\r\n                TradeApprovalStatus.Unapproved : TradeApprovalStatus.Approved;\r\n        }\r\n\r\n        this.summaryGrid.selectedContractsToEdit(true, updatedContractRows, this.privileges);\r\n        this.summaryGrid.gridColumnApi.setColumnVisible('rowStatus', false);\r\n        this.editionMatrix.isValueChanged = false;\r\n        this.stepper.next();\r\n    }\r\n\r\n    afterContractsFetched() {\r\n        this.editionMatrix.selectedContractsToEdit(false, this.selectedContractsForBulkFunctions, this.privileges);\r\n        this.stepper.previous();\r\n    }\r\n\r\n    saveBlockingMessage(message: string) {\r\n        this.errorMessage = message;\r\n    }\r\n\r\n    onSummaryEditButtonClicked() {\r\n        this.contractsSelected(this.isEditButtonClicked = true);\r\n        this.editionMatrix.gridColumnApi.setColumnVisible('rowStatus', true);\r\n    }\r\n\r\n    onContractSelectionDiscardButtonClicked() {\r\n        if (this.isContractsNextDisabled) {\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n        } else {\r\n            this.discardButtonDialog();\r\n        }\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        for (let i = 0; i < this.selectedSectionIds.length; i++) {\r\n            const sectionId = this.selectedSectionIds[i];\r\n            this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.BulkEdition)\r\n                .subscribe(() => {\r\n                    this.selectedSectionIds = this.selectedSectionIds.filter((id) => id !== sectionId);\r\n                }));\r\n        }\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/groupfunctions']);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.getTradesForSubscription) {\r\n            this.getTradesForSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onFieldSelectionDiscardButtonClicked() {\r\n        this.discardButtonDialog();\r\n    }\r\n\r\n    onEditionMatrixDiscardButtonClicked() {\r\n        this.discardButtonDialog();\r\n    }\r\n\r\n    discardButtonDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n            }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <form [formGroup]=\\\"searchFieldForm\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input specialIsAlphaNumeric\\r\\n                           matInput\\r\\n                           (keydown.enter)=\\\"onSearchFields()\\\"\\r\\n                           (keyup.backspace)=\\\"onSearchFields()\\\"\\r\\n                           placeholder=\\\"Field Name\\\"\\r\\n                           formControlName=\\\"searchFieldCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchFields()\\\"\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-card>\\r\\n    <div>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onTickButtonClicked()\\\">\\r\\n            TICK\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onUntickButtonClicked()\\\">\\r\\n            UNTICK\\r\\n        </button>\\r\\n    </div>\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row wrap\\\"\\r\\n                 fxLayoutAlign=\\\"space-around start\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start left\\\"\\r\\n                     fxFlex=\\\"18\\\"\\r\\n                     *ngFor=\\\"let fields of tradeBulkFieldList1\\\">\\r\\n                    <mat-card class=\\\"active-card field-container\\\">\\r\\n                        <mat-card-title>\\r\\n                            <h2 class=\\\"no-margin\\\"> {{fields[0].tradeFieldHeader}}</h2>\\r\\n                        </mat-card-title>\\r\\n                        <div *ngFor=\\\"let field of fields\\\">\\r\\n                            <mat-checkbox #bulkEditFieldSelectionctrl\\r\\n                                          [formControl]=\\\"tradeBulkEditFieldCtrl\\\"\\r\\n                                          [value]=\\\"field.fieldName\\\"\\r\\n                                          [checked]=\\\"isFieldSelected\\\"\\r\\n                                          (change)=\\\"onSelectionChanged(bulkEditFieldSelectionctrl.checked, field.fieldId, field.fieldName)\\\">\\r\\n                                {{field.friendlyName}}\\r\\n                            </mat-checkbox>\\r\\n                        </div>\\r\\n                    </mat-card>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row wrap\\\"\\r\\n                 fxLayoutAlign=\\\"space-around start\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start left\\\"\\r\\n                     fxFlex=\\\"18\\\"\\r\\n                     *ngFor=\\\"let fields of tradeBulkFieldList2\\\">\\r\\n                    <mat-card class=\\\"active-card field-container\\\">\\r\\n                        <mat-card-title>\\r\\n                            <h2 class=\\\"no-margin\\\"> {{fields[0].tradeFieldHeader}}</h2>\\r\\n                        </mat-card-title>\\r\\n                        <div *ngFor=\\\"let field of fields\\\">\\r\\n                            <mat-checkbox #bulkEditFieldSelectionctrl\\r\\n                                          [value]=\\\"field.fieldName\\\"\\r\\n                                          [formControl]=\\\"tradeBulkEditFieldCtrl\\\"\\r\\n                                          [checked]=\\\"isFieldSelected\\\"\\r\\n                                          (change)=\\\"onSelectionChanged(bulkEditFieldSelectionctrl.checked, field.fieldId, field.fieldName)\\\">\\r\\n                                {{field.friendlyName}}\\r\\n                            </mat-checkbox>\\r\\n                        </div>\\r\\n                    </mat-card>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\">\\r\\n                <div fxLayout.xs=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"space-between\\\"\\r\\n                     fxLayoutGap=\\\"5px\\\"\\r\\n                     fxLayoutGap.sm=\\\"10\\\"\\r\\n                     fxFlex=\\\"21\\\"\\r\\n                     *ngFor=\\\"let fields of tradeBulkFieldList3\\\">\\r\\n                    <mat-card class=\\\"active-card list3-field-container\\\">\\r\\n                        <mat-card-title>\\r\\n                            <h2 class=\\\"no-margin\\\"> {{fields[0].tradeFieldHeader}}</h2>\\r\\n                        </mat-card-title>\\r\\n                        <div *ngFor=\\\"let field of fields\\\">\\r\\n                            <mat-checkbox #bulkEditFieldSelectionctrl\\r\\n                                          [value]=\\\"field.fieldName\\\"\\r\\n                                          [formControl]=\\\"tradeBulkEditFieldCtrl\\\"\\r\\n                                          [checked]=\\\"isFieldSelected\\\"\\r\\n                                          (change)=\\\"onSelectionChanged(bulkEditFieldSelectionctrl.checked, field.fieldId, field.fieldName)\\\">\\r\\n                                {{field.friendlyName}}\\r\\n                            </mat-checkbox>\\r\\n                        </div>\\r\\n                    </mat-card>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".field-container {\\n  height: 140px; }\\n\\n.list3-field-container {\\n  height: 270px; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { TradeBulkEditFields } from '../../../../../shared/enums/trade-bulk-edit-fields.enum';\r\nimport { TradeFieldHeader } from '../../../../../shared/enums/trade-field-header-bulk-edit.enum';\r\nimport { ConvertToNumber } from '../../../../../shared/numberMask';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { TradeFieldsForBulkEdit } from '../../../../../shared/services/trading/dtos/tradeFieldsForBulkEdit';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-bulk-fields',\r\n    templateUrl: './trade-bulk-fields.component.html',\r\n    styleUrls: ['./trade-bulk-fields.component.scss'],\r\n})\r\nexport class TradeBulkFieldsComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly selectedFieldsToEdit = new EventEmitter<TradeFieldsForBulkEdit[]>();\r\n\r\n    bulkEditFieldSearchList: TradeFieldsForBulkEdit[] = [];\r\n    tradeBulkEditFieldCtrl = new AtlasFormControl('TradeBulkEditField');\r\n    tradeBulkEditFieldList: TradeFieldsForBulkEdit[] = [];\r\n    tradeBulkFieldList1 = [];\r\n    tradeBulkFieldList2 = [];\r\n    tradeBulkFieldList3 = [];\r\n    tradeBulkFieldSearchList = [];\r\n    headerId: number;\r\n    subscription: Subscription[] = [];\r\n    isFieldSelected: boolean = false;\r\n    searchField: string;\r\n    tradeFieldList: TradeFieldsForBulkEdit[] = [];\r\n    BulkEditFieldSearchResult: TradeFieldsForBulkEdit[] = [];\r\n    company: string;\r\n    searchFieldForm: FormGroup;\r\n    form: FormGroup;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected tradingService: TradingService,\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.searchFieldForm = this.formBuilder.group({\r\n            searchFieldCtrl: [''],\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.populateTradeFieldList();\r\n    }\r\n\r\n    populateTradeFieldList() {\r\n        this.subscription.push(this.tradingService.getTradeFieldsForBulkEdit()\r\n            .subscribe((data) => {\r\n                if (data) {\r\n                    this.tradeFieldList = data.value as TradeFieldsForBulkEdit[];\r\n                    this.bulkEditFieldSearchList = data.value as TradeFieldsForBulkEdit[];\r\n                    this.tradeFieldList = this.tradeFieldList.map((filter) => {\r\n                        return {\r\n                            tradeFieldHeader: filter.tradeFieldHeader,\r\n                            fieldName: filter.fieldName,\r\n                            fieldId: filter.fieldId,\r\n                            tradeFieldHeaderId: filter.tradeFieldHeaderId,\r\n                            mandatory: filter.mandatory,\r\n                            friendlyName: filter.friendlyName,\r\n                            isChecked: filter.isChecked,\r\n                            bulkEditFieldName: TradeBulkEditFields[filter.fieldName],\r\n                            unapproval: filter.unapproval,\r\n                        };\r\n                    });\r\n                    this.populateTradeFieldSubList();\r\n                }\r\n            }));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            tradeBulkEditFieldCtrl: this.tradeBulkEditFieldCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onSearchFields() {\r\n        this.searchField = this.searchFieldForm.get('searchFieldCtrl').value;\r\n        if (this.searchField) {\r\n            this.tradeBulkFieldSearchList = this.bulkEditFieldSearchList.filter((item) => item.fieldName != null);\r\n            this.BulkEditFieldSearchResult = this.bulkEditFieldSearchList.filter((item) =>\r\n                item.fieldName.toString().toUpperCase().includes(this.searchField.toUpperCase()));\r\n            this.clearBulkEditSearchList();\r\n            this.tradeFieldList = this.BulkEditFieldSearchResult;\r\n            this.populateTradeFieldSubList();\r\n        } else {\r\n            this.clearBulkEditSearchList();\r\n            this.tradeFieldList = this.bulkEditFieldSearchList;\r\n            this.populateTradeFieldSubList();\r\n        }\r\n    }\r\n\r\n    populateTradeFieldSubList() {\r\n        if (this.tradeFieldList) {\r\n            for (const item in TradeFieldHeader) {\r\n                if (ConvertToNumber(item)) {\r\n                    this.headerId = Number(item);\r\n                    this.tradeBulkEditFieldList = [];\r\n                    this.tradeBulkEditFieldList = this.tradeFieldList.filter((x) => x.tradeFieldHeaderId === this.headerId);\r\n                    if (this.tradeBulkEditFieldList && this.tradeBulkEditFieldList.length > 0) {\r\n                        if (this.headerId <= TradeFieldHeader.ShipmentPeriod) {\r\n                            this.tradeBulkFieldList1.push(this.tradeBulkEditFieldList);\r\n                        } else if (this.headerId <= TradeFieldHeader.InternalMemorandum) {\r\n                            this.tradeBulkFieldList2.push(this.tradeBulkEditFieldList);\r\n                        } else {\r\n                            this.tradeBulkFieldList3.push(this.tradeBulkEditFieldList);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clearBulkEditSearchList() {\r\n        this.tradeFieldList = [];\r\n        this.tradeBulkFieldList1 = [];\r\n        this.tradeBulkFieldList2 = [];\r\n        this.tradeBulkFieldList3 = [];\r\n    }\r\n\r\n    onTickButtonClicked() {\r\n        this.tradeFieldList.forEach((e) => e.isChecked = true);\r\n        this.selectedFieldsToEdit.emit(this.tradeFieldList);\r\n        this.isFieldSelected = true;\r\n    }\r\n\r\n    onSelectionChanged(isChecked: boolean, fieldId: number, fieldName: string) {\r\n        this.tradeFieldList.forEach((e) => {\r\n            if (e.fieldName === fieldName) {\r\n                e.isChecked = isChecked;\r\n            }\r\n        });\r\n        this.selectedFieldsToEdit.emit(this.tradeFieldList);\r\n    }\r\n\r\n    onUntickButtonClicked() {\r\n        this.tradeFieldList.forEach((e) => e.isChecked = false);\r\n        this.selectedFieldsToEdit.emit(this.tradeFieldList);\r\n        this.isFieldSelected = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Costs List</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"costContractSummaryGridOptions && costContractSummaryGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"costContractSummaryGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"componentId\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"costContractSummeryGridOptions\\\"\\r\\n             class=\\\"costContractsBulkEdit\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [gridOptions]=\\\"costContractSummaryGridOptions\\\"\\r\\n                             [rowData]=\\\"costContractSummaryGridRows\\\"\\r\\n                             [columnDefs]=\\\"costContractSummaryGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             rowMultiSelectWithClick=true\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [singleClickEdit]=true\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".mat-card {\\n  margin: 8px 0 16px 0 !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { BulkCost } from '../../../../../shared/entities/bulk-edit-cost.entity';\r\nimport { CostDirection } from '../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { RateType } from '../../../../../shared/entities/rate-type.entity';\r\nimport { CostDirections } from '../../../../../shared/enums/cost-direction.enum';\r\nimport { InvoiceTypes } from '../../../../../shared/enums/invoice-type.enum';\r\nimport { PermissionLevels } from '../../../../../shared/enums/permission-level.enum';\r\nimport { RateTypes } from '../../../../../shared/enums/rate-type.enum';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\n\r\n@Component({\r\n    selector: 'atlas-cost-bulk-update-summary',\r\n    templateUrl: './cost-bulk-update-summary.component.html',\r\n    styleUrls: ['./cost-bulk-update-summary.component.scss'],\r\n})\r\nexport class CostBulkUpdateSummaryComponent implements OnInit {\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n        editPrivileges: true,\r\n        deletePrivileges: true,\r\n        inPNLPrivileges: true,\r\n    };\r\n\r\n    costsSummaryMenuActions: { [key: string]: string } = {\r\n        invoiceCost: 'invoice',\r\n    };\r\n\r\n    gridComponents = {\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n\r\n    invoicePrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'Invoice',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Invoices',\r\n        privilegeParentLevelTwo: 'InvoiceCreation',\r\n    };\r\n\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    costContractSummaryGridOptions: agGrid.GridOptions = {};\r\n    componentId: string = 'UpdateBulkCostsSummaryGrid';\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    costContractSummaryGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    company: string;\r\n    masterdata: MasterData;\r\n    rateTypes: RateType[];\r\n    costDirections: CostDirection[];\r\n    costSummaryGridContextualMenuActions: AgContextualMenuAction[];\r\n    hasGridSharing: boolean = false;\r\n    costContractSummaryGridRows: BulkCost[];\r\n    existingCostsToInvoice: BulkCost[];\r\n\r\n    constructor(protected masterDataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected tradingService: TradingService,\r\n        protected router: Router,\r\n        public gridService: AgGridService,\r\n        private authorizationService: AuthorizationService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.gridContext.gridEditable = this.checkIfUserHasRequiredPrivileges(this.invoicePrivilege);\r\n        this.init();\r\n        this.rateTypes = [\r\n            {\r\n                code: RateTypes[RateTypes.Rate],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Amount],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Percent],\r\n                description: '',\r\n            },\r\n        ];\r\n\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    init() {\r\n        this.costSummaryGridContextualMenuActions = [\r\n            {\r\n                icon: '',\r\n                text: 'Invoice',\r\n                action: this.costsSummaryMenuActions.invoiceCost,\r\n\r\n            },\r\n        ];\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.costContractSummaryGridColumns;\r\n        this.costContractSummaryGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi !== undefined) {\r\n            const allColumnIds = [];\r\n            if (this.costContractSummaryGridColumns) {\r\n                this.costContractSummaryGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.costContractSummaryGridOptions = {\r\n            context: this.gridContext,\r\n            getRowStyle: this.isCostInvoicedRowStyle.bind(this),\r\n            isRowSelectable: this.isCostInvoiced.bind(this),\r\n        };\r\n        this.costContractSummaryGridColumns = [\r\n            {\r\n                width: 50,\r\n                minWidth: 50,\r\n                maxWidth: 50,\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'rowStatus',\r\n                field: 'rowStatus',\r\n                width: 100,\r\n                minWidth: 100,\r\n                maxWidth: 100,\r\n                cellRenderer: (params) => {\r\n                    if (params.value) {\r\n                        return '<mat-chip-list><mat-chip class=\"status-flag-chip\">' + params.value + '</mat-chip></mat-chip-list>';\r\n                    }\r\n                    return '';\r\n                },\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n                editable: false,\r\n            },\r\n            {\r\n                headerName: 'Cost type*',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: () => {\r\n                    return {\r\n                        options: this.masterdata.costTypes.filter((cost) => cost.isATradeCost === true)\r\n                            .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                        valueProperty: 'costTypeCode',\r\n                        codeProperty: 'costTypeCode',\r\n                        displayProperty: 'costTypeCode',\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'description',\r\n                colId: 'description',\r\n            },\r\n            {\r\n                headerName: 'Matrix Name',\r\n                field: 'costMatrixName',\r\n                colId: 'costMatrixName',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Supplier',\r\n                field: 'supplierCode',\r\n                cellRendererParams: () => {\r\n                    return {\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.masterdata.counterparties,\r\n                        isRequired: false,\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyCode',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'CCY',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: () => {\r\n                    return {\r\n                        options: this.masterdata.currencies,\r\n                        valueProperty: 'currencyCode',\r\n                        codeProperty: 'currencyCode',\r\n                        displayProperty: 'description',\r\n                        isRequired: true,\r\n\r\n                    };\r\n                },\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Rate Type*',\r\n                field: 'rateTypeCode',\r\n                cellEditorParams: {\r\n                    values: this.rateTypes.map((rateType) => rateType.code),\r\n                    valuePropertyName: 'code',\r\n                    displayFormat: 'code',\r\n                    context: this.masterdata,\r\n                },\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n                cellEditorParams: {\r\n                    values: this.masterdata.priceUnits.map((priceUnit) => priceUnit.priceCode),\r\n                    displayPropertyName: 'description',\r\n                    valuePropertyName: 'priceCode',\r\n                    displayFormat: 'priceCode | description',\r\n                    context: this.masterdata,\r\n                },\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec*',\r\n                field: 'costDirection',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: 'Rate/Amount',\r\n                field: 'rate',\r\n                type: 'numberColumn',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'in P&L',\r\n                field: 'inPL',\r\n                colId: 'inPL',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: true,\r\n                    params: this.gridContext,\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: 'No Act',\r\n                field: 'noAction',\r\n                colId: 'noAction',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: true,\r\n                    params: this.gridContext,\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'invoicePercent',\r\n                width: 120,\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                pinned: 'right',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            actionContext: this.gridContext,\r\n                        },\r\n                        isDisabled: this.isInvoiceDisabled.bind(this),\r\n                        menuActions: this.costSummaryGridContextualMenuActions,\r\n                    };\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 40,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getRateCodeFromId(id: number) {\r\n        const rateCode = RateTypes[id];\r\n        return rateCode;\r\n    }\r\n\r\n    getPriceCodeFromId(id: number) {\r\n        const priceCode = this.masterdata.priceUnits.find(\r\n            (e) => e.priceUnitId === id);\r\n        return priceCode ? priceCode.priceCode : '';\r\n    }\r\n\r\n    getCostDirectionCodeFromId(id, costDirections: CostDirection[]) {\r\n        const costDirection = costDirections.find(\r\n            (e) => e.costDirectionId === id);\r\n        return costDirection ? costDirection.costDirection : '';\r\n    }\r\n\r\n    getCostTypeDescriptionFromCode(code: string, masterdata: MasterData): string {\r\n        const descrption = masterdata.costTypes.find(\r\n            (e) => e.costTypeCode === code);\r\n        return descrption ? descrption.name : null;\r\n    }\r\n\r\n    setCosts(costs: BulkCost[]) {\r\n        if (costs) {\r\n            costs.forEach((cost) => {\r\n                cost.rateTypeCode = this.getRateCodeFromId(cost.rateTypeId);\r\n                cost.costDirection = this.getCostDirectionCodeFromId(cost.costDirectionId, this.costDirections);\r\n                cost.priceCode = this.getPriceCodeFromId(cost.priceUnitId);\r\n                cost.description = this.getCostTypeDescriptionFromCode(cost.costTypeCode, this.masterdata);\r\n            });\r\n            this.costContractSummaryGridRows = costs;\r\n        }\r\n    }\r\n\r\n    handleAction(action: string, cost: BulkCost) {\r\n        switch (action) {\r\n            case this.costsSummaryMenuActions.invoiceCost:\r\n                if (cost.costId) {\r\n                    this.router.navigate(\r\n                        ['/' + this.company +\r\n                            '/execution/invoicing/' + encodeURIComponent(InvoiceTypes.Cost.toString())],\r\n                        {\r\n                            queryParams: { costIds: cost.costId },\r\n\r\n                        });\r\n\r\n                }\r\n\r\n                break;\r\n            default: throw new Error('Unknown action');\r\n        }\r\n    }\r\n\r\n    invoiceSelectedCosts() {\r\n        const costs: BulkCost[] = this.gridApi.getSelectedRows();\r\n        if (costs) {\r\n            const selectedCostIds: number[] = [];\r\n            costs.forEach((cost) => {\r\n                selectedCostIds.push(cost.costId);\r\n            });\r\n            this.router.navigate(\r\n                ['/' + this.company +\r\n                    '/execution/invoicing/' + encodeURIComponent(InvoiceTypes.Cost.toString())],\r\n                {\r\n                    queryParams: { costIds: selectedCostIds },\r\n                });\r\n        }\r\n    }\r\n\r\n    isCostInvoicedRowStyle(node) {\r\n        if (node.data.invoicePercent === 100 || !node.data.isApproved) {\r\n            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };\r\n        }\r\n    }\r\n\r\n    isCostInvoiced(node) {\r\n        return (node.data.invoicePercent === 100 || !node.data.isApproved) ? false : true;\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel >= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isInvoiceDisabled(node) {\r\n        return (node.data.invoicePercent === 100 || !node.data.isApproved) ? true : false;\r\n    }\r\n\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"searchContractForm\\\">\\r\\n    <div class=\\\"main-container\\\"\\r\\n         fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\">\\r\\n        <mat-card>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start none\\\"\\r\\n                 class=\\\"search\\\">\\r\\n                <mat-form-field>\\r\\n                    <input specialIsAlphaNumeric\\r\\n                           matInput\\r\\n                           placeholder=\\\"Contract Search\\\"\\r\\n                           formControlName=\\\"searchContractReferenceCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Charter Reference\\\"\\r\\n                           [matAutocomplete]=\\\"charterReference\\\"\\r\\n                           formControlName=\\\"charterReferenceCtrl\\\"\\r\\n                           [matTooltip]=\\\"'Charter Reference'\\\">\\r\\n                    <mat-autocomplete #charterReference=\\\"matAutocomplete\\\">\\r\\n                        <mat-option *ngFor=\\\"let charCode of filteredCharters\\\"\\r\\n                                    [value]=\\\"charCode.charterCode\\\">\\r\\n                            {{charCode.charterCode}}|\\r\\n                            {{charCode.description}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"charterReferenceCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                </mat-form-field>\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                         label=\\\"Counter Party\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n                <atlas-dropdown-select fxFlex=\\\"60%\\\"\\r\\n                                       [label]=\\\"'Database'\\\"\\r\\n                                       [fieldControl]=\\\"databaseCtrl\\\"\\r\\n                                       isEditable=true\\r\\n                                       [options]=\\\"databaseList\\\"\\r\\n                                       displayProperty=\\\"freezeDate\\\"\\r\\n                                       [selectProperties]=\\\"['freezeDate']\\\"></atlas-dropdown-select>\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onSearchContracts()\\\"\\r\\n                        class=\\\"heroGradient\\\">\\r\\n                    <mat-icon aria-label=\\\"Search\\\"\\r\\n                              class=\\\"search-icon\\\">search</mat-icon>\\r\\n                </button>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <atlas-filter-set-display (filtersChanged)=\\\"onFilterSetDetailsChange($event)\\\"\\r\\n                              [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                              [gridCode]=\\\"gridCode\\\"\\r\\n                              [company]=\\\"company\\\">\\r\\n    </atlas-filter-set-display>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\">\\r\\n        <mat-card *ngIf=\\\"isLoading\\\"\\r\\n                  fxFlex=\\\"100\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Searching for results</h2>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n        <mat-card [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\"\\r\\n                  fxFlex=\\\"100\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 class=\\\"atlas-grid-card-header\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"groupFunctionsGridOptions && groupFunctionsGridOptions.columnDefs && groupFunctionsGridOptions.columnApi\\\"\\r\\n                                                [gridOptions]=\\\"groupFunctionsGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"gridCode\\\"\\r\\n                                                [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                                [hasDeleteViewPrivilege]=\\\"hasDeleteViewPrivilege\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"groupFunctionsGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"contractGridRows\\\"\\r\\n                                 [gridOptions]=\\\"groupFunctionsGridOptions\\\"\\r\\n                                 [columnDefs]=\\\"columnDefs\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 rowSelection=\\\"multiple\\\"\\r\\n                                 [singleClickEdit]=\\\"true\\\"\\r\\n                                 [suppressRowClickSelection]=\\\"true\\\"\\r\\n                                 (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (firstDataRendered)=\\\"onFirstDataRendered()\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n        <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n        </atlas-lock-interval>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \".main-container {\\n  margin: 8px 0 16px 0 !important; }\\n\"","import { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { finalize, map, takeUntil } from 'rxjs/operators';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AssignedSection } from '../../../../../shared/entities/assigned-section.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { Freeze } from '../../../../../shared/entities/freeze.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../../../shared/entities/window-injection-token';\r\nimport { GroupFunctionTypes } from '../../../../../shared/enums/group-function-type';\r\nimport { ListAndSearchFilterType } from '../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { AssignedSectionView } from '../../../../../shared/models/assigned-section-display-view';\r\nimport { CharterDisplayView } from '../../../../../shared/models/charter-display-view';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { CharterDataLoader } from '../../../../../shared/services/execution/charter-data-loader';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { FreezeService } from '../../../../../shared/services/http-services/freeze.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { CounterPartyDataLoader } from '../../../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { ContractsForBulkFunctions } from '../../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-select-contracts',\r\n    templateUrl: './select-contracts.component.html',\r\n    styleUrls: ['./select-contracts.component.scss'],\r\n    providers: [CounterPartyDataLoader, CharterDataLoader],\r\n})\r\nexport class SelectContractsComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly contractSelected = new EventEmitter<boolean>();\r\n    @Input() hasDeleteViewPrivilege = true;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    searchContractForm: FormGroup;\r\n    company: string;\r\n    searchContractReferenceCtrl = new AtlasFormControl('contractReference');\r\n    charterReferenceCtrl = new AtlasFormControl('charterReference');\r\n    counterPartyCtrl = new AtlasFormControl('CounterPartyCommercial');\r\n    databaseCtrl = new AtlasFormControl('Database');\r\n    isLoading: boolean = false;\r\n    contractGridRows: ContractsForBulkFunctions[];\r\n    selectedContractsForBulkEdit: ContractsForBulkFunctions[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    groupFunctionsGridOptions: agGrid.GridOptions = {};\r\n    columnDefs: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridCode = 'tradeList';\r\n    hasGridSharing = false;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    bulkActionTypeId: number;\r\n    filters: ListAndSearchFilter[];\r\n    contractsToEdit: ContractsForBulkFunctions[];\r\n    dataLength: number = 0;\r\n    totalContractList: ContractsForBulkFunctions[];\r\n    filteredCharters: Charter[];\r\n    charters: Charter[];\r\n    masterdata: MasterData = new MasterData();\r\n    filteredCounterPartyList: Counterparty[];\r\n    counterPartyList: Counterparty[];\r\n    searchContractReference: string;\r\n    searchCounterParty: string;\r\n    searchCharterReference: string;\r\n    searchDatabase: string;\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Counter Party not in the list.');\r\n    destroy$ = new Subject();\r\n    databaseList: FreezeDisplayView[] = [];\r\n    currentDatabase = new FreezeDisplayView(-1, 'CURRENT');\r\n    invoiceContractGridRows: ContractsForBulkFunctions[];\r\n    allInvoiceContractGridRows: ContractsForBulkFunctions[];\r\n    contractsForBulkFunctions: ContractsForBulkFunctions[];\r\n    isContractsNextDisabled: boolean = true;\r\n    isContractSelected: boolean = false;\r\n    charterList: CharterDisplayView[] = [];\r\n    charter: string;\r\n    charterId: number;\r\n    sectionsAssigned: AssignedSectionView[];\r\n    model: AssignedSection[] = [];\r\n    contractsAssignedToCharter: ContractsForBulkFunctions[] = [];\r\n    totalQuantity: number = 0;\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private gridService: AgGridService,\r\n        private agGridService: AgGridService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        protected uiService: UiService,\r\n        private route: ActivatedRoute,\r\n        protected lockService: LockService,\r\n        private tradingService: TradingService,\r\n        public charterDataLoader: CharterDataLoader,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        private freezeService: FreezeService,\r\n        @Inject(WINDOW) private window: Window,\r\n        protected dialog: MatDialog,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.bulkActionTypeId = Number(decodeURIComponent(this.route.snapshot.paramMap.get('bulkActionTypeId')));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.charterId = this.route.snapshot.params['charterId'];\r\n\r\n        this.getFormGroup();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyList = this.filteredCounterPartyList;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.populateCharterList();\r\n        this.charterReferenceCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCharterReference(input);\r\n        });\r\n        this.loadGridConfiguration();\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());\r\n        this.loadSnapshots();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.groupFunctionsGridOptions.columnDefs = this.columnDefs;\r\n        this.groupFunctionsGridOptions = params;\r\n        this.gridApi = this.groupFunctionsGridOptions.api;\r\n        this.gridColumnApi = this.groupFunctionsGridOptions.columnApi;\r\n        this.agGridService.sizeColumns(this.groupFunctionsGridOptions);\r\n        this.gridApi.sizeColumnsToFit();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.agGridService.sizeColumns(this.groupFunctionsGridOptions);\r\n        };\r\n    }\r\n\r\n    getFormGroup(): FormGroup {\r\n        this.searchContractForm = this.formBuilder.group({\r\n            searchContractReferenceCtrl: new FormControl(),\r\n            charterReferenceCtrl: new FormControl(),\r\n            counterPartyCtrl: new FormControl(),\r\n            databaseCtrl: new FormControl(),\r\n\r\n        });\r\n        return this.searchContractForm;\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.getContractsToEditCost();\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        // selection column\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                width: 40,\r\n                pinned: 'left',\r\n            });\r\n\r\n        // grid config\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                hide: !config.isVisible,\r\n            };\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            return columnDef;\r\n        }));\r\n        if (this.groupFunctionsGridOptions) {\r\n            this.groupFunctionsGridOptions.columnDefs = this.columnDefs;\r\n        }\r\n    }\r\n\r\n    getContractsToEditCost() {\r\n        if (!this.filters || !(this.columnConfiguration)) {\r\n            return;\r\n        } else if (this.columnConfiguration && this.columnConfiguration.length > 0) {\r\n            const filters = this.filters.map((x) => ({ ...x }));\r\n            this.isLoading = true;\r\n            if (this.charterId) {\r\n                const charterIdField = this.columnConfiguration\r\n                    .find((column) => column.fieldName === 'CharterId');\r\n                if (charterIdField) {\r\n                    const filterCharterId = new ListAndSearchFilter();\r\n                    filterCharterId.fieldId = charterIdField.fieldId;\r\n                    filterCharterId.fieldName = charterIdField.fieldName;\r\n                    filterCharterId.predicate = {\r\n                        filterType: ListAndSearchFilterType.Numeric,\r\n                        operator: 'eq',\r\n                        value1: this.charterId.toString(),\r\n                    };\r\n                    filterCharterId.isActive = true;\r\n                    filters.push(filterCharterId);\r\n                }\r\n            }\r\n            this.tradingService.searchContractsForBulkEdit(filters)\r\n                .pipe(\r\n                    finalize(() => {\r\n                        this.isLoading = false;\r\n                    }),\r\n                ).subscribe((data) => {\r\n                    if (data) {\r\n                        this.contractsToEdit = data;\r\n                        this.contractGridRows = this.contractsToEdit;\r\n                        this.dataLength = this.contractGridRows.length;\r\n                        this.totalContractList = this.contractGridRows;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate));\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.databaseList = snapshots;\r\n            this.databaseList.unshift(this.currentDatabase);\r\n            this.databaseCtrl.patchValue(this.currentDatabase);\r\n        });\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onSearchContracts();\r\n        }\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onFirstDataRendered() {\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onSearchContracts() {\r\n        this.searchContractReference = this.searchContractForm.get('searchContractReferenceCtrl').value;\r\n        this.searchCharterReference = this.searchContractForm.get('charterReferenceCtrl').value;\r\n        this.contractGridRows = [];\r\n        if (this.counterPartyCtrl.value) {\r\n            this.searchCounterParty = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n        }\r\n        if (this.databaseCtrl.value) {\r\n            this.searchDatabase = (this.databaseCtrl.value as FreezeDisplayView).dataVersionId.toString();\r\n        }\r\n        let rows: ContractsForBulkFunctions[] = [];\r\n        let contractRows: number = 0;\r\n        let charterRows: number = 0;\r\n\r\n        if (!this.searchContractReference) {\r\n            this.contractGridRows = this.totalContractList;\r\n        }\r\n        if (!this.searchCharterReference) {\r\n            this.contractGridRows = this.totalContractList;\r\n        }\r\n        if (!this.searchCounterParty) {\r\n            this.contractGridRows = this.totalContractList;\r\n        }\r\n\r\n        if (this.totalContractList && this.totalContractList.length > 0) {\r\n            this.isLoading = true;\r\n            if (this.searchContractReference) {\r\n                this.contractsToEdit = this.totalContractList.filter((item) => item.contractLabel != null);\r\n                rows = this.contractsToEdit.filter((item) =>\r\n                    item.contractLabel.toString().toUpperCase().includes(this.searchContractReference.toUpperCase()));\r\n                contractRows = -1;\r\n            }\r\n            if (this.searchCharterReference) {\r\n                this.contractsToEdit = this.totalContractList.filter((item) => item.charterReference != null);\r\n                rows = this.contractsToEdit.filter((item) =>\r\n                    item.charterReference.toString().toUpperCase().includes(this.searchCharterReference.toUpperCase()));\r\n                charterRows = -1;\r\n            } else if (charterRows === -1) {\r\n                rows = rows.filter((item) => item.charterReference != null);\r\n                rows = rows.filter((item) => item.charterReference.toString().toUpperCase().\r\n                    includes(this.searchCharterReference.toUpperCase()));\r\n            }\r\n            charterRows = -1;\r\n            if (this.searchCounterParty) {\r\n                this.contractsToEdit = this.totalContractList.filter((item) => item.counterparty != null);\r\n                rows = this.contractsToEdit.filter((item) =>\r\n                    item.counterparty.toString().toUpperCase().includes(this.searchCounterParty.toUpperCase()));\r\n            }\r\n\r\n            if (this.searchDatabase && this.searchDatabase !== '-1') {\r\n                const databaseField = this.columnConfiguration\r\n                    .find((column) => column.fieldName === 'DataVersionId');\r\n                const filterDatabase = new ListAndSearchFilter();\r\n                filterDatabase.fieldId = databaseField.fieldId;\r\n                filterDatabase.fieldName = databaseField.fieldName;\r\n                filterDatabase.predicate = {\r\n                    filterType: ListAndSearchFilterType.Numeric,\r\n                    operator: 'eq',\r\n                    value1: this.searchDatabase,\r\n                };\r\n                filterDatabase.isActive = true;\r\n                this.filters.push(filterDatabase);\r\n                this.getContractsToEditCost();\r\n            }\r\n        }\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        if (selectedRows) {\r\n            selectedRows.forEach((row) => {\r\n                const rowAlreadyExists = rows.find((section) => section.sectionId === row.sectionId)\r\n                if (!rowAlreadyExists) {\r\n                    rows.push(row);\r\n                }\r\n            }\r\n            );\r\n        }\r\n        this.contractGridRows = rows;\r\n        this.gridApi.setRowData(this.contractGridRows);\r\n        this.dataLength = this.contractGridRows.length;\r\n        this.autoSizeContractsGrid();\r\n        this.isLoading = false;\r\n        (this.contractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n        this.gridApi.forEachNode((node) => {\r\n            const row = selectedRows.find((data) => data.sectionId === node.data.sectionId);\r\n            if (row) {\r\n                node.setSelected(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    getSelectedContracts(): ContractsForBulkFunctions[] {\r\n        this.selectedContractsForBulkEdit = this.gridApi.getSelectedRows();\r\n        return this.selectedContractsForBulkEdit;\r\n    }\r\n\r\n    getSelectedContractQuantity() {\r\n        return this.totalQuantity;\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n        this.totalQuantity = 0;\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.gridApi.forEachNode((node) => {\r\n            if (event.node.isSelected() && event.node.data.sectionId === node.data.sectionId) {\r\n                node.setSelected(true);\r\n            }\r\n        });\r\n        if (event.node.isSelected()) {\r\n            selectedRows.forEach((contract) => {\r\n                this.totalQuantity += contract.quantity;\r\n            });\r\n        }\r\n        this.isContractSelected = selectedRows.length > 0;\r\n        this.contractSelected.emit(this.isContractSelected);\r\n        this.grantLock(Number(event.data.sectionId), event.node);\r\n        this.gridApi.refreshCells(event.data);\r\n    }\r\n\r\n    populateCharterList() {\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.charters = charter;\r\n            this.filteredCharters = this.charters;\r\n        });\r\n    }\r\n\r\n    filterCharterReference(input) {\r\n        this.filteredCharters = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.charters,\r\n            ['charterCode', 'description'],\r\n        );\r\n        if (this.charterReferenceCtrl.valid || !this.charterReferenceCtrl.value) {\r\n            this.onSearchContracts();\r\n        }\r\n    }\r\n\r\n    onFilterSetDetailsChange(filters: ListAndSearchFilter[]): void {\r\n        this.filters = filters;\r\n        if (this.bulkActionTypeId === GroupFunctionTypes.Costs) {\r\n            this.getContractsToEditCost();\r\n        }\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode) {\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.groupFunctionsGridOptions.api.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        this.subscriptions.push(\r\n                            this.lockService.lockContract(sectionId, LockFunctionalContext.BulkEdition)\r\n                                .subscribe(() => {\r\n                                    this.refeshResourceInformation();\r\n                                    this.locking = this.locking.filter((id) => id !== sectionId);\r\n                                }));\r\n\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.BulkEdition)\r\n                    .subscribe(() => {\r\n                        node.setRowSelectable(true);\r\n                        this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                    }));\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        this.groupFunctionsGridOptions.api.forEachNode((node) => {\r\n            if (node.isSelected()) {\r\n                const resourceInformation = new LockResourceInformation();\r\n                resourceInformation.resourceType = 'Contract';\r\n                resourceInformation.resourceId = node.data.sectionId;\r\n                resourceInformation.resourceCode = node.data.contractReference;\r\n                this.resourcesInformation.push(resourceInformation);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription: Subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"bulkCostUpdateForm\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onChangeStepAction($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Selection</ng-template>\\r\\n                <atlas-select-contracts #selectContractsComponent\\r\\n                                        (contractSelected)=\\\"isContractSelected($event)\\\">\\r\\n                </atlas-select-contracts>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onContractSelectionDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    *ifAuthorized=\\\"'Trades.CostTab',company:company,level: PermissionLevels.ReadWrite\\\"\\r\\n                                    (click)=\\\"onContractSelectionNextButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isContractsNextDisabled\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Edit Costs</ng-template>\\r\\n                <atlas-update-costs #updateCostsComponent></atlas-update-costs>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onContractSelectionDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onFieldSelectionPreviousButtonClicked()\\\">\\r\\n                                PREVIOUS\\r\\n                            </button>\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onSaveButtonClicked()\\\">\\r\\n                                Save\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Summary</ng-template>\\r\\n                <atlas-cost-bulk-update-summary #CostBulkUpdateSummaryComponent></atlas-cost-bulk-update-summary>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"start end\\\">\\r\\n                    <span class=\\\"fill-space\\\"></span>\\r\\n                    <button mat-button\\r\\n                            *ifAuthorized=\\\"'Invoices.InvoiceCreation', company:this.company\\\"\\r\\n                            (click)=\\\"onInvoiceButtonClicked()\\\">\\r\\n                        INVOICE SELECTED\\r\\n                    </button>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatStepper } from '@angular/material';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { BulkCost } from '../../../../shared/entities/bulk-edit-cost.entity';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { TradingService } from '../../../../shared/services/http-services/trading.service';\r\nimport { ContractsForBulkFunctions } from '../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { CostBulkUpdateSummaryComponent } from './cost-bulk-update-summary/cost-bulk-update-summary.component';\r\nimport { SelectContractsComponent } from './select-contracts/select-contracts.component';\r\nimport { UpdateCostsComponent } from './update-costs/update-costs.component';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-cost-bulk-update',\r\n    templateUrl: './trade-cost-bulk-update.component.html',\r\n    styleUrls: ['./trade-cost-bulk-update.component.scss'],\r\n})\r\nexport class TradeCostBulkUpdateComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('selectContractsComponent') selectContractsComponent: SelectContractsComponent;\r\n    @ViewChild('updateCostsComponent') updateCostsComponent: UpdateCostsComponent;\r\n    @ViewChild('CostBulkUpdateSummaryComponent') CostBulkUpdateSummaryComponent: CostBulkUpdateSummaryComponent;\r\n\r\n    currentStep: number = 0;\r\n    isContractsNextDisabled: boolean = true;\r\n    formComponents: BaseFormComponent[] = [];\r\n    bulkCostUpdateForm: FormGroup;\r\n    company: string;\r\n    PermissionLevels = PermissionLevels;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        protected tradingService: TradingService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.bulkCostUpdateForm = this.formBuilder.group({\r\n            selectContractsComponent: this.selectContractsComponent.getFormGroup(),\r\n            updateCostsComponent: this.updateCostsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.selectContractsComponent, this.updateCostsComponent);\r\n    }\r\n\r\n    onChangeStepAction(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    onContractSelectionDiscardButtonClicked() {\r\n        if (this.isContractsNextDisabled) {\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n        } else {\r\n            this.discardButtonDialog();\r\n        }\r\n    }\r\n\r\n    isContractSelected(contractSelected: boolean) {\r\n        this.isContractsNextDisabled = !contractSelected;\r\n    }\r\n\r\n    onContractSelectionNextButtonClicked() {\r\n        const contracts: ContractsForBulkFunctions[] = this.selectContractsComponent.getSelectedContracts();\r\n        const quantity: number = this.selectContractsComponent.getSelectedContractQuantity();\r\n        if (contracts) {\r\n            const sectionIds: number[] = contracts.map((contract) => contract.sectionId);\r\n            this.updateCostsComponent.addCostsComponent.setCostsBySectionIds(contracts, quantity);\r\n            this.updateCostsComponent.editCostsComponent.setCostsBySectionIds(sectionIds);\r\n        }\r\n        this.stepper.next();\r\n    }\r\n\r\n    discardButtonDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);\r\n            }\r\n        });\r\n    }\r\n\r\n    onFieldSelectionPreviousButtonClicked() {\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n\r\n        let costs: BulkCost[] = [];\r\n        this.formComponents.forEach((comp) => {\r\n            costs = comp.populateEntity(costs);\r\n        });\r\n\r\n        this.subscriptions.push(this.tradingService\r\n            .saveBulkCost(costs)\r\n            .subscribe(\r\n                (data) => {\r\n                    const contractsToSummary: BulkCost[] = this.updateCostsComponent.editCostsComponent.getGridData().\r\n                        filter((cost) => cost.rowStatus !== 'N' && cost.rowStatus !== 'D');\r\n                    if (contractsToSummary) {\r\n                        if (data.value) {\r\n                            data.value.forEach((cost) => {\r\n                                contractsToSummary.push(cost);\r\n                            });\r\n                        }\r\n                        this.CostBulkUpdateSummaryComponent.setCosts(contractsToSummary);\r\n                    }\r\n                    this.stepper.next();\r\n                },\r\n                (err) => {\r\n\r\n                    throw err;\r\n                }));\r\n\r\n    }\r\n\r\n    onInvoiceButtonClicked() {\r\n        this.CostBulkUpdateSummaryComponent.invoiceSelectedCosts();\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start center\\\"\\r\\n     fxLayoutGap=\\\"10px\\\"\\r\\n     class=\\\"add-line-container add-line-container-add-costs\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <h6>Add new lines:</h6>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\"\\r\\n         fxFlex=\\\"2\\\">\\r\\n        <mat-form-field>\\r\\n            <input matInput\\r\\n                   [formControl]=\\\"addNewLineCtrl\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\"\\r\\n         class=\\\"add-button-container\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onAddRowButtonClicked(addNewLineCtrl.value)\\\">ADD</button>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onAddCostMatrixClicked()\\\">ADD COST MATRIX</button>\\r\\n    </div>\\r\\n</div>\\r\\n<mat-card>\\r\\n    <h2 class=\\\"atlas-grid-card-title\\\">Costs to add in Bulk</h2>\\r\\n    <mat-card-content>\\r\\n        <div ag-grid=\\\"costsGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor costContractsBulkEdit\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"costsGridRows\\\"\\r\\n                             [columnDefs]=\\\"costsGridCols\\\"\\r\\n                             [gridOptions]=\\\"costGridOptions\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             domLayout=autoHeight\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             [singleClickEdit]=true>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end end\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onProceedButtonClicked()\\\">PROCEED</button>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \".add-line-container.add-line-container-add-costs {\\n  margin-top: 8px !important; }\\n\\n.add-line-container.add-line-container-add-costs h6 {\\n  margin: 0 !important; }\\n\\n.add-button-container {\\n  margin-right: 0 !important; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridCheckboxComponent } from '../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { BulkCost } from '../../../../../../../shared/entities/bulk-edit-cost.entity';\r\nimport { CostBulkEditAllUpdateOptions } from '../../../../../../../shared/entities/cost-bulk-edit-options.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { RateType } from '../../../../../../../shared/entities/rate-type.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { CostBulkEditUpdateOptions } from '../../../../../../../shared/enums/cost-edit-options.enum';\r\nimport { CurrencyCodes } from '../../../../../../../shared/enums/currency-codes.enum';\r\nimport { InvoicingStatus } from '../../../../../../../shared/enums/invoicing-status.enum';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { YesNoConfirmation } from '../../../../../../../shared/enums/yes-no-confirmation.enum';\r\nimport { CustomNumberMask } from '../../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\nimport { ContractsForBulkFunctions } from '../../../../../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { Costmatrix } from '../../../../../../../shared/services/trading/dtos/costmatrix';\r\nimport { CostmatrixLine } from '../../../../../../../shared/services/trading/dtos/costmatrixLine';\r\nimport { CostMatrixDialogComponent } from '../../../../../../../trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component';\r\nimport { EditCostsDialogComponent } from '../edit-costs-dialog/edit-costs-dialog.component';\r\n\r\n@Component({\r\n    selector: 'atlas-add-costs',\r\n    templateUrl: './add-costs.component.html',\r\n    styleUrls: ['./add-costs.component.scss'],\r\n})\r\nexport class AddCostsComponent implements OnInit {\r\n    @Output() readonly newCostsAdded = new EventEmitter<any>();\r\n    @Input() noActPrivilege: boolean;\r\n    @Input() pnlPrivilege: boolean;\r\n\r\n    addNewLineCtrl = new AtlasFormControl('addNewLineCtrl');\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    gridContext = {\r\n        contractStatus: '',\r\n        gridEditable: true,\r\n        editPrivileges: true,\r\n        deletePrivileges: true,\r\n        inPNLPrivileges: true,\r\n    };\r\n    costsGridCols: agGrid.ColDef[];\r\n    costsGridRows: BulkCost[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    masterdata: MasterData;\r\n    rateTypes: RateType[];\r\n    company: string;\r\n    costMatrix: Costmatrix[];\r\n    costMatrixLine: CostmatrixLine[];\r\n    filteredLines: CostmatrixLine[] = [];\r\n    costGridOptions: agGrid.GridOptions = {};\r\n    costDirections: CostDirection[];\r\n    updateOptions: CostBulkEditAllUpdateOptions[];\r\n    confirmationOptions: CostBulkEditAllUpdateOptions[];\r\n    isProRataCheck: boolean = false;\r\n    selectCostmatrix: string;\r\n    costMatrixId: number;\r\n    existingCosts: BulkCost[];\r\n    contracts: string[];\r\n    fullyInvoicedContracts: string[];\r\n    newCosts: BulkCost[] = [];\r\n    existingSectionIds: number[] = [];\r\n    totalQuantity: number = 0;\r\n    selectedContracts: ContractsForBulkFunctions[] = [];\r\n    costIdsForOverrideCosts: number[] = [];\r\n    sectionIdsForAddNewCosts: number[] = [];\r\n    costIdsForFullyInvoicedCosts: number[] = [];\r\n    contractReferenceForFullyInvoicedCosts: string[] = [];\r\n    contractSelected: number[] = [];\r\n    contractLabelSelected: string[] = [];\r\n\r\n    constructor(protected masterdataService: MasterdataService,\r\n        protected dialog: MatDialog,\r\n        protected tradingService: TradingService,\r\n        protected route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        public gridService: AgGridService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.rateTypes = [\r\n            {\r\n                code: RateTypes[RateTypes.Rate],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Amount],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Percent],\r\n                description: '',\r\n            },\r\n        ];\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n        this.updateOptions = [\r\n            {\r\n                option: CostBulkEditUpdateOptions.AddNewCost,\r\n            },\r\n            {\r\n                option: CostBulkEditUpdateOptions.OverRideCost,\r\n            },\r\n        ];\r\n        this.confirmationOptions = [\r\n            {\r\n                option: YesNoConfirmation[YesNoConfirmation.Yes],\r\n            },\r\n            {\r\n                option: YesNoConfirmation[YesNoConfirmation.No],\r\n            },\r\n        ];\r\n        this.initCostsGridColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.costsGridCols;\r\n        this.costGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n        this.gridApi.showNoRowsOverlay();\r\n    }\r\n\r\n    initCostsGridColumns() {\r\n        this.costGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.costsGridCols = [\r\n            {\r\n                headerName: 'Cost type*',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(params),\r\n                        },\r\n                        options: this.masterdata.costTypes.filter((cost) => cost.isATradeCost === true)\r\n                            .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                        valueProperty: 'costTypeCode',\r\n                        codeProperty: 'costTypeCode',\r\n                        displayProperty: 'costTypeCode',\r\n                        isRequired: true,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    const filteredCostType = this.masterdata.costTypes.find(\r\n                        (e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n                    if (filteredCostType) {\r\n                        params.node.setDataValue('description', filteredCostType.name);\r\n                        params.node.setDataValue('inPL', filteredCostType.inPNL);\r\n                        params.node.setDataValue('noAction', filteredCostType.noAction);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'description',\r\n                colId: 'description',\r\n            },\r\n            {\r\n                headerName: 'Matrix Name',\r\n                field: 'costMatrixName',\r\n            },\r\n            {\r\n                headerName: 'Supplier',\r\n                field: 'supplierCode',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: () => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.masterdata.counterparties,\r\n                        isRequired: false,\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyCode',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: true,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if ((params.data.supplierCode || params.data.supplierCode === '') && this.masterdata.counterparties) {\r\n                        const selectedClientAccount = this.masterdata.counterparties.find(\r\n                            (clientAccount) => clientAccount.counterpartyCode === params.data.supplierCode);\r\n                        if (selectedClientAccount) {\r\n                            params.node.data.isDirty = true;\r\n                        } else if (params.data.supplierCode === '') {\r\n                            params.node.data.isDirty = true;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'CCY',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(params),\r\n                        },\r\n                        options: this.masterdata.currencies,\r\n                        valueProperty: 'currencyCode',\r\n                        codeProperty: 'currencyCode',\r\n                        displayProperty: 'description',\r\n                        isRequired: true,\r\n\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.currencyCode && this.masterdata.currencies) {\r\n                        const currencyCode = this.masterdata.currencies.find((currency) =>\r\n                            currency.currencyCode === params.data.currencyCode);\r\n                        if (currencyCode) {\r\n                            params.node.setDataValue('currencyCode', params.data.currencyCode);\r\n                            params.node.data.isDirty = true;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Rate Type*',\r\n                field: 'rateTypeCode',\r\n                editable: this.isGridEditable.bind(this),\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.rateTypes.map((rateType) => rateType.code),\r\n                    valuePropertyName: 'code',\r\n                    displayFormat: 'code',\r\n                    context: this.masterdata,\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    this.onRateTypeChange(params);\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n                editable: this.isPriceCodeEditable.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellRenderer: this.priceCodeRequired.bind(this),\r\n                cellEditorParams: {\r\n                    values: this.masterdata.priceUnits.map((priceUnit) => priceUnit.priceCode),\r\n                    displayPropertyName: 'description',\r\n                    valuePropertyName: 'priceCode',\r\n                    displayFormat: 'priceCode | description',\r\n                    context: this.masterdata,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec*',\r\n                field: 'costDirection',\r\n                editable: true,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Rate/Amount',\r\n                field: 'rate',\r\n                editable: this.isGridEditable.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                type: 'numberColumn',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'in P&L',\r\n                field: 'inPL',\r\n                colId: 'inPL',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: !this.pnlPrivilege,\r\n                    params: this.gridContext,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'No Act',\r\n                field: 'noAction',\r\n                colId: 'noAction',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: !this.noActPrivilege,\r\n                    params: this.gridContext,\r\n                },\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'invoicePercent',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Add or Override?',\r\n                field: 'isAddOrOverride',\r\n                editable: false,\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Pro Rata',\r\n                field: 'isProRata',\r\n                colId: 'isProRata',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: () => !this.isProRataCheck,\r\n                    params: this.gridContext,\r\n                },\r\n                pinned: 'right',\r\n            },\r\n\r\n            {\r\n                headerName: 'Update Options',\r\n                field: 'updateOptions',\r\n                editable: this.isGridEditable.bind(this),\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.updateOptions.map((options) => options.option),\r\n                    displayPropertyName: 'option',\r\n                    valuePropertyName: 'option',\r\n                    displayFormat: 'option',\r\n                },\r\n                onCellValueChanged: this.onUpdateOptionChange.bind(this),\r\n                pinned: 'right',\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    isPriceCodeEditable(params): boolean {\r\n        if (params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n            return params.context.gridEditable;\r\n        } else {\r\n            params.node.setDataValue('priceCode', '');\r\n        }\r\n    }\r\n\r\n    onRateTypeChange(params) {\r\n        if (params.newValue === RateTypes[RateTypes.Rate]) {\r\n            this.priceCodeRequired(params);\r\n        } else if (params.newValue === RateTypes[RateTypes.Amount]) {\r\n            this.isPriceCodeEditable(params);\r\n        } else {\r\n            this.isPriceCodeEditable(params);\r\n        }\r\n        // prorata check\r\n        this.isProRataCheck = (params.data.rateTypeCode === RateTypes[RateTypes.Amount]);\r\n\r\n        if (this.gridApi) {\r\n            this.gridApi.refreshCells({\r\n                rowNodes: [params.node],\r\n                force: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    priceCodeRequired(params) {\r\n        if ((!params.value || params.value === '') && (params.data.rateTypeCode === RateTypes[RateTypes.Rate])) {\r\n            params.node.setDataValue('priceCode', this.requiredCell(this));\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onAddRowButtonClicked(numberOfLines: number) {\r\n        if (numberOfLines && numberOfLines > 0) {\r\n            this.gridContext.gridEditable = true;\r\n            this.gridApi.onFilterChanged();\r\n            for (let count = 1; count <= numberOfLines; count++) {\r\n                const newItem = this.createNewRowData();\r\n                this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n            }\r\n            this.addNewLineCtrl.setValue('');\r\n        }\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newCostRow = new BulkCost();\r\n        newCostRow.costDirectionId = CostDirections.Payable;\r\n        newCostRow.currencyCode = CurrencyCodes.USD;\r\n        newCostRow.rowStatus = 'N';\r\n        newCostRow.costIds = [];\r\n        newCostRow.invoicingStatusId = InvoicingStatus.Uninvoiced;\r\n        return newCostRow;\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onAddCostMatrixClicked() {\r\n        this.tradingService.getCostmatricesByCompanyId(this.company).subscribe((data) => {\r\n            this.costMatrix = data.value;\r\n            if (this.costMatrix) {\r\n                const openCostMatrixDialog = this.dialog.open(CostMatrixDialogComponent, {\r\n                    data:\r\n                    {\r\n                        matrixData: this.costMatrix,\r\n                    },\r\n                    width: '45%',\r\n                });\r\n                openCostMatrixDialog.afterClosed().subscribe((matrixId) => {\r\n                    if (matrixId) {\r\n                        this.importMatrices(matrixId);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    importMatrices(matrixId: number) {\r\n        this.tradingService.getCostmatricesListByCostmatrixId(matrixId).subscribe((data) => {\r\n            this.selectCostmatrix = data.name;\r\n            data.costMatrixLines.filter((line) => {\r\n                data.costMatrixId = line.costMatrixId;\r\n                this.filteredLines = data.costMatrixLines;\r\n            });\r\n            if (this.filteredLines && this.filteredLines.length > 0) {\r\n                this.addCostMatrixLinesToCostGrid();\r\n            }\r\n        });\r\n    }\r\n\r\n    addCostMatrixLinesToCostGrid() {\r\n        this.filteredLines.forEach((rows) => {\r\n            const costRow = new BulkCost();\r\n            costRow.costMatrixName = this.selectCostmatrix;\r\n            costRow.costTypeCode = this.getCostTypeCodeFromId(rows.costTypeId);\r\n            costRow.description = rows.description;\r\n            costRow.supplierCode = this.getSupplierCodeFromId(rows.supplierId);\r\n            costRow.costDirection = this.getCostDirectionCodeFromId(rows.payReceive, this.costDirections);\r\n            costRow.currencyCode = rows.currencyCode;\r\n            costRow.rateTypeCode = this.getRateCodeFromId(rows.rateType);\r\n            costRow.priceCode = this.getPriceCodeFromId(rows.priceUnitId);\r\n            costRow.rate = rows.rateAmount;\r\n            costRow.inPL = rows.inPL;\r\n            costRow.noAction = rows.noAct;\r\n            costRow.narrative = rows.narrative;\r\n            costRow.costMatrixLineId = rows.costMatrixLineId;\r\n            costRow.isAddOrOverride = 'No';\r\n            this.gridApi.updateRowData({ add: [costRow] });\r\n        });\r\n    }\r\n\r\n    getCostTypeCodeFromId(id: number): string {\r\n        const costTypeCode = this.masterdata.costTypes.find(\r\n            (e) => e.costTypeId === id);\r\n        return costTypeCode ? costTypeCode.costTypeCode : null;\r\n    }\r\n\r\n    getSupplierCodeFromId(id: number) {\r\n        const counterparty = this.masterdata.counterparties.find((e) => e.counterpartyID === id);\r\n        return counterparty ? counterparty.counterpartyCode : null;\r\n    }\r\n\r\n    getRateCodeFromId(id: number) {\r\n        const rateCode = RateTypes[id];\r\n        return rateCode;\r\n    }\r\n\r\n    getPriceCodeFromId(id: number) {\r\n        const priceCode = this.masterdata.priceUnits.find(\r\n            (e) => e.priceUnitId === id);\r\n        return priceCode ? priceCode.priceCode : '';\r\n    }\r\n\r\n    getCostDirectionCodeFromId(id, costDirections: CostDirection[]) {\r\n        const costDirection = costDirections.find(\r\n            (e) => e.costDirectionId === id);\r\n        return costDirection ? costDirection.costDirection : '';\r\n    }\r\n\r\n    setCostsBySectionIds(contracts: ContractsForBulkFunctions[], quantity: number) {\r\n        if (contracts) {\r\n            this.selectedContracts = contracts;\r\n            const sectionIds: number[] = contracts.map((contract) => contract.sectionId);\r\n            this.contractSelected = sectionIds;\r\n            const contractLabel: string[] = contracts.map((contract) => contract.contractLabel);\r\n            this.contractLabelSelected = contractLabel;\r\n            this.totalQuantity = quantity;\r\n            this.existingSectionIds = sectionIds;\r\n            this.tradingService.getCostForSelectedContracts(sectionIds)\r\n                .subscribe((data) => {\r\n                    this.existingCosts = data.value;\r\n                    if (this.existingCosts) {\r\n                        this.existingCosts.forEach((cost) => {\r\n                            cost.costTypeCode = this.getCostTypeCodeFromId(cost.costTypeId);\r\n                            cost.rateTypeCode = this.getRateCodeFromId(cost.rateTypeId);\r\n                            cost.priceCode = this.getPriceCodeFromId(cost.priceUnitId);\r\n                            cost.costDirection = this.getCostDirectionCodeFromId(cost.costDirectionId, this.costDirections);\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onUpdateOptionChange(params) {\r\n        this.contracts = [];\r\n        let costIds: number[] = [];\r\n        let sectionIds: number[] = [];\r\n        // override cost is selected\r\n        if (params.data.updateOptions === this.updateOptions[1].option) {\r\n            if (this.existingCosts && this.existingCosts.length > 0 && params.data.costTypeCode) {\r\n                // the list of contracts without the cost type code & cost direction different from new cost\r\n                // to be displyed in the dialog with an option to add as new cost\r\n                this.sectionIdsForAddNewCosts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection).\r\n                    map((contract) => contract.sectionId)));\r\n                this.costIdsForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection\r\n                    && cost.invoicePercent === 100).map((contract) => contract.costId)));\r\n                this.contractReferenceForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection\r\n                    && cost.invoicePercent === 100).map((contract) => contract.contractReference)));\r\n                this.costIdsForOverrideCosts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection\r\n                    && cost.invoicePercent < 100).\r\n                    map((contract) => contract.costId)));\r\n                this.contracts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    !this.costIdsForOverrideCosts.includes(cost.costId) && !this.sectionIdsForAddNewCosts.includes(cost.sectionId)).\r\n                    map((contract) => contract.contractReference)));\r\n                // section ids where the cost will be added when yes is selected from dialog\r\n                sectionIds = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    !this.costIdsForOverrideCosts.includes(cost.costId) && !this.sectionIdsForAddNewCosts.includes(cost.sectionId)).\r\n                    map((contract) => contract.sectionId)));\r\n                costIds = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    !this.costIdsForOverrideCosts.includes(cost.costId) && !this.sectionIdsForAddNewCosts.includes(cost.sectionId),\r\n                ).map((contract) => contract.costId)));\r\n\r\n                if (this.costIdsForFullyInvoicedCosts && this.costIdsForFullyInvoicedCosts.length > 0) {\r\n                    this.fullyInvoicedContracts = this.contractReferenceForFullyInvoicedCosts;\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'Some costs could not be overridden, since they are fully invoiced ' + this.fullyInvoicedContracts,\r\n                    );\r\n                }\r\n\r\n                if (this.contracts && this.contracts.length > 0) {\r\n                    const overrideDialog = this.dialog.open(EditCostsDialogComponent, {\r\n                        width: '40%',\r\n                        height: '40%',\r\n                        data: {\r\n                            confirmationMessage: 'The cost ' + params.data.costTypeCode + ' to ' +\r\n                                params.data.costDirection + ' doesn’t exist in the following trades. Do you want to add the cost item?',\r\n                            contractReference: this.contracts,\r\n                        },\r\n                    });\r\n                    overrideDialog.afterClosed().subscribe((result) => {\r\n                        params.data.isAddOrOverride = result ? 'Yes' : 'No';\r\n                        if (result) {\r\n                            params.data.sectionIds = sectionIds;\r\n                        }\r\n                        this.gridApi.refreshCells();\r\n                    });\r\n                }\r\n            } else if (this.existingCosts && this.existingCosts.length === 0 && params.data.costTypeCode) {\r\n                // the list of contracts without the cost type code & cost direction different from new cost\r\n                // to be displyed in the dialog with an option to add as new cost\r\n\r\n                this.sectionIdsForAddNewCosts = this.contractSelected;\r\n                this.contracts = this.contractLabelSelected;\r\n                if (this.contracts && this.contracts.length > 0) {\r\n                    const overrideDialog = this.dialog.open(EditCostsDialogComponent, {\r\n                        width: '40%',\r\n                        height: '40%',\r\n                        data: {\r\n                            confirmationMessage: 'The cost ' + params.data.costTypeCode + ' to ' +\r\n                                params.data.costDirection + ' doesn’t exist in the following trades. Do you want to add the cost item?',\r\n                            contractReference: this.contracts,\r\n                        },\r\n                    });\r\n                    overrideDialog.afterClosed().subscribe((result) => {\r\n                        params.data.isAddOrOverride = result ? 'Yes' : 'No';\r\n                        if (result) {\r\n                            params.data.sectionIds = this.sectionIdsForAddNewCosts;\r\n                    }\r\n                        this.gridApi.refreshCells();\r\n                    });\r\n                }\r\n            } else {\r\n                this.showErroMessageForRequiredFields();\r\n                params.data.updateOptions = '';\r\n                this.gridApi.refreshCells();\r\n            }\r\n            // Add new cost is selected\r\n        } else if (params.data.updateOptions === this.updateOptions[0].option) {\r\n            if (this.existingCosts && params.data.costTypeCode) {\r\n                // the list of contracts with the cost type code & cost direction same as new cost\r\n                // to be displyed in the dialog, with an option to override\r\n                this.contracts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection).\r\n                    map((contract) => contract.contractReference)));\r\n\r\n                this.costIdsForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection\r\n                    && cost.invoicePercent === 100).map((contract) => contract.costId)));\r\n\r\n                this.contractReferenceForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection\r\n                    && cost.invoicePercent === 100).map((contract) => contract.contractReference)));\r\n\r\n                // costids where the override has to take place\r\n                costIds = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection\r\n                    && cost.invoicePercent < 100).map((contract) => contract.costId)));\r\n\r\n                // section ids where the costs have to be newly added\r\n                this.sectionIdsForAddNewCosts = Array.from(new Set(this.existingCosts.filter((cost) =>\r\n                    !this.contracts.includes(cost.contractReference)).map((contract) => contract.sectionId)));\r\n                if (this.contracts && this.contracts.length > 0) {\r\n                    const overrideDialog = this.dialog.open(EditCostsDialogComponent, {\r\n                        width: '40%',\r\n                        height: '40%',\r\n                        data: {\r\n                            confirmationMessage: 'The cost ' + params.data.costTypeCode + ' to ' +\r\n                                params.data.costDirection + ' already exists in the following trades. Do you want to override the cost item?',\r\n                            contractReference: this.contracts,\r\n                        },\r\n                    });\r\n                    overrideDialog.afterClosed().subscribe((result) => {\r\n                        params.data.isAddOrOverride = result ? 'Yes' : 'No';\r\n                        if (result) {\r\n                            params.data.costIds = costIds;\r\n                            if (this.costIdsForFullyInvoicedCosts && this.costIdsForFullyInvoicedCosts.length > 0) {\r\n                                this.fullyInvoicedContracts = this.contractReferenceForFullyInvoicedCosts;\r\n                                this.snackbarService.throwErrorSnackBar(\r\n                                    'Some costs could not be overridden, since they are fully invoiced ' + this.fullyInvoicedContracts,\r\n                                );\r\n                            }\r\n                        }\r\n                        this.gridApi.refreshCells();\r\n                    });\r\n                }\r\n            } else {\r\n                this.showErroMessageForRequiredFields();\r\n                params.data.updateOptions = '';\r\n                this.gridApi.refreshCells();\r\n            }\r\n        }\r\n    }\r\n\r\n    onProceedButtonClicked() {\r\n        if (!this.validate()) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        } else {\r\n            this.newCosts = [];\r\n            this.gridApi.forEachNode((row) => {\r\n                if ((row.data.costIds && row.data.costIds.length > 0)) {\r\n                    if (row.data.updateOptions === CostBulkEditUpdateOptions.AddNewCost && row.data.isAddOrOverride === 'Yes') {\r\n                        // override existing cost when cost type & cost direction is different\r\n                        for (const index in row.data.costIds) {\r\n                            const newCost = new BulkCost();\r\n                            this.GetRowDataForNewCost(newCost, row);\r\n                            newCost.costId = row.data.costIds[index];\r\n                            newCost.sectionId = this.getSectionIdFromExistingCosts(row.data.costIds[index]);\r\n                            newCost.contractReference = this.getContractReferenceByCostId(row.data.costIds[index]);\r\n                            newCost.quantity = this.getContractQuantityByCostId(row.data.costIds[index]);\r\n                            this.newCosts.push(newCost);\r\n                        }\r\n                        // add new costs for the rest of the contracts selected\r\n                        if (this.sectionIdsForAddNewCosts && this.sectionIdsForAddNewCosts.length > 0) {\r\n                            this.sectionIdsForAddNewCosts.forEach((sectionId) => {\r\n                                const newCost = new BulkCost();\r\n                                newCost.sectionId = sectionId;\r\n                                this.GetRowDataForNewCost(newCost, row);\r\n                                newCost.contractReference = this.getContractReferenceBySectionId(sectionId);\r\n                                newCost.quantity = this.getContractQuantityBySectionId(sectionId);\r\n                                this.newCosts.push(newCost);\r\n                            });\r\n                        }\r\n                    }\r\n                } else if ((row.data.sectionIds && row.data.sectionIds.length > 0)) {\r\n                    if (row.data.updateOptions === CostBulkEditUpdateOptions.OverRideCost && row.data.isAddOrOverride === 'Yes') {\r\n                        // Add new cost item when update option is Override when cost type and\r\n                        // cost direction is different\r\n                        for (const index in row.data.sectionIds) {\r\n                            const newCost = new BulkCost();\r\n                            this.GetRowDataForNewCost(newCost, row);\r\n                            newCost.sectionId = row.data.sectionIds[index];\r\n                            newCost.contractReference = this.getContractReferenceBySectionId(row.data.sectionIds[index]);\r\n                            newCost.quantity = this.getContractQuantityBySectionId(row.data.sectionIds[index]);\r\n                            this.newCosts.push(newCost);\r\n                        }\r\n                        // override costs for the rest of the contracts selected if costtype & cost direction is same\r\n                        if (this.costIdsForOverrideCosts && this.costIdsForOverrideCosts.length > 0) {\r\n                            this.costIdsForOverrideCosts.forEach((costId) => {\r\n                                const newCost = new BulkCost();\r\n                                this.GetRowDataForNewCost(newCost, row);\r\n                                newCost.costId = costId;\r\n                                newCost.sectionId = this.getSectionIdFromExistingCosts(costId);\r\n                                newCost.contractReference = this.getContractReferenceByCostId(costId);\r\n                                newCost.quantity = this.getContractQuantityByCostId(costId);\r\n                                this.newCosts.push(newCost);\r\n                            },\r\n                            );\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (row.data.updateOptions === CostBulkEditUpdateOptions.OverRideCost) {\r\n                        // Override the existing costs if cost type and cost direction is same\r\n                        this.existingCosts.forEach((cost) => {\r\n                            if (cost.costTypeCode === row.data.costTypeCode && cost.costDirection === row.data.costDirection\r\n                                && cost.invoicePercent < 100) {\r\n                                const newCost = new BulkCost();\r\n                                newCost.costId = cost.costId;\r\n                                newCost.sectionId = cost.sectionId;\r\n                                this.GetRowDataForNewCost(newCost, row);\r\n                                newCost.contractReference = cost.contractReference;\r\n                                newCost.quantity = this.getContractQuantityByCostId(cost.costId);\r\n                                this.newCosts.push(newCost);\r\n                            }\r\n                        });\r\n                    } else if (row.data.updateOptions === CostBulkEditUpdateOptions.AddNewCost) {\r\n                        this.existingSectionIds.forEach((sectionId) => {\r\n                            const newCost = new BulkCost();\r\n                            newCost.sectionId = sectionId;\r\n                            this.GetRowDataForNewCost(newCost, row);\r\n                            newCost.contractReference = this.getContractReferenceBySectionId(sectionId);\r\n                            newCost.quantity = this.getContractQuantityBySectionId(sectionId);\r\n                            this.newCosts.push(newCost);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            // check for prorata and perform the calculation if isProrata is set to YES\r\n            if (this.existingSectionIds.length > 1) {\r\n                this.newCosts.forEach((newCost) => {\r\n                    if (newCost.isProRata) {\r\n                        if (newCost.rate) {\r\n                            newCost.rate = (newCost.rate * newCost.quantity) / this.totalQuantity;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            this.newCostsAdded.emit({\r\n                costs: this.newCosts,\r\n            });\r\n            // setting the grid to empty on click of proceed button\r\n            this.gridApi.setRowData([]);\r\n        }\r\n    }\r\n\r\nGetRowDataForNewCost(newCost: BulkCost, row: agGrid.RowNode) {\r\n        newCost.rowStatus = row.data.rowStatus;\r\n        newCost.costTypeCode = row.data.costTypeCode;\r\n        newCost.description = row.data.description;\r\n        newCost.costMatrixName = row.data.costMatrixName;\r\n        newCost.supplierCode = row.data.supplierCode;\r\n        newCost.currencyCode = row.data.currencyCode;\r\n        newCost.rateTypeCode = row.data.rateTypeCode;\r\n        newCost.priceCode = row.data.priceCode;\r\n        newCost.rate = row.data.rate;\r\n        newCost.inPL = row.data.inPL;\r\n        newCost.noAction = row.data.noAction;\r\n        newCost.costDirection = row.data.costDirection;\r\n        newCost.isProRata = row.data.isProRata;\r\n    }\r\n\r\ngetContractReferenceByCostId(costId: number): string {\r\n        if (costId) {\r\n            return this.existingCosts.find((cost) => cost.costId === costId).contractReference;\r\n        }\r\n    }\r\n\r\ngetSectionIdFromExistingCosts(costId: number): number {\r\n        if (costId) {\r\n            return this.existingCosts.find((cost) => cost.costId === costId).sectionId;\r\n        }\r\n    }\r\n\r\ngetContractQuantityByCostId(costId: number): number {\r\n        if (costId) {\r\n            return this.existingCosts.find((cost) => cost.costId === costId).quantity;\r\n        }\r\n    }\r\n\r\ngetContractReferenceBySectionId(sectionId: number): string {\r\n        if (sectionId) {\r\n            return this.selectedContracts.find((contract) => contract.sectionId === sectionId).contractLabel;\r\n        }\r\n    }\r\n\r\nvalidate(): boolean {\r\n        let isValid = true;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data.costTypeCode && rowData.data.costDirection\r\n                && rowData.data.currencyCode && rowData.data.rateTypeCode && rowData.data.updateOptions) {\r\n                if (((rowData.data.rateTypeCode === 'Rate') && (rowData.data.priceCode.includes('Required*')))) {\r\n                    isValid = false;\r\n\r\n                }\r\n            } else if (!(rowData.data.costTypeCode || rowData.data.costDirection\r\n                || rowData.data.currencyCode || rowData.data.rateTypeCode || rowData.data.updateOptions)) {\r\n                isValid = false;\r\n            } else if (!(rowData.data.costTypeCode && rowData.data.costDirection\r\n                && rowData.data.currencyCode && rowData.data.rateTypeCode && rowData.data.updateOptions)) {\r\n                isValid = false;\r\n            }\r\n        });\r\n\r\n        return isValid;\r\n    }\r\n\r\ngetContractQuantityBySectionId(sectionId: number): number {\r\n        if (sectionId) {\r\n            return this.selectedContracts.find((contract) => contract.sectionId === sectionId).quantity;\r\n        }\r\n    }\r\n\r\nshowErroMessageForRequiredFields() {\r\n        this.snackbarService.throwErrorSnackBar('Select cost type and cost direction to proceed');\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"edit-costs-dialog\\\">\\r\\n    <div fxLayoutAlign=\\\"space-between center\\\">\\r\\n        <h1 class=\\\"no-margin\\\">Overriding a non - existing cost</h1>\\r\\n        <button mat-button\\r\\n                class=\\\"close-button\\\">\\r\\n            <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n        </button>\\r\\n    </div>\\r\\n    <mat-dialog-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\">\\r\\n            <p>{{dialogText}}</p>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between start\\\">\\r\\n            <div class=\\\"chip-list\\\">\\r\\n                <atlas-chip-list *ngIf=\\\"chipStringList\\\"\\r\\n                                 [textList]='chipStringList'></atlas-chip-list>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-dialog-content>\\r\\n    <mat-dialog-actions>\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start start\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onNoButtonClicked()\\\">NO</button>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"50\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxAlignLayout=\\\"start end\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <button mat-button\\r\\n                    class=\\\"add-cost-button\\\"\\r\\n                    (click)=\\\"onYesButtonClicked()\\\">YES</button>\\r\\n        </div>\\r\\n    </mat-dialog-actions>\\r\\n</div>\"","module.exports = \".edit-costs-dialog .mat-button.add-cost-button {\\n  text-transform: none !important; }\\n\\n.chip-list .mat-chip-list-wrapper .mat-standard-chip {\\n  margin: 8px 8px 8px 0 !important; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-edit-costs-dialog',\r\n    templateUrl: './edit-costs-dialog.component.html',\r\n    styleUrls: ['./edit-costs-dialog.component.scss'],\r\n})\r\nexport class EditCostsDialogComponent implements OnInit {\r\n    chipStringList: string[];\r\n\r\n    dialogData: {\r\n        confirmationMessage: string,\r\n        contractReference: string[],\r\n\r\n    };\r\n    dialogText: string = '';\r\n    constructor(public thisDialogRef: MatDialogRef<EditCostsDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            confirmationMessage: string, contractReference: string[],\r\n        }) {\r\n        this.dialogData = data;\r\n        this.dialogText = this.dialogData.confirmationMessage;\r\n        this.chipStringList = this.dialogData.contractReference;\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    onYesButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n    onNoButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Costs List</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"costContractGridOptions && costContractGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"costContractGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"componentId\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"costContractGridOptions\\\"\\r\\n             class=\\\"costContractsBulkEdit\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [gridOptions]=\\\"costContractGridOptions\\\"\\r\\n                             [rowData]=\\\"costContractGridRows\\\"\\r\\n                             [columnDefs]=\\\"costContractGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [paginationPageSize]=\\\"30\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                             [singleClickEdit]=true\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AuthorizationService } from '../../../../../../../core/services/authorization.service';\r\nimport { AgContextualMenuComponent } from '../../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AgContextualMenuAction } from '../../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { BulkCost } from '../../../../../../../shared/entities/bulk-edit-cost.entity';\r\nimport { CostDirection } from '../../../../../../../shared/entities/cost-direction.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { RateType } from '../../../../../../../shared/entities/rate-type.entity';\r\nimport { CostDirections } from '../../../../../../../shared/enums/cost-direction.enum';\r\nimport { RateTypes } from '../../../../../../../shared/enums/rate-type.enum';\r\nimport { CustomNumberMask } from '../../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../../../shared/services/http-services/trading.service';\r\nimport { SecurityService } from '../../../../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-edit-costs',\r\n    templateUrl: './edit-costs.component.html',\r\n    styleUrls: ['./edit-costs.component.scss'],\r\n})\r\nexport class EditCostsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    costsBulkEditMenuActions: { [key: string]: string } = {\r\n        deleteCost: 'delete',\r\n    };\r\n\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    @Input() noActPrivilege: boolean;\r\n    @Input() pnlPrivilege: boolean;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    costContractGridOptions: agGrid.GridOptions = {};\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    costContractGridColumns: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    isLoading: boolean;\r\n    componentId: string = 'EditCostsGrid';\r\n    company: string;\r\n    masterdata: MasterData;\r\n    rateTypes: RateType[];\r\n    costDirections: CostDirection[];\r\n    costEditBulkUpdateGridContextualMenuActions: AgContextualMenuAction[];\r\n    hasGridSharing: boolean = false;\r\n    costContractGridRows: BulkCost[];\r\n    costsToSummary: BulkCost[] = [];\r\n    updatedCostsToSummary: BulkCost[] = [];\r\n    existingCosts: BulkCost[] = [];\r\n    dataVersionId: number;\r\n    costsToDelete: BulkCost[] = [];\r\n    costsDeletePrivilege: boolean;\r\n\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n        editPrivileges: true,\r\n        deletePrivileges: this.costsDeletePrivilege,\r\n        inPNLPrivileges: true,\r\n    };\r\n\r\n    constructor(protected masterDataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected tradingService: TradingService,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        private authorizationService: AuthorizationService,\r\n        private securityService: SecurityService,\r\n        public gridService: AgGridService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'CostTab')) {\r\n                this.costsDeletePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'COSTSDEL');\r\n            }\r\n        });\r\n        this.init();\r\n        this.rateTypes = [\r\n            {\r\n                code: RateTypes[RateTypes.Rate],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Amount],\r\n                description: '',\r\n            },\r\n            {\r\n                code: RateTypes[RateTypes.Percent],\r\n                description: '',\r\n            },\r\n        ];\r\n\r\n        this.costDirections = [\r\n            {\r\n                costDirectionId: CostDirections.Payable,\r\n                costDirection: 'Pay',\r\n            },\r\n            {\r\n                costDirectionId: CostDirections.Receivable,\r\n                costDirection: 'Receive',\r\n            },\r\n        ];\r\n\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    isGridEditable(params): boolean {\r\n        // edit based on invoice percent\r\n        if (params.data.invoicePercent === 100) {\r\n            params.data.fullyInvoiced = false;\r\n            return params.data.fullyInvoiced;\r\n        } else {\r\n            params.data.fullyInvoiced = true;\r\n            return params.data.fullyInvoiced;\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.costEditBulkUpdateGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.costsBulkEditMenuActions.deleteCost,\r\n                disabled: (!this.costsDeletePrivilege),\r\n            },\r\n        ];\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.costContractGridColumns;\r\n        this.costContractGridOptions = params;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n        this.gridApi.showNoRowsOverlay();\r\n        this.autoSizeContractsGrid();\r\n    }\r\n\r\n    autoSizeContractsGrid() {\r\n        if (this.gridColumnApi !== undefined) {\r\n            const allColumnIds = [];\r\n            if (this.costContractGridColumns) {\r\n                this.costContractGridColumns.forEach((columnDefs) => {\r\n                    allColumnIds.push(columnDefs.field);\r\n                });\r\n            }\r\n            this.gridColumnApi.autoSizeColumns(allColumnIds);\r\n        }\r\n    }\r\n\r\n    isCostInvoicedRowStyle(node) {\r\n        if (node.data.invoicePercent === 100) {\r\n            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.costContractGridOptions = {\r\n            context: this.gridContext,\r\n            getRowStyle: this.isCostInvoicedRowStyle.bind(this),\r\n        };\r\n        this.costContractGridColumns = [\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'rowStatus',\r\n                field: 'rowStatus',\r\n                width: 110,\r\n                minWidth: 110,\r\n                maxWidth: 110,\r\n                cellRenderer: (params) => {\r\n                    if (params.value) {\r\n                        return '<mat-chip-list><mat-chip class=\"status-flag-chip\">' + params.value + '</mat-chip></mat-chip-list>';\r\n                    }\r\n                    return '';\r\n                },\r\n                pinned: 'left',\r\n                sort: 'desc',\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                field: 'contractReference',\r\n                colId: 'contractReference',\r\n                hide: false,\r\n                editable: false,\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'Cost type*',\r\n                field: 'costTypeCode',\r\n                colId: 'costTypeCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(params),\r\n                        },\r\n                        options: this.masterdata.costTypes.filter((cost) => cost.isATradeCost === true)\r\n                            .sort((a, b) => a.costTypeCode.localeCompare(b.costTypeCode)),\r\n                        valueProperty: 'costTypeCode',\r\n                        codeProperty: 'costTypeCode',\r\n                        displayProperty: 'costTypeCode',\r\n                        isRequired: true,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    const filteredCostType = this.masterdata.costTypes.find(\r\n                        (e) => e.costTypeCode === params.data.costTypeCode);\r\n\r\n                    if (filteredCostType) {\r\n                        params.node.setDataValue('description', filteredCostType.name);\r\n                        params.node.setDataValue('inPL', filteredCostType.inPNL);\r\n                        params.node.setDataValue('noAction', filteredCostType.noAction);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                field: 'description',\r\n                colId: 'description',\r\n            },\r\n            {\r\n                headerName: 'Matrix Name',\r\n                field: 'costMatrixName',\r\n                colId: 'costMatrixName',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Supplier',\r\n                field: 'supplierCode',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(params),\r\n                        },\r\n                        gridId: 'counterpartiesGrid',\r\n                        options: this.masterdata.counterparties,\r\n                        isRequired: false,\r\n                        displayProperty: 'counterpartyCode',\r\n                        valueProperty: 'counterpartyCode',\r\n                        lightBoxTitle: 'Results for Counterparty',\r\n                        showContextualSearchIcon: this.isGridEditable(params),\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if ((params.data.supplierCode || params.data.supplierCode === '') && this.masterdata.counterparties) {\r\n                        const selectedClientAccount = this.masterdata.counterparties.find(\r\n                            (clientAccount) => clientAccount.counterpartyCode === params.data.supplierCode);\r\n                        if (selectedClientAccount) {\r\n                            params.node.data.isDirty = true;\r\n                        } else if (params.data.supplierCode === '') {\r\n                            params.node.data.isDirty = true;\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'CCY',\r\n                field: 'currencyCode',\r\n                colId: 'currencyCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.isGridEditable(params),\r\n                        },\r\n                        options: this.masterdata.currencies,\r\n                        valueProperty: 'currencyCode',\r\n                        codeProperty: 'currencyCode',\r\n                        displayProperty: 'description',\r\n                        isRequired: true,\r\n\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.currencyCode && this.masterdata.currencies) {\r\n                        const currencyCode = this.masterdata.currencies.find((currency) => currency.currencyCode === params.data.currencyCode);\r\n                        if (currencyCode) {\r\n                            params.node.setDataValue('currencyCode', currencyCode);\r\n                            params.node.data.isDirty = true;\r\n                        }\r\n                    }\r\n                },\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Rate Type*',\r\n                field: 'rateTypeCode',\r\n                editable: (params) => this.isGridEditable(params),\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.rateTypes.map((rateType) => rateType.code),\r\n                    valuePropertyName: 'code',\r\n                    displayFormat: 'code',\r\n                    context: this.masterdata,\r\n                },\r\n                onCellValueChanged: this.onRateTypeChange.bind(this),\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Price Code',\r\n                field: 'priceCode',\r\n                colId: 'priceCode',\r\n                editable: this.isPriceCodeEditable.bind(this),\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellRenderer: this.priceCodeRequired.bind(this),\r\n                cellEditorParams: {\r\n                    values: this.masterdata.priceUnits.map((priceUnit) => priceUnit.priceCode),\r\n                    displayPropertyName: 'description',\r\n                    valuePropertyName: 'priceCode',\r\n                    displayFormat: 'priceCode | description',\r\n                    context: this.masterdata,\r\n                },\r\n                width: 120,\r\n            },\r\n            {\r\n                headerName: 'Pay/Rec*',\r\n                field: 'costDirection',\r\n                editable: (params) => this.isGridEditable(params),\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.costDirections.map((costDirection) => costDirection.costDirection),\r\n                    displayPropertyName: 'costDirection',\r\n                    valuePropertyName: 'costDirection',\r\n                    displayFormat: 'costDirection',\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Rate/Amount',\r\n                field: 'rate',\r\n                editable: (params) => this.isGridEditable(params),\r\n                cellEditor: 'atlasNumeric',\r\n                type: 'numberColumn',\r\n                onCellValueChanged: this.onRateAmountChanged.bind(this),\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, false),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'in P&L',\r\n                field: 'inPL',\r\n                colId: 'inPL',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        disabled: !this.pnlPrivilege || (!params.data.fullyInvoiced),\r\n                        params: this.gridContext,\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: 'No Act',\r\n                field: 'noAction',\r\n                colId: 'noAction',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        disabled: !this.noActPrivilege || (!params.data.fullyInvoiced),\r\n                        params: this.gridContext,\r\n                    };\r\n                },\r\n            },\r\n            {\r\n                headerName: '%Invoiced',\r\n                field: 'invoicePercent',\r\n                colId: 'invoicePercent',\r\n                width: 120,\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                pinned: 'right',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        actionContext: this.gridContext,\r\n                    },\r\n                    menuActions: this.costEditBulkUpdateGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 40,\r\n            },\r\n        ];\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    isPriceCodeEditable(params): boolean {\r\n        if (params.data.rateTypeCode === RateTypes[RateTypes.Rate]) {\r\n            return params.context.gridEditable;\r\n        } else {\r\n            params.node.setDataValue('priceCode', '');\r\n        }\r\n    }\r\n\r\n    priceCodeRequired(params) {\r\n        if ((!params.value || params.value === '') && (params.data.rateTypeCode === RateTypes[RateTypes.Rate])) {\r\n            params.node.setDataValue('priceCode', this.requiredCell(this));\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    onRateTypeChange(params) {\r\n        if (params.newValue === RateTypes[RateTypes.Rate]) {\r\n            this.priceCodeRequired(params);\r\n        } else if (params.newValue === RateTypes[RateTypes.Amount]) {\r\n            this.isPriceCodeEditable(params);\r\n        } else {\r\n            this.isPriceCodeEditable(params);\r\n        }\r\n    }\r\n\r\n    getRateCodeFromId(id: number) {\r\n        const rateCode = RateTypes[id];\r\n        return rateCode;\r\n    }\r\n\r\n    getPriceCodeFromId(id: number) {\r\n        const priceCode = this.masterdata.priceUnits.find(\r\n            (e) => e.priceUnitId === id);\r\n        return priceCode ? priceCode.priceCode : '';\r\n    }\r\n\r\n    getCostDirectionCodeFromId(id, costDirections: CostDirection[]) {\r\n        const costDirection = costDirections.find(\r\n            (e) => e.costDirectionId === id);\r\n        return costDirection ? costDirection.costDirection : '';\r\n    }\r\n\r\n    getCostTypeCodeFromId(id: number, masterdata: MasterData): string {\r\n        const costTypeCode = masterdata.costTypes.find(\r\n            (e) => e.costTypeId === id);\r\n        return costTypeCode ? costTypeCode.costTypeCode : null;\r\n    }\r\n\r\n    getCostTypeDescriptionFromId(id: number, masterdata: MasterData): string {\r\n        const descrption = masterdata.costTypes.find(\r\n            (e) => e.costTypeId === id);\r\n        return descrption ? descrption.name : null;\r\n    }\r\n\r\n    setCostsBySectionIds(sectionIds: number[]) {\r\n        if (sectionIds) {\r\n            this.tradingService.getCostForSelectedContracts(sectionIds)\r\n                .subscribe((data) => {\r\n                    this.existingCosts = data.value as BulkCost[];\r\n                    if (this.existingCosts) {\r\n                        this.existingCosts.forEach((cost) => {\r\n                            cost.rateTypeCode = this.getRateCodeFromId(cost.rateTypeId);\r\n                            cost.priceCode = this.getPriceCodeFromId(cost.priceUnitId);\r\n                            cost.costDirection = this.getCostDirectionCodeFromId(cost.costDirectionId, this.costDirections);\r\n                            cost.costTypeCode = this.getCostTypeCodeFromId(cost.costTypeId, this.masterdata);\r\n                            cost.description = this.getCostTypeDescriptionFromId(cost.costTypeId, this.masterdata);\r\n                        });\r\n                        this.costContractGridRows = this.existingCosts;\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    setNewCosts(costs: BulkCost[]) {\r\n        costs.forEach((cost) => {\r\n            if (cost.costId) {\r\n                // overriding existing costs and update the rowstatus as amended\r\n                if (this.existingCosts) {\r\n                    const index: number = this.existingCosts.findIndex((existingCost) => existingCost.costId === cost.costId);\r\n                    if (index !== -1) {\r\n                        if (this.existingCosts[index].invoicePercent > 0) {\r\n                        this.existingCosts[index].invoicePercent = (this.existingCosts[index].invoicePercent * this.existingCosts[index].rate) / cost.rate;\r\n                        }\r\n                        this.existingCosts[index].rate = cost.rate;\r\n                        this.existingCosts[index].costMatrixName = cost.costMatrixName;\r\n                        this.existingCosts[index].supplierCode = cost.supplierCode;\r\n                        this.existingCosts[index].currencyCode = cost.currencyCode;\r\n                        this.existingCosts[index].rateTypeCode = cost.rateTypeCode;\r\n                        this.existingCosts[index].priceCode = cost.priceCode;\r\n                        this.existingCosts[index].rate = cost.rate;\r\n                        this.existingCosts[index].inPL = cost.inPL;\r\n                        this.existingCosts[index].noAction = cost.noAction;\r\n                        this.existingCosts[index].costDirection = cost.costDirection;\r\n                        this.existingCosts[index].rowStatus = 'A';\r\n\r\n                        // Calculate invoice percent here\r\n                        this.gridApi.updateRowData({ update: [this.existingCosts[index]] });\r\n                    }\r\n                }\r\n            } else if (this.existingCosts) {\r\n                if (!this.costContractGridRows) {\r\n                    this.costContractGridRows = [];\r\n                }\r\n                this.costContractGridRows.push(cost);\r\n                this.gridApi.updateRowData({ add: [cost] });\r\n            }\r\n        });\r\n        this.gridApi.refreshCells();\r\n    }\r\n\r\n    getGridData() {\r\n        this.gridApi.forEachNode((rowData) => {\r\n            this.costsToSummary.push(rowData.data);\r\n            this.updatedCostsToSummary = this.costsToSummary;\r\n        });\r\n        return this.updatedCostsToSummary;\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            params.node.setDataValue('rowStatus', params.node.data.costId ? 'A' : 'N');\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: BulkCost[]): BulkCost[] {\r\n        const selectedCosts = entity;\r\n        if (this.costsToDelete && this.costsToDelete.length > 0) {\r\n            this.costsToDelete.forEach((costToDelete) => {\r\n                const cost = new BulkCost();\r\n                cost.costId = costToDelete.costId;\r\n                cost.sectionId = costToDelete.sectionId;\r\n                cost.rowStatus = costToDelete.rowStatus;\r\n                cost.costTypeCode = costToDelete.costTypeCode;\r\n                cost.description = costToDelete.description;\r\n                cost.costMatrixName = costToDelete.costMatrixName;\r\n                cost.supplierCode = costToDelete.supplierCode;\r\n                cost.currencyCode = costToDelete.currencyCode;\r\n                cost.rateTypeId = this.getRateTypeIdFromCode(costToDelete.rateTypeCode);\r\n                cost.priceUnitId = costToDelete.priceUnitId ? costToDelete.priceUnitId : (costToDelete.priceCode ?\r\n                    this.masterdata.priceUnits.find((priceUnit) =>\r\n                        priceUnit.priceCode === costToDelete.priceCode).priceUnitId : null);\r\n                cost.rate = costToDelete.rate;\r\n                cost.inPL = costToDelete.inPL;\r\n                cost.noAction = costToDelete.noAction;\r\n                cost.invoicingStatusId = costToDelete.invoicingStatusId;\r\n                cost.costDirectionId = costToDelete.costDirection ?\r\n                    this.costDirections.find((costDirection) =>\r\n                        costDirection.costDirection === costToDelete.costDirection).costDirectionId : null;\r\n                cost.isDelete = costToDelete.isDelete;\r\n                if (costToDelete.rowStatus) {\r\n                    selectedCosts.push(cost);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data && (rowData.data.rowStatus && (rowData.data.rowStatus === 'N' || rowData.data.rowStatus === 'A'))) {\r\n                const cost = new BulkCost();\r\n                cost.costId = rowData.data.costId;\r\n                cost.sectionId = rowData.data.sectionId;\r\n                cost.rowStatus = rowData.data.rowStatus;\r\n                cost.costTypeCode = rowData.data.costTypeCode;\r\n                cost.description = rowData.data.description;\r\n                cost.costMatrixName = rowData.data.costMatrixName;\r\n                cost.supplierCode = rowData.data.supplierCode;\r\n                cost.currencyCode = rowData.data.currencyCode;\r\n                cost.rateTypeId = this.getRateTypeIdFromCode(rowData.data.rateTypeCode);\r\n                cost.priceUnitId = rowData.data.priceUnitId ? rowData.data.priceUnitId : (rowData.data.priceCode ?\r\n                    this.masterdata.priceUnits.find((priceUnit) =>\r\n                        priceUnit.priceCode === rowData.data.priceCode).priceUnitId : null);\r\n                cost.rate = rowData.data.rate;\r\n                cost.inPL = rowData.data.inPL;\r\n                cost.noAction = rowData.data.noAction;\r\n                cost.invoicingStatusId = rowData.data.invoicingStatusId;\r\n                cost.costDirectionId = rowData.data.costDirection ?\r\n                    this.costDirections.find((costDirection) =>\r\n                        costDirection.costDirection === rowData.data.costDirection).costDirectionId : null;\r\n                cost.invoicePercent = rowData.data.invoicePercent;\r\n                if (rowData.data.rowStatus) {\r\n                    selectedCosts.push(cost);\r\n                }\r\n            }\r\n        });\r\n\r\n        return selectedCosts;\r\n    }\r\n\r\n    getRateTypeIdFromCode(code: string) {\r\n        const rateTypeId = RateTypes[code];\r\n        return rateTypeId;\r\n    }\r\n\r\n    handleAction(action: string, cost: BulkCost) {\r\n        switch (action) {\r\n            case this.costsBulkEditMenuActions.deleteCost:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Cost Deletion',\r\n                        text: 'Deleting a cost is permanent. Do you wish to proceed?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        if (cost.costId && cost.invoicePercent === 0) {\r\n                            cost.isDelete = true;\r\n                            cost.rowStatus = 'D';\r\n                            this.costsToDelete.push(cost);\r\n                            if (this.gridApi) {\r\n                                this.gridApi.refreshCells({\r\n                                    force: true,\r\n                                });\r\n                            }\r\n                        } else if (!(cost.costId)) {\r\n                            this.gridApi.updateRowData({ remove: [cost] });\r\n                        } else {\r\n                            this.snackbarService.informationSnackBar('Cannot delete invoiced cost');\r\n                        }\r\n                    }\r\n                });\r\n                this.subscriptions.push(confirmationSubscription);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onRateAmountChanged(params) {\r\n        if (params && params.data && params.data.invoicePercent) {\r\n            if (params.newValue && params.newValue !== 0) {\r\n                const invoicePercent = (params.data.invoicePercent * params.oldValue) / params.newValue;\r\n                if (invoicePercent > 100) {\r\n                    params.data.invoicePercent = 100;\r\n                } else {\r\n                    params.data.invoicePercent = invoicePercent;\r\n                }\r\n            } else {\r\n                params.data.rate = params.oldValue;\r\n            }\r\n        }\r\n        if (this.gridApi) {\r\n            this.gridApi.refreshCells(params.data);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<atlas-add-costs #addCostsComponent\\r\\n                 (newCostsAdded)=\\\"OnNewCostsAdded($event)\\\"\\r\\n                 [noActPrivilege]='noActPrivilege'\\r\\n                 [pnlPrivilege]='pnlPrivilege'></atlas-add-costs>\\r\\n\\r\\n<atlas-edit-costs #editCostsComponent\\r\\n                  [noActPrivilege]='noActPrivilege'\\r\\n                  [pnlPrivilege]='pnlPrivilege'></atlas-edit-costs>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { AddCostsComponent } from './components/add-costs/add-costs.component';\r\nimport { EditCostsComponent } from './components/edit-costs/edit-costs.component';\r\n\r\n@Component({\r\n    selector: 'atlas-update-costs',\r\n    templateUrl: './update-costs.component.html',\r\n    styleUrls: ['./update-costs.component.scss'],\r\n})\r\nexport class UpdateCostsComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('addCostsComponent') addCostsComponent: AddCostsComponent;\r\n    @ViewChild('editCostsComponent') editCostsComponent: EditCostsComponent;\r\n\r\n    tradeCostBulkUpdateFormGroup: FormGroup;\r\n    formComponents: BaseFormComponent[] = [];\r\n    noActPrivilege: boolean = false;\r\n    pnlPrivilege: boolean = false;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private companyManager: CompanyManagerService,\r\n        private authorizationService: AuthorizationService,\r\n        private securityService: SecurityService,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.tradeCostBulkUpdateFormGroup = this.formBuilder.group({\r\n            editCostsComponent: this.editCostsComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(this.editCostsComponent);\r\n        this.getCostsPrivilege();\r\n    }\r\n\r\n    getFormGroup() {\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    OnNewCostsAdded($event) {\r\n        if ($event) {\r\n            this.editCostsComponent.setNewCosts($event.costs);\r\n        }\r\n    }\r\n\r\n    populateEntity(model: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            comp.populateEntity(model);\r\n        });\r\n        return model;\r\n    }\r\n\r\n    getCostsPrivilege() {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(company, 'Trades')\r\n                && this.authorizationService.isPrivilegeAllowed(company, 'CostTab')) {\r\n                this.noActPrivilege = this.authorizationService.isPrivilegeAllowed(company, 'COSTSNOACT');\r\n                this.pnlPrivilege = this.authorizationService.isPrivilegeAllowed(company, 'COSTSINP&L');\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<div>\\r\\n\\t<h2 mat-dialog-title>CREATE A SPLIT</h2>\\r\\n\\t<mat-dialog-content>\\r\\n\\t\\t<form [formGroup]=\\\"splitForm\\\">\\r\\n\\t\\t\\t<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"none center\\\" fxLayoutWrap fxLayoutGap=\\\"10px\\\">\\r\\n\\t\\t\\t\\t<div fxFlex=\\\"45%\\\" fxFlex.xs=\\\"50%\\\" fxFlex.sm=\\\"100%\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input atlas-number-decimals maxdecimals=\\\"4\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   autocomplete=\\\"off\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   required\\r\\n\\t\\t\\t\\t\\t\\t\\t   matInput\\r\\n\\t\\t\\t\\t\\t\\t\\t   type=\\\"number\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   min=\\\"0\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   placeholder=\\\"Available Quantity\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   formControlName=\\\"availableQuantityCtrl\\\">\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div fxFlex=\\\"50%\\\" fxFlex.xs=\\\"50%\\\" fxFlex.sm=\\\"100%\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input atlas-number-decimals maxdecimals=\\\"4\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   autocomplete=\\\"off\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   required\\r\\n\\t\\t\\t\\t\\t\\t\\t   matInput\\r\\n\\t\\t\\t\\t\\t\\t\\t   type=\\\"number\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   min=\\\"0\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   placeholder=\\\"Split Quantity\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   formControlName=\\\"splitQuantityCtrl\\\">\\r\\n\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"splitForm.get('splitQuantityCtrl').hasError('isPositiveError')\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tNumber should not be negative\\r\\n\\t\\t\\t\\t\\t\\t</mat-error>\\r\\n\\t\\t\\t\\t\\t\\t<mat-error *ngIf=\\\"splitForm.get('splitQuantityCtrl').hasError('isDifferencePositiveError')\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tThere are not enough remaining quantity\\r\\n\\t\\t\\t\\t\\t\\t</mat-error>\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div fxFlex=\\\"45%\\\" fxFlex.xs=\\\"50%\\\" fxFlex.sm=\\\"100%\\\">\\r\\n\\t\\t\\t\\t\\t<mat-form-field>\\r\\n\\t\\t\\t\\t\\t\\t<input atlas-number-decimals maxdecimals=\\\"4\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   autocomplete=\\\"off\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   required\\r\\n\\t\\t\\t\\t\\t\\t\\t   matInput\\r\\n\\t\\t\\t\\t\\t\\t\\t   type=\\\"number\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   min=\\\"0\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   placeholder=\\\"Remaining Quantity\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t   formControlName=\\\"remainingQuantityCtrl\\\">\\r\\n\\t\\t\\t\\t\\t</mat-form-field>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t<div style=\\\"margin:20px; text-align:right\\\">\\r\\n\\t\\t\\t\\t\\t<div style=\\\"margin:20px; text-align:right\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"fill-space\\\"></span>\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"primary\\\" (click)=\\\"onCloseConfirm()\\\" [disabled]=\\\"!splitForm.valid\\\">CREATE</button>&nbsp;\\r\\n\\t\\t\\t\\t\\t\\t<button mat-raised-button color=\\\"accent\\\" (click)=\\\"onCloseCancel()\\\" [disabled]=\\\"savingInProgress\\\">CANCEL</button>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</form>\\r\\n\\t</mat-dialog-content>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { Subscription } from 'rxjs';\r\nimport { isDifferencePositive, isPositive } from '../../../shared/directives/number-validators.directive';\r\nimport { Section } from '../../../shared/entities/section.entity';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { TradingService } from '../../../shared/services/http-services/trading.service';\r\nimport { SplitCreationResult } from '../../../shared/services/trading/dtos/section';\r\n\r\n@Component({\r\n    selector: 'atr-section-new',\r\n    templateUrl: './section-new.component.html',\r\n    styleUrls: ['./section-new.component.scss'],\r\n})\r\nexport class SectionNewComponent implements OnInit {\r\n    availableQuantityCtrl: FormControl;\r\n    splitQuantityCtrl: FormControl;\r\n    remainingQuantityCtrl: FormControl;\r\n    splitForm: FormGroup;\r\n    model: Section;\r\n    savingInProgress = false;\r\n    private splitCreationSubscription: Subscription;\r\n\r\n    constructor(\r\n        public thisDialogRef: MatDialogRef<SectionNewComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: Section,\r\n        private fb: FormBuilder,\r\n        private tradingService: TradingService,\r\n        private executionService: ExecutionService) {\r\n        this.model = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.availableQuantityCtrl = new FormControl({ value: '', disabled: true }, [Validators.required]);\r\n        this.remainingQuantityCtrl = new FormControl({ value: '', disabled: true }, Validators.compose([Validators.required]));\r\n        this.splitQuantityCtrl = new FormControl({ value: '', disabled: false }, Validators.compose([Validators.required, isPositive(), isDifferencePositive(this.model.quantity)]));\r\n\r\n        this.splitForm = this.fb.group({\r\n            availableQuantityCtrl: this.availableQuantityCtrl,\r\n            splitQuantityCtrl: this.splitQuantityCtrl,\r\n            remainingQuantityCtrl: this.remainingQuantityCtrl,\r\n        });\r\n\r\n        this.splitForm.patchValue({\r\n            availableQuantityCtrl: this.model.quantity,\r\n            remainingQuantityCtrl: this.model.quantity,\r\n        });\r\n\r\n        this.splitQuantityCtrl.valueChanges.subscribe(\r\n            (qty) => {\r\n                this.remainingQuantityCtrl.setValue(this.availableQuantityCtrl.value - qty);\r\n                if (this.availableQuantityCtrl.value - qty < 0) {\r\n                    this.remainingQuantityCtrl.setErrors({ isPositiveError: true });\r\n                } else {\r\n                    this.remainingQuantityCtrl.setErrors({});\r\n                }\r\n            });\r\n\r\n    }\r\n    onCloseConfirm() {\r\n        this.savingInProgress = true;\r\n        if (this.splitForm.hasError) {\r\n            this.model.quantity = this.splitQuantityCtrl.value;\r\n            this.model.sectionOriginId = this.model.sectionId;\r\n            this.model.sectionId = 0;\r\n\r\n            this.splitCreationSubscription = this.tradingService.createSplit(this.model).subscribe(\r\n                (data: SplitCreationResult[]) => {\r\n                    if (data && data.length > 1) {\r\n                    }\r\n                    this.thisDialogRef.close(data);\r\n                }, (error) => {\r\n                    this.thisDialogRef.close(error);\r\n                    throw (error);\r\n                },\r\n            );\r\n        } else {\r\n            this.savingInProgress = false;\r\n        }\r\n    }\r\n\r\n    onCloseCancel() {\r\n        this.thisDialogRef.close(null);\r\n    }\r\n    ngOnDestroy(): void {\r\n        if (this.splitCreationSubscription) {\r\n            this.splitCreationSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\"\\r\\n         class=\\\"search\\\">\\r\\n        <mat-form-field>\\r\\n            <input matInput\\r\\n                   placeholder=\\\"Contract Reference\\\"\\r\\n                   [formControl]=\\\"searchedValueCtrl\\\"\\r\\n                   (input)=\\\"onSearchChange()\\\"\\r\\n                   #message>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <button mat-raised-button\\r\\n                class=\\\"heroGradient\\\"\\r\\n                (click)=\\\"onSearchChange()\\\">\\r\\n            <mat-icon aria-label=\\\"Search\\\"\\r\\n                      class=\\\"search-icon\\\">search</mat-icon>\\r\\n        </button>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<div [hidden]=\\\"isEmptyStateShowed\\\">\\r\\n    <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                           [gridCode]=\\\"gridCode\\\"\\r\\n                           [gridTitle]=\\\"'Possible Allocations'\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           (rowSelected)=\\\"rowSelected($event)\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [dataVersionId]=\\\"dataVersionId\\\"\\r\\n                           waitBeforeLoadingData=true\\r\\n                           (configurationLoaded)=\\\"initAdditionnalFilters()\\\"\\r\\n                           #listAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n</div>\\r\\n<div [hidden]=\\\"!isEmptyStateShowed\\\">\\r\\n    <atlas-empty-state [title]=\\\"emptySearchResultTitle\\\"\\r\\n                       message=\\\"Try another search\\\"></atlas-empty-state>\\r\\n</div>\\r\\n<atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n</atlas-lock-interval>\\r\\n\"","module.exports = \".atr-ag-grid {\\n  width: 100%;\\n  height: 100%; }\\n\\n.ag-theme-material .ag-header-select-all {\\n  width: 100% !important;\\n  text-align: center !important; }\\n\\n.atr-grid-left-margin {\\n  left: 20px; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { ListAndSearchFilterType } from '../../../../..//shared/enums/list-and-search-filter-type.enum';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CommodityInputComponent } from '../../../../../shared/components/commodity-input/commodity-input.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ListAndSearchComponent } from '../../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AllocatedTradeSearchResult } from '../../../../../shared/dtos/allocated-trade';\r\nimport { AllocationSetUp } from '../../../../../shared/entities/allocation-set-up-entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { ColumnConfigurationProperties } from '../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { LockFunctionalContext } from '../../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { AllocatedTradeDisplayView } from '../../../../../shared/models/allocated-trade-display-view';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { AllocateSectionCommand } from '../../../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { TradeAllocationDataLoader } from '../../../../../shared/services/list-and-search/tradeAllocation-data-loader';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { GetWarningMessages } from '../../../../../shared/validators/warning-messages-validator.validator';\r\nimport { AllocationMessage } from '../../../../entities/allocation-message';\r\n\r\n@Component({\r\n    selector: 'atlas-allocation-table-form-component',\r\n    templateUrl: './allocation-table-form-component.component.html',\r\n    styleUrls: ['./allocation-table-form-component.component.scss'],\r\n    providers: [TradeAllocationDataLoader],\r\n})\r\nexport class AllocationTableFormComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n\r\n    @Output() readonly validateWarningMessages = new EventEmitter<any>();\r\n    @Output() readonly disableAllocateButton = new EventEmitter<any>();\r\n    @Output() readonly contractRowSelected = new EventEmitter<string[]>();\r\n    @Output() readonly counterpartyForContractRowSelected = new EventEmitter<string[]>();\r\n    @ViewChild('commodityInput') commodityInput: CommodityInputComponent;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    getAllocationWarningMessagesSubscription: Subscription;\r\n    allocationMessage: AllocationMessage[] = [];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    allocationGridCols: agGrid.ColDef[];\r\n    allocationGridOptions: agGrid.GridOptions = {};\r\n    allocationGridRows: AllocatedTradeDisplayView[] = [];\r\n    allocatedTrades: AllocatedTradeDisplayView[];\r\n    sectionId: number;\r\n    searchedValueCtrl = new AtlasFormControl('searchedValue');\r\n    contractType: string;\r\n    tradeRowData: string[] = [];\r\n    tradeRowDataForWashout: string[] = [];\r\n    masterData: MasterData;\r\n    isEmptyStateShowed: boolean = false;\r\n    emptySearchResultTitle: string;\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    locking: number[] = [];\r\n    unlocking: number[] = [];\r\n    rowId: string[] = [];\r\n    columnDefs: agGrid.ColDef[];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    selectedTradeAllocationData: AllocatedTradeSearchResult;\r\n    dataVersionId: number;\r\n    allocationSetUpData: AllocationSetUp[] = [];\r\n    company: string;\r\n\r\n    gridCode = 'tradeForTradeAllocationList';\r\n    filters: ListAndSearchFilter[] = [];\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    isLoading: boolean;\r\n    hasGridSharing = false;\r\n    gridPreferences: UserGridPreferencesParameters = new UserGridPreferencesParameters();\r\n\r\n    constructor(\r\n        private tradingService: TradingService,\r\n        private activeroute: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private executionService: ExecutionService,\r\n        private route: ActivatedRoute,\r\n        private uiService: UiService,\r\n        protected lockService: LockService,\r\n        protected dialog: MatDialog,\r\n        protected companyManagementService: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n        protected configurationService: ConfigurationService,\r\n        protected gridConfigurationProvider: GridConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        public dataLoader: TradeAllocationDataLoader,\r\n\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.sectionId = Number(this.activeroute.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.getAllocationSetUpData(this.company);\r\n    }\r\n\r\n    externalFilterPresent() {\r\n        return true;\r\n    }\r\n\r\n    externalFilterPass(node) {\r\n        const contractLabel = node.data.contractLabel;\r\n        if (!this.searchedValueCtrl.value || !contractLabel) {\r\n            return contractLabel === 'No Value';\r\n        } else {\r\n            return contractLabel === this.searchedValueCtrl.value.toUpperCase()\r\n                || contractLabel.toUpperCase().toString().startsWith(this.searchedValueCtrl.value.toUpperCase());\r\n        }\r\n    }\r\n\r\n    initForm(entity: any, isEdit: boolean): any {\r\n        const tradeRecord = new SectionCompleteDisplayView(entity);\r\n        this.contractType = tradeRecord.type;\r\n        return entity;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.allocationGridOptions.columnDefs = this.allocationGridCols;\r\n        this.gridApi = this.allocationGridOptions.api;\r\n        this.gridColumnApi = this.allocationGridOptions.columnApi;\r\n\r\n        this.gridService.sizeColumns(this.allocationGridOptions);\r\n        this.gridApi.showNoRowsOverlay();\r\n    }\r\n\r\n    onSearchChange() {\r\n        this.additionalFilters = [];\r\n        const contractRefField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'PhysicalContractCode');\r\n        const ParentSectionIdField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'PhysicalContractSectionId');\r\n\r\n        if (!this.listAndSearchComponent) {\r\n            return;\r\n        } else {\r\n\r\n            if (this.searchedValueCtrl.value) {\r\n                if ((this.contractType === ContractTypes[ContractTypes.Purchase])\r\n                    && this.searchedValueCtrl.value.substr(0, 1).toUpperCase() === 'P') {\r\n                    this.displayMessageWhenPruchaseAllocatedToSales();\r\n                } else if ((this.contractType === ContractTypes[ContractTypes.Sale])\r\n                    && this.searchedValueCtrl.value.substr(0, 1).toUpperCase() === 'S') {\r\n                    this.displayMessageWhenSaleAllocatedToPurchase();\r\n                } else {\r\n                    if (contractRefField) {\r\n                        const filterContractReference = new ListAndSearchFilter();\r\n                        filterContractReference.fieldId = contractRefField.fieldId;\r\n                        filterContractReference.fieldName = contractRefField.fieldName;\r\n                        filterContractReference.predicate = {\r\n                            filterType: ListAndSearchFilterType.Text,\r\n                            operator: 'eq',\r\n                            value1: this.searchedValueCtrl.value + '%',\r\n                        };\r\n                        filterContractReference.isActive = true;\r\n                        this.additionalFilters.push(filterContractReference);\r\n                    }\r\n                    if (ParentSectionIdField) {\r\n                        const filterParentContractReference = new ListAndSearchFilter();\r\n                        filterParentContractReference.fieldId = ParentSectionIdField.fieldId;\r\n                        filterParentContractReference.fieldName = ParentSectionIdField.fieldName;\r\n                        filterParentContractReference.predicate = {\r\n                            filterType: ListAndSearchFilterType.Numeric,\r\n                            operator: 'eq',\r\n                            value1: this.sectionId.toString(),\r\n                        };\r\n                        filterParentContractReference.isActive = true;\r\n                        this.additionalFilters.push(filterParentContractReference);\r\n                    }\r\n                    this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n                    this.listAndSearchComponent.loadData(true);\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    initAdditionnalFilters() {\r\n        if (this.additionalFilters.length === 0) {\r\n            this.additionalFilters = [];\r\n        }\r\n        if (this.listAndSearchComponent &&\r\n            this.listAndSearchComponent.columnConfiguration &&\r\n            this.listAndSearchComponent.columnConfiguration.length > 0) {\r\n            const ParentSectionIdField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'PhysicalContractSectionId');\r\n            if (ParentSectionIdField) {\r\n                const filterParentContractReference = new ListAndSearchFilter();\r\n                filterParentContractReference.fieldId = ParentSectionIdField.fieldId;\r\n                filterParentContractReference.fieldName = ParentSectionIdField.fieldName;\r\n                filterParentContractReference.predicate = {\r\n                    filterType: ListAndSearchFilterType.Numeric,\r\n                    operator: 'eq',\r\n                    value1: this.sectionId.toString(),\r\n                };\r\n                filterParentContractReference.isActive = true;\r\n                this.additionalFilters.push(filterParentContractReference);\r\n            }\r\n            this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n            this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n            this.listAndSearchComponent.loadData(true);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    filter(search: any) {\r\n        if (search) {\r\n            const abc = [];\r\n            this.allocationGridRows.forEach((row) => {\r\n                if (row.contractLabel.toLowerCase().startsWith(search.toLowerCase())) {\r\n                    abc.push(row);\r\n                }\r\n            })\r\n            this.gridApi.setRowData(abc);\r\n        }\r\n    }\r\n\r\n    onRowDataChanged() {\r\n        this.gridService.sizeColumns(this.allocationGridOptions);\r\n    }\r\n\r\n    rowSelected(event) {\r\n        this.tradeRowData = [];\r\n        this.tradeRowDataForWashout = [];\r\n        if (event.node.selected === true) {\r\n            this.rowId = [];\r\n            this.selectedTradeAllocationData = event.data;\r\n            this.listAndSearchComponent.unCheckSelectContracts(this.selectedTradeAllocationData.physicalContractCode, false);\r\n            this.rowId.push(event.node.id);\r\n            this.tradeRowData.push(event.data.quantity);\r\n            this.tradeRowData.push(event.data.weightCode);\r\n            this.contractRowSelected.emit(this.tradeRowData);\r\n            this.tradeRowDataForWashout.push(event.data.counterparty);\r\n            this.tradeRowDataForWashout.push(event.data.currencyCode);\r\n\r\n            this.counterpartyForContractRowSelected.emit(this.tradeRowDataForWashout);\r\n        } else {\r\n            if (this.rowId && this.rowId[0] === event.node.id) {\r\n                this.contractRowSelected.emit(this.tradeRowData);\r\n            }\r\n        }\r\n        if (event.data.type === ContractTypes.Purchase.toString() && event.node.selected &&\r\n            this.contractType === ContractTypes[ContractTypes.Purchase]) {\r\n            this.displayMessageWhenPruchaseAllocatedToSales();\r\n        } else {\r\n\r\n            if (event.node.selected === true) {\r\n                // check box selected.\r\n                // fetch all warning messages.\r\n                this.allocationMessage = [];\r\n                this.getAllocationWarningMessagesSubscription =\r\n                    this.executionService.getWarningMessages(this.sectionId, event.data.sectionId)\r\n                        .subscribe((data) => {\r\n                            if (data.value.length > 1) {\r\n                                this.allocationMessage = GetWarningMessages(data.value, this.allocationSetUpData);\r\n                            }\r\n                            this.validateWarningMessages.emit(this.allocationMessage);\r\n                        });\r\n            } else {\r\n                // checkbox is unselected.\r\n                this.validateWarningMessages.emit('ClearTradeSelection');\r\n            }\r\n        }\r\n        this.grantLock(event.data.sectionId, event.node);\r\n    }\r\n\r\n    grantLock(sectionId: number, node: agGrid.RowNode) {\r\n        if (this.dataVersionId) {\r\n            return;\r\n        }\r\n        if (node.isSelected()) {\r\n            if (!this.locking.includes(sectionId)) {\r\n                this.locking.push(sectionId);\r\n                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.gridApi.deselectNode(node);\r\n                        this.locking = this.locking.filter((id) => id !== sectionId);\r\n                    } else {\r\n                        this.subscriptions.push(this.lockService.lockContract(sectionId, LockFunctionalContext.Allocation)\r\n                            .subscribe(() => {\r\n                                this.refeshResourceInformation();\r\n                                this.locking = this.locking.filter((id) => id !== sectionId);\r\n                            }));\r\n\r\n                    }\r\n                }));\r\n            }\r\n        } else {\r\n            if (!this.unlocking.includes(sectionId)) {\r\n                this.unlocking.push(sectionId);\r\n                this.refeshResourceInformation();\r\n                if (this.resourcesInformation.filter((rsc) => rsc.resourceId === sectionId).length === 0) {\r\n                    this.subscriptions.push(this.lockService.unlockContract(sectionId, LockFunctionalContext.Allocation).subscribe(() => {\r\n                        node.setRowSelectable(true);\r\n                        this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                    }));\r\n                } else {\r\n                    node.setRowSelectable(true);\r\n                    this.unlocking = this.unlocking.filter((id) => id !== sectionId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    refeshResourceInformation() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const mainContractInformation = new LockResourceInformation();\r\n        mainContractInformation.resourceType = 'Contract';\r\n        mainContractInformation.resourceId = this.sectionId;\r\n        this.resourcesInformation.push(mainContractInformation);\r\n        if (this.gridApi) {\r\n            this.gridApi.forEachNode((node) => {\r\n                if (node.isSelected()) {\r\n                    const resourceInformation = new LockResourceInformation();\r\n                    resourceInformation.resourceType = 'Contract';\r\n                    resourceInformation.resourceId = node.data.sectionId;\r\n                    resourceInformation.resourceCode = node.data.contractReference;\r\n                    this.resourcesInformation.push(resourceInformation);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    displayMessageWhenPruchaseAllocatedToSales() {\r\n        this.disableAllocateButton.emit(true);\r\n        this.snackbarService.throwErrorSnackBar(\r\n            'Purchase contract can only be allocated to a Sale contract',\r\n        );\r\n    }\r\n\r\n    displayMessageWhenSaleAllocatedToPurchase() {\r\n        this.disableAllocateButton.emit(true);\r\n        this.snackbarService.throwErrorSnackBar(\r\n            'Sale contract can only be allocated to a Purchase contract',\r\n        );\r\n    }\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n\r\n                this.gridPreferences = {\r\n                    company: this.company,\r\n                    gridId: this.gridCode,\r\n                    gridOptions: this.allocationGridOptions,\r\n                    sharingEnabled: this.hasGridSharing,\r\n                };\r\n            });\r\n    }\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        this.columnDefs = [];\r\n        // selection column\r\n        this.columnDefs.push(\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                pinned: 'left',\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n            });\r\n\r\n        // grid config\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.columnDefs = this.columnDefs.concat(configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                hide: !config.isVisible,\r\n            };\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n\r\n            return columnDef;\r\n        }));\r\n\r\n    }\r\n\r\n    quantityFormatter(params) {\r\n        return params.value.toFixed(2) + ' ' + params.value.quantityUnitCode;\r\n    }\r\n\r\n    getTradesForAllocation() {\r\n        const filters = this.filters.map((x) => ({ ...x }));\r\n        this.tradingService.searchContractsToAllocate(filters)\r\n            .pipe(\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((data) => {\r\n                this.allocatedTrades = data;\r\n                data.forEach((trade) => {\r\n                    this.allocationGridRows.push(new AllocatedTradeDisplayView(trade));\r\n                });\r\n                this.gridApi.setRowData([]);\r\n                this.onSearchChange();\r\n            });\r\n    }\r\n\r\n    populateEntity(command: any): any {\r\n        const allocateSection = command as AllocateSectionCommand;\r\n        allocateSection.allocatedSectionId = this.selectedTradeAllocationData.sectionId;\r\n        allocateSection.targetQuantity = this.selectedTradeAllocationData.quantity;\r\n        allocateSection.allocatedSectionReference = this.selectedTradeAllocationData.physicalContractCode;\r\n        return allocateSection;\r\n    }\r\n\r\n    resetAllocationgrid() {\r\n        this.gridApi.deselectAll();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.getAllocationWarningMessagesSubscription) {\r\n            this.getAllocationWarningMessagesSubscription.unsubscribe();\r\n        }\r\n        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(() => {\r\n            this.subscriptions.forEach((subscription: Subscription) => {\r\n                subscription.unsubscribe();\r\n            });\r\n        }));\r\n    }\r\n\r\n    // this method will fetch allocationsetupdata for a company\r\n    getAllocationSetUpData(company: string) {\r\n        this.configurationService.getAllocationSetUpByCompany(company)\r\n            .subscribe((data) => {\r\n                if (data && data.length > 0) {\r\n                    this.allocationSetUpData = data;\r\n                }\r\n            });\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"card-header-luke\\\">\\r\\n\\r\\n    <mat-content class=\\\"content-size\\\">\\r\\n        <mat-card-title>\\r\\n            Main Information\\r\\n        </mat-card-title>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <div fxFlex=\\\"35\\\"\\r\\n                 fxFlex.lt-md=\\\"40\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start\\\">\\r\\n                    <div fxLayout=\\\"row\\\">\\r\\n                        <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                        fxFlex=\\\"35%\\\">\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Contract Reference Number\\\"\\r\\n                                   readonly\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]=\\\"counterReferenceNumberCtrl\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                        fxFlex=\\\"55%\\\">\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Shipping period\\\"\\r\\n                                   readonly\\r\\n                                   [formControl]=\\\"shippingPeriodCtrl\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\">\\r\\n                        <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                        fxFlex=\\\"35%\\\">\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Counter Party\\\"\\r\\n                                   readonly\\r\\n                                   autocomplete=\\\"off\\\"\\r\\n                                   [formControl]=\\\"counterpartyCtrl\\\">\\r\\n                        </mat-form-field>\\r\\n                        <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                        fxFlex=\\\"55%\\\">\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Description\\\"\\r\\n                                   readonly\\r\\n                                   [formControl]=\\\"descriptionCtrl\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"45\\\"\\r\\n                 fxFlex.lt-md=\\\"60\\\">\\r\\n                <div fxLayout=\\\"column\\\">\\r\\n                    <div fxLayout=\\\"row\\\">\\r\\n                        <atlas-commodity-input #commodityInput\\r\\n                                               isFromAllocationPage=true\\r\\n                                               fxFlex=100></atlas-commodity-input>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\">\\r\\n                        <div fxFlex=\\\"65\\\">\\r\\n                            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                            fxFlex=\\\"21%\\\">\\r\\n                                <input matInput\\r\\n                                       placeholder=\\\"Currency\\\"\\r\\n                                       readonly\\r\\n                                       [formControl]=\\\"currencyValueCtrl\\\"\\r\\n                                       autocomplete=\\\"off\\\">\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                            fxFlex=\\\"21%\\\">\\r\\n                                <input matInput\\r\\n                                       placeholder=\\\"Price Code\\\"\\r\\n                                       readonly\\r\\n                                       [formControl]=\\\"priceCodeCtrl\\\"\\r\\n                                       autocomplete=\\\"off\\\">\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                            fxFlex=\\\"21%\\\">\\r\\n                                <input matInput\\r\\n                                       placeholder=\\\"Quantity Code\\\"\\r\\n                                       readonly\\r\\n                                       [formControl]=\\\"quantityCodeCtrl\\\"\\r\\n                                       autocomplete=\\\"off\\\">\\r\\n                            </mat-form-field>\\r\\n                            <mat-form-field class=\\\"mat-read-only-field\\\"\\r\\n                                            fxFlex=\\\"24%\\\">\\r\\n                                <input matInput\\r\\n                                       placeholder=\\\"Quantity\\\"\\r\\n                                       readonly\\r\\n                                       [formControl]=\\\"quantityValueCtrl\\\"\\r\\n                                       autocomplete=\\\"off\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"fill\\\"></div>\\r\\n        </div>\\r\\n    </mat-content>\\r\\n\\r\\n</mat-card>\\r\\n\"","module.exports = \".content-size {\\n  font-size: 14px; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CommodityInputComponent } from '../../../../../shared/components/commodity-input/commodity-input.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ContractTypes } from '../../../../../shared/enums/contract-type.enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AllocateSectionCommand } from '../../../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-header-allocation-form-component',\r\n    templateUrl: './header-allocation-form-component.component.html',\r\n    styleUrls: ['./header-allocation-form-component.component.scss'],\r\n})\r\n\r\nexport class HeaderAllocationFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('commodityInput') commodityInput: CommodityInputComponent;\r\n    commodityFormGroup: FormGroup;\r\n    counterpartyCtrl = new AtlasFormControl('counterparty');\r\n    counterReferenceNumberCtrl = new AtlasFormControl('counterparty');\r\n    quantityValueCtrl = new AtlasFormControl('quantityValue');\r\n    quantityCodeCtrl = new AtlasFormControl('quantityCode');\r\n    priceCodeCtrl = new AtlasFormControl('priceCode');\r\n    currencyValueCtrl = new AtlasFormControl('currencyValue');\r\n    descriptionCtrl = new AtlasFormControl('description');\r\n    shippingPeriodCtrl = new AtlasFormControl('shippingPeriod');\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    masterData: MasterData = new MasterData();\r\n    listOfMasterData = [\r\n        MasterDataProps.Counterparties,\r\n        MasterDataProps.Commodities,\r\n        MasterDataProps.Currencies,\r\n        MasterDataProps.PriceUnits,\r\n        MasterDataProps.WeightUnits,\r\n    ];\r\n    constructor(protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private formatDate: FormatDatePipe,\r\n        private route: ActivatedRoute,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    populateEntity(command: any): any {\r\n        const allocateSection = command as AllocateSectionCommand;\r\n        allocateSection.sourceQuantity = this.quantityValueCtrl.value ? this.quantityValueCtrl.value : null;\r\n        allocateSection.sectionReference = this.counterReferenceNumberCtrl.value ? this.counterReferenceNumberCtrl.value : null;\r\n        return allocateSection;\r\n    }\r\n\r\n    initForm(entity: any): any {\r\n        if (entity) {\r\n            this.model = new SectionCompleteDisplayView(entity);\r\n            this.counterReferenceNumberCtrl.setValue(this.model.reference);\r\n            this.shippingPeriodCtrl.setValue(\r\n                this.formatDate.transform(this.model.deliveryPeriodStart)\r\n                + ' - ' +\r\n                this.formatDate.transform(this.model.deliveryPeriodEnd));\r\n\r\n            if (this.model.type === ContractTypes[ContractTypes.Purchase]) {\r\n                this.counterpartyCtrl.setValue(this.model.sellerCode);\r\n            } else if (this.model.type === ContractTypes[ContractTypes.Sale]) {\r\n                this.counterpartyCtrl.setValue(this.model.buyerCode);\r\n            }\r\n\r\n            const description = this.masterData.counterparties\r\n                .find((counterpartyitem) => counterpartyitem.counterpartyCode === this.counterpartyCtrl.value);\r\n            this.descriptionCtrl.setValue(description ? description.description : '');\r\n\r\n            const commodity = this.masterData.commodities.find((cmy) => {\r\n                return cmy.commodityId === this.model.commodityId;\r\n            });\r\n            this.commodityInput.patchValue(commodity);\r\n            this.commodityInput.getFormGroup().disable({ emitEvent: false });\r\n\r\n            const price = this.masterData.priceUnits\r\n                .find((priceunit) => priceunit.priceUnitId === this.model.priceUnitId);\r\n            this.priceCodeCtrl.setValue(price ? price.priceCode : '');\r\n\r\n            const weightUnit = this.masterData.weightUnits\r\n                .find((weightUnitItem) => weightUnitItem.weightUnitId === this.model.weightUnitId);\r\n            this.quantityCodeCtrl.setValue(weightUnit ? weightUnit.weightCode : '');\r\n            this.quantityValueCtrl.setValue(this.model.quantity);\r\n            this.currencyValueCtrl.setValue(this.model.currency);\r\n        }\r\n        this.commodityInput.isEditableCommodityForm();\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-allocation-card\\\">\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"10%\\\">\\r\\n            <mat-form-field fxFlex=\\\"85%\\\">\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Search\\\"\\r\\n                       value=\\\"Searched Value\\\">\\r\\n            </mat-form-field>\\r\\n            <mat-icon>search</mat-icon>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-search-allocation-form-component',\r\n    templateUrl: './search-allocation-form-component.component.html',\r\n    styleUrls: ['./search-allocation-form-component.component.scss'],\r\n})\r\nexport class SearchAllocationFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-allocation-shipping-card\\\">\\r\\n    <div class=\\\"mat-card-title\\\">\\r\\n        Allocation Options\\r\\n    </div>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxFlex=\\\"100%\\\">\\r\\n            <mat-form-field fxFlex=\\\"14%\\\">\\r\\n                <mat-select placeholder=\\\"Transfer Shipping\\\"\\r\\n                            [formControl]=\\\"shippingTypeCtrl\\\">\\r\\n                    <mat-option *ngFor=\\\"let type of shippingTypes\\\"\\r\\n                                [value]=\\\"type.value\\\">{{type.shippingDescription}}</mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"14%\\\"\\r\\n                            *ngIf=\\\"!dataVersionId\\\">\\r\\n                <mat-select placeholder=\\\"Allocation option\\\"\\r\\n                            [formControl]=\\\"allocationSourceTypeCtrl\\\">\\r\\n                    <mat-option *ngFor=\\\"let type of allocationSourceTypes\\\"\\r\\n                                [value]=\\\"type.value\\\">{{type.allocationDescription}} </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"14%\\\">\\r\\n                <input matInput\\r\\n                       [textMask]=\\\"{mask:mask}\\\"\\r\\n                       [formControl]=\\\"sourceQuantityCtrl\\\"\\r\\n                       placeholder=\\\"Quantity to allocate\\\"\\r\\n                       (keydown.enter)=\\\"$event.preventDefault()\\\"\\r\\n                       [required]=\\\"sourceQuantityCtrl.isRequired\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (blur)=\\\"updateQuantityValue($event.target.value)\\\">\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('required')\\\">\\r\\n                    Quantity to allocate is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('isPositiveError')\\\">\\r\\n                    Quantity to allocate must be positive.\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('max')\\\">\\r\\n                    Cannot be greater than quantity available.\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"sourceQuantityCtrl.hasError('min')\\\">\\r\\n                    Quantity cannot be zero.\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"12%\\\">\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"sourceQuantityCodeCtrl\\\"\\r\\n                       placeholder=\\\"Quantity Code\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"$event.preventDefault()\\\"\\r\\n                       readonly>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field fxFlex=\\\"14%\\\"\\r\\n                            *ngIf=\\\"!dataVersionId\\\">\\r\\n                <mat-select placeholder=\\\"Allocation option\\\"\\r\\n                            [formControl]=\\\"allocationTargetTypeCtrl\\\">\\r\\n                    <mat-option *ngFor=\\\"let type of allocationTargetTypes\\\"\\r\\n                                [value]=\\\"type.value\\\">{{type.allocationDescription}} </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <atlas-form-input fxFlex=\\\"14%\\\"\\r\\n                              [fieldControl]=\\\"targetQuantityCtrl\\\"\\r\\n                              [isEditable]=\\\"targetQuantityCtrl.enabled\\\"\\r\\n                              label=\\\"Quantity to allocate\\\"\\r\\n                              [textMask]=\\\"{mask:mask}\\\"\\r\\n                              (keydown.enter)=\\\"$event.preventDefault()\\\"\\r\\n                              (blur)=\\\"updateQuantityValue($event.target.value)\\\"\\r\\n                              [errorMap]=\\\"targetQuantityErrorMap\\\"\\r\\n                              class=\\\"custom-input\\\">\\r\\n            </atlas-form-input>\\r\\n            <mat-form-field fxFlex=\\\"12%\\\">\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"targetQuantityCodeCtrl\\\"\\r\\n                       placeholder=\\\"Quantity Code\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       (keydown.enter)=\\\"$event.preventDefault()\\\"\\r\\n                       readonly>\\r\\n                <mat-error *ngIf=\\\"targetQuantityCodeCtrl.hasError('required')\\\">\\r\\n                    Quantity Code is required\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".custom-input {\\n  margin: 0 8px 0 0; }\\n\"","import { ChangeDetectorRef, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { isPositive } from '../../../../../shared/directives/number-validators.directive';\r\nimport { AllocationTypes } from '../../../../../shared/entities/allocation-type.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ShippingTypes } from '../../../../../shared/entities/shipping-type-entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { AllocationType } from '../../../../../shared/enums/allocation-type.enum';\r\nimport { ShippingType } from '../../../../../shared/enums/shipping-type-enum';\r\nimport { SectionCompleteDisplayView } from '../../../../../shared/models/section-complete-display-view';\r\nimport { CustomNumberMask } from '../../../../../shared/numberMask';\r\nimport { AllocateSectionCommand } from '../../../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-shipping-allocation-form-component',\r\n    templateUrl: './shipping-allocation-form-component.component.html',\r\n    styleUrls: ['./shipping-allocation-form-component.component.scss'],\r\n})\r\nexport class ShippingAllocationFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    dataVersionId: number;\r\n    @Output() readonly isShippingFormInvalid = new EventEmitter();\r\n    shippingTypeCtrl = new AtlasFormControl('shippingType');\r\n    allocationSourceTypeCtrl = new AtlasFormControl('allocationSourceType');\r\n    sourceQuantityCtrl = new AtlasFormControl('sourceQuantity');\r\n    sourceQuantityCodeCtrl = new AtlasFormControl('sourceQuantityCode');\r\n    allocationTargetTypeCtrl = new AtlasFormControl('allocationTargetType');\r\n    targetQuantityCtrl = new AtlasFormControl('targetQuantity');\r\n    targetQuantityCodeCtrl = new AtlasFormControl('targetQuantityCode');\r\n    mask = CustomNumberMask(12, 10, true);\r\n    shippingTypes: ShippingTypes[] = [];\r\n    allocationSourceTypes: AllocationTypes[] = [];\r\n    allocationTargetTypes: AllocationTypes[] = [];\r\n    model: SectionCompleteDisplayView = new SectionCompleteDisplayView();\r\n    masterData: MasterData = new MasterData();\r\n    targetQuantity: number = 0;\r\n    defaultQuantiy: number = 0;\r\n    listOfMasterData = [\r\n        MasterDataProps.WeightUnits,\r\n    ];\r\n    quantityUpdate: boolean = false;\r\n    targetQuantityErrorMap: Map<string, string> = new Map();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected masterdataService: MasterdataService,\r\n        private cdr: ChangeDetectorRef,\r\n        protected utilService: UtilService,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.targetQuantityErrorMap\r\n            .set('required', 'Required *')\r\n            .set('isPositiveError', 'Quantity to allocate must be positive.')\r\n            .set('min', ' Quantity cannot be zero.')\r\n            .set('max', 'Cannot be greater than quantity available.');\r\n    }\r\n\r\n    ngOnInit() {\r\n        for (const type in ShippingType) {\r\n            if (typeof ShippingType[type] === 'number') {\r\n                this.shippingTypes.push({ value: ShippingType[type] as any, shippingDescription: type });\r\n            }\r\n        }\r\n        this.shippingTypeCtrl.patchValue(ShippingType.PurchaseToSale);\r\n        for (const type in AllocationType) {\r\n            if (typeof AllocationType[type] === 'number') {\r\n                this.allocationSourceTypes.push({\r\n                    value: AllocationType[type] as any,\r\n                    allocationDescription: this.getDescription(AllocationType[type] as any, 'contract'),\r\n\r\n                });\r\n                this.allocationTargetTypes.push({\r\n                    value: AllocationType[type] as any,\r\n                    allocationDescription: this.getDescription(AllocationType[type] as any, 'contract'),\r\n                });\r\n            }\r\n        }\r\n        this.allocationSourceTypeCtrl.patchValue(AllocationType.SplitWhereNecessary);\r\n        this.allocationTargetTypeCtrl.patchValue(AllocationType.SplitWhereNecessary);\r\n        if (this.dataVersionId) {\r\n            this.targetQuantityCtrl.disable();\r\n        }\r\n    }\r\n\r\n    initForm(entity: any) {\r\n        this.getQuantityData(entity);\r\n        this.setValidators();\r\n        this.cdr.detectChanges();\r\n    }\r\n\r\n    getQuantityData(entity: any) {\r\n        if (entity) {\r\n            this.model = new SectionCompleteDisplayView(entity);\r\n            const weightUnit = this.masterData.weightUnits\r\n                .filter((weightUnitItem: WeightUnit) => weightUnitItem.weightUnitId === this.model.weightUnitId);\r\n            this.sourceQuantityCodeCtrl.setValue((weightUnit.length > 0) ? weightUnit[0].weightCode : '');\r\n            this.sourceQuantityCtrl.setValue(this.model.quantity);\r\n            this.defaultQuantiy = this.model.quantity;\r\n        }\r\n    }\r\n\r\n    populateEntity(command: any): any {\r\n        const allocateSection = command as AllocateSectionCommand;\r\n        allocateSection.shippingType = this.shippingTypeCtrl.value ? this.shippingTypeCtrl.value : null;\r\n        allocateSection.quantity = this.sourceQuantityCtrl.value ?\r\n            Number(this.sourceQuantityCtrl.value.toString().replace(/,/g, '')) : null;\r\n        allocateSection.allocationSourceType = this.allocationSourceTypeCtrl.value ? this.allocationSourceTypeCtrl.value : null;\r\n        allocateSection.allocationTargetType = this.allocationTargetTypeCtrl.value ? this.allocationTargetTypeCtrl.value : null;\r\n        return allocateSection;\r\n    }\r\n\r\n    getDescription(id: number, entityName: string): string {\r\n        switch (id) {\r\n            case AllocationType.SplitWhereNecessary:\r\n                return 'Split ' + entityName + ' where necessary';\r\n            case AllocationType.AdjustWhereNecessary:\r\n                return 'Adjust ' + entityName + ' where necessary';\r\n        }\r\n    }\r\n\r\n    contractRowSelected(quantityData: string[]) {\r\n        if (quantityData.length > 1) {\r\n            this.targetQuantity = Number(quantityData[0]);\r\n            if (this.defaultQuantiy >= this.targetQuantity) {\r\n                this.sourceQuantityCtrl.setValue(quantityData[0]);\r\n                this.targetQuantityCtrl.setValue(quantityData[0]);\r\n            } else if (this.defaultQuantiy < this.targetQuantity) {\r\n                this.sourceQuantityCtrl.setValue(this.defaultQuantiy);\r\n                this.targetQuantityCtrl.setValue(this.defaultQuantiy);\r\n            }\r\n            this.targetQuantityCodeCtrl.setValue(quantityData[1]);\r\n        } else {\r\n            this.targetQuantityCtrl.setValue('');\r\n            this.targetQuantityCodeCtrl.setValue('');\r\n        }\r\n        this.setValidators();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            shippingTypeCtrl: this.shippingTypeCtrl,\r\n            allocationSourceTypeCtrl: this.allocationSourceTypeCtrl,\r\n            sourceQuantityCtrl: this.sourceQuantityCtrl,\r\n            allocationTargetTypeCtrl: this.allocationTargetTypeCtrl,\r\n            targetQuantityCtrl: this.targetQuantityCtrl,\r\n            targetQuantityCodeCtrl: this.targetQuantityCodeCtrl,\r\n        },\r\n        );\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setValidators() {\r\n        this.sourceQuantityCtrl.setValidators(\r\n            Validators.compose([isPositive()\r\n                , Validators.required, Validators.min(0.0000000001), Validators.max(Number(this.model.quantity))]),\r\n        );\r\n        this.targetQuantityCtrl.setValidators(\r\n            Validators.compose([isPositive(),\r\n            Validators.required, Validators.min(0.0000000001),\r\n            (control: AbstractControl) => Validators.max(Number(this.targetQuantity) > 0 ? Number(this.targetQuantity) : null)]),\r\n        );\r\n        this.targetQuantityCodeCtrl.setValidators(Validators.compose([Validators.required]));\r\n    }\r\n\r\n    updateQuantityValue(value) {\r\n        if (value) {\r\n            this.targetQuantityCtrl.setValue(value);\r\n            this.sourceQuantityCtrl.setValue(value);\r\n            const formattedTargetNumber = Number(this.targetQuantityCtrl.value.toString().replace(/,/g, ''));\r\n            const formattedSourceNumber = Number(this.sourceQuantityCtrl.value.toString().replace(/,/g, ''));\r\n            if (formattedTargetNumber > this.defaultQuantiy || formattedTargetNumber > this.targetQuantity) {\r\n                this.targetQuantityCtrl.setErrors({ max: true });\r\n            }\r\n            if (formattedSourceNumber > this.defaultQuantiy || formattedSourceNumber > this.targetQuantity) {\r\n                this.sourceQuantityCtrl.setErrors({ max: true });\r\n            }\r\n        }\r\n        if (!this.formGroup.valid) {\r\n            this.isShippingFormInvalid.emit(true);\r\n        } else {\r\n            this.isShippingFormInvalid.emit(false);\r\n        }\r\n        this.quantityUpdate = true;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"trade-allocation-messages\\\">\\r\\n    <mat-card class=\\\"trade-allocation-warning-card\\\"\\r\\n              *ngIf=\\\"showRestrictedDescriptionCard\\\">\\r\\n        <div class=\\\"error-circle-icon\\\">\\r\\n            <mat-icon>remove_circle</mat-icon>\\r\\n        </div>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                Allocation cannot be completed\\r\\n            </mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n                {{restrictedWarningMessage}}\\r\\n            </mat-card-subtitle>\\r\\n            <button class=\\\"remove-button\\\"\\r\\n                    mat-button\\r\\n                    (click)=\\\"onRestrictRemoveclicked()\\\">REMOVE\\r\\n            </button>\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n\\r\\n    <mat-card class=\\\"trade-allocation-warning-card\\\"\\r\\n              *ngIf=\\\"showWarningDescriptionCard\\\">\\r\\n        <div class=\\\"warning-circle-icon\\\">\\r\\n            <mat-icon>warning_outline</mat-icon>\\r\\n        </div>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                Allocation can be completed\\r\\n            </mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n                {{WarningMessage}}\\r\\n            </mat-card-subtitle>\\r\\n            <button class=\\\"remove-button\\\"\\r\\n                    mat-button\\r\\n                    (click)=\\\"onWarningRemoveButtonClicked()\\\">REMOVE\\r\\n            </button>\\r\\n\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n\\r\\n    <mat-card class=\\\"trade-allocation-warning-card\\\"\\r\\n              *ngIf=\\\"showAllowDescriptionCard\\\">\\r\\n        <div class=\\\"success-circle-icon\\\">\\r\\n            <mat-icon>check</mat-icon>\\r\\n        </div>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                Allocation is allowed\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \"mat-card.trade-allocation-warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 50px;\\n  display: flex;\\n  align-items: center; }\\n  mat-card.trade-allocation-warning-card.mat-card button {\\n    margin: 0px 15px 0 10px;\\n    box-shadow: none; }\\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 0; }\\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n  button.remove-button.mat-button {\\n  position: absolute;\\n  right: 10px;\\n  bottom: 15px; }\\n  .mat-card-header-text {\\n  display: flex;\\n  align-items: center; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { WarningMessageTypes } from '../../../../../shared/enums/warning-message-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { AllocationMessage } from '../../../../entities/allocation-message';\r\n\r\n@Component({\r\n    selector: 'atlas-warning-allocation-form-component',\r\n    templateUrl: './warning-allocation-form-component.component.html',\r\n    styleUrls: ['./warning-allocation-form-component.component.scss'],\r\n})\r\n\r\nexport class WarningAllocationFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly restrictionRemoveClick = new EventEmitter<boolean>();\r\n\r\n    allocationMessage: AllocationMessage[] = [];\r\n    showAllowDescriptionCard: boolean = false;\r\n    showRestrictedDescriptionCard: boolean = false;\r\n    showWarningDescriptionCard: boolean = false;\r\n\r\n    WarningMessage: string;\r\n    restrictedWarningMessage: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    validateWarningMessages(warningMessages: AllocationMessage[]) {\r\n        let isValidTrade = true;\r\n        this.resetAllDescriptionComponents();\r\n        if (warningMessages.length > 0) {\r\n            warningMessages.forEach((item) => {\r\n                // trade is Restricted , so return isValid =false;\r\n                if (item.errorTypeId === WarningMessageTypes.Restricted) {\r\n                    this.showRestrictedDescriptionCard = true;\r\n                    this.restrictedWarningMessage = item.message;\r\n                    isValidTrade = false;\r\n                } else if (item.errorTypeId === WarningMessageTypes.Warning) {\r\n                    // trade is Warning, allocation can be done , so return isValid =true;\r\n                    this.showWarningDescriptionCard = true;\r\n                    this.WarningMessage = item.message;\r\n                }\r\n            });\r\n            this.showAllowDescriptionCard = isValidTrade;\r\n        }\r\n        this.showAllowDescriptionCard = isValidTrade;\r\n        return isValidTrade;\r\n    }\r\n\r\n    resetAllDescriptionComponents() {\r\n        this.showAllowDescriptionCard = false;\r\n        this.showRestrictedDescriptionCard = false;\r\n        this.showWarningDescriptionCard = false;\r\n    }\r\n\r\n    onRestrictRemoveclicked() {\r\n        this.showRestrictedDescriptionCard = !this.showRestrictedDescriptionCard;\r\n        // reset ag grid.\r\n        this.restrictionRemoveClick.emit(true);\r\n    }\r\n    onWarningRemoveButtonClicked() {\r\n        this.showWarningDescriptionCard = !this.showWarningDescriptionCard;\r\n    }\r\n    showAllowWarningMessages() {\r\n        this.showAllowDescriptionCard = true;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"allocationFormGroup\\\">\\r\\n        <atlas-header-allocation-form-component #headerAllocationComponent></atlas-header-allocation-form-component>\\r\\n        <atlas-allocation-table-form-component #allocationDetailsComponent\\r\\n                                               (validateWarningMessages)=\\\"validateWarningMessages($event)\\\"\\r\\n                                               (disableAllocateButton)=\\\"disableAllocateButton($event)\\\"\\r\\n                                               (contractRowSelected)=\\\"contractRowSelected($event)\\\"\\r\\n                                               (counterpartyForContractRowSelected)=\\\"counterpartyForContractRowSelected($event)\\\">\\r\\n        </atlas-allocation-table-form-component>\\r\\n        <atlas-warning-allocation-form-component #warningAllocationComponent\\r\\n                                                 (restrictionRemoveClick)=\\\"restrictionRemoveClick($event)\\\">\\r\\n        </atlas-warning-allocation-form-component>\\r\\n\\r\\n        <atlas-shipping-allocation-form-component #shippingAllocationComponent\\r\\n                                                  (isShippingFormInvalid)=\\\"disableAllocationButton($event)\\\">\\r\\n        </atlas-shipping-allocation-form-component>\\r\\n\\r\\n        <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                                      [fabType]=\\\"fabType\\\"\\r\\n                                      [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                      [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                                      (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n        </atlas-floating-action-button>\\r\\n    </form>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as _moment from 'moment';\r\nimport { forkJoin, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { conformToMask } from 'text-mask-core';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { AtlasNumber } from '../../../shared/entities/atlas-number.entity';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { LockFunctionalContext } from '../../../shared/entities/lock-functional-context.entity';\r\nimport { MasterDataProps } from '../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { SectionTraffic } from '../../../shared/entities/section-traffic.entity';\r\nimport { Section } from '../../../shared/entities/section.entity';\r\nimport { AllocationType } from '../../../shared/enums/allocation-type.enum';\r\nimport { DiscountBasis } from '../../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from '../../../shared/enums/discount-type.enum';\r\nimport { PricingMethods } from '../../../shared/enums/pricing-method.enum';\r\nimport { SplitType } from '../../../shared/enums/split-type.enum';\r\nimport { AllocateSectionCommand } from '../../../shared/services/execution/dtos/allocate-section-command';\r\nimport { FormConfigurationProviderService } from '../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../shared/services/http-services/execution.service';\r\nimport { LockService } from '../../../shared/services/http-services/lock.service';\r\nimport { TradingService } from '../../../shared/services/http-services/trading.service';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\nimport { TrancheSplitCreationResult } from '../../../shared/services/trading/dtos/section';\r\nimport { AllocationMessage } from '../../entities/allocation-message';\r\nimport { TradeActionsService } from '../../services/trade-actions.service';\r\nimport { AuthorizationService } from './../../../core/services/authorization.service';\r\nimport { AccountingSetup } from './../../../shared/entities/accounting-setup.entity';\r\nimport { Freeze } from './../../../shared/entities/freeze.entity';\r\nimport { ContractStatus } from './../../../shared/enums/contract-status.enum';\r\nimport { PermissionLevels } from './../../../shared/enums/permission-level.enum';\r\nimport { CustomNumberMask } from './../../../shared/numberMask';\r\nimport { FreezeService } from './../../../shared/services/http-services/freeze.service';\r\nimport { PreaccountingService } from './../../../shared/services/http-services/preaccounting.service';\r\nimport { SplitCreateAndAllocateService } from './../../../shared/services/split-create-and-allocate.service';\r\nimport { TitleService } from './../../../shared/services/title.service';\r\nimport { SectionReference } from './../../entities/section-reference';\r\nimport { AllocationTableFormComponent } from './allocation-form-components/allocation-table-form-component/allocation-table-form-component.component';\r\nimport { HeaderAllocationFormComponent } from './allocation-form-components/header-allocation-form-component/header-allocation-form-component.component';\r\nimport { ShippingAllocationFormComponent } from './allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component';\r\nimport { WarningAllocationFormComponent } from './allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component';\r\nimport { ContractTypes } from './../../../shared/enums/contract-type.enum';\r\nimport { ContractInvoiceType } from './../../../shared/enums/contract-invoice-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-allocation',\r\n    templateUrl: './trade-allocation.component.html',\r\n    styleUrls: ['./trade-allocation.component.scss'],\r\n})\r\nexport class TradeAllocationComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('headerAllocationComponent') headerAllocationComponent: HeaderAllocationFormComponent;\r\n    @ViewChild('warningAllocationComponent') warningAllocationComponent: WarningAllocationFormComponent;\r\n    @ViewChild('shippingAllocationComponent') shippingAllocationComponent: ShippingAllocationFormComponent;\r\n    @ViewChild('allocationDetailsComponent') allocationDetailsComponent: AllocationTableFormComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    sectionModel: Section;\r\n    tragetSectionModel: Section;\r\n    private sectionId: number;\r\n    dataVersionId: number;\r\n    company: string;\r\n    sectionTrafficModel: SectionTraffic;\r\n    private allocateSectionSubscription: Subscription;\r\n    allocationFormGroup: FormGroup;\r\n    splitResult: TrancheSplitCreationResult[];\r\n    childFlag: number = 0;\r\n    isDisabled: boolean = true;\r\n    isSave: boolean = false;\r\n    isShippingValid: boolean = false;\r\n    allocationMessage: AllocationMessage[] = [];\r\n    masterData: MasterData = new MasterData();\r\n    listOfMasterData = [\r\n        MasterDataProps.Counterparties,\r\n        MasterDataProps.Commodities,\r\n        MasterDataProps.Currencies,\r\n        MasterDataProps.PriceUnits,\r\n        MasterDataProps.WeightUnits,\r\n    ];\r\n    isTradeAvailableForWashout: boolean = false;\r\n    // FAB\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n        protected router: Router,\r\n        private route: ActivatedRoute,\r\n        private executionService: ExecutionService,\r\n        private snackbarService: SnackbarService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected tradingService: TradingService,\r\n        public dialog: MatDialog,\r\n        protected lockService: LockService,\r\n        protected tradeActionsService: TradeActionsService,\r\n        private freezeService: FreezeService,\r\n        private preaccountingService: PreaccountingService,\r\n        private authorizationService: AuthorizationService,\r\n        private splitCreateAndAllocateService: SplitCreateAndAllocateService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));\r\n        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.allocationFormGroup = this.formBuilder.group({\r\n            shippingGroup: this.shippingAllocationComponent.getFormGroup(),\r\n        });\r\n\r\n        if (this.dataVersionId) {\r\n            this.subscriptions.push(forkJoin([\r\n                this.freezeService.getFreezeByDataVersionId(this.dataVersionId).pipe(\r\n                    map((freeze: Freeze) => {\r\n                        return _moment(freeze.freezeDate);\r\n                    }),\r\n                ),\r\n                this.preaccountingService.getAccountingSetupDetails().pipe(\r\n                    map((setup: AccountingSetup) => {\r\n                        return _moment(setup.lastMonthClosed);\r\n                    }),\r\n                )])\r\n                .subscribe((result: [_moment.Moment, _moment.Moment]) => {\r\n                    const freezeDate = result[0];\r\n                    const closedMonthDate = result[1];\r\n\r\n                    if (freezeDate.year() < closedMonthDate.year() || (\r\n                        freezeDate.year() === closedMonthDate.year() && freezeDate.month() <= closedMonthDate.month()\r\n                    )) {\r\n                        this.snackbarService.throwErrorSnackBar('You cannot allocate a trade in a freeze that is closed for accounting.');\r\n                        if (this.dataVersionId) {\r\n                            this.tradeActionsService.displaySectionInSnapshotSubject\r\n                                .next(new SectionReference(this.sectionId, this.dataVersionId));\r\n                        } else {\r\n                            this.tradeActionsService.displaySectionSubject.next(this.sectionId);\r\n                        }\r\n                    }\r\n                }));\r\n        }\r\n\r\n        this.formComponents.push(\r\n            this.allocationDetailsComponent,\r\n            this.headerAllocationComponent,\r\n            this.warningAllocationComponent,\r\n            this.shippingAllocationComponent,\r\n        );\r\n        this.lockContract();\r\n        this.tradingService.getSection(this.sectionId, PricingMethods.Priced, this.dataVersionId)\r\n            .subscribe((data) => {\r\n                this.sectionModel = data;\r\n                // Adding condition for this.dataVersionId as for a snapshot trade, we can allocate a trade even if it is not approved\r\n                if (this.dataVersionId || this.sectionModel.status === ContractStatus.Approved ||\r\n                    this.authorizationService.getPermissionLevel(\r\n                        this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= PermissionLevels.None) {\r\n                    this.formComponents.forEach((comp) => {\r\n                        comp.initForm(data, false);\r\n                    });\r\n                } else {\r\n                    if (this.dataVersionId) {\r\n                        this.tradeActionsService.displaySectionInSnapshotSubject\r\n                            .next(new SectionReference(this.sectionId, this.dataVersionId));\r\n                    } else {\r\n                        this.tradeActionsService.displaySectionSubject.next(this.sectionId);\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n        this.initFABActions();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    canDeactivate() {\r\n        if ((this.allocationFormGroup.dirty) && this.isSave === false) {\r\n            if (this.shippingAllocationComponent.quantityUpdate === true) {\r\n                return true;\r\n            } else {\r\n                return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.allocationFormGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    lockContract() {\r\n        if (!this.dataVersionId) {\r\n            this.subscriptions.push(this.lockService.lockContract(this.sectionId, LockFunctionalContext.Allocation)\r\n                .subscribe(\r\n                    () => { },\r\n                    (err) => {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: err.error.detail,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        if (this.dataVersionId) {\r\n                            this.tradeActionsService.displaySectionInSnapshotSubject\r\n                                .next(new SectionReference(this.sectionId, this.dataVersionId));\r\n                        } else {\r\n                            this.tradeActionsService.displaySectionSubject.next(this.sectionId);\r\n                        }\r\n                    }));\r\n        }\r\n    }\r\n\r\n    validateWarningMessages(warningMessage: any) {\r\n        if (warningMessage === 'ClearFilter' || warningMessage === 'ClearTradeSelection') {\r\n            this.resetAllocation();\r\n        } else if (warningMessage) {\r\n            this.warningAllocationComponent.resetAllDescriptionComponents();\r\n            if (warningMessage.length > 0) {\r\n\r\n                const isValidTrade = this.warningAllocationComponent.validateWarningMessages(warningMessage);\r\n                this.isDisabled = !isValidTrade;\r\n            } else {\r\n                this.isDisabled = false;\r\n                this.warningAllocationComponent.showAllowWarningMessages();\r\n            }\r\n        }\r\n        this.initFABActions();\r\n    }\r\n\r\n    disableAllocateButton(disable: boolean) {\r\n        this.isDisabled = disable;\r\n    }\r\n\r\n    restrictionRemoveClick(removeRestrictClick: boolean) {\r\n        if (removeRestrictClick) {\r\n            this.allocationDetailsComponent.resetAllocationgrid();\r\n            this.resetAllocation();\r\n        }\r\n    }\r\n\r\n    resetAllocation() {\r\n        this.warningAllocationComponent.resetAllDescriptionComponents();\r\n        this.isDisabled = true;\r\n    }\r\n\r\n    onTradeAllocateButtonClicked() {\r\n        this.isSave = true;\r\n        if (this.allocationFormGroup.valid) {\r\n            const allocationDetails = this.getAllocationDetails() as AllocateSectionCommand;\r\n            if (this.isTradeAvailableForWashout) {\r\n                const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Washout Contract',\r\n                        text: 'Do you want to mark this contract as washout ?',\r\n                        okButton: 'Yes',\r\n                        cancelButton: 'No',\r\n                    },\r\n                });\r\n                confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        allocationDetails.contractInvoiceTypeId = ContractInvoiceType.Washout;\r\n                        this.onAllocation(allocationDetails);\r\n                    }\r\n                    else {\r\n                        this.onAllocation(allocationDetails);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.onAllocation(allocationDetails);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n   \r\n    updateSplitDetails(allocationDetails: AllocateSectionCommand) {\r\n        const sectionIds: number[] = [];\r\n        const contractedValues: string[] = [];\r\n        switch (allocationDetails.splitType) {\r\n            case SplitType.SourceSplit:\r\n                sectionIds.push(allocationDetails.sectionId);\r\n                contractedValues.push(this.setContractValue(this.sectionModel, allocationDetails.quantity, false));\r\n                this.createSplitAndAllocate(sectionIds, allocationDetails, contractedValues);\r\n                break;\r\n            case SplitType.TargetSplit:\r\n                contractedValues.push(this.setContractValue(this.tragetSectionModel, allocationDetails.quantity, false));\r\n                sectionIds.push(allocationDetails.allocatedSectionId);\r\n                this.createSplitAndAllocate(sectionIds, allocationDetails, contractedValues);\r\n                break;\r\n            case SplitType.Both:\r\n                contractedValues.push(this.setContractValue(this.sectionModel, allocationDetails.quantity, false));\r\n                contractedValues.push(this.setContractValue(this.tragetSectionModel, allocationDetails.quantity, false));\r\n                sectionIds.push(allocationDetails.sectionId);\r\n                sectionIds.push(allocationDetails.allocatedSectionId);\r\n                this.createSplitAndAllocate(sectionIds, allocationDetails, contractedValues);\r\n                break;\r\n            case SplitType.None:\r\n                this.allocateTrade(allocationDetails);\r\n        }\r\n    }\r\n    \r\n    createSplitAndAllocate(sectionIds: number[], allocationDetails: AllocateSectionCommand, contractedValues: string[]) {\r\n        this.allocateSectionSubscription = this.tradingService\r\n            .createSplitForContract(sectionIds, allocationDetails.quantity, null, contractedValues)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.splitResult = data as TrancheSplitCreationResult[];\r\n                    const sectionId = sectionIds[0];\r\n                    const splitResult = this.splitResult[0];\r\n                    if (splitResult) {\r\n                        if (allocationDetails.splitType === SplitType.SourceSplit) {\r\n                            allocationDetails.sectionId = splitResult.sectionId;\r\n                            allocationDetails.sectionReference = splitResult.contractLabel;\r\n\r\n                        } else if (allocationDetails.splitType === SplitType.TargetSplit) {\r\n                            allocationDetails.allocatedSectionId = splitResult.sectionId;\r\n                            allocationDetails.allocatedSectionReference = splitResult.contractLabel;\r\n\r\n                        } else if (this.splitResult.length > 1) {\r\n                            allocationDetails.sectionId = splitResult.sectionId;\r\n                            allocationDetails.allocatedSectionId = this.splitResult[1].sectionId;\r\n                            allocationDetails.sectionReference = splitResult.contractLabel;\r\n                            allocationDetails.allocatedSectionReference = this.splitResult[1].contractLabel;\r\n                        }\r\n                    }\r\n                    this.allocateTrade(allocationDetails, true);\r\n                },\r\n                (err) => {\r\n                    this.isSave = false;\r\n                    throw err;\r\n                },\r\n            );\r\n    }\r\n    \r\n    allocateTrade(allocationDetails: AllocateSectionCommand, status: boolean = false) {\r\n\r\n        this.allocateSectionSubscription = this.executionService\r\n            .allocate(allocationDetails)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.assignCharter(allocationDetails);\r\n                    const message = 'The trade' + ' ' + allocationDetails.sectionReference + ' ' +\r\n                        ' has been properly allocated to ' + ' ' +\r\n                        allocationDetails.allocatedSectionReference + ' ' + ' with the number ' + ' ' + data;\r\n                    this.isSave = false;\r\n                    this.snackbarService.informationAndCopySnackBar(message, message);\r\n\r\n                    if (this.dataVersionId) {\r\n                        this.tradeActionsService.displaySectionInSnapshotSubject\r\n                            .next(new SectionReference(allocationDetails.sectionId, this.dataVersionId));\r\n                    } else {\r\n                        this.tradeActionsService.displaySectionSubject.next(allocationDetails.sectionId);\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.isSave = false;\r\n                    throw err;\r\n                },\r\n            );\r\n    }\r\n\r\n    getAllocationDetails() {\r\n        let allocationDetails = new AllocateSectionCommand();\r\n        allocationDetails.sectionId = this.sectionId;\r\n        this.formComponents.forEach((comp) => {\r\n            allocationDetails = comp.populateEntity(allocationDetails);\r\n        });\r\n        allocationDetails.dataVersionId = this.dataVersionId;\r\n        return allocationDetails;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.allocateSectionSubscription) {\r\n            this.allocateSectionSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    contractRowSelected(quantityData: string[]) {\r\n        this.shippingAllocationComponent.contractRowSelected(quantityData);\r\n    }\r\n\r\n    assignCharterToAllocatedContract(sectionId: number, charterId: number) {\r\n        const assignCharterPromise = [];\r\n        this.executionService.GetSectionTrafficDetails(sectionId, this.dataVersionId)\r\n            .subscribe((data: SectionTraffic) => {\r\n                if (data) {\r\n                    this.sectionTrafficModel = data;\r\n                    this.sectionModel.sectionId = sectionId;\r\n                    const sectionTrafficList: SectionTraffic[] = [];\r\n                    sectionTrafficList.push(this.sectionTrafficModel);\r\n                    if (!this.dataVersionId) {\r\n                        assignCharterPromise.push(\r\n                            this.executionService.assignSectionsToCharter(\r\n                                charterId, sectionTrafficList).toPromise());\r\n                    }\r\n                }\r\n            });\r\n    }\r\n    \r\n    setContractValue(sectionModel: Section, quantityValue: number, formatValue = true): string {\r\n        let quantityVal;\r\n        quantityVal = quantityValue;\r\n        const mask = CustomNumberMask(12, 10, true);\r\n        if (this.masterData === undefined) {\r\n            return;\r\n        }\r\n        const weightCodeConversion = this.masterData.weightUnits.\r\n            find((weightUnit) => weightUnit.weightUnitId === sectionModel.weightUnitId).conversionFactor;\r\n        const selectedPriceUnit = this.masterData.priceUnits.filter(\r\n            (priceUnit) => priceUnit.priceUnitId === sectionModel.priceUnitId,\r\n        );\r\n        const priceCodeConversion =\r\n            selectedPriceUnit.length > 0\r\n                ? selectedPriceUnit[0].conversionFactor\r\n                : undefined;\r\n\r\n        if (!weightCodeConversion || !priceCodeConversion\r\n            || !quantityValue\r\n            || !sectionModel.price) {\r\n            sectionModel.contractedValue = '';\r\n            return;\r\n        }\r\n        const contractPrice = sectionModel.price.toString().replace(/,/g, '');\r\n        let contractPriceDecimal: AtlasNumber = new AtlasNumber(contractPrice);\r\n        const quantity = quantityVal.toString().replace(/,/g, '');\r\n        const quantityDecimal: AtlasNumber = new AtlasNumber(quantity);\r\n\r\n        if (sectionModel.premiumDiscountTypeId !== undefined &&\r\n            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&\r\n            sectionModel.premiumDiscountTypeId !== undefined) {\r\n            // discountPremiumValue exists\r\n\r\n            let discountPremiumContractedPrice: number | AtlasNumber = 0;\r\n            const discountPremiumSign = ((sectionModel.premiumDiscountTypeId as DiscountTypes) === DiscountTypes.Discount ? -1 : 1);\r\n\r\n            // tslint:disable-next-line:prefer-conditional-expression\r\n            if ((sectionModel.premiumDiscountBasis as DiscountBasis) === DiscountBasis.Rate) {\r\n                discountPremiumContractedPrice = sectionModel.premiumDiscountValue * discountPremiumSign;\r\n            } else if ((sectionModel.premiumDiscountBasis as DiscountBasis) === DiscountBasis.Percent) {\r\n                discountPremiumContractedPrice = contractPriceDecimal\r\n                    .times((sectionModel.premiumDiscountValue * discountPremiumSign / 100));\r\n            }\r\n            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);\r\n        }\r\n\r\n        const contractValue = contractPriceDecimal.times(quantityDecimal).times(\r\n            weightCodeConversion *\r\n            priceCodeConversion).toString();\r\n\r\n        if (formatValue) {\r\n            const contractValueFormatted = conformToMask(contractValue, mask, { guide: false }).conformedValue;\r\n            sectionModel.contractedValue = contractValueFormatted;\r\n        } else {\r\n            sectionModel.contractedValue = contractValue;\r\n        }\r\n\r\n        return sectionModel.contractedValue;\r\n\r\n    }\r\n    assignCharterToParentContract(sectionIdAllocated: number, sectionIdParent: number) {\r\n        this.tradingService.getSection(sectionIdAllocated, 0, this.dataVersionId)\r\n            .subscribe((data: Section) => {\r\n                if (data && data.charterId) {\r\n                    this.assignCharterToAllocatedContract(sectionIdParent, data.charterId);\r\n                }\r\n            });\r\n    }\r\n    onTradeDiscardButtonClicked() {\r\n        if (this.dataVersionId) {\r\n            this.tradeActionsService.displaySectionInSnapshotSubject\r\n                .next(new SectionReference(this.sectionId, this.dataVersionId));\r\n        } else {\r\n            this.tradeActionsService.displaySectionSubject.next(this.sectionId);\r\n        }\r\n    }\r\n    assignCharter(allocationDetails: AllocateSectionCommand) {\r\n        this.tradingService.getSection(allocationDetails.sectionId, 0, this.dataVersionId)\r\n            .subscribe((data: Section) => {\r\n                if (data && data.charterId) {\r\n                    this.assignCharterToAllocatedContract(allocationDetails.allocatedSectionId, data.charterId);\r\n                } else {\r\n                    this.assignCharterToParentContract(allocationDetails.allocatedSectionId, allocationDetails.sectionId);\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    disableAllocationButton(value) {\r\n        this.isShippingValid = (value) ? true : false;\r\n    }\r\n\r\n    counterpartyForContractRowSelected(allocatedCouterparty: string[]) {\r\n        if (this.sectionModel.contractType === ContractTypes.Purchase) {\r\n            if (this.sectionModel.sellerCode === allocatedCouterparty[0] && this.sectionModel.currencyCode === allocatedCouterparty[1]) {\r\n                this.isTradeAvailableForWashout = true;\r\n            }\r\n            else {\r\n                this.isTradeAvailableForWashout = false;\r\n            }\r\n        }\r\n        if (this.sectionModel.contractType === ContractTypes.Sale) {\r\n            if (this.sectionModel.buyerCode === allocatedCouterparty[0] && this.sectionModel.currencyCode === allocatedCouterparty[1]) {\r\n                this.isTradeAvailableForWashout = true;\r\n            }\r\n            else {\r\n                this.isTradeAvailableForWashout = false;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onAllocation(allocationDetails: AllocateSectionCommand) {\r\n        if ((allocationDetails.quantity === allocationDetails.sourceQuantity) &&\r\n            (allocationDetails.quantity === allocationDetails.targetQuantity)) {\r\n            this.allocateTrade(allocationDetails);\r\n        } else if (this.dataVersionId) {\r\n            this.snackbarService.throwErrorSnackBar('In a snapshot, you can only allocate the full quantity of both trades');\r\n        } else {\r\n            if ((allocationDetails.allocationSourceType !== AllocationType.SplitWhereNecessary) &&\r\n                (allocationDetails.allocationTargetType !== AllocationType.SplitWhereNecessary)) {\r\n                this.allocateTrade(allocationDetails);\r\n            } else {\r\n\r\n                if ((allocationDetails.sourceQuantity > allocationDetails.quantity) &&\r\n                    (allocationDetails.allocationTargetType === AllocationType.AdjustWhereNecessary ||\r\n                        allocationDetails.targetQuantity === allocationDetails.quantity) &&\r\n                    (allocationDetails.allocationSourceType === AllocationType.SplitWhereNecessary)) {\r\n                    allocationDetails.splitType = SplitType.SourceSplit;\r\n                } else if ((allocationDetails.allocationTargetType === AllocationType.SplitWhereNecessary) &&\r\n                    (allocationDetails.targetQuantity > allocationDetails.quantity) &&\r\n                    (allocationDetails.allocationSourceType === AllocationType.AdjustWhereNecessary ||\r\n                        allocationDetails.sourceQuantity === allocationDetails.quantity)) {\r\n                    allocationDetails.splitType = SplitType.TargetSplit;\r\n                } else if ((allocationDetails.sourceQuantity > allocationDetails.quantity) &&\r\n                    (allocationDetails.targetQuantity > allocationDetails.quantity) &&\r\n                    (allocationDetails.allocationSourceType === AllocationType.SplitWhereNecessary) &&\r\n                    (allocationDetails.allocationTargetType === AllocationType.SplitWhereNecessary)) {\r\n                    allocationDetails.splitType = SplitType.Both;\r\n                } else {\r\n                    allocationDetails.splitType = SplitType.None;\r\n                }\r\n                this.tradingService.getSection(\r\n                    allocationDetails.allocatedSectionId,\r\n                    PricingMethods.Priced, this.dataVersionId)\r\n                    .subscribe(\r\n                        (data) => {\r\n                            this.tragetSectionModel = data;\r\n                            this.updateSplitDetails(allocationDetails);\r\n                        },\r\n                        (err) => {\r\n                            this.isSave = false;\r\n                            throw err;\r\n                        });\r\n\r\n            }\r\n        }\r\n    }\r\n    // For FAB\r\n    initFABActions() {\r\n        this.fabMenuActions = [];\r\n        this.fabTitle = 'Allocation FAB Mini';\r\n        this.fabType = FABType.MiniFAB;\r\n        const actionDiscard: FloatingActionButtonActions = {\r\n            icon: 'keyboard_backspace',\r\n            text: 'Discard',\r\n            action: 'discardClick',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n        const actionAllocate: FloatingActionButtonActions = {\r\n            icon: 'swap_vert',\r\n            text: 'Allocate',\r\n            action: 'allocateClick',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n\r\n        this.fabMenuActions.push(actionDiscard);\r\n\r\n        actionAllocate.disabled = (this.isDisabled || this.isSave || this.isShippingValid);\r\n        this.fabMenuActions.push(actionAllocate);\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'allocateClick': {\r\n                this.onTradeAllocateButtonClicked();\r\n                break;\r\n            }\r\n            case 'discardClick': {\r\n                this.onTradeDiscardButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h2>Trade Cost Report</h2>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<div class=\\\"report-container-full-content\\\">\\r\\n    <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\" [reportUrl]=\\\"reportPath\\\"\\r\\n                                                              [parameters]=\\\"parameters\\\"\\r\\n                                                              #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { TradeStatus } from '../../../shared/entities/trade-status.entity';\r\nimport { ContractStatus } from '../../../shared/enums/contract-status.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-cost-report',\r\n    templateUrl: './trade-cost-report.component.html',\r\n    styleUrls: ['./trade-cost-report.component.scss'],\r\n})\r\nexport class TradeCostReportComponent implements OnInit {\r\n\r\n    company: string;\r\n    parameters: any[] = [];\r\n    includeGoods: false;\r\n    constractStatusList: TradeStatus[] = [];\r\n    tradeStatus: number;\r\n    dialogData: {\r\n        sectionId: number;\r\n        contractStatus: ContractStatus;\r\n        dataVersionId: number;\r\n    };\r\n\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/TradeCost/TradeCost';\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<TradeCostReportComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            sectionId: number,\r\n            contractStatus: ContractStatus,\r\n            dataVersionId: number,\r\n        },\r\n        protected companyManager: CompanyManagerService,\r\n    ) {\r\n        this.dialogData = data;\r\n        this.constractStatusList = TradeStatus.getStatusList();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        const goodsIncluded = this.includeGoods ? 1 : 0;\r\n        let tradeStatus: TradeStatus;\r\n\r\n        if (this.constractStatusList && this.dialogData.contractStatus) {\r\n            const status: string = this.dialogData.contractStatus !== ContractStatus.Closed ?\r\n                'Open' : 'Closed';\r\n            tradeStatus = this.constractStatusList.find((e) => e.name === status);\r\n        }\r\n\r\n        this.parameters = [\r\n            { name: 'Company', value: this.company },\r\n            { name: 'SectionId', value: this.dialogData.sectionId },\r\n            { name: 'IncludeGoods', value: goodsIncluded },\r\n        ];\r\n\r\n        if (tradeStatus) {\r\n            this.parameters.push({ name: 'TradeStatus', value: tradeStatus.value });\r\n        }\r\n\r\n        if (this.dialogData.dataVersionId) {\r\n            this.parameters.push({ name: 'Database', value: this.dialogData.dataVersionId });\r\n        }\r\n\r\n        if (this.company) {\r\n            this.parameters.push({ name: 'UserLoginCompany', value: this.company });\r\n        }\r\n\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h2>Trade P&L Report</h2>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<div class=\\\"report-container-full-content\\\">\\r\\n    <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\" [reportUrl]=\\\"reportPath\\\"\\r\\n                                                              [parameters]=\\\"parameters\\\"\\r\\n                                                              #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { FreezeDisplayView } from '../../../shared/models/freeze-display-view';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-pnl-report',\r\n    templateUrl: './trade-pnl-report.component.html',\r\n    styleUrls: ['./trade-pnl-report.component.scss'],\r\n})\r\nexport class TradePnlReportComponent implements OnInit {\r\n    company: string;\r\n    parameters: any[] = [];\r\n    dialogData: {\r\n        contractSectionCode: number;\r\n        dataVersionId: number;\r\n    };\r\n\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/PnL/PnL_TradeCharter';\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<TradePnlReportComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { contractSectionCode: number, dataVersionId: number },\r\n        protected companyManager: CompanyManagerService,\r\n    ) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n\r\n        this.parameters = [\r\n            { name: 'CompanyID', value: this.company },\r\n            { name: 'ContractSectionCode', value: this.dialogData.contractSectionCode },\r\n        ];\r\n\r\n        if (this.dialogData.dataVersionId) {\r\n            this.parameters.push({ name: 'Database', value: this.dialogData.dataVersionId });\r\n        }\r\n\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <div>\\r\\n            <mat-tab-group [selectedIndex]=\\\"tabIndex\\\"\\r\\n                           (selectedIndexChange)=onSelectedIndexChanged($event)>\\r\\n                <mat-tab label=\\\"Physical Trades\\\"></mat-tab>\\r\\n                <div *ifAuthorized=\\\"'Trades.CostMatrices', company:company\\\">\\r\\n                    <mat-tab *ngIf=\\\"!dataVersionId\\\"\\r\\n                             label=\\\"Cost Matrices\\\"></mat-tab>\\r\\n                    <mat-tab label=\\\"FX DEALS\\\"></mat-tab>\\r\\n                </div>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"content-tab\\\">\\r\\n            <mat-tab-group [selectedIndex]=\\\"tabIndex\\\"\\r\\n                           (selectedIndexChange)=\\\"onSelectedTabChanged($event)\\\">\\r\\n                <mat-tab>\\r\\n                    <atlas-trades [sideNavOpened]=\\\"sideNavOpened\\\"\\r\\n                                  #tradesComponent></atlas-trades>\\r\\n                </mat-tab>\\r\\n                <mat-tab>\\r\\n                    <atlas-costmatrices #costmatricesComponent></atlas-costmatrices>\\r\\n                </mat-tab>\\r\\n                <mat-tab>\\r\\n                    <atlas-fx-deals #fxDealsComponent></atlas-fx-deals>\\r\\n                </mat-tab>\\r\\n            </mat-tab-group>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".header-tab {\\n  margin-bottom: 40px; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n.floating-menu {\\n  top: -1px; }\\n\\n.has-header .mat-menu-content {\\n  padding: 0 !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { FavouritesListDisplayComponent } from '../../../shared/components/favourites-list-display/favourites-list-display.component';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\nimport { CostmatricesComponent } from '../costmatrices/costmatrices.component';\r\nimport { FxDealsComponent } from '../fx-deals/fx-deals.component';\r\nimport { TradesComponent } from '../trades/trades.component';\r\nimport { TradeActionsService } from './../../services/trade-actions.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trades-tab',\r\n    templateUrl: './trades-tab.component.html',\r\n    styleUrls: ['./trades-tab.component.scss'],\r\n})\r\nexport class TradesTabComponent implements OnInit {\r\n    @ViewChild('tradesComponent') tradesComponent: TradesComponent;\r\n    @ViewChild('costmatricesComponent') costmatricesComponent: CostmatricesComponent;\r\n    @ViewChild('fxDealsComponent') fxDealsComponent: FxDealsComponent;\r\n    @ViewChild('favouritesListDisplayComponent') favouritesListDisplayComponent: FavouritesListDisplayComponent;\r\n\r\n    company: string;\r\n    dataVersionId: number;\r\n    tabIndex: number = 0;\r\n    isTrade: boolean = false;\r\n    isFxDeal: boolean = false;\r\n    isTradeCreationPrivilege = false;\r\n    isCostMatrixCreationPrivilege = false;\r\n    isAmendSnapshotPrivilege = false;\r\n    sideNavOpened: boolean = false;\r\n    PermissionLevels = PermissionLevels;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private dialog: MatDialog,\r\n        protected tradeActionsService: TradeActionsService,\r\n        protected securityService: SecurityService,\r\n        private authorizationService: AuthorizationService,\r\n        private titleService: TitleService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n        });\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.tabIndex = 0;\r\n        this.route.queryParams.subscribe((params) => {\r\n            this.tabIndex = Number(params['index']);\r\n        });\r\n        this.onSelectedButtonChanged(this.tabIndex);\r\n        this.titleService.setTitle('Trades');\r\n    }\r\n\r\n    onTradeOrCostMatrixButtonClicked() {\r\n        if (this.isTrade) {\r\n            if (this.dataVersionId) {\r\n                this.tradeActionsService.newTradeInSnapshotSubject.next(this.dataVersionId);\r\n            } else {\r\n                this.tradeActionsService.newTradeSubject.next();\r\n            }\r\n        } else {\r\n            this.router.navigate([this.company + '/trades/costmatrix/create']);\r\n        }\r\n    }\r\n\r\n    onSelectedIndexChanged(value: number) {\r\n        this.tabIndex = value;\r\n        this.onSelectedButtonChanged(this.tabIndex);\r\n    }\r\n\r\n    onSelectedButtonChanged(tabIndex: number) {\r\n        tabIndex === 1 ? this.isTrade = false : this.isTrade = true;\r\n        this.isFxDeal = tabIndex === 2 ? true : false;\r\n        if (this.isFxDeal) {\r\n            this.titleService.setTitle('FX Deals');\r\n        } else if (this.isTrade) {\r\n            this.titleService.setTitle('Trades');\r\n        } else {\r\n            this.titleService.setTitle('Cost Matrices');\r\n        }\r\n    }\r\n\r\n    onSelectedTabChanged(index: number) {\r\n        if (index === 1) {\r\n            this.costmatricesComponent.onTabSelected();\r\n        }\r\n    }\r\n}\r\n","module.exports = \" .mat-table {\\r\\n     overflow: auto;\\r\\n }\\r\\n\\r\\n .mat-tab-group {\\r\\n     padding-left: 24px;\\r\\n     padding-right: 24px;\\r\\n }\\r\\n\\r\\n :host ::ng-deep.ag-menu {\\r\\n     overflow-y: hidden !important;\\r\\n }\\r\\n\\r\\n .main-container.margin-adjustment {\\r\\n     margin-top: 16px !important;\\r\\n }\\r\\n\\r\\n .atr-sidenav-margin {\\r\\n     margin: 16px;\\r\\n }\\r\\n\\r\\n .side-nav-reassignscreen {\\r\\n     width: 1024px;\\r\\n }\\r\\n\"","module.exports = \"<mat-sidenav-container>\\r\\n    <mat-sidenav #sidenav\\r\\n                 class=\\\"side-nav-screen side-nav-reassignscreen\\\"\\r\\n                 position=\\\"end\\\"\\r\\n                 disableClose\\r\\n                 mode=\\\"over\\\"\\r\\n                 [fixedTopGap]=\\\"56\\\"\\r\\n                 [fixedInViewport]=\\\"true\\\"\\r\\n                 [(opened)]=\\\"sideNavOpened\\\">\\r\\n        <div class=\\\"atr-sidenav-margin\\\">\\r\\n            <atlas-favourites-list-display #favouritesListDisplayComponent></atlas-favourites-list-display>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <button mat-button\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onDiscardButtonClick()\\\">\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start end\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"end start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"onSideNavSaveButtonClick()\\\">\\r\\n                            SAVE\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-sidenav>\\r\\n\\r\\n    <mat-sidenav-content>\\r\\n        <div class=\\\"main-container margin-adjustment\\\">\\r\\n            <mat-card>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start none\\\"\\r\\n                     class=\\\"search\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               fxFlex=\\\"45%\\\"\\r\\n                               [formControl]=\\\"contractLabelCtrl\\\"\\r\\n                               placeholder=\\\"Contract N°\\\"\\r\\n                               autocomplete=\\\"off\\\"\\r\\n                               (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                               #message>\\r\\n                    </mat-form-field>\\r\\n                    <atlas-masterdata-user-preferences-input fxFlex=\\\"45%\\\"\\r\\n                                                             isEditable=\\\"true\\\"\\r\\n                                                             [fieldControl]=\\\"counterPartyCtrl\\\"\\r\\n                                                             [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                             label=\\\"Counter Party\\\"\\r\\n                                                             (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                                             displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                             [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                             gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                             [dataLoader]=\\\"counterpartyDataLoader\\\">\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                    <button mat-raised-button\\r\\n                            (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                            class=\\\"heroGradient\\\">\\r\\n                        <mat-icon aria-label=\\\"Search\\\"\\r\\n                                  class=\\\"search-icon\\\">search</mat-icon>\\r\\n                    </button>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n            <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                                   *ifAuthorized=\\\"'Trades.Physicals',company:this.company\\\"\\r\\n                                   [gridCode]=\\\"gridCode\\\"\\r\\n                                   [gridTitle]=\\\"'Physical Trades'\\\"\\r\\n                                   (rowClicked)=\\\"onTradeRowClicked($event)\\\"\\r\\n                                   (quickNavigate)=\\\"onQuickNavigate($event)\\\"\\r\\n                                   [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                                   [company]=\\\"company\\\"\\r\\n                                   [dataVersionId]=\\\"dataVersionId\\\"\\r\\n                                   [dataLoader]=\\\"dataLoader\\\"\\r\\n                                   [gridContextualMenuActions]=\\\"gridContextualMenuActions\\\"\\r\\n                                   [exportAdapter]=\\\"exportAdapter\\\"\\r\\n                                   (menuActionClicked)=\\\"onMenuActionClicked($event)\\\"\\r\\n                                   #listAndSearchComponent>\\r\\n            </atlas-list-and-search>\\r\\n        </div>\\r\\n        <atlas-floating-action-button [fabTitle]=\\\"fabTitle\\\"\\r\\n                              [fabType]=\\\"fabType\\\"\\r\\n                              [fabActions]=\\\"fabMenuActions\\\"\\r\\n                              [isParentLoaded]=\\\"isLoaded\\\"\\r\\n                              (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n        </atlas-floating-action-button>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\"","import { Component, HostListener, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { MatDialog, MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { FavouritesListDisplayComponent } from '../../../shared/components/favourites-list-display/favourites-list-display.component';\r\nimport { FABType } from '../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { FloatingActionButtonActions } from '../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { ListAndSearchFilter } from '../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchExportAdapter } from '../../../shared/services/list-and-search/export/list-and-search-export-adapter';\r\nimport { TradeDataLoader } from '../../../shared/services/list-and-search/trade-data-loader';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { SnapshotSelectionDialogBoxComponent } from '../../dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component';\r\nimport { SectionReference } from '../../entities/section-reference';\r\nimport { TradeActionsService } from '../../services/trade-actions.service';\r\nimport { ListAndSearchComponent } from './../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AgContextualMenuAction } from './../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasFormControl } from './../../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from './../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from './../../../shared/entities/masterdata.entity';\r\nimport { ListAndSearchFilterType } from './../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { PermissionLevels } from './../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from './../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { CounterPartyDataLoader } from './../../../shared/services/masterdata/counterparty-data-loader';\r\nimport { UtilService } from './../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trades',\r\n    templateUrl: './trades.component.html',\r\n    styleUrls: ['./trades.component.css'],\r\n    providers: [\r\n        TradeDataLoader,\r\n        CounterPartyDataLoader,\r\n    ],\r\n})\r\n\r\nexport class TradesComponent implements OnInit {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('listAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    @ViewChild('favouritesListDisplayComponent') favouritesListDisplayComponent: FavouritesListDisplayComponent;\r\n    sideNavOpened: boolean = false;\r\n\r\n    company: string;\r\n    dataVersionId: number;\r\n    isLoading: boolean;\r\n    gridCode = 'tradeList';\r\n    contractLabelCtrl: FormControl = new FormControl();\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    filteredCounterPartyList: Counterparty[];\r\n    counterPartyCtrl = new AtlasFormControl('TradeCounterParty');\r\n    masterdata: MasterData = new MasterData();\r\n\r\n    menuActions: { [key: string]: string } = {\r\n        image: 'image',\r\n        saveAsFavourite: 'saveAsFavourite',\r\n    };\r\n    gridContextualMenuActions: AgContextualMenuAction[];\r\n\r\n    imagePrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'ImageCreation',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'Physicals',\r\n    };\r\n\r\n    hasTradeCreationPrivilege = false;\r\n    createTradeActionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'CreateTrade',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'Physicals',\r\n    };\r\n\r\n    hasAmendSnapshotPrivilege = false;\r\n    amendSnapshotActionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'AmendSnapshot',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Trades',\r\n        privilegeParentLevelTwo: 'Physicals',\r\n    };\r\n\r\n    // FAB\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    fabType: FABType = FABType.ExtendedMenu;\r\n    fabTitle: string = 'TRADE ACTIONS';\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private dialog: MatDialog,\r\n        protected tradeActionsService: TradeActionsService,\r\n        public dataLoader: TradeDataLoader,\r\n        private authorizationService: AuthorizationService,\r\n        protected utilService: UtilService,\r\n        public counterpartyDataLoader: CounterPartyDataLoader,\r\n        public exportAdapter: ListAndSearchExportAdapter,\r\n    ) {\r\n        this.isLoading = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.init();\r\n        });\r\n    }\r\n\r\n    init() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?\r\n            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterPartyList = this.masterdata.counterparties;\r\n        this.counterPartyCtrl.valueChanges.subscribe((input) => {\r\n            this.filterCounterParty(input);\r\n        });\r\n        this.checkUserPrivileges();\r\n        if (!this.dataVersionId) {\r\n            this.initMenuAction();\r\n\r\n        }\r\n        this.initFABActions();\r\n    }\r\n\r\n    filterCounterParty(input) {\r\n        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n            input,\r\n            this.masterdata.counterparties,\r\n            ['counterpartyCode', 'description'],\r\n        );\r\n        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {\r\n            this.onQuickSearchButtonClicked();\r\n        }\r\n    }\r\n\r\n    checkUserPrivileges() {\r\n        const createTradePrivilegeLevel = this.authorizationService.getPermissionLevel(\r\n            this.company,\r\n            this.createTradeActionPrivilege.privilegeName,\r\n            this.createTradeActionPrivilege.privilegeParentLevelOne,\r\n            this.createTradeActionPrivilege.privilegeParentLevelTwo);\r\n        this.hasTradeCreationPrivilege = (createTradePrivilegeLevel >= this.createTradeActionPrivilege.permission);\r\n\r\n        const amendSnapshotPrivilegeLevel = this.authorizationService.getPermissionLevel(\r\n            this.company,\r\n            this.amendSnapshotActionPrivilege.privilegeName,\r\n            this.amendSnapshotActionPrivilege.privilegeParentLevelOne,\r\n            this.amendSnapshotActionPrivilege.privilegeParentLevelTwo);\r\n        this.hasAmendSnapshotPrivilege = (amendSnapshotPrivilegeLevel >= this.amendSnapshotActionPrivilege.permission);\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.contractLabelCtrl.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    initMenuAction() {\r\n        this.gridContextualMenuActions = [\r\n            {\r\n                icon: 'add',\r\n                text: 'Image',\r\n                action: this.menuActions.image,\r\n                disabled: !this.checkIfUserHasRequiredPrivileges(this.imagePrivilege),\r\n            },\r\n            {\r\n                icon: 'favorite_border ',\r\n                text: 'Save As Favourite',\r\n                action: this.menuActions.saveAsFavourite,\r\n                disabled: !this.checkIfUserHasRequiredPrivileges(this.imagePrivilege),\r\n            },\r\n        ];\r\n        if (this.listAndSearchComponent) {\r\n            this.listAndSearchComponent.gridContextualMenuActions = this.gridContextualMenuActions;\r\n            this.listAndSearchComponent.addMenuAction();\r\n        }\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelOne,\r\n                userCompanyPrivilege.privilegeParentLevelTwo);\r\n            if (userPermissionLevel >= userCompanyPrivilege.permission) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        this.additionalFilters = [];\r\n        let searchCounterParty: string;\r\n        if (this.counterPartyCtrl.value) {\r\n            searchCounterParty = (this.counterPartyCtrl.value as Counterparty).counterpartyCode;\r\n            if (!searchCounterParty) {\r\n                searchCounterParty = this.counterPartyCtrl.value;\r\n            }\r\n        }\r\n        const contractLabelField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'ContractLabel');\r\n        const counterpartyCodeField = this.listAndSearchComponent.columnConfiguration\r\n            .find((column) => column.fieldName === 'Counterparty');\r\n        if (!this.listAndSearchComponent) {\r\n            return;\r\n        } else {\r\n            if (this.contractLabelCtrl.value && contractLabelField) {\r\n                const filter = new ListAndSearchFilter();\r\n                filter.fieldId = contractLabelField.fieldId;\r\n                filter.fieldName = contractLabelField.fieldName;\r\n                filter.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: this.contractLabelCtrl.value + '%',\r\n                };\r\n                filter.isActive = true;\r\n                this.additionalFilters = [filter];\r\n            }\r\n        }\r\n        if (this.counterPartyCtrl.value && counterpartyCodeField) {\r\n            const filterCounterParty = new ListAndSearchFilter();\r\n            filterCounterParty.fieldId = counterpartyCodeField.fieldId;\r\n            filterCounterParty.fieldName = counterpartyCodeField.fieldName;\r\n            filterCounterParty.predicate = {\r\n                filterType: ListAndSearchFilterType.Text,\r\n                operator: 'eq',\r\n                value1: searchCounterParty + '%',\r\n            };\r\n            filterCounterParty.isActive = true;\r\n            this.additionalFilters.push(filterCounterParty);\r\n        }\r\n        this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n        this.listAndSearchComponent.loadData(true);\r\n    }\r\n\r\n    onTradeRowClicked(event) {\r\n        if (this.dataVersionId) {\r\n            this.tradeActionsService.displaySectionInSnapshotSubject\r\n                .next(new SectionReference(event.data.sectionId, this.dataVersionId));\r\n        } else {\r\n            this.tradeActionsService.displaySectionSubject.next(event.data.sectionId);\r\n        }\r\n    }\r\n\r\n    onQuickNavigate(event) {\r\n        if (!this.dataVersionId) {\r\n            this.tradeActionsService.displaySectionSubject.next(event.sectionId);\r\n        }\r\n    }\r\n\r\n    onTradeCaptureButtonClicked() {\r\n        if (this.dataVersionId) {\r\n            this.router.navigate([this.company + '/trades/snapshot/' + this.dataVersionId + '/capture']);\r\n        } else {\r\n            this.router.navigate([this.company + '/trades/capture']);\r\n        }\r\n    }\r\n\r\n    onMenuActionClicked(data) {\r\n        if (!this.dataVersionId) {\r\n            const action = data.action;\r\n            const rowData = data.rowData;\r\n            switch (action) {\r\n                case this.menuActions.image:\r\n                    this.tradeActionsService.tradeEditImageSubject.next(rowData.sectionId);\r\n                    break;\r\n                case this.menuActions.saveAsFavourite:\r\n                    this.tradeActionsService.tradeSaveAsFavouriteEditSubject.next(rowData.sectionId);\r\n                    break;\r\n                default: // throw Action not recognized exception\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        this.sideNavOpened = false;\r\n    }\r\n\r\n    onSideNavSaveButtonClick() {\r\n        // yet to implement code;\r\n    }\r\n\r\n    initFABActions() {\r\n        this.fabMenuActions = [];\r\n\r\n        const actionCreateTrade: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'Create Trade',\r\n            action: 'createTrade',\r\n            disabled: false,\r\n            index: 0,\r\n        };\r\n        const actionAmendSnapshot: FloatingActionButtonActions = {\r\n            icon: 'camera_alt',\r\n            text: 'Amend Snapshot',\r\n            action: 'amendSnapshot',\r\n            disabled: false,\r\n            index: 1,\r\n        };\r\n        const actionGroupFunction: FloatingActionButtonActions = {\r\n            icon: 'gamepad',\r\n            text: 'Group Functions',\r\n            action: 'groupFunctions',\r\n            disabled: false,\r\n            index: 2,\r\n        };\r\n        const actionFavoriteTrade: FloatingActionButtonActions = {\r\n            icon: 'star_rate',\r\n            text: 'Favourites Trade',\r\n            action: 'favoriteTrade',\r\n            disabled: false,\r\n            index: 3,\r\n        };\r\n\r\n        if (!this.dataVersionId && this.hasAmendSnapshotPrivilege) {\r\n            this.fabMenuActions.push(actionAmendSnapshot);\r\n        }\r\n\r\n        if (this.hasTradeCreationPrivilege) {\r\n            this.fabMenuActions.push(actionCreateTrade);\r\n            this.fabMenuActions.push(actionGroupFunction);\r\n        }\r\n\r\n        this.fabMenuActions.push(actionFavoriteTrade);\r\n\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'createTrade': {\r\n                this.onNewTradeMatrixButtonClicked();\r\n                break;\r\n            }\r\n            case 'amendSnapshot': {\r\n                this.onAmendSnapshotButtonClicked();\r\n                break;\r\n            }\r\n            case 'groupFunctions': {\r\n                this.onGroupFunctionsButtonClicked();\r\n                break;\r\n            }\r\n            case 'favoriteTrade': {\r\n                this.onFavouritesListButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    onNewTradeMatrixButtonClicked() {\r\n        if (this.dataVersionId) {\r\n            this.tradeActionsService.newTradeInSnapshotSubject.next(this.dataVersionId);\r\n        } else {\r\n            this.tradeActionsService.newTradeSubject.next();\r\n        }\r\n\r\n    }\r\n\r\n    onAmendSnapshotButtonClicked() {\r\n        const snapshotSelectionDialog = this.dialog.open(SnapshotSelectionDialogBoxComponent, {\r\n            width: '40%',\r\n        });\r\n        snapshotSelectionDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate([this.company + '/trades/snapshot/' + answer]);\r\n            }\r\n        });\r\n    }\r\n\r\n    onGroupFunctionsButtonClicked() {\r\n        this.tradeActionsService.tradeGroupFunctionsSubject.next();\r\n    }\r\n\r\n    onFavouritesListButtonClicked() {\r\n        this.sideNavOpened = true;\r\n    }\r\n}\r\n","module.exports = \"<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutWrap\\r\\n         fxLayoutGap=\\\"10px\\\">\\r\\n        <mat-dialog-actions *ngIf=\\\"isBlockerDisplayed\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <p>{{dialogData.messageBlocker}}</p>\\r\\n            <div>\\r\\n                <button mat-button\\r\\n                        (click)='onBlockerButtonClicked(false)'>No</button>\\r\\n                <button mat-button\\r\\n                        (click)='onBlockerButtonClicked(true)'>Yes</button>\\r\\n            </div>\\r\\n        </mat-dialog-actions>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions *ngIf=\\\"isWarningDisplayed\\\">\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <p>{{warningMessagedDisplayed}}</p>\\r\\n    <div *ngIf=\\\"!userClickedOnYes && isBlockerDisplayed\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onWarningButtonClicked(actions.ok)\\\">Ok</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onWarningButtonClicked(actions.discard)\\\">Discard</button>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"userClickedOnYes || !isBlockerDisplayed\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onWarningButtonClicked(actions.discard)\\\">Discard</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onWarningButtonClicked(actions.no)\\\">No</button>\\r\\n        <button mat-button\\r\\n                (click)=\\\"onWarningButtonClicked(actions.yes)\\\">Yes</button>\\r\\n    </div>\\r\\n</mat-dialog-actions>\"","module.exports = \".mat-dialog-content {\\n  overflow: inherit; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-blocker-warning-message',\r\n    templateUrl: './blocker-warning-message.component.html',\r\n    styleUrls: ['./blocker-warning-message.component.scss'],\r\n})\r\nexport class BlockerWarningMessageComponent implements OnInit {\r\n    dialogData: {\r\n        messageBlocker: string,\r\n        messageWarning: string,\r\n        dyanamicMessageWarning: string,\r\n    };\r\n    isWarningDisplayed = false;\r\n    isBlockerDisplayed = false;\r\n    userClickedOnYes = false;\r\n    userClickedOnNo = false;\r\n    selectedAction: string;\r\n    warningMessagedDisplayed: string;\r\n\r\n    actions = {\r\n        ok: 'ok',\r\n        yes: 'yes',\r\n        no: 'no',\r\n        discard: 'discard',\r\n    };\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<BlockerWarningMessageComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            messageBlocker: string,\r\n            messageWarning: string,\r\n            dyanamicMessageWarning: string,\r\n        },\r\n    ) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.dialogData.messageBlocker) {\r\n            this.isBlockerDisplayed = true;\r\n        } else {\r\n            this.isWarningDisplayed = true;\r\n            this.warningMessagedDisplayed = this.dialogData.messageWarning;\r\n        }\r\n    }\r\n\r\n    onBlockerButtonClicked(yesClicked: boolean) {\r\n        this.userClickedOnYes = yesClicked;\r\n        if (this.dialogData.messageWarning) {\r\n            this.isWarningDisplayed = true;\r\n            this.warningMessagedDisplayed = this.userClickedOnYes ? this.dialogData.messageWarning : this.dialogData.dyanamicMessageWarning;\r\n        } else {\r\n            if (this.userClickedOnYes) {\r\n                this.thisDialogRef.close(\r\n                    { blockerMessageAnswer: 'yes', warningMessageAnswer: null });\r\n            } else {\r\n                this.thisDialogRef.close(\r\n                    { blockerMessageAnswer: 'no', warningMessageAnswer: null });\r\n            }\r\n        }\r\n    }\r\n\r\n    onWarningButtonClicked(action: string) {\r\n        this.selectedAction = action;\r\n        if (!this.isBlockerDisplayed) {\r\n            this.thisDialogRef.close({ blockerMessageAnswer: null, warningMessageAnswer: action });\r\n        } else {\r\n            this.thisDialogRef.close({\r\n                blockerMessageAnswer: this.userClickedOnYes ? this.actions.yes : this.actions.no,\r\n                warningMessageAnswer: action,\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<h1>Bulk Approval\\r\\n    <button mat-icon-button\\r\\n            mat-dialog-close\\r\\n            class=\\\"close-dialog-btn\\\">\\r\\n        <mat-icon aria-label=\\\"Closing button\\\">clear</mat-icon>\\r\\n    </button>\\r\\n</h1>\\r\\n\\r\\n<mat-dialog-content class=\\\"mat-dialog-content\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"150px\\\">\\r\\n        <div *ngIf=\\\" lockedTrades.length> 0 || interCoList.length > 0\\\">\\r\\n            <h6 class=\\\"blocking\\\">Blocking message [Interco contracts/Lock rule]</h6>\\r\\n            <div *ngFor=\\\"let trade of lockedTrades\\\">\\r\\n                <h6>Trade : {{trade.lockMessage}} </h6>\\r\\n            </div>\\r\\n            <div *ngFor=\\\"let trade of interCoList\\\">\\r\\n                <h6>Trade : {{trade.contractLabel}} is interCo </h6>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"150px\\\">\\r\\n        <div *ngIf=\\\"(selectedTrade.length > 0) else noTrades\\\">\\r\\n            <h6 class=\\\"approved\\\">These trades will be approved</h6>\\r\\n            <div *ngFor=\\\"let trade of selectedTrade\\\">\\r\\n                <h6>Trade : {{trade.contractLabel}}</h6>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <ng-template #noTrades>\\r\\n            <div>\\r\\n                <h6> No Trades are there for approval</h6>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClick()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start end\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end start\\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onSaveButtonClicked()\\\"\\r\\n                    [disabled]=\\\"!isApprovalEnabled\\\">\\r\\n                Approve\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"@charset \\\"UTF-8\\\";\\n.blocking {\\n  color: #FF0000; }\\n.approved {\\n  color: #008000; }\\nh6 {\\n  margin: 5px !important; }\\n.mat-dialog-content {\\n  height:  350px;\\n  width:  750px; }\\n\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';\r\nimport { ContractsForBulkFunctions } from '../../../shared/services/trading/dtos/contracts-for-bulk-functions';\r\nimport { TradingService } from '../../../shared/services/http-services/trading.service';\r\nimport { Router } from '@angular/router';\r\nimport { SnackbarService } from '../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-bulk-approval-dialog',\r\n    templateUrl: './bulk-approval-dialog.component.html',\r\n    styleUrls: ['./bulk-approval-dialog.component.scss']\r\n})\r\nexport class BulkApprovalDialogComponent implements OnInit {\r\n    selectedTrade: ContractsForBulkFunctions[] = [];\r\n    lockedTrades: ContractsForBulkFunctions[] = [];\r\n    interCoList: ContractsForBulkFunctions[] = [];\r\n    protected selectedSectionIDs: number[] = [];\r\n    bulkApprovalDialogData: {\r\n        tradeSelectedList: ContractsForBulkFunctions[];\r\n        lockedTrades: ContractsForBulkFunctions[];\r\n        interCoList: ContractsForBulkFunctions[];\r\n        company: string;\r\n    };\r\n    isApprovalEnabled: boolean;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        public bulkApprovalDialogRef: MatDialogRef<BulkApprovalDialogComponent>,\r\n        protected snackbarService: SnackbarService,\r\n        @Inject(MAT_DIALOG_DATA) public data: {\r\n            company: string,\r\n            tradeSelectedList: ContractsForBulkFunctions[],\r\n            lockedTrades: ContractsForBulkFunctions[],\r\n            interCoList: ContractsForBulkFunctions[];\r\n        },\r\n        protected tradingService: TradingService,\r\n    ) {\r\n        this.bulkApprovalDialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectedTrade = this.bulkApprovalDialogData.tradeSelectedList;\r\n        this.lockedTrades = this.bulkApprovalDialogData.lockedTrades;\r\n        this.interCoList = this.bulkApprovalDialogData.interCoList;\r\n        if (this.selectedTrade.length > 0) {\r\n            this.isApprovalEnabled = true;\r\n        }\r\n\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.selectedTrade.forEach(element => {\r\n            this.selectedSectionIDs.push(element.sectionId);\r\n        });\r\n        this.tradingService.bulkApproveSave(this.selectedSectionIDs)\r\n            .subscribe(() => {\r\n                this.snackbarService.informationSnackBar('Selected trades are approved');\r\n                this.bulkApprovalDialogRef.close(true);\r\n                this.router.navigate(['/' + this.bulkApprovalDialogData.company +\r\n                    '/trades/groupfunctions']);\r\n            },\r\n                (error) => {\r\n                    this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                },\r\n                () => {\r\n                });\r\n\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        this.bulkApprovalDialogRef.close(false);\r\n    }\r\n}\r\n","module.exports = \"<h1 mat-dialog-title>Amend Snapshot</h1>\\r\\n<mat-dialog-content>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         *ngIf=\\\"isLoading\\\"\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         *ngIf=\\\"!isLoading\\\">\\r\\n        <mat-form-field>\\r\\n            <input matInput\\r\\n                   placeholder=\\\"Which frozen database do you want to update?\\\"\\r\\n                   [formControl]=\\\"snapshotCtrl\\\"\\r\\n                   [matAutocomplete]=\\\"snapshots\\\">\\r\\n            <mat-autocomplete #snapshots=\\\"matAutocomplete\\\"\\r\\n                              [panelWidth]=\\\"panelSize\\\"\\r\\n                              [displayWith]=\\\"getSnapshotDate.bind(this)\\\">\\r\\n                <mat-option *ngFor=\\\"let snapshot of filteredSnapshots\\\"\\r\\n                            [value]=\\\"snapshot\\\">\\r\\n                    {{ getSnapshotDate(snapshot) }}\\r\\n                </mat-option>\\r\\n            </mat-autocomplete>\\r\\n            <mat-error *ngIf=\\\"snapshotCtrl.hasError('inDropdownList')\\\">\\r\\n                This freeze does not exists\\r\\n            </mat-error>\\r\\n        </mat-form-field>\\r\\n        <mat-divider></mat-divider>\\r\\n    </div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n\\r\\n    <button mat-button\\r\\n            (click)=\\\"onCancelButtonClicked()\\\">Cancel</button>\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onConfirmButtonClicked()\\\">Confirm</button>\\r\\n\\r\\n</mat-dialog-actions>\"","module.exports = \".loading {\\n  min-height: 150px; }\\n\\nbutton {\\n  margin: 0; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormControl, ValidatorFn } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport { Freeze } from './../../../shared/entities/freeze.entity';\r\nimport { FreezeType } from './../../../shared/enums/freeze-type.enum';\r\nimport { FreezeService } from './../../../shared/services/http-services/freeze.service';\r\nimport { SnackbarService } from './../../../shared/services/snackbar.service';\r\nimport { UiService } from './../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-snapshot-selection-dialog-box',\r\n    templateUrl: './snapshot-selection-dialog-box.component.html',\r\n    styleUrls: ['./snapshot-selection-dialog-box.component.scss'],\r\n})\r\nexport class SnapshotSelectionDialogBoxComponent implements OnInit {\r\n    snapshotCtrl: FormControl = new FormControl();\r\n    snapshots: Freeze[];\r\n    filteredSnapshots: Freeze[] = [];\r\n    isLoading = true;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<SnapshotSelectionDialogBoxComponent>,\r\n        private freezeService: FreezeService,\r\n        private uiService: UiService,\r\n        private snackbarService: SnackbarService) { }\r\n\r\n    ngOnInit() {\r\n        this.freezeService.getFreezeList().subscribe((result) => {\r\n            this.snapshots = result.value;\r\n            this.filteredSnapshots = this.snapshots;\r\n            this.isLoading = false;\r\n        });\r\n\r\n        this.snapshotCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredSnapshots = (typeof input === 'string' || !input) ? this.filterListforAutocomplete(\r\n                input,\r\n                this.snapshots,\r\n            ) : this.snapshots;\r\n        });\r\n        this.snapshotCtrl.setValidators(\r\n            this.inDropdownListValidator(),\r\n        );\r\n    }\r\n\r\n    filterListforAutocomplete(\r\n        input: string,\r\n        list: Freeze[],\r\n    ) {\r\n\r\n        let filteredList = list;\r\n        if (input) {\r\n            filteredList = list.filter((item: Freeze) =>\r\n                this.getSnapshotDate(item).toLowerCase().startsWith(input.toLowerCase()));\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    inDropdownListValidator(): ValidatorFn {\r\n        return (control: AbstractControl): { [key: string]: any } => {\r\n            if (control.value) {\r\n                const selectedSnapshot = typeof control.value === 'string' ? this.snapshots.find((snapshot) =>\r\n                    this.getSnapshotDate(snapshot).toLowerCase() === control.value.toLowerCase()) : control.value;\r\n                if (selectedSnapshot && selectedSnapshot.dataVersionId\r\n                    && this.snapshots.find((snapshot) => snapshot.dataVersionId === selectedSnapshot.dataVersionId)) {\r\n                    return;\r\n                }\r\n            }\r\n            return { inDropdownList: true };\r\n        };\r\n    }\r\n\r\n    onConfirmButtonClicked() {\r\n        if (this.snapshotCtrl.value && this.snapshotCtrl.valid) {\r\n            const selectedSnapshot: Freeze = this.snapshotCtrl.value;\r\n            this.thisDialogRef.close(selectedSnapshot.dataVersionId);\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Please select a valid snapshot');\r\n        }\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.thisDialogRef.close();\r\n    }\r\n\r\n    getSnapshotDate(snapshot: Freeze): string {\r\n        if (!snapshot) {\r\n            return '';\r\n        }\r\n        return (snapshot.dataVersionTypeId === FreezeType.Monthly) ?\r\n            this.uiService.monthFormatter({ value: snapshot.freezeDate }) :\r\n            this.uiService.dateFormatter({ value: snapshot.freezeDate });\r\n    }\r\n}\r\n","module.exports = \"<h2 mat-dialog-title>\\r\\n    Deallocation\\r\\n</h2>\\r\\n<div mat-dialog-content>\\r\\n    <p> You are about to deallocate your trade. Do you wish to re-instate pre-allocation traffic details ?</p>\\r\\n</div>\\r\\n<mat-dialog-actions>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n        discard\\r\\n    </button>\\r\\n    <div class=\\\"fill-space\\\"></div>\\r\\n    <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\\r\\n    <button mat-button\\r\\n            (click)=\\\"onReinstateButtonClicked()\\\">\\r\\n        Re-instate traffic details\\r\\n    </button>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onKeepButtonClicked()\\\">\\r\\n        Keep trafic details\\r\\n    </button>\\r\\n</mat-dialog-actions>\\r\\n\"","module.exports = \".mat-dialog-actions button {\\n  margin-top: 0; }\\n\\nh2 {\\n  margin-bottom: 0; }\\n\"","import { Component } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-deallocation-dialog-component',\r\n    templateUrl: 'trade-deallocation-dialog-component.component.html',\r\n    styleUrls: ['trade-deallocation-dialog-component.component.scss'],\r\n})\r\nexport class TradeDeallocationDialogComponent {\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<TradeDeallocationDialogComponent>) { }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    onReinstateButtonClicked() {\r\n        this.dialogRef.close(true);\r\n    }\r\n\r\n    onKeepButtonClicked() {\r\n        this.dialogRef.close(false);\r\n    }\r\n\r\n}\r\n","export class AllocationWarning {\r\n    showAllowDescriptionCard: boolean;\r\n    showRestrictedDescriptionCard: boolean;\r\n    showWarningDescriptionCard: boolean;\r\n    restrictedWarningMessage: string;\r\n    warningMessage: string;\r\n    sourceContract: string;\r\n    targetContract: string;\r\n\r\n}","export class CancelTrade {\r\n    counterParty: string;\r\n    cancellationDate: Date;\r\n    dueDate: Date;\r\n    contractPrice: string;\r\n    currency: string;\r\n    priceCode: string;\r\n    settlementPrice: number;\r\n    settlementValue: string;\r\n    quantity: number;\r\n    quantityCode: string;\r\n    nominalAccount: string;\r\n    costType: string;\r\n    narrative: string;\r\n    externalInternal: number;\r\n    template: string;\r\n    isSectionClosed: boolean;\r\n    contractLabel: string;\r\n    costTypeForCancellationLoss: string;\r\n}\r\n","import { Cost } from '../../shared/entities/cost.entity';\r\nimport { InvoiceMarkings } from '../../shared/entities/invoice-markings.entity';\r\nimport { SectionReference } from '../../shared/entities/section-reference.entity';\r\nimport { Section } from '../../shared/entities/section.entity';\r\nimport { ContractStatus } from '../../shared/enums/contract-status.enum';\r\nimport { ContractTypes } from '../../shared/enums/contract-type.enum';\r\nimport { DiscountBasis } from '../../shared/enums/discount-basis.enum';\r\nimport { DiscountTypes } from '../../shared/enums/discount-type.enum';\r\nimport { InvoicingStatus } from '../../shared/enums/invoicing-status.enum';\r\nimport { PositionMonthTypes } from '../../shared/enums/position-month-type.enum';\r\nimport { PricingMethods } from '../../shared/enums/pricing-method.enum';\r\nimport { ToleranceTypes } from '../../shared/enums/tolerance-type.enum';\r\nimport { ContractInvoiceType } from '../../shared/enums/contract-invoice-type.enum';\r\n\r\nexport class PhysicalFixedPricedContract {\r\n    company: string;\r\n    dataVersionId: number;\r\n    contractReference: string;\r\n    createdBy: string;\r\n    contractDate: Date;\r\n    status: ContractStatus;\r\n    type: ContractTypes;\r\n    firstApprovalTime: Date;\r\n    departmentId: number;\r\n    traderId: number;\r\n    buyerCode: string;\r\n    sellerCode: string;\r\n    commodityId: number;\r\n    quantity: string;\r\n    weightUnitId: number; // quantityUnit: string;\r\n    cropYear: number;\r\n    cropYearTo: number;\r\n    toleranceType: ToleranceTypes;\r\n    toleranceMin: number;\r\n    toleranceMax: number;\r\n    tolerancePourcentage: number;\r\n    contractTerms: string;\r\n    contractTermsLocation: string;\r\n    portOfOrigin: string;\r\n    portOfDestination: string;\r\n    deliveryPeriodStartDate: Date;\r\n    deliveryPeriodEndDate: Date;\r\n    periodType: string;\r\n    periodTypeId: number;\r\n    positionMonthType: PositionMonthTypes;\r\n    positionMonthIndex: number;\r\n    arbitration: string;\r\n    marketSectorId: string;\r\n    pricingMethod: PricingMethods;\r\n    paymentTerms: string;\r\n    priceUnitId: string;\r\n    price: number;\r\n    blDate: Date;\r\n    currencyCode: string;\r\n    counterpartyReference: string;\r\n    contractedValue: string;\r\n    memorandum: string;\r\n    sectionId: number;\r\n    lastModifiedBy: string;\r\n    lastModifiedDate: Date;\r\n    createdByUserId: number;\r\n    modifiedByUserId: number;\r\n    contractInvoiceTypeId: ContractInvoiceType;\r\n\r\n    // -- Discount Premium Fields\r\n    discountPremiumType?: DiscountTypes;\r\n    discountPremiumBasis?: DiscountBasis;\r\n    discountPremiumCurrency?: string;\r\n    discountPremiumValue?: number;\r\n    costs: Cost[] = [];\r\n    invoices: InvoiceMarkings[] = [];\r\n    invoiceStatus: InvoicingStatus;\r\n    creationDate: Date;\r\n    allocatedTo: SectionReference;\r\n    invoiceReference: string;\r\n    previousQuantity: number;\r\n    lastDocumentIssuedDate: Date;\r\n    currentTradeOptionId: number;\r\n    allocateTradeOptionId: number;\r\n    numberOfContracts: number;\r\n    childSections: Section[];\r\n    originalQuantity: number;\r\n    otherReference: string;\r\n    contractSentDate: Date;\r\n    lastEmailReceivedDate: Date;\r\n    contractReturnedDate: Date;\r\n\r\n    // Updation of Fields Commodity,PortOfOrigin & PortOfDestination due to blocker/Warning Message\r\n    isCommodityChanged: boolean;\r\n    isPortOfOriginChanged: boolean;\r\n    isPortOfDestinationChanged: boolean;\r\n\r\n    //Interco Trade\r\n    isInterco: boolean;\r\n    intercoContractType: ContractTypes;\r\n    intercoCompanyId: string;\r\n    intercoBuyerCode: string;\r\n    intercoSellerCode: string;\r\n    intercoDepartmentId?: number;\r\n    intercoTraderId?: number;\r\n    isRemoveInterco: boolean;\r\n    intercoCosts: Cost[] = [];\r\n    isSplitCreated: boolean;\r\n\r\n    estimatedMaturityDate: Date;\r\n    invoiceDate: Date;\r\n}\r\n","export class SectionTabIndex {\r\n    sectionId: number;\r\n    tabIndex: number;\r\n\r\n    constructor(sectionId: number, tabIndex: number = 0) {\r\n        this.sectionId = sectionId;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n}\r\n","import { ContractTypes } from '../../shared/enums/contract-type.enum';\r\nimport { TradeImageField } from '../../shared/services/trading/dtos/tradeImageField';\r\n\r\nexport class TradeImage {\r\n    type: ContractTypes;\r\n    numberOfContracts: number;\r\n    imageEstimates: boolean;\r\n    costMatrixId: number;\r\n    trancheAndSplit: boolean;\r\n    allocateContract: boolean;\r\n    tradeImageField: TradeImageField[];\r\n}\r\n","export class TradeMergeMessage {\r\n\r\n    sectionId: number;\r\n    contractSectionCode: string;\r\n    blockingOrWarningInput: string[];\r\n    isWarning: boolean;\r\n    isBlocking: boolean;\r\n}\r\n","\r\nimport { Section } from '../../shared/entities/section.entity';\r\n\r\nexport class TradeFavoriteDetail {\r\n    name: string;\r\n    description: string;\r\n    sectionId: number;\r\n}\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { FixPricedSection } from '../shared/entities/fix-priced-section.entity';\r\nimport { FuturesOptionsPricedSection } from '../shared/entities/futures-options-priced-section.entity';\r\nimport { PricingMethods } from '../shared/enums/pricing-method.enum';\r\nimport { TradingService } from '../shared/services/http-services/trading.service';\r\n\r\n@Injectable()\r\nexport class FnoTradeDetailsResolver implements Resolve<FuturesOptionsPricedSection | FixPricedSection> {\r\n    constructor(private tradingService: TradingService) { }\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\r\n        Observable<FuturesOptionsPricedSection | FixPricedSection> {\r\n\r\n        const sectionId = Number(route.params.sectionId);\r\n\r\n        return this.tradingService.getSection(sectionId, PricingMethods.FnO);\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'quantity',\r\n})\r\nexport class QuantityPipe implements PipeTransform {\r\n\r\n    transform(value: number, args?: any): any {\r\n        if (value) {\r\n            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(value);\r\n        }\r\n        return '';\r\n    }\r\n\r\n}\r\n","/// input has to be of format YYYY or YYYY/YYYY\r\nexport function getCropYearValue(cropYearInputString: string): { from: number, to: number } {\r\n    const res: number[] = [];\r\n    const values = cropYearInputString.toString().split('/');\r\n    values.forEach((val) => {\r\n        res.push(+val);\r\n    });\r\n\r\n    return { from: res[0], to: (res.length > 1) ? res[1] : null };\r\n}\r\n\r\n/// return is of format YYYY or YYYY/YYYY\r\nexport function formatCropYearToString(cropYearFrom: string, cropYearTo: string = null): string {\r\n    let res = String(cropYearFrom);\r\n    if (cropYearTo) {\r\n        res += '/' + String(cropYearTo);\r\n    }\r\n\r\n    return res;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { filter, mergeMap, shareReplay } from 'rxjs/operators';\r\nimport { Allocation } from '../../shared/entities/allocation.entity';\r\nimport { InvoiceMarkingDetails } from '../../shared/entities/invoice-marking-status-tab.entity';\r\nimport { SectionTraffic } from '../../shared/entities/section-traffic.entity';\r\nimport { InvoiceMarking } from '../../shared/services/execution/dtos/invoice-marking';\r\nimport { ExecutionService } from '../../shared/services/http-services/execution.service';\r\nimport { SectionReference } from '../entities/section-reference';\r\n\r\n@Injectable()\r\nexport class TradeDataService {\r\n    private sectionId: number;\r\n    private dataVersionId: number;\r\n    private trafficDetails$: Observable<SectionTraffic>;\r\n    private allocationDetails$: Observable<Allocation>;\r\n    private invoiceMarkingDetails$: Observable<InvoiceMarkingDetails>;\r\n    private sectionReferenceSubject = new BehaviorSubject<SectionReference>(null);\r\n    sectionReference$ = this.sectionReferenceSubject.asObservable();\r\n\r\n    constructor(private executionService: ExecutionService) { }\r\n\r\n    setSectionData(sectionId: number, dataVersionId: number) {\r\n        if (this.isParameterChanged(sectionId, dataVersionId)) {\r\n            this.sectionId = sectionId;\r\n            this.dataVersionId = dataVersionId;\r\n            this.resetStreams();\r\n        }\r\n\r\n        this.sectionReferenceSubject.next(new SectionReference(sectionId, dataVersionId));\r\n    }\r\n\r\n    getTrafficDetails(): Observable<SectionTraffic> {\r\n        if (!this.trafficDetails$) {\r\n            this.trafficDetails$ = this.sectionReference$\r\n                .pipe(\r\n                    filter((data) => data !== null),\r\n                    mergeMap((sectionReference: SectionReference) => {\r\n                        return this.executionService.GetSectionTrafficDetails(\r\n                            sectionReference.sectionId,\r\n                            sectionReference.dataVersionId);\r\n                    }),\r\n                    shareReplay(1),\r\n                );\r\n        }\r\n\r\n        return this.trafficDetails$;\r\n    }\r\n\r\n    getAllocationDetails(): Observable<Allocation> {\r\n        if (!this.allocationDetails$) {\r\n            this.allocationDetails$ = this.sectionReference$\r\n                .pipe(\r\n                    filter((data) => data !== null),\r\n                    mergeMap((sectionReference: SectionReference) => {\r\n                        return this.executionService.getAllocationBySectionId(\r\n                            sectionReference.sectionId,\r\n                            sectionReference.dataVersionId);\r\n                    }),\r\n                    shareReplay(1),\r\n                );\r\n        }\r\n\r\n        return this.allocationDetails$;\r\n    }\r\n\r\n    getInvoiceMarkingDetails(): Observable<InvoiceMarkingDetails> {\r\n        if (!this.invoiceMarkingDetails$) {\r\n            this.invoiceMarkingDetails$ = this.sectionReference$\r\n                .pipe(\r\n                    filter((data) => data !== null),\r\n                    mergeMap((sectionReference: SectionReference) => {\r\n                        return this.executionService.getInvoiceMarkingDetailsByCompanyAndSectionId(\r\n                            sectionReference.sectionId,\r\n                            sectionReference.dataVersionId);\r\n                    }),\r\n                    shareReplay(1),\r\n                );\r\n        }\r\n\r\n        return this.invoiceMarkingDetails$;\r\n    }\r\n\r\n    private resetStreams(): void {\r\n        this.trafficDetails$ = null;\r\n        this.allocationDetails$ = null;\r\n        this.invoiceMarkingDetails$ = null;\r\n    }\r\n\r\n    private isParameterChanged(sectionId: number, dataVersionId: number): boolean {\r\n        return (this.sectionId !== sectionId) || (this.dataVersionId !== dataVersionId);\r\n    }\r\n}\r\n","import { CommonModule, CurrencyPipe } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatButtonModule, MatCardModule, MatDialogModule } from '@angular/material';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { TextMaskModule } from 'angular2-text-mask';\r\nimport { MaterialModule } from '../shared/material.module';\r\nimport { CustomDateAdapter } from '../shared/services/customDateAdapter';\r\nimport { ATLAS_DATE_FORMATS, SharedModule } from '../shared/shared.module';\r\nimport { CancelTradeDialogComponent } from './components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component';\r\nimport { AddCostConfirmationDialogComponent } from './components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component';\r\nimport { CostInvoiceMarkingDialogComponent } from './components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component';\r\nimport { CostMatrixDialogComponent } from './components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component';\r\nimport { ChildrenCostsComponent } from './components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component';\r\nimport { OverrideCostsDialogComponent } from './components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component';\r\nimport { ParentCostsComponent } from './components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component';\r\nimport { CostsToAdjustComponent } from './components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component';\r\nimport { PhysicalContractCaptureFormCostsTabComponent } from './components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component';\r\nimport { AdjustWeightFormComponent } from './components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component';\r\nimport { AllocationFormComponent } from './components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component';\r\nimport { AllocationInfoFormComponentComponent } from './components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component';\r\nimport { AmendmentAuditFormComponentComponent } from './components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component';\r\nimport { BlInfoFormComponent } from './components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component';\r\nimport { CashAgainstInvoiceFormComponentComponent } from './components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component';\r\nimport { CharterFormComponentComponent } from './components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component';\r\nimport { CommodityFormComponent } from './components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component';\r\nimport { CounterpartyFormComponent } from './components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component';\r\nimport { CurrentTradeFormComponent } from './components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component';\r\nimport { DocumentStatusFormComponentComponent } from './components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component';\r\nimport { HeaderFormComponent } from './components/contract-physical-capture/form-components/header-form-component/header-form-component.component';\r\nimport { InvoicingFormComponentComponent } from './components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component';\r\nimport { LocationFormComponent } from './components/contract-physical-capture/form-components/location-form-component/location-form-component.component';\r\nimport { MemoFormComponent } from './components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component';\r\nimport { PriceFormComponent } from './components/contract-physical-capture/form-components/price-form-component/price-form-component.component';\r\nimport { QuantityFormComponent } from './components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component';\r\nimport { ShipmentInfoFormComponent } from './components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component';\r\nimport { ShipmentPeriodFormComponent } from './components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component';\r\nimport { TermsFormComponent } from './components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component';\r\nimport { CostImpactWarningDialogComponent } from './components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component';\r\nimport { MergeOptionsComponent } from './components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component';\r\nimport { MergeValidationsComponent } from './components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component';\r\nimport { TradeMergeComponent } from './components/contract-physical-capture/form-components/trade-merge/trade-merge.component';\r\nimport { TradesListComponent } from './components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component';\r\nimport { TrancheSplitGridComponent } from './components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component';\r\nimport { IntercoTradeDialogComponent } from './components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component';\r\nimport { InteroStateBannerComponent } from './components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component';\r\nimport { DetailedViewComponent } from './components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component';\r\nimport { InvoiceStatusComponent } from './components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component';\r\nimport { InvoiceTotalsComponent } from './components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component';\r\nimport { InvoiceViewModeComponent } from './components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component';\r\nimport { TopCardComponent } from './components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component';\r\nimport { PhysicalContractCaptureFormInvoiceMarkingTabComponent } from './components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component';\r\nimport { PhysicalContractCaptureFormMainTabComponent } from './components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component';\r\nimport { SaveAsFavouriteDialogComponent } from './components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component';\r\nimport { NewTrancheSplitAgGridComponent } from './components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component';\r\nimport { NewTrancheSplitFooterComponent } from './components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component';\r\nimport { NewTrancheSplitHeaderComponent } from './components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component';\r\nimport { PhysicalContractCaptureFormSectionTabComponent } from './components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component';\r\nimport { PhysicalContractCaptureFormStatusTabComponent } from './components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component';\r\nimport { TradeCapturePageComponent } from './components/contract-physical-capture/trade-capture-page.component';\r\nimport { TradeImageDialogComponent } from './components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component';\r\nimport { TradeManagementMenuBarComponent } from './components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component';\r\nimport { PhysicalContractCaptureFormTrafficTabComponent } from './components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component';\r\nimport { CostmatrixCreateComponent } from './components/costmatrices/components/costmatrix-create/costmatrix-create.component';\r\nimport { CostmatrixListComponent } from './components/costmatrices/components/costmatrix-list/costmatrix-list.component';\r\nimport { CostmatricesComponent } from './components/costmatrices/costmatrices.component';\r\nimport { CostmatrixMenuBarComponent } from './components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component';\r\nimport { FxDealsCaptureComponent } from './components/fx-deals/capture/fx-deals-capture.component';\r\nimport { BankFormComponent } from './components/fx-deals/form-components/bank-form-component/bank-form.component';\r\nimport { DealFormComponent } from './components/fx-deals/form-components/deal-form-comonent/deal-form.component';\r\nimport { DealTermsFormComponent } from './components/fx-deals/form-components/deal-terms-component/deal-terms-form.component';\r\nimport { FxDealHeaderFormComponent } from './components/fx-deals/form-components/header-form-component/fxdeal-header-form.component';\r\nimport { InternalMemoFormComponent } from './components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component';\r\nimport { RateEntryComponent } from './components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component';\r\nimport { SettlementDocumentsComponent } from './components/fx-deals/form-components/settlement-documents-component/settlement-documents.component';\r\nimport { FxDealsComponent } from './components/fx-deals/fx-deals.component';\r\nimport { BulkAllocationComponent } from './components/group-amendments/bulk-allocation/bulk-allocation.component';\r\nimport { BulkApprovalComponent } from './components/group-amendments/bulk-approval/bulk-approval.component';\r\nimport { BulkClosureComponent } from './components/group-amendments/bulk-closure/bulk-closure.component';\r\nimport { BulkDeallocationComponent } from './components/group-amendments/bulk-deallocation/bulk-deallocation.component';\r\nimport { BulkEditionComponent } from './components/group-amendments/bulk-edition/bulk-edition.component';\r\nimport { BulkUpdateCostsComponent } from './components/group-amendments/bulk-update-costs/bulk-update-costs.component';\r\nimport { GroupAmendmentsComponent } from './components/group-amendments/group-amendments.component';\r\nimport { GroupFunctionContractsComponent } from './components/group-functions/group-function-contracts/group-function-contracts.component';\r\nimport { GroupFunctionWarningComponent } from './components/group-functions/group-function-warning/group-function-warning.component';\r\nimport { GroupFunctionsComponent } from './components/group-functions/group-functions.component';\r\nimport { AllocationGridsComponent } from './components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component';\r\nimport { TradeBulkAllocationComponent } from './components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component';\r\nimport { TradeBulkApprovalComponent } from './components/group-functions/trade-bulk-approval/trade-bulk-approval.component';\r\nimport { AgGridPopUpComponent } from './components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component';\r\nimport { BulkClosureMatrixComponent } from './components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component';\r\nimport { PopUpDialogComponentComponent } from './components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component';\r\nimport { SummaryClosureMatrixComponent } from './components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component';\r\nimport { TradeBulkClosureComponent } from './components/group-functions/trade-bulk-closure/trade-bulk-closure.component';\r\nimport { BulkDeAllocationSectionDialogComponent } from './components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component';\r\nimport { TradeBulkDeallocationComponent } from './components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component';\r\nimport { EditionMatrixComponent } from './components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component';\r\nimport { MasterRowApplyComponent } from './components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component';\r\nimport { TradeBulkEditComponent } from './components/group-functions/trade-bulk-edit/trade-bulk-edit.component';\r\nimport { TradeBulkFieldsComponent } from './components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component';\r\nimport { CostBulkUpdateSummaryComponent } from './components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component';\r\nimport { SelectContractsComponent } from './components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component';\r\nimport { TradeCostBulkUpdateComponent } from './components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component';\r\nimport { AddCostsComponent } from './components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component';\r\nimport { EditCostsDialogComponent } from './components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component';\r\nimport { EditCostsComponent } from './components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component';\r\nimport { UpdateCostsComponent } from './components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component';\r\nimport { SectionNewComponent } from './components/section-new/section-new.component';\r\nimport { AllocationTableFormComponent } from './components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component';\r\nimport { HeaderAllocationFormComponent } from './components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component';\r\nimport { SearchAllocationFormComponent } from './components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component';\r\nimport { ShippingAllocationFormComponent } from './components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component';\r\nimport { WarningAllocationFormComponent } from './components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component';\r\nimport { TradeAllocationComponent } from './components/trade-allocation/trade-allocation.component';\r\nimport { TradeCostReportComponent } from './components/trade-cost-report/trade-cost-report.component';\r\nimport { TradePnlReportComponent } from './components/trade-pnl-report/trade-pnl-report.component';\r\nimport { TradesTabComponent } from './components/trades-tab/trades-tab.component';\r\nimport { TradesComponent } from './components/trades/trades.component';\r\nimport { BlockerWarningMessageComponent } from './dialog-boxes/blocker-warning-message/blocker-warning-message.component';\r\nimport { BulkApprovalDialogComponent } from './dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component';\r\nimport { SnapshotSelectionDialogBoxComponent } from './dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component';\r\nimport { TradeDeallocationDialogComponent } from './dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component';\r\nimport { FnoTradeDetailsResolver } from './fno-trade-details.resolver';\r\nimport { QuantityPipe } from './pipes/quantity.pipe';\r\nimport { TradingRoutingModule } from './trading.route';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        TradingRoutingModule,\r\n        AgGridModule.withComponents([]),\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        RouterModule,\r\n        SharedModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        TextMaskModule,\r\n    ],\r\n    declarations: [\r\n        TradesComponent,\r\n        SectionNewComponent,\r\n        TradeCapturePageComponent,\r\n        PhysicalContractCaptureFormMainTabComponent,\r\n        ShipmentPeriodFormComponent,\r\n        QuantityFormComponent,\r\n        LocationFormComponent,\r\n        PriceFormComponent,\r\n        HeaderFormComponent,\r\n        CounterpartyFormComponent,\r\n        CommodityFormComponent,\r\n        MemoFormComponent,\r\n        TermsFormComponent,\r\n        PhysicalContractCaptureFormTrafficTabComponent,\r\n        BlInfoFormComponent,\r\n        AdjustWeightFormComponent,\r\n        ShipmentInfoFormComponent,\r\n        CurrentTradeFormComponent,\r\n        AllocationFormComponent,\r\n        PhysicalContractCaptureFormStatusTabComponent,\r\n        AllocationInfoFormComponentComponent,\r\n        AmendmentAuditFormComponentComponent,\r\n        CashAgainstInvoiceFormComponentComponent,\r\n        CharterFormComponentComponent,\r\n        DocumentStatusFormComponentComponent,\r\n        InvoicingFormComponentComponent,\r\n        TradeDeallocationDialogComponent,\r\n        PhysicalContractCaptureFormSectionTabComponent,\r\n        TradeAllocationComponent,\r\n        HeaderAllocationFormComponent,\r\n        SearchAllocationFormComponent,\r\n        WarningAllocationFormComponent,\r\n        ShippingAllocationFormComponent,\r\n        AllocationTableFormComponent,\r\n        NewTrancheSplitAgGridComponent,\r\n        NewTrancheSplitFooterComponent,\r\n        NewTrancheSplitHeaderComponent,\r\n        TrancheSplitGridComponent,\r\n        PhysicalContractCaptureFormCostsTabComponent,\r\n        PhysicalContractCaptureFormInvoiceMarkingTabComponent,\r\n        InvoiceTotalsComponent,\r\n        InvoiceStatusComponent,\r\n        DetailedViewComponent,\r\n        TradeManagementMenuBarComponent,\r\n        InvoiceViewModeComponent,\r\n        TopCardComponent,\r\n        CostInvoiceMarkingDialogComponent,\r\n        TradeImageDialogComponent,\r\n        TradesTabComponent,\r\n        CostmatricesComponent,\r\n        CostmatrixCreateComponent,\r\n        CostmatrixListComponent,\r\n        CostMatrixDialogComponent,\r\n        SnapshotSelectionDialogBoxComponent,\r\n        TradePnlReportComponent,\r\n        AddCostConfirmationDialogComponent,\r\n        TradeCostReportComponent,\r\n        BlockerWarningMessageComponent,\r\n        CostmatrixMenuBarComponent,\r\n        GroupFunctionsComponent,\r\n        GroupFunctionContractsComponent,\r\n        GroupAmendmentsComponent,\r\n        BulkEditionComponent,\r\n        BulkApprovalComponent,\r\n        TradeBulkEditComponent,\r\n        TradeBulkApprovalComponent,\r\n        GroupFunctionWarningComponent,\r\n        SaveAsFavouriteDialogComponent,\r\n        BulkApprovalDialogComponent,\r\n        EditionMatrixComponent,\r\n        TradeBulkFieldsComponent,\r\n        IntercoTradeDialogComponent,\r\n        InteroStateBannerComponent,\r\n        QuantityPipe,\r\n        BulkUpdateCostsComponent,\r\n        TradeCostBulkUpdateComponent,\r\n        SelectContractsComponent,\r\n        AddCostsComponent,\r\n        UpdateCostsComponent,\r\n        EditCostsComponent,\r\n        EditCostsDialogComponent,\r\n        MasterRowApplyComponent,\r\n        BulkClosureComponent,\r\n        TradeBulkClosureComponent,\r\n        BulkClosureMatrixComponent,\r\n        SummaryClosureMatrixComponent,\r\n        AgGridPopUpComponent,\r\n        PopUpDialogComponentComponent,\r\n        CostBulkUpdateSummaryComponent,\r\n        ParentCostsComponent,\r\n        ChildrenCostsComponent,\r\n        CancelTradeDialogComponent,\r\n        BulkAllocationComponent,\r\n        TradeBulkAllocationComponent,\r\n        AllocationGridsComponent,\r\n        CostsToAdjustComponent,\r\n        FxDealsComponent,\r\n        OverrideCostsDialogComponent,\r\n        BulkDeallocationComponent,\r\n        TradeBulkDeallocationComponent,\r\n        BulkDeAllocationSectionDialogComponent,\r\n        FxDealsCaptureComponent,\r\n        FxDealHeaderFormComponent,\r\n        DealTermsFormComponent,\r\n        BankFormComponent,\r\n        DealFormComponent,\r\n        RateEntryComponent,\r\n        InternalMemoFormComponent,\r\n        TradeMergeComponent,\r\n        TradesListComponent,\r\n        MergeOptionsComponent,\r\n        MergeValidationsComponent,\r\n        SettlementDocumentsComponent,\r\n        CostImpactWarningDialogComponent,\r\n    ],\r\n    providers: [CustomDateAdapter,\r\n        { provide: MAT_DATE_LOCALE, useValue: 'en' },\r\n        { provide: DateAdapter, useClass: CustomDateAdapter },\r\n        { provide: MAT_DATE_FORMATS, useValue: ATLAS_DATE_FORMATS },\r\n        FnoTradeDetailsResolver,\r\n        CurrencyPipe,\r\n    ],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n    entryComponents: [\r\n        SectionNewComponent,\r\n        TradeDeallocationDialogComponent,\r\n        CostInvoiceMarkingDialogComponent,\r\n        TradeImageDialogComponent,\r\n        CostMatrixDialogComponent, AddCostConfirmationDialogComponent,\r\n        SnapshotSelectionDialogBoxComponent,\r\n        TradePnlReportComponent,\r\n        TradeCostReportComponent,\r\n        BlockerWarningMessageComponent,\r\n        SaveAsFavouriteDialogComponent,\r\n        BulkApprovalDialogComponent,\r\n        IntercoTradeDialogComponent,\r\n        EditCostsDialogComponent,\r\n        MasterRowApplyComponent,\r\n        EditCostsDialogComponent,\r\n        AgGridPopUpComponent,\r\n        IntercoTradeDialogComponent,\r\n        PopUpDialogComponentComponent,\r\n        CancelTradeDialogComponent,\r\n        OverrideCostsDialogComponent,\r\n        BulkDeAllocationSectionDialogComponent,\r\n        CostImpactWarningDialogComponent],\r\n})\r\nexport class TradingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MasterDataProps } from '../shared/entities/masterdata-props.entity';\r\nimport { CanDeactivateGuard } from '../shared/guards/can-deactivate-guard.service';\r\nimport { SecurityGuard } from '../shared/guards/security.guard';\r\nimport { CompanyDateResolver } from '../shared/resolvers/company-date.resolver';\r\nimport { FormConfigurationResolver } from '../shared/resolvers/form-configuration.resolver';\r\nimport { MasterDataResolver } from '../shared/resolvers/masterdata.resolver';\r\nimport { CostsToAdjustComponent } from './components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component';\r\nimport { TradeMergeComponent } from './components/contract-physical-capture/form-components/trade-merge/trade-merge.component';\r\nimport { TradeCapturePageComponent } from './components/contract-physical-capture/trade-capture-page.component';\r\nimport { CostmatrixCreateComponent } from './components/costmatrices/components/costmatrix-create/costmatrix-create.component';\r\nimport { FxDealsCaptureComponent } from './components/fx-deals/capture/fx-deals-capture.component';\r\nimport { GroupAmendmentsComponent } from './components/group-amendments/group-amendments.component';\r\nimport { GroupFunctionsComponent } from './components/group-functions/group-functions.component';\r\nimport { TradeCostBulkUpdateComponent } from './components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component';\r\nimport { TradeAllocationComponent } from './components/trade-allocation/trade-allocation.component';\r\nimport { TradesTabComponent } from './components/trades-tab/trades-tab.component';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: TradesTabComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            isSnapshot: false,\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.ContractTypes,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Ports,\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'snapshot/:dataVersionId',\r\n        component: TradesTabComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            title: 'Snapshot', isHomePage: false, privilegeLevel1Name: null,\r\n            isSnapshot: true,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'AmendSnapshot',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.ContractTypes,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Ports,\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'allocateTrade/:sectionId',\r\n        component: TradeAllocationComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            formId: 'TradeAllocation',\r\n            animation: 'tradeAllocation',\r\n            title: 'Trade Allocation', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.WeightUnits,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'AllocateDeallocate',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'snapshot/:dataVersionId/allocateTrade/:sectionId',\r\n        component: TradeAllocationComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            formId: 'TradeAllocation',\r\n            animation: 'tradeAllocation',\r\n            title: 'Trade Allocation', isHomePage: false, privilegeLevel1Name: null,\r\n            isSnapshot: true,\r\n            masterdataList: [\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.WeightUnits,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'AllocateDeallocate',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'capture',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeNew',\r\n            title: 'Trade Capture',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateTrade',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'snapshot/:dataVersionId/capture',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeNew',\r\n            title: 'Trade Capture for Snapshot',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isSnapshot: true,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateTrade',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'display/:sectionId',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradeDisplay',\r\n            title: 'Display Trade',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InvoiceStatus,\r\n                MasterDataProps.InvoiceTypes,\r\n                MasterDataProps.Vats,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'transferCosts/:sectionId',\r\n        component: CostsToAdjustComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'transferCosts',\r\n            title: 'Transfer',\r\n            formId: 'TransferCosts', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InvoiceStatus,\r\n                MasterDataProps.InvoiceTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'tradeMerge/:currentSection.sectionId',\r\n        component: TradeMergeComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradeMerge',\r\n            title: 'Merge',\r\n            formId: 'tradeMerge', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InvoiceStatus,\r\n                MasterDataProps.InvoiceTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'snapshot/:dataVersionId/display/:sectionId',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradeDisplay',\r\n            title: 'Display Trade for Snapshot',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isSnapshot: true,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InvoiceStatus,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'edit/:sectionId',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeEdit',\r\n            title: 'Trade Edition',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isEdit: true,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InvoiceTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n            tabIndex: 0,\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'snapshot/:dataVersionId/edit/:sectionId',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeEdit',\r\n            title: 'Trade Edition for Snapshot',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isEdit: true,\r\n            isSnapshot: true,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n            tabIndex: 0,\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'edit/:sectionId/:tabIndex',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeEdit',\r\n            title: 'Trade Edition',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isEdit: true,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InvoiceTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'snapshot/:dataVersionId/edit/:sectionId/:tabIndex',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeEdit',\r\n            title: 'Trade Edition',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isEdit: true,\r\n            isSnapshot: true,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'image/:sectionId',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeEdit&Image',\r\n            title: 'Trade Creation',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            isImage: true,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'edit/:pricingMethod/:sectionId',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeNew',\r\n            title: 'Trade Edition',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateTrade',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'Physicals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'bulkActions/costs/:bulkActionTypeId/:charterId',\r\n        component: TradeCostBulkUpdateComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'bulkActions',\r\n            title: 'Bulk Actions',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            formId: 'GroupFunctions',\r\n            masterdataList: [\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'costmatrix/create',\r\n        component: CostmatrixCreateComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'costmatrixNew',\r\n            title: 'Cost Matrix Creation',\r\n            formId: 'CostmatrixCreate', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.RateTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CostMatrices',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'costmatrix/display/:costmatrixId',\r\n        component: CostmatrixCreateComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'CostmatrixEdit',\r\n            title: 'Cost Matrix',\r\n            formId: 'CostmatrixEdit', isHomePage: false, icon: '',\r\n            isDisplay: true,\r\n            masterdataList: [\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.RateTypes,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'costmatrix/edit/:costmatrixId',\r\n        component: CostmatrixCreateComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'costmatrixEdit',\r\n            title: 'Cost Matrix Edition',\r\n            formId: 'CostmatrixEdit', isHomePage: false, icon: '',\r\n            masterdataList: [\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.RateTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CostMatrices',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'costmatrix/image/:originalCostMatrixId',\r\n        component: CostmatrixCreateComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'costmatrixImage',\r\n            title: 'Image Cost Matrix',\r\n            formId: 'CostmatrixCreate', isHomePage: false, privilegeLevel1Name: null,\r\n            isImage: true,\r\n            masterdataList: [\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.RateTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CostMatrices',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: null,\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'bulkActions/:bulkActionTypeId',\r\n        component: GroupFunctionsComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'bulkActions',\r\n            title: 'Bulk Actions',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            formId: 'GroupFunctions',\r\n            masterdataList: [\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            // commented temporarily as it should be handled for bulk approval and bulk edit seperately\r\n            // authorizations: [\r\n            //     {\r\n            //         privilegeName: 'BulkApproval',\r\n            //         permission: 2,\r\n            //         parentLevelOne: 'Trades',\r\n            //         parentLevelTwo: 'GroupFunctions',\r\n            //     },\r\n            // ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'groupfunctions',\r\n        component: GroupAmendmentsComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'groupFunctions',\r\n            title: 'Group Functions',\r\n            formId: 'GroupFunctions', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n            ],\r\n\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'image/:sectionId/:multipleImage',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'tradeEdit&Image',\r\n            title: 'Trades Creation',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.PositionMonthTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n            isImage: true,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'display/:sectionId/:tabIndex',\r\n        component: TradeCapturePageComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradeDisplay',\r\n            title: 'Display Trade',\r\n            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Arbitrations,\r\n                MasterDataProps.Commodities,\r\n                MasterDataProps.ContractTerms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.BusinessSectors,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.PeriodTypes,\r\n                MasterDataProps.Ports,\r\n                MasterDataProps.PriceUnits,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Vessels,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InvoiceStatus,\r\n                MasterDataProps.InvoiceTypes,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'fxdeal/capture',\r\n        component: FxDealsCaptureComponent,\r\n        data: {\r\n            title: 'Fx Deal Capture',\r\n            formId: 'FxDealCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isCreate: true,\r\n            masterdataList: [\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.FxTradeTypes,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.Traders,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateEditFxDeal',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'FXDeals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'fxdeal/display/:fxDealId',\r\n        component: FxDealsCaptureComponent,\r\n        data: {\r\n            title: 'Display Fx Deal',\r\n            formId: 'FxDealCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isView: true,\r\n            masterdataList: [\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.FxTradeTypes,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.Traders,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'fxdeal/edit/:fxDealId',\r\n        component: FxDealsCaptureComponent,\r\n        data: {\r\n            title: 'Fx Deal Edition',\r\n            formId: 'FxDealCapture', isHomePage: false, privilegeLevel1Name: null,\r\n            isEdit: true,\r\n            masterdataList: [\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.FxTradeTypes,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.Traders,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateEditFxDeal',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Trades',\r\n                    parentLevelTwo: 'FXDeals',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n    providers: [],\r\n})\r\nexport class TradingRoutingModule { }\r\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { TradingService } from '../../shared/services/http-services/trading.service';\r\n\r\nexport class ContractReferenceAsyncValidator {\r\n    static createValidator(tradingService: TradingService, dataVersionId?: number) {\r\n        return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\r\n            if (control.value) {\r\n                return tradingService.checkContractReferenceExists(control.value, dataVersionId).pipe(\r\n                    map((res) => {\r\n                        return res ? { notUnique: true } : null;\r\n                    }),\r\n                );\r\n            }\r\n            return of(null);\r\n        };\r\n\r\n    }\r\n}\r\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { TradingService } from '../../shared/services/http-services/trading.service';\r\n\r\nexport class CostMatrixNameAsyncValidator {\r\n    static createValidator(tradingService: TradingService) {\r\n        return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\r\n            if (control.value) {\r\n                return tradingService.checkCostMatrixNameExists(control.value).pipe(\r\n                    map((res) => {\r\n                        return res ? { notUnique: true } : null;\r\n                    }),\r\n                );\r\n            }\r\n            return of(null);\r\n        };\r\n\r\n    }\r\n}\r\n"],"sourceRoot":""}