{"version":3,"sources":["webpack:///./Client/app/reporting/components/accounting-documents-report/accounting-documents-report.component.html","webpack:///./Client/app/reporting/components/accounting-documents-report/accounting-documents-report.component.scss","webpack:///./Client/app/reporting/components/accounting-documents-report/accounting-documents-report.component.ts","webpack:///./Client/app/reporting/components/accounting-documents-report/components/document-status-dropdown/document-status-dropdown.component.html","webpack:///./Client/app/reporting/components/accounting-documents-report/components/document-status-dropdown/document-status-dropdown.component.scss","webpack:///./Client/app/reporting/components/accounting-documents-report/components/document-status-dropdown/document-status-dropdown.component.ts","webpack:///./Client/app/reporting/components/accounting-documents-report/components/document-type-dropdown/document-type-dropdown.component.html","webpack:///./Client/app/reporting/components/accounting-documents-report/components/document-type-dropdown/document-type-dropdown.component.scss","webpack:///./Client/app/reporting/components/accounting-documents-report/components/document-type-dropdown/document-type-dropdown.component.ts","webpack:///./Client/app/reporting/components/custom-reports/custom-report-viewer/custom-report-viewer.component.html","webpack:///./Client/app/reporting/components/custom-reports/custom-report-viewer/custom-report-viewer.component.scss","webpack:///./Client/app/reporting/components/custom-reports/custom-report-viewer/custom-report-viewer.component.ts","webpack:///./Client/app/reporting/components/custom-reports/custom-reports.component.html","webpack:///./Client/app/reporting/components/custom-reports/custom-reports.component.scss","webpack:///./Client/app/reporting/components/custom-reports/custom-reports.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/audit-report/audit-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/audit-report/audit-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/audit-report/audit-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/client-report/client-report-period-validator.validator.ts","webpack:///./Client/app/reporting/components/global-reports/components/client-report/client-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/client-report/client-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/client-report/client-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/client-report/tabs/detail/detail.component.html","webpack:///./Client/app/reporting/components/global-reports/components/client-report/tabs/detail/detail.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/client-report/tabs/detail/detail.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/client-report/tabs/overview/overview.component.html","webpack:///./Client/app/reporting/components/global-reports/components/client-report/tabs/overview/overview.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/client-report/tabs/overview/overview.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/fx-exposure-report/fx-exposure-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/fx-exposure-report/fx-exposure-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/fx-exposure-report/fx-exposure-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/critera/critera.component.html","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/critera/critera.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/critera/critera.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/period/period.component.html","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/period/period.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/period/period.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/sort-by/sort-by.component.html","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/sort-by/sort-by.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/components/sort-by/sort-by.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/historical-exchange-rates-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/historical-exchange-rates-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/historical-exchange-rates-report/historical-exchange-rates-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/new-biz-report/new-biz-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/new-biz-report/new-biz-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/new-biz-report/new-biz-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/nominal-report-period-validator.validator.ts","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/nominal-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/nominal-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/nominal-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/tabs/detail-tab/detail-tab.component.html","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/tabs/detail-tab/detail-tab.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/tabs/detail-tab/detail-tab.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/tabs/overview-tab/overview-tab.component.html","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/tabs/overview-tab/overview-tab.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/nominal-report/tabs/overview-tab/overview-tab.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/ldrep-manual-adjustment-report/ldrep-display-view.ts","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/ldrep-manual-adjustment-report/ldrep-manual-adjustment-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/ldrep-manual-adjustment-report/ldrep-manual-adjustment-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/ldrep-manual-adjustment-report/ldrep-manual-adjustment-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-movement-report/pnl-movement-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-movement-report/pnl-movement-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-movement-report/pnl-movement-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-report/pnl-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-report/pnl-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-report/pnl-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-reports.component.html","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-reports.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/pnl-reports.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/validation-dialog/validation-dialog.component.html","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/validation-dialog/validation-dialog.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/pnl-reports/validation-dialog/validation-dialog.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/report-criterias/report-criterias.component.html","webpack:///./Client/app/reporting/components/global-reports/components/report-criterias/report-criterias.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/report-criterias/report-criterias.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/trade-cost-movement-report/trade-cost-movement-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/trade-cost-movement-report/trade-cost-movement-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/trade-cost-movement-report/trade-cost-movement-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/trade-cost-report/trade-cost-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/trade-cost-report/trade-cost-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/trade-cost-report/trade-cost-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/components/trade-report/trade-report.component.html","webpack:///./Client/app/reporting/components/global-reports/components/trade-report/trade-report.component.scss","webpack:///./Client/app/reporting/components/global-reports/components/trade-report/trade-report.component.ts","webpack:///./Client/app/reporting/components/global-reports/global-reports.component.html","webpack:///./Client/app/reporting/components/global-reports/global-reports.component.scss","webpack:///./Client/app/reporting/components/global-reports/global-reports.component.ts","webpack:///./Client/app/reporting/entities/display-options.entity.ts","webpack:///./Client/app/reporting/entities/order-by-options.entity.ts","webpack:///./Client/app/reporting/home/home.component.html","webpack:///./Client/app/reporting/home/home.component.scss","webpack:///./Client/app/reporting/home/home.component.ts","webpack:///./Client/app/reporting/ldeom/ldeom.component.html","webpack:///./Client/app/reporting/ldeom/ldeom.component.scss","webpack:///./Client/app/reporting/ldeom/ldeom.component.ts","webpack:///./Client/app/reporting/reporting.module.ts","webpack:///./Client/app/reporting/reporting.route.ts","webpack:///./Client/app/shared/entities/ammendments-type.entity.ts","webpack:///./Client/app/shared/entities/columns.list.ts","webpack:///./Client/app/shared/entities/ldeom-accrual.entity.ts","webpack:///./Client/app/shared/entities/ldrep-manual-adjustment-records.entity.ts","webpack:///./Client/app/shared/entities/ldrep-manual-adjustment.entity.ts","webpack:///./Client/app/shared/enums/atlas-service-names.enum.ts","webpack:///./Client/app/shared/enums/balances-type.enum.ts","webpack:///./Client/app/shared/enums/event-type.enum.ts","webpack:///./Client/app/shared/enums/functional-area.enum.ts","webpack:///./Client/app/shared/enums/matchings-type.enum.ts","webpack:///./Client/app/shared/enums/newBizDateType.enum.ts","webpack:///./Client/app/shared/enums/newBizNewContractType-enum.ts","webpack:///./Client/app/shared/enums/newBizStyleType.enum.ts","webpack:///./Client/app/shared/enums/newbiz-summary-details.enum.ts","webpack:///./Client/app/shared/enums/nominal-account-type-enum.ts","webpack:///./Client/app/shared/enums/report-sort-type.enum.ts","webpack:///./Client/app/shared/enums/report-style-type.enum.ts","webpack:///./Client/app/shared/enums/unmatched-type.enum.ts","webpack:///./Client/app/shared/services/controlling/dtos/ldeom-posting.ts","webpack:///./Client/app/shared/services/execution/dtos/transaction-report-command.ts","webpack:///./Client/app/shared/services/http-services/reporting.service.ts","webpack:///./Client/app/shared/services/list-and-search/tradeReport-data-loader.ts","webpack:///./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-date-validator.validator.ts"],"names":[],"mappings":"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","file":"reporting-reporting-module.js","sourcesContent":["module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"reportFormGroup\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\"\\r\\n             fxLayoutAlign.lt-md=\\\"start center\\\">\\r\\n\\r\\n            <mat-card fxFlex=\\\"50%\\\"\\r\\n                      class=\\\"card-title\\\">\\r\\n\\r\\n                <h3>Report Parameters</h3>\\r\\n\\r\\n                <div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\"\\r\\n                         fxLayoutGap=\\\"10%\\\">\\r\\n                        <div fxFlex=\\\"25%\\\">\\r\\n                            <atlas-document-type-dropdown #DocumentTypeDropdownComponent\\r\\n                                                          (docTypeSelectionChanged)=\\\"onDocumentTypeSelectionChanged($event)\\\">\\r\\n                            </atlas-document-type-dropdown>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"30%\\\">\\r\\n                            <atlas-document-status-dropdown #DocumentStatusDropdownComponent\\r\\n                                                            (docStatusSelectionChanged)=\\\"onDocumentStatusSelectionChanged($event)\\\">\\r\\n                            </atlas-document-status-dropdown>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"15%\\\">\\r\\n\\r\\n                            <mat-checkbox [checked]=\\\"showDetails\\\"\\r\\n                                          (change)=\\\"onShowDetailsChanged($event)\\\">Show Details</mat-checkbox>\\r\\n\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card fxFlex=\\\"50%\\\"\\r\\n                      class=\\\"document-dates\\\">\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\">\\r\\n                        <h3>Documents Entered Between </h3>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\">\\r\\n                        <atlas-date-picker isEditable=true\\r\\n                                           label=\\\"From\\\"\\r\\n                                           [fieldControl]=\\\"enteredDateFromCtrl\\\"\\r\\n                                           [errorMap]=\\\"dateErrorMap\\\">\\r\\n                        </atlas-date-picker>\\r\\n\\r\\n                        <atlas-date-picker isEditable=true\\r\\n                                           label=\\\"To\\\"\\r\\n                                           [fieldControl]=\\\"enteredDateToCtrl\\\"\\r\\n                                           [errorMap]=\\\"dateErrorMap\\\">\\r\\n                        </atlas-date-picker>\\r\\n                    </div>\\r\\n                    <br />\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\">\\r\\n                        <h3>Documents Amended Between </h3>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"left start\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\">\\r\\n                        <atlas-date-picker isEditable=true\\r\\n                                           label=\\\"From\\\"\\r\\n                                           [fieldControl]=\\\"amendedDateFromCtrl\\\"\\r\\n                                           [errorMap]=\\\"dateErrorMap\\\">\\r\\n                        </atlas-date-picker>\\r\\n\\r\\n                        <atlas-date-picker isEditable=true\\r\\n                                           label=\\\"To\\\"\\r\\n                                           [fieldControl]=\\\"amendeddDateToCtrl\\\"\\r\\n                                           [errorMap]=\\\"dateErrorMap\\\">\\r\\n                        </atlas-date-picker>\\r\\n\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\">\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"generate-report-button\\\"\\r\\n                    (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n        </div>\\r\\n    </form>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [showParameters]=\\\"showParameters\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 #ssrsReportViewer>\\r\\n        </atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".generate-report-button {\\n  margin: 0 !important; }\\n\\nmat-card {\\n  width: 100%; }\\n\\n.general-filters {\\n  margin-top: 2%; }\\n\\n.report-container {\\n  height: 60vh; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCheckboxChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { isBeforeDate } from '../../../shared/validators/date-validators.validator';\r\nimport { DocumentStatusDropdownComponent } from './components/document-status-dropdown/document-status-dropdown.component';\r\nimport { DocumentTypeDropdownComponent } from './components/document-type-dropdown/document-type-dropdown.component';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-documents-report',\r\n    templateUrl: './accounting-documents-report.component.html',\r\n    styleUrls: ['./accounting-documents-report.component.scss'],\r\n})\r\nexport class AccountingDocumentsReportComponent implements OnInit {\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n    @ViewChild(DocumentTypeDropdownComponent) DocumentTypeDropdownComponent: 'DocumentTypeDropdownComponent';\r\n    @ViewChild(DocumentStatusDropdownComponent) DocumentStatusDropdownComponent: 'DocumentStatusDropdownComponent';\r\n    showDetails: boolean = true;\r\n    reportFormGroup: FormGroup;\r\n    enteredDateFromCtrl: FormControl;\r\n    enteredDateToCtrl: FormControl;\r\n    amendedDateFromCtrl: FormControl;\r\n    amendeddDateToCtrl: FormControl;\r\n    dateErrorMap: Map<string, string> = new Map();\r\n    now: moment.Moment;\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/Accounting Documents/AccountingDocument';\r\n    parameters: any[] = [];\r\n    docTypeSelected: string[];\r\n    docStatusselected: string[];\r\n    company: string;\r\n    showParameters: boolean = true;\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n        private companyManager: CompanyManagerService,\r\n        private route: ActivatedRoute,\r\n    ) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n        this.dateErrorMap\r\n            .set('isDateValid', 'The date cannot be in the future.');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initForm();\r\n    }\r\n    initForm() {\r\n        this.initControls();\r\n        this.reportFormGroup = this.formBuilder.group({\r\n            amendedDateFromCtrl: this.amendedDateFromCtrl,\r\n            amendeddDateToCtrl: this.amendeddDateToCtrl,\r\n            enteredDateFromCtrl: this.enteredDateFromCtrl,\r\n            enteredDateToCtrl: this.enteredDateToCtrl,\r\n            DocumentStatusDropdownComponent: this.DocumentStatusDropdownComponent,\r\n            DocumentTypeDropdownComponent: this.DocumentTypeDropdownComponent,\r\n        });\r\n\r\n    }\r\n\r\n    initControls() {\r\n        this.enteredDateFromCtrl = new FormControl(null, [isBeforeDate(this.companyManager.getCurrentCompanyDate(), true)]);\r\n        this.enteredDateToCtrl = new FormControl(null, [isBeforeDate(this.companyManager.getCurrentCompanyDate(), true)]);\r\n        this.amendedDateFromCtrl = new FormControl(null, [isBeforeDate(this.companyManager.getCurrentCompanyDate(), true)]);\r\n        this.amendeddDateToCtrl = new FormControl(null, [isBeforeDate(this.companyManager.getCurrentCompanyDate(), true)]);\r\n\r\n    }\r\n    onGenerateReportButtonClicked() {\r\n        if (this.reportFormGroup.valid) {\r\n            if (this.docStatusselected.length === 1 && this.docStatusselected[0] === 'Posted(Today)') {\r\n                this.initControls();\r\n            }\r\n\r\n            this.parameters = [];\r\n            this.parameters = this.parameters.concat(\r\n                this.getBasicParameters(),\r\n            );\r\n            this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n        }\r\n    }\r\n    getBasicParameters(): any[] {\r\n        const docType = this.docTypeSelected;\r\n        const docstatus = this.docStatusselected;\r\n        const parameters: any[] = [\r\n            { name: 'CompanyID', value: this.company },\r\n        ];\r\n        if ((this.docTypeSelected[0] !== 'All')) {\r\n            this.docTypeSelected.forEach((type: string) => {\r\n                parameters.push({ name: 'DocumentTypes', value: type });\r\n            });\r\n        }\r\n        if ((this.docStatusselected[0] !== 'All')) {\r\n            this.docStatusselected.forEach((status: string) => {\r\n                parameters.push({ name: 'DocumentStatus', value: status });\r\n            });\r\n        }\r\n        parameters.push({ name: 'ShowDetails', value: (this.showDetails === true ? 1 : 0) });\r\n\r\n        if (this.enteredDateFromCtrl.valid && this.enteredDateFromCtrl.value) {\r\n            const enteredFrom = (this.enteredDateFromCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n            parameters.push({ name: 'DocumentsEnteredBetweenFrom', value: enteredFrom });\r\n        }\r\n\r\n        if (this.enteredDateToCtrl.valid && this.enteredDateToCtrl.value) {\r\n            const enteredTo = (this.enteredDateToCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n            parameters.push({ name: 'DocumentsEnteredBetweenTo', value: enteredTo });\r\n        }\r\n\r\n        if (this.amendedDateFromCtrl.valid && this.amendedDateFromCtrl.value) {\r\n            const amendedFrom = (this.amendedDateFromCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n            parameters.push({ name: 'DocumentsAmendedBetweenFrom', value: amendedFrom });\r\n        }\r\n\r\n        if (this.amendeddDateToCtrl.valid && this.amendeddDateToCtrl.value) {\r\n            const amendeddTo = (this.amendeddDateToCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n            parameters.push({ name: 'DocumentsAmendedBetweenTo', value: amendeddTo });\r\n        }\r\n        parameters.push({ name: 'isAllDocumentTypesSelected', value: (this.docTypeSelected[0] === 'All') ? 1 : 0 });\r\n\r\n        parameters.push({ name: 'isAllDocumentStatusSelected', value: (this.docStatusselected[0] === 'All') ? 1 : 0 });\r\n\r\n        return parameters;\r\n    }\r\n\r\n    onDocumentTypeSelectionChanged(docType: string[]) {\r\n\r\n        this.docTypeSelected = docType;\r\n    }\r\n    onDocumentStatusSelectionChanged(docStatus: string[]) {\r\n        this.docStatusselected = docStatus;\r\n        if (this.docStatusselected.length === 1 && this.docStatusselected[0] === 'Posted(Today)') {\r\n            this.initControls();\r\n        }\r\n\r\n    }\r\n    onShowDetailsChanged(event: MatCheckboxChange) {\r\n        this.showDetails = event.checked;\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <atlas-contextual-search-multiple-autocomplete-select #documentStatusDropdownComponent\\r\\n                                                          [options]=\\\"documentStatus\\\"\\r\\n                                                          [selectedOptions]=\\\"[]\\\"\\r\\n                                                          [allOptionsElement]=\\\"allTransDocStatusOption\\\"\\r\\n                                                          [allSelected]=\\\"allDocumentStatusSelected\\\"\\r\\n                                                          displayCode=\\\"true\\\"\\r\\n                                                          valueProperty=\\\"enumEntityId\\\"\\r\\n                                                          codeProperty=\\\"enumEntityValue\\\"\\r\\n                                                          placeholder=\\\"Document Status\\\"\\r\\n                                                          placeholderFilter=\\\"Document Status\\\"\\r\\n                                                          elementName=\\\"Document Status\\\"\\r\\n                                                          (selectionChangedEvent)=\\\"onDocumentStatusChanged($event)\\\">\\r\\n    </atlas-contextual-search-multiple-autocomplete-select>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { transactionDocumentStatus } from '../../../../../shared/entities/transaction-document-status.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { ContextualSearchMultipleAutocompleteSelectComponent } from './../../../../../shared/components/form-components/multiple-autocomplete-dropdown/contextual-search/contextual-search-multiple-autocomplete-select.component';\r\nimport { MultipleAutocompleteDropdownComponent } from './../../../../../shared/components/multiple-autocomplete-dropdown/multiple-autocomplete-dropdown.component';\r\n\r\n@Component({\r\n    selector: 'atlas-document-status-dropdown',\r\n    templateUrl: './document-status-dropdown.component.html',\r\n    styleUrls: ['./document-status-dropdown.component.scss'],\r\n})\r\nexport class DocumentStatusDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n    @ViewChild('documentStatusDropdownComponent') documentStatusDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    @Output() readonly docStatusSelectionChanged = new EventEmitter<string[]>();\r\n\r\n    allTransDocStatusOption: transactionDocumentStatus = {\r\n        enumEntityId: 0,\r\n        enumEntityValue: 'All',\r\n    };\r\n    postedTodayOption: transactionDocumentStatus = {\r\n        enumEntityId: 100,\r\n        enumEntityValue: 'Posted(Today)',\r\n    };\r\n    docStatusIds: string[] = [];\r\n    documentStatus: transactionDocumentStatus[] = [];\r\n    allDocumentStatusSelected = true;\r\n    constructor(private formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private executionService: ExecutionService,\r\n        private masterdataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) { super(); }\r\n\r\n    ngOnInit() {\r\n        //  this.initializeForm();\r\n        this.initdocumentStatus();\r\n        this.initForm();\r\n    }\r\n    initdocumentStatus() {\r\n        this.documentStatus = this.route.snapshot.data.masterdata.transactionDocumentStatus.filter((documentStatus) =>\r\n            documentStatus.enumEntityValue !== 'Posted');\r\n        this.documentStatusDropdownComponent.options = this.documentStatus;\r\n        this.documentStatusDropdownComponent.options.push(this.postedTodayOption);\r\n        this.documentStatusDropdownComponent.optionsChanged();  \r\n    }\r\n\r\n    onDocumentStatusChanged(documentStatus: transactionDocumentStatus[]) {\r\n        if (documentStatus) {\r\n            if (this.documentStatusDropdownComponent.allSelected) {\r\n                this.docStatusIds.push(this.allTransDocStatusOption.enumEntityValue);\r\n            } else {\r\n                this.docStatusIds = documentStatus.map((documentStatu) => documentStatu.enumEntityValue);\r\n             }\r\n        }\r\n        this.docStatusSelectionChanged.emit(this.docStatusIds);\r\n    }\r\n\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <atlas-contextual-search-multiple-autocomplete-select #documentTypeDropdownComponent\\r\\n                                                          [options]=\\\"documentType\\\"\\r\\n                                                          [selectedOptions]=\\\"[]\\\"\\r\\n                                                          [allOptionsElement]=\\\"allTransDocTypeOption\\\"\\r\\n                                                          [allSelected]=\\\"allDocumentTypeSelected\\\"\\r\\n                                                          displayCode=\\\"true\\\"\\r\\n                                                          valueProperty=\\\"transactionDocumentTypeId\\\"\\r\\n                                                          codeProperty=\\\"label\\\"\\r\\n                                                          placeholder=\\\"Document Type\\\"\\r\\n                                                          placeholderFilter=\\\"Document Type\\\"\\r\\n                                                          elementName=\\\"Document Type\\\"\\r\\n                                                          (selectionChangedEvent)=\\\"onDocumentTypeChanged($event)\\\">\\r\\n    </atlas-contextual-search-multiple-autocomplete-select>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl } from '@angular/forms';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { transactionDocumentType } from '../../../../../shared/entities/transaction-document-type.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { ContextualSearchMultipleAutocompleteSelectComponent } from './../../../../../shared/components/form-components/multiple-autocomplete-dropdown/contextual-search/contextual-search-multiple-autocomplete-select.component';\r\nimport { MultipleAutocompleteDropdownComponent } from './../../../../../shared/components/multiple-autocomplete-dropdown/multiple-autocomplete-dropdown.component';\r\n\r\n@Component({\r\n    selector: 'atlas-document-type-dropdown',\r\n    templateUrl: './document-type-dropdown.component.html',\r\n    styleUrls: ['./document-type-dropdown.component.scss'],\r\n})\r\nexport class DocumentTypeDropdownComponent extends SelectMultipleAutocompleteComponent implements OnInit {\r\n    @ViewChild('documentTypeDropdownComponent') documentTypeDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    @Output() readonly docTypeSelectionChanged = new EventEmitter<string[]>();\r\n    allTransDocTypeOption: transactionDocumentType = {\r\n        transactionDocumentTypeId: 0,\r\n        label: 'All',\r\n        description: 'All',\r\n    };\r\n    docTypeIds: string[] = [];\r\n    documentType: transactionDocumentType[] = [];\r\n    allDocumentTypeSelected = true;\r\n    constructor(private formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private executionService: ExecutionService,\r\n        private masterdataService: MasterdataService,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) { super(); }\r\n\r\n    ngOnInit() {\r\n        this.initdocumentStatus();\r\n        this.initForm();\r\n    }\r\n\r\n    initdocumentStatus() {\r\n\r\n        this.documentType = this.route.snapshot.data.masterdata.transactionDocumentType.filter((DocumentType) =>\r\n            DocumentType.label !== 'MC');\r\n\r\n        if (this.documentType && this.documentType.length > 8) {\r\n            const swapRecord = this.documentType[6];\r\n            this.documentType[6] = this.documentType[8];\r\n            this.documentType[8] = swapRecord;\r\n        }\r\n\r\n        this.documentTypeDropdownComponent.options = this.documentType;\r\n        this.documentTypeDropdownComponent.optionsChanged();\r\n        this.initForm();\r\n    }\r\n\r\n    onDocumentTypeChanged(documentType: transactionDocumentType[]) {\r\n        if (documentType) {\r\n            if (this.documentTypeDropdownComponent.allSelected) {\r\n                this.docTypeIds.push(this.allTransDocTypeOption.label);\r\n            } else {\r\n                this.docTypeIds = documentType.map((docType) => docType.label);\r\n            }\r\n        }\r\n        this.docTypeSelectionChanged.emit(this.docTypeIds);\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <h2>{{this.dialogData.reportName}}</h2>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<div class=\\\"report-container-full-content\\\">\\r\\n    <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\" [reportUrl]=\\\"path\\\"\\r\\n                                                              [showParameters]=\\\"showParameters\\\"\\r\\n                                                              [parameters]=\\\"parameters\\\"\\r\\n                                                              #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { environment } from '../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\n\r\n@Component({\r\n    selector: 'atlas-custom-report-viewer',\r\n    templateUrl: './custom-report-viewer.component.html',\r\n    styleUrls: ['./custom-report-viewer.component.scss'],\r\n})\r\nexport class CustomReportViewerComponent implements OnInit {\r\n    company: string;\r\n    parameters: any[] = [];\r\n    dialogData: {\r\n        reportName: string;\r\n        reportPath: string;\r\n        dataVersionId: number;\r\n    };\r\n\r\n    path: string;\r\n    showParameters: boolean = true;\r\n    reportServerUrl = environment.reportServerLink;\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    constructor(public thisDialogRef: MatDialogRef<CustomReportViewerComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { reportName: string, reportPath: string, dataVersionId: number },\r\n        protected companyManager: CompanyManagerService,\r\n    ) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n\r\n        this.parameters = [];\r\n\r\n        if (this.dialogData.dataVersionId) {\r\n            this.parameters.push({ name: 'Database', value: this.dialogData.dataVersionId });\r\n        }\r\n\r\n        this.path = this.dialogData.reportPath.substring(1);\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.path, this.parameters);\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n}\r\n","module.exports = \"<mat-card *ngIf=\\\"isLoading\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"center center\\\"\\r\\n         fxLayoutWrap\\r\\n         class=\\\"loading\\\">\\r\\n        <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<div class=\\\"main-container\\\"\\r\\n     [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\">\\r\\n    <mat-card class=\\\"custom-report-mat-card\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <form fxFlex=\\\"100%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input specialIsAlphaNumeric\\r\\n                           matInput\\r\\n                           placeholder=\\\"Search report name\\\"\\r\\n                           (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                           [formControl]=\\\"searchedValueCtrl\\\" />\\r\\n                </mat-form-field>\\r\\n            </form>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\"\\r\\n                    id=\\\"search-button\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Reports</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"customReportGridOptions && customReportGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"customReportGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [showExport]=\\\"true\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"customReportGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"customReportGridRows\\\"\\r\\n                             [columnDefs]=\\\"customReportGridCols\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [suppressSizeToFit]=false\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (rowClicked)=\\\"onCustomReportRowClicked($event)\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".custom-report-mat-card {\\n  width: 50% !important; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { SSRSReportViewerComponent } from '../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { AgContextualMenuAction } from '../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../shared/entities/company.entity';\r\nimport { PhysicalDocumentTemplate } from '../../../shared/entities/document-template.entity';\r\nimport { EnumEntity } from '../../../shared/entities/enum-entity.entity';\r\nimport { MasterData } from '../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../shared/entities/window-injection-token';\r\nimport { FunctionalArea } from '../../../shared/enums/functional-area.enum';\r\nimport { PermissionLevels } from '../../../shared/enums/permission-level.enum';\r\nimport { AgGridService } from '../../../shared/services/ag-grid.service';\r\nimport { UserCompanyPrivilegeDto } from '../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { UiService } from '../../../shared/services/ui.service';\r\nimport { CustomReportViewerComponent } from './custom-report-viewer/custom-report-viewer.component';\r\n\r\n@Component({\r\n    selector: 'atlas-custom-reports',\r\n    templateUrl: './custom-reports.component.html',\r\n    styleUrls: ['./custom-reports.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class CustomReportsComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n    isLoading: boolean = true;\r\n    company: string;\r\n    gridCode = 'customReportList';\r\n    userActiveDirectoryName: string;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    searchedValueCtrl = new AtlasFormControl('searchedValue');\r\n    companyGridContextualMenuActions: AgContextualMenuAction[];\r\n    customReportGridOptions: agGrid.GridOptions = {};\r\n    customReportGridCols: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    destroy$ = new Subject();\r\n    masterdata: MasterData;\r\n    parameters: any[] = [];\r\n    dialogData: {\r\n        contractSectionCode: number;\r\n        dataVersionId: number;\r\n    };\r\n    customReportGridRows: PhysicalDocumentTemplate[];\r\n    filteredCustomReports: PhysicalDocumentTemplate[];\r\n    customReportList: PhysicalDocumentTemplate[];\r\n    customReportReadPrivilege: UserCompanyPrivilegeDto = {\r\n        privilegeName: '',\r\n        profileId: null,\r\n        permission: PermissionLevels.Read,\r\n        privilegeParentLevelOne: '',\r\n        privilegeParentLevelTwo: null,\r\n    };\r\n    functionalAreas: EnumEntity[];\r\n\r\n    constructor(\r\n        private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private datePipe: DatePipe,\r\n        protected dialog: MatDialog,\r\n        public gridService: AgGridService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private authorizationService: AuthorizationService,\r\n        protected documentService: DocumentService,\r\n        protected uiService: UiService,\r\n    ) {\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n\r\n        this.functionalAreas = [\r\n            {\r\n                enumEntityId: null,\r\n                enumEntityValue: FunctionalArea[FunctionalArea.AccountingEntries],\r\n            },\r\n            {\r\n                enumEntityId: null,\r\n                enumEntityValue: FunctionalArea[FunctionalArea.Charters],\r\n            },\r\n            {\r\n                enumEntityId: null,\r\n                enumEntityValue: FunctionalArea[FunctionalArea.Trades],\r\n            },\r\n            {\r\n                enumEntityId: null,\r\n                enumEntityValue: FunctionalArea[FunctionalArea.Counterparties],\r\n            },\r\n            {\r\n                enumEntityId: null,\r\n                enumEntityValue: FunctionalArea[FunctionalArea.NominalAccountLedger],\r\n            },\r\n            {\r\n                enumEntityId: null,\r\n                enumEntityValue: FunctionalArea[FunctionalArea.Users],\r\n            },\r\n            {\r\n                enumEntityId: null,\r\n                enumEntityValue: FunctionalArea[FunctionalArea.Vessels],\r\n            },\r\n        ];\r\n\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.initCustomReportGridColumns();\r\n            this.getReportList();\r\n            this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.customReportGridCols;\r\n        this.customReportGridOptions = params;\r\n\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onCustomReportRowClicked(event) {\r\n        const openTradepnlReportDialog = this.dialog.open(CustomReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: event.data.name,\r\n                reportPath: event.data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n    }\r\n\r\n    initCustomReportGridColumns() {\r\n        this.customReportGridCols = [\r\n            {\r\n                headerName: 'Report name',\r\n                colId: 'name',\r\n                field: 'name',\r\n                minWidth: 150,\r\n                maxWidth: 150,\r\n            },\r\n            {\r\n                headerName: 'Report description',\r\n                colId: 'description',\r\n                field: 'description',\r\n                tooltip: this.showCellValue.bind(this),\r\n                valueFormatter: this.descriptionFormatter.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Report creator',\r\n                colId: 'createdBy',\r\n                field: 'createdBy',\r\n            },\r\n            {\r\n                headerName: 'Linked menu',\r\n                colId: 'linkedMenu',\r\n                field: 'linkedMenu',\r\n            },\r\n            {\r\n                headerName: 'Company',\r\n                colId: 'company',\r\n                field: 'company',\r\n            },\r\n            {\r\n                headerName: 'Date of creation',\r\n                colId: 'createdDateTime',\r\n                field: 'createdDateTime',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n            {\r\n                headerName: 'Date of modification',\r\n                colId: 'modifiedDateTime',\r\n                field: 'modifiedDateTime',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n        ];\r\n    }\r\n\r\n    showCellValue(params): string {\r\n        if (params) {\r\n            return params.value;\r\n        }\r\n    }\r\n\r\n    descriptionFormatter(params): string {\r\n        if (params && params.value) {\r\n            if (params.value.length > 10) {\r\n                return params.value.substring(0, 10);\r\n            }\r\n        }\r\n    }\r\n\r\n    checkIfUserHasRequiredPrivileges(userCompanyPrivilege: UserCompanyPrivilegeDto) {\r\n        if (this.authorizationService.isUserAllowedForCompany(this.company)) {\r\n            const userPermissionLevel = this.authorizationService.getPermissionLevel(\r\n                this.company,\r\n                userCompanyPrivilege.privilegeName,\r\n                userCompanyPrivilege.privilegeParentLevelTwo,\r\n                userCompanyPrivilege.privilegeParentLevelOne);\r\n            if (userPermissionLevel < userCompanyPrivilege.permission) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getReportList() {\r\n        // temporarily hardcoded\r\n        const documentType = 76;\r\n        this.documentService.getTemplates(documentType).subscribe((data) => {\r\n            if (data) {\r\n                for (let i = 0; i < data.value.length; i++) {\r\n                    const split = data.value[i].path.split('/');\r\n                    data.value[i].company = split[2];\r\n                    data.value[i].linkedMenu = split[3];\r\n                }\r\n\r\n                // If user has access to particular company\r\n                // then only related reports will be visible for user\r\n                const companyListByAccess: string[] = [];\r\n                companyListByAccess.push('mc');\r\n                this.masterdata.companies.forEach((company) => {\r\n                    const isCompanyAccess: boolean = true;\r\n                    if (this.authorizationService.isUserAllowedForCompany(company.companyId)) {\r\n                        companyListByAccess.push(company.companyId);\r\n                    }\r\n                });\r\n\r\n                // If user has privilege for particular functional area\r\n                // then only related reports will be visible for user\r\n                const functionalAreaByAccess: string[] = [];\r\n                this.functionalAreas.forEach((area) => {\r\n                    if (area.enumEntityValue === FunctionalArea[FunctionalArea.Trades]\r\n                        || area.enumEntityValue === FunctionalArea[FunctionalArea.Charters]) {\r\n                        this.customReportReadPrivilege.privilegeParentLevelOne = area.enumEntityValue;\r\n                        this.customReportReadPrivilege.privilegeParentLevelTwo = null;\r\n                    } else if (area.enumEntityValue === FunctionalArea[FunctionalArea.Counterparties]\r\n                        || area.enumEntityValue === FunctionalArea[FunctionalArea.NominalAccountLedger]\r\n                        || area.enumEntityValue === FunctionalArea[FunctionalArea.Vessels]) {\r\n                        this.customReportReadPrivilege.privilegeParentLevelOne = 'MasterData';\r\n                        this.customReportReadPrivilege.privilegeParentLevelTwo = null;\r\n                    } else if (area.enumEntityValue === FunctionalArea[FunctionalArea.AccountingEntries]) {\r\n                        this.customReportReadPrivilege.privilegeParentLevelOne = 'Financials';\r\n                        this.customReportReadPrivilege.privilegeParentLevelTwo = area.enumEntityValue;\r\n                    } else if (area.enumEntityValue === FunctionalArea[FunctionalArea.Users]) {\r\n                        this.customReportReadPrivilege.privilegeParentLevelOne = 'Administration';\r\n                        this.customReportReadPrivilege.privilegeParentLevelTwo = area.enumEntityValue;\r\n                    }\r\n\r\n                    this.customReportReadPrivilege.privilegeName = (area.enumEntityValue === FunctionalArea[FunctionalArea.Counterparties]\r\n                        || area.enumEntityValue === FunctionalArea[FunctionalArea.NominalAccountLedger]\r\n                        || area.enumEntityValue === FunctionalArea[FunctionalArea.Vessels])\r\n                        ? 'MasterData' : area.enumEntityValue;\r\n\r\n                    if (this.checkIfUserHasRequiredPrivileges(this.customReportReadPrivilege)) {\r\n                        functionalAreaByAccess.push(area.enumEntityValue);\r\n                    }\r\n                });\r\n\r\n                this.customReportList = data.value;\r\n                this.customReportGridRows = this.customReportList.filter((a) =>\r\n                    companyListByAccess.includes(a.company) && functionalAreaByAccess.includes(a.linkedMenu));\r\n\r\n                if (this.gridApi) {\r\n                    if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n                }\r\n\r\n                this.isLoading = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    onSearchButtonClicked() {\r\n        const reportName = this.searchedValueCtrl.value;\r\n        this.filteredCustomReports = reportName ?\r\n            this.customReportList.filter((column) => column.name.toLowerCase().includes(reportName.toLowerCase()))\r\n            : this.customReportList;\r\n        this.customReportGridRows = this.filteredCustomReports;\r\n        this.isLoading = false;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onColumnVisibilityChanged(column: any) {\r\n        if (this.userPreferencesComponent) {\r\n            this.userPreferencesComponent.onChangeColumnVisibility(column);\r\n        }\r\n        this.customReportGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    showOrHideColum(event, col: agGrid.ColDef) {\r\n        const cols = this.customReportGridCols.filter((colf) => colf.colId === col.colId);\r\n        if (cols.length === 1) {\r\n            cols[0].hide = !(col.hide || false);\r\n\r\n            this.gridColumnApi.setColumnVisible(col.colId, !cols[0].hide);\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onRefreshButtonClicked() {\r\n        this.gridColumnApi.resetColumnState();\r\n        this.customReportGridCols.forEach((colf) => {\r\n            colf.hide = !this.gridColumnApi.getColumn(colf.colId).isVisible();\r\n        });\r\n        this.customReportGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n}\r\n","module.exports = \"<div class='main-container'>\\r\\n    <form [formGroup]=\\\"formGroup\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-around center\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h2>General filters</h2>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\">\\r\\n                        <atlas-date-picker isEditable=true\\r\\n                                           label=\\\"From\\\"\\r\\n                                           [fieldControl]=\\\"dateFromCtrl\\\"\\r\\n                                           [errorMap]=\\\"dateErrorMap\\\"\\r\\n                                           (dateChanged)=\\\"onDateChanged()\\\">\\r\\n                        </atlas-date-picker>\\r\\n                        <atlas-date-picker isEditable=true\\r\\n                                           label=\\\"To\\\"\\r\\n                                           [fieldControl]=\\\"dateToCtrl\\\"\\r\\n                                           [errorMap]=\\\"ToDateErrorMap\\\"\\r\\n                                           (dateChanged)=\\\"onDateChanged()\\\">\\r\\n                        </atlas-date-picker>\\r\\n                        <atlas-dropdown-select label=\\\"Snapshot\\\"\\r\\n                                               [fieldControl]=\\\"snapshotCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               [options]=\\\"snapshotOptions\\\"\\r\\n                                               displayProperty=\\\"freezeDate\\\"\\r\\n                                               [selectProperties]=\\\"['freezeDate']\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                    </div>\\r\\n                    <mat-divider></mat-divider>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\"\\r\\n                         class=\\\"general-filters\\\">\\r\\n                        <atlas-dropdown-select label=\\\"Functional object\\\"\\r\\n                                               [fieldControl]=\\\"functionalObjectCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               [options]=\\\"functionalObjectOptions\\\"\\r\\n                                               displayProperty=\\\"functionalObjectName\\\"\\r\\n                                               [selectProperties]=\\\"['functionalObjectName']\\\"\\r\\n                                               (optionSelected)=\\\"onFunctionalObjectSelected($event)\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                        <atlas-dropdown-select label=\\\"User\\\"\\r\\n                                               [fieldControl]=\\\"userCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               [options]=\\\"userFilteredOptions\\\"\\r\\n                                               isAutocompleteActivated=true\\r\\n                                               displayProperty=\\\"displayName\\\"\\r\\n                                               [selectProperties]=\\\"['displayName']\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                        <atlas-dropdown-select label=\\\"Type of event\\\"\\r\\n                                               [options]=\\\"eventTypeOptions\\\"\\r\\n                                               [fieldControl]=\\\"eventCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               (optionSelected)=\\\"onEventTypeSelected($event)\\\"\\r\\n                                               multiselect=true>\\r\\n                        </atlas-dropdown-select>\\r\\n                        <atlas-dropdown-select label=\\\"Functional context\\\"\\r\\n                                               [options]=\\\"functionalContextOptions\\\"\\r\\n                                               [fieldControl]=\\\"functionalContextCtrl\\\"\\r\\n                                               isEditable=true>\\r\\n                        </atlas-dropdown-select>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             *ngIf=\\\"predefinedKeys.length > 0\\\">\\r\\n            <mat-card>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h2>Key fields</h2>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row wrap\\\"\\r\\n                         fxLayoutGap=\\\"2%\\\">\\r\\n                        <atlas-form-input *ngFor=\\\"let key of predefinedKeys; trackBy:trackKeyFields\\\"\\r\\n                                          isEditable=true\\r\\n                                          [id]=\\\"key.fieldId\\\"\\r\\n                                          [label]=\\\"key.friendlyName.concat(' (', key.type, ')')\\\"\\r\\n                                          [errorMap]=\\\"keysErrorMap\\\"\\r\\n                                          #keyFields>\\r\\n                        </atlas-form-input>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutGap=\\\"2%\\\">\\r\\n            <mat-card *ngIf=\\\"additionalFilterOptions && additionalFilterOptions.length > 0\\\">\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h2>Additional filter</h2>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"1%\\\">\\r\\n                        <atlas-dropdown-select label=\\\"Key\\\"\\r\\n                                               [options]=\\\"additionalFilterOptions\\\"\\r\\n                                               [fieldControl]=\\\"additionalKeyCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               displayProperty=\\\"fieldName\\\"\\r\\n                                               [selectProperties]=\\\"['tableName', 'friendlyName']\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                        <atlas-form-input [fieldControl]=\\\"oldValueCtrl\\\"\\r\\n                                          isEditable=true\\r\\n                                          [errorMap]=\\\"keysErrorMap\\\"\\r\\n                                          label=\\\"Old value\\\"\\r\\n                                          #additionalFilterOldValue>\\r\\n                        </atlas-form-input>\\r\\n                        <atlas-form-input [fieldControl]=\\\"newValueCtrl\\\"\\r\\n                                          isEditable=true\\r\\n                                          [errorMap]=\\\"keysErrorMap\\\"\\r\\n                                          label=\\\"New value\\\"\\r\\n                                          #additionalFilterNewValue>\\r\\n                        </atlas-form-input>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <mat-card>\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h2>Display options</h2>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"5%\\\">\\r\\n                        <atlas-dropdown-select label=\\\"Order by\\\"\\r\\n                                               [options]=\\\"orderByOptions\\\"\\r\\n                                               [fieldControl]=\\\"orderByCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               [selectProperties]=\\\"['name']\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                        <atlas-dropdown-select label=\\\"Display with\\\"\\r\\n                                               [options]=\\\"displayWithOptions\\\"\\r\\n                                               [fieldControl]=\\\"displayOptionCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               [selectProperties]=\\\"['name']\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\">\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"generate-report-button\\\"\\r\\n                    (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n        </div>\\r\\n    </form>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 #ssrsReportViewer>\\r\\n        </atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".generate-report-button {\\n  margin: 0 !important; }\\n\\nmat-card {\\n  width: 100%; }\\n\\n.general-filters {\\n  margin-top: 2%; }\\n\\n.report-container {\\n  height: 60vh; }\\n\"","import { AfterViewInit, Component, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { from, Observable, Subject } from 'rxjs';\r\nimport { map, mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { FormInputComponent } from '../../../../../shared/components/form-components/form-input/form-input.component';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { ApplicationFieldDisplayView } from '../../../../../shared/entities/application-field-display-view';\r\nimport { ApplicationField } from '../../../../../shared/entities/application-field.entity';\r\nimport { Freeze } from '../../../../../shared/entities/freeze.entity';\r\nimport { FunctionalObject } from '../../../../../shared/entities/functional-object.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { User } from '../../../../../shared/entities/user.entity';\r\nimport { AtlasServiceNames } from '../../../../../shared/enums/atlas-service-names.enum';\r\nimport { EventType } from '../../../../../shared/enums/event-type.enum';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\nimport { ApiCollection, ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { FreezeService } from '../../../../../shared/services/http-services/freeze.service';\r\nimport { ReportingService } from '../../../../../shared/services/http-services/reporting.service';\r\nimport { UserIdentityService } from '../../../../../shared/services/http-services/user-identity.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { isBeforeDate, isDateBeforeControlDate } from '../../../../../shared/validators/date-validators.validator';\r\nimport { DisplayOptions } from '../../../../entities/display-options.entity';\r\nimport { OrderByOptions } from '../../../../entities/order-by-options.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-audit-report',\r\n    templateUrl: './audit-report.component.html',\r\n    styleUrls: ['./audit-report.component.scss'],\r\n})\r\nexport class AuditReportComponent implements OnInit, AfterViewInit, OnDestroy {\r\n    private readonly alphanumericPattern = '^[a-zA-Z0-9.]*$';\r\n\r\n    @ViewChildren('keyFields') keyFields: QueryList<FormInputComponent>;\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    formGroup: FormGroup;\r\n    dateFromCtrl: FormControl;\r\n    dateToCtrl: FormControl;\r\n    snapshotCtrl: FormControl;\r\n    functionalObjectCtrl: FormControl;\r\n    userCtrl = new FormControl();\r\n    eventCtrl = new FormControl();\r\n    functionalContextCtrl = new FormControl();\r\n    additionalKeyCtrl = new FormControl();\r\n    oldValueCtrl: FormControl;\r\n    newValueCtrl: FormControl;\r\n    orderByCtrl: FormControl;\r\n    displayOptionCtrl: FormControl;\r\n\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/Audit/Audit';\r\n    parameters: any[] = [];\r\n    company: string;\r\n    destroy$ = new Subject();\r\n    snapshotOptions: FreezeDisplayView[] = [];\r\n    functionalObjectOptions: FunctionalObject[] = [];\r\n    userOptions: User[] = [];\r\n    userFilteredOptions: User[] = [];\r\n    selectedEventTypes: EventType[] = [];\r\n    isUpdateSelected: boolean;\r\n    eventTypeOptions: string[] = [];\r\n    functionalContextOptions: string[] = [];\r\n    additionalFilterOptions: ApplicationFieldDisplayView[] = [];\r\n    displayWithOptions: DisplayOptions[] = [];\r\n    orderByOptions: OrderByOptions[] = [];\r\n    predefinedKeys: ApplicationField[] = [];\r\n    keysErrorMap: Map<string, string> = new Map();\r\n    currentSnapshot = new FreezeDisplayView(-1, 'CURRENT');\r\n    now: moment.Moment;\r\n    filters: ListAndSearchFilter[] = [];\r\n    dynamicControls: string[] = [];\r\n    dateErrorMap: Map<string, string> = new Map();\r\n    ToDateErrorMap: Map<string, string> = new Map();\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private companyManager: CompanyManagerService,\r\n        private freezeService: FreezeService,\r\n        private configurationService: ConfigurationService,\r\n        private userIdentityService: UserIdentityService,\r\n        private reportingService: ReportingService,\r\n        private snackbarService: SnackbarService,\r\n        private utilService: UtilService,\r\n        private titleService: TitleService) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n        this.displayWithOptions = DisplayOptions.getOptionList();\r\n        this.orderByOptions = OrderByOptions.getOptionList();\r\n        this.eventTypeOptions = Object.values(EventType).filter((value) => typeof value === 'string') as string[];\r\n        this.functionalContextOptions = Object.values(AtlasServiceNames).filter((value) => typeof value === 'string') as string[];\r\n        this.keysErrorMap.set('pattern', 'Not accepted format');\r\n        this.dateErrorMap\r\n            .set('isDateValid', 'The date cannot be in the future.');\r\n\r\n        this.ToDateErrorMap\r\n            .set('isDateValid', 'The date cannot be in the future.')\r\n            .set('isBeforeDateValid', 'To date cannot be before the from date');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initForm();\r\n        this.loadData();\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.keyFields.changes\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((components: QueryList<FormInputComponent>) => {\r\n                this.dynamicControls.forEach((control) => {\r\n                    this.formGroup.removeControl(control);\r\n                });\r\n                components.forEach((component) => {\r\n                    const controlName = String(component.id);\r\n                    this.dynamicControls.push(controlName);\r\n                    component.fieldControl.setValidators(Validators.pattern(this.alphanumericPattern));\r\n                    this.formGroup.addControl(controlName, component.fieldControl);\r\n                });\r\n                this.formGroup.updateValueAndValidity();\r\n            });\r\n    }\r\n\r\n    onDateChanged(): void {\r\n        this.setDateValidators();\r\n    }\r\n\r\n    setDateValidators() {\r\n        this.dateToCtrl.setValidators(Validators.compose(\r\n            [isBeforeDate(this.companyManager.getCurrentCompanyDate()), (isDateBeforeControlDate(moment(this.dateFromCtrl.value)))]));\r\n        this.dateToCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    initForm() {\r\n        this.initControls();\r\n        this.subscribeForChanges();\r\n        this.formGroup = this.formBuilder.group({\r\n            dateFromCtrl: this.dateFromCtrl,\r\n            dateToCtrl: this.dateToCtrl,\r\n            snapshotCtrl: this.snapshotCtrl,\r\n            functionalObjectCtrl: this.functionalObjectCtrl,\r\n            userCtrl: this.userCtrl,\r\n            eventCtrl: this.eventCtrl,\r\n            functionalContextCtrl: this.functionalContextCtrl,\r\n            additionalKeyCtrl: this.additionalKeyCtrl,\r\n            oldValueCtrl: this.oldValueCtrl,\r\n            newValueCtrl: this.newValueCtrl,\r\n            orderByCtrl: this.orderByCtrl,\r\n            displayOptionCtrl: this.displayOptionCtrl,\r\n        });\r\n    }\r\n\r\n    initControls() {\r\n        this.dateFromCtrl = new FormControl(this.now, [Validators.required, isBeforeDate(this.companyManager.getCurrentCompanyDate())]);\r\n        this.dateToCtrl = new FormControl(this.now, [Validators.required, isBeforeDate(this.companyManager.getCurrentCompanyDate())]);\r\n        this.snapshotCtrl = new FormControl(this.currentSnapshot);\r\n        this.functionalObjectCtrl = new FormControl('', Validators.required);\r\n        this.newValueCtrl = new FormControl('', Validators.pattern(this.alphanumericPattern));\r\n        this.oldValueCtrl = new FormControl('', Validators.pattern(this.alphanumericPattern));\r\n        this.displayOptionCtrl = new FormControl(this.displayWithOptions.find((item) => item.name === 'Friendly name'));\r\n        this.orderByCtrl = new FormControl(this.orderByOptions.find((item) => item.name === 'Date'));\r\n    }\r\n\r\n    subscribeForChanges() {\r\n        this.userCtrl.valueChanges\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((input) => {\r\n                this.userFilteredOptions = this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.userOptions,\r\n                    ['displayName'],\r\n                );\r\n            });\r\n    }\r\n\r\n    loadData() {\r\n        this.freezeService.getFreezeList()\r\n            .pipe(\r\n                map((collection: ApiPaginatedCollection<Freeze>) => {\r\n                    return collection.value.map((freeze) => {\r\n                        return new FreezeDisplayView(\r\n                            freeze.dataVersionId,\r\n                            this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate));\r\n                    });\r\n                }),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((snapshots: FreezeDisplayView[]) => {\r\n                this.snapshotOptions = snapshots;\r\n                this.snapshotOptions.unshift(this.currentSnapshot);\r\n            });\r\n\r\n        this.configurationService.getFunctionalObjects()\r\n            .pipe(\r\n                map((collection: ApiCollection<FunctionalObject>) => collection.value),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((functionalObjects) => {\r\n                this.functionalObjectOptions = functionalObjects;\r\n            });\r\n\r\n        this.userIdentityService.getAllUsers()\r\n            .pipe(\r\n                map((collection: ApiCollection<User>) => collection.value),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe((users) => {\r\n                this.userOptions = this.userFilteredOptions = users;\r\n                this.userCtrl.setValidators(inDropdownListValidator(\r\n                    this.userOptions,\r\n                    nameof<User>('userId'),\r\n                ));\r\n            });\r\n    }\r\n\r\n    getAdditionalKeys(functionalObject: FunctionalObject): Observable<ApplicationFieldDisplayView[]> {\r\n        return from(functionalObject.tables)\r\n            .pipe(\r\n                mergeMap((table) => this.configurationService.getApplicationTableById(table.tableId)),\r\n                map((table) => {\r\n                    return table.fields.map((field) => {\r\n                        const fieldView: ApplicationFieldDisplayView = {\r\n                            fieldId: field.fieldId,\r\n                            fieldName: field.fieldName,\r\n                            friendlyName: field.friendlyName,\r\n                            description: field.description,\r\n                            tableName: table.tableName,\r\n                            type: field.type,\r\n                        };\r\n                        return fieldView;\r\n                    });\r\n                }),\r\n            );\r\n    }\r\n\r\n    onEventTypeSelected(eventTypes: string[]) {\r\n        this.selectedEventTypes = eventTypes.map((event) => {\r\n            if (event) {\r\n                return EventType[event];\r\n            }\r\n        });\r\n        this.isUpdateSelected = this.selectedEventTypes.indexOf(EventType.Update) > -1;\r\n    }\r\n\r\n    onFunctionalObjectSelected(functionalObject: FunctionalObject) {\r\n        if (functionalObject) {\r\n            this.additionalFilterOptions = [];\r\n            this.configurationService.getFunctionalObjectById(functionalObject.functionalObjectId)\r\n                .pipe(\r\n                    map((object: FunctionalObject) => {\r\n                        let keyFields: ApplicationField[] = [];\r\n                        object.tables.forEach((table) => {\r\n                            keyFields = keyFields.concat(table.fields);\r\n                        });\r\n                        return keyFields;\r\n                    }),\r\n                    mergeMap((fields: ApplicationField[]) => {\r\n                        this.predefinedKeys = fields;\r\n                        return this.getAdditionalKeys(functionalObject);\r\n                    }),\r\n                    takeUntil(this.destroy$),\r\n                )\r\n                .subscribe((fields: ApplicationFieldDisplayView[]) => {\r\n                    this.utilService.removeItemsFromArray(fields, this.predefinedKeys, 'fieldId');\r\n                    this.additionalFilterOptions = this.additionalFilterOptions.concat(fields);\r\n                    this.utilService.sortArrayAlphabetically(this.additionalFilterOptions, ['tableName', 'fieldName']);\r\n                });\r\n        }\r\n    }\r\n\r\n    getKeyFieldsParameter(): any {\r\n        const parameters: any[] = [];\r\n        const keyFieldValues: string[] = [];\r\n        this.keyFields.forEach((input, index) => {\r\n            if (input.id && input.fieldControl) {\r\n                const keyValue = input.fieldControl.value;\r\n                keyFieldValues.push(String(input.id).concat('=', keyValue ? String(keyValue) : ''));\r\n            }\r\n        });\r\n\r\n        if (keyFieldValues && keyFieldValues.length > 0) {\r\n            parameters.push({ name: 'KeyFields', value: keyFieldValues.join(',') });\r\n        }\r\n        return parameters;\r\n    }\r\n\r\n    getBasicParameters(): any[] {\r\n        const dateFrom = (this.dateFromCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n        const dateTo = (this.dateToCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n        const snapshotId = (this.snapshotCtrl.value as FreezeDisplayView).dataVersionId;\r\n        const functionalObjectId = (this.functionalObjectCtrl.value as FunctionalObject).functionalObjectId;\r\n        const userId = this.userCtrl.value ? (this.userCtrl.value as User).userId : '';\r\n        const functionalContext = this.functionalContextCtrl.value ?\r\n            AtlasServiceNames[AtlasServiceNames[this.functionalContextCtrl.value]] : '';\r\n        const orderBy = (this.orderByCtrl.value as OrderByOptions).value;\r\n        const displayOption = (this.displayOptionCtrl.value as DisplayOptions).value;\r\n\r\n        const parameters: any[] = [\r\n            { name: 'DateFrom', value: dateFrom },\r\n            { name: 'DateTo', value: dateTo },\r\n            { name: 'Company', value: this.company },\r\n            { name: 'FunctionalObject', value: functionalObjectId },\r\n            { name: 'DisplayWith', value: displayOption },\r\n            { name: 'OrderBy', value: orderBy },\r\n        ];\r\n\r\n        if (userId) {\r\n            parameters.push({ name: 'User', value: userId });\r\n        }\r\n\r\n        if (functionalContext) {\r\n            parameters.push({ name: 'FunctionalContext', value: functionalContext });\r\n        }\r\n\r\n        if (snapshotId > -1) {\r\n            parameters.push({ name: 'Database', value: snapshotId });\r\n        }\r\n\r\n        this.selectedEventTypes.forEach((event) => {\r\n            parameters.push({ name: 'EventType', value: EventType[event].toUpperCase() });\r\n        });\r\n\r\n        return parameters;\r\n    }\r\n\r\n    getAdditionalFilterParameters(): any[] {\r\n        const additionalFieldId = this.additionalKeyCtrl.value ? (this.additionalKeyCtrl.value as ApplicationField).fieldId : -1;\r\n        const oldValue = this.oldValueCtrl.value;\r\n        const newValue = this.newValueCtrl.value;\r\n        const parameters: any[] = [];\r\n\r\n        if (additionalFieldId > -1) {\r\n            parameters.push({ name: 'AdditionalFilter', value: additionalFieldId });\r\n        }\r\n\r\n        parameters.push({ name: 'AdditionalFilterOldValue', value: oldValue });\r\n        parameters.push({ name: 'AdditionalFilterNewValue', value: newValue });\r\n\r\n        return parameters;\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        if (!this.formGroup || !this.formGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please check the errors.');\r\n            return;\r\n        }\r\n\r\n        this.parameters = [];\r\n        this.parameters = this.parameters.concat(\r\n            this.getBasicParameters(),\r\n            this.getKeyFieldsParameter(),\r\n            this.getAdditionalFilterParameters());\r\n\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n\r\n    trackKeyFields(item: ApplicationField): any {\r\n        return item.fieldId;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","import { FormGroup, ValidatorFn } from '@angular/forms';\r\nimport * as _moment from 'moment';\r\nconst moment = _moment;\r\n\r\nexport function beforeFromDate(fromFormControlName: string, toFormControlName: string, allowEqual: boolean = true): ValidatorFn {\r\n    return (abstractForm: FormGroup): { [key: string]: any } => {\r\n        const fromFormControl = abstractForm.get(fromFormControlName);\r\n        const toFormControl = abstractForm.get(toFormControlName);\r\n        if (fromFormControl && fromFormControl.value\r\n            && toFormControl && toFormControl.value) {\r\n            const isDatebeforeFrom = fromFormControl.value.format('YYYY-MM-DD') > toFormControl.value.format('YYYY-MM-DD')\r\n                ? true : false;\r\n            if (isDatebeforeFrom) {\r\n                toFormControl.setErrors({ isClientDateBeforeValid: true });\r\n                return { isClientDateBeforeValid: true };\r\n            } else {\r\n                toFormControl.setErrors(null);\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"clientReportFormGroup\\\">\\r\\n        <div fxLayout=\\\"row wrap\\\"\\r\\n             fxLayoutAlign=\\\"center\\\"\\r\\n             fxLayoutGap=\\\"1%\\\"\\r\\n             fxLayoutAlign.lt-md=\\\"space-between stretch\\\">\\r\\n            <mat-card fxFlex=\\\"auto\\\">\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row wrap\\\"\\r\\n                         fxLayoutAlign=\\\"space-between start\\\"\\r\\n                         fxLayoutGap=\\\"1%\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"start\\\"\\r\\n                             fxFlex=\\\"32%\\\">\\r\\n                            <mat-card-title>Period Range</mat-card-title>\\r\\n                            <atlas-month-date-picker isEditable=true\\r\\n                                                     label=\\\"From\\\"\\r\\n                                                     [fieldControl]=\\\"clientDateFromCtrl\\\"\\r\\n                                                     (monthChanged)=\\\"onMonthChanged()\\\">\\r\\n                            </atlas-month-date-picker>\\r\\n                            <atlas-month-date-picker isEditable=true\\r\\n                                                     label=\\\"To\\\"\\r\\n                                                     [errorMap]=\\\"periodRangeErrorMap\\\"\\r\\n                                                     [fieldControl]=\\\"clientDateToCtrl\\\"\\r\\n                                                     (monthChanged)=\\\"onMonthChanged()\\\">\\r\\n                            </atlas-month-date-picker>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxFlex=\\\"32%\\\">\\r\\n                            <mat-card-title>Report Parameters</mat-card-title>\\r\\n                            <div fxLayout=\\\"row\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <mat-select [formControl]=\\\"reportStyleCtrl\\\"\\r\\n                                                [required]=\\\"reportStyleCtrl.isRequired\\\"\\r\\n                                                (selectionChange)=\\\"optionValueChanged($event)\\\">\\r\\n                                        <mat-option *ngFor=\\\"let reportStyle of reportStyleTypes\\\"\\r\\n                                                    [value]=\\\"reportStyle.value\\\">\\r\\n                                            {{reportStyle.reportStyleDescription}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-select>\\r\\n                                    <mat-error *ngIf=\\\"reportStyleCtrl.hasError('required')\\\">\\r\\n                                        This field is required\\r\\n                                    </mat-error>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                            <mat-slide-toggle *ngIf=\\\"reportStyleCtrl.value === ReportStyleType.Summary\\\"\\r\\n                                              [formControl]=\\\"functionalCurrencyCtrl\\\">Functional currency only\\r\\n                            </mat-slide-toggle>\\r\\n                            <mat-slide-toggle [formControl]=\\\"accrualsIncludedCtrl\\\">Accruals Included\\r\\n                            </mat-slide-toggle>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxFlex=\\\"32%\\\">\\r\\n                            <mat-card-title>Quick Filters</mat-card-title>\\r\\n                            <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                                     [fieldControl]=\\\"clientAccountCtrl\\\"\\r\\n                                                                     [options]=\\\"filteredCounterPartyList\\\"\\r\\n                                                                     label=\\\"Client Account\\\"\\r\\n                                                                     displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                                     [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                                     [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                                     lightBoxTitle=\\\"Results for Client Accounts\\\"\\r\\n                                                                     gridId=\\\"counterpartiesGrid\\\">\\r\\n                            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n                            <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                                     [fieldControl]=\\\"currencyCtrl\\\"\\r\\n                                                                     [options]=\\\"filteredCurrencyList\\\"\\r\\n                                                                     label=\\\"Currency\\\"\\r\\n                                                                     displayProperty=\\\"currencyCode\\\"\\r\\n                                                                     [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                                                     [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                                                     lightBoxTitle=\\\"Results for Currencies\\\"\\r\\n                                                                     gridId=\\\"CurrenciesGrid\\\">\\r\\n                            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n                            <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                                     [fieldControl]=\\\"clientDepartmentCtrl\\\"\\r\\n                                                                     [options]=\\\"filteredDepartmentList\\\"\\r\\n                                                                     label=\\\"Department\\\"\\r\\n                                                                     displayProperty=\\\"departmentCode\\\"\\r\\n                                                                     [selectProperties]=\\\"['departmentCode', 'description']\\\"\\r\\n                                                                     [errorMap]=\\\"departmentErrorMap\\\"\\r\\n                                                                     lightBoxTitle=\\\"Results for Departments\\\"\\r\\n                                                                     gridId=\\\"departmentsGrid\\\">\\r\\n                            </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n                            <atlas-masterdata-user-preferences-input fxFlex=\\\"40%\\\"\\r\\n                                                                     isEditable=\\\"true\\\"\\r\\n                                                                     [fieldControl]=\\\"costTypeCtrl\\\"\\r\\n                                                                     [options]=\\\"filteredCostTypeList\\\"\\r\\n                                                                     label=\\\"Cost Type\\\"\\r\\n                                                                     displayProperty=\\\"costTypeCode\\\"\\r\\n                                                                     [selectProperties]=\\\"['costTypeCode', 'name']\\\"\\r\\n                                                                     [errorMap]=\\\"costTypeErrorMap\\\"\\r\\n                                                                     lightBoxTitle=\\\"Results for costTypes\\\"\\r\\n                                                                     gridId=\\\"costTypesGrid\\\">\\r\\n                            </atlas-masterdata-user-preferences-input>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <mat-card fxFlex=\\\"260px\\\">\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\"\\r\\n                         fxLayoutGap=\\\"2%\\\">\\r\\n\\r\\n                        <mat-card-title>Balances</mat-card-title>\\r\\n\\r\\n                        <mat-form-field>\\r\\n                            <mat-select [formControl]=\\\"balancesCtrl\\\"\\r\\n                                        [required]=\\\"balancesCtrl.isRequired\\\">\\r\\n                                <mat-option *ngFor=\\\"let balance of balancesTypes\\\"\\r\\n                                            [value]=\\\"balance.value\\\">\\r\\n                                    {{balance.balancesDescription}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                            <mat-error *ngIf=\\\"balancesCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <mat-card-title>Matching</mat-card-title>\\r\\n                        <div fxLayout=\\\"row\\\">\\r\\n                            <mat-button-toggle-group [formControl]=\\\"matchingCtrl\\\"\\r\\n                                                     (change)=\\\"onMatchingChange($event.value)\\\"\\r\\n                                                     [required]=\\\"matchingCtrl.isRequired\\\">\\r\\n                                <mat-button-toggle *ngFor=\\\"let matching of matchingTypes\\\"\\r\\n                                                   [value]=\\\"matching.value\\\">{{matching.matchingTypeDescription}}\\r\\n                                </mat-button-toggle>\\r\\n                            </mat-button-toggle-group>\\r\\n                            <mat-error *ngIf=\\\"matchingCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"row\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-select [formControl]=\\\"unmatchedCtrl\\\">\\r\\n                                    <mat-option *ngFor=\\\"let unmatched of unmatchedTypes\\\"\\r\\n                                                [value]=\\\"unmatched.value\\\">{{unmatched.unmatchedDescription}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <atlas-filter-set-display fxFlex=\\\"auto\\\"\\r\\n                                      (filtersChanged)=onFilterSetChanged($event)\\r\\n                                      [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                                      [gridCode]=\\\"gridCode\\\"\\r\\n                                      [company]=\\\"company\\\"\\r\\n                                      #filterSetDisplay>\\r\\n            </atlas-filter-set-display>\\r\\n        </div>\\r\\n    </form>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-raised-button\\r\\n                class=\\\"generate-report-button\\\"\\r\\n                (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n    </div>\\r\\n    <mat-tab-group *ngIf=\\\"isTabEnalble\\\"\\r\\n                   [selectedIndex]=\\\"tabIndex\\\"\\r\\n                   (selectedIndexChange)=onSelectedIndexChanged($event)>\\r\\n        <mat-tab label=\\\"Overview\\\"></mat-tab>\\r\\n        <mat-tab label=\\\"Details\\\"></mat-tab>\\r\\n    </mat-tab-group>\\r\\n    <div class=\\\"content-tab\\\">\\r\\n        <mat-tab-group [selectedIndex]=\\\"tabIndex\\\">\\r\\n            <mat-tab>\\r\\n                <atlas-overview #overviewComponent\\r\\n                                [isFormValid]=\\\"isFormValid\\\"\\r\\n                                [clientDateFromCtrl]=\\\"clientDateFromCtrl\\\"\\r\\n                                [clientDateToCtrl]=\\\"clientDateToCtrl\\\"\\r\\n                                [clientReportFormGroup]=\\\"clientReportFormGroup\\\"\\r\\n                                [balancesCtrl]=\\\"balancesCtrl\\\"\\r\\n                                [reportStyleCtrl]=\\\"reportStyleCtrl\\\"\\r\\n                                [matchingCtrl]=\\\"matchingCtrl\\\"\\r\\n                                [unmatchedCtrl]=\\\"unmatchedCtrl\\\"\\r\\n                                [functionalCurrencyCtrl]=\\\"functionalCurrencyCtrl\\\"\\r\\n                                [accrualsIncludedCtrl]=\\\"accrualsIncludedCtrl\\\"\\r\\n                                [clientAccountCtrl]=\\\"clientAccountCtrl\\\"\\r\\n                                [currencyCtrl]=\\\"currencyCtrl\\\"\\r\\n                                [clientDepartmentCtrl]=\\\"clientDepartmentCtrl\\\"\\r\\n                                [costTypeCtrl]=\\\"costTypeCtrl\\\"\\r\\n                                [isTabEnalble]=\\\"isTabEnalble\\\"></atlas-overview>\\r\\n            </mat-tab>\\r\\n            <mat-tab>\\r\\n                <atlas-detail #detailComponent\\r\\n                              [isFormValid]=\\\"isFormValid\\\"\\r\\n                              [clientDateFromCtrl]=\\\"clientDateFromCtrl\\\"\\r\\n                              [clientDateToCtrl]=\\\"clientDateToCtrl\\\"\\r\\n                              [clientReportFormGroup]=\\\"clientReportFormGroup\\\"\\r\\n                              [balancesCtrl]=\\\"balancesCtrl\\\"\\r\\n                              [reportStyleCtrl]=\\\"reportStyleCtrl\\\"\\r\\n                              [matchingCtrl]=\\\"matchingCtrl\\\"\\r\\n                              [unmatchedCtrl]=\\\"unmatchedCtrl\\\"\\r\\n                              [functionalCurrencyCtrl]=\\\"functionalCurrencyCtrl\\\"\\r\\n                              [accrualsIncludedCtrl]=\\\"accrualsIncludedCtrl\\\"\\r\\n                              [clientAccountCtrl]=\\\"clientAccountCtrl\\\"\\r\\n                              [currencyCtrl]=\\\"currencyCtrl\\\"\\r\\n                              [clientDepartmentCtrl]=\\\"clientDepartmentCtrl\\\"\\r\\n                              [costTypeCtrl]=\\\"costTypeCtrl\\\"></atlas-detail>\\r\\n            </mat-tab>\\r\\n        </mat-tab-group>\\r\\n    </div>\\r\\n    <mat-card *ngIf=\\\"!isTabEnalble\\\">\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\">\\r\\n                <atlas-ag-grid-user-preferences *ngIf=\\\"agGridOptions && agGridOptions.columnDefs && isClientReportDisplay\\\"\\r\\n                                                [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                                [company]=\\\"company\\\"\\r\\n                                                [gridId]=\\\"gridCode\\\"\\r\\n                                                [isAutosize]=\\\"false\\\"\\r\\n                                                fxLayoutAlign=\\\"end\\\"\\r\\n                                                [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                                (exportClicked)=\\\"onExportButtonClickToExcel($event)\\\"\\r\\n                                                [isCustomExportEnabled]=\\\"true\\\"\\r\\n                                                (gridViewSelected)=\\\"onGridViewSelected($event)\\\"\\r\\n                                                #userPreferences>\\r\\n                </atlas-ag-grid-user-preferences>\\r\\n                <atlas-grid-enlargement *ngIf=\\\"agGridOptions && agGridOptions.columnDefs && isClientReportDisplay\\\"\\r\\n                                        [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                        [userPreferencesParameters]=\\\"gridPreferences\\\"\\r\\n                                        [hasRangeSelectionOption]=\\\"true\\\"\\r\\n                                        [summableColumns]=\\\"allowedColumnsforQuickSum\\\"\\r\\n                                        (columnRowGroupChanged)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                        (columnVisibilityChanged)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                        (customExcelExport)=\\\"onExportButtonClickToExcel($event)\\\"\\r\\n                                        (dialogClose)=\\\"onGridEnlargementClose($event)\\\"\\r\\n                                        #gridZoom>\\r\\n                </atlas-grid-enlargement>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 *ngIf='isClientReportDisplay'\\r\\n                 class=\\\"quick-sum-div-height\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleQuickSum($event.checked)\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                    <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                        <span class=\\\"quick-sum-span\\\"\\r\\n                              *ngIf=\\\"quickSumModeActivated\\\">{{column.name}} : {{column.sum | number }} </span>\\r\\n                    </div>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                            class=\\\"mat-button-user-margin\\\"\\r\\n                            *ngIf=\\\"quickSumModeActivated\\\">Clear Selection</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"agGridOptions\\\"\\r\\n                 [ngClass]='classApplied'\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 [ngClass]=\\\"{'hidden-during-loading':!isClientReportDisplay}\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"agGridRows\\\"\\r\\n                                 [columnDefs]=\\\"agGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"100\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                 [enableRangeSelection]=\\\"true\\\"\\r\\n                                 [groupMultiAutoColumn]=\\\"groupMultiAutoColumn\\\"\\r\\n                                 [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (columnRowGroupChanged)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \".generate-report-button {\\n  margin: 8px 0 0 0 !important; }\\n\\n.quick-sum-div-height {\\n  height: 25px !important; }\\n\\n.quick-sum-span {\\n  font: 400 14px/20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  margin-right: 4px; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize, first } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FilterSetDisplayComponent } from '../../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { UserGridViewDto } from '../../../../../shared/dtos/user-grid-view-dto.dto';\r\nimport { AccountingSetup } from '../../../../../shared/entities/accounting-setup.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { BalancesTypes } from '../../../../../shared/entities/balances-type-entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { MatchingTypes } from '../../../../../shared/entities/matchings-type-entity';\r\nimport { ReportStyleTypes } from '../../../../../shared/entities/report-style-type-entity';\r\nimport { UnmatchedTypes } from '../../../../../shared/entities/unmatched-type-entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { WINDOW } from '../../../../../shared/entities/window-injection-token';\r\nimport { BalancesType } from '../../../../../shared/enums/balances-type.enum';\r\nimport { ListAndSearchFilterType } from '../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { MatchingsType } from '../../../../../shared/enums/matchings-type.enum';\r\nimport { ReportStyleType } from '../../../../../shared/enums/report-style-type.enum';\r\nimport { UnmatchedType } from '../../../../../shared/enums/unmatched-type.enum';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { TransactionReportCommand } from '../../../../../shared/services/execution/dtos/transaction-report-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { ClientReportDataLoader } from '../../../../../shared/services/list-and-search/clientReport-data-loader';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { beforeFromDate } from './client-report-period-validator.validator';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { CostType } from '../../../../../shared/entities/cost-type.entity';\r\nimport { OverviewComponent } from './tabs/overview/overview.component';\r\nimport { DetailComponent } from './tabs/detail/detail.component';\r\n\r\n@Component({\r\n    selector: 'atlas-client-report',\r\n    providers: [ClientReportDataLoader, DatePipe],\r\n    templateUrl: './client-report.component.html',\r\n    styleUrls: ['./client-report.component.scss'],\r\n})\r\nexport class ClientReportComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplay') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    @ViewChild('overviewComponent') overviewComponent: OverviewComponent;\r\n    @ViewChild('detailComponent') detailComponent: DetailComponent;\r\n    gridContext: ClientReportComponent;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridRows: any[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = false;\r\n    gridCode = 'clientReportTransactionGrid';\r\n    gridTitle: string;\r\n    excelStyles: any;\r\n    isUserPreferencesDisplay: boolean = false;\r\n    isClientReportDisplay: boolean = false;\r\n    rowGroupPanelShow: string;\r\n    groupMultiAutoColumn: boolean;\r\n    checkFunctionalCurrency: string;\r\n    checkStatutoryCurrency: string;\r\n\r\n    clientDateFromCtrl = new AtlasFormControl('clientDateFrom');\r\n    clientDateToCtrl = new AtlasFormControl('clientDateTo');\r\n    clientReportFormGroup: FormGroup;\r\n    balancesCtrl = new AtlasFormControl('balances');\r\n    reportStyleCtrl = new AtlasFormControl('reportsStyle');\r\n    matchingCtrl = new AtlasFormControl('matchings');\r\n    unmatchedCtrl = new AtlasFormControl('unmatcheds');\r\n    functionalCurrencyCtrl = new AtlasFormControl('clientFunctionalCurrency');\r\n    accrualsIncludedCtrl = new AtlasFormControl('clientAccrualsIncluded');\r\n    clientAccountCtrl = new AtlasFormControl('clientAccount');\r\n    currencyCtrl = new AtlasFormControl('currency');\r\n    clientDepartmentCtrl = new AtlasFormControl('clientDepartment');\r\n    costTypeCtrl = new AtlasFormControl('costType');\r\n    company: string;\r\n    filters: ListAndSearchFilter[] = [];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    balancesTypes: BalancesTypes[] = [];\r\n    reportStyleTypes: ReportStyleTypes[] = [];\r\n    unmatchedTypes: UnmatchedTypes[] = [];\r\n    matchingTypes: MatchingTypes[] = [];\r\n    periodRangeErrorMap: Map<string, string> = new Map();\r\n    accountingSetupModel: AccountingSetup;\r\n    subscriptions: Subscription[] = [];\r\n    hasGridSharing: boolean;\r\n    companyConfiguration: Company;\r\n    ReportStyleType = ReportStyleType;\r\n\r\n    filteredCounterPartyList: Counterparty[];\r\n    filteredCurrencyList: Currency[];\r\n    filteredCostTypeList: CostType[];\r\n    clientAccountControl: Counterparty;\r\n\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Client not in the list.');\r\n    currencyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Currency not in the list.');\r\n    costTypeErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Currency not in the list.');\r\n    filteredDepartmentList: Department[];\r\n    departmentErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list.');\r\n    masterData: MasterData;\r\n\r\n    // -- Evolutions to handle correctly GridViews\r\n    clientTransactionGridCode: string = 'clientReportTransactionGrid';\r\n    clientTransactionGridConfig: ColumnConfigurationProperties[] = [];\r\n    clientTransactionQuickSumColumns: string[] = [];\r\n\r\n    clientSummaryGridCode: string = 'clientReportSummaryGrid';\r\n    clientSummaryGridConfig: ColumnConfigurationProperties[] = [];\r\n    clientSummaryQuickSumColumns: string[] = [];\r\n\r\n    // this is to resolve an issue on first filter change call. Search for A001\r\n    filtersLoadedForReport: boolean = false;\r\n\r\n    /* quick sum */\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    allowedColumnsforQuickSum: string[] = [];\r\n    counterPartyId: number;\r\n    isFormValid: boolean = false;\r\n    tabIndex: number;\r\n    isTabEnalble: boolean = false;\r\n    isGenerateButtonClicked: boolean = false;\r\n    isSummaryMode: boolean = false;\r\n    userActiveDirectoryName: string;\r\n    saveGridRows: any[] = [];\r\n\r\n    gridPreferences: UserGridPreferencesParameters;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: ClientReportDataLoader,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private utilService: UtilService,\r\n        private formatDate: FormatDatePipe,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private preaccountingService: PreaccountingService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService, ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.periodRangeErrorMap\r\n            .set('isClientDateBeforeValid', 'Cannot be before Period From.');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterPartyList = this.masterData.counterparties;\r\n        this.filteredCurrencyList = this.masterData.currencies;\r\n        this.filteredDepartmentList = this.masterData.departments;\r\n        this.filteredCostTypeList = this.masterData.costTypes;\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.counterPartyId = Number(this.route.snapshot.paramMap.get('counterPartyId'));\r\n\r\n        if (this.counterPartyId) {\r\n            this.clientAccountControl = this.filteredCounterPartyList.find((clientAccount) => clientAccount.counterpartyID === this.counterPartyId);\r\n            this.clientAccountCtrl.patchValue(this.clientAccountControl);\r\n        }\r\n\r\n        for (const type in BalancesType) {\r\n            if (typeof BalancesType[type] === 'number') {\r\n                this.balancesTypes.push({ value: BalancesType[type] as any, balancesDescription: type });\r\n            }\r\n        }\r\n        for (const type in ReportStyleType) {\r\n            if (typeof ReportStyleType[type] === 'number') {\r\n                this.reportStyleTypes.push({ value: ReportStyleType[type] as any, reportStyleDescription: type });\r\n            }\r\n        }\r\n        for (const type in UnmatchedType) {\r\n            if (typeof UnmatchedType[type] === 'number') {\r\n                this.unmatchedTypes.push({ value: UnmatchedType[type] as any, unmatchedDescription: type });\r\n            }\r\n        }\r\n        for (const type in MatchingsType) {\r\n            if (typeof MatchingsType[type] === 'number') {\r\n                this.matchingTypes.push({ value: MatchingsType[type] as any, matchingTypeDescription: type });\r\n            }\r\n        }\r\n        this.balancesCtrl.patchValue(BalancesType.Both);\r\n        this.reportStyleCtrl.patchValue(ReportStyleType.Transactions);\r\n        this.unmatchedCtrl.patchValue(UnmatchedType.Now);\r\n        this.matchingCtrl.patchValue(MatchingsType.Unmatched);\r\n\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.checkFunctionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.checkStatutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n\r\n        this.getFormGroup();\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n        this.subscriptions.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n                if (this.accountingSetupModel.lastMonthClosed !== null) {\r\n                    const numberOfOpenPeriods = this.accountingSetupModel.numberOfOpenPeriod !== null ?\r\n                        this.accountingSetupModel.numberOfOpenPeriod : 1;\r\n                    this.clientDateToCtrl.setValue(moment(this.accountingSetupModel.lastMonthClosed).add(numberOfOpenPeriods, 'month'));\r\n                }\r\n            }));\r\n        this.clientDateFromCtrl.setValue(moment().year(1980).month(0).date(1));\r\n\r\n        this.clientAccountCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.counterparties,\r\n                ['counterpartyCode', 'description'],\r\n            );\r\n        });\r\n\r\n        this.currencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.currencies,\r\n                ['currencyCode', 'description'],\r\n            );\r\n        });\r\n\r\n        this.clientDepartmentCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartmentList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.departments,\r\n                ['departmentCode', 'description'],\r\n            );\r\n        });\r\n\r\n        this.costTypeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCostTypeList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.costTypes,\r\n                ['costTypeCode', 'name'],\r\n            );\r\n        });\r\n\r\n        this.loadGridConfiguration();\r\n\r\n        // quicksum\r\n        this.classApplied = this.defaultClass;\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n    getFormGroup() {\r\n        this.clientReportFormGroup = this.formBuilder.group({\r\n            clientDateFromCtrl: this.clientDateFromCtrl,\r\n            clientDateToCtrl: this.clientDateToCtrl,\r\n            balancesCtrl: this.balancesCtrl,\r\n            reportStyleCtrl: this.reportStyleCtrl,\r\n            matchingCtrl: this.matchingCtrl,\r\n            unmatchedCtrl: this.unmatchedCtrl,\r\n            functionalCurrencyCtrl: this.functionalCurrencyCtrl,\r\n            accrualsIncludedCtrl: this.accrualsIncludedCtrl,\r\n            clientAccountCtrl: this.clientAccountCtrl,\r\n            currencyCtrl: this.currencyCtrl,\r\n            clientDepartmentCtrl: this.clientDepartmentCtrl,\r\n            costTypeCtrl: this.costTypeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    setValidators() {\r\n        this.clientDateFromCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.clientDateToCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.balancesCtrl.setValidators(Validators.compose([Validators.required]));\r\n        this.reportStyleCtrl.setValidators(Validators.compose([Validators.required]));\r\n        this.matchingCtrl.setValidators(Validators.compose([Validators.required]));\r\n        this.clientReportFormGroup.setValidators(beforeFromDate('clientDateFromCtrl', 'clientDateToCtrl'));\r\n        this.clientReportFormGroup.updateValueAndValidity();\r\n\r\n        this.clientAccountCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.counterparties,\r\n                    nameof<Counterparty>('counterpartyCode'),\r\n                    true,\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                    true,\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.clientDepartmentCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                    true,\r\n                ),\r\n            ]),\r\n        );\r\n\r\n        this.costTypeCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.costTypes,\r\n                    nameof<CostType>('costTypeCode'),\r\n                    true,\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n    onMatchingChange(matchingValue: number) {\r\n        if (matchingValue !== 1) {\r\n            this.unmatchedCtrl.disable();\r\n        } else {\r\n            this.unmatchedCtrl.enable();\r\n        }\r\n    }\r\n\r\n    onFilterSetChanged(filters: ListAndSearchFilter[]) {\r\n        this.filters = filters;\r\n        if (!this.counterPartyId) {\r\n            this.clientAccountCtrl.reset();\r\n        }\r\n        this.currencyCtrl.reset();\r\n        this.costTypeCtrl.reset();\r\n        this.clientDepartmentCtrl.reset();\r\n        // -- Issue A001\r\n        // this function is called on load. but we don't want to load the report on screen load.\r\n        // therefor we need one way of blocking the first call on screen load but allow the rest of the time.\r\n        // this following solution \"blocks the first call\"\r\n        if (this.filtersLoadedForReport) {\r\n            this.onGenerateReportButtonClicked();\r\n        }\r\n        this.filtersLoadedForReport = true;\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        this.isGenerateButtonClicked = true;\r\n        if (this.clientReportFormGroup.valid) {\r\n\r\n            if (this.reportStyleCtrl.value === ReportStyleType.Transactions && !this.isSummaryMode) {\r\n                this.isTabEnalble = true;\r\n                this.onSelectedButtonChanged(0);\r\n                this.overviewComponent.isOverviewMode = true;\r\n                this.detailComponent.isDetailMode = true;\r\n\r\n            }\r\n            else {\r\n                this.overviewComponent.isOverviewMode = false;\r\n                this.detailComponent.isDetailMode = false;\r\n                this.isTabEnalble = false;\r\n\r\n                this.toggleQuickSum(false);\r\n                const hasQuickSearchValues = (this.clientAccountCtrl.value && this.clientAccountCtrl.valid)\r\n                    || (this.currencyCtrl.value && this.currencyCtrl.valid)\r\n                    || (this.clientDepartmentCtrl.value && this.clientDepartmentCtrl.valid)\r\n                    || (this.costTypeCtrl.value && this.costTypeCtrl.valid);\r\n\r\n                if (hasQuickSearchValues) {\r\n                    const quickFilters: ListAndSearchFilter[] = [];\r\n                    if (this.clientAccountCtrl.value && this.clientAccountCtrl.valid) {\r\n                        const clientAccountField = this.columnConfiguration.find((column) => column.fieldName === 'ClientAccount');\r\n\r\n                        const clientAccountFilter = new ListAndSearchFilter();\r\n                        clientAccountFilter.fieldId = clientAccountField.fieldId;\r\n                        clientAccountFilter.fieldName = clientAccountField.fieldName;\r\n                        clientAccountFilter.fieldFriendlyName = clientAccountField.fieldName;\r\n                        clientAccountFilter.isActive = true;\r\n                        clientAccountFilter.predicate = {\r\n                            filterType: ListAndSearchFilterType.Picklist,\r\n                            operator: 'eq',\r\n                            value1: (this.clientAccountCtrl.value as Counterparty).counterpartyCode,\r\n                        };\r\n                        quickFilters.push(clientAccountFilter);\r\n                    }\r\n\r\n                    if (this.currencyCtrl.value && this.currencyCtrl.valid) {\r\n                        const currencyField = this.columnConfiguration.find((column) => column.fieldName === 'Currency');\r\n\r\n                        const currencyFilter = new ListAndSearchFilter();\r\n                        currencyFilter.fieldId = currencyField.fieldId;\r\n                        currencyFilter.fieldName = currencyField.fieldName;\r\n                        currencyFilter.fieldFriendlyName = currencyField.fieldName;\r\n                        currencyFilter.isActive = true;\r\n                        currencyFilter.predicate = {\r\n                            filterType: ListAndSearchFilterType.Picklist,\r\n                            operator: 'eq',\r\n                            value1: (this.currencyCtrl.value as Currency).currencyCode,\r\n                        };\r\n                        quickFilters.push(currencyFilter);\r\n                    }\r\n\r\n                    if (this.clientDepartmentCtrl.value && this.clientDepartmentCtrl.valid) {\r\n                        const departmentField = this.columnConfiguration.find((column) => column.fieldName === 'Department');\r\n\r\n                        const departmentFilter = new ListAndSearchFilter();\r\n                        departmentFilter.fieldId = departmentField.fieldId;\r\n                        departmentFilter.fieldName = departmentField.fieldName;\r\n                        departmentFilter.fieldFriendlyName = departmentField.fieldName;\r\n                        departmentFilter.isActive = true;\r\n                        departmentFilter.predicate = {\r\n                            filterType: ListAndSearchFilterType.Picklist,\r\n                            operator: 'eq',\r\n                            value1: (this.clientDepartmentCtrl.value as Department).departmentCode,\r\n                        };\r\n                        quickFilters.push(departmentFilter);\r\n                    }\r\n\r\n                    if (this.costTypeCtrl.value && this.costTypeCtrl.valid) {\r\n                        const costTypeField = this.columnConfiguration.find((column) => column.fieldName === 'CostType');\r\n\r\n                        const costTypeFilter = new ListAndSearchFilter();\r\n                        costTypeFilter.fieldId = costTypeField.fieldId;\r\n                        costTypeFilter.fieldName = costTypeField.fieldName;\r\n                        costTypeFilter.fieldFriendlyName = costTypeField.fieldName;\r\n                        costTypeFilter.isActive = true;\r\n                        costTypeFilter.predicate = {\r\n                            filterType: ListAndSearchFilterType.Picklist,\r\n                            operator: 'eq',\r\n                            value1: (this.costTypeCtrl.value as CostType).costTypeCode,\r\n                        };\r\n                        quickFilters.push(costTypeFilter);\r\n                    }\r\n                    this.filterSetDisplayComponent.loadFilterSet(quickFilters, true);\r\n                    this.filters = quickFilters;\r\n                }\r\n\r\n                let loadConfig = false;\r\n                this.gridCode = this.clientSummaryGridCode;\r\n                this.allowedColumnsforQuickSum = this.clientSummaryQuickSumColumns;\r\n                if (this.clientSummaryGridConfig.length > 0) {\r\n                    this.columnConfiguration = this.clientSummaryGridConfig;\r\n                } else {\r\n                    loadConfig = true;\r\n                }\r\n\r\n\r\n                if (loadConfig) {\r\n                    this.loadGridConfiguration();\r\n                } else {\r\n                    this.initColumns(this.columnConfiguration);\r\n                }\r\n                this.loadData();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onSelectedButtonChanged(tabIndex: number) {\r\n        switch (tabIndex) {\r\n            case 0: {\r\n                this.overviewComponent.onGenerateReportButtonClicked();\r\n                break;\r\n            }\r\n            case 1: {\r\n                this.detailComponent.onGenerateReportButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        const clientReport = this.getClientReportParameters();\r\n        this.isLoading = true;\r\n        this.isClientReportDisplay = false;\r\n        this.isUserPreferencesDisplay = false;\r\n        this.dataLoader.getData(this.filters, null, null, null, clientReport)\r\n            .pipe(\r\n                first(),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((data) => {\r\n                this.agGridRows = data.value;\r\n                this.saveGridRows = data.value;\r\n                if (this.reportStyleCtrl.value === ReportStyleType.Summary) {\r\n                    this.rowGroupPanelShow = 'never';\r\n                    this.groupMultiAutoColumn = false;\r\n                    this.agGridCols = this.agGridCols.map((col) => {\r\n                        col.rowGroup = false;\r\n                        col.enableRowGroup = false;\r\n                        return col;\r\n                    });\r\n                }\r\n                if (this.reportStyleCtrl.value === ReportStyleType.Transactions) {\r\n                    this.rowGroupPanelShow = 'always';\r\n                    this.groupMultiAutoColumn = true;\r\n                }\r\n                this.isClientReportDisplay = true;\r\n\r\n            });\r\n    }\r\n\r\n    getClientReportParameters() {\r\n        const clientReport = new TransactionReportCommand();\r\n        clientReport.accuralsIncluded = this.accrualsIncludedCtrl.value !== '' ? this.accrualsIncludedCtrl.value : null;\r\n        clientReport.functionalCurrency = this.functionalCurrencyCtrl.value !== '' ?\r\n            this.functionalCurrencyCtrl.value : null;\r\n        clientReport.balanceType = this.balancesCtrl.value !== null ? this.balancesCtrl.value : null;\r\n        clientReport.fromDate = this.clientDateFromCtrl.value !== null ? this.clientDateFromCtrl.value : null;\r\n        clientReport.toDate = this.clientDateToCtrl.value !== null ? this.clientDateToCtrl.value : null;\r\n        clientReport.matchingType = this.matchingCtrl.value !== null ? this.matchingCtrl.value : null;\r\n        clientReport.unmatchedType = this.unmatchedCtrl.value !== null ? this.unmatchedCtrl.value : null;\r\n        clientReport.reportStyleType = this.reportStyleCtrl.value !== null ? this.reportStyleCtrl.value : null;\r\n        return clientReport;\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.clientSummaryGridConfig = configuration.columns;\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser; // should handle this seperatly for both grids\r\n\r\n                this.gridPreferences = new UserGridPreferencesParameters(\r\n                    {\r\n                        company: this.company,\r\n                        gridId: this.gridCode,\r\n                        gridOptions: this.agGridOptions,\r\n                        sharingEnabled: this.hasGridSharing,\r\n                        hasCustomExport: true,\r\n\r\n                    });\r\n            });\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(this.utilService.convertToCamelCase(column.fieldName));\r\n            }\r\n        });\r\n        this.agGridCols = configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                width: 100,\r\n                hide: !config.isVisible,\r\n                rowGroup: config.isGroup,\r\n                enableRowGroup: config.isGroup,\r\n            };\r\n            if (columnDef.field === 'functionalCurrency' ||\r\n                columnDef.field === 'statutoryCcyAmount' || columnDef.field === 'transactionalCurrency') {\r\n                columnDef.aggFunc = 'sum';\r\n                columnDef.headerName = config.friendlyName;\r\n                if (this.reportStyleCtrl.value === ReportStyleType.Transactions) {\r\n                    this.clientTransactionQuickSumColumns.push(this.utilService.convertToCamelCase(config.fieldName));\r\n                } else {\r\n                    this.clientSummaryQuickSumColumns.push(this.utilService.convertToCamelCase(config.fieldName));\r\n                }\r\n            }\r\n\r\n            const formatter = this.uiService.getFormattterForTypeClientReport(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            if (columnDef.headerName === 'Functional Currency') {\r\n                columnDef.headerName = this.checkFunctionalCurrency + ' eq';\r\n            }\r\n            if (columnDef.headerName === 'Statutory Ccy Amount') {\r\n                columnDef.headerName = this.checkStatutoryCurrency + ' eq';\r\n            }\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field);\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n            return columnDef;\r\n        });\r\n\r\n        if (this.agGridOptions) {\r\n            this.agGridOptions.columnDefs = this.agGridCols;\r\n            if (this.agGridOptions.api) {\r\n                this.agGridOptions.api.setColumnDefs(this.agGridCols);\r\n                this.agGridColumnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n\r\n    }\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n    numberFormatter(param) {\r\n        if (param.colDef.colId.toLowerCase() === 'transactionalcurrency' ||\r\n            param.colDef.colId.toLowerCase() === 'functionalcurrency' || param.colDef.colId.toLowerCase() === 'statutoryccyamount'\r\n            || param.colDef.colId.toLowerCase() === 'weight') {\r\n            if (param && param.value) {\r\n                const commonMethods = new CommonMethods();\r\n                if (param.colDef.colId.toLowerCase() === 'weight') {\r\n                    return commonMethods.getFormattedNumberValue(param.value, 3);\r\n                } else {\r\n                    return commonMethods.getFormattedNumberValue(param.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onMonthChanged() {\r\n        this.clientDateToCtrl.markAsTouched();\r\n        this.clientDateFromCtrl.updateValueAndValidity();\r\n        this.clientDateToCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    // -- Quick Sum\r\n\r\n    toggleQuickSum(value: boolean) {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = value;\r\n        if (this.quickSumModeActivated) {\r\n            this.classApplied = this.cellSelectionClass;\r\n        } else {\r\n            this.classApplied = this.defaultClass;\r\n        }\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.agGridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n    onRangeSelectionChanged(event) {\r\n        this.selectedColumnsArray = [];\r\n\r\n        const rangeSelections = this.agGridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        // if there is only one column selected\r\n        if (rangeSelections && rangeSelections.length === 1) {\r\n            this.rangeSelectionCalculation(rangeSelections[0]);\r\n        } else {\r\n            const cellInfos: any = [];\r\n            const selectedCells: any = [];\r\n            rangeSelections.forEach((row) => {\r\n                const cellExists = selectedCells.find((cell) => cell.start.rowIndex === row.start.rowIndex &&\r\n                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId());\r\n                if (cellExists === null || cellExists === undefined) {\r\n                    selectedCells.push(row);\r\n\r\n                    const obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };\r\n                    cellInfos.push(obj);\r\n                }\r\n            });\r\n\r\n            let sum = 0;\r\n            let columnName: string;\r\n            let columnHeader: string;\r\n            const selectedColumnsArray = this.selectedColumnsArray;\r\n            const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n\r\n            selectedCells.forEach((row) => {\r\n                row.columns.forEach((column) => {\r\n                    sum = 0;\r\n                    columnName = column.getColDef().colId;\r\n                    columnHeader = column.getColDef().headerName;\r\n                    if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                        for (let rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {\r\n                            if (cellInfos[rowIndex].columnName === columnName) {\r\n                                const rowModel = this.agGridApi.getModel();\r\n                                const rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));\r\n                                const value = this.agGridApi.getValue(column, rowNode);\r\n                                sum += Number(value);\r\n                            }\r\n                        }\r\n\r\n                        const columnObj = selectedColumnsArray.find((sum) => sum.name === columnHeader);\r\n                        if (columnObj) {\r\n                            columnObj.sum = sum;\r\n                        } else {\r\n                            selectedColumnsArray.push({ name: columnHeader, sum });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            this.selectedColumnsArray = selectedColumnsArray;\r\n        }\r\n    }\r\n\r\n    rangeSelectionCalculation(rangeSelection: agGrid.RangeSelection) {\r\n        let sum = 0;\r\n        let columnName: string;\r\n        let columnHeader: string;\r\n        this.selectedColumnsArray = [];\r\n\r\n        const startRow = Math.min(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n        const endRow = Math.max(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n\r\n        const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n        rangeSelection.columns.forEach((column) => {\r\n            columnName = column.getColDef().colId;\r\n            columnHeader = column.getColDef().headerName;\r\n            if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = this.agGridApi.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = this.agGridApi.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n\r\n                this.selectedColumnsArray.push({ name: columnHeader, sum });\r\n            }\r\n        });\r\n    }\r\n\r\n    onExportButtonClickToExcel() {\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + this.gridCode + '_' + this.userActiveDirectoryName + '.xlsx',\r\n            columnGroups: false,\r\n        };\r\n        this.agGridRows = this.saveGridRows;\r\n        this.rowGroupPanelShow = 'never';\r\n        this.groupMultiAutoColumn = false;\r\n        const columngroup: agGrid.ColDef[] = this.agGridCols.filter((column) =>\r\n            column.rowGroup === true);\r\n        this.agGridCols.forEach((column) =>\r\n            columngroup.forEach((columnrow) => {\r\n                if (column.colId === columnrow.colId) {\r\n                    this.agGridOptions.columnApi.removeRowGroupColumn(columnrow.field);\r\n                }\r\n            }));\r\n\r\n        if (this.agGridApi) {\r\n            this.agGridApi.refreshCells({\r\n                force: true,\r\n            });\r\n        }\r\n        this.agGridOptions.api.exportDataAsExcel(params);\r\n        this.rowGroupPanelShow = 'always';\r\n        this.groupMultiAutoColumn = true;\r\n        this.agGridCols.forEach((column) =>\r\n            columngroup.forEach((columnrow) => {\r\n                if (column.colId === columnrow.colId) {\r\n                    this.agGridOptions.columnApi.addRowGroupColumn(columnrow.field);\r\n                }\r\n            }));\r\n        this.agGridColumnApi.resetColumnGroupState();\r\n    }\r\n\r\n    onGridViewSelected(gridViewId: number) {\r\n        this.gridPreferences.selectedGridViewId = gridViewId;\r\n        // this is to trigger the input setter in the enlarged grid child\r\n        this.gridPreferences = new UserGridPreferencesParameters(this.gridPreferences);\r\n    }\r\n\r\n    onGridEnlargementClose(lastUsedGridView: UserGridViewDto) {\r\n        if (lastUsedGridView && lastUsedGridView.gridViewId) {\r\n            this.userPreferencesComponent.loadGridView(lastUsedGridView.gridViewId, false);\r\n        }\r\n    }\r\n\r\n    onSelectedIndexChanged(value: number) {\r\n        this.tabIndex = value;\r\n        if (this.isGenerateButtonClicked && !this.isSummaryMode) {\r\n            this.onSelectedButtonChanged(this.tabIndex);\r\n        }\r\n    }\r\n    optionValueChanged(event) {\r\n        if (event.value === ReportStyleType.Summary) {\r\n            this.isSummaryMode = true;\r\n            this.clientAccountCtrl.reset();\r\n            this.costTypeCtrl.reset();\r\n            this.currencyCtrl.reset();\r\n            this.clientDepartmentCtrl.reset();\r\n        }\r\n        else {\r\n            this.isSummaryMode = false;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div *ngIf=\\\"isDetailMode\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"agGridOptions && agGridOptions.columnDefs && isClientReportDisplay\\\"\\r\\n                                            [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [isAutosize]=\\\"false\\\"\\r\\n                                            [isSetColumnStateEnabled]=\\\"false\\\"\\r\\n                                            fxLayoutAlign=\\\"end\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 *ngIf='isClientReportDisplay'\\r\\n                 class=\\\"quick-sum-div-height\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleQuickSum($event.checked)\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                    <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                        <span class=\\\"quick-sum-span\\\"\\r\\n                              *ngIf=\\\"quickSumModeActivated\\\">{{column.name}} : {{column.sum | number }} </span>\\r\\n                    </div>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                            class=\\\"mat-button-user-margin\\\"\\r\\n                            *ngIf=\\\"quickSumModeActivated\\\">Clear Selection</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <atlas-filter-set-display #filterSetDisplay\\r\\n                                      [hidden]=\\\"true\\\"></atlas-filter-set-display>\\r\\n            <div ag-grid=\\\"agGridOptions\\\"\\r\\n                 [ngClass]='classApplied'\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 [ngClass]=\\\"{'hidden-during-loading':!isClientReportDisplay}\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"agGridRows\\\"\\r\\n                                 [columnDefs]=\\\"agGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"100\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [enableRangeSelection]=\\\"true\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnDestroy, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize, first } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FilterSetDisplayComponent } from '../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { Department } from '../../../../../../../shared/entities/department.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../../../../../shared/entities/window-injection-token';\r\nimport { ListAndSearchFilterType } from '../../../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { ReportStyleType } from '../../../../../../../shared/enums/report-style-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { TransactionReportCommand } from '../../../../../../../shared/services/execution/dtos/transaction-report-command';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ClientReportDataLoader } from '../../../../../../../shared/services/list-and-search/clientReport-data-loader';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { Currency } from '../../../../../../../shared/entities/currency.entity';\r\nimport { CostType } from '../../../../../../../shared/entities/cost-type.entity';\r\nimport { ClientReportComponent } from '../../client-report.component';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-detail',\r\n    templateUrl: './detail.component.html',\r\n    styleUrls: ['./detail.component.scss']\r\n})\r\nexport class DetailComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplay') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n\r\n    gridContext: ClientReportComponent;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridRows: any[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = false;\r\n    gridCode = 'clientReportTransactionGrid';\r\n    gridTitle: string;\r\n    excelStyles: any;\r\n    isUserPreferencesDisplay: boolean = false;\r\n    isClientReportDisplay: boolean = false;\r\n    checkFunctionalCurrency: string;\r\n    checkStatutoryCurrency: string;\r\n\r\n    @Input() clientDateFromCtrl = new AtlasFormControl('clientDateFrom');\r\n    @Input() clientDateToCtrl = new AtlasFormControl('clientDateTo');\r\n    @Input() clientReportFormGroup: FormGroup;\r\n    @Input() balancesCtrl = new AtlasFormControl('balances');\r\n    @Input() reportStyleCtrl = new AtlasFormControl('reportsStyle');\r\n    @Input() matchingCtrl = new AtlasFormControl('matchings');\r\n    @Input() unmatchedCtrl = new AtlasFormControl('unmatcheds');\r\n    @Input() functionalCurrencyCtrl = new AtlasFormControl('clientFunctionalCurrency');\r\n    @Input() accrualsIncludedCtrl = new AtlasFormControl('clientAccrualsIncluded');\r\n    @Input() clientAccountCtrl = new AtlasFormControl('clientAccount');\r\n    @Input() currencyCtrl = new AtlasFormControl('currency');\r\n    @Input() clientDepartmentCtrl = new AtlasFormControl('clientDepartment');\r\n    @Input() costTypeCtrl = new AtlasFormControl('costType');\r\n\r\n    company: string;\r\n    filters: ListAndSearchFilter[] = [];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    subscriptions: Subscription[] = [];\r\n    hasGridSharing: boolean;\r\n    companyConfiguration: Company;\r\n    ReportStyleType = ReportStyleType;\r\n    tabIndex: number;\r\n    masterData: MasterData;\r\n    isDetailMode: boolean = true;\r\n\r\n    // -- Evolutions to handle correctly GridViews\r\n    clientTransactionGridCode: string = 'clientReportTransactionGrid';\r\n    clientTransactionGridConfig: ColumnConfigurationProperties[] = [];\r\n    clientTransactionQuickSumColumns: string[] = [];\r\n\r\n    clientSummaryGridCode: string = 'clientReportSummaryGrid';\r\n    clientSummaryGridConfig: ColumnConfigurationProperties[] = [];\r\n    clientSummaryQuickSumColumns: string[] = [];\r\n\r\n    // this is to resolve an issue on first filter change call. Search for A001\r\n    filtersLoadedForReport: boolean = false;\r\n\r\n    /* quick sum */\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    allowedColumnsforQuickSum: string[] = [];\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: ClientReportDataLoader,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService, ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.checkFunctionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.checkStatutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n        this.loadGridConfiguration();\r\n\r\n        // quicksum\r\n        this.classApplied = this.defaultClass;\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        if (this.clientReportFormGroup.valid) {\r\n            this.toggleQuickSum(false);\r\n            const hasQuickSearchValues = (this.clientAccountCtrl.value && this.clientAccountCtrl.valid)\r\n                || (this.currencyCtrl.value && this.currencyCtrl.valid)\r\n                || (this.clientDepartmentCtrl.value && this.clientDepartmentCtrl.valid)\r\n                || (this.costTypeCtrl.value && this.costTypeCtrl.valid);\r\n\r\n            if (hasQuickSearchValues) {\r\n                const quickFilters: ListAndSearchFilter[] = [];\r\n                if (this.clientAccountCtrl.value && this.clientAccountCtrl.valid) {\r\n                    const clientAccountField = this.columnConfiguration.find((column) => column.fieldName === 'ClientAccount');\r\n\r\n                    const clientAccountFilter = new ListAndSearchFilter();\r\n                    clientAccountFilter.fieldId = clientAccountField.fieldId;\r\n                    clientAccountFilter.fieldName = clientAccountField.fieldName;\r\n                    clientAccountFilter.isActive = true;\r\n                    clientAccountFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.clientAccountCtrl.value as Counterparty).counterpartyCode,\r\n                    };\r\n                    quickFilters.push(clientAccountFilter);\r\n                }\r\n\r\n                if (this.currencyCtrl.value && this.currencyCtrl.valid) {\r\n                    const currencyField = this.columnConfiguration.find((column) => column.fieldName === 'Currency');\r\n\r\n                    const currencyFilter = new ListAndSearchFilter();\r\n                    currencyFilter.fieldId = currencyField.fieldId;\r\n                    currencyFilter.fieldName = currencyField.fieldName;\r\n                    currencyFilter.isActive = true;\r\n                    currencyFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.currencyCtrl.value as Currency).currencyCode,\r\n                    };\r\n                    quickFilters.push(currencyFilter);\r\n                }\r\n\r\n                if (this.clientDepartmentCtrl.value && this.clientDepartmentCtrl.valid) {\r\n                    const departmentField = this.columnConfiguration.find((column) => column.fieldName === 'Department');\r\n\r\n                    const departmentFilter = new ListAndSearchFilter();\r\n                    departmentFilter.fieldId = departmentField.fieldId;\r\n                    departmentFilter.fieldName = departmentField.fieldName;\r\n                    departmentFilter.isActive = true;\r\n                    departmentFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.clientDepartmentCtrl.value as Department).departmentCode,\r\n                    };\r\n                    quickFilters.push(departmentFilter);\r\n                }\r\n\r\n                if (this.costTypeCtrl.value && this.costTypeCtrl.valid) {\r\n                    const costTypeField = this.columnConfiguration.find((column) => column.fieldName === 'CostType');\r\n\r\n                    const costTypeFilter = new ListAndSearchFilter();\r\n                    costTypeFilter.fieldId = costTypeField.fieldId;\r\n                    costTypeFilter.fieldName = costTypeField.fieldName;\r\n                    costTypeFilter.isActive = true;\r\n                    costTypeFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.costTypeCtrl.value as CostType).costTypeCode,\r\n                    };\r\n                    quickFilters.push(costTypeFilter);\r\n                }\r\n                this.filterSetDisplayComponent.loadFilterSet(quickFilters, true);\r\n                this.filters = quickFilters;\r\n            }\r\n\r\n            let loadConfig = false;\r\n\r\n            this.gridCode = this.clientTransactionGridCode;\r\n            this.allowedColumnsforQuickSum = this.clientTransactionQuickSumColumns;\r\n            if (this.clientSummaryGridConfig.length > 0) {\r\n                this.columnConfiguration = this.clientTransactionGridConfig;\r\n            } else {\r\n                loadConfig = true;\r\n            }\r\n\r\n            if (loadConfig) {\r\n                this.loadGridConfiguration();\r\n            } else {\r\n                this.initColumns(this.columnConfiguration);\r\n            }\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        const clientReport = this.getClientReportParameters();\r\n        this.isLoading = true;\r\n        this.isClientReportDisplay = false;\r\n        this.isUserPreferencesDisplay = false;\r\n        this.dataLoader.getData(this.filters, null, null, null, clientReport)\r\n            .pipe(\r\n                first(),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((data) => {\r\n                this.agGridRows = data.value;\r\n                this.isClientReportDisplay = true;\r\n\r\n            });\r\n    }\r\n\r\n    getClientReportParameters() {\r\n        const clientReport = new TransactionReportCommand();\r\n        clientReport.accuralsIncluded = this.accrualsIncludedCtrl.value !== '' ? this.accrualsIncludedCtrl.value : null;\r\n        clientReport.functionalCurrency = this.reportStyleCtrl.value === ReportStyleType.Summary\r\n            && this.functionalCurrencyCtrl.value !== '' ?\r\n            this.functionalCurrencyCtrl.value : null;\r\n        clientReport.balanceType = this.balancesCtrl.value !== null ? this.balancesCtrl.value : null;\r\n        clientReport.fromDate = this.clientDateFromCtrl.value !== null ? this.clientDateFromCtrl.value : null;\r\n        clientReport.toDate = this.clientDateToCtrl.value !== null ? this.clientDateToCtrl.value : null;\r\n        clientReport.matchingType = this.matchingCtrl.value !== null ? this.matchingCtrl.value : null;\r\n        clientReport.unmatchedType = this.unmatchedCtrl.value !== null ? this.unmatchedCtrl.value : null;\r\n        clientReport.reportStyleType = this.reportStyleCtrl.value !== null ? this.reportStyleCtrl.value : null;\r\n        return clientReport;\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n\r\n                this.clientTransactionGridConfig = configuration.columns;\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser; // should handle this seperatly for both grids\r\n            });\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.agGridCols = configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                width: 100,\r\n                hide: !config.isVisible,\r\n                rowGroup: false,\r\n                enableRowGroup: false,\r\n            };\r\n            if (columnDef.field === 'functionalCurrency' ||\r\n                columnDef.field === 'statutoryCcyAmount' || columnDef.field === 'transactionalCurrency') {\r\n                columnDef.aggFunc = 'sum';\r\n                columnDef.headerName = config.friendlyName;\r\n                if (this.reportStyleCtrl.value === ReportStyleType.Transactions) {\r\n                    this.clientTransactionQuickSumColumns.push(columnDef.field.toLocaleLowerCase());\r\n                }\r\n                else {\r\n                    this.clientSummaryQuickSumColumns.push(columnDef.field.toLocaleLowerCase());\r\n                }\r\n            }\r\n\r\n            const formatter = this.uiService.getFormattterForTypeClientReport(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            // if (this.gridCode === 'clientReportTransactionGrid') {\r\n            if (columnDef.headerName === 'Functional Currency') {\r\n                columnDef.headerName = this.checkFunctionalCurrency + ' eq';\r\n            }\r\n            if (columnDef.headerName === 'Statutory Ccy Amount') {\r\n                columnDef.headerName = this.checkStatutoryCurrency + ' eq';\r\n            }\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n            // }\r\n            return columnDef;\r\n        });\r\n\r\n        if (this.agGridOptions) {\r\n            this.agGridOptions.columnDefs = this.agGridCols;\r\n            if (this.agGridOptions.api) {\r\n                this.agGridOptions.api.setColumnDefs(this.agGridCols);\r\n                this.agGridColumnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n\r\n    }\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n    numberFormatter(param) {\r\n        if (param.colDef.colId.toLowerCase() === 'transactionalcurrency' ||\r\n            param.colDef.colId.toLowerCase() === 'functionalcurrency' || param.colDef.colId.toLowerCase() === 'statutoryccyamount'\r\n            || param.colDef.colId.toLowerCase() === 'weight') {\r\n            if (param && param.value) {\r\n                const commonMethods = new CommonMethods();\r\n                if (param.colDef.colId.toLowerCase() === 'weight') {\r\n                    return commonMethods.getFormattedNumberValue(param.value, 3);\r\n                }\r\n                else {\r\n                    return commonMethods.getFormattedNumberValue(param.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    // -- Quick Sum\r\n\r\n    toggleQuickSum(value: boolean) {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = value;\r\n        if (this.quickSumModeActivated) {\r\n            this.classApplied = this.cellSelectionClass;\r\n        } else {\r\n            this.classApplied = this.defaultClass;\r\n        }\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.agGridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n    onRangeSelectionChanged(event) {\r\n        this.selectedColumnsArray = [];\r\n\r\n        const rangeSelections = this.agGridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        // if there is only one column selected\r\n        if (rangeSelections && rangeSelections.length === 1) {\r\n            this.rangeSelectionCalculation(rangeSelections[0]);\r\n        } else {\r\n            const cellInfos: any = [];\r\n            const selectedCells: any = [];\r\n            rangeSelections.forEach((row) => {\r\n                const cellExists = selectedCells.find((cell) => cell.start.rowIndex === row.start.rowIndex &&\r\n                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId());\r\n                if (cellExists === null || cellExists === undefined) {\r\n                    selectedCells.push(row);\r\n\r\n                    const obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };\r\n                    cellInfos.push(obj);\r\n                }\r\n            });\r\n\r\n            let sum = 0;\r\n            let columnName: string;\r\n            let columnHeader: string;\r\n            const selectedColumnsArray = this.selectedColumnsArray;\r\n            const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n\r\n            selectedCells.forEach((row) => {\r\n                row.columns.forEach((column) => {\r\n                    sum = 0;\r\n                    columnName = column.getColDef().colId.toLowerCase();\r\n                    columnHeader = column.getColDef().headerName;\r\n                    if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                        for (let rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {\r\n                            if (cellInfos[rowIndex].columnName.toLowerCase() === columnName) {\r\n                                const rowModel = this.agGridApi.getModel();\r\n                                const rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));\r\n                                const value = this.agGridApi.getValue(column, rowNode);\r\n                                sum += Number(value);\r\n                            }\r\n                        }\r\n\r\n                        const columnObj = selectedColumnsArray.find((sum) => sum.name === columnHeader);\r\n                        if (columnObj) {\r\n                            columnObj.sum = sum;\r\n                        } else {\r\n                            selectedColumnsArray.push({ name: columnHeader, sum });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            this.selectedColumnsArray = selectedColumnsArray;\r\n        }\r\n    }\r\n\r\n    rangeSelectionCalculation(rangeSelection: agGrid.RangeSelection) {\r\n        let sum = 0;\r\n        let columnName: string;\r\n        let columnHeader: string;\r\n        this.selectedColumnsArray = [];\r\n\r\n        const startRow = Math.min(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n        const endRow = Math.max(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n\r\n        const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n        rangeSelection.columns.forEach((column) => {\r\n            columnName = column.getColDef().colId.toLowerCase();\r\n            columnHeader = column.getColDef().headerName;\r\n            if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = this.agGridApi.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = this.agGridApi.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n                this.selectedColumnsArray.push({ name: columnHeader, sum });\r\n            }\r\n        });\r\n    }\r\n}","module.exports = \"<div *ngIf=\\\"isOverviewMode\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"agGridOptions && agGridOptions.columnDefs && isClientReportDisplay\\\"\\r\\n                                            [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [isAutosize]=\\\"false\\\"\\r\\n                                            fxLayoutAlign=\\\"end\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 *ngIf='isClientReportDisplay'\\r\\n                 class=\\\"quick-sum-div-height\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleQuickSum($event.checked)\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                    <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                        <span class=\\\"quick-sum-span\\\"\\r\\n                              *ngIf=\\\"quickSumModeActivated\\\">{{column.name}} : {{column.sum | number }} </span>\\r\\n                    </div>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                            class=\\\"mat-button-user-margin\\\"\\r\\n                            *ngIf=\\\"quickSumModeActivated\\\">Clear Selection</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <atlas-filter-set-display #filterSetDisplay\\r\\n                                      [hidden]=\\\"true\\\"></atlas-filter-set-display>\\r\\n            <div ag-grid=\\\"agGridOptions\\\"\\r\\n                 [ngClass]='classApplied'\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 [ngClass]=\\\"{'hidden-during-loading':!isClientReportDisplay}\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"agGridRows\\\"\\r\\n                                 [columnDefs]=\\\"agGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"100\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [enableRangeSelection]=\\\"true\\\"\\r\\n                                 [groupMultiAutoColumn]=\\\"groupMultiAutoColumn\\\"\\r\\n                                 [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnDestroy, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize, first } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FilterSetDisplayComponent } from '../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { AccountingSetup } from '../../../../../../../shared/entities/accounting-setup.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { BalancesTypes } from '../../../../../../../shared/entities/balances-type-entity';\r\nimport { Company } from '../../../../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../../../../shared/entities/counterparty.entity';\r\nimport { Department } from '../../../../../../../shared/entities/department.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { MatchingTypes } from '../../../../../../../shared/entities/matchings-type-entity';\r\nimport { ReportStyleTypes } from '../../../../../../../shared/entities/report-style-type-entity';\r\nimport { UnmatchedTypes } from '../../../../../../../shared/entities/unmatched-type-entity';\r\nimport { WINDOW } from '../../../../../../../shared/entities/window-injection-token';\r\nimport { ListAndSearchFilterType } from '../../../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { ReportStyleType } from '../../../../../../../shared/enums/report-style-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { TransactionReportCommand } from '../../../../../../../shared/services/execution/dtos/transaction-report-command';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ClientReportDataLoader } from '../../../../../../../shared/services/list-and-search/clientReport-data-loader';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { Currency } from '../../../../../../../shared/entities/currency.entity';\r\nimport { CostType } from '../../../../../../../shared/entities/cost-type.entity';\r\nimport { ClientReportComponent } from '../../client-report.component';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-overview',\r\n    templateUrl: './overview.component.html',\r\n    styleUrls: ['./overview.component.scss']\r\n})\r\nexport class OverviewComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplay') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n\r\n    gridContext: ClientReportComponent;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridRows: any[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = false;\r\n    gridCode = 'clientReportTransactionGrid';\r\n    gridTitle: string;\r\n    excelStyles: any;\r\n    isUserPreferencesDisplay: boolean = false;\r\n    isClientReportDisplay: boolean = false;\r\n    rowGroupPanelShow: string;\r\n    groupMultiAutoColumn: boolean;\r\n    checkFunctionalCurrency: string;\r\n    checkStatutoryCurrency: string;\r\n    isOverviewMode: boolean = true;\r\n\r\n    @Input() clientDateFromCtrl = new AtlasFormControl('clientDateFrom');\r\n    @Input() clientDateToCtrl = new AtlasFormControl('clientDateTo');\r\n    @Input() clientReportFormGroup: FormGroup;\r\n    @Input() balancesCtrl = new AtlasFormControl('balances');\r\n    @Input() reportStyleCtrl = new AtlasFormControl('reportsStyle');\r\n    @Input() matchingCtrl = new AtlasFormControl('matchings');\r\n    @Input() unmatchedCtrl = new AtlasFormControl('unmatcheds');\r\n    @Input() functionalCurrencyCtrl = new AtlasFormControl('clientFunctionalCurrency');\r\n    @Input() accrualsIncludedCtrl = new AtlasFormControl('clientAccrualsIncluded');\r\n    @Input() clientAccountCtrl = new AtlasFormControl('clientAccount');\r\n    @Input() currencyCtrl = new AtlasFormControl('currency');\r\n    @Input() clientDepartmentCtrl = new AtlasFormControl('clientDepartment');\r\n    @Input() costTypeCtrl = new AtlasFormControl('costType');\r\n    @Input() isTabEnalble: boolean;\r\n\r\n    company: string;\r\n    filters: ListAndSearchFilter[] = [];\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    subscriptions: Subscription[] = [];\r\n    hasGridSharing: boolean;\r\n    companyConfiguration: Company;\r\n    ReportStyleType = ReportStyleType;\r\n    tabIndex: number;\r\n    masterData: MasterData;\r\n\r\n    // -- Evolutions to handle correctly GridViews\r\n    clientTransactionGridCode: string = 'clientReportTransactionGrid';\r\n    clientTransactionGridConfig: ColumnConfigurationProperties[] = [];\r\n    clientTransactionQuickSumColumns: string[] = [];\r\n\r\n    clientSummaryGridCode: string = 'clientReportSummaryGrid';\r\n    clientSummaryGridConfig: ColumnConfigurationProperties[] = [];\r\n    clientSummaryQuickSumColumns: string[] = [];\r\n\r\n    // this is to resolve an issue on first filter change call. Search for A001\r\n    filtersLoadedForReport: boolean = false;\r\n\r\n    /* quick sum */\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    allowedColumnsforQuickSum: string[] = [];\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: ClientReportDataLoader,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private utilService: UtilService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService, ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.checkFunctionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.checkStatutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n        this.loadGridConfiguration();\r\n\r\n        // quicksum\r\n        this.classApplied = this.defaultClass;\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        if (this.clientReportFormGroup.valid) {\r\n            this.toggleQuickSum(false);\r\n            const hasQuickSearchValues = (this.clientAccountCtrl.value && this.clientAccountCtrl.valid)\r\n                || (this.currencyCtrl.value && this.currencyCtrl.valid)\r\n                || (this.clientDepartmentCtrl.value && this.clientDepartmentCtrl.valid)\r\n                || (this.costTypeCtrl.value && this.costTypeCtrl.valid);\r\n\r\n            if (hasQuickSearchValues) {\r\n                const quickFilters: ListAndSearchFilter[] = [];\r\n                if (this.clientAccountCtrl.value && this.clientAccountCtrl.valid) {\r\n                    const clientAccountField = this.columnConfiguration.find((column) => column.fieldName === 'ClientAccount');\r\n\r\n                    const clientAccountFilter = new ListAndSearchFilter();\r\n                    clientAccountFilter.fieldId = clientAccountField.fieldId;\r\n                    clientAccountFilter.fieldName = clientAccountField.fieldName;\r\n                    clientAccountFilter.isActive = true;\r\n                    clientAccountFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.clientAccountCtrl.value as Counterparty).counterpartyCode,\r\n                    };\r\n                    quickFilters.push(clientAccountFilter);\r\n                }\r\n\r\n                if (this.currencyCtrl.value && this.currencyCtrl.valid) {\r\n                    const currencyField = this.columnConfiguration.find((column) => column.fieldName === 'Currency');\r\n\r\n                    const currencyFilter = new ListAndSearchFilter();\r\n                    currencyFilter.fieldId = currencyField.fieldId;\r\n                    currencyFilter.fieldName = currencyField.fieldName;\r\n                    currencyFilter.isActive = true;\r\n                    currencyFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.currencyCtrl.value as Currency).currencyCode,\r\n                    };\r\n                    quickFilters.push(currencyFilter);\r\n                }\r\n\r\n                if (this.clientDepartmentCtrl.value && this.clientDepartmentCtrl.valid) {\r\n                    const departmentField = this.columnConfiguration.find((column) => column.fieldName === 'Department');\r\n\r\n                    const departmentFilter = new ListAndSearchFilter();\r\n                    departmentFilter.fieldId = departmentField.fieldId;\r\n                    departmentFilter.fieldName = departmentField.fieldName;\r\n                    departmentFilter.isActive = true;\r\n                    departmentFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.clientDepartmentCtrl.value as Department).departmentCode,\r\n                    };\r\n                    quickFilters.push(departmentFilter);\r\n                }\r\n\r\n                if (this.costTypeCtrl.value && this.costTypeCtrl.valid) {\r\n                    const costTypeField = this.columnConfiguration.find((column) => column.fieldName === 'CostType');\r\n\r\n                    const costTypeFilter = new ListAndSearchFilter();\r\n                    costTypeFilter.fieldId = costTypeField.fieldId;\r\n                    costTypeFilter.fieldName = costTypeField.fieldName;\r\n                    costTypeFilter.isActive = true;\r\n                    costTypeFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.costTypeCtrl.value as CostType).costTypeCode,\r\n                    };\r\n                    quickFilters.push(costTypeFilter);\r\n                }\r\n                this.filterSetDisplayComponent.loadFilterSet(quickFilters, true);\r\n                this.filters = quickFilters;\r\n            }\r\n\r\n            let loadConfig = false;\r\n\r\n            this.gridCode = this.clientTransactionGridCode;\r\n            this.allowedColumnsforQuickSum = this.clientTransactionQuickSumColumns;\r\n            if (this.clientSummaryGridConfig.length > 0) {\r\n                this.columnConfiguration = this.clientTransactionGridConfig;\r\n            } else {\r\n                loadConfig = true;\r\n            }\r\n\r\n            if (loadConfig) {\r\n                this.loadGridConfiguration();\r\n            } else {\r\n                this.initColumns(this.columnConfiguration);\r\n            }\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        const clientReport = this.getClientReportParameters();\r\n        this.isLoading = true;\r\n        this.isClientReportDisplay = false;\r\n        this.isUserPreferencesDisplay = false;\r\n        this.dataLoader.getData(this.filters, null, null, null, clientReport)\r\n            .pipe(\r\n                first(),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((data) => {\r\n                this.agGridRows = data.value;\r\n                if (this.reportStyleCtrl.value === ReportStyleType.Transactions) {\r\n                    this.rowGroupPanelShow = 'always';\r\n                    this.groupMultiAutoColumn = true;\r\n                }\r\n                this.isClientReportDisplay = true;\r\n\r\n            });\r\n    }\r\n\r\n    getClientReportParameters() {\r\n        const clientReport = new TransactionReportCommand();\r\n        clientReport.accuralsIncluded = this.accrualsIncludedCtrl.value !== '' ? this.accrualsIncludedCtrl.value : null;\r\n        clientReport.functionalCurrency = this.reportStyleCtrl.value === ReportStyleType.Summary\r\n            && this.functionalCurrencyCtrl.value !== '' ?\r\n            this.functionalCurrencyCtrl.value : null;\r\n        clientReport.balanceType = this.balancesCtrl.value !== null ? this.balancesCtrl.value : null;\r\n        clientReport.fromDate = this.clientDateFromCtrl.value !== null ? this.clientDateFromCtrl.value : null;\r\n        clientReport.toDate = this.clientDateToCtrl.value !== null ? this.clientDateToCtrl.value : null;\r\n        clientReport.matchingType = this.matchingCtrl.value !== null ? this.matchingCtrl.value : null;\r\n        clientReport.unmatchedType = this.unmatchedCtrl.value !== null ? this.unmatchedCtrl.value : null;\r\n        clientReport.reportStyleType = this.reportStyleCtrl.value !== null ? this.reportStyleCtrl.value : null;\r\n        return clientReport;\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n\r\n                this.clientTransactionGridConfig = configuration.columns;\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns(this.columnConfiguration);\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser; // should handle this seperatly for both grids\r\n            });\r\n    }\r\n\r\n    initColumns(configuration: ColumnConfigurationProperties[]) {\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.agGridCols = configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                width: 100,\r\n                hide: !config.isVisible,\r\n                rowGroup: config.isGroup,\r\n                enableRowGroup: config.isGroup,\r\n            };\r\n            if (columnDef.field === 'functionalCurrency' ||\r\n                columnDef.field === 'statutoryCcyAmount' || columnDef.field === 'transactionalCurrency') {\r\n                columnDef.aggFunc = 'sum';\r\n                columnDef.headerName = config.friendlyName;\r\n                if (this.reportStyleCtrl.value === ReportStyleType.Transactions) {\r\n                    this.clientTransactionQuickSumColumns.push(columnDef.field.toLocaleLowerCase());\r\n                }\r\n                else {\r\n                    this.clientSummaryQuickSumColumns.push(columnDef.field.toLocaleLowerCase());\r\n                }\r\n            }\r\n\r\n            const formatter = this.uiService.getFormattterForTypeClientReport(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            // if (this.gridCode === 'clientReportTransactionGrid') {\r\n            if (columnDef.headerName === 'Functional Currency') {\r\n                columnDef.headerName = this.checkFunctionalCurrency + ' eq';\r\n            }\r\n            if (columnDef.headerName === 'Statutory Ccy Amount') {\r\n                columnDef.headerName = this.checkStatutoryCurrency + ' eq';\r\n            }\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n            // }\r\n            return columnDef;\r\n        });\r\n\r\n        if (this.agGridOptions) {\r\n            this.agGridOptions.columnDefs = this.agGridCols;\r\n            if (this.agGridOptions.api) {\r\n                this.agGridOptions.api.setColumnDefs(this.agGridCols);\r\n                this.agGridColumnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n\r\n    }\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n    numberFormatter(param) {\r\n        if (param.colDef.colId.toLowerCase() === 'transactionalcurrency' ||\r\n            param.colDef.colId.toLowerCase() === 'functionalcurrency' || param.colDef.colId.toLowerCase() === 'statutoryccyamount'\r\n            || param.colDef.colId.toLowerCase() === 'weight') {\r\n            if (param && param.value) {\r\n                const commonMethods = new CommonMethods();\r\n                if (param.colDef.colId.toLowerCase() === 'weight') {\r\n                    return commonMethods.getFormattedNumberValue(param.value, 3);\r\n                }\r\n                else {\r\n                    return commonMethods.getFormattedNumberValue(param.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    // -- Quick Sum\r\n\r\n    toggleQuickSum(value: boolean) {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = value;\r\n        if (this.quickSumModeActivated) {\r\n            this.classApplied = this.cellSelectionClass;\r\n        } else {\r\n            this.classApplied = this.defaultClass;\r\n        }\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.agGridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n    onRangeSelectionChanged(event) {\r\n        this.selectedColumnsArray = [];\r\n\r\n        const rangeSelections = this.agGridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        // if there is only one column selected\r\n        if (rangeSelections && rangeSelections.length === 1) {\r\n            this.rangeSelectionCalculation(rangeSelections[0]);\r\n        } else {\r\n            const cellInfos: any = [];\r\n            const selectedCells: any = [];\r\n            rangeSelections.forEach((row) => {\r\n                const cellExists = selectedCells.find((cell) => cell.start.rowIndex === row.start.rowIndex &&\r\n                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId());\r\n                if (cellExists === null || cellExists === undefined) {\r\n                    selectedCells.push(row);\r\n\r\n                    const obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };\r\n                    cellInfos.push(obj);\r\n                }\r\n            });\r\n\r\n            let sum = 0;\r\n            let columnName: string;\r\n            let columnHeader: string;\r\n            const selectedColumnsArray = this.selectedColumnsArray;\r\n            const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n\r\n            selectedCells.forEach((row) => {\r\n                row.columns.forEach((column) => {\r\n                    sum = 0;\r\n                    columnName = column.getColDef().colId.toLowerCase();\r\n                    columnHeader = column.getColDef().headerName;\r\n                    if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                        for (let rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {\r\n                            if (cellInfos[rowIndex].columnName.toLowerCase() === columnName) {\r\n                                const rowModel = this.agGridApi.getModel();\r\n                                const rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));\r\n                                const value = this.agGridApi.getValue(column, rowNode);\r\n                                sum += Number(value);\r\n                            }\r\n                        }\r\n\r\n                        const columnObj = selectedColumnsArray.find((sum) => sum.name === columnHeader);\r\n                        if (columnObj) {\r\n                            columnObj.sum = sum;\r\n                        } else {\r\n                            selectedColumnsArray.push({ name: columnHeader, sum });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            this.selectedColumnsArray = selectedColumnsArray;\r\n        }\r\n    }\r\n\r\n    rangeSelectionCalculation(rangeSelection: agGrid.RangeSelection) {\r\n        let sum = 0;\r\n        let columnName: string;\r\n        let columnHeader: string;\r\n        this.selectedColumnsArray = [];\r\n\r\n        const startRow = Math.min(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n        const endRow = Math.max(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n\r\n        const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n        rangeSelection.columns.forEach((column) => {\r\n            columnName = column.getColDef().colId.toLowerCase();\r\n            columnHeader = column.getColDef().headerName;\r\n            if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = this.agGridApi.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = this.agGridApi.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n                this.selectedColumnsArray.push({ name: columnHeader, sum });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n","module.exports = \"<div class=\\\"main-container fx-exposure-report\\\">\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"start\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\">\\r\\n        <mat-card fxFlex=\\\"35%\\\"\\r\\n                  fxFlexOrder.lt-md=\\\"1\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h2>Database Selection</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"5px\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     fxLayoutGap=\\\"15%\\\">\\r\\n                    <atlas-dropdown-select fxFlex='40%'\\r\\n                                           [label]=\\\"'Snapshot'\\\"\\r\\n                                           [fieldControl]=\\\"fxExposureSnapshotCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"snapshotList\\\"\\r\\n                                           displayProperty=\\\"freezeDate\\\"\\r\\n                                           [selectProperties]=\\\"['freezeDate']\\\">\\r\\n                    </atlas-dropdown-select>\\r\\n                </div>\\r\\n                <div class=\\\"DisplayToggle\\\"\\r\\n                     fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start start\\\">\\r\\n                    <mat-slide-toggle mat-raised-button\\r\\n                                      (change)=\\\"onToggleDisplay()\\\">Display open/Realised\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start end\\\">\\r\\n                    <mat-slide-toggle mat-raised-button\\r\\n                                      (change)=\\\"onToggleExcludeBankAccount()\\\">Exclude Bank account\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start end\\\">\\r\\n                    <mat-slide-toggle mat-raised-button\\r\\n                                      (change)=\\\"onToggleExcludeGLAccount()\\\">Exclude GL account\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n        <mat-card fxFlex=\\\"35%\\\"\\r\\n                  fxFlexOrder.lt-md=\\\"2\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h2>Report Criterias</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutGap=\\\"100%\\\">\\r\\n                    <atlas-contextual-search-multiple-autocomplete-select #currencyDropdownComponent\\r\\n                                                                          [options]=\\\"currencies\\\"\\r\\n                                                                          [selectedOptions]=\\\"[]\\\"\\r\\n                                                                          [allOptionsElement]=\\\"CurrencyAllOptions\\\"\\r\\n                                                                          [allSelected]=\\\"allCurrenciesSelected\\\"\\r\\n                                                                          displayCode=\\\"true\\\"\\r\\n                                                                          valueProperty=\\\"currencyCode\\\"\\r\\n                                                                          codeProperty=\\\"currencyCode\\\"\\r\\n                                                                          placeholder=\\\"Currency Code\\\"\\r\\n                                                                          placeholderFilter=\\\"Currency Code\\\"\\r\\n                                                                          elementName=\\\"Currency Code\\\"\\r\\n                                                                          (selectionChangedEvent)=\\\"onCurrencySelectionChanged($event)\\\">\\r\\n                    </atlas-contextual-search-multiple-autocomplete-select>\\r\\n                </div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutGap=\\\"100%\\\">\\r\\n                    <atlas-contextual-search-multiple-autocomplete-select #departmentDropdownComponent\\r\\n                                                                          [options]=\\\"filteredDepartments\\\"\\r\\n                                                                          [selectedOptions]=\\\"[]\\\"\\r\\n                                                                          [allOptionsElement]=\\\"departmentAllOptions\\\"\\r\\n                                                                          [allSelected]=\\\"allDepartmentsSelected\\\"\\r\\n                                                                          displayCode=\\\"true\\\"\\r\\n                                                                          valueProperty=\\\"departmentId\\\"\\r\\n                                                                          codeProperty=\\\"departmentCode\\\"\\r\\n                                                                          displayProperty=\\\"description\\\"\\r\\n                                                                          placeholder=\\\"Departments\\\"\\r\\n                                                                          placeholderFilter=\\\"Department\\\"\\r\\n                                                                          elementName=\\\"Department\\\"\\r\\n                                                                          (selectionChangedEvent)=\\\"onDepartmentSelectionChange($event)\\\">\\r\\n\\r\\n                    </atlas-contextual-search-multiple-autocomplete-select>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-raised-button\\r\\n                (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n\\r\\n        <button mat-raised-button\\r\\n                class=\\\"generate-report-button\\\"\\r\\n                (click)=\\\"onGenerateExcelButtonClicked()\\\">Detailed Excel View</button>\\r\\n    </div>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 [toBeDownloaded]=\\\"toBeDownloaded\\\"\\r\\n                                 #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".generate-report-button {\\n  margin: 0 !important; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCheckboxChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { ContextualSearchMultipleAutocompleteSelectComponent } from '../../../../../shared/components/form-components/multiple-autocomplete-dropdown/contextual-search/contextual-search-multiple-autocomplete-select.component';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { Freeze } from '../../../../../shared/entities/freeze.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { FreezeService } from '../../../../../shared/services/http-services/freeze.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { nameof } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-fx-exposure-report',\r\n    templateUrl: './fx-exposure-report.component.html',\r\n    styleUrls: ['./fx-exposure-report.component.scss'],\r\n})\r\nexport class FxExposureReportComponent implements OnInit {\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n    @ViewChild('currencyDropdownComponent') currencyDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    @ViewChild('departmentDropdownComponent') departmentDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n\r\n    fxExposureSnapshotCtrl = new FormControl();\r\n    companySelect: string[] = ['companyId'];\r\n    columnsListDisplayProperty: string[] = ['name'];\r\n\r\n    snapshotList: FreezeDisplayView[] = [];\r\n    currentSnapshot = new FreezeDisplayView(-1, 'CURRENT');\r\n    company: string;\r\n    parameters: any[] = [];\r\n    toBeDownloaded: boolean = false;\r\n    isViewRealizedPhysicals: boolean = false;\r\n    isDisplay: boolean = false;\r\n    isExcludeBankAccount: boolean = false;\r\n    isExcludeGLAccount: boolean = false;\r\n    masterData: MasterData;\r\n\r\n    companyList: Company[] = [];\r\n    currencyValue: Currency[];\r\n    currencies: Currency[];\r\n    departments: Department[] = [];\r\n    filteredCompany: Company[] = [];\r\n    selectedCompanies: string[] = [];\r\n    filteredDepartments: Department[] = [];\r\n    selectedFilteredDepartments: Department[] = [];\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/FxExposure/FxExposureSummary';\r\n    reportPathForDownload = 'LDC Atlas/FxExposure/FxExposureDetailDownload';\r\n    showError = false;\r\n\r\n    destroy$ = new Subject();\r\n    fxExpouserReportFormGroup: FormGroup;\r\n    CurrencyAllOptions = {\r\n        currencyCode: 'All',\r\n    };\r\n    allCurrenciesSelected = true;\r\n    departmentAllOptions = {\r\n        departmentCode: 'All',\r\n        departmentId: 0,\r\n    };\r\n    allDepartmentsSelected = true;\r\n\r\n    constructor(\r\n        private freezeService: FreezeService,\r\n        private snackbarService: SnackbarService,\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        // super(formConfigurationProvider);\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.currencies = this.route.snapshot.data.masterdata.currencies;\r\n        this.currencyDropdownComponent.options = this.currencies;\r\n        this.currencyDropdownComponent.optionsChanged();\r\n        this.filteredDepartments = this.masterData.departments;\r\n        this.departmentDropdownComponent.options = this.filteredDepartments;\r\n        this.departmentDropdownComponent.optionsChanged();\r\n        this.loadSnapshots();\r\n    }\r\n\r\n    /*    getCompaniesList(): any[] {\r\n            const options: Company[] = this.companyManager.getLoadedCompanies();\r\n            return options;\r\n        }*/\r\n\r\n    // will be implemented when the db changes for company list is done .\r\n    /*   onCompanySelected(data: object[]) {\r\n           if (data) {\r\n               this.selectedCompanies = [];\r\n               if (data.length > 0) {\r\n                   data.forEach((company) => { this.selectedCompanies.push(company['companyId']); });\r\n               }\r\n               this.reportCriterias.getDataForSelectedCompanies(this.selectedCompanies);\r\n           }\r\n       }*/\r\n\r\n    initializeForm() {\r\n        this.fxExpouserReportFormGroup = this.formBuilder.group({\r\n        });\r\n\r\n        this.setValidators();\r\n        return this.fxExpouserReportFormGroup;\r\n    }\r\n\r\n    setValidators() {\r\n        this.fxExposureSnapshotCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(\r\n                this.snapshotList,\r\n                nameof<FreezeDisplayView>('dataVersionId'),\r\n            ),\r\n            Validators.required,\r\n        ]));\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate),\r\n                        freeze.freezeDate,\r\n                        freeze.dataVersionTypeId);\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.snapshotList = snapshots;\r\n            if (snapshots.length > 0) {\r\n                this.fxExposureSnapshotCtrl.setValue(snapshots[0]);\r\n            }\r\n            this.snapshotList.unshift(this.currentSnapshot);\r\n            this.initializeForm();\r\n        });\r\n    }\r\n\r\n    onToggleDisplay() {\r\n        this.isDisplay = !this.isDisplay;\r\n    }\r\n    onToggleExcludeBankAccount() {\r\n        this.isExcludeBankAccount = !this.isExcludeBankAccount;\r\n    }\r\n    onToggleExcludeGLAccount() {\r\n        this.isExcludeGLAccount = !this.isExcludeGLAccount;\r\n    }\r\n    onCurrencySelectionChanged(selectedCurrency: Currency[]) {\r\n        this.currencyValue = selectedCurrency;\r\n    }\r\n    onDepartmentSelectionChange(selectedDepartment: Department[]) {\r\n        this.departments = selectedDepartment;\r\n    }\r\n    onGenerateReportButtonClicked() {\r\n        const snapshotId = (this.fxExposureSnapshotCtrl.value as FreezeDisplayView).dataVersionId;\r\n        if (snapshotId !== -1 && this.selectedCompanies.length > 0) {\r\n            const freezeDate = this.fxExposureSnapshotCtrl.value;\r\n            this.freezeService.checkFreezeForSelectedDatabase(this.selectedCompanies, freezeDate['dataVersionTypeId'],\r\n                freezeDate, null, null).subscribe((data: any) => {\r\n                    if (data) {\r\n                        let missingCompanyList: string;\r\n\r\n                        if (data.missingCompany) {\r\n                            this.showError = true;\r\n                            missingCompanyList = data.missingCompany;\r\n                        } else {\r\n                            this.showError = false;\r\n                        }\r\n                        if (!this.showError) {\r\n                            this.onGenerateReportParameter();\r\n                            this.toBeDownloaded = false;\r\n                            this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n                        } else {\r\n                            this.snackbarService.throwErrorSnackBar('The freeze is not present in company '\r\n                                + missingCompanyList + ' report cannot be generated');\r\n                        }\r\n                    }\r\n                });\r\n        } else {\r\n            this.onGenerateReportParameter();\r\n            this.toBeDownloaded = false;\r\n            this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n        }\r\n    }\r\n\r\n    onGenerateExcelButtonClicked() {\r\n        this.onGenerateReportParameter();\r\n        this.toBeDownloaded = true;\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPathForDownload, this.parameters);\r\n    }\r\n\r\n    onGenerateReportParameter() {\r\n        const snapshotId = (this.fxExposureSnapshotCtrl.value as FreezeDisplayView).dataVersionId;\r\n\r\n        this.parameters = [];\r\n\r\n        this.parameters.push({ name: 'iCompanyName', value: this.route.snapshot.params.company });\r\n\r\n        if (this.departments.length < this.filteredDepartments.length) {\r\n            this.departments.forEach((department: Department) => {\r\n                this.parameters.push({ name: 'iDepartmentId', value: department.departmentId });\r\n            });\r\n        }\r\n        if (this.currencyValue && this.currencyValue.length < this.currencies.length) {\r\n            this.currencyValue.forEach((currency: Currency) => {\r\n                this.parameters.push({ name: 'iCurrencyCode', value: currency.currencyCode });\r\n            });\r\n        }\r\n        if (snapshotId != -1) {\r\n            this.parameters.push({ name: 'iDataVersionId', value: snapshotId });\r\n        }\r\n        if (this.isDisplay) {\r\n            this.parameters.push({ name: 'iDisplayOpenRealised', value: 1 });\r\n        }\r\n        if (this.isExcludeBankAccount) {\r\n            this.parameters.push({ name: 'iExcludeBankAccount', value: 1 });\r\n        }\r\n        if (this.isExcludeGLAccount) {\r\n            this.parameters.push({ name: 'iExcludeGLAccount', value: 1 });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-title>\\r\\n            <h2>\\r\\n                Criteria\\r\\n            </h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between-center\\\">\\r\\n                <atlas-contextual-search-multiple-autocomplete-select #currencyDropdownComponent\\r\\n                                                                      [options]=\\\"currencies\\\"\\r\\n                                                                      [selectedOptions]=\\\"[]\\\"\\r\\n                                                                      [allOptionsElement]=\\\"CurrencyAllOptions\\\"\\r\\n                                                                      [allSelected]=\\\"allCurrenciesSelected\\\"\\r\\n                                                                      displayCode=\\\"true\\\"\\r\\n                                                                      valueProperty=\\\"currencyCode\\\"\\r\\n                                                                      codeProperty=\\\"currencyCode\\\"\\r\\n                                                                      placeholder=\\\"Currency Code\\\"\\r\\n                                                                      placeholderFilter=\\\"Currency Code\\\"\\r\\n                                                                      elementName=\\\"Currency Code\\\"\\r\\n                                                                      (selectionChangedEvent)=\\\"onCurrencySelectionChanged($event)\\\">\\r\\n                </atlas-contextual-search-multiple-autocomplete-select>\\r\\n\\r\\n                <atlas-dropdown-select [label]=\\\"'Type of rate'\\\"\\r\\n                                       [fieldControl]=\\\"monthEndCtrl\\\"\\r\\n                                       isEditable=true\\r\\n                                       [options]=\\\"monthEndList\\\"\\r\\n                                       displayProperty=\\\"id\\\"\\r\\n                                       [selectProperties]=\\\"['value']\\\"\\r\\n                                       (optionSelected)=\\\"onChanges()\\\">\\r\\n                </atlas-dropdown-select>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</form>\"","module.exports = \"\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ContextualSearchMultipleAutocompleteSelectComponent } from '../../../../../../../shared/components/form-components/multiple-autocomplete-dropdown/contextual-search/contextual-search-multiple-autocomplete-select.component';\r\nimport { Currency } from '../../../../../../../shared/entities/currency.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { ForeignExchangeRateViewMode } from '../../../../../../../shared/enums/foreign-exchange-rate-viewmode.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-critera',\r\n    templateUrl: './critera.component.html',\r\n    styleUrls: ['./critera.component.scss'],\r\n})\r\nexport class CriteraComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('currencyDropdownComponent') currencyDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    monthEndCtrl: FormControl;\r\n    formGroup: FormGroup;\r\n    monthEndList = [];\r\n    dropDownValue: string;\r\n    masterdata: MasterData;\r\n    currencyValue: Currency[];\r\n    currencies: Currency[];\r\n    selectedRate: any;\r\n    foreignExchangeRateViewMode: ForeignExchangeRateViewMode;\r\n    @Output() readonly rateSelected = new EventEmitter<string>();\r\n    @Output() readonly currencySelected = new EventEmitter<Currency[]>();\r\n    CurrencyAllOptions = {\r\n        currencyCode: 'All',\r\n    };\r\n    allCurrenciesSelected = true;\r\n    constructor(private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        formConfigurationProvider: FormConfigurationProviderService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getFormGroup();\r\n        this.monthEndList = this.getMonthEndList();\r\n        this.monthEndCtrl.patchValue(this.monthEndList[0]);\r\n        this.initCurrencies();\r\n        this.onChanges();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            monthEndCtrl: this.monthEndCtrl,\r\n        });\r\n        this.initControls();\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initControls() {\r\n        this.monthEndCtrl = new FormControl('', [Validators.required]);\r\n    }\r\n\r\n    initCurrencies() {\r\n        this.currencies = this.route.snapshot.data.masterdata.currencies;\r\n        this.currencyDropdownComponent.options = this.currencies;\r\n        this.currencyDropdownComponent.optionsChanged();\r\n    }\r\n\r\n    getMonthEndList(): any[] {\r\n        const options = [];\r\n        const fxRateEnumArray = Object.keys(ForeignExchangeRateViewMode).map((key) => {\r\n            return {\r\n                id: key,\r\n                value: ForeignExchangeRateViewMode[key],\r\n            };\r\n        });\r\n        fxRateEnumArray.forEach((fxRateEnumValue) => {\r\n            options.push(fxRateEnumValue);\r\n        });\r\n\r\n        return options;\r\n    }\r\n    onCurrencySelectionChanged(selectedCurrency: Currency[]) {\r\n        this.currencySelected.emit(selectedCurrency);\r\n        this.currencyValue = selectedCurrency;\r\n    }\r\n    onChanges(): void {\r\n        this.monthEndCtrl.valueChanges.subscribe((value) => {\r\n            this.rateSelected.emit(value.value);\r\n            this.selectedRate = value;\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-title>\\r\\n            <h2>\\r\\n                Period\\r\\n            </h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between\\\"\\r\\n                 fxLayoutGap=\\\"2%\\\">\\r\\n                <div fxFlex=\\\"15%\\\">\\r\\n                    <mat-button-toggle-group name=\\\"toggleStyle\\\"\\r\\n                                             [formControl]='periodCtrl'\\r\\n                                             (change)=\\\"onPeriodDataChanged()\\\"\\r\\n                                             [value]=\\\"setPeriodType\\\">\\r\\n                        <mat-button-toggle [disabled]=\\\"disableDaily\\\"\\r\\n                                           [value]=\\\"daily\\\">Daily\\r\\n                        </mat-button-toggle>\\r\\n                        <mat-button-toggle [disabled]=\\\"disableMonthly\\\"\\r\\n                                           [value]=\\\"monthly\\\">Monthly\\r\\n                        </mat-button-toggle>\\r\\n                    </mat-button-toggle-group>\\r\\n                </div>\\r\\n                <div class=\\\"from-and-to-dates\\\"\\r\\n                     fxFlex=\\\"40%\\\">\\r\\n                    <div fxFlex=\\\"50%\\\">\\r\\n                        <atlas-date-picker *ngIf=\\\"activateDay\\\"\\r\\n                                           isEditable=true\\r\\n                                           label=\\\"From\\\"\\r\\n                                           [fieldControl]=\\\"fromCtrl\\\"\\r\\n                                           (dateChanged)=\\\"onFromChanged()\\\">\\r\\n                        </atlas-date-picker>\\r\\n                        <mat-error class=\\\"date-error\\\"\\r\\n                                   *ngIf=\\\"fromCtrl.hasError('isDateAfterValid') && activateDay\\\">\\r\\n                            \\\"From\\\" date cannot be in the future\\r\\n                        </mat-error>\\r\\n                        <atlas-month-date-picker *ngIf=\\\"activateMonth\\\"\\r\\n                                                 isEditable=true\\r\\n                                                 class=\\\"month-date-picker\\\"\\r\\n                                                 label=\\\"From\\\"\\r\\n                                                 [fieldControl]=\\\"fromCtrl\\\"\\r\\n                                                 (monthChanged)=\\\"onFromChanged()\\\">\\r\\n                        </atlas-month-date-picker>\\r\\n                        <mat-error class=\\\"date-error\\\"\\r\\n                                   *ngIf=\\\"fromCtrl.hasError('isDateAfterValid') && activateMonth\\\">\\r\\n                            \\\"From\\\" month cannot be in the future\\r\\n                        </mat-error>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"50%\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutGap=\\\"1%\\\">\\r\\n                            <atlas-date-picker *ngIf=\\\"activateDay\\\"\\r\\n                                               isEditable=true\\r\\n                                               label=\\\"To\\\"\\r\\n                                               [fieldControl]=\\\"toCtrl\\\"\\r\\n                                               [errorMap]=\\\"dailyErrorMap\\\"\\r\\n                                               (dateChanged)=\\\"onToChanged()\\\">\\r\\n                            </atlas-date-picker>\\r\\n                            <mat-error class=\\\"date-error\\\"\\r\\n                                       *ngIf=\\\"toCtrl.hasError('isDateAfterValid') && activateDay\\\">\\r\\n                                \\\"To\\\" date cannot be in the future\\r\\n                            </mat-error>\\r\\n                            <atlas-month-date-picker *ngIf=\\\"activateMonth\\\"\\r\\n                                                     isEditable=true\\r\\n                                                     class=\\\"month-date-picker\\\"\\r\\n                                                     label=\\\"To\\\"\\r\\n                                                     [fieldControl]=\\\"toCtrl\\\"\\r\\n                                                     (monthChanged)=\\\"onToChanged()\\\">\\r\\n                            </atlas-month-date-picker>\\r\\n                            <mat-error class=\\\"date-error\\\"\\r\\n                                       *ngIf=\\\"toCtrl.hasError('isDateAfterValid') && activateMonth\\\">\\r\\n                                \\\"To\\\" month cannot be in the future\\r\\n                            </mat-error>\\r\\n                            <mat-error class=\\\"date-error\\\"\\r\\n                                       *ngIf=\\\"toCtrl.hasError('isBeforeDateValid') && activateDay\\\">\\r\\n                                \\\"To\\\" date cannot be before the \\\"from\\\" date\\r\\n                            </mat-error>\\r\\n                            <mat-error class=\\\"date-error\\\"\\r\\n                                       *ngIf=\\\"toCtrl.hasError('isBeforeDateValid') && activateMonth\\\">\\r\\n                                \\\"To\\\" month cannot be before the \\\"from\\\" month\\r\\n                            </mat-error>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"45%\\\">\\r\\n                    <mat-slide-toggle [formControl]=\\\"showAllDatesCtrl\\\"\\r\\n                                      [disabled]=\\\"disableDaily\\\"\\r\\n                                      (change)=\\\"onShowAllDatesChanged()\\\">Show All Dates</mat-slide-toggle>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</form>\"","module.exports = \".from-and-to-dates {\\n  margin-left: 72px; }\\n\\n.date-error {\\n  color: #DF5A4D !important;\\n  font-size: 75%; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport * as _moment from 'moment';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ForeignExchangeRateViewMode } from '../../../../../../../shared/enums/foreign-exchange-rate-viewmode.enum';\r\nimport { FreezeType } from '../../../../../../../shared/enums/freeze-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { isAfterDate, isDateBeforeControlDate } from '../../../../../../../shared/validators/date-validators.validator';\r\nconst moment = _moment;\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-period',\r\n    templateUrl: './period.component.html',\r\n    styleUrls: ['./period.component.scss'],\r\n})\r\nexport class PeriodComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly periodSelected = new EventEmitter<string>();\r\n    @Output() readonly fromSelected = new EventEmitter<string>();\r\n    @Output() readonly toSelected = new EventEmitter<string>();\r\n    @Output() readonly showAllDatesSelected = new EventEmitter<boolean>();\r\n    periodCtrl = new FormControl();\r\n    fromCtrl = new FormControl();\r\n    toCtrl = new FormControl();\r\n    showAllDatesCtrl = new FormControl();\r\n    formGroup: FormGroup;\r\n    disableMonthly: boolean = true;\r\n    disableDaily: boolean = true;\r\n    FreezeType: FreezeType;\r\n    setPeriodType: FreezeType;\r\n    daily: FreezeType = FreezeType.Daily;\r\n    monthly: FreezeType = FreezeType.Monthly;\r\n    activateMonth: boolean = false;\r\n    activateDay: boolean = true;\r\n    dailyErrorMap: Map<string, string> = new Map();\r\n    monthlyErrorMap: Map<string, string> = new Map();\r\n    toDateErrorMap: Map<string, string> = new Map();\r\n    fromDateSet: Date;\r\n    constructor(private formBuilder: FormBuilder,\r\n        formConfigurationProviderService: FormConfigurationProviderService,\r\n        protected companyManager: CompanyManagerService) {\r\n        super(formConfigurationProviderService);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getFormGroup();\r\n        this.fromCtrl.disable();\r\n        this.toCtrl.disable();\r\n    }\r\n    getFormGroup(): FormGroup {\r\n        this.formGroup = this.formBuilder.group({\r\n            periodCtrl: this.periodCtrl,\r\n            fromCtrl: this.fromCtrl,\r\n            toCtrl: this.toCtrl,\r\n            showAllDatesCtrl: this.showAllDatesCtrl,\r\n        });\r\n\r\n        return this.formGroup;\r\n    }\r\n    setDefaultValues() {\r\n        if (this.setPeriodType === this.daily) {\r\n            this.activateMonth = false;\r\n            this.activateDay = true;\r\n        }\r\n        if (this.setPeriodType === this.monthly) {\r\n            this.activateDay = false;\r\n            this.activateMonth = true;\r\n        }\r\n    }\r\n    setDateValidators() {\r\n        this.toCtrl.clearValidators();\r\n        this.toCtrl.setValidators(Validators.compose(\r\n            [(isDateBeforeControlDate(moment(this.fromDateSet))), isAfterDate(this.companyManager.getCurrentCompanyDate())]));\r\n        this.toCtrl.updateValueAndValidity();\r\n    }\r\n    getRateSelected(rate: string) {\r\n        this.disablePeriod(rate);\r\n        this.setDefaultValues();\r\n        this.formGroup.updateValueAndValidity();\r\n        this.formGroup.reset();\r\n    }\r\n    disablePeriod(rate: string) {\r\n        if (ForeignExchangeRateViewMode) {\r\n            switch (rate) {\r\n                case ForeignExchangeRateViewMode.Daily:\r\n                    {\r\n                        this.disableDaily = false;\r\n                        this.disableMonthly = false;\r\n                        this.fromCtrl.enable();\r\n                        this.toCtrl.enable();\r\n                        this.setPeriodType = this.daily;\r\n                        this.periodCtrl.patchValue(this.daily);\r\n                        this.fromCtrl.setValidators(\r\n                            Validators.compose([Validators.required, isAfterDate(this.companyManager.getCurrentCompanyDate())]),\r\n                        );\r\n                        this.disableMonthly = true;\r\n                        break;\r\n                    }\r\n                case ForeignExchangeRateViewMode.Monthly:\r\n                    {\r\n                        this.disableDaily = false;\r\n                        this.disableMonthly = false;\r\n                        this.fromCtrl.enable();\r\n                        this.toCtrl.enable();\r\n                        this.setPeriodType = this.monthly;\r\n                        this.periodCtrl.patchValue(this.monthly);\r\n                        this.fromCtrl.setValidators(\r\n                            Validators.compose([Validators.required, isAfterDate(this.companyManager.getCurrentCompanyDate())]));\r\n                        this.disableDaily = true;\r\n                        break;\r\n                    }\r\n                case ForeignExchangeRateViewMode.Spot:\r\n                    {\r\n                        this.disableDaily = true;\r\n                        this.disableMonthly = true;\r\n                        this.fromCtrl.disable();\r\n                        this.toCtrl.disable();\r\n                        this.fromCtrl.disable();\r\n                        this.toCtrl.disable();\r\n                        this.setPeriodType = null;\r\n                        this.fromCtrl.setValidators(null);\r\n                        this.toCtrl.setValidators(null);\r\n                        this.fromCtrl.patchValue(null);\r\n                        this.toCtrl.patchValue(null);\r\n                        break;\r\n                    }\r\n            }\r\n            this.formGroup.updateValueAndValidity();\r\n        }\r\n    }\r\n    onPeriodDataChanged(): void {\r\n        this.periodCtrl.valueChanges.subscribe((periodValue) => {\r\n            this.setDefaultValues();\r\n            this.periodSelected.emit(periodValue);\r\n        });\r\n    }\r\n    onFromChanged(): void {\r\n        if (this.fromCtrl.value && this.fromCtrl.valid) {\r\n            this.setDefaultValues();\r\n            this.fromSelected.emit(this.fromCtrl.value);\r\n            this.fromDateSet = this.fromCtrl.value;\r\n        }\r\n        this.setDateValidators();\r\n    }\r\n    onToChanged(): void {\r\n        if (this.toCtrl.value && this.toCtrl.valid) {\r\n            this.setDefaultValues();\r\n            this.toSelected.emit(this.toCtrl.value);\r\n        }\r\n        this.setDateValidators();\r\n        this.formGroup.updateValueAndValidity();\r\n    }\r\n\r\n    onShowAllDatesChanged(): void {\r\n        if (this.showAllDatesCtrl.value && this.showAllDatesCtrl.valid) {\r\n            this.showAllDatesSelected.emit(this.showAllDatesCtrl.value);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-title>\\r\\n            <h2>\\r\\n                Sort By\\r\\n            </h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <div fxFlex=\\\"50%\\\">\\r\\n                <mat-button-toggle-group class=\\\"sort-by\\\"\\r\\n                                         name=\\\"toggleStyle\\\"\\r\\n                                         [formControl]='sortByCtrl'\\r\\n                                         [value]=\\\"ReportSortType.Currency\\\"\\r\\n                                         (change)=\\\"onChanges()\\\">\\r\\n                    <mat-button-toggle [value]=\\\"ReportSortType.Currency\\\">{{ReportSortType[ReportSortType.Currency]}}\\r\\n                    </mat-button-toggle>\\r\\n                    <mat-button-toggle [value]=\\\"ReportSortType.Date\\\">{{ReportSortType[ReportSortType.Date]}}\\r\\n                    </mat-button-toggle>\\r\\n                </mat-button-toggle-group>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</form>\"","module.exports = \".sort-by {\\n  margin-bottom: 25px; }\\n\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormControl, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ReportSortType } from '../../../../../../../shared/enums/report-sort-type.enum'\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n\r\n@Component({\r\n    selector: 'atlas-sort-by',\r\n    templateUrl: './sort-by.component.html',\r\n    styleUrls: ['./sort-by.component.scss']\r\n})\r\nexport class SortByComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly sortBySelected = new EventEmitter<string>();\r\n    sortByCtrl = new FormControl();\r\n    formGroup: FormGroup;\r\n    ReportSortType = ReportSortType;\r\n    constructor(private formBuilder: FormBuilder,\r\n        formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getFormGroup();\r\n        this.sortByCtrl.patchValue(ReportSortType.Currency);\r\n        this.onChanges();\r\n    }\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            sortByCtrl: this.sortByCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n    onChanges() {\r\n        this.sortByCtrl.valueChanges.subscribe((sortByValue) => {\r\n            this.sortBySelected.emit(sortByValue);\r\n        });\r\n    }\r\n\r\n\r\n} \r\n","module.exports = \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <div fxLayout=\\\"column\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"2%\\\"\\r\\n                 fxLayoutAlign=\\\"space-between-center\\\">\\r\\n                <div fxFlex=\\\"35%\\\">\\r\\n                    <atlas-critera #criteraComponent\\r\\n                                   (rateSelected)=\\\"onRateSelected($event)\\\"\\r\\n                                   (currSelected)=\\\"onCurrencySelected($event)\\\"></atlas-critera>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"45%\\\">\\r\\n                    <atlas-period #periodComponent\\r\\n                                  [rateSelected]=\\\"rateSelected\\\"\\r\\n                                  (periodSelected)=\\\"onPeriodSelected($event)\\\"\\r\\n                                  (fromSelected)=\\\"onFromSelected($event)\\\"\\r\\n                                  (toSelected)=\\\"onToSelected($event)\\\"\\r\\n                                  (showAllDatesSelected)=\\\"onShowAllDatesSelected($event)\\\"></atlas-period>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"20%\\\">\\r\\n                    <atlas-sort-by #sortByComponent\\r\\n                                   (sortBySelected)=\\\"onSortBySelected($event)\\\"></atlas-sort-by>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div>\\r\\n                <button mat-raised-button\\r\\n                        class=\\\"generate-report-button report-button\\\"\\r\\n                        (click)=\\\"onGenerateReportButtonClicked(true)\\\">GENERATE REPORT</button>\\r\\n            </div>\\r\\n            <div class=\\\"report-container\\\">\\r\\n                <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                         [reportUrl]=\\\"reportPath\\\"\\r\\n                                         [parameters]=\\\"parameters\\\"\\r\\n                                         #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \".report-button {\\n  float: right; }\\n\\n.report-container {\\n  height: 60vh; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { ForeignExchangeRateViewMode } from '../../../../../shared/enums/foreign-exchange-rate-viewmode.enum';\r\nimport { FreezeType } from '../../../../../shared/enums/freeze-type.enum';\r\nimport { ReportSortType } from '../../../../../shared/enums/report-sort-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { ReportCriteriasComponent } from '../report-criterias/report-criterias.component';\r\nimport { CriteraComponent } from './components/critera/critera.component';\r\nimport { PeriodComponent } from './components/period/period.component';\r\nimport { SortByComponent } from './components/sort-by/sort-by.component';\r\n\r\n@Component({\r\n    selector: 'atlas-historical-exchange-rates-report',\r\n    templateUrl: './historical-exchange-rates-report.component.html',\r\n    styleUrls: ['./historical-exchange-rates-report.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class HistoricalExchangeRatesReportComponent extends BaseFormComponent implements OnInit {\r\n    private formComponents: BaseFormComponent[] = [];\r\n    @ViewChild('criteraComponent') historicalRatesCriteriaComponent: CriteraComponent;\r\n    @ViewChild('periodComponent') historicalRatesPeriodComponent: PeriodComponent;\r\n    @ViewChild('sortByComponent') historicalRatesSortByComponent: SortByComponent;\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n    @ViewChild('reportCriterias') reportCriterias: ReportCriteriasComponent;\r\n    @Output() readonly rateSelected = new EventEmitter<string>();\r\n    isGenerateButtonClicked: boolean = false;\r\n    formGroup: FormGroup;\r\n    selectedRate: string;\r\n    selectedCurrency: Currency[];\r\n    FreezeType: FreezeType;\r\n    selectedPeriod: string;\r\n    selectedFrom: string;\r\n    selectedTo: string;\r\n    selectedAllDates: boolean = false;\r\n    selectedSortBy: string = ReportSortType[ReportSortType.Currency];\r\n    ReportSortType = ReportSortType;\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/HistoricalFX Rate/HistoricalFXRate';\r\n    parameters: any[] = [];\r\n    monthly: string = FreezeType[FreezeType.Monthly];\r\n    daily: string = FreezeType[FreezeType.Daily];\r\n    spot: ForeignExchangeRateViewMode = ForeignExchangeRateViewMode[ForeignExchangeRateViewMode.Spot];\r\n    constructor(\r\n        protected datepipe: DatePipe,\r\n        protected formBuilder: FormBuilder,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected snackbarService: SnackbarService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.formGroup = this.formBuilder.group({\r\n            criteraComponent: this.historicalRatesCriteriaComponent.getFormGroup(),\r\n            periodComponent: this.historicalRatesPeriodComponent.getFormGroup(),\r\n            sortByComponent: this.historicalRatesSortByComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.historicalRatesCriteriaComponent,\r\n            this.historicalRatesPeriodComponent,\r\n            this.historicalRatesSortByComponent,\r\n        );\r\n\r\n    }\r\n\r\n    onRateSelected(rateSelected: string) {\r\n        this.selectedRate = rateSelected;\r\n        this.historicalRatesPeriodComponent.getRateSelected(rateSelected);\r\n        this.setFromFormat();\r\n    }\r\n\r\n    onCurrencySelected(currencySelected: Currency[]) {\r\n        this.selectedCurrency = currencySelected;\r\n    }\r\n\r\n    onFromSelected(fromSelected: Date) {\r\n        this.setFromFormat(fromSelected);\r\n    }\r\n\r\n    onToSelected(toSelected: Date) {\r\n        this.setToFormat(toSelected);\r\n    }\r\n\r\n    onShowAllDatesSelected(allDatesSelected: boolean) {\r\n        this.selectedAllDates = allDatesSelected;\r\n    }\r\n\r\n    onSortBySelected(sortBySelected: string) {\r\n        this.selectedSortBy = ReportSortType[sortBySelected];\r\n    }\r\n\r\n    onPeriodSelected(periodSelected: string) {\r\n        this.selectedPeriod = FreezeType[periodSelected];\r\n    }\r\n\r\n    onGenerateReportButtonClicked(isGenerateButtonClicked?: boolean) {\r\n        if (this.formGroup.valid &&\r\n            this.historicalRatesCriteriaComponent.currencyValue.length !== 0) {\r\n            this.generateReport();\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please check the errors.');\r\n        }\r\n    }\r\n\r\n    setFromFormat(from?: Date) {\r\n        if (from) {\r\n            this.selectedFrom = (this.selectedRate === this.monthly) ?\r\n                this.datepipe.transform(from, 'MMM yyyy') : this.datepipe.transform(from, 'yyyy-MM-dd');\r\n        } else {\r\n            this.selectedFrom = null;\r\n        }\r\n    }\r\n    setToFormat(to: Date) {\r\n        if (to) {\r\n            this.selectedTo = (this.selectedRate === this.monthly) ?\r\n                this.datepipe.transform(to, 'MMM yyyy') : this.datepipe.transform(to, 'yyyy-MM-dd');\r\n        } else {\r\n            this.selectedTo = null;\r\n        }\r\n    }\r\n\r\n    generateReport() {\r\n        this.parameters = [\r\n            { name: 'ShowAllDates', value: this.selectedAllDates },\r\n            { name: 'SortBy', value: this.selectedSortBy },\r\n        ];\r\n        this.getReportCriteria();\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n\r\n    getReportCriteria() {\r\n        if (!this.historicalRatesCriteriaComponent.currencyDropdownComponent.allSelected) {\r\n            this.historicalRatesCriteriaComponent.currencyValue.forEach((currency: Currency) => {\r\n                this.parameters.push({ name: 'Currency', value: currency.currencyCode });\r\n            });\r\n        }\r\n        if (this.selectedFrom) {\r\n            this.parameters.push({ name: 'From', value: this.selectedFrom });\r\n        }\r\n        if (this.selectedTo) {\r\n            this.parameters.push({ name: 'To', value: this.selectedTo });\r\n        }\r\n        if ((this.selectedRate) && (!(this.selectedRate === this.spot))) {\r\n            this.parameters.push({ name: 'Period', value: this.selectedRate });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"newBizReportFormGroup\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             fxLayoutAlign.lt-md=\\\"start center\\\">\\r\\n            <mat-card fxFlex=\\\"35%\\\">\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h2>Report Parameters</h2>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"20px\\\">\\r\\n                        <mat-form-field fxFlex=\\\"31%\\\">\\r\\n                            <mat-select [formControl]=\\\"contractDateCtrl\\\"\\r\\n                                        required=\\\"contractDateCtrl.isRequired\\\">\\r\\n                                <mat-option *ngFor=\\\"let newBizDate of newBizDateTypes\\\"\\r\\n                                            [value]=\\\"newBizDate.value\\\">\\r\\n                                    {{newBizDate.newBizDateTypesDescription}}</mat-option>\\r\\n                            </mat-select>\\r\\n                            <mat-error *ngIf=\\\"contractDateCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <span fxLayoutGap=\\\"5%\\\">\\r\\n                            <div class=\\\"custom-form\\\"\\r\\n                                 fxFlex=\\\"25%\\\"\\r\\n                                 [class.isEmpty]=\\\"!newBizDateFromCtrl.value\\\"\\r\\n                                 [class.required-field]=\\\"newBizDateFromCtrl.isRequired\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <input matInput\\r\\n                                           [required]=\\\"newBizDateFromCtrl.isRequired\\\"\\r\\n                                           [matDatepicker]=\\\"frompicker\\\"\\r\\n                                           placeholder=\\\"From\\\"\\r\\n                                           value=\\\"frompicker\\\"\\r\\n                                           autocomplete=\\\"off\\\"\\r\\n                                           [formControl]='newBizDateFromCtrl'>\\r\\n                                    <mat-datepicker-toggle matSuffix\\r\\n                                                           [for]=\\\"frompicker\\\"></mat-datepicker-toggle>\\r\\n                                    <mat-datepicker #frompicker></mat-datepicker>\\r\\n                                    <mat-error *ngIf=\\\"newBizDateFromCtrl.hasError('required')\\\">\\r\\n                                        This field is required\\r\\n                                    </mat-error>\\r\\n                                    <mat-error *ngIf=\\\"newBizDateToCtrl.hasError('isBeforeDate')\\\">\\r\\n                                        Cannot be After Period To\\r\\n                                    </mat-error>\\r\\n                                    <mat-hint *ngIf=\\\"newBizDateFromCtrl.isRequired\\\">\\r\\n                                        Required *\\r\\n                                    </mat-hint>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"custom-form\\\"\\r\\n                                 fxFlex=\\\"25%\\\"\\r\\n                                 [class.isEmpty]=\\\"!newBizDateToCtrl.value\\\"\\r\\n                                 [class.required-field]=\\\"newBizDateToCtrl.isRequired\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <input matInput\\r\\n                                           [required]=\\\"newBizDateToCtrl.isRequired\\\"\\r\\n                                           [matDatepicker]=\\\"topicker\\\"\\r\\n                                           placeholder=\\\"To\\\"\\r\\n                                           value=\\\"topicker\\\"\\r\\n                                           autocomplete=\\\"off\\\"\\r\\n                                           [formControl]='newBizDateToCtrl'>\\r\\n                                    <mat-datepicker-toggle matSuffix\\r\\n                                                           [for]=\\\"topicker\\\"></mat-datepicker-toggle>\\r\\n                                    <mat-datepicker #topicker></mat-datepicker>\\r\\n                                    <mat-error *ngIf=\\\"newBizDateToCtrl.hasError('required')\\\">\\r\\n                                        This field is required\\r\\n                                    </mat-error>\\r\\n                                    <mat-error *ngIf=\\\"newBizDateToCtrl.hasError('isBeforeDate')\\\">\\r\\n                                        Cannot be before Period From\\r\\n                                    </mat-error>\\r\\n                                    <mat-hint *ngIf=\\\"newBizDateToCtrl.isRequired\\\">\\r\\n                                        Required *\\r\\n                                    </mat-hint>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n\\r\\n                        </span>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         class=\\\"container-custom\\\"\\r\\n                         fxLayoutGap=\\\"20px\\\">\\r\\n                        <atlas-masterdata-user-preferences-input fxFlex=\\\"30%\\\"\\r\\n                                                                 isEditable=\\\"true\\\"\\r\\n                                                                 [fieldControl]=\\\"newBizReportDepartmentCtrl\\\"\\r\\n                                                                 [options]=\\\"filteredDepartmentList\\\"\\r\\n                                                                 label=\\\"Department\\\"\\r\\n                                                                 displayProperty=\\\"departmentCode\\\"\\r\\n                                                                 [selectProperties]=\\\"['departmentCode', 'description']\\\"\\r\\n                                                                 [errorMap]=\\\"departmentErrorMap\\\"\\r\\n                                                                 lightBoxTitle=\\\"Results for Departments\\\"\\r\\n                                                                 gridId=\\\"departmentsGrid\\\">\\r\\n                        </atlas-masterdata-user-preferences-input>\\r\\n                        <mat-form-field fxFlex=\\\"25%\\\">\\r\\n                            <mat-select [formControl]=\\\"styleCtrl\\\"\\r\\n                                        placeholder=\\\"Style\\\"\\r\\n                                        required=\\\"styleCtrl.isRequired\\\">\\r\\n                                <mat-option *ngFor=\\\"let newBizStyle of newBizStyleTypes\\\"\\r\\n                                            [value]=\\\"newBizStyle.value\\\">\\r\\n                                    {{newBizStyle.newBizStyleTypesDescription}}</mat-option>\\r\\n                            </mat-select>\\r\\n                            <mat-error *ngIf=\\\"styleCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <mat-card fxFlex=\\\"38%\\\">\\r\\n                <mat-card-header>\\r\\n                    <mat-card-title>\\r\\n                        <h2>Report</h2>\\r\\n                    </mat-card-title>\\r\\n                </mat-card-header>\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutGap=\\\"20px\\\">\\r\\n                        <mat-form-field fxFlex=\\\"52%\\\">\\r\\n                            <mat-select [formControl]=\\\"newContractsCtrl\\\"\\r\\n                                        placeholder=\\\"New Contracts\\\"\\r\\n                                        (selectionChange)='onFXDealSelected($event)'>\\r\\n                                <mat-option *ngFor=\\\"let newContractsTypes of newBiznewContractTypes\\\"\\r\\n                                            [value]=\\\"newContractsTypes.value\\\">\\r\\n                                    {{newContractsTypes.newBizNewContractsTypesDescription}}</mat-option>\\r\\n                            </mat-select>\\r\\n                            <mat-error *ngIf=\\\"newContractsCtrl.hasError('required')\\\">\\r\\n                                This field is required\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                        <atlas-dropdown-select fxFlex='48%'\\r\\n                                               [label]=\\\"'Amendments'\\\"\\r\\n                                               [options]=\\\"amendmentsTypeList\\\"\\r\\n                                               [fieldControl]=\\\"amendmentsCtrl\\\"\\r\\n                                               isEditable=true\\r\\n                                               (optionSelected)=\\\"selectionChanged($event)\\\"\\r\\n                                               [selectProperties]=\\\"amendmentsDisplayProperty\\\"\\r\\n                                               multiselect=true>\\r\\n                        </atlas-dropdown-select>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         class=\\\"view-realized-physicals-pnl\\\">\\r\\n                        <span fxFlex='50%'></span>\\r\\n                        <span fxLayoutAlign=\\\"right center\\\">\\r\\n                            <mat-checkbox [formControl]=\\\"amendmentSummaryCtrl\\\"\\r\\n                                          (change)=\\\"onAmendmentSummaryChanged($event)\\\">Amendment Summary\\r\\n                            </mat-checkbox>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         class=\\\"container-custom\\\">\\r\\n                        <span fxFlex='50%'></span>\\r\\n                        <span fxLayoutAlign=\\\"right center\\\">\\r\\n                            <mat-checkbox [formControl]=\\\"amendmentDetailsCtrl\\\"\\r\\n                                          (change)=\\\"onAmendmentDetailsChanged($event)\\\">Amendment Details\\r\\n                            </mat-checkbox>\\r\\n                        </span>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n            <atlas-filter-set-display fxFlex=\\\"40%\\\"\\r\\n                                      [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                                      [gridCode]=\\\"gridCode\\\"\\r\\n                                      (filtersChanged)=onFilterSetChanged($event)\\r\\n                                      [company]=\\\"company\\\">\\r\\n            </atlas-filter-set-display>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\">\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"generate-report-button\\\"\\r\\n                    (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n        </div>\\r\\n    </form>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 #ssrsReportViewer>\\r\\n        </atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".report-container {\\n  height: 60vh; }\\n\"","import { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCheckboxChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AmendmentsType } from '../../../../../shared/entities/ammendments-type.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NewBizDateTypes } from '../../../../../shared/entities/newBizDateTypes.entity';\r\nimport { NewBizNewContractsTypes } from '../../../../../shared/entities/newBizNewContractTypes.entity';\r\nimport { NewBizStyleTypes } from '../../../../../shared/entities/newBizStyleTypes.entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { WINDOW } from '../../../../../shared/entities/window-injection-token';\r\nimport { NewBizSummaryDetails } from '../../../../../shared/enums/newbiz-summary-details.enum';\r\nimport { newBizDateType } from '../../../../../shared/enums/newBizDateType.enum';\r\nimport { newBizNewContractType } from '../../../../../shared/enums/newBizNewContractType-enum';\r\nimport { newBizStyleType } from '../../../../../shared/enums/newBizStyleType.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { ReportingService } from '../../../../../shared/services/http-services/reporting.service';\r\nimport { PredicateReference } from '../../../../../shared/services/reporting/dtos/predicate-reference';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { dateAfter } from '../../../../../trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-date-validator.validator';\r\n\r\n@Component({\r\n    selector: 'atlas-new-biz-report',\r\n    templateUrl: './new-biz-report.component.html',\r\n    styleUrls: ['./new-biz-report.component.scss'],\r\n})\r\nexport class NewBizReportComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n\r\n    destroy$ = new Subject();\r\n    company: string;\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/Newbiz/NewBiz';\r\n    parameters: any[] = [];\r\n    newBizDateTypes: NewBizDateTypes[] = [];\r\n    newBizStyleTypes: NewBizStyleTypes[] = [];\r\n    newBiznewContractTypes: NewBizNewContractsTypes[] = [];\r\n    amendmentsTypeList: AmendmentsType[] = [];\r\n    amendmentsDisplayProperty: string[] = ['name'];\r\n    contractDateCtrl = new AtlasFormControl('contractDateCtrl');\r\n    newBizDateFromCtrl = new AtlasFormControl('newBizDateFromCtrl');\r\n    newBizDateToCtrl = new AtlasFormControl('newBizDateToCtrl');\r\n    newBizReportDepartmentCtrl = new AtlasFormControl('newBizReportDepartmentCtrl');\r\n    styleCtrl = new AtlasFormControl('styleCtrl');\r\n    newContractsCtrl = new AtlasFormControl('newContractsCtrl');\r\n    amendmentsCtrl = new AtlasFormControl('amendmentsCtrl');\r\n    amendmentSummaryCtrl = new AtlasFormControl('summary');\r\n    amendmentDetailsCtrl = new AtlasFormControl('details');\r\n    newBizReportFormGroup: FormGroup;\r\n    now: moment.Moment;\r\n    filteredDepartmentList: Department[];\r\n    departmentErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list.');\r\n    selectErrorMap: Map<string, string> = new Map();\r\n    filteredQuantityCode: WeightUnit[] = [];\r\n    amendmentsArray: AmendmentsType[] = [];\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [MasterDataProps.WeightUnits];\r\n    amendmentSummary: boolean = true;\r\n    amendmentDetails: boolean = true;\r\n    filters: ListAndSearchFilter[] = [];\r\n    gridCode = 'newBizReportGrid';\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private snackbarService: SnackbarService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private utilService: UtilService,\r\n        private reportingService: ReportingService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private companyManager: CompanyManagerService,\r\n        @Inject(WINDOW) private window: Window) {\r\n        super(formConfigurationProvider);\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n        this.amendmentsTypeList = AmendmentsType.getAmendmentsTypeList();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredDepartmentList = this.masterData.departments;\r\n        this.filteredQuantityCode = this.masterData.weightUnits;\r\n\r\n        for (const type in newBizDateType) {\r\n            if (typeof newBizDateType[type] === 'number') {\r\n                this.newBizDateTypes.push({ value: newBizDateType[type] as any, newBizDateTypesDescription: type });\r\n            }\r\n        }\r\n        for (const type in newBizStyleType) {\r\n            if (typeof newBizStyleType[type] === 'number') {\r\n                this.newBizStyleTypes.push({ value: newBizStyleType[type] as any, newBizStyleTypesDescription: type });\r\n            }\r\n        }\r\n        for (const type in newBizNewContractType) {\r\n            if (typeof newBizNewContractType[type] === 'number') {\r\n                this.newBiznewContractTypes.push({ value: newBizNewContractType[type] as any, newBizNewContractsTypesDescription: type });\r\n            }\r\n        }\r\n\r\n        this.initializeForm();\r\n        this.newBizReportDepartmentCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartmentList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.departments,\r\n                ['departmentCode', 'description'],\r\n            );\r\n        });\r\n        this.amendmentDetailsCtrl.setValue(true);\r\n        this.amendmentSummaryCtrl.setValue(true);\r\n        this.loadGridConfiguration();\r\n    }\r\n\r\n    setDefaultValues() {\r\n        this.contractDateCtrl.patchValue(newBizDateType.ContractDate);\r\n        this.styleCtrl.patchValue(newBizStyleType.TradeNet);\r\n        this.newContractsCtrl.patchValue(newBizNewContractType.PhysicalsFlatPriceContracts);\r\n        const val = this.amendmentsTypeList.filter((status) => status.name === 'Physicals Amendments');\r\n        this.amendmentsCtrl.patchValue(val);\r\n    }\r\n\r\n    initializeForm() {\r\n        this.newBizReportFormGroup = this.formBuilder.group({\r\n            contractDateCtrl: this.contractDateCtrl,\r\n            newBizDateFromCtrl: this.newBizDateFromCtrl,\r\n            newBizDateToCtrl: this.newBizDateToCtrl,\r\n            newBizReportDepartmentCtrl: this.newBizReportDepartmentCtrl,\r\n            styleCtrl: this.styleCtrl,\r\n            newContractsCtrl: this.newContractsCtrl,\r\n            amendmentsCtrl: this.amendmentsCtrl,\r\n            amendmentSummaryCtrl: this.amendmentSummaryCtrl,\r\n            amendmentDetailsCtrl: this.amendmentDetailsCtrl,\r\n        },\r\n            { validator: dateAfter('newBizDateToCtrl', 'newBizDateFromCtrl') });\r\n\r\n        this.setDefaultValues();\r\n        this.setValidators();\r\n        return this.newBizReportFormGroup;\r\n    }\r\n\r\n    setValidators() {\r\n        this.contractDateCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.newBizDateFromCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n        this.newBizDateToCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.styleCtrl.setValidators(\r\n            Validators.compose([Validators.required]),\r\n        );\r\n\r\n        this.newBizReportFormGroup.updateValueAndValidity();\r\n\r\n        this.newBizReportDepartmentCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.departments,\r\n                    nameof<Department>('departmentCode'),\r\n                    true,\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    onFXDealSelected(amendmentValue: any) {\r\n        if (amendmentValue.value === newBizNewContractType.FXDeals) {\r\n            const fxAmendmentsTypeList: AmendmentsType[] = new Array<AmendmentsType>();\r\n            this.amendmentsTypeList = fxAmendmentsTypeList;\r\n            this.amendmentsTypeList = AmendmentsType.getFXDealAmendmentsTypeList();\r\n            const val = this.amendmentsTypeList.filter((status) => status.name === 'FX Deal Amendments');\r\n            this.amendmentsCtrl.patchValue(val);\r\n        } else {\r\n            this.amendmentsTypeList = AmendmentsType.getAmendmentsTypeList();\r\n            const val = this.amendmentsTypeList.filter((status) => status.name === 'Physicals Amendments');\r\n            this.amendmentsCtrl.patchValue(val);\r\n        }\r\n        this.amendmentDetailsCtrl.enable();\r\n        this.amendmentSummaryCtrl.enable();\r\n    }\r\n\r\n    selectionChanged(amendmentVal: string[]) {\r\n        if (amendmentVal) {\r\n            if (amendmentVal.length === 0) {\r\n                this.amendmentDetailsCtrl.setValue(false);\r\n                this.amendmentSummaryCtrl.setValue(false);\r\n                this.amendmentDetailsCtrl.disable();\r\n                this.amendmentSummaryCtrl.disable();\r\n            } else {\r\n                this.amendmentDetailsCtrl.enable();\r\n                this.amendmentSummaryCtrl.enable();\r\n            }\r\n        }\r\n    }\r\n\r\n    onFilterSetChanged(filters: ListAndSearchFilter[]) {\r\n        this.filters = filters;\r\n        if (filters) {\r\n            if (this.filters.length > 0) {\r\n                this.onGenerateReportButtonClicked();\r\n            }\r\n        }\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n            });\r\n    }\r\n\r\n    onAmendmentSummaryChanged(event: MatCheckboxChange) {\r\n        this.amendmentSummary = event.checked;\r\n    }\r\n\r\n    onAmendmentDetailsChanged(event: MatCheckboxChange) {\r\n        this.amendmentDetails = event.checked;\r\n    }\r\n\r\n    getBasicParameters() {\r\n        const dateFrom = (this.newBizDateFromCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n        const dateTo = (this.newBizDateToCtrl.value as moment.Moment).format('YYYY-MM-DD');\r\n        const department = this.newBizReportDepartmentCtrl.value ?\r\n            (this.newBizReportDepartmentCtrl.value as Department).departmentId : '';\r\n        const amendments = (this.amendmentsCtrl.value as AmendmentsType[]).map((status) => status.value);\r\n        let options: number;\r\n        if (this.amendmentSummary && this.amendmentDetails) {\r\n            options = NewBizSummaryDetails.SummaryAndDetail;\r\n        } else if (this.amendmentDetails) {\r\n            options = NewBizSummaryDetails.Detail;\r\n        } else if (this.amendmentSummary) {\r\n            options = NewBizSummaryDetails.Summary;\r\n        }\r\n\r\n        const parameters: any[] = [\r\n            { name: 'Company', value: this.company },\r\n            { name: 'FromDate', value: dateFrom },\r\n            { name: 'ToDate', value: dateTo },\r\n        ];\r\n\r\n        if (this.amendmentsCtrl.value && this.amendmentsCtrl.value.length !== 0) {\r\n            this.parameters.push({ name: 'Options', value: options });\r\n        }\r\n        if (this.contractDateCtrl.value !== '') {\r\n            this.parameters.push({ name: 'DateType', value: this.contractDateCtrl.value });\r\n        }\r\n        if (department !== '') {\r\n            this.parameters.push({ name: 'Department', value: department });\r\n        }\r\n\r\n        if (this.styleCtrl.value !== '') { this.parameters.push({ name: 'Style', value: this.styleCtrl.value }); }\r\n\r\n        if (this.newContractsCtrl.value !== '') { this.parameters.push({ name: 'NewContracts', value: this.newContractsCtrl.value }); }\r\n\r\n        amendments.forEach((id: number) => {\r\n            this.parameters.push({ name: 'Amendments', value: id });\r\n        });\r\n        return parameters;\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        if (!this.newBizReportFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please check the errors.');\r\n            return;\r\n        }\r\n\r\n        if (this.filters && this.filters.length > 0) {\r\n            this.reportingService.createReportCriterias(this.gridCode, this.filters).pipe(\r\n                takeUntil(\r\n                    this.destroy$,\r\n                )).subscribe((filterSetId: PredicateReference) => {\r\n                    const predicateId = [{ name: 'PredicateId', value: filterSetId.predicateId }];\r\n                    this.generateReport(predicateId);\r\n                });\r\n        } else {\r\n            this.generateReport();\r\n        }\r\n\r\n    }\r\n\r\n    generateReport(additionalParameters: any[] = []) {\r\n        if (this.amendmentsCtrl.value) {\r\n            if (this.amendmentsCtrl.value.length !== 0 && this.amendmentSummary === false && this.amendmentDetails === false) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Select atleast one AmendmentReport from list',\r\n                );\r\n            } else {\r\n                this.parameters = [];\r\n                this.parameters = this.parameters.concat(additionalParameters);\r\n                this.parameters = this.parameters.concat(\r\n                    this.getBasicParameters());\r\n\r\n                this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","import { FormGroup, ValidatorFn } from '@angular/forms';\r\nimport * as _moment from 'moment';\r\nconst moment = _moment;\r\n\r\nexport function beforeFromDate(fromFormControlName: string, toFormControlName: string): ValidatorFn {\r\n    return (abstractForm: FormGroup): { [key: string]: any } => {\r\n        const fromFormControl = abstractForm.get(fromFormControlName);\r\n        const toFormControl = abstractForm.get(toFormControlName);\r\n        if (fromFormControl && fromFormControl.value\r\n            && toFormControl && toFormControl.value) {\r\n            const isDatebeforeFrom = fromFormControl.value.format('YYYY-MM-DD') > toFormControl.value.format('YYYY-MM-DD')\r\n                ? true : false;\r\n            if (isDatebeforeFrom) {\r\n                toFormControl.setErrors({ isClientDateBeforeValid: true });\r\n                return { isClientDateBeforeValid: true };\r\n            } else {\r\n                toFormControl.setErrors(null);\r\n                return null;\r\n            }\r\n\r\n        }\r\n        return null;\r\n    };\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"nominalReportFormGroup\\\">\\r\\n        <div fxLayout=\\\"row wrap\\\">\\r\\n            <mat-card class=\\\"flex-item-marge\\\"\\r\\n                      fxFlex=\\\"calc(60% - 16px)\\\"\\r\\n                      fxFlex.lt-md=\\\"100%\\\">\\r\\n                <mat-card-content fxLayout=\\\"column\\\"\\r\\n                                  fxLayoutGap=\\\"1%\\\">\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"start\\\"\\r\\n                             fxLayoutGap=\\\"3%\\\"\\r\\n                             fxFlex=\\\"50%\\\">\\r\\n                            <mat-card-title>Report Parameters</mat-card-title>\\r\\n                            <div fxLayout=\\\"column\\\"\\r\\n                                 fxLayoutAlign=\\\"start\\\"\\r\\n                                 fxLayoutGap=\\\"1%\\\">\\r\\n                                <span>\\r\\n                                    <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                                        <mat-select (selectionChange)=\\\"optionValueChanged($event)\\\"\\r\\n                                                    [formControl]=\\\"reportStyleCtrl\\\"\\r\\n                                                    [required]=\\\"reportStyleCtrl.isRequired\\\"\\r\\n                                                    placeholder=\\\"Report Style\\\">\\r\\n                                            <mat-option *ngFor=\\\"let reportStyle of reportStyleTypes\\\"\\r\\n                                                        [value]=\\\"reportStyle.value\\\">\\r\\n                                                {{reportStyle.reportStyleDescription}}</mat-option>\\r\\n                                        </mat-select>\\r\\n                                        <mat-error *ngIf=\\\"reportStyleCtrl.hasError('required')\\\">\\r\\n                                            This field is required\\r\\n                                        </mat-error>\\r\\n                                    </mat-form-field>\\r\\n                                    <mat-form-field fxFlex=\\\"40%\\\">\\r\\n                                        <mat-select [formControl]=\\\"accountTypeCtrl\\\"\\r\\n                                                    [required]=\\\"accountTypeCtrl.isRequired\\\"\\r\\n                                                    placeholder=\\\"Account Type\\\">\\r\\n                                            <mat-option *ngFor=\\\"let accountType of nominalAccountTypes\\\"\\r\\n                                                        [value]=\\\"accountType.value\\\">\\r\\n                                                {{accountType.accountTypeDescription}}\\r\\n                                            </mat-option>\\r\\n                                        </mat-select>\\r\\n                                        <mat-error *ngIf=\\\"accountTypeCtrl.hasError('required')\\\">\\r\\n                                            This field is required\\r\\n                                        </mat-error>\\r\\n                                    </mat-form-field>\\r\\n                                </span>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"end\\\"\\r\\n                             fxFlex=\\\"50%\\\"\\r\\n                             class=\\\"documentDateField\\\">\\r\\n                            <mat-card-title>Document Date Range </mat-card-title>\\r\\n                            <span fxLayoutGap=\\\"2%\\\">\\r\\n                                <atlas-date-picker fxFlex=\\\"30%\\\"\\r\\n                                                   isEditable=true\\r\\n                                                   label=\\\"From\\\"\\r\\n                                                   required\\r\\n                                                   [fieldControl]=\\\"documentDateFromCtrl\\\"\\r\\n                                                   (dateChanged)=\\\"onDateChanged()\\\">\\r\\n                                </atlas-date-picker>\\r\\n                                <atlas-date-picker fxFlex=\\\"30%\\\"\\r\\n                                                   isEditable=true\\r\\n                                                   label=\\\"To\\\"\\r\\n                                                   required\\r\\n                                                   [errorMap]=\\\"documentRangeErrorMap\\\"\\r\\n                                                   [fieldControl]=\\\"documentDateToCtrl\\\"\\r\\n                                                   (dateChanged)=\\\"onDateChanged()\\\">\\r\\n                                </atlas-date-picker>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\"\\r\\n                         class=\\\"top-margin\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"start\\\"\\r\\n                             fxFlex=\\\"58%\\\">\\r\\n                            <h3>Nominal Report Filter</h3>\\r\\n                            <div fxLayout=\\\"column\\\"\\r\\n                                 fxLayoutAlign=\\\"start\\\">\\r\\n                                <span fxLayoutGap=\\\"10%\\\">\\r\\n                                    <atlas-masterdata-user-preferences-input fxFlex=\\\"40%\\\"\\r\\n                                                                             class=\\\"contextual-search-for-nominalaccount\\\"\\r\\n                                                                             [fieldControl]=\\\"nominalAccountsCtrl\\\"\\r\\n                                                                             [options]=\\\"filteredNominalAccountList\\\"\\r\\n                                                                             label=\\\"Nominal Account\\\"\\r\\n                                                                             displayProperty=\\\"accountNumber\\\"\\r\\n                                                                             tooltip=\\\"detailedDescription\\\"\\r\\n                                                                             [selectProperties]=\\\" ['accountNumber', 'detailedDescription']\\\"\\r\\n                                                                             [errorMap]=\\\"nominalAccountErrorMap\\\"\\r\\n                                                                             lightBoxTitle=\\\"Results for Nominal Accounts\\\"\\r\\n                                                                             gridId=\\\"nominalAccountsGrid\\\">\\r\\n                                    </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n                                    <atlas-masterdata-user-preferences-input fxFlex=\\\"40%\\\"\\r\\n                                                                             class=\\\"contextual-search-for-currency\\\"\\r\\n                                                                             [fieldControl]=\\\"currencyCtrl\\\"\\r\\n                                                                             [options]=\\\"filteredCurrencyList\\\"\\r\\n                                                                             label=\\\"Currency\\\"\\r\\n                                                                             displayProperty=\\\"currencyCode\\\"\\r\\n                                                                             tooltip=\\\"description\\\"\\r\\n                                                                             [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                                                             [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                                                             lightBoxTitle=\\\"Results for Currency\\\"\\r\\n                                                                             gridId=\\\"currenciesGrid\\\">\\r\\n                                    </atlas-masterdata-user-preferences-input>\\r\\n\\r\\n                                </span>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"end\\\"\\r\\n                             fxLayoutGap=\\\"3%\\\"\\r\\n                             fxFlex=\\\"50%\\\">\\r\\n                            <mat-card-title>Accounting Period Range</mat-card-title>\\r\\n                            <span fxLayoutGap=\\\"5%\\\">\\r\\n                                <atlas-month-date-picker fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=true\\r\\n                                                         label=\\\"From\\\"\\r\\n                                                         [fieldControl]=\\\"accountingDateFromCtrl\\\"\\r\\n                                                         (monthChanged)=\\\"onMonthChanged()\\\">\\r\\n                                </atlas-month-date-picker>\\r\\n                                <atlas-month-date-picker fxFlex=\\\"30%\\\"\\r\\n                                                         isEditable=true\\r\\n                                                         label=\\\"To\\\"\\r\\n                                                         [errorMap]=\\\"accountPeriodRangeErrorMap\\\"\\r\\n                                                         [fieldControl]=\\\"accountingDateToCtrl\\\"\\r\\n                                                         (monthChanged)=\\\"onMonthChanged()\\\">\\r\\n                                </atlas-month-date-picker>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"end start\\\"\\r\\n                             fxFlex=\\\"50%\\\">\\r\\n                            <mat-slide-toggle [formControl]=\\\"functionalCurrencyCtrl\\\"\\r\\n                                              *ngIf=\\\"reportStyleCtrl.value === ReportStyleType.Summary\\\">Functional\\r\\n                                currency only\\r\\n                            </mat-slide-toggle>\\r\\n                            <mat-slide-toggle [formControl]=\\\"broughtForwardCtrl\\\"\\r\\n                              (change)=\\\"toToggleChanged($event)\\\">\\r\\n                                Brought forward Balance required</mat-slide-toggle>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n\\r\\n            <atlas-filter-set-display fxFlex=\\\"calc(40% - 16px)\\\"\\r\\n                                      fxFlex.lt-md=\\\"100%\\\"\\r\\n                                      (filtersChanged)=\\\"onFilterSetChanged($event)\\\"\\r\\n                                      [columnConfiguration]=\\\"getColumnConfig()\\\"\\r\\n                                      [gridCode]=\\\"getGridCode()\\\"\\r\\n                                      [company]=\\\"company\\\"\\r\\n                                      #filterSetDisplay>\\r\\n            </atlas-filter-set-display>\\r\\n        </div>\\r\\n    </form>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-raised-button\\r\\n                (click)=\\\"onGenerateReportButtonClicked(true)\\\">GENERATE REPORT\\r\\n        </button>\\r\\n    </div>\\r\\n    <mat-tab-group *ngIf=\\\"isTabEnalble\\\"\\r\\n                   [selectedIndex]=\\\"tabIndex\\\"\\r\\n                   (selectedIndexChange)=onSelectedIndexChanged($event)>\\r\\n        <mat-tab label=\\\"Overview\\\"></mat-tab>\\r\\n        <mat-tab label=\\\"Details\\\"></mat-tab>\\r\\n    </mat-tab-group>\\r\\n    <div class=\\\"content-tab\\\">\\r\\n        <mat-tab-group [selectedIndex]=\\\"tabIndex\\\">\\r\\n            <mat-tab>\\r\\n                <atlas-overview-tab #overviewComponent\\r\\n                                    [isTabEnalble]=\\\"isTabEnalble\\\"\\r\\n                                    [reportStyleCtrl]=\\\"reportStyleCtrl\\\"\\r\\n                                    [reportStyleTypes]=\\\"reportStyleTypes\\\"\\r\\n                                    [accountTypeCtrl]=\\\"accountTypeCtrl\\\"\\r\\n                                    [nominalAccountTypes]=\\\"nominalAccountTypes\\\"\\r\\n                                    [documentDateFromCtrl]=\\\"documentDateFromCtrl\\\"\\r\\n                                    [documentDateToCtrl]=\\\"documentDateToCtrl\\\"\\r\\n                                    [accountingDateFromCtrl]=\\\"accountingDateFromCtrl\\\"\\r\\n                                    [accountingDateToCtrl]=\\\"accountingDateToCtrl\\\"\\r\\n                                    [functionalCurrencyCtrl]=\\\"functionalCurrencyCtrl\\\"\\r\\n                                    [currencyCtrl]=\\\"currencyCtrl\\\"\\r\\n                                    [nominalAccountsCtrl]=\\\"nominalAccountsCtrl\\\"\\r\\n                                    [nominalReportFormGroup]=\\\"nominalReportFormGroup\\\"></atlas-overview-tab>\\r\\n            </mat-tab>\\r\\n            <mat-tab>\\r\\n                <atlas-detail-tab #detailComponent\\r\\n                                  [isTabEnalble]=\\\"isTabEnalble\\\"\\r\\n                                  [reportStyleCtrl]=\\\"reportStyleCtrl\\\"\\r\\n                                  [reportStyleTypes]=\\\"reportStyleTypes\\\"\\r\\n                                  [accountTypeCtrl]=\\\"accountTypeCtrl\\\"\\r\\n                                  [nominalAccountTypes]=\\\"nominalAccountTypes\\\"\\r\\n                                  [documentDateFromCtrl]=\\\"documentDateFromCtrl\\\"\\r\\n                                  [documentDateToCtrl]=\\\"documentDateToCtrl\\\"\\r\\n                                  [accountingDateFromCtrl]=\\\"accountingDateFromCtrl\\\"\\r\\n                                  [accountingDateToCtrl]=\\\"accountingDateToCtrl\\\"\\r\\n                                  [functionalCurrencyCtrl]=\\\"functionalCurrencyCtrl\\\"\\r\\n                                  [currencyCtrl]=\\\"currencyCtrl\\\"\\r\\n                                  [nominalAccountsCtrl]=\\\"nominalAccountsCtrl\\\"\\r\\n                                  [nominalReportFormGroup]=\\\"nominalReportFormGroup\\\"></atlas-detail-tab>\\r\\n            </mat-tab>\\r\\n        </mat-tab-group>\\r\\n    </div>\\r\\n    <mat-card *ngIf=\\\"!isTabEnalble\\\">\\r\\n        <mat-card-content>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"agGridOptions && agGridOptions.columnDefs && isNominalReportDisplay\\\"\\r\\n                                            [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"getGridCode()\\\"\\r\\n                                            [isAutosize]=\\\"false\\\"\\r\\n                                            fxLayoutAlign=\\\"end\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 *ngIf='isNominalReportDisplay'\\r\\n                 class=\\\"quick-sum-div-height\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleQuickSum($event.checked)\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                    <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                        <span class=\\\"quick-sum-span\\\"\\r\\n                              *ngIf=\\\"quickSumModeActivated\\\">{{column.name}} : {{column.sum | number }} </span>\\r\\n                    </div>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                            class=\\\"mat-button-user-margin\\\"\\r\\n                            *ngIf=\\\"quickSumModeActivated\\\">Clear Selection</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"agGridOptions\\\"\\r\\n                 [ngClass]='classApplied'\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 [ngClass]=\\\"{'hidden-during-loading':!isNominalReportDisplay}\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"agGridRows\\\"\\r\\n                                 [columnDefs]=\\\"agGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"100\\\"\\r\\n                                 [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [enableRangeSelection]=\\\"true\\\"\\r\\n                                 [groupMultiAutoColumn]=\\\"groupMultiAutoColumn\\\"\\r\\n                                 [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (columnRowGroupChanged)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \".quick-sum-div-height {\\n  height: 25px !important; }\\n\\n.quick-sum-span {\\n  font: 400 14px/20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  margin-right: 4px; }\\n\\nbutton.mat-raised-button {\\n  margin: 0px !important; }\\n\\n.top-margin {\\n  margin-top: 15px; }\\n\\ndiv.reportParameterField {\\n  min-width: 63%; }\\n\\ndiv.documentDateField {\\n  margin-left: -5.5%; }\\n\"","import { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatMenuTrigger, MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize, first } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { UserGridViewDto } from '../../../../../shared/dtos/user-grid-view-dto.dto';\r\nimport { FilterSetDisplayComponent } from '../../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AccountingSetup } from '../../../../../shared/entities/accounting-setup.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Currency } from '../../../../../shared/entities/currency.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccountTypes } from '../../../../../shared/entities/nominal-account-type.entity';\r\nimport { NominalAccount } from '../../../../../shared/entities/nominal-account.entity';\r\nimport { ReportStyleTypes } from '../../../../../shared/entities/report-style-type.entity';\r\nimport { UserGridPreferencesParameters } from '../../../../../shared/entities/user-grid-preferences-parameters.entity';\r\nimport { WINDOW } from '../../../../../shared/entities/window-injection-token';\r\nimport { ListAndSearchFilterType } from '../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { NominalAccountType } from '../../../../../shared/enums/nominal-account-type-enum';\r\nimport { ReportStyleType } from '../../../../../shared/enums/report-style-type.enum';\r\nimport { FormatDatePipe } from '../../../../../shared/pipes/format-date-pipe.pipe';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { TransactionReportCommand } from '../../../../../shared/services/execution/dtos/transaction-report-command';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { PreaccountingService } from '../../../../../shared/services/http-services/preaccounting.service';\r\nimport { NominalReportDataLoader } from '../../../../../shared/services/list-and-search/nominalReport-data-loader';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\nimport { beforeFromDate } from './nominal-report-period-validator.validator';\r\nimport { DetailTabComponent } from './tabs/detail-tab/detail-tab.component';\r\nimport { OverviewTabComponent } from './tabs/overview-tab/overview-tab.component';\r\n\r\n@Component({\r\n    selector: 'atlas-nominal-report',\r\n    providers: [NominalReportDataLoader],\r\n    templateUrl: './nominal-report.component.html',\r\n    styleUrls: ['./nominal-report.component.scss'],\r\n})\r\nexport class NominalReportComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplay') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    @ViewChild('overviewComponent') overviewComponent: OverviewTabComponent;\r\n    @ViewChild('detailComponent') detailComponent: DetailTabComponent;\r\n    gridContext: NominalReportComponent;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridRows: any[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = false;\r\n    nominalTransactionGridCode: string = 'nominalReportTransactionGrid';\r\n    nominalTransactionGridConfig: ColumnConfigurationProperties[] = [];\r\n    nominalTrabsactionQuickSumColumns: string[] = [];\r\n    nominalSummaryGridCode: string = 'nominalReportSummaryGrid';\r\n    nominalSummaryGridConfig: ColumnConfigurationProperties[] = [];\r\n    nominalSummaryQuickSumColumns: string[] = [];\r\n    gridTitle: string;\r\n    excelStyles: any;\r\n    isUserPreferencesDisplay: boolean = false;\r\n    isNominalReportDisplay: boolean = false;\r\n    rowGroupPanelShow: string = 'onlyWhenGrouping';\r\n    groupMultiAutoColumn: boolean;\r\n    checkFunctionalCurrency: string;\r\n    checkStatutoryCurrency: string;\r\n    isBroughtForward :boolean =false;\r\n\r\n    reportStyleCtrl = new AtlasFormControl('reportStyleTypes');\r\n    reportStyleTypes: ReportStyleTypes[] = [];\r\n    accountTypeCtrl = new AtlasFormControl('nominalAccountTypes');\r\n    nominalAccountTypes: NominalAccountTypes[] = [];\r\n    documentDateFromCtrl = new AtlasFormControl('documentFromCtrl');\r\n    documentDateToCtrl = new AtlasFormControl('documentToCtrl');\r\n    accountingDateFromCtrl = new AtlasFormControl('accountingDateFromCtrl');\r\n    accountingDateToCtrl = new AtlasFormControl('accountingDateToCtrl');\r\n    functionalCurrencyCtrl = new AtlasFormControl('nominalFunctionalCurrency');\r\n    broughtForwardCtrl = new AtlasFormControl('broughtForwardCtrl');\r\n    currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n    nominalAccountsCtrl = new AtlasFormControl('nominalAccountsCtrl');\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    masterdata: MasterData;\r\n    nominalReportFormGroup: FormGroup;\r\n    filteredCurrencyList: Currency[];\r\n    company: string;\r\n    filters: ListAndSearchFilter[] = [];\r\n    accountPeriodRangeErrorMap: Map<string, string> = new Map();\r\n    documentRangeErrorMap: Map<string, string> = new Map();\r\n    accountingSetupModel: AccountingSetup;\r\n    subscriptions: Subscription[] = [];\r\n    isGenerateButtonClicked: boolean = false;\r\n    hasGridSharing: boolean;\r\n    companyConfiguration: Company;\r\n    ReportStyleType = ReportStyleType;\r\n    filteredNominalAccountList: NominalAccount[];\r\n    isSummaryMode: boolean = false;\r\n    tabIndex: number;\r\n    isTabEnalble: boolean = false;\r\n\r\n    /* quick sum */\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    allowedColumnsforQuickSum: string[] = [];\r\n    currencyErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. Currency not in the list.');\r\n    nominalAccountErrorMap: Map<string, string> = new Map()\r\n        .set('inDropdownList', 'Invalid entry. NominalAccount not in the list.');\r\n    gridPreferences: UserGridPreferencesParameters;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: NominalReportDataLoader,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private preaccountingService: PreaccountingService,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n        this.accountPeriodRangeErrorMap\r\n            .set('isClientDateBeforeValid', 'Cannot be before Period From.');\r\n        this.documentRangeErrorMap\r\n            .set('isClientDateBeforeValid', 'Cannot be before Period From.');\r\n    }\r\n\r\n    getColumnConfig(): ColumnConfigurationProperties[] {\r\n        this.allowedColumnsforQuickSum = this.nominalSummaryQuickSumColumns;\r\n        return this.nominalSummaryGridConfig;\r\n    }\r\n\r\n    updateGroupDisplay() {\r\n\r\n        this.rowGroupPanelShow = 'never';\r\n        this.groupMultiAutoColumn = false;\r\n\r\n        this.agGridOptions.groupMultiAutoColumn = this.groupMultiAutoColumn;\r\n    }\r\n\r\n    setColumnConfig(config: ColumnConfigurationProperties[]): void {\r\n\r\n        this.rowGroupPanelShow = 'never';\r\n        this.groupMultiAutoColumn = false;\r\n        config = config.map((x) => {\r\n            x.isGroup = false; return x;\r\n        });\r\n        this.nominalSummaryGridConfig = config;\r\n\r\n        this.agGridOptions.groupMultiAutoColumn = this.groupMultiAutoColumn;\r\n    }\r\n\r\n    getGridCode(): string {\r\n\r\n        return this.nominalSummaryGridCode;\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        for (const type in ReportStyleType) {\r\n            if (typeof ReportStyleType[type] === 'number') {\r\n                this.reportStyleTypes.push({ value: ReportStyleType[type] as any, reportStyleDescription: type });\r\n            }\r\n        }\r\n        for (const type in NominalAccountType) {\r\n            if (typeof NominalAccountType[type] === 'number') {\r\n                this.nominalAccountTypes.push({ value: NominalAccountType[type] as any, accountTypeDescription: type });\r\n            }\r\n        }\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.reportStyleCtrl.patchValue(ReportStyleType.Summary);\r\n        this.accountTypeCtrl.patchValue(NominalAccountType.Both);\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        this.getFormGroup();\r\n        this.setValidators();\r\n        this.bindConfiguration();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.checkFunctionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.checkStatutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n        this.filteredCurrencyList = this.masterdata.currencies;\r\n        this.filteredNominalAccountList = this.masterdata.nominalAccounts.map(\r\n            (nominal) => {\r\n                nominal.accountNumber = nominal.accountNumber;\r\n                nominal.mainAccountTitle = nominal.shortDescription;\r\n                return nominal;\r\n            });\r\n        this.subscriptions.push(this.preaccountingService.getAccountingSetupDetails()\r\n            .subscribe((data) => {\r\n                this.accountingSetupModel = data;\r\n                if (this.accountingSetupModel.lastMonthClosed !== null) {\r\n                    const numberOfOpenPeriods = this.accountingSetupModel.numberOfOpenPeriod !== null ?\r\n                        this.accountingSetupModel.numberOfOpenPeriod : 1;\r\n                    this.accountingDateToCtrl.setValue(moment(this.accountingSetupModel.lastMonthClosed).add(numberOfOpenPeriods, 'month'));\r\n                    this.onMonthChanged();\r\n                }\r\n            }));\r\n        this.documentDateFromCtrl.setValue(moment().year(1980).month(0).date(1));\r\n        this.documentDateToCtrl.setValue(this.companyManager.getCurrentCompanyDate());\r\n        this.accountingDateFromCtrl.setValue(this.companyManager.getCurrentCompanyDate().month(0).date(1));\r\n        this.currencyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCurrencyList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.currencies,\r\n                ['currencyCode', 'description'],\r\n            );\r\n        });\r\n        this.nominalAccountsCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredNominalAccountList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.nominalAccounts,\r\n                ['accountNumber', 'detailedDescription'],\r\n            );\r\n        });\r\n\r\n        // quicksum\r\n        this.classApplied = this.defaultClass;\r\n        this.loadGridConfiguration();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n    getFormGroup(): FormGroup {\r\n        this.nominalReportFormGroup = this.formBuilder.group({\r\n            reportStyleCtrl: this.reportStyleCtrl,\r\n            accountTypeCtrl: this.accountTypeCtrl,\r\n            documentDateFromCtrl: this.documentDateFromCtrl,\r\n            documentDateToCtrl: this.documentDateToCtrl,\r\n            accountingDateFromCtrl: this.accountingDateFromCtrl,\r\n            accountingDateToCtrl: this.accountingDateToCtrl,\r\n            currencyCtrl: this.currencyCtrl,\r\n            nominalAccountsCtrl: this.nominalAccountsCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onFilterSetChanged(filters: ListAndSearchFilter[]) {\r\n        this.filters = filters;\r\n        this.onGenerateReportButtonClicked();\r\n    }\r\n\r\n    onGenerateReportButtonClicked(isGenerateButtonClicked?: boolean) {\r\n        this.isGenerateButtonClicked = isGenerateButtonClicked;\r\n\r\n        if (this.nominalReportFormGroup.valid && this.isGenerateButtonClicked) {\r\n\r\n            if (this.reportStyleCtrl.value === ReportStyleType.Transactions && !this.isSummaryMode) {\r\n                this.isTabEnalble = true;\r\n                this.onSelectedButtonChanged(0);\r\n                this.overviewComponent.isOverviewMode = true;\r\n                this.detailComponent.isDetailMode = true;\r\n            } else {\r\n                this.isTabEnalble = false;\r\n                this.overviewComponent.isOverviewMode = false;\r\n                this.detailComponent.isDetailMode = false;\r\n                this.toggleQuickSum(false);\r\n                const hasQuickSearchValues = (this.currencyCtrl.value && this.currencyCtrl.valid)\r\n                    || (this.nominalAccountsCtrl.value && this.nominalAccountsCtrl.valid);\r\n\r\n                if (hasQuickSearchValues) {\r\n                    const quickFilters: ListAndSearchFilter[] = [];\r\n                    if (this.currencyCtrl.value && this.currencyCtrl.valid) {\r\n                        const currencyField = this.columnConfiguration.find((column) => column.fieldName === 'Currency');\r\n\r\n                        const currencyFilter = new ListAndSearchFilter();\r\n                        currencyFilter.fieldId = currencyField.fieldId;\r\n                        currencyFilter.fieldName = currencyField.fieldName;\r\n                        currencyFilter.fieldFriendlyName = currencyField.fieldName;\r\n                        currencyFilter.isActive = true;\r\n                        currencyFilter.predicate = {\r\n                            filterType: ListAndSearchFilterType.Picklist,\r\n                            operator: 'eq',\r\n                            value1: (this.currencyCtrl.value as Currency).currencyCode,\r\n                        };\r\n                        quickFilters.push(currencyFilter);\r\n                        this.currencyCtrl.patchValue(null);\r\n                        this.currencyCtrl.reset();\r\n                    }\r\n\r\n                    if (this.nominalAccountsCtrl.value && this.nominalAccountsCtrl.valid) {\r\n                        const nominalAccountsField = this.columnConfiguration.find((column) => column.fieldName === 'NominalAccount');\r\n\r\n                        const nominalAccountsFilter = new ListAndSearchFilter();\r\n                        nominalAccountsFilter.fieldId = nominalAccountsField.fieldId;\r\n                        nominalAccountsFilter.fieldName = nominalAccountsField.fieldName;\r\n                        nominalAccountsFilter.fieldFriendlyName = nominalAccountsFilter.fieldName;\r\n                        nominalAccountsFilter.isActive = true;\r\n                        nominalAccountsFilter.predicate = {\r\n                            filterType: ListAndSearchFilterType.Picklist,\r\n                            operator: 'eq',\r\n                            value1: (this.nominalAccountsCtrl.value as NominalAccount).accountNumber,\r\n                        };\r\n                        quickFilters.push(nominalAccountsFilter);\r\n                        this.nominalAccountsCtrl.reset();\r\n                    }\r\n                    this.filterSetDisplayComponent.loadFilterSet(quickFilters, true);\r\n                    this.filters = quickFilters;\r\n                }\r\n                const columnConfig = this.getColumnConfig();\r\n                if (columnConfig.length === 0) {\r\n                    this.loadGridConfiguration();\r\n                } else {\r\n                    this.initColumns();\r\n                }\r\n\r\n                this.loadData();\r\n            }\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        const clientReport = this.getNominalReportData();\r\n        this.isLoading = true;\r\n        this.isNominalReportDisplay = false;\r\n        this.dataLoader.getData(this.filters, null, null, null, clientReport)\r\n            .pipe(\r\n                first(),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((data) => {\r\n                this.agGridRows = data.value;\r\n                this.isNominalReportDisplay = true;\r\n            });\r\n    }\r\n\r\n    getNominalReportData() {\r\n        const nominalReport = new TransactionReportCommand();\r\n        nominalReport.functionalCurrency = this.functionalCurrencyCtrl.value !== ''\r\n            ? this.functionalCurrencyCtrl.value : null;\r\n        nominalReport.broughtForward = this.isBroughtForward;\r\n        nominalReport.accountType = this.accountTypeCtrl.value !== null ? this.accountTypeCtrl.value : null;\r\n        nominalReport.fromDate = this.accountingDateFromCtrl.value !== null ? this.accountingDateFromCtrl.value : null;\r\n        nominalReport.toDate = this.accountingDateToCtrl.value !== null ? this.accountingDateToCtrl.value : null;\r\n        nominalReport.documentFromDate = this.documentDateFromCtrl.value !== null ? this.documentDateFromCtrl.value : null;\r\n        nominalReport.documentToDate = this.documentDateToCtrl.value !== null ? this.documentDateToCtrl.value : null;\r\n        nominalReport.reportStyleType = this.reportStyleCtrl.value !== null ? this.reportStyleCtrl.value : null;\r\n        return nominalReport;\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.getGridCode())\r\n            .subscribe((configuration) => {\r\n                this.setColumnConfig(configuration.columns);\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns();\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n\r\n                this.gridPreferences = new UserGridPreferencesParameters(\r\n                    {\r\n                        company: this.company,\r\n                        gridId: this.getGridCode(),\r\n                        gridOptions: this.agGridOptions,\r\n                        sharingEnabled: this.hasGridSharing,\r\n                    });\r\n            });\r\n    }\r\n    \r\n    toToggleChanged(event: MatSlideToggleChange) {\r\n        this.isBroughtForward =event.checked;\r\n        this.detailComponent.isBroughtForward =event.checked;\r\n        this.overviewComponent.isBroughtForward = event.checked;      \r\n    }\r\n\r\n    initColumns() {\r\n        this.updateGroupDisplay();\r\n        const configuration = this.getColumnConfig();\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(this.utilService.convertToCamelCase(column.fieldName));\r\n            }\r\n        });\r\n        this.agGridCols = configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                width: 100,\r\n                hide: !config.isVisible,\r\n                rowGroup: config.isGroup,\r\n                enableRowGroup: config.isGroup,\r\n            };\r\n            if (columnDef.field === 'functionalCurrency' ||\r\n                columnDef.field === 'statutoryCcyAmount' || columnDef.field === 'transactionalCurrency') {\r\n                columnDef.aggFunc = 'sum';\r\n                columnDef.headerName = config.friendlyName;\r\n\r\n                this.nominalSummaryQuickSumColumns.push(columnDef.field.toLocaleLowerCase());\r\n\r\n            }\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            if (columnDef.headerName === 'Functional Currency') {\r\n                columnDef.headerName = this.checkFunctionalCurrency + ' eq';\r\n            }\r\n            if (columnDef.headerName === 'Statutory Ccy Amount') {\r\n                columnDef.headerName = this.checkStatutoryCurrency + ' eq';\r\n            }\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field);\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n            return columnDef;\r\n        });\r\n\r\n        if (this.agGridOptions) {\r\n            this.agGridOptions.columnDefs = this.agGridCols;\r\n            if (this.agGridOptions.api) {\r\n                this.agGridOptions.api.setColumnDefs(this.agGridCols);\r\n                this.agGridColumnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n    }\r\n\r\n    numberFormatter(param) {\r\n        if (param.colDef.colId.toLowerCase() === 'transactionalcurrency' ||\r\n            param.colDef.colId.toLowerCase() === 'functionalcurrency' || param.colDef.colId.toLowerCase() === 'statutoryccyamount'\r\n            || param.colDef.colId.toLowerCase() === 'weight') {\r\n            if (param && param.value) {\r\n                const commonMethods = new CommonMethods();\r\n                if (param.colDef.colId.toLowerCase() === 'weight') {\r\n                    return commonMethods.getFormattedNumberValue(param.value, 3);\r\n                } else {\r\n                    return commonMethods.getFormattedNumberValue(param.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n\r\n        this.gridService.sizeColumns(this.agGridOptions);\r\n    }\r\n\r\n    setValidators() {\r\n        this.accountingDateFromCtrl.setValidators(Validators.required);\r\n        this.accountingDateToCtrl.setValidators(Validators.required);\r\n        this.documentDateFromCtrl.setValidators(Validators.required);\r\n        this.documentDateToCtrl.setValidators(Validators.required);\r\n        this.accountTypeCtrl.setValidators(Validators.required);\r\n        this.reportStyleCtrl.setValidators(Validators.required);\r\n        this.nominalReportFormGroup.setValidators(Validators.compose([beforeFromDate('accountingDateFromCtrl', 'accountingDateToCtrl'),\r\n        beforeFromDate('documentDateFromCtrl', 'documentDateToCtrl')]));\r\n        this.nominalReportFormGroup.updateValueAndValidity();\r\n        this.currencyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.nominalAccountsCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.nominalAccounts,\r\n                    nameof<NominalAccount>('accountNumber'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    onMonthChanged() {\r\n        this.accountingDateToCtrl.markAsTouched();\r\n        this.accountingDateFromCtrl.updateValueAndValidity();\r\n        this.accountingDateToCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    onDateChanged() {\r\n        this.documentDateToCtrl.markAsTouched();\r\n        this.documentDateToCtrl.updateValueAndValidity();\r\n        this.documentDateFromCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    // -- Quick Sum\r\n\r\n    toggleQuickSum(value: boolean) {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = value;\r\n        if (this.quickSumModeActivated) {\r\n            this.classApplied = this.cellSelectionClass;\r\n        } else {\r\n            this.classApplied = this.defaultClass;\r\n        }\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.agGridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n    onRangeSelectionChanged(event) {\r\n        this.selectedColumnsArray = [];\r\n\r\n        const rangeSelections = this.agGridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        // if there is only one column selected\r\n        if (rangeSelections && rangeSelections.length === 1) {\r\n            this.rangeSelectionCalculation(rangeSelections[0]);\r\n        } else {\r\n            const cellInfos: any = [];\r\n            const selectedCells: any = [];\r\n            rangeSelections.forEach((row) => {\r\n                const cellExists = selectedCells.find((cell) => cell.start.rowIndex === row.start.rowIndex &&\r\n                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId());\r\n                if (cellExists === null || cellExists === undefined) {\r\n                    selectedCells.push(row);\r\n\r\n                    const obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };\r\n                    cellInfos.push(obj);\r\n                }\r\n            });\r\n\r\n            let sum = 0;\r\n            let columnName: string;\r\n            let columnHeader: string;\r\n            const selectedColumnsArray = this.selectedColumnsArray;\r\n            const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n\r\n            selectedCells.forEach((row) => {\r\n                row.columns.forEach((column) => {\r\n                    sum = 0;\r\n                    columnName = column.getColDef().colId;\r\n                    columnHeader = column.getColDef().headerName;\r\n                    if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                        for (let rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {\r\n                            if (cellInfos[rowIndex].columnName === columnName) {\r\n                                const rowModel = this.agGridApi.getModel();\r\n                                const rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));\r\n                                const value = this.agGridApi.getValue(column, rowNode);\r\n                                sum += Number(value);\r\n                            }\r\n                        }\r\n\r\n                        const columnObj = selectedColumnsArray.find((sum) => sum.name === columnHeader);\r\n                        if (columnObj) {\r\n                            columnObj.sum = sum;\r\n                        } else {\r\n                            selectedColumnsArray.push({ name: columnHeader, sum });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            this.selectedColumnsArray = selectedColumnsArray;\r\n        }\r\n    }\r\n\r\n    rangeSelectionCalculation(rangeSelection: agGrid.RangeSelection) {\r\n        let sum = 0;\r\n        let columnName: string;\r\n        let columnHeader: string;\r\n        this.selectedColumnsArray = [];\r\n\r\n        const startRow = Math.min(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n        const endRow = Math.max(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n\r\n        const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n        rangeSelection.columns.forEach((column) => {\r\n            columnName = column.getColDef().colId;\r\n            columnHeader = column.getColDef().headerName;\r\n            if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = this.agGridApi.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = this.agGridApi.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n\r\n                this.selectedColumnsArray.push({ name: columnHeader, sum });\r\n            }\r\n        });\r\n    }\r\n    onSelectedIndexChanged(value: number) {\r\n        this.tabIndex = value;\r\n        if (this.isGenerateButtonClicked && !this.isSummaryMode) {\r\n            this.onSelectedButtonChanged(this.tabIndex);\r\n        }\r\n    }\r\n    optionValueChanged(event) {\r\n        if (event.value === ReportStyleType.Summary) {\r\n            this.isSummaryMode = true;\r\n        } else {\r\n            this.isSummaryMode = false;\r\n        }\r\n    }\r\n\r\n    onSelectedButtonChanged(tabIndex: number) {\r\n        switch (tabIndex) {\r\n            case 0: {\r\n                this.overviewComponent.onGenerateReportButtonClicked(true);\r\n                break;\r\n            }\r\n            case 1: {\r\n                this.detailComponent.onGenerateReportButtonClicked(true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    onGridViewSelected(gridViewId: number) {\r\n        this.gridPreferences.selectedGridViewId = gridViewId;\r\n        // this is to trigger the input setter in the enlarged grid child\r\n        this.gridPreferences = new UserGridPreferencesParameters(this.gridPreferences);\r\n    }\r\n\r\n    onGridEnlargementClose(lastUsedGridView: UserGridViewDto) {\r\n        if (lastUsedGridView && lastUsedGridView.gridViewId) {\r\n            this.userPreferencesComponent.loadGridView(lastUsedGridView.gridViewId, false);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngIf=\\\"isDetailMode\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"agGridOptions && agGridOptions.columnDefs && isNominalReportDisplay\\\"\\r\\n                                            [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"getGridCode()\\\"\\r\\n                                            [isAutosize]=\\\"false\\\"\\r\\n                                            [isSetColumnStateEnabled]=\\\"false\\\"\\r\\n                                            fxLayoutAlign=\\\"end\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 *ngIf='isNominalReportDisplay'\\r\\n                 class=\\\"quick-sum-div-height\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleQuickSum($event.checked)\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                    <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                        <span class=\\\"quick-sum-span\\\"\\r\\n                              *ngIf=\\\"quickSumModeActivated\\\">{{column.name}} : {{column.sum | number }} </span>\\r\\n                    </div>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                            class=\\\"mat-button-user-margin\\\"\\r\\n                            *ngIf=\\\"quickSumModeActivated\\\">Clear Selection</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"agGridOptions\\\"\\r\\n                 [ngClass]='classApplied'\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 [ngClass]=\\\"{'hidden-during-loading':!isNominalReportDisplay}\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"agGridRows\\\"\\r\\n                                 [columnDefs]=\\\"agGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"100\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [enableRangeSelection]=\\\"true\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnDestroy, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize, first } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../../../shared/entities/company.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { NominalAccountTypes } from '../../../../../../../shared/entities/nominal-account-type.entity';\r\nimport { ReportStyleTypes } from '../../../../../../../shared/entities/report-style-type.entity';\r\nimport { WINDOW } from '../../../../../../../shared/entities/window-injection-token';\r\nimport { NominalAccountType } from '../../../../../../../shared/enums/nominal-account-type-enum';\r\nimport { ReportStyleType } from '../../../../../../../shared/enums/report-style-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { TransactionReportCommand } from '../../../../../../../shared/services/execution/dtos/transaction-report-command';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { NominalReportDataLoader } from '../../../../../../../shared/services/list-and-search/nominalReport-data-loader';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { Currency } from '../../../../../../../shared/entities/currency.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { NominalAccount } from '../../../../../../../shared/entities/nominal-account.entity';\r\nimport { ListAndSearchFilterType } from '../../../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { FilterSetDisplayComponent } from '../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { NominalReportComponent } from '../../nominal-report.component';\r\n\r\n@Component({\r\n    selector: 'atlas-detail-tab',\r\n    templateUrl: './detail-tab.component.html',\r\n    styleUrls: ['./detail-tab.component.scss']\r\n})\r\nexport class DetailTabComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplay') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    gridContext: NominalReportComponent;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridRows: any[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = false;\r\n    nominalTransactionGridCode: string = 'nominalReportTransactionGrid';\r\n    nominalTransactionGridConfig: ColumnConfigurationProperties[] = [];\r\n    nominalTrabsactionQuickSumColumns: string[] = [];\r\n    gridTitle: string;\r\n    excelStyles: any;\r\n    isNominalReportDisplay: boolean = false;\r\n    checkFunctionalCurrency: string;\r\n    checkStatutoryCurrency: string;\r\n    isBroughtForward :boolean =false;\r\n\r\n    @Input() reportStyleCtrl = new AtlasFormControl('reportStyleTypes');\r\n    @Input() reportStyleTypes: ReportStyleTypes[] = [];\r\n    @Input() accountTypeCtrl = new AtlasFormControl('nominalAccountTypes');\r\n    @Input() nominalAccountTypes: NominalAccountTypes[] = [];\r\n    @Input() documentDateFromCtrl = new AtlasFormControl('documentFromCtrl');\r\n    @Input() documentDateToCtrl = new AtlasFormControl('documentToCtrl');\r\n    @Input() accountingDateFromCtrl = new AtlasFormControl('accountingDateFromCtrl');\r\n    @Input() accountingDateToCtrl = new AtlasFormControl('accountingDateToCtrl');\r\n    @Input() functionalCurrencyCtrl = new AtlasFormControl('nominalFunctionalCurrency');\r\n    @Input() currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n    @Input() nominalAccountsCtrl = new AtlasFormControl('nominalAccountsCtrl');\r\n    @Input() columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    @Input() masterdata: MasterData;\r\n    @Input() nominalReportFormGroup: FormGroup;\r\n    filteredCurrencyList: Currency[];\r\n    company: string;\r\n    filters: ListAndSearchFilter[] = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n    isGenerateButtonClicked: boolean = false;\r\n    hasGridSharing: boolean;\r\n    companyConfiguration: Company;\r\n    ReportStyleType = ReportStyleType;\r\n    filteredNominalAccountList: NominalAccount[];\r\n    isSummaryMode: boolean = false;\r\n    tabIndex: number;\r\n    isDetailMode: boolean = true;\r\n\r\n    /* quick sum */\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    allowedColumnsforQuickSum: string[] = [];\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: NominalReportDataLoader,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService, ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n    getColumnConfig(): ColumnConfigurationProperties[] {\r\n        this.allowedColumnsforQuickSum = this.nominalTrabsactionQuickSumColumns;\r\n        return this.nominalTransactionGridConfig;\r\n    }\r\n\r\n    setColumnConfig(config: ColumnConfigurationProperties[]): void {\r\n        this.nominalTransactionGridConfig = config;\r\n    }\r\n\r\n    getGridCode(): string {\r\n        return this.nominalTransactionGridCode;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.reportStyleCtrl.patchValue(ReportStyleType.Summary);\r\n        this.accountTypeCtrl.patchValue(NominalAccountType.Both);\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        // this.bindConfiguration();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.checkFunctionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.checkStatutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n\r\n        // quicksum\r\n        this.classApplied = this.defaultClass;\r\n        this.loadGridConfiguration();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n    onGenerateReportButtonClicked(isGenerateButtonClicked?: boolean) {\r\n        this.isGenerateButtonClicked = isGenerateButtonClicked;\r\n        if (this.isGenerateButtonClicked && this.nominalReportFormGroup.valid) {\r\n            this.toggleQuickSum(false);\r\n            const hasQuickSearchValues = (this.currencyCtrl.value && this.currencyCtrl.valid)\r\n                || (this.nominalAccountsCtrl.value && this.nominalAccountsCtrl.valid);\r\n\r\n            if (hasQuickSearchValues) {\r\n                const quickFilters: ListAndSearchFilter[] = [];\r\n                if (this.currencyCtrl.value && this.currencyCtrl.valid) {\r\n                    const currencyField = this.columnConfiguration.find((column) => column.fieldName === 'Currency');\r\n\r\n                    const currencyFilter = new ListAndSearchFilter();\r\n                    currencyFilter.fieldId = currencyField.fieldId;\r\n                    currencyFilter.fieldName = currencyField.fieldName;\r\n                    currencyFilter.fieldFriendlyName = currencyField.fieldName;\r\n                    currencyFilter.isActive = true;\r\n                    currencyFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.currencyCtrl.value as Currency).currencyCode,\r\n                    };\r\n                    quickFilters.push(currencyFilter);\r\n                    this.currencyCtrl.patchValue(null);\r\n                    this.currencyCtrl.reset();\r\n                }\r\n\r\n                if (this.nominalAccountsCtrl.value && this.nominalAccountsCtrl.valid) {\r\n                    const nominalAccountsField = this.columnConfiguration.find((column) => column.fieldName === 'NominalAccount');\r\n\r\n                    const nominalAccountsFilter = new ListAndSearchFilter();\r\n                    nominalAccountsFilter.fieldId = nominalAccountsField.fieldId;\r\n                    nominalAccountsFilter.fieldName = nominalAccountsField.fieldName;\r\n                    nominalAccountsFilter.fieldFriendlyName = nominalAccountsFilter.fieldName;\r\n                    nominalAccountsFilter.isActive = true;\r\n                    nominalAccountsFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.nominalAccountsCtrl.value as NominalAccount).accountNumber,\r\n                    };\r\n                    quickFilters.push(nominalAccountsFilter);\r\n                    this.nominalAccountsCtrl.reset();\r\n                }\r\n                this.filterSetDisplayComponent.loadFilterSet(quickFilters, true);\r\n                this.filters = quickFilters;\r\n            }\r\n            const columnConfig = this.getColumnConfig();\r\n            if (columnConfig.length === 0) {\r\n                this.loadGridConfiguration();\r\n            } else {\r\n                this.initColumns();\r\n            }\r\n\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        const clientReport = this.getNominalReportData();\r\n        this.isLoading = true;\r\n        this.isNominalReportDisplay = false;\r\n        this.dataLoader.getData(this.filters, null, null, null, clientReport)\r\n            .pipe(\r\n                first(),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((data) => {\r\n                this.agGridRows = data.value;\r\n                this.isNominalReportDisplay = true;\r\n            });\r\n\r\n    }\r\n\r\n    getNominalReportData() {\r\n        const nominalReport = new TransactionReportCommand();\r\n        nominalReport.functionalCurrency = this.functionalCurrencyCtrl.value !== ''\r\n            && this.reportStyleCtrl.value === ReportStyleType.Summary\r\n            ? this.functionalCurrencyCtrl.value : null;\r\n        nominalReport.broughtForward = this.isBroughtForward;\r\n        nominalReport.accountType = this.accountTypeCtrl.value !== null ? this.accountTypeCtrl.value : null;\r\n        nominalReport.fromDate = this.accountingDateFromCtrl.value !== null ? this.accountingDateFromCtrl.value : null;\r\n        nominalReport.toDate = this.accountingDateToCtrl.value !== null ? this.accountingDateToCtrl.value : null;\r\n        nominalReport.documentFromDate = this.documentDateFromCtrl.value !== null ? this.documentDateFromCtrl.value : null;\r\n        nominalReport.documentToDate = this.documentDateToCtrl.value !== null ? this.documentDateToCtrl.value : null;\r\n        nominalReport.reportStyleType = this.reportStyleCtrl.value !== null ? this.reportStyleCtrl.value : null;\r\n        return nominalReport;\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.getGridCode())\r\n            .subscribe((configuration) => {\r\n                this.setColumnConfig(configuration.columns);\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns();\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    initColumns() {\r\n        const configuration = this.getColumnConfig();\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.agGridCols = configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                width: 100,\r\n                hide: !config.isVisible,\r\n                rowGroup: false,\r\n                enableRowGroup: false,\r\n            };\r\n            if (columnDef.field === 'functionalCurrency' ||\r\n                columnDef.field === 'statutoryCcyAmount' || columnDef.field === 'transactionalCurrency') {\r\n                columnDef.aggFunc = 'sum';\r\n                columnDef.headerName = config.friendlyName;\r\n                this.nominalTrabsactionQuickSumColumns.push(columnDef.field.toLocaleLowerCase());\r\n            }\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            if (columnDef.headerName === 'Functional Currency') {\r\n                columnDef.headerName = this.checkFunctionalCurrency + ' eq';\r\n            }\r\n            if (columnDef.headerName === 'Statutory Ccy Amount') {\r\n                columnDef.headerName = this.checkStatutoryCurrency + ' eq';\r\n            }\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n            return columnDef;\r\n        });\r\n\r\n        if (this.agGridOptions) {\r\n            this.agGridOptions.columnDefs = this.agGridCols;\r\n            if (this.agGridOptions.api) {\r\n                this.agGridOptions.api.setColumnDefs(this.agGridCols);\r\n                this.agGridColumnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n    }\r\n    numberFormatter(param) {\r\n        if (param.colDef.colId.toLowerCase() === 'transactionalcurrency' ||\r\n            param.colDef.colId.toLowerCase() === 'functionalcurrency' || param.colDef.colId.toLowerCase() === 'statutoryccyamount'\r\n            || param.colDef.colId.toLowerCase() === 'weight') {\r\n            if (param && param.value) {\r\n                const commonMethods = new CommonMethods();\r\n                if (param.colDef.colId.toLowerCase() === 'weight') {\r\n                    return commonMethods.getFormattedNumberValue(param.value, 3);\r\n                }\r\n                else {\r\n                    return commonMethods.getFormattedNumberValue(param.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    // -- Quick Sum\r\n\r\n    toggleQuickSum(value: boolean) {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = value;\r\n        if (this.quickSumModeActivated) {\r\n            this.classApplied = this.cellSelectionClass;\r\n        } else {\r\n            this.classApplied = this.defaultClass;\r\n        }\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.agGridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n    onRangeSelectionChanged(event) {\r\n        this.selectedColumnsArray = [];\r\n\r\n        const rangeSelections = this.agGridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        // if there is only one column selected\r\n        if (rangeSelections && rangeSelections.length === 1) {\r\n            this.rangeSelectionCalculation(rangeSelections[0]);\r\n        } else {\r\n            const cellInfos: any = [];\r\n            const selectedCells: any = [];\r\n            rangeSelections.forEach((row) => {\r\n                const cellExists = selectedCells.find((cell) => cell.start.rowIndex === row.start.rowIndex &&\r\n                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId());\r\n                if (cellExists === null || cellExists === undefined) {\r\n                    selectedCells.push(row);\r\n\r\n                    const obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };\r\n                    cellInfos.push(obj);\r\n                }\r\n            });\r\n\r\n            let sum = 0;\r\n            let columnName: string;\r\n            let columnHeader: string;\r\n            const selectedColumnsArray = this.selectedColumnsArray;\r\n            const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n\r\n            selectedCells.forEach((row) => {\r\n                row.columns.forEach((column) => {\r\n                    sum = 0;\r\n                    columnName = column.getColDef().colId.toLowerCase();\r\n                    columnHeader = column.getColDef().headerName;\r\n                    if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                        for (let rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {\r\n                            if (cellInfos[rowIndex].columnName.toLowerCase() === columnName) {\r\n                                const rowModel = this.agGridApi.getModel();\r\n                                const rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));\r\n                                const value = this.agGridApi.getValue(column, rowNode);\r\n                                sum += Number(value);\r\n                            }\r\n                        }\r\n\r\n                        const columnObj = selectedColumnsArray.find((sum) => sum.name === columnHeader);\r\n                        if (columnObj) {\r\n                            columnObj.sum = sum;\r\n                        } else {\r\n                            selectedColumnsArray.push({ name: columnHeader, sum });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            this.selectedColumnsArray = selectedColumnsArray;\r\n        }\r\n    }\r\n\r\n    rangeSelectionCalculation(rangeSelection: agGrid.RangeSelection) {\r\n        let sum = 0;\r\n        let columnName: string;\r\n        let columnHeader: string;\r\n        this.selectedColumnsArray = [];\r\n\r\n        const startRow = Math.min(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n        const endRow = Math.max(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n\r\n        const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n        rangeSelection.columns.forEach((column) => {\r\n            columnName = column.getColDef().colId.toLowerCase();\r\n            columnHeader = column.getColDef().headerName;\r\n            if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = this.agGridApi.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = this.agGridApi.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n\r\n                this.selectedColumnsArray.push({ name: columnHeader, sum });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<div *ngIf=\\\"isOverviewMode\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"agGridOptions && agGridOptions.columnDefs && isNominalReportDisplay\\\"\\r\\n                                            [gridOptions]=\\\"agGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"getGridCode()\\\"\\r\\n                                            [isAutosize]=\\\"false\\\"\\r\\n                                            fxLayoutAlign=\\\"end\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 *ngIf='isNominalReportDisplay'\\r\\n                 class=\\\"quick-sum-div-height\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\">\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  (change)=\\\"toggleQuickSum($event.checked)\\\">Quick Sum Mode</mat-slide-toggle>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-around center\\\">\\r\\n\\r\\n                    <div *ngFor=\\\"let column of selectedColumnsArray\\\">\\r\\n                        <span class=\\\"quick-sum-span\\\"\\r\\n                              *ngIf=\\\"quickSumModeActivated\\\">{{column.name}} : {{column.sum | number }} </span>\\r\\n                    </div>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"onClearSelectionClicked()\\\"\\r\\n                            class=\\\"mat-button-user-margin\\\"\\r\\n                            *ngIf=\\\"quickSumModeActivated\\\">Clear Selection</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div ag-grid=\\\"agGridOptions\\\"\\r\\n                 [ngClass]='classApplied'\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 [ngClass]=\\\"{'hidden-during-loading':!isNominalReportDisplay}\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"agGridRows\\\"\\r\\n                                 [columnDefs]=\\\"agGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"100\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [enableRangeSelection]=\\\"true\\\"\\r\\n                                 [groupMultiAutoColumn]=\\\"groupMultiAutoColumn\\\"\\r\\n                                 [rowGroupPanelShow]=\\\"rowGroupPanelShow\\\"\\r\\n                                 (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                                 (rangeSelectionChanged)=\\\"onRangeSelectionChanged($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [context]=\\\"gridContext\\\"\\r\\n                                 [suppressAggFuncInHeader]=\\\"true\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 [excelStyles]=\\\"excelStyles\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnDestroy, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatMenuTrigger } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize, first } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../../../core/services/company-manager.service';\r\nimport { CommonMethods } from '../../../../../../../execution/services/execution-cash-common-methods';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../../../shared/entities/company.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { NominalAccountTypes } from '../../../../../../../shared/entities/nominal-account-type.entity';\r\nimport { ReportStyleTypes } from '../../../../../../../shared/entities/report-style-type.entity';\r\nimport { WINDOW } from '../../../../../../../shared/entities/window-injection-token';\r\nimport { NominalAccountType } from '../../../../../../../shared/enums/nominal-account-type-enum';\r\nimport { ReportStyleType } from '../../../../../../../shared/enums/report-style-type.enum';\r\nimport { AgGridService } from '../../../../../../../shared/services/ag-grid.service';\r\nimport { TransactionReportCommand } from '../../../../../../../shared/services/execution/dtos/transaction-report-command';\r\nimport { FormConfigurationProviderService } from '../../../../../../../shared/services/form-configuration-provider.service';\r\nimport { GridConfigurationProviderService } from '../../../../../../../shared/services/grid-configuration-provider.service';\r\nimport { NominalReportDataLoader } from '../../../../../../../shared/services/list-and-search/nominalReport-data-loader';\r\nimport { UiService } from '../../../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../../../shared/services/util.service';\r\nimport { Currency } from '../../../../../../../shared/entities/currency.entity';\r\nimport { MasterData } from '../../../../../../../shared/entities/masterdata.entity';\r\nimport { MasterdataService } from '../../../../../../../shared/services/http-services/masterdata.service';\r\nimport { NominalAccount } from '../../../../../../../shared/entities/nominal-account.entity';\r\nimport { ListAndSearchFilterType } from '../../../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { FilterSetDisplayComponent } from '../../../../../../../shared/components/filter-set-display/filter-set-display.component';\r\nimport { NominalReportComponent } from '../../nominal-report.component';\r\n@Component({\r\n    selector: 'atlas-overview-tab',\r\n    templateUrl: './overview-tab.component.html',\r\n    styleUrls: ['./overview-tab.component.scss']\r\n})\r\nexport class OverviewTabComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild(MatMenuTrigger) columnMenuTrigger: MatMenuTrigger;\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @ViewChild('filterSetDisplay') filterSetDisplayComponent: FilterSetDisplayComponent;\r\n    gridContext: NominalReportComponent;\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    agGridCols: agGrid.ColDef[];\r\n    agGridRows: any[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = false;\r\n    nominalTransactionGridCode: string = 'nominalReportTransactionGrid';\r\n    nominalTransactionGridConfig: ColumnConfigurationProperties[] = [];\r\n    nominalTrabsactionQuickSumColumns: string[] = [];\r\n    gridTitle: string;\r\n    excelStyles: any;\r\n    isNominalReportDisplay: boolean = false;\r\n    rowGroupPanelShow: string = 'onlyWhenGrouping';\r\n    groupMultiAutoColumn: boolean;\r\n    checkFunctionalCurrency: string;\r\n    checkStatutoryCurrency: string;\r\n    isOverviewMode: boolean = true;\r\n    isBroughtForward :boolean =false;\r\n\r\n    @Input() reportStyleCtrl = new AtlasFormControl('reportStyleTypes');\r\n    @Input() reportStyleTypes: ReportStyleTypes[] = [];\r\n    @Input() accountTypeCtrl = new AtlasFormControl('nominalAccountTypes');\r\n    @Input() nominalAccountTypes: NominalAccountTypes[] = [];\r\n    @Input() documentDateFromCtrl = new AtlasFormControl('documentFromCtrl');\r\n    @Input() documentDateToCtrl = new AtlasFormControl('documentToCtrl');\r\n    @Input() accountingDateFromCtrl = new AtlasFormControl('accountingDateFromCtrl');\r\n    @Input() accountingDateToCtrl = new AtlasFormControl('accountingDateToCtrl');\r\n    @Input() functionalCurrencyCtrl = new AtlasFormControl('nominalFunctionalCurrency');\r\n    @Input() currencyCtrl = new AtlasFormControl('currencyCtrl');\r\n    @Input() nominalAccountsCtrl = new AtlasFormControl('nominalAccountsCtrl');\r\n    @Input() columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    @Input() masterdata: MasterData;\r\n    @Input() nominalReportFormGroup: FormGroup;\r\n    filteredCurrencyList: Currency[];\r\n    company: string;\r\n    filters: ListAndSearchFilter[] = [];\r\n\r\n    subscriptions: Subscription[] = [];\r\n    isGenerateButtonClicked: boolean = false;\r\n    hasGridSharing: boolean;\r\n    companyConfiguration: Company;\r\n    ReportStyleType = ReportStyleType;\r\n    filteredNominalAccountList: NominalAccount[];\r\n    isSummaryMode: boolean = false;\r\n    tabIndex: number;\r\n\r\n    /* quick sum */\r\n    defaultClass: string = 'ag-theme-material pointer-cursor';\r\n    cellSelectionClass: string = 'ag-theme-material pointer-cursor cell-selection';\r\n    classApplied: string;\r\n    quickSumModeActivated = false;\r\n    selectedColumnsArray: Array<{ 'name': string, 'sum': number }> = new Array();\r\n    allowedColumnsforQuickSum: string[] = [];\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder,\r\n        protected uiService: UiService,\r\n        private companyManager: CompanyManagerService,\r\n        public dataLoader: NominalReportDataLoader,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService, ) {\r\n        super(formConfigurationProvider);\r\n        this.excelStyles = [\r\n            {\r\n                id: 'dateFormat',\r\n                dataType: 'dateTime',\r\n                numberFormat: {\r\n                    format: 'dd/mm/yyyy',\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n    getColumnConfig(): ColumnConfigurationProperties[] {\r\n        this.allowedColumnsforQuickSum = this.nominalTrabsactionQuickSumColumns;\r\n        return this.nominalTransactionGridConfig;\r\n    }\r\n\r\n    updateGroupDisplay() {\r\n\r\n        this.rowGroupPanelShow = 'always';\r\n        this.groupMultiAutoColumn = true;\r\n        this.agGridOptions.groupMultiAutoColumn = this.groupMultiAutoColumn;\r\n    }\r\n\r\n    setColumnConfig(config: ColumnConfigurationProperties[]): void {\r\n\r\n        this.rowGroupPanelShow = 'always';\r\n        this.groupMultiAutoColumn = true;\r\n        this.nominalTransactionGridConfig = config;\r\n\r\n        this.agGridOptions.groupMultiAutoColumn = this.groupMultiAutoColumn;\r\n    }\r\n\r\n    getGridCode(): string {\r\n        return this.nominalTransactionGridCode;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.reportStyleCtrl.patchValue(ReportStyleType.Summary);\r\n        this.accountTypeCtrl.patchValue(NominalAccountType.Both);\r\n        this.company = this.companyManager.getCurrentCompanyId();\r\n        // this.bindConfiguration();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.checkFunctionalCurrency = this.companyConfiguration.functionalCurrencyCode;\r\n        this.checkStatutoryCurrency = this.companyConfiguration.statutoryCurrencyCode;\r\n\r\n        // quicksum\r\n        this.classApplied = this.defaultClass;\r\n        this.loadGridConfiguration();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.forEach((subscription: Subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n    onGenerateReportButtonClicked(isGenerateButtonClicked?: boolean) {\r\n        this.isGenerateButtonClicked = isGenerateButtonClicked;\r\n        if (this.isGenerateButtonClicked && this.nominalReportFormGroup.valid) {\r\n            this.toggleQuickSum(false);\r\n            const hasQuickSearchValues = (this.currencyCtrl.value && this.currencyCtrl.valid)\r\n                || (this.nominalAccountsCtrl.value && this.nominalAccountsCtrl.valid);\r\n\r\n            if (hasQuickSearchValues) {\r\n                const quickFilters: ListAndSearchFilter[] = [];\r\n                if (this.currencyCtrl.value && this.currencyCtrl.valid) {\r\n                    const currencyField = this.columnConfiguration.find((column) => column.fieldName === 'Currency');\r\n\r\n                    const currencyFilter = new ListAndSearchFilter();\r\n                    currencyFilter.fieldId = currencyField.fieldId;\r\n                    currencyFilter.fieldName = currencyField.fieldName;\r\n                    currencyFilter.fieldFriendlyName = currencyField.fieldName;\r\n                    currencyFilter.isActive = true;\r\n                    currencyFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.currencyCtrl.value as Currency).currencyCode,\r\n                    };\r\n                    quickFilters.push(currencyFilter);\r\n                    this.currencyCtrl.patchValue(null);\r\n                    this.currencyCtrl.reset();\r\n                }\r\n\r\n                if (this.nominalAccountsCtrl.value && this.nominalAccountsCtrl.valid) {\r\n                    const nominalAccountsField = this.columnConfiguration.find((column) => column.fieldName === 'NominalAccount');\r\n\r\n                    const nominalAccountsFilter = new ListAndSearchFilter();\r\n                    nominalAccountsFilter.fieldId = nominalAccountsField.fieldId;\r\n                    nominalAccountsFilter.fieldName = nominalAccountsField.fieldName;\r\n                    nominalAccountsFilter.fieldFriendlyName = nominalAccountsFilter.fieldName;\r\n                    nominalAccountsFilter.isActive = true;\r\n                    nominalAccountsFilter.predicate = {\r\n                        filterType: ListAndSearchFilterType.Picklist,\r\n                        operator: 'eq',\r\n                        value1: (this.nominalAccountsCtrl.value as NominalAccount).accountNumber,\r\n                    };\r\n                    quickFilters.push(nominalAccountsFilter);\r\n                    this.nominalAccountsCtrl.reset();\r\n                }\r\n                this.filterSetDisplayComponent.loadFilterSet(quickFilters, true);\r\n                this.filters = quickFilters;\r\n            }\r\n            const columnConfig = this.getColumnConfig();\r\n            if (columnConfig.length === 0) {\r\n                this.loadGridConfiguration();\r\n            } else {\r\n                this.initColumns();\r\n            }\r\n\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        const clientReport = this.getNominalReportData();\r\n        this.isLoading = true;\r\n        this.isNominalReportDisplay = false;\r\n        this.dataLoader.getData(this.filters, null, null, null, clientReport)\r\n            .pipe(\r\n                first(),\r\n                finalize(() => {\r\n                    this.isLoading = false;\r\n                }),\r\n            )\r\n            .subscribe((data) => {\r\n                this.agGridRows = data.value;\r\n                this.isNominalReportDisplay = true;\r\n            });\r\n\r\n    }\r\n\r\n    getNominalReportData() {\r\n        const nominalReport = new TransactionReportCommand();\r\n        nominalReport.functionalCurrency = this.functionalCurrencyCtrl.value !== ''\r\n            && this.reportStyleCtrl.value === ReportStyleType.Summary\r\n            ? this.functionalCurrencyCtrl.value : null;\r\n        nominalReport.broughtForward = this.isBroughtForward;\r\n        nominalReport.accountType = this.accountTypeCtrl.value !== null ? this.accountTypeCtrl.value : null;\r\n        nominalReport.fromDate = this.accountingDateFromCtrl.value !== null ? this.accountingDateFromCtrl.value : null;\r\n        nominalReport.toDate = this.accountingDateToCtrl.value !== null ? this.accountingDateToCtrl.value : null;\r\n        nominalReport.documentFromDate = this.documentDateFromCtrl.value !== null ? this.documentDateFromCtrl.value : null;\r\n        nominalReport.documentToDate = this.documentDateToCtrl.value !== null ? this.documentDateToCtrl.value : null;\r\n        nominalReport.reportStyleType = this.reportStyleCtrl.value !== null ? this.reportStyleCtrl.value : null;\r\n        return nominalReport;\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.getGridCode())\r\n            .subscribe((configuration) => {\r\n                this.setColumnConfig(configuration.columns);\r\n                this.columnConfiguration = configuration.columns;\r\n                this.initColumns();\r\n                this.hasGridSharing = configuration.hasMultipleViewsPerUser;\r\n            });\r\n    }\r\n\r\n    initColumns() {\r\n        this.updateGroupDisplay();\r\n        const configuration = this.getColumnConfig();\r\n        const numericColumns: string[] = [];\r\n        configuration.forEach((column) => {\r\n            if (column.gridType === 'numeric') {\r\n                numericColumns.push(column.fieldName.toLowerCase());\r\n            }\r\n        });\r\n        this.agGridCols = configuration.map((config) => {\r\n            const columnDef: agGrid.ColDef = {\r\n                colId: this.utilService.convertToCamelCase(config.fieldName),\r\n                headerName: config.friendlyName,\r\n                field: this.utilService.convertToCamelCase(config.fieldName),\r\n                width: 100,\r\n                hide: !config.isVisible,\r\n                rowGroup: config.isGroup,\r\n                enableRowGroup: config.isGroup,\r\n            };\r\n            if (columnDef.field === 'functionalCurrency' ||\r\n                columnDef.field === 'statutoryCcyAmount' || columnDef.field === 'transactionalCurrency') {\r\n                columnDef.aggFunc = 'sum';\r\n                columnDef.headerName = config.friendlyName;\r\n                this.nominalTrabsactionQuickSumColumns.push(columnDef.field.toLocaleLowerCase());\r\n            }\r\n\r\n            const formatter = this.uiService.getFormatterForType(config.gridType);\r\n            if (formatter) {\r\n                columnDef.valueFormatter = formatter;\r\n            }\r\n\r\n            const dateGetter = this.uiService.getterForDateType(config.gridType);\r\n            if (dateGetter) {\r\n                columnDef.cellClass = 'dateFormat';\r\n                columnDef.valueGetter = dateGetter;\r\n            }\r\n            if (columnDef.headerName === 'Functional Currency') {\r\n                columnDef.headerName = this.checkFunctionalCurrency + ' eq';\r\n            }\r\n            if (columnDef.headerName === 'Statutory Ccy Amount') {\r\n                columnDef.headerName = this.checkStatutoryCurrency + ' eq';\r\n            }\r\n            const numericColumn = numericColumns.find((column) => column === columnDef.field.toLowerCase());\r\n            if (numericColumn) {\r\n                columnDef.type = 'numericColumn';\r\n                columnDef.valueFormatter = this.numberFormatter;\r\n            }\r\n            return columnDef;\r\n        });\r\n\r\n        if (this.agGridOptions) {\r\n            this.agGridOptions.columnDefs = this.agGridCols;\r\n            if (this.agGridOptions.api) {\r\n                this.agGridOptions.api.setColumnDefs(this.agGridCols);\r\n                this.agGridColumnApi.autoSizeAllColumns();\r\n            }\r\n        }\r\n    }\r\n    numberFormatter(param) {\r\n        if (param.colDef.colId.toLowerCase() === 'transactionalcurrency' ||\r\n            param.colDef.colId.toLowerCase() === 'functionalcurrency' || param.colDef.colId.toLowerCase() === 'statutoryccyamount'\r\n            || param.colDef.colId.toLowerCase() === 'weight') {\r\n            if (param && param.value) {\r\n                const commonMethods = new CommonMethods();\r\n                if (param.colDef.colId.toLowerCase() === 'weight') {\r\n                    return commonMethods.getFormattedNumberValue(param.value, 3);\r\n                }\r\n                else {\r\n                    return commonMethods.getFormattedNumberValue(param.value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n\r\n        this.agGridOptions.columnDefs = this.agGridCols;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    // -- Quick Sum\r\n\r\n    toggleQuickSum(value: boolean) {\r\n        this.onClearSelectionClicked();\r\n        this.quickSumModeActivated = value;\r\n        if (this.quickSumModeActivated) {\r\n            this.classApplied = this.cellSelectionClass;\r\n        } else {\r\n            this.classApplied = this.defaultClass;\r\n        }\r\n    }\r\n\r\n    onClearSelectionClicked() {\r\n        this.agGridApi.clearRangeSelection();\r\n        this.selectedColumnsArray = [];\r\n    }\r\n    onRangeSelectionChanged(event) {\r\n        this.selectedColumnsArray = [];\r\n\r\n        const rangeSelections = this.agGridApi.getRangeSelections();\r\n        if (!rangeSelections || rangeSelections.length === 0) {\r\n            return;\r\n        }\r\n        // if there is only one column selected\r\n        if (rangeSelections && rangeSelections.length === 1) {\r\n            this.rangeSelectionCalculation(rangeSelections[0]);\r\n        } else {\r\n            const cellInfos: any = [];\r\n            const selectedCells: any = [];\r\n            rangeSelections.forEach((row) => {\r\n                const cellExists = selectedCells.find((cell) => cell.start.rowIndex === row.start.rowIndex &&\r\n                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId());\r\n                if (cellExists === null || cellExists === undefined) {\r\n                    selectedCells.push(row);\r\n\r\n                    const obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };\r\n                    cellInfos.push(obj);\r\n                }\r\n            });\r\n\r\n            let sum = 0;\r\n            let columnName: string;\r\n            let columnHeader: string;\r\n            const selectedColumnsArray = this.selectedColumnsArray;\r\n            const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n\r\n            selectedCells.forEach((row) => {\r\n                row.columns.forEach((column) => {\r\n                    sum = 0;\r\n                    columnName = column.getColDef().colId.toLowerCase();\r\n                    columnHeader = column.getColDef().headerName;\r\n                    if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                        for (let rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {\r\n                            if (cellInfos[rowIndex].columnName.toLowerCase() === columnName) {\r\n                                const rowModel = this.agGridApi.getModel();\r\n                                const rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));\r\n                                const value = this.agGridApi.getValue(column, rowNode);\r\n                                sum += Number(value);\r\n                            }\r\n                        }\r\n\r\n                        const columnObj = selectedColumnsArray.find((sum) => sum.name === columnHeader);\r\n                        if (columnObj) {\r\n                            columnObj.sum = sum;\r\n                        } else {\r\n                            selectedColumnsArray.push({ name: columnHeader, sum });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            this.selectedColumnsArray = selectedColumnsArray;\r\n        }\r\n    }\r\n\r\n    rangeSelectionCalculation(rangeSelection: agGrid.RangeSelection) {\r\n        let sum = 0;\r\n        let columnName: string;\r\n        let columnHeader: string;\r\n        this.selectedColumnsArray = [];\r\n\r\n        const startRow = Math.min(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n        const endRow = Math.max(rangeSelection.start.rowIndex, rangeSelection.end.rowIndex);\r\n\r\n        const allowedColumnsforQuickSum = this.allowedColumnsforQuickSum;\r\n        rangeSelection.columns.forEach((column) => {\r\n            columnName = column.getColDef().colId.toLowerCase();\r\n            columnHeader = column.getColDef().headerName;\r\n            if (allowedColumnsforQuickSum.includes(columnName)) {\r\n                for (let rowIndex = startRow; rowIndex <= endRow; rowIndex++) {\r\n                    const rowModel = this.agGridApi.getModel();\r\n                    const rowNode = rowModel.getRow(rowIndex);\r\n                    const value = this.agGridApi.getValue(column, rowNode);\r\n                    sum += Number(value);\r\n                }\r\n\r\n                this.selectedColumnsArray.push({ name: columnHeader, sum });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { LdrepManualAdjustment } from \"../../../../../../shared/entities/ldrep-manual-adjustment.entity\";\r\nimport { MasterData } from \"../../../../../../shared/entities/masterdata.entity\";\r\nimport { LdrepManualAdjustmentRecords } from \"../../../../../../shared/entities/ldrep-manual-adjustment-records.entity\";\r\nimport { DateFormats } from \"../../../../../../shared/enums/date-format.enum\";\r\nimport { Moment } from \"moment\";\r\nimport * as _moment from 'moment';\r\nimport { MAT_DATE_LOCALE } from \"@angular/material\";\r\nimport { Inject, Optional } from \"@angular/core\";\r\nconst moment = _moment;\r\n\r\nexport class LdrepDisplayView {\r\n    manualAdjustmentId: number;\r\n    companyId: number;\r\n    fromDateFormat: string;\r\n    dateFrom: Date;\r\n    toDateFormat: string;\r\n    dateTo: Date;\r\n    departmentCode: string;\r\n    pNLType: string;\r\n    realized: boolean;\r\n    functionalCCYAdjustment: number;\r\n    statutoryCCYAdjustment: number;\r\n    narrative: string;\r\n    charterRefrence: string;\r\n    contractReference: string;\r\n    cmy1: string;\r\n    cmy2: string;\r\n    cmy3: string;\r\n    cmy4: string;\r\n    cmy5: string;\r\n    charterRefrenceId: number;\r\n    sectionId: number;\r\n    commodityId: number;\r\n    cropYear: string;\r\n    isDirty: boolean;\r\n\r\n    constructor(ldrep?: LdrepManualAdjustmentRecords, masterdata?: MasterData, @Optional() @Inject(MAT_DATE_LOCALE)\r\n    private dateLocale?: string) {\r\n        if (ldrep) {\r\n            this.manualAdjustmentId = ldrep.manualAdjustmentId;\r\n            this.fromDateFormat = DateFormats[Number(ldrep.fromDateFormat)];\r\n            this.dateFrom = ldrep.dateFrom ? moment(ldrep.dateFrom, 'YYYY-MM-DD').toDate() : null;\r\n            this.toDateFormat = DateFormats[Number(ldrep.toDateFormat)];\r\n            this.dateTo = ldrep.dateTo ? moment(ldrep.dateTo, 'YYYY-MM-DD').toDate() : null;\r\n            this.departmentCode = ldrep.departmentCode;\r\n            this.pNLType = ldrep.pnlType;\r\n            this.realized = ldrep.realized;\r\n            this.functionalCCYAdjustment = ldrep.functionalCCYAdjustment;\r\n            this.statutoryCCYAdjustment = ldrep.statutoryCCYAdjustment;\r\n            this.narrative = ldrep.narrative;\r\n            this.charterRefrence = ldrep.charterCode;\r\n            this.contractReference = ldrep.contractSectionCode;\r\n            this.cmy1 = ldrep.principalCommodity;\r\n            this.commodityId = ldrep.commodityId;\r\n            this.cmy2 = this.getCommodity2FromCommodity1(ldrep.principalCommodity, masterdata);\r\n            this.cmy3 = this.getCommodity3FromCommodity1(ldrep.principalCommodity, masterdata);\r\n            this.cmy4 = this.getCommodity4FromCommodity1(ldrep.principalCommodity, masterdata);;\r\n            this.cmy5 = this.getCommodity5FromCommodity1(ldrep.principalCommodity, masterdata);;\r\n            this.cropYear = ldrep.cropYear;\r\n        }\r\n    }\r\n\r\n    getCommodity2FromCommodity1(code: string, masterdata: MasterData) {\r\n        const commodity = masterdata.commodities.find(\r\n            (e) => e.commodityType === code);\r\n        return commodity ? commodity.commodityOrigin : '';\r\n    }\r\n\r\n    getCommodity3FromCommodity1(code: string, masterdata: MasterData) {\r\n        const commodity = masterdata.commodities.find(\r\n            (e) => e.commodityType === code);\r\n        return commodity ? commodity.commodityGrade : '';\r\n    }\r\n\r\n    getCommodity4FromCommodity1(code: string, masterdata: MasterData) {\r\n        const commodity = masterdata.commodities.find(\r\n            (e) => e.commodityType === code);\r\n        return commodity ? commodity.commodityLvl4 : '';\r\n    }\r\n\r\n    getCommodity5FromCommodity1(code: string, masterdata: MasterData) {\r\n        const commodity = masterdata.commodities.find(\r\n            (e) => e.commodityType === code);\r\n        return commodity ? commodity.commodityLvl5 : '';\r\n    }\r\n\r\n    getLdrepData(masterdata: MasterData) {\r\n        const local = this.dateLocale || moment.locale();\r\n        const ldrep = new LdrepManualAdjustmentRecords();\r\n        ldrep.manualAdjustmentId = this.manualAdjustmentId;\r\n        ldrep.fromDateFormat = DateFormats[this.fromDateFormat];\r\n        ldrep.dateFrom = moment.utc(moment.parseZone(this.dateFrom).format('YYYY-MM-DD')).locale(local);\r\n        ldrep.toDateFormat = DateFormats[this.toDateFormat];\r\n        ldrep.dateTo = this.dateTo ? moment.utc(moment.parseZone(this.dateTo).format('YYYY-MM-DD')).locale(local) : null;\r\n        ldrep.departmentId = this.getDepartmentIdFromCode(this.departmentCode, masterdata);\r\n        ldrep.pnlTypeId = this.getPNLTypeIdFromCode(this.pNLType, masterdata);\r\n        ldrep.realized = this.realized;\r\n        ldrep.functionalCCYAdjustment = this.functionalCCYAdjustment;\r\n        ldrep.statutoryCCYAdjustment = this.statutoryCCYAdjustment;\r\n        ldrep.narrative = this.narrative;\r\n        ldrep.charterRefrenceId = this.charterRefrenceId;\r\n        ldrep.sectionId = this.sectionId;\r\n        ldrep.commodityId = (typeof this.commodityId === 'string') ? this.getCommodityIdFromCode(this.commodityId, masterdata) : this.commodityId;\r\n        ldrep.cropYear = this.cropYear;\r\n\r\n        return ldrep;\r\n    }\r\n\r\n    getCommodityIdFromCode(code: string, masterdata: MasterData) {\r\n        const commodity = masterdata.commodities.find(\r\n            (e) => e.commodityCode === code);\r\n        return commodity ? commodity.commodityId : null;\r\n    }\r\n\r\n    getDepartmentIdFromCode(code: string, masterdata: MasterData) {\r\n        const department = masterdata.departments.find(\r\n            (e) => e.departmentCode === code);\r\n        return department ? department.departmentId : null;\r\n    }\r\n\r\n    getPNLTypeIdFromCode(code: string, masterdata: MasterData) {\r\n        const pnlType = masterdata.pnlTypes.find(\r\n            (e) => e.enumEntityDescription === code);\r\n        return pnlType ? pnlType.enumEntityId : null;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-button-toggle-group class=\\\"toggle-group\\\"\\r\\n                             [formControl]=\\\"dailyMonthlyToggleCtrl\\\"\\r\\n                             [value]=\\\"setPeriodType\\\"\\r\\n                             (change)=\\\"onChanges()\\\"\\r\\n                             aria-label=\\\"Date / Period rates to be maintained\\\">\\r\\n        <mat-button-toggle [value]=\\\"daily\\\">Daily</mat-button-toggle>\\r\\n        <mat-button-toggle [value]=\\\"monthly\\\">Monthly</mat-button-toggle>\\r\\n    </mat-button-toggle-group>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card fxFlex=100%>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <atlas-date-picker *ngIf=\\\"activateDay\\\"\\r\\n                               fxFlex=\\\"50%\\\"\\r\\n                               isEditable=true\\r\\n                               label=\\\"From\\\"\\r\\n                               [fieldControl]=\\\"fromDateCtrl\\\"\\r\\n                               [errorMap]=\\\"dailyErrorMap\\\"\\r\\n                               (dateChanged)=\\\"onFromChanged()\\\">\\r\\n            </atlas-date-picker>\\r\\n            <atlas-month-date-picker *ngIf=\\\"activateMonth\\\"\\r\\n                                     fxFlex=\\\"50%\\\"\\r\\n                                     class=\\\"month-date-picker\\\"\\r\\n                                     isEditable=true\\r\\n                                     label=\\\"From\\\"\\r\\n                                     [fieldControl]=\\\"fromDateCtrl\\\"\\r\\n                                     [errorMap]=\\\"monthlyErrorMap\\\"\\r\\n                                     (monthChanged)=\\\"onFromChanged()\\\">\\r\\n            </atlas-month-date-picker>\\r\\n            <atlas-date-picker *ngIf=\\\"activateDay\\\"\\r\\n                               fxFlex=\\\"50%\\\"\\r\\n                               isEditable=true\\r\\n                               label=\\\"To\\\"\\r\\n                               [fieldControl]=\\\"toDateCtrl\\\"\\r\\n                               [errorMap]=\\\"dailyErrorMap\\\"\\r\\n                               (dateChanged)=\\\"onToChanged()\\\">\\r\\n            </atlas-date-picker>\\r\\n            <atlas-month-date-picker *ngIf=\\\"activateMonth\\\"\\r\\n                                     fxFlex=\\\"50%\\\"\\r\\n                                     class=\\\"month-date-picker\\\"\\r\\n                                     isEditable=true\\r\\n                                     label=\\\"To\\\"\\r\\n                                     [fieldControl]=\\\"toDateCtrl\\\"\\r\\n                                     [errorMap]=\\\"monthlyErrorMap\\\"\\r\\n                                     (monthChanged)=\\\"onToChanged()\\\">\\r\\n            </atlas-month-date-picker>\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          (click)=\\\"onSearchButtonClicked()\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\\r\\n<div *ifAuthorized=\\\"'Reports.PLReport.EditReport',company:this.company\\\"\\r\\n     fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start center\\\"\\r\\n     fxLayoutGap=\\\"10px\\\"\\r\\n     class=\\\"add-line-container\\\">\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <h6 class=\\\"no-margin\\\">Add new lines:</h6>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\"\\r\\n         fxFlex=\\\"4\\\">\\r\\n        <mat-form-field>\\r\\n            <input matInput\\r\\n                   [readonly]=\\\"!isEditChecked\\\"\\r\\n                   [formControl]=\\\"addNewLineCtrl\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"start start\\\">\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!isEditChecked\\\"\\r\\n                (click)=\\\"onProceedButtonClicked()\\\">PROCEED</button>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row \\\"\\r\\n         fxLayoutAlign=\\\"right\\\">\\r\\n        <mat-slide-toggle [checked]=\\\"isEditChecked\\\"\\r\\n                          (change)=\\\"onEditToggleButtonClicked($event)\\\"\\r\\n                          [formControl]=\\\"editToggleButtonCtrl\\\">Edit</mat-slide-toggle>\\r\\n    </div>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card fxFlex=100%>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title class=\\\" table-title atlas-grid-card-header\\\">\\r\\n                <h2>Manual Adjustments</h2>\\r\\n            </mat-card-title>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <div hidden>\\r\\n                <button mat-icon-button\\r\\n                        [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n                    <i class=\\\"material-icons\\\">more_vert</i>\\r\\n                </button>\\r\\n                <mat-menu #menu1=\\\"matMenu\\\">\\r\\n                    <button mat-menu-item\\r\\n                            (mouseover)=\\\"onBulkDeleteButtonCliked()\\\">\\r\\n                        <mat-icon>delete</mat-icon><span>Delete</span>\\r\\n                    </button>\\r\\n                </mat-menu>\\r\\n            </div>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content>\\r\\n            <div ag-grid=\\\"ldrepManualAdjustmentGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"ldrepManualAdjustmentGridRows\\\"\\r\\n                                 [columnDefs]=\\\"ldrepManualAdjustmentGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=autoHeight\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                                 [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                                 enableFilter\\r\\n                                 [singleClickEdit]=true\\r\\n                                 [gridOptions]=\\\"ldrepManualAdjustmentGridOptions\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"center center\\\"\\r\\n             fxLayoutWrap\\r\\n             *ngIf=\\\"isLoading\\\"\\r\\n             class=\\\"loading\\\">\\r\\n            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start end\\\"\\r\\n     class=\\\"scroll-style\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end start\\\">\\r\\n        <button mat-raised-button\\r\\n                type=\\\"button\\\"\\r\\n                [disabled]=\\\"!isEditChecked\\\"\\r\\n                (click)=\\\"onSaveButtonClick()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".month-date-picker {\\n  width: 100%; }\\n\\n.scroll-style {\\n  height: 70vh; }\\n\"","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { AgGridCheckboxComponent } from '../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridAutocompleteComponent } from '../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component';\r\nimport { AgGridContextualSearchComponent } from '../../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorDatePickerComponent } from '../../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component';\r\nimport { CellEditorMonthDatePickerComponent } from '../../../../../../shared/components/cell-editor-month-date-picker/cell-editor-month-date-picker.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { CellEditorSelectComponent } from '../../../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { SectionSearchResult } from '../../../../../../shared/dtos/section-search-result';\r\nimport { AgContextualMenuAction } from '../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../../shared/entities/charter.entity';\r\nimport { Commodity } from '../../../../../../shared/entities/commodity.entity';\r\nimport { Company } from '../../../../../../shared/entities/company.entity';\r\nimport { LdrepManualAdjustmentRecords } from '../../../../../../shared/entities/ldrep-manual-adjustment-records.entity';\r\nimport { LdrepManualAdjustment } from '../../../../../../shared/entities/ldrep-manual-adjustment.entity';\r\nimport { ListAndSearchFilter } from '../../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../../../../shared/entities/window-injection-token';\r\nimport { DateFormats } from '../../../../../../shared/enums/date-format.enum';\r\nimport { FreezeType } from '../../../../../../shared/enums/freeze-type.enum';\r\nimport { CustomNumberMask } from '../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CharterDataLoader } from '../../../../../../shared/services/execution/charter-data-loader';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../../shared/services/http-services/execution.service';\r\nimport { ReportingService } from '../../../../../../shared/services/http-services/reporting.service';\r\nimport { TradeDataLoader } from '../../../../../../shared/services/list-and-search/trade-data-loader';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../../shared/services/ui.service';\r\nimport { LdrepDisplayView } from './ldrep-display-view';\r\n\r\n@Component({\r\n    selector: 'atlas-ldrep-manual-adjustment-report',\r\n    templateUrl: './ldrep-manual-adjustment-report.component.html',\r\n    styleUrls: ['./ldrep-manual-adjustment-report.component.scss'],\r\n    providers: [TradeDataLoader, CharterDataLoader],\r\n})\r\nexport class LdrepManualAdjustmentReportComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly fromSelected = new EventEmitter<string>();\r\n    @Output() readonly toSelected = new EventEmitter<string>();\r\n    @Output() readonly periodSelected = new EventEmitter<string>();\r\n    fromDateCtrl = new AtlasFormControl('FromDate');\r\n    toDateCtrl = new AtlasFormControl('ToDate');\r\n    activateDay: boolean = true;\r\n    activateMonth: boolean = false;\r\n    dailyErrorMap: Map<string, string> = new Map();\r\n    monthlyErrorMap: Map<string, string> = new Map();\r\n    addNewLineCtrl = new AtlasFormControl('AddNewLine');\r\n    editToggleButtonCtrl = new AtlasFormControl('EditToggle');\r\n    dailyMonthlyToggleCtrl = new AtlasFormControl('DailyMonthlyToggle');\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    ldrepManualAdjustmentGridOptions: agGrid.GridOptions = {\r\n        enableSorting: true,\r\n        enableFilter: true,\r\n    };\r\n    isLoading: boolean = false;\r\n    isEditChecked: boolean = false;\r\n    toDateDefaultValue: Date = new Date;\r\n    ldrepManualAdjustmentGridCols: agGrid.ColDef[];\r\n    masterdata: MasterData;\r\n    ldrepAdjustmentGridContextualMenuActions: AgContextualMenuAction[];\r\n    ldrepManualAdjustmentGridRows: LdrepManualAdjustmentRecords[] = [];\r\n    ldrepManualAdjustmentRecords: LdrepManualAdjustmentRecords[];\r\n    model: LdrepManualAdjustment;\r\n    company: string;\r\n    functionalCurrencyCode: string;\r\n    statutoryCurrencyCode: string;\r\n    filteredContracts: SectionSearchResult[];\r\n    filteredContractForCharterOrDept: SectionSearchResult[];\r\n    filteredCharter: Charter[];\r\n    filteredCommodityList: Commodity[];\r\n    requiredString: string = 'Required*';\r\n    formatType: string = 'en-US';\r\n\r\n    dateFormats = {\r\n        Date: DateFormats.Date,\r\n        Month: DateFormats.Month,\r\n    };\r\n\r\n    companyConfiguration: Company;\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    gridComponents = {\r\n        atlasSelect: CellEditorSelectComponent,\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n        atlasDatePicker: CellEditorDatePickerComponent,\r\n        atlasMonthDatePicker: CellEditorMonthDatePickerComponent,\r\n    };\r\n    disableMonthly: boolean = true;\r\n    disableDaily: boolean = true;\r\n    disableFrom: boolean = true;\r\n    disableTo: boolean = true;\r\n    FreezeType: FreezeType;\r\n    setPeriodType: FreezeType;\r\n    daily: FreezeType = FreezeType.Daily;\r\n    monthly: FreezeType = FreezeType.Monthly;\r\n    fromDateSet: Date;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private uiService: UiService,\r\n        protected dialog: MatDialog,\r\n        private reportingService: ReportingService,\r\n        private executionService: ExecutionService,\r\n        protected snackbarService: SnackbarService,\r\n        private route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        public tradeDataLoader: TradeDataLoader,\r\n        public charterDataLoader: CharterDataLoader,\r\n        public gridService: AgGridService,\r\n        @Inject(WINDOW) private window: Window,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ldrepAdjustmentMenuActions: { [key: string]: string } = {\r\n        deleteAdjustment: 'delete',\r\n    };\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.companyConfiguration = this.companyManager.getCompany(this.company);\r\n        this.functionalCurrencyCode = this.companyConfiguration.functionalCurrencyCode;\r\n        this.statutoryCurrencyCode = this.companyConfiguration.statutoryCurrencyCode;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.dailyMonthlyToggleCtrl.patchValue(this.daily);\r\n        this.fromDateCtrl.setValue(moment(this.getYesterdayDate()));\r\n        this.filteredCommodityList = this.masterdata.commodities;\r\n        this.charterDataLoader.getData().subscribe((charter) => {\r\n            this.filteredCharter = charter;\r\n        });\r\n        const filterList: ListAndSearchFilter[] = [];\r\n        this.tradeDataLoader.getData(filterList).subscribe((trade) => {\r\n            this.filteredContracts = trade.value;\r\n            this.filteredContractForCharterOrDept = trade.value;\r\n        });\r\n        this.init();\r\n        this.initLDREPAdjustmentGridColumns();\r\n    }\r\n\r\n    init() {\r\n        this.ldrepAdjustmentGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.ldrepAdjustmentMenuActions.deleteAdjustment,\r\n            },\r\n        ];\r\n    }\r\n\r\n    onSearchButtonClicked() {\r\n        if (this.fromDateCtrl.value) {\r\n            if (this.isValid(this.toDateCtrl.value)) {\r\n                if (this.fromDateCtrl.value <= this.toDateCtrl.value) {\r\n                    this.search();\r\n                } else {\r\n                    this.snackbarService.throwErrorSnackBar(\r\n                        'To date cannot be before From date.',\r\n                    );\r\n                    return;\r\n                }\r\n            } else {\r\n                this.search();\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'From date is required.',\r\n            );\r\n            return;\r\n        }\r\n    }\r\n\r\n    search() {\r\n        this.isLoading = true;\r\n        this.gridContext.gridEditable = this.isEditChecked;\r\n        this.getAllLdrepManualAdjustments();\r\n        this.autoSizeGrid();\r\n    }\r\n\r\n    getAllLdrepManualAdjustments() {\r\n        const toDate = (this.setPeriodType === this.monthly) ? this.toDateCtrl.value.endOf('month') : this.toDateCtrl.value;\r\n\r\n        this.subscriptions.push(this.reportingService.getAllLdrepManualAdjustments(this.fromDateCtrl.value, toDate)\r\n            .subscribe((data) => {\r\n                if (data && data.value.length > 0) {\r\n                    this.clearLdrepGrid();\r\n                    data.value.forEach((element) => {\r\n                        const displayCostRow = new LdrepDisplayView(element, this.masterdata);\r\n\r\n                        if (this.gridApi) {\r\n                            this.gridApi.updateRowData({ add: [displayCostRow] });\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.clearLdrepGrid();\r\n                    this.snackbarService.throwErrorSnackBar('No records are available for this search criteria.');\r\n                }\r\n                this.isLoading = false;\r\n            }));\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.autoSizeGrid();\r\n    }\r\n\r\n    autoSizeGrid() {\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    initLDREPAdjustmentGridColumns() {\r\n        this.ldrepManualAdjustmentGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.ldrepManualAdjustmentGridCols = [\r\n            {\r\n                headerName: 'From Date Format*',\r\n                field: 'fromDateFormat',\r\n                colId: 'fromDateFormat',\r\n                editable: (params) => this.gridContext.gridEditable,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: Object.keys(this.dateFormats),\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.newValue === 'Date') {\r\n                        params.node.setDataValue('dateFrom', this.getYesterdayDate());\r\n                    } else if (params.newValue === 'Month') {\r\n                        params.node.setDataValue('dateFrom', moment(new Date()).subtract(1, 'month').startOf('month'));\r\n                    }\r\n                    params.node.setDataValue('toDateFormat', params.newValue);\r\n                },\r\n            },\r\n            {\r\n                headerName: 'From*',\r\n                field: 'dateFrom',\r\n                colId: 'dateFrom',\r\n                editable: (params) => this.gridContext.gridEditable,\r\n                cellEditor: 'atlasMonthDatePicker',\r\n                cellEditorParams: {\r\n                    mode: (params) => {\r\n                        return DateFormats[params.node.data.fromDateFormat];\r\n                    },\r\n                },\r\n                cellRenderer: (params) => {\r\n                    if (params.value) {\r\n                        const dateformat = params.node.data.fromDateFormat == DateFormats[DateFormats.Month] ? 'MMM YYYY' : 'DD MMM YYYY';\r\n                        return moment(params.value).format(dateformat);\r\n                    }\r\n\r\n                    return this.requiredCell(params);\r\n                },\r\n                onCellValueChanged: this.onFromDateSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'To Date Format',\r\n                field: 'toDateFormat',\r\n                colId: 'toDateFormat',\r\n                editable: (params) => this.gridContext.gridEditable,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: Object.keys(this.dateFormats),\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    params.node.setDataValue('dateTo', '');\r\n                },\r\n            },\r\n            {\r\n                headerName: 'To',\r\n                field: 'dateTo',\r\n                colId: 'dateTo',\r\n                editable: (params) => {\r\n                    return this.gridContext.gridEditable && params.node.data.toDateFormat;\r\n                },\r\n                cellEditor: 'atlasMonthDatePicker',\r\n                cellEditorParams: {\r\n                    mode: (params) => {\r\n                        return DateFormats[params.node.data.toDateFormat];\r\n                    },\r\n                    endflag: true,\r\n                },\r\n                cellRenderer: (params) => {\r\n                    if (params.value) {\r\n                        const dateformat = params.node.data.toDateFormat == DateFormats[DateFormats.Month] ? 'MMM YYYY' : 'DD MMM YYYY';\r\n                        return moment(params.value).format(dateformat);\r\n                    }\r\n                    return '';\r\n                },\r\n                onCellValueChanged: this.onToDateSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Department*',\r\n                field: 'departmentCode',\r\n                colId: 'departmentCode',\r\n                cellRendererFramework: AgGridAutocompleteComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        options: this.masterdata.departments,\r\n                        valueProperty: 'departmentCode',\r\n                        codeProperty: 'departmentCode',\r\n                        displayProperty: 'description',\r\n                        isRequired: true,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (!params.data.charterId && params.data.departmentCode) {\r\n                        this.filteredContractForCharterOrDept = this.filteredContracts;\r\n                        this.filteredContractForCharterOrDept = this.filteredContractForCharterOrDept.filter(\r\n                            (e) => e.departmentCode === params.data.departmentCode);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Type*',\r\n                field: 'pNLType',\r\n                colId: 'pNLType',\r\n                editable: (params) => this.gridContext.gridEditable,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                cellEditorParams: {\r\n                    values: this.masterdata.pnlTypes.map((pnlType) => pnlType.enumEntityDescription),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Realized',\r\n                field: 'realized',\r\n                colId: 'realized',\r\n                editable: false,\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    disabled: (params) => !this.gridContext.gridEditable,\r\n                },\r\n            },\r\n            {\r\n                headerName: this.functionalCurrencyCode + ' Adjustment',\r\n                field: 'functionalCCYAdjustment',\r\n                colId: 'functionalCCYAdjustment',\r\n                editable: (params) => this.gridContext.gridEditable,\r\n                valueFormatter: this.formatValue.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, true),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: this.statutoryCurrencyCode + ' Adjustment',\r\n                field: 'statutoryCCYAdjustment',\r\n                colId: 'statutoryCCYAdjustment',\r\n                editable: (params) => this.gridContext.gridEditable,\r\n                valueFormatter: this.formatValue.bind(this),\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: CustomNumberMask(12, 10, true),\r\n                    isRightAligned: false,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Narrative*',\r\n                field: 'narrative',\r\n                colId: 'narrative',\r\n                editable: (params) => this.gridContext.gridEditable,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'agLargeTextCellEditor',\r\n                cellEditorParams: {\r\n                    maxLength: 50,\r\n                    rows: 3,\r\n                    cols: 50,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Charter Reference',\r\n                colId: 'charterId',\r\n                field: 'charterId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: params.context.gridEditable,\r\n                        },\r\n                        gridId: 'charterGrid',\r\n                        isRequired: false,\r\n                        displayProperty: 'charterCode',\r\n                        valueProperty: 'charterId',\r\n                        lightBoxTitle: 'Results for Charters',\r\n                        options: this.filteredCharter,\r\n                        showContextualSearchIcon: params.context.gridEditable,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => this.onValueSelected(\r\n                    params, 'charterId', 'Charter', 'charterCode', this.filteredCharter, ''),\r\n                tooltip: (params) => this.getTooltip(params, 'description', 'charterCode', this.filteredCharter),\r\n            },\r\n            {\r\n                headerName: 'Contract Reference',\r\n                colId: 'sectionId',\r\n                field: 'sectionId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: params.context.gridEditable,\r\n                        },\r\n                        gridId: 'tradeList',\r\n                        isRequired: false,\r\n                        displayProperty: 'contractLabel',\r\n                        valueProperty: 'sectionId',\r\n                        lightBoxTitle: 'Results for Contracts',\r\n                        dataLoader: this.tradeDataLoader,\r\n                        options: this.filteredContractForCharterOrDept,\r\n                        showContextualSearchIcon: params.context.gridEditable,\r\n                    };\r\n                },\r\n                tooltip: (params) => {\r\n                    return params.value ? params.value : null;\r\n                },\r\n                onCellValueChanged: this.onContractReferenceSelected.bind(this),\r\n            },\r\n            {\r\n                headerName: 'Cmy1',\r\n                colId: 'commodityId',\r\n                field: 'commodityId',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: params.context.gridEditable,\r\n                        },\r\n                        gridId: 'commodityGrid',\r\n                        isRequired: false,\r\n                        displayProperty: 'commodityCode',\r\n                        valueProperty: 'commodityId',\r\n                        lightBoxTitle: 'Results for Commodities',\r\n                        options: this.filteredCommodityList,\r\n                        showContextualSearchIcon: params.context.gridEditable,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => this.onValueSelected(\r\n                    params, 'commodityId', 'Commodity', 'commodityCode', this.filteredCommodityList, this.requiredString),\r\n                tooltip: (params) => this.getTooltip(params, 'commodityDescription', 'commodityCode', this.filteredCommodityList),\r\n            },\r\n            {\r\n                headerName: 'Cmy2',\r\n                field: 'cmy2',\r\n                colId: 'cmy2',\r\n            },\r\n            {\r\n                headerName: 'Cmy3',\r\n                field: 'cmy3',\r\n                colId: 'cmy3',\r\n            },\r\n            {\r\n                headerName: 'Cmy4',\r\n                field: 'cmy4',\r\n                colId: 'cmy4',\r\n            },\r\n            {\r\n                headerName: 'Cmy5',\r\n                field: 'cmy5',\r\n                colId: 'cmy5',\r\n            },\r\n            {\r\n                headerName: 'Crop Year',\r\n                field: 'cropYear',\r\n                colId: 'cropYear',\r\n                editable: this.isCropYearEditable.bind(this),\r\n                onCellValueChanged: (params) => this.onCropYearSetValidate(params),\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    isDisabled: (params) => !this.gridContext.gridEditable,\r\n                    menuActions: this.ldrepAdjustmentGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    formatValue(param) {\r\n        if (isNaN(param.value) || param.value === null) { return ''; }\r\n        return new Intl.NumberFormat(this.formatType, { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(param.value);\r\n    }\r\n\r\n    isCropYearEditable(params) {\r\n        if (this.gridContext.gridEditable) {\r\n            return params.data.sectionId ? false : true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onCropYearSetValidate(params) {\r\n        let error = null;\r\n        if (params.data.cropYear) {\r\n            const reg = new RegExp(/[0-9]{4}/g);\r\n            const reg1 = new RegExp(/^[0-9]{4}(\\/[0-9]{4})/);\r\n            const cropString = String(params.data.cropYear).match(reg1);\r\n            const years = String(params.data.cropYear).match(reg);\r\n            const subString = String(params.data.cropYear).includes('/', 4);\r\n\r\n            if (years) {\r\n                if (years.length > 1 && years.length <= 2) {\r\n                    if (Number(years[1]) < Number(years[0])) {\r\n                        error = { isFirstYearGreater: true };\r\n                    }\r\n                } else if (years.length > 2) {\r\n                    error = { NotRegularFormat: true };\r\n                }\r\n            } else {\r\n                error = { NotRegularFormat: true };\r\n            }\r\n\r\n            if (!cropString && years && years.length === 1) {\r\n                error = subString ? { NotRegularFormat: true } : null;\r\n            }\r\n        }\r\n        if (error) {\r\n            if (error.NotRegularFormat) {\r\n                params.node.setDataValue('cropYear', null);\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'only YYYY or YYYY/YYYY format is allowed',\r\n                );\r\n            } else if (error.isFirstYearGreater) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Second year entered after the “/” should always be “greater than” the first year entered before the “/”');\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onFromDateSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue !== this.requiredString) {\r\n            if (params.data.dateFrom && params.data.dateTo && params.data.dateFrom > params.data.dateTo) {\r\n                this.snackbarService.throwErrorSnackBar('From date cannot be after To date.');\r\n                params.node.setDataValue('dateFrom', '');\r\n            }\r\n        }\r\n    }\r\n\r\n    onToDateSelected(params) {\r\n        if (params.newValue && params.oldValue !== params.newValue && params.newValue !== this.requiredString) {\r\n            if (params.data.dateFrom && params.data.dateTo && params.data.dateFrom > params.data.dateTo) {\r\n                this.snackbarService.throwErrorSnackBar('To date cannot be before From date.');\r\n                params.node.setDataValue('dateTo', '');\r\n            }\r\n        }\r\n    }\r\n\r\n    onValueSelected(params, columnId: string, valueName: string, code: string, list: any[],\r\n        requiredString: string, includeEmpty: boolean = false) {\r\n        if ((includeEmpty && params.newValue === '') || (params.newValue && params.oldValue !== params.newValue)) {\r\n            const selected = list.find(\r\n                (obj) => obj[code] ? obj[code].toUpperCase() === params.newValue.toUpperCase() : false,\r\n            );\r\n            if (!selected) {\r\n                this.snackbarService.throwErrorSnackBar('Not allowed : ' + valueName + ' does not exist');\r\n                params.node.setDataValue(columnId, requiredString);\r\n            }\r\n        }\r\n        if (columnId === 'charterId') {\r\n            if (params.data.charterId) {\r\n                this.filteredContractForCharterOrDept = this.filteredContracts;\r\n                const charterRefrence = this.filteredCharter.find(\r\n                    (e) => e.charterId === params.data.charterId).charterCode;\r\n\r\n                this.filteredContractForCharterOrDept = this.filteredContractForCharterOrDept.filter(\r\n                    (e) => e.charterReference === charterRefrence);\r\n\r\n                if (this.gridApi && this.filteredContractForCharterOrDept) {\r\n                    this.gridApi.refreshCells({\r\n                        rowNodes: [params.node],\r\n                        force: true,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (columnId === 'commodityId') {\r\n            const selectedCommodity = this.filteredCommodityList.find(\r\n                (commodity) => commodity.commodityId === params.data.commodityId);\r\n\r\n            if (selectedCommodity) {\r\n                params.node.setDataValue('cmy2', selectedCommodity.commodityOrigin);\r\n                params.node.setDataValue('cmy3', selectedCommodity.commodityGrade);\r\n                params.node.setDataValue('cmy4', selectedCommodity.commodityLvl4);\r\n                params.node.setDataValue('cmy5', selectedCommodity.commodityLvl5);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTooltip(params, description: string, code: string, list: any[]) {\r\n        if (params.value && typeof params.value === 'string') {\r\n            const selected = list.find(\r\n                (obj) => obj[code] ? obj[code].toUpperCase() === params.value.toUpperCase() : false);\r\n            if (selected) {\r\n                return selected[description];\r\n            }\r\n        }\r\n    }\r\n\r\n    getYesterdayDate() {\r\n        let date = new Date();\r\n        let yesterday = new Date(date.getTime());\r\n        yesterday.setDate(date.getDate() - 1);\r\n        return moment(yesterday).startOf('day').toDate();\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newAdjustmentRow = new LdrepDisplayView();\r\n        newAdjustmentRow.isDirty = true;\r\n        newAdjustmentRow.fromDateFormat = DateFormats[DateFormats.Date];\r\n        newAdjustmentRow.toDateFormat = DateFormats[DateFormats.Date];\r\n        newAdjustmentRow.dateFrom = this.getYesterdayDate();\r\n        newAdjustmentRow.realized = false;\r\n        newAdjustmentRow.functionalCCYAdjustment = 0;\r\n        newAdjustmentRow.statutoryCCYAdjustment = 0;\r\n        return newAdjustmentRow;\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'cost-cell-value-required\\'>Required*</div>';\r\n        }\r\n        return params.value;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (rowData.data.isDirty) {\r\n                if (!(rowData.data.fromDateFormat && rowData.data.dateFrom && rowData.data.departmentCode\r\n                    && rowData.data.pNLType && rowData.data.narrative)) {\r\n                    isValid = false;\r\n                }\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n\r\n    isValid(value) {\r\n        if (value === null || value === '' || value === undefined || value === 0) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    handleAction(action: string, ldrep: LdrepDisplayView) {\r\n        if (!this.isValid(ldrep.functionalCCYAdjustment) && !this.isValid(ldrep.statutoryCCYAdjustment)) {\r\n            switch (action) {\r\n                case this.ldrepAdjustmentMenuActions.deleteAdjustment:\r\n                    const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'LDREP Manual Adjustment Deletion',\r\n                            text: 'Are you sure you want to delete the manual adjustment?',\r\n                            okButton: 'Delete anyway',\r\n                            cancelButton: 'Cancel',\r\n                        },\r\n                    });\r\n                    const confirmationSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                        if (answer) {\r\n                            this.model = new LdrepManualAdjustment();\r\n                            ldrep.isDirty = true;\r\n                            this.model.ldrepManualAdjustmentRecords = this.getGridData();\r\n                            if (this.model.ldrepManualAdjustmentRecords.length > 0) {\r\n                                if (this.model.ldrepManualAdjustmentRecords[0].manualAdjustmentId) {\r\n                                    this.subscriptions.push(this.reportingService.deleteLdrepManualAdjustments(this.model).subscribe(() => {\r\n                                        this.snackbarService.informationSnackBar('Manual adjustment deleted.');\r\n                                        this.gridApi.updateRowData({ remove: [ldrep] });\r\n                                        this.isEditChecked = false;\r\n                                        this.gridContext.gridEditable = false;\r\n                                        this.refreshGrid();\r\n                                    }));\r\n                                } else {\r\n                                    this.gridApi.updateRowData({ remove: [ldrep] });\r\n                                    this.snackbarService.informationSnackBar('Manual adjustment deleted.');\r\n                                }\r\n                            } else {\r\n                                this.gridApi.updateRowData({ remove: [ldrep] });\r\n                                this.snackbarService.informationSnackBar('Manual adjustment deleted.');\r\n                            }\r\n                        }\r\n                    });\r\n                    this.subscriptions.push(confirmationSubscription);\r\n                    break;\r\n                default: this.assertUnreachable(action);\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Adjustment is not zero.',\r\n            );\r\n            return;\r\n        }\r\n    }\r\n\r\n    assertUnreachable(x): never {\r\n        throw new Error('Unknown action');\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onBulkDeleteButtonCliked() {\r\n\r\n    }\r\n\r\n    onProceedButtonClicked() {\r\n        const lines = this.addNewLineCtrl.value;\r\n        for (let count = 1; count <= lines; count++) {\r\n            const newItem = this.createNewRowData();\r\n            const res = this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });\r\n        }\r\n        this.addNewLineCtrl.setValue('');\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onContractReferenceSelected(params) {\r\n        if (params.data.sectionId) {\r\n            const selectedContractReference = this.filteredContracts.find(\r\n                (contract) => contract.sectionId === params.data.sectionId);\r\n            if (selectedContractReference) {\r\n                params.node.setDataValue('cropYear', selectedContractReference.cropYear);\r\n                params.node.setDataValue('commodityId', selectedContractReference.commodity1);\r\n                params.node.setDataValue('cmy2', selectedContractReference.commodity2);\r\n                params.node.setDataValue('cmy3', selectedContractReference.commodity3);\r\n                params.node.setDataValue('cmy4', selectedContractReference.commodity4);\r\n                params.node.setDataValue('cmy5', selectedContractReference.commodity5);\r\n            }\r\n        }\r\n    }\r\n\r\n    getMaxDate() {\r\n        const maxDate = moment('9999-12-31', 'YYYY-MM-DD');\r\n        return maxDate;\r\n    }\r\n\r\n    onSaveButtonClick() {\r\n        if (!this.validate()) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Manual adjustment record is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.model = new LdrepManualAdjustment();\r\n        this.model.ldrepManualAdjustmentRecords = this.getGridData();\r\n\r\n        // Check for duplicate adjustment data and show warning\r\n        const rowData = [];\r\n        this.gridApi.forEachNode((node) => rowData.push(node.data));\r\n        const overlap_exists = [];\r\n\r\n        if (rowData.length > 1) {\r\n            for (let i = 0; i < rowData.length - 1; i++) {\r\n                for (let j = i + 1; j < rowData.length; j++) {\r\n                    const a = rowData[i];\r\n                    const b = rowData[j];\r\n                    const a_dateTo = a.dateTo ? a.dateTo : this.getMaxDate();\r\n                    const b_dateTo = b.dateTo ? b.dateTo : this.getMaxDate();\r\n\r\n                    const dates_overlap = (b.dateFrom >= a.dateFrom && b.dateFrom <= a_dateTo) ||\r\n                        (b_dateTo >= a.dateFrom && b_dateTo <= a_dateTo);\r\n\r\n                    if (dates_overlap\r\n                        && a.fromDateFormat === b.fromDateFormat\r\n                        && a.toDateFormat === b.toDateFormat\r\n                        && a.departmentCode === b.departmentCode\r\n                        && a.pNLType === b.pNLType\r\n                        && a.realized === b.realized\r\n                        && a.functionalCCYAdjustment === b.functionalCCYAdjustment\r\n                        && a.statutoryCCYAdjustment === b.statutoryCCYAdjustment\r\n                        && a.charterId === b.charterId\r\n                        && a.sectionId === b.sectionId\r\n                        && a.commodityId === b.commodityId\r\n                        && (a.cropYear ? a.cropYear : null) === b.cropYear) {\r\n                        overlap_exists.push([i, j]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (overlap_exists.length > 0) {\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'LDREP Manual Adjustment',\r\n                        text: 'An adjustment for this period already exists. Please review your adjustment.',\r\n                        okButton: 'Save anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                const confirmationSubscription = confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.save();\r\n                    }\r\n                });\r\n            } else {\r\n                this.save();\r\n            }\r\n        } else {\r\n            this.save();\r\n        }\r\n    }\r\n\r\n    clearDirty() {\r\n        this.gridApi.forEachNode((rowData) => {\r\n            rowData.data.isDirty = false;\r\n        });\r\n    }\r\n\r\n    save() {\r\n        if (this.model && this.model.ldrepManualAdjustmentRecords.length > 0) {\r\n            this.subscriptions.push(this.reportingService\r\n                .createUpdateLdrepManualAdjustment(this.model)\r\n                .subscribe(\r\n                    (data) => {\r\n                        this.snackbarService.informationSnackBar('LDREP adjustment saved successfully.');\r\n                        this.isEditChecked = false;\r\n                        this.gridContext.gridEditable = false;\r\n                        this.refreshGrid();\r\n                        this.autoSizeGrid();\r\n                        this.clearDirty();\r\n                    },\r\n                    (err) => {\r\n                        this.isLoading = false;\r\n                        throw err;\r\n                    }));\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('No records are available to save.');\r\n            return;\r\n        }\r\n    }\r\n\r\n    getGridData(): LdrepManualAdjustmentRecords[] {\r\n        const ldrep = new Array<LdrepManualAdjustmentRecords>();\r\n        this.gridApi.forEachNode((rowData) => {\r\n            const ldrepData: LdrepDisplayView = rowData.data;\r\n            if (ldrepData.isDirty) {\r\n                ldrep.push(ldrepData.getLdrepData(this.masterdata));\r\n            }\r\n        });\r\n        return ldrep;\r\n    }\r\n\r\n    onChanges() {\r\n        if (this.dailyMonthlyToggleCtrl.value === this.daily) {\r\n            this.setPeriodType = this.daily;\r\n        } else if (this.dailyMonthlyToggleCtrl.value === this.monthly) {\r\n            this.setPeriodType = this.monthly;\r\n        }\r\n        this.fromDateCtrl.reset();\r\n        this.toDateCtrl.reset();\r\n\r\n        this.setDefaultValues();\r\n        this.onToggleChangeSetDefaultFromDateValues();\r\n    }\r\n\r\n    setDefaultValues() {\r\n        if (this.setPeriodType === this.daily) {\r\n            this.activateMonth = false;\r\n            this.activateDay = true;\r\n        }\r\n        if (this.setPeriodType === this.monthly) {\r\n            this.activateDay = false;\r\n            this.activateMonth = true;\r\n        }\r\n    }\r\n\r\n    onToggleChangeSetDefaultFromDateValues() {\r\n        if (this.setPeriodType === this.daily) {\r\n            this.fromDateCtrl.setValue(moment(this.getYesterdayDate()));\r\n        }\r\n        if (this.setPeriodType === this.monthly) {\r\n            this.fromDateCtrl.setValue(moment(new Date()).subtract(1, 'month').startOf('month'));\r\n        }\r\n    }\r\n\r\n    onFromChanged(): void {\r\n        this.fromDateCtrl.valueChanges.subscribe((fromValue) => {\r\n            this.setDefaultValues();\r\n            this.fromSelected.emit((fromValue));\r\n            this.fromDateSet = fromValue;\r\n        });\r\n    }\r\n\r\n    onToChanged(): void {\r\n        this.toDateCtrl.valueChanges.subscribe((toValue) => {\r\n            this.setDefaultValues();\r\n            this.toSelected.emit((toValue));\r\n        });\r\n    }\r\n\r\n    clearLdrepGrid() {\r\n        if (this.gridApi) {\r\n            this.gridApi.setRowData([]);\r\n        }\r\n    }\r\n\r\n    onEditToggleButtonClicked(event) {\r\n        this.isEditChecked = event.checked;\r\n        this.gridContext.gridEditable = event.checked;\r\n        this.refreshGrid();\r\n        this.autoSizeGrid();\r\n    }\r\n\r\n    refreshGrid() {\r\n        this.isLoading = true;\r\n        this.gridApi.redrawRows();\r\n        this.isLoading = false;\r\n    }\r\n}\r\n","module.exports = \"<div class='main-container'>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\">\\r\\n        <mat-card fxFlex=\\\"38%\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h2>Database Selection</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"5px\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     fxLayoutGap=\\\"15%\\\">\\r\\n                    <atlas-dropdown-select fxFlex='40%'\\r\\n                                           [label]=\\\"'Snapshot'\\\"\\r\\n                                           [fieldControl]=\\\"pnlSnapshotCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"snapshotList\\\"\\r\\n                                           displayProperty=\\\"freezeDate\\\"\\r\\n                                           [selectProperties]=\\\"['freezeDate']\\\"\\r\\n                                           (optionSelected)=\\\"selectionChanged($event) \\\"></atlas-dropdown-select>\\r\\n\\r\\n                    <atlas-dropdown-select fxFlex='40%'\\r\\n                                           label=\\\"Comparison\\\"\\r\\n                                           [fieldControl]=\\\"pnlComparisonSnapshotCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"comparisonSnapshotList\\\"\\r\\n                                           displayProperty=\\\"freezeDate\\\"\\r\\n                                           [selectProperties]=\\\"['freezeDate']\\\"></atlas-dropdown-select>\\r\\n\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between end\\\"\\r\\n                     fxLayoutGap=\\\"15%\\\">\\r\\n                    <div class=\\\"view-realized-physicals-font\\\"\\r\\n                         fxFlex='40%'>View for Realized physicals </div>\\r\\n                    <atlas-dropdown-select-list fxFlex='40%'\\r\\n                                                [label]=\\\"'Company'\\\"\\r\\n                                                [fieldControl]=\\\"pnlcompanyCtrl\\\"\\r\\n                                                [(options)]=\\\"filteredCompany\\\"\\r\\n                                                [selectProperties]=\\\"companySelect\\\"\\r\\n                                                isEditable=true\\r\\n                                                (optionSelected)=\\\"companyOptionSelected($event)\\\"\\r\\n                                                multiselect=true>\\r\\n                    </atlas-dropdown-select-list>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between end\\\"\\r\\n                     fxLayoutGap=\\\"15%\\\">\\r\\n                    <div class=\\\"charterToggle\\\"\\r\\n                         fxFlex='40%'\\r\\n                         fxLayoutAlign=\\\"start start\\\">\\r\\n                        <mat-slide-toggle mat-raised-button\\r\\n                                          (change)=\\\"onToggleViewRealizedPhysicals()\\\">Charter\\r\\n                        </mat-slide-toggle>\\r\\n                    </div>\\r\\n                    <atlas-dropdown-select fxFlex='40%'\\r\\n                                           [label]=\\\"'Columns to be selected'\\\"\\r\\n                                           [options]=\\\"columnsList\\\"\\r\\n                                           [fieldControl]=\\\"columnstoSelectCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [selectProperties]=\\\"columnsListDisplayProperty\\\"\\r\\n                                           multiselect=true></atlas-dropdown-select>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start end\\\"\\r\\n                     class=\\\"view-realized-physicals-pnl\\\">\\r\\n                    <mat-slide-toggle fxFlex='40%'\\r\\n                                      mat-raised-button\\r\\n                                      (change)=\\\"onToggleIncludeDifferences()\\\">Include differences only\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n        <mat-card fxFlex=\\\"60\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h2>Report Criterias</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"5px\\\">\\r\\n                <atlas-report-criterias #reportCriterias></atlas-report-criterias>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-raised-button\\r\\n                (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n\\r\\n        <button mat-raised-button\\r\\n                class=\\\"generate-report-button\\\"\\r\\n                (click)=\\\"onGenerateExcelButtonClicked()\\\">Detailed Excel View</button>\\r\\n    </div>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 [toBeDownloaded]=\\\"toBeDownloaded\\\"\\r\\n                                 #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".generate-report-button {\\n  margin: 0 !important; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { SSRSReportViewerComponent } from '../../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { SectionSearchResult } from '../../../../../../shared/dtos/section-search-result';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { ColumnsList } from '../../../../../../shared/entities/columns.list';\r\nimport { Company } from '../../../../../../shared/entities/company.entity';\r\nimport { Department } from '../../../../../../shared/entities/department.entity';\r\nimport { Freeze } from '../../../../../../shared/entities/freeze.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { FreezeDisplayView } from '../../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../../shared/services/common/models';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { FreezeService } from '../../../../../../shared/services/http-services/freeze.service';\r\nimport { ReportingService } from '../../../../../../shared/services/http-services/reporting.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../../shared/services/title.service';\r\nimport { nameof } from '../../../../../../shared/services/util.service';\r\nimport { ReportCriteriasComponent } from '../../report-criterias/report-criterias.component';\r\n\r\n@Component({\r\n    selector: 'atlas-pnl-movement-report',\r\n    templateUrl: './pnl-movement-report.component.html',\r\n    styleUrls: ['./pnl-movement-report.component.scss'],\r\n})\r\n\r\nexport class PnlMovementReportComponent extends BaseFormComponent implements OnInit {\r\n\r\n    pnlSnapshotCtrl = new FormControl();\r\n    pnlComparisonSnapshotCtrl = new FormControl();\r\n    pnlcompanyCtrl = new AtlasFormControl('companySelect');\r\n    columnstoSelectCtrl = new AtlasFormControl('columnsSelected');\r\n\r\n    companySelect: string[] = ['companyId'];\r\n    columnsListDisplayProperty: string[] = ['name'];\r\n\r\n    comparisonDBOptions: string[];\r\n    snapshotList: FreezeDisplayView[] = [];\r\n    comparisonSnapshotList: FreezeDisplayView[] = [];\r\n    currentSnapshot = new FreezeDisplayView(-1, 'CURRENT');\r\n    blankSnapshot = new FreezeDisplayView(0, '');\r\n    company: string;\r\n    msg: string = '';\r\n    isDifference: boolean = false;\r\n    isViewRealizedPhysicals: boolean = false;\r\n    contractLimit = 500;\r\n    masterData: MasterData;\r\n    missingCompanyList: string[];\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Companies,\r\n    ];\r\n    companyList: Company[] = [];\r\n    filteredCompany: Company[] = [];\r\n    companiesSelectedList: string[] = [];\r\n    columnsList: ColumnsList[] = [];\r\n    showError = false;\r\n\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/PnL/PnLMovementSummary';\r\n    reportPathForDownload = 'LDC Atlas/PnL/PnLMovementDetailDownload';\r\n\r\n    parameters: any[] = [];\r\n    toBeDownloaded: boolean = false;\r\n    destroy$ = new Subject();\r\n    pnlMovementReportFormGroup: FormGroup;\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n    @ViewChild('reportCriterias') reportCriterias: ReportCriteriasComponent;\r\n\r\n    constructor(\r\n        private freezeService: FreezeService,\r\n        private snackbarService: SnackbarService,\r\n        private reportingService: ReportingService,\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.columnsList = ColumnsList.getColumnsList();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.companyList = this.getCompaniesList();\r\n        this.filteredCompany = this.companyList.filter((event) => event.companyId !== this.company);\r\n        this.pnlcompanyCtrl.patchValue(this.filteredCompany);\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.loadSnapshots();\r\n    }\r\n\r\n    getCompaniesList(): any[] {\r\n        const options: Company[] = this.companyManager.getLoadedCompanies();\r\n        return options;\r\n    }\r\n\r\n    companyOptionSelected(companiesSelected: string[]) {\r\n        if (companiesSelected) {\r\n            this.companiesSelectedList = [];\r\n            if (companiesSelected.length >= 1) {\r\n                companiesSelected.forEach((company) => { this.companiesSelectedList.push(company['companyId']); });\r\n                this.pnlComparisonSnapshotCtrl.setValidators(\r\n                    Validators.compose([Validators.required]),\r\n                );\r\n            } else {\r\n                this.pnlComparisonSnapshotCtrl.setValidators(null);\r\n                this.pnlComparisonSnapshotCtrl.patchValue(null);\r\n                this.companiesSelectedList.length = 0;\r\n            }\r\n            this.reportCriterias.getDataForSelectedCompanies(this.companiesSelectedList);\r\n        }\r\n    }\r\n\r\n    initializeForm() {\r\n        this.pnlMovementReportFormGroup = this.formBuilder.group({\r\n            pnlSnapshotCtrl: this.pnlSnapshotCtrl,\r\n            pnlComparisonSnapshotCtrl: this.pnlComparisonSnapshotCtrl,\r\n            pnlcompanyCtrl: this.pnlcompanyCtrl,\r\n            columnstoSelectCtrl: this.columnstoSelectCtrl,\r\n        });\r\n\r\n        this.setValidators();\r\n        return this.pnlMovementReportFormGroup;\r\n    }\r\n\r\n    setValidators() {\r\n        this.pnlSnapshotCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(\r\n                this.snapshotList,\r\n                nameof<FreezeDisplayView>('dataVersionId'),\r\n            ),\r\n            Validators.required,\r\n        ]));\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate),\r\n                        freeze.freezeDate,\r\n                        freeze.dataVersionTypeId);\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.snapshotList = snapshots;\r\n            if (snapshots.length > 0) {\r\n                this.pnlSnapshotCtrl.setValue(snapshots[0]);\r\n            }\r\n            this.snapshotList.unshift(this.currentSnapshot);\r\n            this.comparisonSnapshotList = this.snapshotList\r\n                .filter((p) => (p.freezeDate !== 'CURRENT' && p.actualfreezeDate !== this.snapshotList[1].actualfreezeDate));\r\n            this.comparisonSnapshotList.push(this.blankSnapshot);\r\n            this.initializeForm();\r\n        });\r\n    }\r\n\r\n    selectionChanged(value) {\r\n        if (value.dataVersionId === -1) {\r\n            this.comparisonSnapshotList = this.snapshotList\r\n                .filter((p) => (p.freezeDate !== 'CURRENT'));\r\n            this.comparisonSnapshotList.push(this.blankSnapshot);\r\n        } else {\r\n            if (this.snapshotList.filter((p) => (p.actualfreezeDate < value.actualfreezeDate)).length > 0) {\r\n                this.comparisonSnapshotList = this.snapshotList\r\n                    .filter((p) => (p.actualfreezeDate < value.actualfreezeDate));\r\n                this.comparisonSnapshotList.push(this.blankSnapshot);\r\n            } else {\r\n                this.comparisonSnapshotList = this.snapshotList\r\n                    .filter((p) => (p.actualfreezeDate < value.actualfreezeDate));\r\n            }\r\n        }\r\n    }\r\n\r\n    onToggleIncludeDifferences() {\r\n        this.isDifference = !this.isDifference;\r\n    }\r\n\r\n    onToggleViewRealizedPhysicals() {\r\n        this.isViewRealizedPhysicals = !this.isViewRealizedPhysicals;\r\n    }\r\n\r\n    getReportCriterias(): any {\r\n        const parameters: any[] = [];\r\n        if (this.reportCriterias.profitCenterIds.length === 0) {\r\n            this.parameters.push({ name: 'isAllProfitCenterSelected', value: 0 });\r\n        } else if (!this.reportCriterias.profitCenterDropdownComponent.allSelected) {\r\n            this.reportCriterias.profitCenterIds.forEach((id: number) => {\r\n                this.parameters.push({ name: 'ProfitCenter', value: id });\r\n            });\r\n        }\r\n\r\n        if (this.reportCriterias.selectedFilteredDepartments.length === 0) {\r\n            this.parameters.push({ name: 'isAllDepartmentSelected', value: 0 });\r\n        } else if (this.reportCriterias.selectedFilteredDepartments.length < this.reportCriterias.filteredDepartments.length) {\r\n            this.reportCriterias.selectedFilteredDepartments.forEach((department: Department) => {\r\n                this.parameters.push({ name: 'Department', value: department.departmentId });\r\n            });\r\n        }\r\n\r\n        if (this.reportCriterias.selectedFilteredContracts.length === 0) {\r\n            this.parameters.push({ name: 'isAllContractNumberSelected', value: 0 });\r\n        } else if (this.reportCriterias.selectedFilteredContracts.length < this.reportCriterias.filteredContracts.length) {\r\n            this.reportCriterias.selectedFilteredContracts.forEach((contract: SectionSearchResult) => {\r\n                this.parameters.push({ name: 'ContractNumber', value: contract.sectionId });\r\n            });\r\n        }\r\n\r\n        if (this.reportCriterias.charterIds.length === 0) {\r\n            this.parameters.push({ name: 'isAllCharterSelected', value: 0 });\r\n        } else if (!this.reportCriterias.charterDropdownComponent.allSelected) {\r\n            this.reportCriterias.charterIds.forEach((id: number) => {\r\n                this.parameters.push({ name: 'Charter', value: id });\r\n            });\r\n        }\r\n        return parameters;\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        if (this.validate()) {\r\n            const freezeDate = this.pnlSnapshotCtrl.value;\r\n            const comparisonDBDate = this.pnlComparisonSnapshotCtrl.value;\r\n            if (this.companiesSelectedList.length > 0) {\r\n                const snapshotId = (this.pnlSnapshotCtrl.value) ? (this.pnlSnapshotCtrl.value as FreezeDisplayView).dataVersionId : -1;\r\n                const comparisonDatabaseId = (this.pnlComparisonSnapshotCtrl.value) ?\r\n                    (this.pnlComparisonSnapshotCtrl.value as FreezeDisplayView).dataVersionId : -1;\r\n                if (snapshotId !== -1 || comparisonDatabaseId !== -1) {\r\n                    this.freezeService.checkFreezeForSelectedDatabase(this.companiesSelectedList, freezeDate['dataVersionTypeId'],\r\n                        freezeDate, comparisonDBDate['dataVersionTypeId'], comparisonDBDate).\r\n                        subscribe((data: any) => {\r\n                            if (data) {\r\n                                this.missingCompanyList = [];\r\n\r\n                                this.showError = (data.missingCompany || data.comparisonMissingCompany) ? true : false;\r\n                                if (data.missingCompany) {\r\n                                    this.missingCompanyList.push(data.missingCompany);\r\n                                }\r\n                                if (data.comparisonMissingCompany) {\r\n                                    this.missingCompanyList.push(data.comparisonMissingCompany);\r\n                                }\r\n\r\n                                if (!this.showError && this.missingCompanyList.length === 0) {\r\n                                    this.CheckDataBaseForSelectedCompany(freezeDate, comparisonDBDate);\r\n                                    this.onGenerateReportParameter();\r\n                                    this.toBeDownloaded = false;\r\n                                    this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n\r\n                                } else {\r\n                                    this.snackbarService.throwErrorSnackBar('The freeze is not present in company '\r\n                                        + this.missingCompanyList + ' report cannot be generated');\r\n                                    this.msg = '';\r\n                                    if (data.missingCompany) {\r\n                                        this.msg = 'Snapshot not present in ' + data.missingCompany;\r\n\r\n                                    }\r\n                                    if (data.comparisonMissingCompany) {\r\n                                        this.msg = (this.msg) ?\r\n                                            this.msg + ' and Comparison db not present in ' + data.comparisonMissingCompany :\r\n                                            'Comparison db not present in ' + data.comparisonMissingCompany;\r\n                                    }\r\n                                    this.snackbarService.throwErrorSnackBar(this.msg);\r\n\r\n                                }\r\n                            }\r\n                        });\r\n                }\r\n            } else {\r\n                this.CheckDataBaseForSelectedCompany(freezeDate, comparisonDBDate);\r\n                this.onGenerateReportParameter();\r\n                this.toBeDownloaded = false;\r\n                this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n\r\n        }\r\n    }\r\n\r\n    CheckDataBaseForSelectedCompany(freezeDate: Date, comparisonDBDate: Date) {\r\n        const snapshotId = (this.pnlSnapshotCtrl.value) ? (this.pnlSnapshotCtrl.value as FreezeDisplayView).dataVersionId : -1;\r\n        const dataVersionIdList = [];\r\n        const compdataVersionIdList = [];\r\n        if (comparisonDBDate && comparisonDBDate['dataVersionTypeId']) {\r\n            compdataVersionIdList.push(comparisonDBDate['dataVersionId']);\r\n        }\r\n        if (snapshotId !== -1) {\r\n            if (freezeDate) {\r\n                dataVersionIdList.push(freezeDate['dataVersionId']);\r\n            }\r\n            this.freezeService.getFreezeForSelectedCompany(this.companiesSelectedList,\r\n                freezeDate['dataVersionTypeId'], freezeDate).\r\n                subscribe((freezeDatas: any) => {\r\n                    if (freezeDatas && freezeDatas.length > 0) {\r\n                        freezeDatas.forEach((freezeData) => { dataVersionIdList.push(freezeData['dataVersionId']); });\r\n                        this.freezeService.getFreezeForSelectedCompany(this.companiesSelectedList,\r\n                            comparisonDBDate['dataVersionTypeId'], comparisonDBDate).\r\n                            subscribe((compFreezeDatas: any) => {\r\n                                if (compFreezeDatas && compFreezeDatas.length > 0) {\r\n                                    compFreezeDatas.forEach((compFreezeData) => {\r\n                                        compdataVersionIdList.push(compFreezeData['dataVersionId']);\r\n                                    });\r\n                                } else { this.getPnlMovementSummaryMessage(dataVersionIdList, compdataVersionIdList); }\r\n                            });\r\n                    } else { this.getPnlMovementSummaryMessage(dataVersionIdList, compdataVersionIdList); }\r\n                });\r\n        } else {\r\n            if (comparisonDBDate && comparisonDBDate['dataVersionTypeId']) {\r\n                this.freezeService.getFreezeForSelectedCompany(this.companiesSelectedList,\r\n                    comparisonDBDate['dataVersionTypeId'], comparisonDBDate).\r\n                    subscribe((compFreezeDatas: any) => {\r\n                        if (compFreezeDatas && compFreezeDatas.length > 0) {\r\n                            compFreezeDatas.forEach((compFreezeData) => {\r\n                                compdataVersionIdList.push(compFreezeData['dataVersionId']);\r\n                            });\r\n                            this.getPnlMovementSummaryMessage(dataVersionIdList, compdataVersionIdList);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    }\r\n\r\n    getPnlMovementSummaryMessage(dataVersionIdList: number[], compdataVersionIdList: number[]) {\r\n        this.reportingService.getPnlMovementSummaryMessage(this.companiesSelectedList,\r\n            dataVersionIdList, compdataVersionIdList).\r\n            subscribe((message: string) => {\r\n                if (message !== null) {\r\n                    const openValidationDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Warning',\r\n                            text: message,\r\n                            okButton: 'OK',\r\n                            cancelButton: 'Cancel',\r\n                        },\r\n                    });\r\n                    openValidationDialog.afterClosed().subscribe((answer) => {\r\n                        if (answer) {\r\n                            this.onGenerateReportParameter();\r\n                            this.toBeDownloaded = false;\r\n                            this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.onGenerateReportParameter();\r\n                    this.toBeDownloaded = false;\r\n                    this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n                }\r\n            });\r\n    }\r\n\r\n    onGenerateExcelButtonClicked() {\r\n        if (this.validate()) {\r\n            this.onGenerateReportParameter();\r\n            this.toBeDownloaded = true;\r\n            this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPathForDownload, this.parameters);\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n\r\n        }\r\n    }\r\n\r\n    onGenerateReportParameter() {\r\n        let comparisonSnapshotId: number;\r\n        {\r\n            const snapshotId = (this.pnlSnapshotCtrl.value as FreezeDisplayView).dataVersionId;\r\n\r\n            if (this.pnlComparisonSnapshotCtrl.value) {\r\n                comparisonSnapshotId = (this.pnlComparisonSnapshotCtrl.value as FreezeDisplayView).dataVersionId;\r\n            }\r\n            const isIncludeDifferences = this.isDifference ? 1 : 0;\r\n            const viewCharter = this.isViewRealizedPhysicals ? 'C' : 'N';\r\n            const companiesList = (this.pnlcompanyCtrl.value as Company[]).map((status) => status.companyId);\r\n\r\n            this.parameters = [\r\n                { name: 'IncludeDifferenceOnly', value: isIncludeDifferences },\r\n                { name: 'View', value: viewCharter },\r\n            ];\r\n\r\n            this.parameters = this.parameters.concat(this.getReportCriterias());\r\n\r\n            if (snapshotId !== -1) {\r\n                this.parameters.push({ name: 'Database', value: snapshotId });\r\n            }\r\n\r\n            if (comparisonSnapshotId && comparisonSnapshotId > 0) {\r\n                this.parameters.push({ name: 'CompDatabase', value: comparisonSnapshotId });\r\n            }\r\n\r\n            if (this.columnstoSelectCtrl.value) {\r\n                const columnsListIds = (this.columnstoSelectCtrl.value as ColumnsList[]).map((columns) => columns.value);\r\n                columnsListIds.forEach((id: number) => {\r\n                    this.parameters.push({ name: 'ColumnsTobeSelected', value: id });\r\n                });\r\n            }\r\n\r\n            if (companiesList.length === 0) {\r\n                this.parameters.push({ name: 'Company', value: this.company });\r\n            } else {\r\n                companiesList.push(this.company);\r\n                companiesList.forEach((name: string) => {\r\n                    this.parameters.push({ name: 'Company', value: name });\r\n                });\r\n            }\r\n            this.parameters.push({ name: 'UserLoginCompany', value: this.company });\r\n        }\r\n    }\r\n\r\n    isContractLimitReached(): boolean {\r\n        if (this.reportCriterias.filteredContracts.length > this.contractLimit &&\r\n            !this.reportCriterias.contractDropdownComponent.allSelected) {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Limit has been reached',\r\n                    text: `You cannot select more than ${this.contractLimit} contracts.`,\r\n                    okButton: 'Got it',\r\n                },\r\n            });\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        if (!this.pnlSnapshotCtrl.value) {\r\n            isValid = false;\r\n        }\r\n        if (this.companiesSelectedList.length !== 0) {\r\n            const comparisonDBDate = this.pnlComparisonSnapshotCtrl.value;\r\n            isValid = (comparisonDBDate && comparisonDBDate['dataVersionTypeId']) ? true : false;\r\n        } else {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"space-around center\\\">\\r\\n\\r\\n        <mat-card class=\\\"database-selection\\\"\\r\\n                  fxFlex=\\\"35\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    Database Selection\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"5px\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\"\\r\\n                     fxLayoutGap=\\\"8px\\\">\\r\\n                    <atlas-dropdown-select fxFlex='50'\\r\\n                                           [label]=\\\"'Snapshot'\\\"\\r\\n                                           [fieldControl]=\\\"pnlSnapshotCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"snapshotList\\\"\\r\\n                                           displayProperty=\\\"freezeDate\\\"\\r\\n                                           [selectProperties]=\\\"['freezeDate']\\\"></atlas-dropdown-select>\\r\\n                    <atlas-dropdown-select-list fxFlex='50'\\r\\n                                                [label]=\\\"'Company'\\\"\\r\\n                                                [fieldControl]=\\\"pnlcompanyCtrl\\\"\\r\\n                                                [(options)]=\\\"filteredCompany\\\"\\r\\n                                                [selectProperties]=\\\"companySelect\\\"\\r\\n                                                isEditable=true\\r\\n                                                (optionSelected)=\\\"onCompanySelected($event)\\\"\\r\\n                                                multiselect=true>\\r\\n                    </atlas-dropdown-select-list>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\"\\r\\n                     fxLayoutGap=\\\"8px\\\">\\r\\n                    <div fxFlex='50'\\r\\n                         class=\\\"view-realized-physicals-font\\\">View for Realized physicals </div>\\r\\n                    <atlas-dropdown-select fxFlex='50'\\r\\n                                           [label]=\\\"'Columns to be selected'\\\"\\r\\n                                           [options]=\\\"columnsList\\\"\\r\\n                                           [fieldControl]=\\\"columnstoSelectCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [selectProperties]=\\\"columnsListDisplayProperty\\\"\\r\\n                                           multiselect=true></atlas-dropdown-select>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left start\\\"\\r\\n                     fxLayoutGap=\\\"8px\\\">\\r\\n                    <mat-slide-toggle fxFlex='50'\\r\\n                                      fxLayoutAlign=\\\"left start\\\"\\r\\n                                      mat-raised-button\\r\\n                                      (change)=\\\"onToggleViewRealizedPhysicals()\\\">Charter\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n\\r\\n\\r\\n        <mat-card fxFlex=\\\"60\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    Report Criterias\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"5px\\\">\\r\\n                <atlas-report-criterias #reportCriterias></atlas-report-criterias>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-raised-button\\r\\n                (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n        <button mat-raised-button\\r\\n                class=\\\"generate-report-button\\\"\\r\\n                (click)=\\\"onGenerateExcelButtonClicked()\\\">Detailed Excel View</button>\\r\\n    </div>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 [toBeDownloaded]=\\\"toBeDownloaded\\\"\\r\\n                                 #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".generate-report-button {\\n  margin: 0 !important; }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { SSRSReportViewerComponent } from '../../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { SectionSearchResult } from '../../../../../../shared/dtos/section-search-result';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { ColumnsList } from '../../../../../../shared/entities/columns.list';\r\nimport { Company } from '../../../../../../shared/entities/company.entity';\r\nimport { Department } from '../../../../../../shared/entities/department.entity';\r\nimport { Freeze } from '../../../../../../shared/entities/freeze.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { FreezeDisplayView } from '../../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../../shared/services/common/models';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { FreezeService } from '../../../../../../shared/services/http-services/freeze.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../../shared/services/title.service';\r\nimport { nameof } from '../../../../../../shared/services/util.service';\r\nimport { ReportCriteriasComponent } from '../../report-criterias/report-criterias.component';\r\n\r\n@Component({\r\n    selector: 'atlas-pnl-report',\r\n    templateUrl: './pnl-report.component.html',\r\n    styleUrls: ['./pnl-report.component.scss'],\r\n})\r\nexport class PnlReportComponent extends BaseFormComponent implements OnInit {\r\n\r\n    pnlSnapshotCtrl = new FormControl();\r\n    pnlcompanyCtrl = new AtlasFormControl('companySelect');\r\n    columnstoSelectCtrl = new AtlasFormControl('columnsSelected');\r\n    companySelect: string[] = ['companyId'];\r\n    columnsListDisplayProperty: string[] = ['name'];\r\n\r\n    snapshotList: FreezeDisplayView[] = [];\r\n    currentSnapshot = new FreezeDisplayView(-1, 'CURRENT');\r\n    company: string;\r\n    parameters: any[] = [];\r\n    toBeDownloaded: boolean = false;\r\n    isViewRealizedPhysicals: boolean = false;\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Companies,\r\n    ];\r\n    companyList: Company[] = [];\r\n    filteredCompany: Company[] = [];\r\n    selectedCompanies: string[] = [];\r\n    columnsList: ColumnsList[] = [];\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/PnL/PnL_Summary';\r\n    reportPathForDownload = 'LDC Atlas/PnL/PnL_Detail_Excel';\r\n    showError = false;\r\n\r\n    destroy$ = new Subject();\r\n    pnlReportFormGroup: FormGroup;\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n    @ViewChild('reportCriterias') reportCriterias: ReportCriteriasComponent;\r\n\r\n    constructor(\r\n        private freezeService: FreezeService,\r\n        private snackbarService: SnackbarService,\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private companyManager: CompanyManagerService,\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private titleService: TitleService) {\r\n        super(formConfigurationProvider);\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.columnsList = ColumnsList.getColumnsList();\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.companyList = this.getCompaniesList();\r\n        this.filteredCompany = this.companyList.filter((event) => event.companyId !== this.company);\r\n        this.pnlcompanyCtrl.patchValue(this.filteredCompany);\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n\r\n        this.loadSnapshots();\r\n    }\r\n\r\n    getCompaniesList(): any[] {\r\n        const options: Company[] = this.companyManager.getLoadedCompanies();\r\n        return options;\r\n    }\r\n\r\n    // will be implemented when the db changes for company list is done .\r\n    onCompanySelected(data: object[]) {\r\n        if (data) {\r\n            this.selectedCompanies = [];\r\n            if (data.length > 0) {\r\n                data.forEach((company) => { this.selectedCompanies.push(company['companyId']); });\r\n            }\r\n            this.reportCriterias.getDataForSelectedCompanies(this.selectedCompanies);\r\n        }\r\n    }\r\n\r\n    initializeForm() {\r\n        this.pnlReportFormGroup = this.formBuilder.group({\r\n            pnlSnapshotCtrl: this.pnlSnapshotCtrl,\r\n            pnlcompanyCtrl: this.pnlcompanyCtrl,\r\n            columnstoSelectCtrl: this.columnstoSelectCtrl,\r\n\r\n        });\r\n\r\n        this.setValidators();\r\n        return this.pnlReportFormGroup;\r\n    }\r\n\r\n    setValidators() {\r\n        this.pnlSnapshotCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(\r\n                this.snapshotList,\r\n                nameof<FreezeDisplayView>('dataVersionId'),\r\n            ),\r\n            Validators.required,\r\n        ]));\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate),\r\n                        freeze.freezeDate,\r\n                        freeze.dataVersionTypeId);\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.snapshotList = snapshots;\r\n            if (snapshots.length > 0) {\r\n                this.pnlSnapshotCtrl.setValue(snapshots[0]);\r\n            }\r\n            this.snapshotList.unshift(this.currentSnapshot);\r\n            this.initializeForm();\r\n        });\r\n    }\r\n\r\n    onToggleViewRealizedPhysicals() {\r\n        this.isViewRealizedPhysicals = !this.isViewRealizedPhysicals;\r\n    }\r\n\r\n    getReportCriterias(): any {\r\n        const parameters: any[] = [];\r\n        if (this.reportCriterias.profitCenterIds.length === 0) {\r\n            this.parameters.push({ name: 'isAllProfitCenterSelected', value: 0 });\r\n        } else if (!this.reportCriterias.profitCenterDropdownComponent.allSelected) {\r\n            this.reportCriterias.profitCenterIds.forEach((id: number) => {\r\n                this.parameters.push({ name: 'Profit_Center', value: id });\r\n            });\r\n        }\r\n\r\n        if (this.reportCriterias.selectedFilteredDepartments.length === 0) {\r\n            this.parameters.push({ name: 'isAllDepartmentSelected', value: 0 });\r\n        } else if (this.reportCriterias.selectedFilteredDepartments.length < this.reportCriterias.filteredDepartments.length) {\r\n            this.reportCriterias.selectedFilteredDepartments.forEach((department: Department) => {\r\n                this.parameters.push({ name: 'Department', value: department.departmentId });\r\n            });\r\n        }\r\n\r\n        if (this.reportCriterias.selectedFilteredContracts.length === 0) {\r\n            this.parameters.push({ name: 'isAllContractNumberSelected', value: 0 });\r\n        } else if (this.reportCriterias.selectedFilteredContracts.length < this.reportCriterias.filteredContracts.length) {\r\n            this.reportCriterias.selectedFilteredContracts.forEach((contract: SectionSearchResult) => {\r\n                this.parameters.push({ name: 'Contract_Number', value: contract.sectionId });\r\n            });\r\n        }\r\n\r\n        if (this.reportCriterias.charterIds.length === 0) {\r\n            this.parameters.push({ name: 'isAllCharterSelected', value: 0 });\r\n        } else if (!this.reportCriterias.charterDropdownComponent.allSelected) {\r\n            this.reportCriterias.charterIds.forEach((id: number) => {\r\n                this.parameters.push({ name: 'CharterId', value: id });\r\n            });\r\n        }\r\n        return parameters;\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        const snapshotId = (this.pnlSnapshotCtrl.value as FreezeDisplayView).dataVersionId;\r\n        if (snapshotId !== -1 && this.selectedCompanies.length > 0) {\r\n            const freezeDate = this.pnlSnapshotCtrl.value;\r\n            this.freezeService.checkFreezeForSelectedDatabase(this.selectedCompanies, freezeDate['dataVersionTypeId'],\r\n                freezeDate, null, null).subscribe((data: any) => {\r\n                    if (data) {\r\n                        let missingCompanyList: string;\r\n\r\n                        if (data.missingCompany) {\r\n                            this.showError = true;\r\n                            missingCompanyList = data.missingCompany;\r\n                        } else {\r\n                            this.showError = false;\r\n                        }\r\n                        if (!this.showError) {\r\n                            this.onGenerateReportParameter();\r\n                            this.toBeDownloaded = false;\r\n                            this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n                        } else {\r\n                            this.snackbarService.throwErrorSnackBar('The freeze is not present in company '\r\n                                + missingCompanyList + ' report cannot be generated');\r\n                        }\r\n                    }\r\n                });\r\n        } else {\r\n            this.onGenerateReportParameter();\r\n            this.toBeDownloaded = false;\r\n            this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n        }\r\n    }\r\n\r\n    onGenerateExcelButtonClicked() {\r\n        this.onGenerateReportParameter();\r\n        this.toBeDownloaded = true;\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPathForDownload, this.parameters);\r\n    }\r\n\r\n    onGenerateReportParameter() {\r\n        const snapshotId = (this.pnlSnapshotCtrl.value as FreezeDisplayView).dataVersionId;\r\n        const viewCharter = this.isViewRealizedPhysicals ? 'C' : 'N';\r\n        const companiesList = (this.pnlcompanyCtrl.value as Company[]).map((status) => status.companyId);\r\n\r\n        this.parameters = [\r\n            { name: 'View', value: viewCharter },\r\n        ];\r\n\r\n        this.parameters = this.parameters.concat(this.getReportCriterias());\r\n\r\n        if (snapshotId !== -1) {\r\n            this.parameters.push({ name: 'LeftDataVersion', value: snapshotId });\r\n        }\r\n\r\n        if (this.columnstoSelectCtrl.value) {\r\n            const columnsListIds = (this.columnstoSelectCtrl.value as ColumnsList[]).map((columns) => columns.value);\r\n            columnsListIds.forEach((id: number) => {\r\n                this.parameters.push({ name: 'ColumnsTobeSelected', value: id });\r\n            });\r\n        }\r\n\r\n        if (companiesList.length === 0) {\r\n            this.parameters.push({ name: 'CompanyId', value: this.company });\r\n        } else {\r\n            companiesList.push(this.company);\r\n            companiesList.forEach((name: string) => {\r\n                this.parameters.push({ name: 'CompanyId', value: name });\r\n            });\r\n        }\r\n\r\n        this.parameters.push({ name: 'UserLoginCompany', value: this.company });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div *ifAuthorized=\\\"'Reports.PLReport',company:this.company\\\"\\r\\n         class=\\\"header-tab-container\\\">\\r\\n        <mat-tab-group dynamicHeight\\r\\n                       (selectedTabChange)=\\\"getPosition($event)\\\"\\r\\n                       [(selectedIndex)]=selectedTab\\r\\n                       class=\\\"bright-tab\\\">\\r\\n            <mat-tab label=\\\"P&L\\\">\\r\\n                <atlas-pnl-report #pnlReportComponent>\\r\\n                </atlas-pnl-report>\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"P&L MOVEMENT\\\">\\r\\n                <atlas-pnl-movement-report #pnlMovementReportComponent>\\r\\n                </atlas-pnl-movement-report>\\r\\n            </mat-tab>\\r\\n            <mat-tab label=\\\"MANUAL ADJUSTMENT\\\">\\r\\n                <atlas-ldrep-manual-adjustment-report #ldrepManualAdjustmentReportComponent>\\r\\n                </atlas-ldrep-manual-adjustment-report>\\r\\n            </mat-tab>\\r\\n        </mat-tab-group>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".dark-tab .mat-tab-group,\\n.dark-tab .mat-tab-nav-bar {\\n  width: 100%; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { LdrepManualAdjustmentReportComponent } from './ldrep-manual-adjustment-report/ldrep-manual-adjustment-report.component';\r\nimport { PnlMovementReportComponent } from './pnl-movement-report/pnl-movement-report.component';\r\nimport { PnlReportComponent } from './pnl-report/pnl-report.component';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'atlas-pnl-reports',\r\n    templateUrl: './pnl-reports.component.html',\r\n    styleUrls: ['./pnl-reports.component.scss'],\r\n})\r\nexport class PnlReportsComponent implements OnInit {\r\n    @ViewChild('pnlReportComponent') pnlReportComponent: PnlReportComponent;\r\n    @ViewChild('pnlMovementReportComponent') pnlMovementReportComponent: PnlMovementReportComponent;\r\n    @ViewChild('ldrepManualAdjustmentReportComponent') ldrepManualAdjustmentReportComponent: LdrepManualAdjustmentReportComponent;\r\n\r\n    public selectedTab: number = 0;\r\n    company: string;\r\n\r\n\r\n    constructor(private route: ActivatedRoute, ) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    getPosition(event) {\r\n\r\n    }\r\n}\r\n","module.exports = \"<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div></div>\\r\\n    <button mat-button>\\r\\n        <mat-icon (click)=\\\"onCloseButtonClicked()\\\">close</mat-icon>\\r\\n    </button>\\r\\n</div>\\r\\n<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\">{{message}}</div>\\r\\n<div fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <div></div>\\r\\n    <button mat-button\\r\\n            (click)=\\\"onOkButtonClicked()\\\">OK\\r\\n    </button>\\r\\n</div>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\n\r\n@Component({\r\n    selector: 'atlas-validation-dialog',\r\n    templateUrl: './validation-dialog.component.html',\r\n    styleUrls: ['./validation-dialog.component.scss'],\r\n})\r\nexport class ValidationDialogComponent implements OnInit {\r\n\r\n    message: string;\r\n    dialogData: {\r\n        message: string;\r\n    };\r\n    constructor(public thisDialogRef: MatDialogRef<ValidationDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: { message: string }) {\r\n        this.dialogData = data;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.message = this.dialogData.message;\r\n    }\r\n\r\n    onCloseButtonClicked() {\r\n        this.thisDialogRef.close(false);\r\n    }\r\n\r\n    onOkButtonClicked() {\r\n        this.thisDialogRef.close(true);\r\n    }\r\n\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"reportCriteriaFormGroup\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutGap=\\\"1%\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <div fxFlex=\\\"50%\\\">\\r\\n            <atlas-contextual-search-multiple-autocomplete-select #profitCenterDropdownComponent\\r\\n                                                                  [options]=\\\"profitCenters\\\"\\r\\n                                                                  [selectedOptions]=\\\"[]\\\"\\r\\n                                                                  [allOptionsElement]=\\\"profitCenterAllOptions\\\"\\r\\n                                                                  [allSelected]=\\\"allProfitCentersSelected\\\"\\r\\n                                                                  displayCode=\\\"true\\\"\\r\\n                                                                  valueProperty=\\\"profitCenterId\\\"\\r\\n                                                                  codeProperty=\\\"profitCenterCode\\\"\\r\\n                                                                  displayProperty=\\\"description\\\"\\r\\n                                                                  placeholder=\\\"Profit Centers\\\"\\r\\n                                                                  placeholderFilter=\\\"Profit Center\\\"\\r\\n                                                                  elementName=\\\"Profit Center\\\"\\r\\n                                                                  (selectionChangedEvent)=\\\"onprofitSelectionChanged($event)\\\">\\r\\n            </atlas-contextual-search-multiple-autocomplete-select>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"50%\\\">\\r\\n            <atlas-contextual-search-multiple-autocomplete-select #charterDropdownComponent\\r\\n                                                                  [options]=\\\"filteredCharters\\\"\\r\\n                                                                  [selectedOptions]=\\\"[]\\\"\\r\\n                                                                  [allOptionsElement]=\\\"charterAllOptions\\\"\\r\\n                                                                  [allSelected]=\\\"allChartersSelected\\\"\\r\\n                                                                  displayCode=\\\"true\\\"\\r\\n                                                                  valueProperty=\\\"charterId\\\"\\r\\n                                                                  displayProperty=\\\"description\\\"\\r\\n                                                                  codeProperty=\\\"charterCode\\\"\\r\\n                                                                  placeholder=\\\"Charters\\\"\\r\\n                                                                  placeholderFilter=\\\"Charter\\\"\\r\\n                                                                  elementName=\\\"Charter\\\"\\r\\n                                                                  (selectionChangedEvent)=\\\"onCharterSelectionChanged($event)\\\">\\r\\n            </atlas-contextual-search-multiple-autocomplete-select>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left start\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <div fxFlex=\\\"50%\\\">\\r\\n            <atlas-contextual-search-multiple-autocomplete-select #departmentDropdownComponent\\r\\n                                                                  [options]=\\\"filteredDepartments\\\"\\r\\n                                                                  [selectedOptions]=\\\"[]\\\"\\r\\n                                                                  [allOptionsElement]=\\\"departmentAllOptions\\\"\\r\\n                                                                  [allSelected]=\\\"allDepartmentsSelected\\\"\\r\\n                                                                  displayCode=\\\"true\\\"\\r\\n                                                                  valueProperty=\\\"departmentId\\\"\\r\\n                                                                  codeProperty=\\\"departmentCode\\\"\\r\\n                                                                  displayProperty=\\\"description\\\"\\r\\n                                                                  placeholder=\\\"Departments\\\"\\r\\n                                                                  placeholderFilter=\\\"Department\\\"\\r\\n                                                                  elementName=\\\"Department\\\"\\r\\n                                                                  (selectionChangedEvent)=\\\"onDepartmentSelectionChanged($event)\\\">\\r\\n            </atlas-contextual-search-multiple-autocomplete-select>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"50%\\\">\\r\\n            <atlas-contextual-search-multiple-autocomplete-select #contractDropdownComponent\\r\\n                                                                  [options]=\\\"filteredContracts\\\"\\r\\n                                                                  [selectedOptions]=\\\"[]\\\"\\r\\n                                                                  [allOptionsElement]=\\\"contractAllOptions\\\"\\r\\n                                                                  [allSelected]=\\\"allContractSelected\\\"\\r\\n                                                                  displayCode=\\\"true\\\"\\r\\n                                                                  valueProperty=\\\"sectionId\\\"\\r\\n                                                                  codeProperty=\\\"contractLabel\\\"\\r\\n                                                                  placeholder=\\\"Contracts\\\"\\r\\n                                                                  placeholderFilter=\\\"Contract Label\\\"\\r\\n                                                                  elementName='Contract'\\r\\n                                                                  (selectionChangedEvent)=\\\"onContractSelectionChanged($event)\\\">\\r\\n            </atlas-contextual-search-multiple-autocomplete-select>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { SectionSearchResult } from '../../../../../shared/dtos/section-search-result';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Charter } from '../../../../../shared/entities/charter.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { ProfitCenter } from '../../../../../shared/entities/profit-center.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ExecutionService } from '../../../../../shared/services/http-services/execution.service';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { TradingService } from '../../../../../shared/services/http-services/trading.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { ContextualSearchMultipleAutocompleteSelectComponent } from './../../../../../shared/components/form-components/multiple-autocomplete-dropdown/contextual-search/contextual-search-multiple-autocomplete-select.component';\r\nimport { MultipleAutocompleteDropdownComponent } from './../../../../../shared/components/multiple-autocomplete-dropdown/multiple-autocomplete-dropdown.component';\r\n\r\n@Component({\r\n    selector: 'atlas-report-criterias',\r\n    templateUrl: './report-criterias.component.html',\r\n    styleUrls: ['./report-criterias.component.scss'],\r\n})\r\n\r\nexport class ReportCriteriasComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('departmentDropdownComponent') departmentDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    @ViewChild('profitCenterDropdownComponent') profitCenterDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    @ViewChild('contractDropdownComponent') contractDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    @ViewChild('charterDropdownComponent') charterDropdownComponent: ContextualSearchMultipleAutocompleteSelectComponent;\r\n    contractCodeCtrl = new FormControl('');\r\n    charterCodeCtrl = new AtlasFormControl('charterCodeCriteria');\r\n    filteredContracts: SectionSearchResult[] = [];\r\n    selectedFilteredContracts: SectionSearchResult[];\r\n    filteredCharters: Charter[] = [];\r\n    charters: Charter[] = [];\r\n    contracts: SectionSearchResult[] = [];\r\n    masterdata: MasterData;\r\n    reportCriteriaFormGroup: FormGroup;\r\n    departments: Department[] = [];\r\n    filteredDepartments: Department[] = [];\r\n    selectedFilteredDepartments: Department[] = [];\r\n    profitCenterIds: number[] = [];\r\n    charterIds: number[] = [];\r\n    charterDisplayProperty: string[] = ['name'];\r\n    profitCenters: ProfitCenter[] = [];\r\n    company: string;\r\n\r\n    contractAllOptions = {\r\n        contractLabel: 'All',\r\n        sectionId: 0,\r\n    };\r\n    allContractSelected = true;\r\n\r\n    departmentAllOptions = {\r\n        departmentCode: 'All',\r\n        departmentId: 0,\r\n    };\r\n    allDepartmentsSelected = true;\r\n\r\n    charterAllOptions = {\r\n        charterCode: 'All',\r\n        charterId: 0,\r\n    };\r\n    allChartersSelected = true;\r\n\r\n    profitCenterAllOptions = {\r\n        profitCenterCode: 'All',\r\n        profitCenterId: 0,\r\n    };\r\n    allProfitCentersSelected = true;\r\n    iscompanySelected: boolean = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private executionService: ExecutionService,\r\n        private masterdataService: MasterdataService,\r\n        private tradingService: TradingService,\r\n        private route: ActivatedRoute,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeForm();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.initContracts();\r\n        this.initCharters();\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.departments = this.masterdata.departments;\r\n        this.initProfitCenters();\r\n    }\r\n\r\n    initContracts() {\r\n        this.tradingService.getAll()\r\n            .subscribe((contracts) => {\r\n                this.contracts = contracts.value;\r\n                this.onDepartmentSelectionChanged(this.filteredDepartments);\r\n            });\r\n    }\r\n\r\n    initProfitCenters() {\r\n        this.profitCenters = this.route.snapshot.data.masterdata.profitCenters.map((X) => ({ ...X }));\r\n        this.profitCenters = this.profitCenters.map((profitCenter) => {\r\n            profitCenter.profitCenterCode = this.company + ' - ' + profitCenter.profitCenterCode;\r\n            return profitCenter;\r\n        });\r\n        this.profitCenterDropdownComponent.options = this.profitCenters;\r\n        this.profitCenterDropdownComponent.optionsChanged();\r\n        this.onprofitSelectionChanged(this.profitCenters);\r\n    }\r\n\r\n    onprofitSelectionChanged(profitCenters: ProfitCenter[]) {\r\n        if (profitCenters) {\r\n            this.profitCenterIds = profitCenters.map((profitCenter) => profitCenter.profitCenterId);\r\n            if (this.departments.length > 0) {\r\n                this.filteredDepartments = this.departments.map((X) => ({ ...X }));\r\n                this.filteredDepartments = this.filteredDepartments.filter((department) => {\r\n                    return this.profitCenterIds.includes(department.profitCenterId);\r\n                });\r\n                this.filteredDepartments = this.filteredDepartments.map((department) => {\r\n                    department.departmentCode = department.companyCode + ' - ' + department.departmentCode;\r\n                    return department;\r\n                });\r\n                this.departmentDropdownComponent.options = this.filteredDepartments;\r\n                this.departmentDropdownComponent.optionsChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    initCharters() {\r\n        this.charterIds = [];\r\n        this.executionService.getCharters()\r\n            .subscribe((charters) => {\r\n                this.charters = charters.value;\r\n                for (const charter of this.charters) {\r\n                    this.charterIds.push(charter['charterId']);\r\n                }\r\n                this.charters = this.charters.map((charter) => {\r\n                    charter.charterCode = this.company + ' - ' + charter.charterCode;\r\n                    return charter;\r\n                });\r\n                this.charterDropdownComponent.options = this.charters;\r\n                this.charterDropdownComponent.optionsChanged();\r\n            });\r\n    }\r\n\r\n    onDepartmentSelectionChanged(departments: Department[]) {\r\n        this.selectedFilteredDepartments = departments ? departments : [];\r\n        if (departments && !this.iscompanySelected) {\r\n            const departmentsIds = departments.map((departmentList) => departmentList.departmentId);\r\n            const filteredDepartments = this.masterdata.departments.filter((department) => {\r\n                return departmentsIds.includes(department.departmentId);\r\n            });\r\n            const selectedDepartments = filteredDepartments.map((department) => department.departmentCode);\r\n\r\n            this.filteredContracts = this.contracts.filter((contract) => {\r\n                return selectedDepartments.includes(contract.departmentCode);\r\n            });\r\n            this.contractDropdownComponent.options = this.filteredContracts;\r\n            this.contractDropdownComponent.optionsChanged();\r\n        }\r\n    }\r\n\r\n    onContractSelectionChanged(contracts: SectionSearchResult[]) {\r\n        this.selectedFilteredContracts = contracts ? contracts : [];\r\n    }\r\n\r\n    getDataForSelectedCompanies(selectedCompanies: string[]) {\r\n        this.charterIds = [];\r\n        this.iscompanySelected = selectedCompanies.length > 0 ? true : false;\r\n        this.subscriptions.push(forkJoin([\r\n            this.masterdataService.getProfitCenterForSelectedCompanyId(selectedCompanies).pipe(\r\n                map((profitCenters: any) => {\r\n                    return profitCenters.value;\r\n                }),\r\n            ),\r\n            this.masterdataService.getDepartmentsForSelectedCompanyId('', null, selectedCompanies).pipe(\r\n                map((departments: any) => {\r\n                    return departments.value;\r\n                }),\r\n            ),\r\n            this.executionService.getChartersForCompanies(selectedCompanies).pipe(\r\n                map((charters: any) => {\r\n                    return charters.value;\r\n                }),\r\n            )])\r\n            .subscribe((result: [ProfitCenter[], Department[], Charter[]]) => {\r\n                this.profitCenters = result[0];\r\n                this.departments = result[1];\r\n                this.charters = result[2];\r\n\r\n                this.profitCenters = this.profitCenters.map((profitCenter) => {\r\n                    profitCenter.profitCenterCode = profitCenter.companyCode + ' - ' + profitCenter.profitCenterCode;\r\n                    return profitCenter;\r\n                });\r\n                this.profitCenterDropdownComponent.options = this.profitCenters;\r\n                this.profitCenterDropdownComponent.optionsChanged();\r\n                this.onprofitSelectionChanged(this.profitCenters);\r\n                for (const charter of this.charters) {\r\n                    this.charterIds.push(charter['charterId']);\r\n                }\r\n                this.charters = this.charters.map((charter) => {\r\n                    charter.charterCode = charter.company + ' - ' + charter.charterCode;\r\n                    return charter;\r\n                });\r\n                this.charterDropdownComponent.options = this.charters;\r\n                this.charterDropdownComponent.optionsChanged();\r\n                if (this.iscompanySelected) {\r\n                    this.contractDropdownComponent.fieldControl.disable();\r\n                } else {\r\n                    this.contractDropdownComponent.fieldControl.enable();\r\n                }\r\n            }));\r\n    }\r\n\r\n    onCharterSelectionChanged(charters: Charter[]) {\r\n        if (charters) {\r\n            this.charterIds = charters.map((charter) => charter.charterId);\r\n        }\r\n    }\r\n\r\n    initializeForm() {\r\n        this.reportCriteriaFormGroup = this.formBuilder.group({\r\n            contractCodeCtrl: this.contractCodeCtrl,\r\n            charterCodeCtrl: this.charterCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    getReportCriterias(\r\n        params,\r\n        profitCenterParam: string = 'RP_LDC_LDREP_PL_Profit_Center',\r\n        departmentParam: string = 'RP_LDC_LDREP_PL_Department',\r\n        contractNumberParam: string = 'RP_LDC_LDREP_PL_Contract_Number',\r\n        charterParam: string = 'RP_LDC_LDREP_PL_CharterId',\r\n    ): any {\r\n        if (this.profitCenterIds.length === 0) {\r\n            params.push({ name: 'isAllProfitCenterSelected', value: 0 });\r\n        } else if (!this.profitCenterDropdownComponent.allSelected) {\r\n            this.profitCenterIds.forEach((id: number) => {\r\n                params.push({ name: profitCenterParam, value: id });\r\n            });\r\n        }\r\n\r\n        if (this.selectedFilteredDepartments.length === 0) {\r\n            params.push({ name: 'isAllDepartmentSelected', value: 0 });\r\n        } else if (this.selectedFilteredDepartments.length < this.filteredDepartments.length) {\r\n            this.selectedFilteredDepartments.forEach((department: Department) => {\r\n                params.push({ name: departmentParam, value: department.departmentId });\r\n            });\r\n        }\r\n\r\n        if (this.selectedFilteredContracts.length === 0) {\r\n            params.push({ name: 'isAllContractNumberSelected', value: 0 });\r\n        } else if (this.selectedFilteredContracts.length < this.filteredContracts.length) {\r\n            this.selectedFilteredContracts.forEach((contract: SectionSearchResult) => {\r\n                params.push({ name: contractNumberParam, value: contract.sectionId });\r\n            });\r\n        }\r\n\r\n        if (this.charterIds.length === 0) {\r\n            params.push({ name: 'isAllCharterSelected', value: 0 });\r\n        } else if (!this.charterDropdownComponent.allSelected) {\r\n            this.charterIds.forEach((id: number) => {\r\n                params.push({ name: charterParam, value: id });\r\n            });\r\n        }\r\n        return params;\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class='main-container trade-cost-movement-report'>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"space-around center\\\">\\r\\n        <mat-card fxFlex=\\\"45\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h2>Criterias</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left stretch\\\"\\r\\n                     fxLayoutGap=\\\"5%\\\">\\r\\n\\r\\n\\r\\n                    <atlas-dropdown-select fxFlex='30%'\\r\\n                                           [label]=\\\"'Database'\\\"\\r\\n                                           [fieldControl]=\\\"snapshotsCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"snapshotList\\\"\\r\\n                                           [errorMap]=\\\"snapshotErrorMap\\\"\\r\\n                                           displayProperty=\\\"freezeDate\\\"\\r\\n                                           [selectProperties]=\\\"['freezeDate']\\\"\\r\\n                                           (optionSelected)=\\\"selectionChanged($event) \\\"></atlas-dropdown-select>\\r\\n                    <atlas-dropdown-select fxFlex='30%'\\r\\n                                           [label]=\\\"'Trade Status'\\\"\\r\\n                                           [options]=\\\"constractStatusList\\\"\\r\\n                                           [fieldControl]=\\\"contractStatusCtrl\\\"\\r\\n                                           [errorMap]=\\\"contractStatusErrorMap\\\"\\r\\n                                           isEditable=true\\r\\n                                           [selectProperties]=\\\"contractStatusDisplayProperty\\\"\\r\\n                                           multiselect=true></atlas-dropdown-select>\\r\\n\\r\\n                    <span fxLayoutAlign=\\\"left center\\\">\\r\\n                        <mat-checkbox [checked]=\\\"includeGoods\\\"\\r\\n                                      (change)=\\\"onIncludeGoodsChanged($event)\\\">Include Goods</mat-checkbox>\\r\\n                    </span>\\r\\n\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left stretch\\\"\\r\\n                     fxLayoutGap=\\\"5%\\\">\\r\\n                    <atlas-dropdown-select fxFlex='30%'\\r\\n                                           [label]=\\\"'Comparison Database'\\\"\\r\\n                                           [fieldControl]=\\\"comparisondbCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"comparisondbList\\\"\\r\\n                                           [errorMap]=\\\"comparisondbErrorMap\\\"\\r\\n                                           displayProperty=\\\"freezeDate\\\"\\r\\n                                           [selectProperties]=\\\"['freezeDate']\\\"></atlas-dropdown-select>\\r\\n                    <atlas-dropdown-select-list fxFlex='30%'\\r\\n                                                [label]=\\\"'Company'\\\"\\r\\n                                                [fieldControl]=\\\"tradeCostcompanyCtrl\\\"\\r\\n                                                [(options)]=\\\"filteredCompany\\\"\\r\\n                                                [selectProperties]=\\\"companySelect\\\"\\r\\n                                                isEditable=true\\r\\n                                                multiselect=true\\r\\n                                                (optionSelected)=\\\"companyOptionSelected($event)\\\">\\r\\n                    </atlas-dropdown-select-list>\\r\\n                    <span fxLayoutAlign=\\\"right center\\\">\\r\\n                        <mat-checkbox [checked]=\\\"excludeNoMovement\\\"\\r\\n                                      (change)=\\\"onNoCostMovementChanged($event)\\\">No Cost Movement</mat-checkbox>\\r\\n                    </span>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n\\r\\n        </mat-card>\\r\\n        <atlas-filter-set-display fxFlex=\\\"50\\\"\\r\\n                                  (filtersChanged)=onFilterSetChanged($event)\\r\\n                                  [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                                  [gridCode]=\\\"gridCode\\\"\\r\\n                                  [company]=\\\"company\\\">\\r\\n        </atlas-filter-set-display>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-raised-button\\r\\n                class=\\\"generate-report-button\\\"\\r\\n                (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n    </div>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".generate-report-button {\\n  margin: 8px 0 0 0 !important; }\\n\\n.report-container {\\n  height: 60vh; }\\n\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCheckboxChange } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Freeze } from '../../../../../shared/entities/freeze.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { TradeStatus } from '../../../../../shared/entities/trade-status.entity';\r\nimport { FreezeType } from '../../../../../shared/enums/freeze-type.enum';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { FreezeService } from '../../../../../shared/services/http-services/freeze.service';\r\nimport { ReportingService } from '../../../../../shared/services/http-services/reporting.service';\r\nimport { PredicateReference } from '../../../../../shared/services/reporting/dtos/predicate-reference';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { nameof } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-cost-movement-report',\r\n    templateUrl: './trade-cost-movement-report.component.html',\r\n    styleUrls: ['./trade-cost-movement-report.component.scss'],\r\n})\r\nexport class TradeCostMovementReportComponent implements OnInit, OnDestroy {\r\n    snapshotsCtrl = new FormControl();\r\n    contractStatusCtrl = new FormControl();\r\n    comparisondbCtrl = new FormControl();\r\n    tradeCostcompanyCtrl = new AtlasFormControl('companySelect');\r\n    companySelect: string[] = ['companyId'];\r\n\r\n    includeGoods = false;\r\n    excludeNoMovement = false;\r\n    constractStatusList: TradeStatus[] = [];\r\n    contractStatusDisplayProperty: string[] = ['name'];\r\n    snapshotList: FreezeDisplayView[] = [];\r\n    comparisondbList: FreezeDisplayView[] = [];\r\n    currentSnapshot = new FreezeDisplayView(-1, 'CURRENT', null, FreezeType.Current);\r\n    company: string;\r\n    gridCode = 'tradeCostReportGrid';\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    filters: ListAndSearchFilter[] = [];\r\n    companyList: Company[] = [];\r\n    filteredCompany: Company[] = [];\r\n    companiesSelectedList: any[] = [];\r\n    missingCompanyList: string[];\r\n    masterData: MasterData;\r\n    showError = false;\r\n\r\n    contractStatusErrorMap: Map<string, string> = new Map<string, string>();\r\n    snapshotErrorMap: Map<string, string> = new Map<string, string>();\r\n    comparisondbErrorMap: Map<string, string> = new Map<string, string>();\r\n\r\n    destroy$ = new Subject();\r\n    formGroup: FormGroup;\r\n\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/TradeCost/TradeCostMovement';\r\n    parameters: any[] = [];\r\n\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n    constructor(private freezeService: FreezeService,\r\n        private formBuilder: FormBuilder,\r\n        private snackbarService: SnackbarService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private companyManager: CompanyManagerService,\r\n        private route: ActivatedRoute,\r\n        private reportingService: ReportingService,\r\n        private titleService: TitleService) {\r\n        this.constractStatusList = TradeStatus.getStatusList();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.companyList = this.getCompaniesList();\r\n        this.filteredCompany = this.companyList.filter((event) => event.companyId !== this.company);\r\n        this.tradeCostcompanyCtrl.patchValue(this.filteredCompany);\r\n\r\n        this.loadSnapshots();\r\n        this.loadGridConfiguration();\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n    }\r\n\r\n    getCompaniesList(): any[] {\r\n        const options: Company[] = this.companyManager.getLoadedCompanies();\r\n        return options;\r\n    }\r\n\r\n    companyOptionSelected(companiesSelected: any) {\r\n        this.companiesSelectedList = [];\r\n        if (companiesSelected && companiesSelected.length > 0) {\r\n            this.companiesSelectedList = companiesSelected.map((comp: { companyId: any; }) => comp.companyId);\r\n        } else {\r\n        }\r\n    }\r\n\r\n    initializeForm() {\r\n        this.formGroup = this.formBuilder.group({\r\n            snapshotsCtrl: this.snapshotsCtrl,\r\n            contractStatusCtrl: this.contractStatusCtrl,\r\n            comparisondbCtrl: this.comparisondbCtrl,\r\n            tradeCostcompanyCtrl: this.tradeCostcompanyCtrl,\r\n        });\r\n\r\n        this.setValidators();\r\n        this.setDefaultValues();\r\n\r\n        return this.formGroup;\r\n    }\r\n\r\n    setValidators() {\r\n        this.snapshotsCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(\r\n                this.snapshotList,\r\n                nameof<FreezeDisplayView>('dataVersionId'),\r\n            ),\r\n            Validators.required,\r\n        ]));\r\n        this.comparisondbCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(\r\n                this.comparisondbList,\r\n                nameof<FreezeDisplayView>('dataVersionId'),\r\n            ),\r\n            Validators.required,\r\n        ]));\r\n        this.snapshotErrorMap.set('required', 'Please enter a value');\r\n        this.snapshotErrorMap.set('inDropdownList', 'Please enter a value  that\\'s in the list');\r\n\r\n        this.comparisondbCtrl.setValidators(Validators.required);\r\n        this.comparisondbErrorMap.set('required', 'Please enter a value');\r\n        this.comparisondbErrorMap.set('inDropdownList', 'Please enter a value  that\\'s in the list');\r\n\r\n        this.contractStatusCtrl.setValidators(Validators.required);\r\n        this.contractStatusErrorMap.set('required', 'Please select at least one value');\r\n    }\r\n\r\n    setDefaultValues() {\r\n        this.snapshotsCtrl.patchValue(this.currentSnapshot);\r\n        this.contractStatusCtrl.patchValue(this.constractStatusList.filter((status) => status.name === 'Open'));\r\n        this.comparisondbCtrl.patchValue(this.comparisondbList[0]);\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate),\r\n                        freeze.freezeDate,\r\n                        freeze.dataVersionTypeId);\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.snapshotList = snapshots;\r\n            this.snapshotList.unshift(this.currentSnapshot);\r\n            this.comparisondbList = this.snapshotList\r\n                .filter((p) => (p.freezeDate !== 'CURRENT'));\r\n            this.initializeForm();\r\n        });\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n            });\r\n    }\r\n\r\n    onFilterSetChanged(filters: ListAndSearchFilter[]) {\r\n        this.filters = filters;\r\n        if (this.filters.length > 0) {\r\n            this.onGenerateReportButtonClicked();\r\n        }\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        if (!this.formGroup || !this.formGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please check the errors.');\r\n            return;\r\n        }\r\n\r\n        if (this.companiesSelectedList.length > 0) {\r\n            const snapshotId = (this.snapshotsCtrl.value) ? (this.snapshotsCtrl.value as FreezeDisplayView).dataVersionId : -1;\r\n            const comparisonDatabaseId = (this.comparisondbCtrl.value) ?\r\n                (this.comparisondbCtrl.value as FreezeDisplayView).dataVersionId : -1;\r\n            if (snapshotId !== -1 || comparisonDatabaseId !== -1) {\r\n                const freezeDate = this.snapshotsCtrl.value;\r\n                const comparisonDBDate = this.comparisondbCtrl.value;\r\n                this.freezeService.checkFreezeForSelectedDatabase(this.companiesSelectedList, freezeDate['dataVersionTypeId'],\r\n                    freezeDate, comparisonDBDate['dataVersionTypeId'], comparisonDBDate).subscribe((data: any) => {\r\n                        if (data) {\r\n                            this.missingCompanyList = [];\r\n\r\n                            this.showError = (data.missingCompany || data.comparisonMissingCompany) ? true : false;\r\n                            if (data.comparisonMissingCompany) {\r\n                                this.missingCompanyList.push(data.comparisonMissingCompany);\r\n                            }\r\n\r\n                            if (!this.showError && this.missingCompanyList.length === 0) {\r\n                                if (this.filters && this.filters.length > 0) {\r\n                                    this.reportingService.createReportCriterias(this.gridCode, this.filters).pipe(\r\n                                        takeUntil(\r\n                                            this.destroy$,\r\n                                        )).subscribe((filterSetId: PredicateReference) => {\r\n                                            const predicateId = [{ name: 'PredicateId', value: filterSetId.predicateId }];\r\n                                            this.generateReport(predicateId);\r\n                                        });\r\n                                } else {\r\n                                    this.generateReport();\r\n                                }\r\n                            } else {\r\n                                this.snackbarService.throwErrorSnackBar('The freeze is not present in company '\r\n                                    + this.missingCompanyList + ' report cannot be generated');\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        } else {\r\n            if (this.filters && this.filters.length > 0) {\r\n                this.reportingService.createReportCriterias(this.gridCode, this.filters).pipe(\r\n                    takeUntil(\r\n                        this.destroy$,\r\n                    )).subscribe((filterSetId: PredicateReference) => {\r\n                        const predicateId = [{ name: 'PredicateId', value: filterSetId.predicateId }];\r\n                        this.generateReport(predicateId);\r\n                    });\r\n            } else {\r\n                this.generateReport();\r\n            }\r\n        }\r\n    }\r\n\r\n    generateReport(additionalParameters: any[] = []) {\r\n        const snapshotId = (this.snapshotsCtrl.value as FreezeDisplayView).dataVersionId;\r\n        const comparisondbtId = (this.comparisondbCtrl.value as FreezeDisplayView).dataVersionId;\r\n        const goodsIncluded = this.includeGoods ? 1 : 0;\r\n        const excludeNoMovement = this.excludeNoMovement ? 1 : 0;\r\n        const contractStatusIds = (this.contractStatusCtrl.value as TradeStatus[]).map((status) => status.value);\r\n        const companiesList = (this.tradeCostcompanyCtrl.value as Company[]).map((status) => status.companyId);\r\n\r\n        this.parameters = [\r\n            { name: 'IncludeGoods', value: goodsIncluded },\r\n            { name: 'ExcludeNoMovement', value: excludeNoMovement },\r\n        ];\r\n        this.parameters = this.parameters.concat(additionalParameters);\r\n        contractStatusIds.forEach((id: number) => {\r\n            this.parameters.push({ name: 'TradeStatus', value: id });\r\n        });\r\n        if (snapshotId !== -1) {\r\n            this.parameters.push({ name: 'Database', value: snapshotId });\r\n        }\r\n        this.parameters.push({ name: 'ComparisonDB', value: comparisondbtId });\r\n\r\n        if (companiesList.length === 0) {\r\n            this.parameters.push({ name: 'Company', value: this.company });\r\n        } else {\r\n            companiesList.push(this.company);\r\n            companiesList.forEach((name: string) => {\r\n                this.parameters.push({ name: 'Company', value: name });\r\n            });\r\n        }\r\n        this.parameters.push({ name: 'UserLoginCompany', value: this.company });\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n\r\n    onIncludeGoodsChanged(event: MatCheckboxChange) {\r\n        this.includeGoods = event.checked;\r\n    }\r\n\r\n    onNoCostMovementChanged(event: MatCheckboxChange) {\r\n        this.excludeNoMovement = event.checked;\r\n    }\r\n\r\n    selectionChanged(value) {\r\n        if (value.dataVersionId === -1) {\r\n            this.comparisondbList = this.snapshotList\r\n                .filter((p) => (p.freezeDate !== 'CURRENT'));\r\n            this.comparisondbCtrl.patchValue(this.comparisondbList[0]);\r\n        } else {\r\n            if (this.snapshotList.filter((p) => (p.actualfreezeDate < value.actualfreezeDate)).length > 0) {\r\n                this.comparisondbList = this.snapshotList\r\n                    .filter((p) => (p.actualfreezeDate < value.actualfreezeDate));\r\n                this.comparisondbCtrl.patchValue(this.comparisondbList[0]);\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar('No Database available for comparison database. Please select any other database.');\r\n                this.comparisondbList = this.snapshotList\r\n                    .filter((p) => (p.actualfreezeDate < value.actualfreezeDate));\r\n                this.comparisondbCtrl.patchValue(this.comparisondbList[0]);\r\n                this.comparisondbCtrl.setValidators(Validators.required);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","module.exports = \"<div class='main-container trade-cost-report'>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxLayoutAlign.lt-md=\\\"space-around center\\\">\\r\\n        <mat-card fxFlex=\\\"45\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h2>Criterias</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left stretch\\\"\\r\\n                     fxLayoutGap=\\\"5%\\\">\\r\\n                    <atlas-dropdown-select fxFlex='30%'\\r\\n                                           [label]=\\\"'Snapshot'\\\"\\r\\n                                           [fieldControl]=\\\"snapshotsCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [options]=\\\"snapshotList\\\"\\r\\n                                           [errorMap]=\\\"snapshotErrorMap\\\"\\r\\n                                           displayProperty=\\\"freezeDate\\\"\\r\\n                                           [selectProperties]=\\\"['freezeDate']\\\"></atlas-dropdown-select>\\r\\n                    <atlas-dropdown-select fxFlex='30%'\\r\\n                                           [label]=\\\"'Trade Status'\\\"\\r\\n                                           [options]=\\\"constractStatusList\\\"\\r\\n                                           [fieldControl]=\\\"contractStatusCtrl\\\"\\r\\n                                           [errorMap]=\\\"contractStatusErrorMap\\\"\\r\\n                                           isEditable=true\\r\\n                                           [selectProperties]=\\\"contractStatusDisplayProperty\\\"\\r\\n                                           multiselect=true></atlas-dropdown-select>\\r\\n                    <span fxLayoutAlign=\\\"left center\\\">\\r\\n                        <mat-checkbox [checked]=\\\"includeGoods\\\"\\r\\n                                      (change)=\\\"onIncludeGoodsChanged($event)\\\">Include Goods</mat-checkbox>\\r\\n                    </span>\\r\\n                </div>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left stretch\\\"\\r\\n                     fxLayoutGap=\\\"5%\\\">\\r\\n                    <atlas-dropdown-select-list fxFlex='30%'\\r\\n                                                [label]=\\\"'Company'\\\"\\r\\n                                                [fieldControl]=\\\"tradeCostCompanyCtrl\\\"\\r\\n                                                [(options)]=\\\"filteredCompany\\\"\\r\\n                                                [selectProperties]=\\\"companySelect\\\"\\r\\n                                                isEditable=true\\r\\n                                                (optionSelected)=\\\"companyOptionSelected($event)\\\"\\r\\n                                                multiselect=true>\\r\\n                    </atlas-dropdown-select-list>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n\\r\\n        </mat-card>\\r\\n        <atlas-filter-set-display fxFlex=\\\"50\\\"\\r\\n                                  (filtersChanged)=onFilterSetChanged($event)\\r\\n                                  [columnConfiguration]=\\\"columnConfiguration\\\"\\r\\n                                  [gridCode]=\\\"gridCode\\\"\\r\\n                                  [company]=\\\"company\\\">\\r\\n        </atlas-filter-set-display>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"end center\\\">\\r\\n        <button mat-raised-button\\r\\n                class=\\\"generate-report-button\\\"\\r\\n                (click)=\\\"onGenerateReportButtonClicked()\\\">GENERATE REPORT</button>\\r\\n    </div>\\r\\n    <div class=\\\"report-container\\\">\\r\\n        <atlas-ssrsreport-viewer [reportServer]=\\\"reportServerUrl\\\"\\r\\n                                 [reportUrl]=\\\"reportPath\\\"\\r\\n                                 [parameters]=\\\"parameters\\\"\\r\\n                                 #ssrsReportViewer></atlas-ssrsreport-viewer>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".generate-report-button {\\n  margin: 8px 0 0 0 !important; }\\n\\n.report-container {\\n  height: 60vh; }\\n\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatCheckboxChange } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { environment } from '../../../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { SSRSReportViewerComponent } from '../../../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Freeze } from '../../../../../shared/entities/freeze.entity';\r\nimport { ColumnConfigurationProperties } from '../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { TradeStatus } from '../../../../../shared/entities/trade-status.entity';\r\nimport { FreezeType } from '../../../../../shared/enums/freeze-type.enum';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { GridConfigurationProviderService } from '../../../../../shared/services/grid-configuration-provider.service';\r\nimport { FreezeService } from '../../../../../shared/services/http-services/freeze.service';\r\nimport { ReportingService } from '../../../../../shared/services/http-services/reporting.service';\r\nimport { PredicateReference } from '../../../../../shared/services/reporting/dtos/predicate-reference';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { nameof } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-cost-report',\r\n    templateUrl: './trade-cost-report.component.html',\r\n    styleUrls: ['./trade-cost-report.component.scss'],\r\n})\r\nexport class TradeCostReportComponent implements OnInit, OnDestroy {\r\n    snapshotsCtrl = new FormControl();\r\n    contractStatusCtrl = new FormControl();\r\n    tradeCostCompanyCtrl = new AtlasFormControl('companySelect');\r\n    companySelect: string[] = ['companyId'];\r\n\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.Companies,\r\n    ];\r\n    includeGoods = false;\r\n    constractStatusList: TradeStatus[] = [];\r\n    contractStatusDisplayProperty: string[] = ['name'];\r\n    snapshotList: FreezeDisplayView[] = [];\r\n    currentSnapshot = new FreezeDisplayView(-1, 'CURRENT');\r\n    company: string;\r\n    gridCode = 'tradeCostReportGrid';\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    filters: ListAndSearchFilter[] = [];\r\n    companyList: Company[] = [];\r\n    filteredCompany: Company[] = [];\r\n    companiesSelectedList: any[] = [];\r\n    showError = false;\r\n\r\n    contractStatusErrorMap: Map<string, string> = new Map<string, string>();\r\n    snapshotErrorMap: Map<string, string> = new Map<string, string>();\r\n\r\n    destroy$ = new Subject();\r\n    formGroup: FormGroup;\r\n\r\n    reportServerUrl = environment.reportServerLink;\r\n    reportPath = 'LDC Atlas/TradeCost/TradeCost';\r\n    parameters: any[] = [];\r\n\r\n    @ViewChild('ssrsReportViewer') ssrsReportViewer: SSRSReportViewerComponent;\r\n\r\n    constructor(\r\n        private freezeService: FreezeService,\r\n        private formBuilder: FormBuilder,\r\n        private snackbarService: SnackbarService,\r\n        private companyManager: CompanyManagerService,\r\n        private gridConfigurationProvider: GridConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private reportingService: ReportingService,\r\n        private titleService: TitleService) {\r\n        this.constractStatusList = TradeStatus.getStatusList();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.companyList = this.getCompaniesList();\r\n        this.filteredCompany = this.companyList.filter((company) => company.companyId !== this.company);\r\n        this.tradeCostCompanyCtrl.patchValue(this.filteredCompany);\r\n\r\n        this.loadSnapshots();\r\n        this.loadGridConfiguration();\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n    }\r\n\r\n    getCompaniesList(): any[] {\r\n        const options: Company[] = this.companyManager.getLoadedCompanies();\r\n        return options;\r\n    }\r\n\r\n    companyOptionSelected(companiesSelected: any) {\r\n        this.companiesSelectedList = [];\r\n        if (companiesSelected) {\r\n            if (companiesSelected.length > 0) {\r\n                for (const val of companiesSelected) {\r\n                    this.companiesSelectedList.push(val['companyId']);\r\n                }\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n\r\n    initializeForm() {\r\n        this.formGroup = this.formBuilder.group({\r\n            snapshotsCtrl: this.snapshotsCtrl,\r\n            contractStatusCtrl: this.contractStatusCtrl,\r\n            tradeCostCompanyCtrl: this.tradeCostCompanyCtrl,\r\n        });\r\n\r\n        this.setValidators();\r\n        this.setDefaultValues();\r\n\r\n        return this.formGroup;\r\n    }\r\n\r\n    setValidators() {\r\n        this.snapshotsCtrl.setValidators(Validators.compose([\r\n            inDropdownListValidator(\r\n                this.snapshotList,\r\n                nameof<FreezeDisplayView>('dataVersionId'),\r\n            ),\r\n            Validators.required,\r\n        ]));\r\n        this.snapshotErrorMap.set('required', 'Please enter a value');\r\n        this.snapshotErrorMap.set('inDropdownList', 'Please enter a value  that\\'s in the list');\r\n\r\n        this.contractStatusCtrl.setValidators(Validators.required);\r\n        this.contractStatusErrorMap.set('required', 'Please select at least one value');\r\n    }\r\n\r\n    setDefaultValues() {\r\n        this.snapshotsCtrl.patchValue(this.currentSnapshot);\r\n        this.contractStatusCtrl.patchValue(this.constractStatusList.filter((status) => status.name === 'Open'));\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate),\r\n                        freeze.freezeDate,\r\n                        freeze.dataVersionTypeId);\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.snapshotList = snapshots;\r\n            this.snapshotList.unshift(this.currentSnapshot);\r\n            this.initializeForm();\r\n        });\r\n    }\r\n\r\n    loadGridConfiguration() {\r\n        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)\r\n            .subscribe((configuration) => {\r\n                this.columnConfiguration = configuration.columns;\r\n            });\r\n    }\r\n\r\n    onFilterSetChanged(filters: ListAndSearchFilter[]) {\r\n        this.filters = filters;\r\n        if (this.filters.length > 0) {\r\n            this.onGenerateReportButtonClicked();\r\n        }\r\n    }\r\n\r\n    onGenerateReportButtonClicked() {\r\n        if (!this.formGroup || !this.formGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar('Form is invalid. Please check the errors.');\r\n            return;\r\n        }\r\n        const snapshotId = (this.snapshotsCtrl.value as FreezeDisplayView).dataVersionId;\r\n        if (this.companiesSelectedList.length > 0 && snapshotId !== -1) {\r\n            const freezeDate = this.snapshotsCtrl.value;\r\n            this.freezeService.checkFreezeForSelectedDatabase(this.companiesSelectedList, freezeDate['dataVersionTypeId'],\r\n                freezeDate, null, null).subscribe((data: any) => {\r\n                    if (data) {\r\n                        let missingCompanyList: string;\r\n\r\n                        this.showError = data.missingCompany ? true : false;\r\n                        if (data.missingCompany) {\r\n                            missingCompanyList = data.missingCompany;\r\n                        }\r\n\r\n                        if (!this.showError) {\r\n                            if (this.filters && this.filters.length > 0) {\r\n                                this.reportingService.createReportCriterias(this.gridCode, this.filters).pipe(\r\n                                    takeUntil(\r\n                                        this.destroy$,\r\n                                    )).subscribe((filterSetId: PredicateReference) => {\r\n                                        const predicateId = [{ name: 'PredicateId', value: filterSetId.predicateId }];\r\n                                        this.generateReport(predicateId);\r\n                                    });\r\n                            } else {\r\n                                this.generateReport();\r\n                            }\r\n                        } else {\r\n                            this.snackbarService.throwErrorSnackBar('The freeze is not present in company '\r\n                                + missingCompanyList + ' report cannot be generated');\r\n                        }\r\n                    }\r\n                });\r\n        } else {\r\n            if (this.filters && this.filters.length > 0) {\r\n                this.reportingService.createReportCriterias(this.gridCode, this.filters).pipe(\r\n                    takeUntil(\r\n                        this.destroy$,\r\n                    )).subscribe((filterSetId: PredicateReference) => {\r\n                        const predicateId = [{ name: 'PredicateId', value: filterSetId.predicateId }];\r\n                        this.generateReport(predicateId);\r\n                    });\r\n            } else {\r\n                this.generateReport();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    generateReport(additionalParameters: any[] = []) {\r\n        const snapshotId = (this.snapshotsCtrl.value as FreezeDisplayView).dataVersionId;\r\n        const goodsIncluded = this.includeGoods ? 1 : 0;\r\n        const contractStatusIds = (this.contractStatusCtrl.value as TradeStatus[]).map((status) => status.value);\r\n        const companiesList = (this.tradeCostCompanyCtrl.value as Company[]).map((status) => status.companyId);\r\n\r\n        this.parameters = [\r\n            { name: 'IncludeGoods', value: goodsIncluded },\r\n        ];\r\n        this.parameters = this.parameters.concat(additionalParameters);\r\n\r\n        contractStatusIds.forEach((id: number) => {\r\n            this.parameters.push({ name: 'TradeStatus', value: id });\r\n        });\r\n\r\n        if (snapshotId !== -1) {\r\n            this.parameters.push({ name: 'Database', value: snapshotId });\r\n        }\r\n\r\n        if (companiesList.length === 0) {\r\n            this.parameters.push({ name: 'Company', value: this.company });\r\n        } else {\r\n            companiesList.push(this.company);\r\n            companiesList.forEach((name: string) => {\r\n                this.parameters.push({ name: 'Company', value: name });\r\n            });\r\n        }\r\n        this.parameters.push({ name: 'UserLoginCompany', value: this.company });\r\n        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);\r\n    }\r\n\r\n    onIncludeGoodsChanged(event: MatCheckboxChange) {\r\n        this.includeGoods = event.checked;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <atlas-dropdown-select fxFlex=\\\"60%\\\"\\r\\n                                   [label]=\\\"'Database'\\\"\\r\\n                                   [fieldControl]=\\\"databaseCtrl\\\"\\r\\n                                   isEditable=true\\r\\n                                   [options]=\\\"databaseList\\\"\\r\\n                                   (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                                   displayProperty=\\\"freezeDate\\\"\\r\\n                                   [selectProperties]=\\\"['freezeDate']\\\"></atlas-dropdown-select>\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       placeholder=\\\"Target Weight Code\\\"\\r\\n                       [matAutocomplete]=\\\"quantityCode\\\"\\r\\n                       [formControl]=\\\"weightUnitIdCtrl\\\"\\r\\n                       (keydown.enter)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                       [matTooltip]=\\\"'Weight Codes'\\\">\\r\\n                <mat-autocomplete #quantityCode=\\\"matAutocomplete\\\">\\r\\n                    <mat-option *ngFor=\\\"let qtCode of filteredQuantityCode\\\"\\r\\n                                [value]=\\\"qtCode.weightCode\\\">\\r\\n                        {{qtCode.weightCode}}|\\r\\n                        {{qtCode.description}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"weightUnitIdCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          (click)=\\\"onQuickSearchButtonClicked()\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"left stretch\\\"\\r\\n         fxLayoutGap=\\\"5%\\\">\\r\\n        <mat-card fxFlex=\\\"30\\\">\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h2>General Inclusion/Exclusion</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"left stretch\\\"\\r\\n                     fxLayoutGap=\\\"5%\\\">\\r\\n                    <atlas-dropdown-select fxFlex='50%'\\r\\n                                           [label]=\\\"'Trade Status'\\\"\\r\\n                                           [options]=\\\"filteredContractStatusList\\\"\\r\\n                                           [fieldControl]=\\\"contractStatusCtrl\\\"\\r\\n                                           isEditable=true\\r\\n                                           [selectProperties]=\\\"contractStatusDisplayProperty\\\"\\r\\n                                           multiselect=true\\r\\n                                           (panelOpened)=\\\"onPanelOpened($event)\\\"></atlas-dropdown-select>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <atlas-list-and-search class=\\\"default-height\\\"\\r\\n                           [gridCode]=\\\"gridCode\\\"\\r\\n                           [searchCode]=\\\"searchCode\\\"\\r\\n                           [gridTitle]=\\\"'Trade Report'\\\"\\r\\n                           [additionalFilters]=\\\"additionalFilters\\\"\\r\\n                           [company]=\\\"company\\\"\\r\\n                           [dataLoader]=\\\"dataLoader\\\"\\r\\n                           [hasDeleteViewPrivilege]=\\\"hasDeleteViewPrivilege\\\"\\r\\n                           [dataVersionId]=\\\"dataVersionId!==-1?dataVersionId:null\\\"\\r\\n                           [pageSize]=\\\"100\\\"\\r\\n                           waitBeforeLoadingData=true\\r\\n                           (configurationLoaded)=\\\"initAdditionnalFilters()\\\"\\r\\n                           #tradeReportListAndSearchComponent>\\r\\n    </atlas-list-and-search>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { ListAndSearchComponent } from '../../../../../shared/components/list-and-search/list-and-search.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { Freeze } from '../../../../../shared/entities/freeze.entity';\r\nimport { ListAndSearchFilter } from '../../../../../shared/entities/list-and-search/list-and-search-filter.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { TradeStatus } from '../../../../../shared/entities/trade-status.entity';\r\nimport { WeightUnit } from '../../../../../shared/entities/weight-unit.entity';\r\nimport { ListAndSearchFilterType } from '../../../../../shared/enums/list-and-search-filter-type.enum';\r\nimport { FreezeDisplayView } from '../../../../../shared/models/freeze-display-view';\r\nimport { ApiPaginatedCollection } from '../../../../../shared/services/common/models';\r\nimport { FreezeService } from '../../../../../shared/services/http-services/freeze.service';\r\nimport { TradeReportDataLoader } from '../../../../../shared/services/list-and-search/tradeReport-data-loader';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { AuthorizationService } from './../../../../../core/services/authorization.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-report',\r\n    templateUrl: './trade-report.component.html',\r\n    styleUrls: ['./trade-report.component.scss'],\r\n    providers: [TradeReportDataLoader],\r\n})\r\nexport class TradeReportComponent implements OnInit {\r\n    @ViewChild('tradeReportListAndSearchComponent') listAndSearchComponent: ListAndSearchComponent;\r\n    @Output() readonly contractStatusSelected = new EventEmitter<any>();\r\n    databaseCtrl = new FormControl();\r\n    databaseList: FreezeDisplayView[] = [];\r\n    currentDatabase = new FreezeDisplayView(-1, 'CURRENT');\r\n    filteredQuantityCode: WeightUnit[] = [];\r\n    weightUnitIdCtrl = new AtlasFormControl('WeightCodeId');\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [MasterDataProps.WeightUnits];\r\n    additionalFilters: ListAndSearchFilter[] = [];\r\n    contractStatusCtrl = new FormControl();\r\n    contractStatusList: TradeStatus[] = [];\r\n    filteredContractStatusList: TradeStatus[] = [];\r\n    contractStatusDisplayProperty: string[] = ['name'];\r\n    company: string;\r\n    destroy$ = new Subject();\r\n    formGroup: FormGroup;\r\n    gridCode = 'tradeReportList';\r\n    hasDeleteViewPrivilege = false;\r\n    dataVersionId: number;\r\n    counterPartyId: number;\r\n    searchCode: string;\r\n    filteredCounterPartyList: Counterparty[];\r\n\r\n    parameters: any[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        public dataLoader: TradeReportDataLoader,\r\n        private freezeService: FreezeService,\r\n        protected utilService: UtilService,\r\n        protected snackbarService: SnackbarService,\r\n        protected authorizationService: AuthorizationService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredCounterPartyList = this.masterData.counterparties;\r\n        this.counterPartyId = Number(this.route.snapshot.paramMap.get('counterPartyId'));\r\n\r\n        if (this.counterPartyId) {\r\n            const counterparty = this.filteredCounterPartyList.find((cp) => cp.counterpartyID === this.counterPartyId);\r\n            if (counterparty) {\r\n                this.searchCode = counterparty.counterpartyCode;\r\n            }\r\n        }\r\n\r\n        this.contractStatusList = TradeStatus.getStatusList();\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        for (const contractStatus of this.contractStatusList) {\r\n            if (contractStatus.name === 'Open' || contractStatus.name === 'Closed' ||\r\n                contractStatus.name === 'Zero Tonnages' || contractStatus.name === 'Cancelled') {\r\n                this.filteredContractStatusList.push(contractStatus);\r\n            }\r\n        }\r\n        if (this.authorizationService.isPrivilegeAllowed(this.company, 'Reports') &&\r\n            this.authorizationService.isPrivilegeAllowed(this.company, 'TradeReport')) {\r\n            this.hasDeleteViewPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'DeleteTradeReportView');\r\n        }\r\n\r\n        this.filteredQuantityCode = this.masterData.weightUnits;\r\n        this.weightUnitIdCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredQuantityCode = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.weightUnits,\r\n                ['weightCode', 'description'],\r\n            );\r\n        });\r\n        this.loadSnapshots();\r\n        this.setDefaultValues();\r\n        this.applyFiltersForListAndSearchGrid();\r\n    }\r\n\r\n    initializeForm() {\r\n        this.formGroup = this.formBuilder.group({\r\n            contractStatusCtrl: this.contractStatusCtrl,\r\n            databaseCtrl: this.databaseCtrl,\r\n        });\r\n        return this.formGroup;\r\n    }\r\n\r\n    loadSnapshots() {\r\n        this.freezeService.getFreezeList().pipe(\r\n            map((data: ApiPaginatedCollection<Freeze>) => {\r\n                return data.value.map((freeze) => {\r\n                    return new FreezeDisplayView(\r\n                        freeze.dataVersionId,\r\n                        this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate));\r\n                });\r\n            }),\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((snapshots: FreezeDisplayView[]) => {\r\n            this.databaseList = snapshots;\r\n            this.databaseList.unshift(this.currentDatabase);\r\n            this.databaseCtrl.patchValue(this.currentDatabase);\r\n            this.initializeForm();\r\n        });\r\n    }\r\n\r\n    setDefaultValues() {\r\n        this.contractStatusCtrl.patchValue(this.filteredContractStatusList.filter((status) => status.name === 'Open'));\r\n        const defaultWeightUnit = this.filteredQuantityCode.find((weightUnit) => weightUnit.weightCode === 'MT');\r\n        this.weightUnitIdCtrl.patchValue(defaultWeightUnit ? defaultWeightUnit.weightCode : '');\r\n    }\r\n\r\n    onQuickSearchButtonClicked() {\r\n        this.applyFiltersForListAndSearchGrid();\r\n    }\r\n\r\n    onPanelOpened(isPanelOpened) {\r\n        if (isPanelOpened === false) {\r\n            let contractStatus: TradeStatus[] = [];\r\n            contractStatus = this.contractStatusCtrl.value;\r\n            if (contractStatus.length <= 0) {\r\n                this.contractStatusCtrl.patchValue(this.filteredContractStatusList.filter((status) => status.name === 'Open'));\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    ' Select at least one option from General Inclusion/Exclusion to generate Report',\r\n                );\r\n            }\r\n            if (this.listAndSearchComponent &&\r\n                this.listAndSearchComponent.columnConfiguration &&\r\n                this.listAndSearchComponent.columnConfiguration.length > 0) {\r\n                this.applyFiltersForListAndSearchGrid();\r\n            } else {\r\n                this.configurationColumns();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    configurationColumns() {\r\n        this.listAndSearchComponent.loadGridConfiguration();\r\n        this.applyFiltersForListAndSearchGrid();\r\n    }\r\n\r\n    applyFiltersForListAndSearchGrid() {\r\n        this.additionalFilters = [];\r\n        let zeroTonnagesExist: boolean = false;\r\n        const filterContractsStatus = new ListAndSearchFilter();\r\n        filterContractsStatus.clauses = [];\r\n        const filterZeroTonnages = new ListAndSearchFilter();\r\n        const filterCancelled = new ListAndSearchFilter();\r\n        let filterContractStatus;\r\n        if (this.listAndSearchComponent &&\r\n            this.listAndSearchComponent.columnConfiguration &&\r\n            this.listAndSearchComponent.columnConfiguration.length > 0) {\r\n            const dataVersionIdField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'DataVersionId');\r\n            this.dataVersionId = (this.databaseCtrl.value as FreezeDisplayView).dataVersionId;\r\n            const quantityCodeField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'QuantityCode');\r\n            const tradeStatusField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'TradeStatus');\r\n            const zeroTonnagesField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'Quantity');\r\n            const isCancelledField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'isCancelled');\r\n            const zeroTonnage: number = 0;\r\n            const cancelled: string = '';\r\n            const zeroTonnageInDecimal: string = '0.00';\r\n            let cancelledExist: boolean = false;\r\n\r\n            const contractStatusNames = (this.contractStatusCtrl.value as TradeStatus[]).map((status) => status.name);\r\n            if (!this.listAndSearchComponent) {\r\n                return;\r\n            } else\r\n                if (this.databaseCtrl.value && dataVersionIdField && this.dataVersionId !== -1) {\r\n                    const filterDataVersionId = new ListAndSearchFilter();\r\n                    filterDataVersionId.fieldId = dataVersionIdField.fieldId;\r\n                    filterDataVersionId.fieldName = dataVersionIdField.fieldName;\r\n                    filterDataVersionId.predicate = {\r\n                        filterType: ListAndSearchFilterType.Text,\r\n                        operator: 'eq',\r\n                        value1: this.dataVersionId.toString(),\r\n                    };\r\n                    filterDataVersionId.isActive = true;\r\n                    this.additionalFilters = [filterDataVersionId];\r\n                }\r\n            if (this.contractStatusCtrl.value) {\r\n                if (contractStatusNames.length === 1) {\r\n                    this.initAdditionnalFilters();\r\n                }\r\n                if (contractStatusNames.length > 1) {\r\n                    for (const contractStatus of contractStatusNames) {\r\n                        if (contractStatus === 'Zero Tonnages') {\r\n                            zeroTonnagesExist = true;\r\n                        } else if (contractStatus === 'Cancelled') {\r\n                            cancelledExist = true;\r\n                        }\r\n                    }\r\n                    if (this.weightUnitIdCtrl.value && quantityCodeField) {\r\n                        const filterWeightUnit = new ListAndSearchFilter();\r\n                        filterWeightUnit.fieldId = quantityCodeField.fieldId;\r\n                        filterWeightUnit.fieldName = quantityCodeField.fieldName;\r\n                        filterWeightUnit.predicate = {\r\n                            filterType: ListAndSearchFilterType.Text,\r\n                            operator: 'eq',\r\n                            value1: this.weightUnitIdCtrl.value + '%',\r\n                        };\r\n                        filterWeightUnit.isActive = true;\r\n                        this.additionalFilters.push(filterWeightUnit);\r\n                    }\r\n                    if (zeroTonnagesExist) {\r\n                        const filterAllContractStatus = new ListAndSearchFilter();\r\n\r\n                        for (const contractStatus of contractStatusNames) {\r\n                            if (contractStatus !== 'Zero Tonnages' && tradeStatusField) {\r\n                                filterContractStatus = new ListAndSearchFilter();\r\n                                filterContractStatus.fieldId = tradeStatusField.fieldId;\r\n                                filterContractStatus.fieldName = tradeStatusField.fieldName;\r\n\r\n                                filterContractStatus.predicate = {\r\n                                    filterType: ListAndSearchFilterType.Text,\r\n                                    operator: 'eq',\r\n                                    value1: contractStatus,\r\n                                };\r\n                                filterContractStatus.isActive = true;\r\n                                filterContractsStatus.clauses.push(filterContractStatus);\r\n                            } else if (zeroTonnagesField) {\r\n                                filterZeroTonnages.fieldId = zeroTonnagesField.fieldId;\r\n                                filterZeroTonnages.fieldName = zeroTonnagesField.fieldName;\r\n                                filterZeroTonnages.predicate = {\r\n                                    filterType: ListAndSearchFilterType.Numeric,\r\n                                    operator: 'eq',\r\n                                    value1: zeroTonnage.toString(),\r\n                                };\r\n                                filterZeroTonnages.isActive = true;\r\n                            }\r\n                        }\r\n                        filterContractsStatus.logicalOperator = 'or';\r\n                        if (tradeStatusField || zeroTonnagesField) {\r\n                            if (filterContractStatus && filterZeroTonnages) {\r\n                                filterAllContractStatus.logicalOperator = 'or';\r\n                                filterAllContractStatus.clauses = [filterContractsStatus, filterZeroTonnages];\r\n                                this.additionalFilters.push(filterAllContractStatus);\r\n                            } else {\r\n                                this.additionalFilters.push(filterContractStatus ? filterContractsStatus : filterZeroTonnages);\r\n                            }\r\n                        }\r\n                    } else if (cancelledExist) {\r\n                        const filterAllContractStatus = new ListAndSearchFilter();\r\n\r\n                        for (const contractStatus of contractStatusNames) {\r\n                            if (contractStatus !== 'Cancelled' && tradeStatusField) {\r\n                                filterContractStatus = new ListAndSearchFilter();\r\n                                filterContractStatus.fieldId = tradeStatusField.fieldId;\r\n                                filterContractStatus.fieldName = tradeStatusField.fieldName;\r\n\r\n                                filterContractStatus.predicate = {\r\n                                    filterType: ListAndSearchFilterType.Text,\r\n                                    operator: 'eq',\r\n                                    value1: contractStatus,\r\n                                };\r\n                                filterContractStatus.isActive = true;\r\n                                filterContractsStatus.clauses.push(filterContractStatus);\r\n                            } else if (isCancelledField) {\r\n                                filterCancelled.fieldId = isCancelledField.fieldId;\r\n                                filterCancelled.fieldName = isCancelledField.fieldName;\r\n                                filterCancelled.predicate = {\r\n                                    filterType: ListAndSearchFilterType.Text,\r\n                                    operator: 'eq',\r\n                                    value1: contractStatus,\r\n                                };\r\n                                filterZeroTonnages.isActive = true;\r\n                            }\r\n                        }\r\n                        filterContractsStatus.logicalOperator = 'or';\r\n                        if (tradeStatusField || isCancelledField) {\r\n                            if (filterContractStatus && filterCancelled) {\r\n                                filterAllContractStatus.logicalOperator = 'or';\r\n                                filterAllContractStatus.clauses = [filterContractsStatus, filterCancelled];\r\n                                this.additionalFilters.push(filterAllContractStatus);\r\n                            } else {\r\n                                this.additionalFilters.push(filterContractStatus ? filterContractsStatus : filterCancelled);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        for (const contractStatus of contractStatusNames) {\r\n                            if (tradeStatusField) {\r\n                                filterContractStatus = new ListAndSearchFilter();\r\n                                filterContractStatus.fieldId = tradeStatusField.fieldId;\r\n                                filterContractStatus.fieldName = tradeStatusField.fieldName;\r\n                                filterContractStatus.predicate = {\r\n                                    filterType: ListAndSearchFilterType.Text,\r\n                                    operator: 'eq',\r\n                                    value1: contractStatus,\r\n                                };\r\n                                filterContractStatus.isActive = true;\r\n                                filterContractsStatus.clauses.push(filterContractStatus);\r\n                            }\r\n                        }\r\n                        filterContractsStatus.logicalOperator = 'or';\r\n                        filterContractsStatus.isActive = true;\r\n                        this.additionalFilters.push(filterContractsStatus);\r\n                        filterZeroTonnages.fieldId = zeroTonnagesField.fieldId;\r\n                        filterZeroTonnages.fieldName = zeroTonnagesField.fieldName;\r\n                        filterZeroTonnages.predicate = {\r\n                            filterType: ListAndSearchFilterType.Numeric,\r\n                            operator: 'ne',\r\n                            value1: zeroTonnage.toString(),\r\n                            value2: zeroTonnageInDecimal,\r\n                        };\r\n                        filterZeroTonnages.isActive = true;\r\n                        this.additionalFilters.push(filterZeroTonnages);\r\n                        filterCancelled.fieldId = isCancelledField.fieldId;\r\n                        filterCancelled.fieldName = isCancelledField.fieldName;\r\n                        filterCancelled.predicate = {\r\n                            filterType: ListAndSearchFilterType.Text,\r\n                            operator: 'ne',\r\n                            value1: cancelled,\r\n                        };\r\n                        filterCancelled.isActive = true;\r\n                        this.additionalFilters.push(filterCancelled);\r\n                    }\r\n                    this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n                    this.listAndSearchComponent.dataVersionId = this.dataVersionId !== -1 ? this.dataVersionId : null;\r\n                    this.listAndSearchComponent.loadData(true);\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    initAdditionnalFilters() {\r\n        if (this.additionalFilters.length === 0) {\r\n            this.additionalFilters = [];\r\n        }\r\n        const contractStatusNames = (this.contractStatusCtrl.value as TradeStatus[]).map((status) => status.name);\r\n        if (this.listAndSearchComponent &&\r\n            this.listAndSearchComponent.columnConfiguration &&\r\n            this.listAndSearchComponent.columnConfiguration.length > 0) {\r\n            const quantityCodeField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'QuantityCode');\r\n            const tradeStatusField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'TradeStatus');\r\n            const zeroTonnagesField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'Quantity');\r\n            const isCancelledField = this.listAndSearchComponent.columnConfiguration\r\n                .find((column) => column.fieldName === 'isCancelled');\r\n            const zeroTonnage: number = 0;\r\n            const cancelled: string = '';\r\n            const zeroTonnageInDecimal: string = '0.00';\r\n            const filterWeightUnit = new ListAndSearchFilter();\r\n            filterWeightUnit.fieldId = quantityCodeField.fieldId;\r\n            filterWeightUnit.fieldName = quantityCodeField.fieldName;\r\n            filterWeightUnit.predicate = {\r\n                filterType: ListAndSearchFilterType.Text,\r\n                operator: 'eq',\r\n                value1: this.weightUnitIdCtrl.value + '%',\r\n            };\r\n            filterWeightUnit.isActive = true;\r\n            this.additionalFilters.push(filterWeightUnit);\r\n            if (contractStatusNames[0] !== 'Zero Tonnages' && contractStatusNames[0] !== 'Cancelled') {\r\n                const filterContractStatus = new ListAndSearchFilter();\r\n                filterContractStatus.fieldId = tradeStatusField.fieldId;\r\n                filterContractStatus.fieldName = tradeStatusField.fieldName;\r\n\r\n                filterContractStatus.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: contractStatusNames[0].toString(),\r\n                };\r\n                filterContractStatus.isActive = true;\r\n                this.additionalFilters.push(filterContractStatus);\r\n\r\n                const filterZeroTonnages = new ListAndSearchFilter();\r\n                filterZeroTonnages.fieldId = zeroTonnagesField.fieldId;\r\n                filterZeroTonnages.fieldName = zeroTonnagesField.fieldName;\r\n                filterZeroTonnages.predicate = {\r\n                    filterType: ListAndSearchFilterType.Numeric,\r\n                    operator: 'ne',\r\n                    value1: zeroTonnage.toString(),\r\n                    value2: zeroTonnageInDecimal,\r\n                };\r\n                filterZeroTonnages.isActive = true;\r\n                this.additionalFilters.push(filterZeroTonnages);\r\n\r\n                const filterCancelled = new ListAndSearchFilter();\r\n                filterCancelled.fieldId = isCancelledField.fieldId;\r\n                filterCancelled.fieldName = isCancelledField.fieldName;\r\n                filterCancelled.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'ne',\r\n                    value1: cancelled,\r\n                };\r\n                filterCancelled.isActive = true;\r\n                this.additionalFilters.push(filterCancelled);\r\n\r\n            } else if (contractStatusNames[0] !== 'Cancelled') {\r\n                const filterCancelled = new ListAndSearchFilter();\r\n                filterCancelled.fieldId = isCancelledField.fieldId;\r\n                filterCancelled.fieldName = isCancelledField.fieldName;\r\n                filterCancelled.predicate = {\r\n                    filterType: ListAndSearchFilterType.Text,\r\n                    operator: 'eq',\r\n                    value1: cancelled,\r\n                };\r\n                filterCancelled.isActive = true;\r\n                this.additionalFilters.push(filterCancelled);\r\n            } else {\r\n                const filterZeroTonnages = new ListAndSearchFilter();\r\n                filterZeroTonnages.fieldId = zeroTonnagesField.fieldId;\r\n                filterZeroTonnages.fieldName = zeroTonnagesField.fieldName;\r\n                filterZeroTonnages.predicate = {\r\n                    filterType: ListAndSearchFilterType.Numeric,\r\n                    operator: 'eq',\r\n                    value1: zeroTonnage.toString(),\r\n                };\r\n                filterZeroTonnages.isActive = true;\r\n                this.additionalFilters.push(filterZeroTonnages);\r\n            }\r\n            this.listAndSearchComponent.waitBeforeLoadingData = false;\r\n            this.listAndSearchComponent.additionalFilters = this.additionalFilters;\r\n            this.listAndSearchComponent.loadData(true);\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <h1>Reports Panel</h1>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"start stretch\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         class=\\\"hub-menu-panel\\\"\\r\\n         [hidden]=\\\"isLoading\\\">\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/tradecost')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.TradeCostReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Trade Cost</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate trade cost report</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/pnlreports')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.PLReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">P&amp;L Reports</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate P&amp;L report</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/audit')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.AuditReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Audit</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate audit report</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/clientreport')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.ClientTransactionReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Client Transaction Report</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate Client Transaction report</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/nominalreport')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.NominalReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Nominal Report</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate Nominal report</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/trade')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.TradeReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Trade Report</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate trade report</p>\\r\\n        </mat-card>\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/tradecostmovement')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.TradeCostMovementReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Trade Cost Movement Report</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate trade cost movement report</p>\\r\\n        </mat-card>\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/newbiz')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.NEWBIZReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">New Biz Report</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate new biz Report</p>\\r\\n        </mat-card>\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/historicalrates')\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Historical Exchange Rates Report</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate historical exchange rates report</p>\\r\\n        </mat-card>\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/fxexposurerate')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports.FxExposureReport',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Fx Exposure report</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate Fx Exposure report</p>\\r\\n        </mat-card>\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports/accountingdocumentsreport')\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Accounting documents Reports</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Generate Accounting documents Reports</p>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"isLoading\\\">\\r\\n        <mat-card>\\r\\n            <h2>Loading</h2>\\r\\n            <div class=\\\"custom-line-title\\\"></div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"20px\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-global-reports',\r\n    templateUrl: './global-reports.component.html',\r\n    styleUrls: ['./global-reports.component.scss'],\r\n})\r\nexport class GlobalReportsComponent implements OnInit {\r\n    company: string;\r\n    isLoading = false;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private titleService: TitleService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n    }\r\n\r\n    onNavigateButtonClicked(route: string) {\r\n        this.router.navigate(['/' + this.company + route]);\r\n    }\r\n}\r\n","export class DisplayOptions {\r\n    private static list: DisplayOptions[];\r\n    private static readonly friendlyName = new DisplayOptions(0, 'Friendly name');\r\n    private static readonly technicalName = new DisplayOptions(1, 'Technical name');\r\n\r\n    value: number;\r\n    name: string;\r\n\r\n    constructor(value: number, name: string) {\r\n        this.value = value;\r\n        this.name = name;\r\n    }\r\n\r\n    public static getOptionList(): DisplayOptions[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.friendlyName,\r\n                    this.technicalName,\r\n                ];\r\n        }\r\n        return this.list;\r\n    }\r\n\r\n    public static getOptionStringList(): string[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.friendlyName,\r\n                    this.technicalName,\r\n                ];\r\n        }\r\n        return this.list.map((item) => item.name);\r\n    }\r\n}\r\n","export class OrderByOptions {\r\n    private static list: OrderByOptions[];\r\n    private static readonly date = new OrderByOptions(0, 'Date');\r\n\r\n    value: number;\r\n    name: string;\r\n\r\n    constructor(value: number, name: string) {\r\n        this.value = value;\r\n        this.name = name;\r\n    }\r\n\r\n    public static getOptionList(): OrderByOptions[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.date,\r\n                ];\r\n        }\r\n        return this.list;\r\n    }\r\n\r\n    public static getOptionStringList(): string[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.date,\r\n                ];\r\n        }\r\n        return this.list.map((item) => item.name);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <h1>Reports Panel</h1>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"start stretch\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         class=\\\"hub-menu-panel\\\"\\r\\n         [hidden]=\\\"isLoading\\\">\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/globalreports')\\\"\\r\\n                  *ifAuthorized=\\\"'Reports.GlobalReports',company:this.company\\\">\\r\\n            <!-- remove tooltip and overlay when link implemented-->\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\globalReport.png\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Global Reports</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Global Reports description</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/reporting/customreports')\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\customReport.png\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Custom Reports</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Custom Reports Description</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"inactive-card\\\"\\r\\n                  matTooltip=\\\"Feature coming soon\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\accountingReport.png\\\">\\r\\n            <div class=\\\"overlay\\\"></div>\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Accounting documents Reports</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Accounting documents Reports Description</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"inactive-card\\\"\\r\\n                  matTooltip=\\\"Feature coming soon\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\docTemplateReport.png\\\">\\r\\n            <div class=\\\"overlay\\\"></div>\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Document template builder</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Document template builder description</p>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isLoading\\\">\\r\\n        <mat-card>\\r\\n            <h2>Loading</h2>\\r\\n            <div class=\\\"custom-line-title\\\"></div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"20px\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".mat-card .mat-card-image:first-child {\\n  border-radius: 3px 3px 0 0; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SecurityService } from '../../shared/services/security.service';\r\nimport { TitleService } from '../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-reporting-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n    company: string;\r\n    isLoading = false;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private titleService: TitleService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle('Reports');\r\n    }\r\n\r\n    onNavigateButtonClicked(route: string) {\r\n        this.router.navigate(['/' + this.company + route]);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <mat-horizontal-stepper linear\\r\\n                                #stepper>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Accruals</ng-template>\\r\\n                <ag-grid-angular #agGrid\\r\\n                                 [gridOptions]=\\\"accrualGridOptions\\\"\\r\\n                                 style=\\\"width: 100%; height: 100%;\\\"\\r\\n                                 id=\\\"accrualGrid\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"accrualGridRows\\\"\\r\\n                                 [columnDefs]=\\\"accrualGridCols\\\"\\r\\n                                 [domLayout]=\\\"accrualDomLayout\\\"\\r\\n                                 (gridReady)=\\\"onAccrualGridReady($event)\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n                <div class=\\\"custom-line-footer\\\"></div>\\r\\n                <div style=\\\"margin:20px; text-align:right\\\">\\r\\n                    <span class=\\\"fill-space\\\"></span>\\r\\n                    <button mat-button\\r\\n                            color=\\\"primary\\\"\\r\\n                            routerLink=\\\"/reporting\\\">CANCEL</button>\\r\\n                    <button mat-button\\r\\n                            matStepperNext\\r\\n                            mat-raised-button\\r\\n                            color=\\\"accent\\\">Next</button>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Aggregations</ng-template>\\r\\n                <div ag-grid=\\\"aggregationGgridOptions\\\"\\r\\n                     class=\\\"ag-theme-material\\\"\\r\\n                     style=\\\"height: 100%\\\">\\r\\n                    <ag-grid-angular style=\\\"width: auto !important; height: 100%;\\\"\\r\\n                                     class=\\\"ag-theme-material\\\"\\r\\n                                     [rowData]=\\\"aggregationGridRows\\\"\\r\\n                                     [columnDefs]=\\\"aggregationGridCols\\\"\\r\\n                                     [domLayout]=\\\"aggregationDomLayout\\\"\\r\\n                                     (gridReady)=\\\"onAggregationGridReady($event)\\\"\\r\\n                                     [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                    </ag-grid-angular>\\r\\n                </div>\\r\\n                <div class=\\\"custom-line-footer\\\"></div>\\r\\n                <div style=\\\"margin:20px; text-align:right\\\">\\r\\n                    <span class=\\\"fill-space\\\"></span>\\r\\n                    <button mat-button\\r\\n                            color=\\\"primary\\\"\\r\\n                            routerLink=\\\"/{{company}}/reporting\\\">CANCEL</button>\\r\\n                    <button mat-button\\r\\n                            matStepperPrevious>Back</button>\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"goForward(stepper)\\\"\\r\\n                            mat-raised-button\\r\\n                            color=\\\"accent\\\">Next</button>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Summary</ng-template>\\r\\n                <mat-expansion-panel expanded=\\\"true\\\">\\r\\n                    <mat-expansion-panel-header>\\r\\n                        <mat-panel-title>\\r\\n                            <h2>Tempory Adjustement</h2>\\r\\n                            <div class=\\\"custom-line-title\\\"></div>\\r\\n                        </mat-panel-title>\\r\\n                    </mat-expansion-panel-header>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"none center\\\">\\r\\n                        <div fxFlex=\\\"100%\\\">\\r\\n                            <label>Document Reference:</label> {{ postingResult.documentId }}\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"none center\\\">\\r\\n                        <div fxFlex=\\\"100%\\\">\\r\\n                            <label>Document Date:</label> {{ postingResult.documentDate | date:'dd MMM y' }}\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"none center\\\">\\r\\n                        <div fxFlex=\\\"100%\\\">\\r\\n                            <label>Accounting Month:</label> {{ postingResult.documentDate | date:'MMM y' }}\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <br>\\r\\n                    <br>\\r\\n                    <div>\\r\\n                        <div class=\\\"custom-line-footer\\\"></div>\\r\\n                        <div style=\\\"margin:20px; text-align:right\\\">\\r\\n                            <span class=\\\"fill-space\\\"></span>\\r\\n                            <button mat-button\\r\\n                                    matStepperPrevious>Back</button>\\r\\n                            <button mat-button\\r\\n                                    mat-raised-button\\r\\n                                    (click)=\\\"goToPreAccouting()\\\"\\r\\n                                    color=\\\"accent\\\">View TA</button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-expansion-panel>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \".accruals-cell {\\n  line-height: 30px; }\\n\\nlabel {\\n  font-weight: bold; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { ConfirmationDialogComponent } from '../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AtlasAgGridParam } from '../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { LdeomAccrual } from '../../shared/entities/ldeom-accrual.entity';\r\nimport { LdeomAggregation } from '../../shared/entities/ldeom-aggregation.entity';\r\nimport { AgGridService } from '../../shared/services/ag-grid.service';\r\nimport { LdeomPostingResult } from '../../shared/services/controlling/dtos/ldeom-posting';\r\nimport { ControllingService } from '../../shared/services/http-services/controlling.service';\r\nimport { SecurityService } from '../../shared/services/security.service';\r\nimport { SnackbarService } from '../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atr-ldeom',\r\n    templateUrl: './ldeom.component.html',\r\n    styleUrls: ['./ldeom.component.scss'],\r\n})\r\nexport class LdeomComponent implements OnInit {\r\n    company: string;\r\n\r\n    isLinear = false;\r\n    // Accrual Table\r\n    accrualFormGroup: FormGroup;\r\n    accrualGridApi: agGrid.GridApi;\r\n    accrualGridOptions: agGrid.GridOptions;\r\n    accrualGridColumnApi: agGrid.ColumnApi;\r\n    accrualGridCols: agGrid.ColDef[];\r\n    accrualGridRows: LdeomAccrual[];\r\n    accrualDomLayout = 'autoHeight';\r\n\r\n    // Aggregation Table\r\n    aggregationFormGroup: FormGroup;\r\n    aggregationGridApi: agGrid.GridApi;\r\n    aggregationGridColumnApi: agGrid.ColumnApi;\r\n    aggregationGridCols: agGrid.ColDef[];\r\n    aggregationGridRows: LdeomAggregation[];\r\n    aggregationDomLayout = 'autoHeight';\r\n\r\n    // Posting result\r\n    postingResult: LdeomPostingResult = new LdeomPostingResult();\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private formBuilder: FormBuilder,\r\n        private controllingService: ControllingService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private dialog: MatDialog,\r\n        private snackbarService: SnackbarService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        this.accrualGridOptions = {} as agGrid.GridOptions;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n\r\n        this.accrualFormGroup = this.formBuilder.group({\r\n            empty: ['', Validators.required],\r\n        });\r\n        this.aggregationFormGroup = this.formBuilder.group({\r\n            secondCtrl: ['', Validators.required],\r\n        });\r\n\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.getAccrualsData();\r\n            this.initAccrualsGridColumns();\r\n\r\n            this.getAggregationsData();\r\n            this.initAggregationsGridColumns();\r\n\r\n        });\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n\r\n        // this.accrualGridOptions.getRowHeight = params => {\r\n        //     return 30;\r\n        // }\r\n    }\r\n\r\n    getAccrualsData() {\r\n        this.controllingService.getAccrualsForLdeomReport().subscribe((data) => {\r\n            this.accrualGridRows = data.map((accrual) => {\r\n                const ac = new LdeomAccrual(accrual);\r\n                return new LdeomAccrual(ac);\r\n            });\r\n        });\r\n    }\r\n\r\n    getAggregationsData() {\r\n        this.controllingService.getAggregationsForLdeomReport().subscribe((data) => {\r\n            this.aggregationGridRows = data;\r\n\r\n        });\r\n    }\r\n\r\n    initAccrualsGridColumns() {\r\n        this.accrualGridCols = [\r\n            {\r\n                headerName: 'Department',\r\n                field: 'departmentCode',\r\n                cellClass: '',\r\n                cellStyle: (params) => params.data.isHeaderLine() || params.data.isTotalHeaderLine() ? { 'line-height': '30px', 'font-weight': 'bold', 'overflow': 'visible', 'background-color': 'white !important' } : { 'line-height': '30px', 'background-color': 'white !important' },\r\n                valueGetter: (params) => params.data.isTotalHeaderLine() ? 'Total Dept ' + params.data.departmentCode : params.data.isTotalLine() ? '' : params.data.isHeaderLine() ? params.data.departmentDescription : params.data.departmentCode,\r\n                // colSpan(params) { return params.data.isHeaderLine() ? 2 : 1; }\r\n            },\r\n            {\r\n                headerName: 'Contract',\r\n                // valueGetter: params => this.showContractLabel(params.data),\r\n                valueGetter: (params) => params.data.contractLabel,\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Cost Type',\r\n                field: 'costType',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                cellClass: '',\r\n                valueGetter: (params) => params.data.isHeaderLine() || params.data.isTotalHeaderLine() ? '' : this.quantityFormatter(params.data.quantity),\r\n                cellStyle: { 'textAlign': 'right', 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currency',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Full Value',\r\n                cellClass: '',\r\n                valueGetter: (params) => params.data.isHeaderLine() || params.data.isTotalHeaderLine() ? '' : this.currencyFormatter(params.data.fullValue),\r\n                cellStyle: { 'textAlign': 'right', 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Invoiced',\r\n                cellClass: '',\r\n                valueGetter: (params) => params.data.isHeaderLine() || params.data.isTotalHeaderLine() ? '' : this.currencyFormatter(params.data.invoicedValue),\r\n                cellStyle: { 'textAlign': 'right', 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Accrue',\r\n                cellClass: '',\r\n                valueGetter: (params) => params.data.isHeaderLine() || params.data.isTotalHeaderLine() ? '' : this.currencyFormatter(params.data.accrueAmount),\r\n                cellStyle: { 'textAlign': 'right', 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Counterparty',\r\n                field: 'associatedClient',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n            {\r\n                headerName: 'Charter',\r\n                field: 'charterReference',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px', 'background-color': 'white !important' },\r\n            },\r\n        ];\r\n    }\r\n\r\n    initAggregationsGridColumns() {\r\n        this.aggregationGridCols = [\r\n            {\r\n                headerName: 'Account',\r\n                field: 'accountReference',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px' },\r\n            },\r\n            {\r\n                headerName: 'Expense Code',\r\n                field: 'expenseCode',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px' },\r\n            },\r\n            {\r\n                headerName: 'Dept',\r\n                field: 'departmentCode',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px' },\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currencyCode',\r\n                cellClass: '',\r\n                cellStyle: { 'line-height': '30px' },\r\n            },\r\n            {\r\n                headerName: 'Amount',\r\n                field: 'creditDebit',\r\n                cellClass: '',\r\n                valueGetter: (params) => new String(parseFloat(params.data.amount).toFixed(2)).concat(params.data.creditDebit === 'Credit'\r\n                    ? ' CR'\r\n                    : '   '),\r\n                cellStyle: { 'textAlign': 'right', 'line-height': '30px' },\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                cellClass: '',\r\n                cellStyle: { 'textAlign': 'right', 'line-height': '30px' },\r\n                valueGetter: (params) => this.quantityFormatter(params.data.quantity),\r\n\r\n            },\r\n        ];\r\n    }\r\n\r\n    onAccrualGridReady(params) {\r\n        this.accrualGridApi = params.api;\r\n        this.accrualGridColumnApi = params.columnApi;\r\n        this.accrualGridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.accrualGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onAggregationGridReady(params) {\r\n        this.aggregationGridApi = params.api;\r\n        this.aggregationGridColumnApi = params.columnApi;\r\n        this.aggregationGridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.aggregationGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    currencyFormatter(number) {\r\n        if (isNaN(number) || number === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(number);\r\n    }\r\n\r\n    quantityFormatter(number) {\r\n        if (isNaN(number) || number === null) { return ''; }\r\n        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(number);\r\n    }\r\n\r\n    showContractLabel(accrual) {\r\n        return accrual.costType === 'Purchase' || accrual.costType === 'Sale' ? accrual.contractLabel : '';\r\n    }\r\n\r\n    goForward(stepper: MatStepper) {\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'LDEOM Posting',\r\n                text: `Do you want to proceed?`,\r\n                okButton: 'Yes',\r\n                cancelButton: 'No',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.createPosting();\r\n                stepper.next();\r\n            }\r\n        });\r\n    }\r\n\r\n    createPosting() {\r\n        this.snackbarService.throwErrorSnackBar('Ldeom Posting was not created. Functionnality is not implemented yet');\r\n    }\r\n\r\n    goToPreAccouting() {\r\n        this.router.navigate(['/' + this.company + '/pre-accounting/search/' + this.postingResult.documentId]);\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { MaterialModule } from '../shared/material.module';\r\nimport { ATLAS_DATE_FORMATS, SharedModule } from '../shared/shared.module';\r\nimport { AccountingDocumentsReportComponent } from './components/accounting-documents-report/accounting-documents-report.component';\r\nimport { DocumentStatusDropdownComponent } from './components/accounting-documents-report/components/document-status-dropdown/document-status-dropdown.component';\r\nimport { DocumentTypeDropdownComponent } from './components/accounting-documents-report/components/document-type-dropdown/document-type-dropdown.component';\r\nimport { CustomReportViewerComponent } from './components/custom-reports/custom-report-viewer/custom-report-viewer.component';\r\nimport { CustomReportsComponent } from './components/custom-reports/custom-reports.component';\r\nimport { AuditReportComponent } from './components/global-reports/components/audit-report/audit-report.component';\r\nimport { ClientReportComponent } from './components/global-reports/components/client-report/client-report.component';\r\nimport { DetailComponent } from './components/global-reports/components/client-report/tabs/detail/detail.component';\r\nimport { OverviewComponent } from './components/global-reports/components/client-report/tabs/overview/overview.component';\r\nimport { FxExposureReportComponent } from './components/global-reports/components/fx-exposure-report/fx-exposure-report.component';\r\nimport { CriteraComponent } from './components/global-reports/components/historical-exchange-rates-report/components/critera/critera.component';\r\nimport { PeriodComponent } from './components/global-reports/components/historical-exchange-rates-report/components/period/period.component';\r\nimport { SortByComponent } from './components/global-reports/components/historical-exchange-rates-report/components/sort-by/sort-by.component';\r\nimport { HistoricalExchangeRatesReportComponent } from './components/global-reports/components/historical-exchange-rates-report/historical-exchange-rates-report.component';\r\nimport { NewBizReportComponent } from './components/global-reports/components/new-biz-report/new-biz-report.component';\r\nimport { NominalReportComponent } from './components/global-reports/components/nominal-report/nominal-report.component';\r\nimport { DetailTabComponent } from './components/global-reports/components/nominal-report/tabs/detail-tab/detail-tab.component';\r\nimport { OverviewTabComponent } from './components/global-reports/components/nominal-report/tabs/overview-tab/overview-tab.component';\r\nimport { LdrepManualAdjustmentReportComponent } from './components/global-reports/components/pnl-reports/ldrep-manual-adjustment-report/ldrep-manual-adjustment-report.component';\r\nimport { PnlMovementReportComponent } from './components/global-reports/components/pnl-reports/pnl-movement-report/pnl-movement-report.component';\r\nimport { PnlReportComponent } from './components/global-reports/components/pnl-reports/pnl-report/pnl-report.component';\r\nimport { PnlReportsComponent } from './components/global-reports/components/pnl-reports/pnl-reports.component';\r\nimport { ValidationDialogComponent } from './components/global-reports/components/pnl-reports/validation-dialog/validation-dialog.component';\r\nimport { ReportCriteriasComponent } from './components/global-reports/components/report-criterias/report-criterias.component';\r\nimport { TradeCostMovementReportComponent } from './components/global-reports/components/trade-cost-movement-report/trade-cost-movement-report.component';\r\nimport { TradeCostReportComponent } from './components/global-reports/components/trade-cost-report/trade-cost-report.component';\r\nimport { TradeReportComponent } from './components/global-reports/components/trade-report/trade-report.component';\r\nimport { GlobalReportsComponent } from './components/global-reports/global-reports.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LdeomComponent } from './ldeom/ldeom.component';\r\nimport { ReportingRoutingModule } from './reporting.route';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        ReportingRoutingModule,\r\n        AgGridModule.withComponents([]),\r\n        SharedModule,\r\n    ],\r\n    entryComponents: [\r\n        ValidationDialogComponent,\r\n        CustomReportViewerComponent,\r\n    ],\r\n    declarations: [\r\n        HomeComponent,\r\n        GlobalReportsComponent,\r\n        LdeomComponent,\r\n        TradeCostReportComponent,\r\n        PnlReportComponent,\r\n        PnlMovementReportComponent,\r\n        ReportCriteriasComponent,\r\n        AuditReportComponent,\r\n        ClientReportComponent,\r\n        TradeReportComponent,\r\n        TradeCostMovementReportComponent,\r\n        NominalReportComponent,\r\n        FxExposureReportComponent,\r\n        HistoricalExchangeRatesReportComponent,\r\n        CriteraComponent,\r\n        PeriodComponent,\r\n        SortByComponent,\r\n        NewBizReportComponent,\r\n        PnlReportsComponent,\r\n        LdrepManualAdjustmentReportComponent,\r\n        AccountingDocumentsReportComponent,\r\n        DocumentStatusDropdownComponent,\r\n        DocumentTypeDropdownComponent,\r\n        ValidationDialogComponent,\r\n        OverviewComponent,\r\n        DetailComponent,\r\n        DetailTabComponent,\r\n        OverviewTabComponent,\r\n        CustomReportsComponent,\r\n        CustomReportViewerComponent,\r\n    ],\r\n    providers: [\r\n        { provide: MAT_DATE_LOCALE, useValue: 'en' },\r\n        { provide: DateAdapter, useClass: MomentDateAdapter },\r\n        { provide: MAT_DATE_FORMATS, useValue: ATLAS_DATE_FORMATS },\r\n    ],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class ReportingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MasterDataProps } from '../shared/entities/masterdata-props.entity';\r\nimport { SecurityGuard } from '../shared/guards/security.guard';\r\nimport { CompanyDateResolver } from '../shared/resolvers/company-date.resolver';\r\nimport { FormConfigurationResolver } from '../shared/resolvers/form-configuration.resolver';\r\nimport { MasterDataResolver } from '../shared/resolvers/masterdata.resolver';\r\nimport { AccountingDocumentsReportComponent } from './components/accounting-documents-report/accounting-documents-report.component';\r\nimport { CustomReportsComponent } from './components/custom-reports/custom-reports.component';\r\nimport { AuditReportComponent } from './components/global-reports/components/audit-report/audit-report.component';\r\nimport { ClientReportComponent } from './components/global-reports/components/client-report/client-report.component';\r\nimport { FxExposureReportComponent } from './components/global-reports/components/fx-exposure-report/fx-exposure-report.component';\r\nimport { HistoricalExchangeRatesReportComponent } from './components/global-reports/components/historical-exchange-rates-report/historical-exchange-rates-report.component';\r\nimport { NewBizReportComponent } from './components/global-reports/components/new-biz-report/new-biz-report.component';\r\nimport { NominalReportComponent } from './components/global-reports/components/nominal-report/nominal-report.component';\r\nimport { PnlMovementReportComponent } from './components/global-reports/components/pnl-reports/pnl-movement-report/pnl-movement-report.component';\r\nimport { PnlReportsComponent } from './components/global-reports/components/pnl-reports/pnl-reports.component';\r\nimport { TradeCostMovementReportComponent } from './components/global-reports/components/trade-cost-movement-report/trade-cost-movement-report.component';\r\nimport { TradeCostReportComponent } from './components/global-reports/components/trade-cost-report/trade-cost-report.component';\r\nimport { TradeReportComponent } from './components/global-reports/components/trade-report/trade-report.component';\r\nimport { GlobalReportsComponent } from './components/global-reports/global-reports.component';\r\nimport * as Reporting from './home/home.component';\r\nimport { LdeomComponent } from './ldeom/ldeom.component';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: Reporting.HomeComponent,\r\n        canActivate: [SecurityGuard],\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'ldeom',\r\n        component: LdeomComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'ldeom',\r\n            title: 'Ldeom',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports',\r\n        component: GlobalReportsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'globalreports', title: 'Global Reports', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalReports',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Reports',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/accountingdocumentsreport',\r\n        component: AccountingDocumentsReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'accountingdocumentsreport',\r\n            title: 'Accounting Documents Report',\r\n            formId: 'AccDocReport',\r\n            isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.TransactionDocumentType,\r\n                MasterDataProps.TransactionDocumentStatus,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'customreports',\r\n        component: CustomReportsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'customreports', title: 'Custom Reports', isHomePage: false, privilegeLevel1Name: null,\r\n            // authorizations: [\r\n            //     {\r\n            //         privilegeName: 'CustomReports',\r\n            //         permission: 1,\r\n            //         parentLevelOne: 'Reports',\r\n            //     },\r\n            // ],\r\n            masterdataList: [\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/tradecost',\r\n        component: TradeCostReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradecost',\r\n            title: 'Trade Cost Report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Companies,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'TradeCostReport',\r\n                    permission: 1,\r\n                    parentLevelOne: 'GlobalReports',\r\n                    parentLevelTwo: 'Reports',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n            masterdata: MasterDataResolver,\r\n        },\r\n\r\n    },\r\n    {\r\n        path: 'globalreports/tradecostmovement',\r\n        component: TradeCostMovementReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradecostmovement',\r\n            title: 'Trade Cost Movement Report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n            masterdata: MasterDataResolver,\r\n        },\r\n\r\n    },\r\n    {\r\n        path: 'globalreports/newbiz',\r\n        component: NewBizReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'newBiz',\r\n            title: 'New Biz Report',\r\n            isHomePage: false,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n\r\n    },\r\n    {\r\n        path: 'globalreports/pnlreports',\r\n        component: PnlReportsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            formId: 'PnlReports',\r\n            animation: 'pnlreports',\r\n            title: 'P&L Reports',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.ProfitCenters,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.PNLTypes,\r\n                MasterDataProps.Commodities,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'PLReport',\r\n                    permission: 1,\r\n                    parentLevelOne: 'GlobalReports',\r\n                    parentLevelTwo: 'Reports',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/pnlmovementreport',\r\n        component: PnlMovementReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'pnlmovementreport',\r\n            title: 'P&L Movement Report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.ProfitCenters,\r\n                MasterDataProps.Companies,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'PLMovementReport',\r\n                    permission: 1,\r\n                    parentLevelOne: 'GlobalReports',\r\n                    parentLevelTwo: 'Reports',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/audit',\r\n        component: AuditReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'auditreport',\r\n            title: 'Audit report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'AuditReport',\r\n                    permission: 1,\r\n                    parentLevelTwo: 'Reports',\r\n                    parentLevelOne: 'GlobalReports',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/trade',\r\n        component: TradeReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradereport',\r\n            title: 'Trade Report',\r\n            formId: 'TradeReport',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.WeightUnits,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/trade/:counterPartyId',\r\n        component: TradeReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'tradereport',\r\n            title: 'Trade Report',\r\n            formId: 'TradeReport',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Counterparties,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'TradeReport',\r\n                    permission: 1,\r\n                    parentLevelTwo: 'Reports',\r\n                    parentLevelOne: 'GlobalReports',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/clientreport',\r\n        component: ClientReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            formId: 'ClientReport',\r\n            animation: 'clientreport',\r\n            title: 'Client Transaction report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.CostTypes,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/clientreport/:counterPartyId',\r\n        component: ClientReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            formId: 'ClientReport',\r\n            animation: 'clientreport',\r\n            title: 'Client Transaction report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.Departments,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'ClientTransactionReport',\r\n                    permission: 1,\r\n                    parentLevelTwo: 'Reports',\r\n                    parentLevelOne: 'GlobalReports',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'globalreports/nominalreport',\r\n        component: NominalReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            formId: 'NominalReport', animation: 'nominalreport', title: 'Nominal Ledger Transactional Report',\r\n            isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'NominalReport',\r\n                    permission: 1,\r\n                    parentLevelTwo: 'Reports',\r\n                    parentLevelOne: 'GlobalReports',\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.NominalAccounts,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n            formConfiguration: FormConfigurationResolver,\r\n\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'globalreports/historicalrates',\r\n        component: HistoricalExchangeRatesReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'historicalrates',\r\n            title: 'Historical Exchange Rate Report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Currencies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n            masterdata: MasterDataResolver,\r\n        },\r\n\r\n    },\r\n\r\n    {\r\n        path: 'globalreports/fxexposurerate',\r\n        component: FxExposureReportComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'fxexposurerate',\r\n            title: 'Fx Exposure Report',\r\n            isHomePage: false,\r\n            privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'FxExposureReport',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Reports',\r\n                    parentLevelTwo: 'GlobalReports',\r\n                },\r\n            ],\r\n\r\n            masterdataList: [\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Departments,\r\n            ],\r\n        },\r\n        resolve: {\r\n            companyDate: CompanyDateResolver,\r\n            masterdata: MasterDataResolver,\r\n        },\r\n\r\n    },\r\n\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class ReportingRoutingModule { }\r\n","export class AmendmentsType {\r\n    private static list: AmendmentsType[];\r\n    private static readonly physicalAmendments = new AmendmentsType(1, 'Physicals Amendments');\r\n    private static readonly costsAmendments = new AmendmentsType(2, 'Costs Amendments');\r\n    private static readonly invoiceGoods = new AmendmentsType(3, 'Invoices Goods');\r\n    private static readonly invoiceCosts = new AmendmentsType(4, 'Invoices Costs');\r\n    private static readonly fxDealAmendments = new AmendmentsType(5, 'FX Deal Amendments');\r\n\r\n    value: number;\r\n    name: string;\r\n\r\n    constructor(value: number, name: string) {\r\n        this.value = value;\r\n        this.name = name;\r\n    }\r\n\r\n    public static getAmendmentsTypeList(): AmendmentsType[] {\r\n        this.list =\r\n            [\r\n                this.physicalAmendments,\r\n                this.costsAmendments,\r\n                this.invoiceGoods,\r\n                this.invoiceCosts,\r\n            ];\r\n        return this.list;\r\n    }\r\n\r\n    public static getFXDealAmendmentsTypeList(): AmendmentsType[] {\r\n        this.list =\r\n            [\r\n                this.fxDealAmendments,\r\n            ];\r\n        return this.list;\r\n    }\r\n\r\n    public static getAmendmentsTypeStringList(): string[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.physicalAmendments,\r\n                    this.costsAmendments,\r\n                    this.invoiceGoods,\r\n                    this.invoiceCosts,\r\n                    this.fxDealAmendments,\r\n                ];\r\n        }\r\n        return this.list.map((item) => item.name);\r\n    }\r\n}\r\n","export class ColumnsList {\r\n    // this class is used to have matching values with the Additional Columns if required for PNL /Movement Ssrs Report.\r\n    private static list: ColumnsList[];\r\n    private static readonly cmy1 = new ColumnsList(1, 'Cmy1');\r\n\r\n    value: number;\r\n    name: string;\r\n\r\n    constructor(value: number, name: string) {\r\n        this.value = value;\r\n        this.name = name;\r\n    }\r\n\r\n    public static getColumnsList(): ColumnsList[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.cmy1,\r\n                ];\r\n        }\r\n        return this.list;\r\n    }\r\n\r\n    public static getColumnsStringList(): string[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.cmy1,\r\n                ];\r\n        }\r\n        return this.list.map((item) => item.name);\r\n    }\r\n}\r\n","export class LdeomAccrual {\r\n    departmentCode: number;\r\n    departmentDescription: string;\r\n    contractLabel: string;\r\n    costType: string;\r\n    quantity: number;\r\n    currency: string;\r\n    fullValue: number;\r\n    invoicedValue: number;\r\n    accrueAmount: number;\r\n    associatedClient: string;\r\n    charterReference: string;\r\n\r\n    isHeaderLine(): boolean {\r\n        return this.departmentDescription && this.contractLabel === null;\r\n    }\r\n\r\n    isTotalHeaderLine(): boolean {\r\n        return this.departmentDescription === null && this.costType === null;\r\n    }\r\n\r\n    isTotalLine(): boolean {\r\n        return this.costType && this.contractLabel === null;\r\n    }\r\n\r\n    constructor(ac: LdeomAccrual) {\r\n        this.departmentCode = ac.departmentCode;\r\n        this.departmentDescription = ac.departmentDescription;\r\n        this.contractLabel = ac.contractLabel;\r\n        this.costType = ac.costType;\r\n        this.quantity = ac.quantity;\r\n        this.currency = ac.currency;\r\n        this.fullValue = ac.fullValue;\r\n        this.invoicedValue = ac.invoicedValue;\r\n        this.accrueAmount = ac.accrueAmount;\r\n        this.associatedClient = ac.associatedClient;\r\n        this.charterReference = ac.charterReference;\r\n    }\r\n}\r\n","import { Moment } from \"moment\";\r\n\r\nexport class LdrepManualAdjustmentRecords {\r\n    manualAdjustmentId: number;\r\n    companyId: number;\r\n    fromDateFormat: number;\r\n    dateFrom: Moment;\r\n    toDateFormat: number;\r\n    dateTo: Moment;\r\n    departmentId: number;\r\n    pnlTypeId: number;\r\n    realized: boolean;\r\n    functionalCCYAdjustment: number;\r\n    statutoryCCYAdjustment: number;\r\n    narrative: string;\r\n    charterRefrenceId: number;\r\n    departmentCode: string;\r\n    pnlType: string;\r\n    charterCode: string;\r\n    contractSectionCode: string;\r\n    principalCommodity: string;\r\n    sectionId: number;\r\n    commodityId: number;\r\n    cropYear: string;\r\n}","import { LdrepManualAdjustmentRecords } from \"./ldrep-manual-adjustment-records.entity\";\r\n\r\nexport class LdrepManualAdjustment {\r\n    company: string;\r\n    dateFrom: Date;\r\n    dateTo: Date;\r\n    ldrepManualAdjustmentRecords: LdrepManualAdjustmentRecords[] = [];\r\n}","export enum AtlasServiceNames {\r\n    Trading,\r\n    MasterData,\r\n    Execution,\r\n    Controlling,\r\n    UserIdentity,\r\n    PreAccounting,\r\n    Document,\r\n    Configuration,\r\n    Freeze,\r\n    Reporting,\r\n}\r\n","export enum BalancesType {\r\n    Debitors = 1,\r\n    Creditors = 2,\r\n    Both = 3,\r\n    ToPay = 4,\r\n    ToReceive = 5,\r\n}\r\n","export enum EventType {\r\n    Insert,\r\n    Delete,\r\n    Update,\r\n}\r\n","export enum FunctionalArea {\r\n    Trades,\r\n    Charters,\r\n    AccountingEntries,\r\n    Users,\r\n    Counterparties,\r\n    Vessels,\r\n    NominalAccountLedger,\r\n}\r\n","export enum MatchingsType {\r\n    Unmatched = 1,\r\n    Matched = 2,\r\n    Both = 3,\r\n}\r\n","export enum newBizDateType {\r\n    ContractDate = 1,\r\n    CreatedDate = 2,\r\n}\r\n","export enum newBizNewContractType {\r\n    PhysicalsFlatPriceContracts = 1,\r\n    FXDeals = 2,\r\n}\r\n","export enum newBizStyleType {\r\n    TradeNet = 1,\r\n}\r\n","export enum NewBizSummaryDetails {\r\n    Summary = 1,\r\n    Detail = 2,\r\n    SummaryAndDetail = 3,\r\n}\r\n","export enum NominalAccountType {\r\n    Both = 1,\r\n    PandL = 2,\r\n    BS = 3,\r\n}\r\n","export enum ReportSortType {\r\n    Currency = 0,\r\n    Date = 1,\r\n}\r\n","export enum ReportStyleType {\r\n    Transactions = 1,\r\n    Summary = 2,\r\n}\r\n","export enum UnmatchedType {\r\n    Now = 1,\r\n    PeriodStart = 2,\r\n    PeriodEnd = 3,\r\n}\r\n","export class LdeomPostingResult {\r\n\tpublic documentId: string;\r\n\tpublic documentDate: Date;\r\n}\r\n","import { BalancesType } from '../../../../shared/enums/balances-type.enum';\r\nimport { MatchingsType } from '../../../../shared/enums/matchings-type.enum';\r\nimport { NominalAccountType } from '../../../../shared/enums/nominal-account-type-enum';\r\nimport { ReportStyleType } from '../../../../shared/enums/report-style-type.enum';\r\nimport { UnmatchedType } from '../../../../shared/enums/unmatched-type.enum';\r\n\r\nexport class TransactionReportCommand {\r\n    fromDate: Date;\r\n    toDate: Date;\r\n    balanceType: BalancesType;\r\n    reportStyleType: ReportStyleType;\r\n    matchingType: MatchingsType;\r\n    unmatchedType: UnmatchedType;\r\n    functionalCurrency: boolean;\r\n    broughtForward :boolean;\r\n    accuralsIncluded: boolean;\r\n    accountType: NominalAccountType;\r\n    documentFromDate: Date;\r\n    documentToDate: Date;\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { HttpRequestOptions } from '../../entities/http-services/http-request-options.entity';\r\nimport { LdrepManualAdjustmentRecords } from '../../entities/ldrep-manual-adjustment-records.entity';\r\nimport { LdrepManualAdjustment } from '../../entities/ldrep-manual-adjustment.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ApiCollection } from '../common/models';\r\nimport { PredicateReference } from '../reporting/dtos/predicate-reference';\r\nimport { ReportCriteriasRequest } from '../reporting/dtos/report-criterias-request';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ReportingService extends HttpBaseService {\r\n    private readonly reportPredicatesControllerUrl = 'reportpredicates';\r\n    private readonly ldrepManualAdjustmentControllerUrl = 'ldrepmanualadjustment';\r\n    private readonly PnlMovementControllerUrl = 'pnlmovement';\r\n\r\n    constructor(protected http: HttpClient,\r\n        private companyManager: CompanyManagerService) {\r\n        super(http);\r\n    }\r\n\r\n    public createReportCriterias(gridId: string, filters: ListAndSearchFilter[]): Observable<PredicateReference> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n        const request: ReportCriteriasRequest = {\r\n            gridName: gridId,\r\n            clauses: { clauses: filtersForColumns },\r\n        };\r\n\r\n        return this.post<PredicateReference>(\r\n            `${environment.reportingServiceLink}/${encodeURIComponent(String(company))}/${this.reportPredicatesControllerUrl}`, request);\r\n    }\r\n\r\n    public createUpdateLdrepManualAdjustment(adjustments: LdrepManualAdjustment): Observable<LdrepManualAdjustment> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        return this.post<LdrepManualAdjustment>(\r\n            `${environment.reportingServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.ldrepManualAdjustmentControllerUrl}/createupdateadjustment`, adjustments);\r\n    }\r\n\r\n    public deleteLdrepManualAdjustments(ldrepManualAdjustment: LdrepManualAdjustment) {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n\r\n        const action = `${environment.reportingServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.ldrepManualAdjustmentControllerUrl}/deletemanualadjustment`;\r\n\r\n        return this.post<LdrepManualAdjustment>(action, ldrepManualAdjustment);\r\n    }\r\n\r\n    public getAllLdrepManualAdjustments(fromDate: Date, toDate: Date): Observable<ApiCollection<LdrepManualAdjustmentRecords>> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        options.headers = this.defaultHttpHeaders;\r\n\r\n        let queryParameters = new HttpParams();\r\n        if (fromDate) {\r\n            queryParameters = queryParameters.set('fromDate', fromDate.toISOString());\r\n        }\r\n        if (toDate) {\r\n            queryParameters = queryParameters.set('toDate', toDate.toISOString());\r\n        }\r\n\r\n        options.params = queryParameters;\r\n\r\n        return this.get<ApiCollection<LdrepManualAdjustmentRecords>>(\r\n            `${environment.reportingServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.ldrepManualAdjustmentControllerUrl}/getldrepmanualadjustments`, options);\r\n    }\r\n\r\n    public getPnlMovementSummaryMessage(companyList: string[], dataVersionId: number[], compDataVersionId: number[]): Observable<string> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        options.headers = this.defaultHttpHeaders;\r\n\r\n        let queryParameters = new HttpParams();\r\n        if (companyList) {\r\n            queryParameters = queryParameters.set('companyList', companyList.toString());\r\n        }\r\n        if (dataVersionId) {\r\n            queryParameters = queryParameters.set('dataVersionIdList', dataVersionId.toString());\r\n        }\r\n        if (compDataVersionId) {\r\n            queryParameters = queryParameters.set('compDataVersionIdList', compDataVersionId.toString());\r\n        }\r\n        options.params = queryParameters;\r\n        return this.get<string>(\r\n            `${environment.reportingServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.PnlMovementControllerUrl}`, options);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { TradingService } from '../http-services/trading.service';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class TradeReportDataLoader implements DataLoader {\r\n\r\n    constructor(private tradingService: TradingService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n            dataVersionId,\r\n        };\r\n\r\n        const list = this.tradingService.getTradeReportData(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { AbstractControlService } from '../../../../../shared/services/common/abstract-control.service';\r\nimport { isDateTwoBeforeDateOne } from '../../../../../shared/validators/date-validators.validator';\r\nexport function dateAfter(dateComparedFormControlName: string, referenceFormControlName: string, allowEqual: boolean = true): ValidatorFn {\r\n    return (abstractForm: FormGroup): { [key: string]: any } => {\r\n        const comparedDate = abstractForm.get(dateComparedFormControlName);\r\n        const reference = abstractForm.get(referenceFormControlName);\r\n        const res = isDateTwoBeforeDateOne(comparedDate.value, reference.value, true);\r\n        if (!res) {\r\n            AbstractControlService.addError(comparedDate, { key: 'isBeforeDate', value: true });\r\n            return { isBeforeDate: true };\r\n        } else {\r\n            AbstractControlService.removeError(comparedDate, { key: 'isBeforeDate', value: true });\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n"],"sourceRoot":""}