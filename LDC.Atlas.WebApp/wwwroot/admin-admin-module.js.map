{"version":3,"sources":["webpack:///./Client/app/admin/admin.module.ts","webpack:///./Client/app/admin/admin.route.ts","webpack:///./Client/app/admin/components/companies/company-list/company-list.component.html","webpack:///./Client/app/admin/components/companies/company-list/company-list.component.scss","webpack:///./Client/app/admin/components/companies/company-list/company-list.component.ts","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/accounting-tab.component.html","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/accounting-tab.component.scss","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/accounting-tab.component.ts","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/default-account/default-account.component.html","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/default-account/default-account.component.scss","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/default-account/default-account.component.ts","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/default-cost-type/default-cost-type.component.html","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/default-cost-type/default-cost-type.component.scss","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/default-cost-type/default-cost-type.component.ts","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/main-accounting/main-accounting.component.html","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/main-accounting/main-accounting.component.scss","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/main-accounting/main-accounting.component.ts","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/others/others.component.html","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/others/others.component.scss","webpack:///./Client/app/admin/components/companies/company-management/accounting-tab/others/others.component.ts","webpack:///./Client/app/admin/components/companies/company-management/company-management.component.html","webpack:///./Client/app/admin/components/companies/company-management/company-management.component.scss","webpack:///./Client/app/admin/components/companies/company-management/company-management.component.ts","webpack:///./Client/app/admin/components/companies/company-management/company-menu-bar/company-menu-bar.component.html","webpack:///./Client/app/admin/components/companies/company-management/company-menu-bar/company-menu-bar.component.scss","webpack:///./Client/app/admin/components/companies/company-management/company-menu-bar/company-menu-bar.component.ts","webpack:///./Client/app/admin/components/companies/company-management/header-form/header-form.component.html","webpack:///./Client/app/admin/components/companies/company-management/header-form/header-form.component.scss","webpack:///./Client/app/admin/components/companies/company-management/header-form/header-form.component.ts","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/accounting-interface/accounting-interface.component.html","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/accounting-interface/accounting-interface.component.scss","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/accounting-interface/accounting-interface.component.ts","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/dms/dms.component.html","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/dms/dms.component.scss","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/dms/dms.component.ts","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/interface-tab.component.html","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/interface-tab.component.scss","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/interface-tab.component.ts","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/mapping/mapping.component.html","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/mapping/mapping.component.scss","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/mapping/mapping.component.ts","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/treasury-system/treasury-system.component.html","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/treasury-system/treasury-system.component.scss","webpack:///./Client/app/admin/components/companies/company-management/interface-tab/treasury-system/treasury-system.component.ts","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/default-payment-terms/default-payment-terms.component.html","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/default-payment-terms/default-payment-terms.component.scss","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/default-payment-terms/default-payment-terms.component.ts","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/invoice-tab.component.html","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/invoice-tab.component.scss","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/invoice-tab.component.ts","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/treshold-cost-amount/treshold-cost-amount.component.html","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/treshold-cost-amount/treshold-cost-amount.component.scss","webpack:///./Client/app/admin/components/companies/company-management/invoice-tab/treshold-cost-amount/treshold-cost-amount.component.ts","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/accounting-parameters/accounting-parameters.component.html","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/accounting-parameters/accounting-parameters.component.scss","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/accounting-parameters/accounting-parameters.component.ts","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/freeze-parameters/freeze-parameters.component.html","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/freeze-parameters/freeze-parameters.component.scss","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/freeze-parameters/freeze-parameters.component.ts","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/itparameters-tab.component.html","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/itparameters-tab.component.scss","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/itparameters-tab.component.ts","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/trade-parameters/trade-parameters.component.html","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/trade-parameters/trade-parameters.component.scss","webpack:///./Client/app/admin/components/companies/company-management/itparamters-tab/trade-parameters/trade-parameters.component.ts","webpack:///./Client/app/admin/components/companies/company-management/main-tab/company-management-main-tab.component.html","webpack:///./Client/app/admin/components/companies/company-management/main-tab/company-management-main-tab.component.scss","webpack:///./Client/app/admin/components/companies/company-management/main-tab/company-management-main-tab.component.ts","webpack:///./Client/app/admin/components/companies/company-management/main-tab/default-broker/default-broker.component.html","webpack:///./Client/app/admin/components/companies/company-management/main-tab/default-broker/default-broker.component.scss","webpack:///./Client/app/admin/components/companies/company-management/main-tab/default-broker/default-broker.component.ts","webpack:///./Client/app/admin/components/companies/company-management/main-tab/details/details.component.html","webpack:///./Client/app/admin/components/companies/company-management/main-tab/details/details.component.scss","webpack:///./Client/app/admin/components/companies/company-management/main-tab/details/details.component.ts","webpack:///./Client/app/admin/components/companies/company-management/main-tab/identity/identity.component.html","webpack:///./Client/app/admin/components/companies/company-management/main-tab/identity/identity.component.scss","webpack:///./Client/app/admin/components/companies/company-management/main-tab/identity/identity.component.ts","webpack:///./Client/app/admin/components/companies/company-management/main-tab/location/location.component.html","webpack:///./Client/app/admin/components/companies/company-management/main-tab/location/location.component.scss","webpack:///./Client/app/admin/components/companies/company-management/main-tab/location/location.component.ts","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/allocation-set-up/allocation-set-up.component.html","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/allocation-set-up/allocation-set-up.component.scss","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/allocation-set-up/allocation-set-up.component.ts","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/mandatory-trade-approval/mandatory-trade-approval.component.html","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/mandatory-trade-approval/mandatory-trade-approval.component.scss","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/mandatory-trade-approval/mandatory-trade-approval.component.ts","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/physicals-main/physicals-main.component.html","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/physicals-main/physicals-main.component.scss","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/physicals-main/physicals-main.component.ts","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/physicals-tab.component.html","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/physicals-tab.component.scss","webpack:///./Client/app/admin/components/companies/company-management/physicals-tab/physicals-tab.component.ts","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/default-taxes/default-taxes.component.html","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/default-taxes/default-taxes.component.scss","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/default-taxes/default-taxes.component.ts","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/tax-configuration/tax-configuration.component.html","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/tax-configuration/tax-configuration.component.scss","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/tax-configuration/tax-configuration.component.ts","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/tax-tab.component.html","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/tax-tab.component.scss","webpack:///./Client/app/admin/components/companies/company-management/tax-tab/tax-tab.component.ts","webpack:///./Client/app/admin/components/companies/company-settings/master-data-field/master-data-field.component.html","webpack:///./Client/app/admin/components/companies/company-settings/master-data-field/master-data-field.component.scss","webpack:///./Client/app/admin/components/companies/company-settings/master-data-field/master-data-field.component.ts","webpack:///./Client/app/admin/components/companies/company-settings/transaction-data/transaction-data.component.html","webpack:///./Client/app/admin/components/companies/company-settings/transaction-data/transaction-data.component.scss","webpack:///./Client/app/admin/components/companies/company-settings/transaction-data/transaction-data.component.ts","webpack:///./Client/app/admin/components/companies/company-settings/user-account/user-account.component.html","webpack:///./Client/app/admin/components/companies/company-settings/user-account/user-account.component.scss","webpack:///./Client/app/admin/components/companies/company-settings/user-account/user-account.component.ts","webpack:///./Client/app/admin/components/companies/company-settings/user-privileges/user-privileges.component.html","webpack:///./Client/app/admin/components/companies/company-settings/user-privileges/user-privileges.component.scss","webpack:///./Client/app/admin/components/companies/company-settings/user-privileges/user-privileges.component.ts","webpack:///./Client/app/admin/components/companies/copy-company/company-selection/company-selection.component.html","webpack:///./Client/app/admin/components/companies/copy-company/company-selection/company-selection.component.scss","webpack:///./Client/app/admin/components/companies/copy-company/company-selection/company-selection.component.ts","webpack:///./Client/app/admin/components/companies/copy-company/copy-company.component.html","webpack:///./Client/app/admin/components/companies/copy-company/copy-company.component.scss","webpack:///./Client/app/admin/components/companies/copy-company/copy-company.component.ts","webpack:///./Client/app/admin/components/companies/master-row-apply/master-row-apply.component.html","webpack:///./Client/app/admin/components/companies/master-row-apply/master-row-apply.component.scss","webpack:///./Client/app/admin/components/companies/master-row-apply/master-row-apply.component.ts","webpack:///./Client/app/admin/components/global-parameters/configuration-interface/configuration-interface.component.html","webpack:///./Client/app/admin/components/global-parameters/configuration-interface/configuration-interface.component.scss","webpack:///./Client/app/admin/components/global-parameters/configuration-interface/configuration-interface.component.ts","webpack:///./Client/app/admin/components/global-parameters/functional-objects/details/functional-object-details.component.html","webpack:///./Client/app/admin/components/global-parameters/functional-objects/details/functional-object-details.component.scss","webpack:///./Client/app/admin/components/global-parameters/functional-objects/details/functional-object-details.component.ts","webpack:///./Client/app/admin/components/global-parameters/functional-objects/functional-object.component.html","webpack:///./Client/app/admin/components/global-parameters/functional-objects/functional-object.component.scss","webpack:///./Client/app/admin/components/global-parameters/functional-objects/functional-object.component.ts","webpack:///./Client/app/admin/components/global-parameters/functional-objects/list/functional-objects-list.component.html","webpack:///./Client/app/admin/components/global-parameters/functional-objects/list/functional-objects-list.component.scss","webpack:///./Client/app/admin/components/global-parameters/functional-objects/list/functional-objects-list.component.ts","webpack:///./Client/app/admin/components/global-parameters/global-parameters.component.html","webpack:///./Client/app/admin/components/global-parameters/global-parameters.component.scss","webpack:///./Client/app/admin/components/global-parameters/global-parameters.component.ts","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/contextual-search/contextual-search.component.html","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/contextual-search/contextual-search.component.scss","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/contextual-search/contextual-search.component.ts","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/contextual-search/details/contextual-view-details.component.html","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/contextual-search/details/contextual-view-details.component.scss","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/contextual-search/details/contextual-view-details.component.ts","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/grid-configuration.component.html","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/grid-configuration.component.scss","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/grid-configuration.component.ts","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-search/details/list-view-details.component.html","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-search/details/list-view-details.component.scss","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-search/details/list-view-details.component.ts","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-search/list-search.component.html","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-search/list-search.component.scss","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-search/list-search.component.ts","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-view/list-view.component.html","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-view/list-view.component.scss","webpack:///./Client/app/admin/components/global-parameters/grid-configuration/list-view/list-view.component.ts","webpack:///./Client/app/admin/components/global-parameters/lock-management/list/lock-management-list.component.html","webpack:///./Client/app/admin/components/global-parameters/lock-management/list/lock-management-list.component.scss","webpack:///./Client/app/admin/components/global-parameters/lock-management/list/lock-management-list.component.ts","webpack:///./Client/app/admin/components/global-parameters/user-preferences/date-format/date-format.component.html","webpack:///./Client/app/admin/components/global-parameters/user-preferences/date-format/date-format.component.scss","webpack:///./Client/app/admin/components/global-parameters/user-preferences/date-format/date-format.component.ts","webpack:///./Client/app/admin/components/global-parameters/user-preferences/language/language.component.html","webpack:///./Client/app/admin/components/global-parameters/user-preferences/language/language.component.scss","webpack:///./Client/app/admin/components/global-parameters/user-preferences/language/language.component.ts","webpack:///./Client/app/admin/components/global-parameters/user-preferences/user-preferences.component.html","webpack:///./Client/app/admin/components/global-parameters/user-preferences/user-preferences.component.scss","webpack:///./Client/app/admin/components/global-parameters/user-preferences/user-preferences.component.ts","webpack:///./Client/app/admin/components/home/home.component.html","webpack:///./Client/app/admin/components/home/home.component.scss","webpack:///./Client/app/admin/components/home/home.component.ts","webpack:///./Client/app/admin/components/operations/interface-builder/details/interface-builder-details.component.html","webpack:///./Client/app/admin/components/operations/interface-builder/details/interface-builder-details.component.scss","webpack:///./Client/app/admin/components/operations/interface-builder/details/interface-builder-details.component.ts","webpack:///./Client/app/admin/components/operations/interface-monitoring/ag-grid-button/ag-grid-button.component.html","webpack:///./Client/app/admin/components/operations/interface-monitoring/ag-grid-button/ag-grid-button.component.scss","webpack:///./Client/app/admin/components/operations/interface-monitoring/ag-grid-button/ag-grid-button.component.ts","webpack:///./Client/app/admin/components/operations/interface-monitoring/interface-monitoring-details/interface-monitoring-details.component.html","webpack:///./Client/app/admin/components/operations/interface-monitoring/interface-monitoring-details/interface-monitoring-details.component.scss","webpack:///./Client/app/admin/components/operations/interface-monitoring/interface-monitoring-details/interface-monitoring-details.component.ts","webpack:///./Client/app/admin/components/operations/interface-monitoring/interface-monitoring-summary/interface-monitoring-summary.component.html","webpack:///./Client/app/admin/components/operations/interface-monitoring/interface-monitoring-summary/interface-monitoring-summary.component.scss","webpack:///./Client/app/admin/components/operations/interface-monitoring/interface-monitoring-summary/interface-monitoring-summary.component.ts","webpack:///./Client/app/admin/components/operations/operations.component.html","webpack:///./Client/app/admin/components/operations/operations.component.scss","webpack:///./Client/app/admin/components/operations/operations.component.ts","webpack:///./Client/app/admin/components/profiles/privilege-tree/privilege-tree.component.html","webpack:///./Client/app/admin/components/profiles/privilege-tree/privilege-tree.component.scss","webpack:///./Client/app/admin/components/profiles/privilege-tree/privilege-tree.component.ts","webpack:///./Client/app/admin/components/profiles/profiles-list/contextual-menu/profiles-list-contextual-menu.component.ts","webpack:///./Client/app/admin/components/profiles/profiles-list/profiles-list.component.html","webpack:///./Client/app/admin/components/profiles/profiles-list/profiles-list.component.scss","webpack:///./Client/app/admin/components/profiles/profiles-list/profiles-list.component.ts","webpack:///./Client/app/admin/components/profiles/profiles-management/copy/profiles-copy.component.ts","webpack:///./Client/app/admin/components/profiles/profiles-management/profiles-management.component.html","webpack:///./Client/app/admin/components/profiles/profiles-management/profiles-management.component.scss","webpack:///./Client/app/admin/components/profiles/profiles-management/profiles-management.component.ts","webpack:///./Client/app/admin/components/stepper/stepper.component.html","webpack:///./Client/app/admin/components/stepper/stepper.component.scss","webpack:///./Client/app/admin/components/stepper/stepper.component.ts","webpack:///./Client/app/admin/components/users/user-list/user-list.component.html","webpack:///./Client/app/admin/components/users/user-list/user-list.component.scss","webpack:///./Client/app/admin/components/users/user-list/user-list.component.ts","webpack:///./Client/app/admin/components/users/user-manage/ag-grid-department/ag-grid-department.component.html","webpack:///./Client/app/admin/components/users/user-manage/ag-grid-department/ag-grid-department.component.scss","webpack:///./Client/app/admin/components/users/user-manage/ag-grid-department/ag-grid-department.component.ts","webpack:///./Client/app/admin/components/users/user-manage/copy-privileges-dialog/copy-privileges-dialog.component.html","webpack:///./Client/app/admin/components/users/user-manage/copy-privileges-dialog/copy-privileges-dialog.component.scss","webpack:///./Client/app/admin/components/users/user-manage/copy-privileges-dialog/copy-privileges-dialog.component.ts","webpack:///./Client/app/admin/components/users/user-manage/permission-line/department-dropdown/department-dropdown.component.html","webpack:///./Client/app/admin/components/users/user-manage/permission-line/department-dropdown/department-dropdown.component.scss","webpack:///./Client/app/admin/components/users/user-manage/permission-line/department-dropdown/department-dropdown.component.ts","webpack:///./Client/app/admin/components/users/user-manage/permission-line/permission-line.component.html","webpack:///./Client/app/admin/components/users/user-manage/permission-line/permission-line.component.scss","webpack:///./Client/app/admin/components/users/user-manage/permission-line/permission-line.component.ts","webpack:///./Client/app/admin/components/users/user-manage/user-manage.component.html","webpack:///./Client/app/admin/components/users/user-manage/user-manage.component.scss","webpack:///./Client/app/admin/components/users/user-manage/user-manage.component.ts","webpack:///./Client/app/admin/components/users/user-search/user-search.component.css","webpack:///./Client/app/admin/components/users/user-search/user-search.component.html","webpack:///./Client/app/admin/components/users/user-search/user-search.component.ts","webpack:///./Client/app/admin/entities/company-tab-index.ts","webpack:///./Client/app/admin/validators/functional-object-name.validator.ts","webpack:///./Client/app/shared/entities/accounting-field-setup.entity.ts","webpack:///./Client/app/shared/entities/accounting-parameter.entity.ts","webpack:///./Client/app/shared/entities/accounting-setup-fields.entity.ts","webpack:///./Client/app/shared/entities/allocation-set-up-entity.ts","webpack:///./Client/app/shared/entities/application-table.entity.ts","webpack:///./Client/app/shared/entities/company-configuration.entity.ts","webpack:///./Client/app/shared/entities/company-setup.entity.ts","webpack:///./Client/app/shared/entities/create-company.entity.ts","webpack:///./Client/app/shared/entities/default-accounting-setup-result.entity.ts","webpack:///./Client/app/shared/entities/freeze-company.entity.ts","webpack:///./Client/app/shared/entities/interco-no-interco-email-setup.entity.ts","webpack:///./Client/app/shared/entities/interface-setup.entity.ts","webpack:///./Client/app/shared/entities/invoice-Setup.entity.ts","webpack:///./Client/app/shared/entities/lock-functional-context.entity.ts","webpack:///./Client/app/shared/entities/mandatory-trade-fields.ts","webpack:///./Client/app/shared/entities/mapping-entity.ts","webpack:///./Client/app/shared/entities/privilege-node.entity.ts","webpack:///./Client/app/shared/entities/profile.entity.ts","webpack:///./Client/app/shared/entities/retention-policy.entity.ts","webpack:///./Client/app/shared/entities/trade-parameter.entity.ts","webpack:///./Client/app/shared/entities/user-permission.entity.ts","webpack:///./Client/app/shared/entities/user-preferences-setup.entity.ts","webpack:///./Client/app/shared/entities/user-preferences.entity.ts","webpack:///./Client/app/shared/enums/accounting-fields.enum.ts","webpack:///./Client/app/shared/enums/configuration-type.enum.ts","webpack:///./Client/app/shared/enums/freeze.enum.ts","webpack:///./Client/app/shared/enums/interface-object-type.enum.ts","webpack:///./Client/app/shared/enums/itparameter-documenttype.enum.ts","webpack:///./Client/app/shared/enums/privilege-type.enum.ts","webpack:///./Client/app/shared/enums/week-days.entity.ts","webpack:///./Client/app/shared/models/user-list-item-view-model.ts","webpack:///./Client/app/shared/services/Interface/dto/payment-request-interface-command.ts","webpack:///./Client/app/shared/services/Interface/dto/payment-request-interface-error.ts","webpack:///./Client/app/shared/services/Interface/dto/update-interface-error.ts","webpack:///./Client/app/shared/services/customDateAdapter.ts","webpack:///./Client/app/shared/services/http-services/audit.service.ts","webpack:///./Client/app/shared/services/http-services/interface.service.ts","webpack:///./Client/app/shared/services/http-services/payment-request-interface.service.ts"],"names":[],"mappings":"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","file":"admin-admin-module.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatButtonModule, MatCardModule, MatDialogModule } from '@angular/material';\r\nimport { NgProgressModule } from '@ngx-progressbar/core';\r\nimport { NgProgressHttpModule } from '@ngx-progressbar/http';\r\nimport { AgGridModule } from 'ag-grid-angular';\r\nimport { TextMaskModule } from 'angular2-text-mask';\r\nimport { AgGridMultipleAutocompleteDepartmentComponent } from '../shared/components/ag-grid/ag-grid-multiple-autocomplete-department/ag-grid-multiple-autocomplete-department.component';\r\nimport { AgGridMultipleAutocompleteComponent } from '../shared/components/ag-grid/ag-grid-multiple-autocomplete/ag-grid-multiple-autocomplete.component';\r\nimport { MaterialModule } from '../shared/material.module';\r\nimport { CustomDateAdapter } from '../shared/services/customDateAdapter';\r\nimport { ATLAS_DATE_FORMATS, SharedModule } from '../shared/shared.module';\r\nimport { AdminRoutingModule } from './admin.route';\r\nimport { CompanyListComponent } from './components/companies/company-list/company-list.component';\r\nimport { AccountingTabComponent } from './components/companies/company-management/accounting-tab/accounting-tab.component';\r\nimport { DefaultAccountComponent } from './components/companies/company-management/accounting-tab/default-account/default-account.component';\r\nimport { DefaultCostTypeComponent } from './components/companies/company-management/accounting-tab/default-cost-type/default-cost-type.component';\r\nimport { MainAccountingComponent } from './components/companies/company-management/accounting-tab/main-accounting/main-accounting.component';\r\nimport { OthersComponent } from './components/companies/company-management/accounting-tab/others/others.component';\r\nimport { CompanyManagementComponent } from './components/companies/company-management/company-management.component';\r\nimport { CompanyMenuBarComponent } from './components/companies/company-management/company-menu-bar/company-menu-bar.component';\r\nimport { HeaderFormComponent } from './components/companies/company-management/header-form/header-form.component';\r\nimport { AccountingInterfaceComponent } from './components/companies/company-management/interface-tab/accounting-interface/accounting-interface.component';\r\nimport { DmsComponent } from './components/companies/company-management/interface-tab/dms/dms.component';\r\nimport { InterfaceTabComponent } from './components/companies/company-management/interface-tab/interface-tab.component';\r\nimport { MappingComponent } from './components/companies/company-management/interface-tab/mapping/mapping.component';\r\nimport { TreasurySystemComponent } from './components/companies/company-management/interface-tab/treasury-system/treasury-system.component';\r\nimport { DefaultPaymentTermsComponent } from './components/companies/company-management/invoice-tab/default-payment-terms/default-payment-terms.component';\r\nimport { InvoiceTabComponent } from './components/companies/company-management/invoice-tab/invoice-tab.component';\r\nimport { TresholdCostAmountComponent } from './components/companies/company-management/invoice-tab/treshold-cost-amount/treshold-cost-amount.component';\r\nimport { AccountingParametersComponent } from './components/companies/company-management/itparamters-tab/accounting-parameters/accounting-parameters.component';\r\nimport { FreezeParametersComponent } from './components/companies/company-management/itparamters-tab/freeze-parameters/freeze-parameters.component';\r\nimport { ItparametersTabComponent } from './components/companies/company-management/itparamters-tab/itparameters-tab.component';\r\nimport { TradeParametersComponent } from './components/companies/company-management/itparamters-tab/trade-parameters/trade-parameters.component';\r\nimport { CompanyManagementMainTabComponent } from './components/companies/company-management/main-tab/company-management-main-tab.component';\r\nimport { DefaultBrokerComponent } from './components/companies/company-management/main-tab/default-broker/default-broker.component';\r\nimport { DetailsComponent } from './components/companies/company-management/main-tab/details/details.component';\r\nimport { IdentityComponent } from './components/companies/company-management/main-tab/identity/identity.component';\r\nimport { LocationComponent } from './components/companies/company-management/main-tab/location/location.component';\r\nimport { AllocationSetUpComponent } from './components/companies/company-management/physicals-tab/allocation-set-up/allocation-set-up.component';\r\nimport { MandatoryTradeApprovalComponent } from './components/companies/company-management/physicals-tab/mandatory-trade-approval/mandatory-trade-approval.component';\r\nimport { PhysicalsMainComponent } from './components/companies/company-management/physicals-tab/physicals-main/physicals-main.component';\r\nimport { PhysicalsTabComponent } from './components/companies/company-management/physicals-tab/physicals-tab.component';\r\nimport { DefaultTaxesComponent } from './components/companies/company-management/tax-tab/default-taxes/default-taxes.component';\r\nimport { TaxConfigurationComponent } from './components/companies/company-management/tax-tab/tax-configuration/tax-configuration.component';\r\nimport { TaxTabComponent } from './components/companies/company-management/tax-tab/tax-tab.component';\r\nimport { MasterDataFieldComponent } from './components/companies/company-settings/master-data-field/master-data-field.component';\r\nimport { TransactionDataComponent } from './components/companies/company-settings/transaction-data/transaction-data.component';\r\nimport { UserAccountComponent } from './components/companies/company-settings/user-account/user-account.component';\r\nimport { UserPrivilegesComponent } from './components/companies/company-settings/user-privileges/user-privileges.component';\r\nimport { CompanySelectionComponent } from './components/companies/copy-company/company-selection/company-selection.component';\r\nimport { CopyCompanyComponent } from './components/companies/copy-company/copy-company.component';\r\nimport { MasterRowApplyComponent } from './components/companies/master-row-apply/master-row-apply.component';\r\nimport { ConfigurationInterfaceComponent } from './components/global-parameters/configuration-interface/configuration-interface.component';\r\nimport { FunctionalObjectDetailsComponent } from './components/global-parameters/functional-objects/details/functional-object-details.component';\r\nimport { FunctionalObjectComponent } from './components/global-parameters/functional-objects/functional-object.component';\r\nimport { FunctionalObjectsListComponent } from './components/global-parameters/functional-objects/list/functional-objects-list.component';\r\nimport { GlobalParametersComponent } from './components/global-parameters/global-parameters.component';\r\nimport { ContextualSearchComponent } from './components/global-parameters/grid-configuration/contextual-search/contextual-search.component';\r\nimport { ContextualViewDetailsComponent } from './components/global-parameters/grid-configuration/contextual-search/details/contextual-view-details.component';\r\nimport { GridConfigurationComponent } from './components/global-parameters/grid-configuration/grid-configuration.component';\r\nimport { ListViewDetailsComponent } from './components/global-parameters/grid-configuration/list-search/details/list-view-details.component';\r\nimport { ListAndSearchComponent } from './components/global-parameters/grid-configuration/list-search/list-search.component';\r\nimport { ListViewComponent } from './components/global-parameters/grid-configuration/list-view/list-view.component';\r\nimport { LockManagementListComponent } from './components/global-parameters/lock-management/list/lock-management-list.component';\r\nimport { DateFormatComponent } from './components/global-parameters/user-preferences/date-format/date-format.component';\r\nimport { LanguageComponent } from './components/global-parameters/user-preferences/language/language.component';\r\nimport { UserPreferencesComponent } from './components/global-parameters/user-preferences/user-preferences.component';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { InterfaceBuilderDetailsComponent } from './components/operations/interface-builder/details/interface-builder-details.component';\r\nimport { AgGridButtonComponent } from './components/operations/interface-monitoring/ag-grid-button/ag-grid-button.component';\r\nimport { InterfaceMonitoringDetailsComponent } from './components/operations/interface-monitoring/interface-monitoring-details/interface-monitoring-details.component';\r\nimport { InterfaceMonitoringSummaryComponent } from './components/operations/interface-monitoring/interface-monitoring-summary/interface-monitoring-summary.component';\r\nimport { OperationsComponent } from './components/operations/operations.component';\r\nimport { PrivilegeTreeComponent } from './components/profiles/privilege-tree/privilege-tree.component';\r\nimport { ProfilesListContextualMenuComponent } from './components/profiles/profiles-list/contextual-menu/profiles-list-contextual-menu.component';\r\nimport { ProfilesListComponent } from './components/profiles/profiles-list/profiles-list.component';\r\nimport { ProfilesCopyComponent } from './components/profiles/profiles-management/copy/profiles-copy.component';\r\nimport { ProfilesManagementComponent } from './components/profiles/profiles-management/profiles-management.component';\r\nimport { StepperComponent } from './components/stepper/stepper.component';\r\nimport { UserListComponent } from './components/users/user-list/user-list.component';\r\nimport { AgGridDepartmentComponent } from './components/users/user-manage/ag-grid-department/ag-grid-department.component';\r\nimport { CopyPrivilegesDialogComponent } from './components/users/user-manage/copy-privileges-dialog/copy-privileges-dialog.component';\r\nimport { DepartmentDropdownComponent } from './components/users/user-manage/permission-line/department-dropdown/department-dropdown.component';\r\nimport { PermissionLineComponent } from './components/users/user-manage/permission-line/permission-line.component';\r\nimport { UserManageComponent } from './components/users/user-manage/user-manage.component';\r\nimport { UserSearchComponent } from './components/users/user-search/user-search.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        SharedModule,\r\n        AdminRoutingModule,\r\n        AgGridModule.withComponents([]),\r\n        NgProgressModule.forRoot(),\r\n        NgProgressHttpModule,\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        TextMaskModule,\r\n    ],\r\n\r\n    declarations: [\r\n        UserManageComponent,\r\n        UserListComponent,\r\n        HomeComponent,\r\n        UserSearchComponent,\r\n        StepperComponent,\r\n        ProfilesListComponent,\r\n        ProfilesManagementComponent,\r\n        PrivilegeTreeComponent,\r\n        PermissionLineComponent,\r\n        ProfilesCopyComponent,\r\n        ProfilesListContextualMenuComponent,\r\n        CopyPrivilegesDialogComponent,\r\n        DepartmentDropdownComponent,\r\n        AgGridDepartmentComponent,\r\n        GlobalParametersComponent,\r\n        FunctionalObjectsListComponent,\r\n        FunctionalObjectComponent,\r\n        LockManagementListComponent,\r\n        FunctionalObjectDetailsComponent,\r\n        CompanyListComponent,\r\n        CompanyManagementComponent,\r\n        CompanyManagementMainTabComponent,\r\n        InvoiceTabComponent,\r\n        DefaultPaymentTermsComponent,\r\n        TresholdCostAmountComponent,\r\n        TaxTabComponent,\r\n        TaxConfigurationComponent,\r\n        DefaultTaxesComponent,\r\n        GridConfigurationComponent,\r\n        ListAndSearchComponent,\r\n        ContextualSearchComponent,\r\n        ListViewComponent,\r\n        ListViewDetailsComponent,\r\n        ContextualViewDetailsComponent,\r\n        IdentityComponent,\r\n        LocationComponent,\r\n        DetailsComponent,\r\n        CopyCompanyComponent,\r\n        CompanySelectionComponent,\r\n        MandatoryTradeApprovalComponent,\r\n        AllocationSetUpComponent,\r\n        PhysicalsTabComponent,\r\n        PhysicalsMainComponent,\r\n        MasterDataFieldComponent,\r\n        UserPrivilegesComponent,\r\n        TransactionDataComponent,\r\n        UserAccountComponent,\r\n        AccountingTabComponent,\r\n        MainAccountingComponent,\r\n        DefaultAccountComponent,\r\n        DefaultCostTypeComponent,\r\n        MasterRowApplyComponent,\r\n        InterfaceTabComponent,\r\n        MappingComponent,\r\n        AccountingInterfaceComponent,\r\n        DmsComponent,\r\n        TreasurySystemComponent,\r\n        ItparametersTabComponent,\r\n        TradeParametersComponent,\r\n        FreezeParametersComponent,\r\n        AccountingParametersComponent,\r\n        HeaderFormComponent,\r\n        CompanyMenuBarComponent,\r\n        InterfaceBuilderDetailsComponent,\r\n        OperationsComponent,\r\n        UserPreferencesComponent,\r\n        LanguageComponent,\r\n        DateFormatComponent,\r\n        InterfaceMonitoringSummaryComponent,\r\n        ConfigurationInterfaceComponent,\r\n        DefaultBrokerComponent,\r\n        InterfaceMonitoringDetailsComponent,\r\n        AgGridButtonComponent,\r\n        OthersComponent,\r\n    ],\r\n    entryComponents: [\r\n        ProfilesListContextualMenuComponent,\r\n        CopyPrivilegesDialogComponent,\r\n        AgGridDepartmentComponent,\r\n        AgGridMultipleAutocompleteComponent,\r\n        AgGridMultipleAutocompleteDepartmentComponent,\r\n        PhysicalsMainComponent,\r\n        MasterRowApplyComponent,\r\n        AgGridButtonComponent,\r\n    ],\r\n    providers: [CustomDateAdapter,\r\n        { provide: MAT_DATE_LOCALE, useValue: 'en' },\r\n        { provide: DateAdapter, useClass: CustomDateAdapter },\r\n        { provide: MAT_DATE_FORMATS, useValue: ATLAS_DATE_FORMATS },\r\n    ],\r\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class AdminModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MasterDataProps } from '../shared/entities/masterdata-props.entity';\r\nimport { CanDeactivateGuard } from '../shared/guards/can-deactivate-guard.service';\r\nimport { SecurityGuard } from '../shared/guards/security.guard';\r\nimport { CompanyDateResolver } from '../shared/resolvers/company-date.resolver';\r\nimport { FormConfigurationResolver } from '../shared/resolvers/form-configuration.resolver';\r\nimport { MasterDataResolver } from '../shared/resolvers/masterdata.resolver';\r\nimport { CompanyListComponent } from './components/companies/company-list/company-list.component';\r\nimport { CompanyManagementComponent } from './components/companies/company-management/company-management.component';\r\nimport { CompanySelectionComponent } from './components/companies/copy-company/company-selection/company-selection.component';\r\nimport { CopyCompanyComponent } from './components/companies/copy-company/copy-company.component';\r\nimport { ConfigurationInterfaceComponent } from './components/global-parameters/configuration-interface/configuration-interface.component';\r\nimport { FunctionalObjectDetailsComponent } from './components/global-parameters/functional-objects/details/functional-object-details.component';\r\nimport { FunctionalObjectComponent } from './components/global-parameters/functional-objects/functional-object.component';\r\nimport { FunctionalObjectsListComponent } from './components/global-parameters/functional-objects/list/functional-objects-list.component';\r\nimport { GlobalParametersComponent } from './components/global-parameters/global-parameters.component';\r\nimport { ContextualSearchComponent } from './components/global-parameters/grid-configuration/contextual-search/contextual-search.component';\r\nimport { ListAndSearchComponent } from './components/global-parameters/grid-configuration/list-search/list-search.component';\r\nimport { LockManagementListComponent } from './components/global-parameters/lock-management/list/lock-management-list.component';\r\nimport { UserPreferencesComponent } from './components/global-parameters/user-preferences/user-preferences.component';\r\nimport * as Admin from './components/home/home.component';\r\nimport { InterfaceBuilderDetailsComponent } from './components/operations/interface-builder/details/interface-builder-details.component';\r\nimport { InterfaceMonitoringDetailsComponent } from './components/operations/interface-monitoring/interface-monitoring-details/interface-monitoring-details.component';\r\nimport { InterfaceMonitoringSummaryComponent } from './components/operations/interface-monitoring/interface-monitoring-summary/interface-monitoring-summary.component';\r\nimport { OperationsComponent } from './components/operations/operations.component';\r\nimport { ProfilesListComponent } from './components/profiles/profiles-list/profiles-list.component';\r\nimport { ProfilesCopyComponent } from './components/profiles/profiles-management/copy/profiles-copy.component';\r\nimport { ProfilesManagementComponent } from './components/profiles/profiles-management/profiles-management.component';\r\nimport { UserListComponent } from './components/users/user-list/user-list.component';\r\nimport { UserManageComponent } from './components/users/user-manage/user-manage.component';\r\nimport { UserSearchComponent } from './components/users/user-search/user-search.component';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: Admin.HomeComponent,\r\n        canActivate: [SecurityGuard],\r\n    },\r\n    {\r\n        path: 'users',\r\n        component: UserListComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Users', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Users',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'users/new',\r\n        component: UserSearchComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'User Creation', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Users',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'users/new/:userId',\r\n        component: UserManageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'User Creation', isCreation: true, isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Users',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'users/edit/:userId',\r\n        component: UserManageComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'User Edition', isCreation: false, isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Users',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'profiles',\r\n        component: ProfilesListComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Profiles', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Profiles',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'profiles/new',\r\n        component: ProfilesManagementComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Profile Creation', isCreation: true, isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Profiles',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'profiles/edit/:profileId',\r\n        component: ProfilesManagementComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Profile Edition', isCreation: false, isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Profiles',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'profiles/copy/:profileId',\r\n        component: ProfilesCopyComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Profile Copy', isCreation: true, isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Profiles',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters',\r\n        component: GlobalParametersComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'global-parameters', title: 'Global Parameters', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/user-preferences',\r\n        component: UserPreferencesComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'false', title: 'User Settings', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.LanguagePreference,\r\n                MasterDataProps.DateFormatPreference,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/functional-object/list',\r\n        component: FunctionalObjectsListComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'functional-object-list', title: 'Audit\\'s functional objects', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/functional-object/new',\r\n        component: FunctionalObjectComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'functional-object-creation', title: 'New functional object', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateFunctionalObject',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                    parentLevelTwo: 'GlobalParameters',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/functional-object/edit/:functionalObjectId',\r\n        component: FunctionalObjectComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'functional-object-creation', title: 'Edit functional object', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'CreateFunctionalObject',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                    parentLevelTwo: 'GlobalParameters',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/functional-object/details/:functionalObjectId',\r\n        component: FunctionalObjectDetailsComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'functional-object-details', title: 'Display functional object', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/configuration-interface',\r\n        component: ConfigurationInterfaceComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'configuration-interface', title: 'Interface', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/lock-management/list',\r\n        component: LockManagementListComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'lock-management-list', title: 'Lock Management', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    {\r\n        path: 'companies',\r\n        component: CompanyListComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Companies', isHomePage: false, privilegeLevel1Name: null,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Companies,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'company-configuration/display/:companyId',\r\n        component: CompanyManagementComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'companyConfigurationDisplay',\r\n            formId: 'admin', title: 'Company Configuration Edition', isHomePage: false, privilegeLevel1Name: null,\r\n            isEdit: false,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.TaxTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.CompanyTypes,\r\n                MasterDataProps.CompanyPlatforms,\r\n                MasterDataProps.CompanyCropYearFormats,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InterfaceType,\r\n                MasterDataProps.TimeZones,\r\n                MasterDataProps.TransactionDocumentType,\r\n                MasterDataProps.Branches,\r\n                MasterDataProps.Province,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'Physicals',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Trades',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'company-configuration/edit/:companyId/:tabIndex',\r\n        component: CompanyManagementComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Company Configuration Edition',\r\n            isHomePage: false, privilegeLevel1Name: null,\r\n            formId: 'editCompanyConfiguration',\r\n            isEdit: true,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.TaxTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.CompanyTypes,\r\n                MasterDataProps.CompanyPlatforms,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.CompanyCropYearFormats,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InterfaceType,\r\n                MasterDataProps.TimeZones,\r\n                MasterDataProps.TransactionDocumentType,\r\n                MasterDataProps.Branches,\r\n                MasterDataProps.Province,\r\n            ],\r\n        },\r\n        resolve: {\r\n            formConfiguration: FormConfigurationResolver,\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'companies/create',\r\n        component: CompanyManagementComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Create a company',\r\n            isHomePage: false, privilegeLevel1Name: null,\r\n            formId: 'createCompanyConfiguration',\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.TaxTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.CompanyTypes,\r\n                MasterDataProps.CompanyPlatforms,\r\n                MasterDataProps.CompanyCropYearFormats,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.InterfaceType,\r\n                MasterDataProps.ContractTypes,\r\n                MasterDataProps.TransactionDocumentType,\r\n                MasterDataProps.TimeZones,\r\n                MasterDataProps.Province,\r\n                MasterDataProps.Branches,\r\n                MasterDataProps.TransactionDocumentType,\r\n            ],\r\n        },\r\n        resolve: {\r\n            formConfiguration: FormConfigurationResolver,\r\n            masterdata: MasterDataResolver,\r\n            companyDate: CompanyDateResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'companies/selection',\r\n        component: CompanySelectionComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin', title: 'Copy Company', isHomePage: false, privilegeLevel1Name: null,\r\n            formId: 'CopyCompany',\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'companies/copy/:companyId',\r\n        component: CopyCompanyComponent,\r\n        canActivate: [SecurityGuard],\r\n        canDeactivate: [CanDeactivateGuard],\r\n        data: {\r\n            animation: 'admin',\r\n            title: 'Copy Company',\r\n            isHomePage: false, privilegeLevel1Name: null, isCopy: true,\r\n            masterdataList: [\r\n                MasterDataProps.Departments,\r\n                MasterDataProps.Companies,\r\n                MasterDataProps.PaymentTerms,\r\n                MasterDataProps.TaxTypes,\r\n                MasterDataProps.Vats,\r\n                MasterDataProps.WeightUnits,\r\n                MasterDataProps.Countries,\r\n                MasterDataProps.Currencies,\r\n                MasterDataProps.Counterparties,\r\n                MasterDataProps.LdcRegion,\r\n                MasterDataProps.CompanyTypes,\r\n                MasterDataProps.CompanyPlatforms,\r\n                MasterDataProps.NominalAccounts,\r\n                MasterDataProps.CostTypes,\r\n                MasterDataProps.CompanyCropYearFormats,\r\n                MasterDataProps.InterfaceType,\r\n                MasterDataProps.TimeZones,\r\n                MasterDataProps.TransactionDocumentType,\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'global-parameters/grid-configuration/list/display',\r\n        component: ListAndSearchComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'grid-configuration-list', title: 'List Configuration', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'global-parameters/grid-configuration/list/display/:gridId',\r\n        component: ListAndSearchComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'grid-configuration-list', title: 'List Configuration', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'global-parameters/grid-configuration/list/edit/:gridId',\r\n        component: ListAndSearchComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'grid-configuration-list', title: 'List Configuration', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'global-parameters/grid-configuration/contextual/display/:gridId',\r\n        component: ContextualSearchComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'grid-configuration-list', title: 'List Configuration', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'global-parameters/grid-configuration/contextual/display',\r\n        component: ContextualSearchComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'grid-configuration-list', title: 'List Configuration', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'global-parameters/grid-configuration/contextual/edit/:gridId',\r\n        component: ContextualSearchComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'grid-configuration-list', title: 'List Configuration', isHomePage: false, icon: '',\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'operations',\r\n        component: OperationsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'operations', title: 'Operations', isHomePage: false, privilegeLevel1Name: null,\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'GlobalParameters',\r\n                    permission: 1,\r\n                    parentLevelOne: 'Administration',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n\r\n    {\r\n        path: 'operations/interface-builder/details',\r\n        component: InterfaceBuilderDetailsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'interface-builder-details', title: 'Interface Builder', isHomePage: false, icon: '',\r\n            masterdataList: [\r\n                MasterDataProps.InterfaceType,\r\n                MasterDataProps.InterfaceObjectType,\r\n                MasterDataProps.Companies,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'InterfaceBuilder',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                    parentLevelTwo: 'Operations',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'operations/interface-monitoring',\r\n        component: InterfaceMonitoringSummaryComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'interface-monitoring-summary', title: 'Interface Monitoring', isHomePage: false, icon: '',\r\n            masterdataList: [\r\n                MasterDataProps.InterfaceType,\r\n                MasterDataProps.InterfaceStatus,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'InterfaceMonitoring',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                    parentLevelTwo: 'Operations',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n    {\r\n        path: 'operations/interface-monitoring/details',\r\n        component: InterfaceMonitoringDetailsComponent,\r\n        canActivate: [SecurityGuard],\r\n        data: {\r\n            animation: 'interface-monitoring-details', title: 'Interface Monitoring', isHomePage: false, icon: '',\r\n            masterdataList: [\r\n                MasterDataProps.InterfaceType,\r\n                MasterDataProps.InterfaceStatus,\r\n            ],\r\n            authorizations: [\r\n                {\r\n                    privilegeName: 'InterfaceMonitoring',\r\n                    permission: 2,\r\n                    parentLevelOne: 'Administration',\r\n                    parentLevelTwo: 'Operations',\r\n                },\r\n            ],\r\n        },\r\n        resolve: {\r\n            masterdata: MasterDataResolver,\r\n        },\r\n    },\r\n\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class AdminRoutingModule { }\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <button mat-raised-button\\r\\n                class=\\\"fab-text-button\\\"\\r\\n                color=\\\"accent\\\"\\r\\n                [matMenuTriggerFor]=\\\"menu\\\">\\r\\n            <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n            CREATE COMPANY\\r\\n        </button>\\r\\n        <mat-menu #menu=\\\"matMenu\\\"\\r\\n                  class=\\\"floating-menu has-header\\\">\\r\\n            <button mat-menu-item\\r\\n                    class=\\\"menu-header\\\"\\r\\n                    disabled=true>\\r\\n                <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n                <span>CREATE COMPANY</span>\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onCreateFromScratchButtonClicked()\\\">\\r\\n                <mat-icon class=\\\"material-icons\\\">add</mat-icon>\\r\\n                Create From Scratch\\r\\n            </button>\\r\\n            <button mat-menu-item\\r\\n                    (click)=\\\"onCreateByCopyingButtonClicked()\\\">\\r\\n                <mat-icon class=\\\"material-icons\\\">file_copy</mat-icon>\\r\\n                Create by copying\\r\\n            </button>\\r\\n        </mat-menu>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Companies</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"companyGridOptions && companyGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"companyGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [showExport]=\\\"false\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"companyGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"companyGridRows\\\"\\r\\n                             [columnDefs]=\\\"companyGridCols\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [suppressSizeToFit]=false\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (rowClicked)=\\\"onCompanyRowClicked($event)\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".header-tab {\\n  margin-bottom: 40px; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n.floating-menu {\\n  top: -1px; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { AdminActionsService } from '../../../../admin/services/admin-actions.service';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../../shared/entities/window-injection-token';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { ConfigurationService } from '../../../../shared/services/http-services/configuration.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\n\r\n@Component({\r\n    selector: 'atlas-company-list',\r\n    templateUrl: './company-list.component.html',\r\n    styleUrls: ['./company-list.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class CompanyListComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    isLoading = true;\r\n    company: string;\r\n    gridCode = 'companyList';\r\n    userActiveDirectoryName: string;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    companyGridContextualMenuActions: AgContextualMenuAction[];\r\n    companyGridOptions: agGrid.GridOptions = {};\r\n    companyGridCols: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    destroy$ = new Subject();\r\n    masterdata: MasterData;\r\n    companyGridRows: Company[];\r\n\r\n    constructor(\r\n        private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private datePipe: DatePipe,\r\n        public gridService: AgGridService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private authorizationService: AuthorizationService,\r\n        private companyManager: CompanyManagerService,\r\n        protected configurationService: ConfigurationService,\r\n        protected adminActionsService: AdminActionsService,\r\n    ) {\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.initCompanyGridColumns();\r\n            this.getCompanies();\r\n            this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.companyGridCols;\r\n        this.companyGridOptions = params;\r\n        this.gridApi = this.companyGridOptions.api;\r\n        this.gridColumnApi = this.companyGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onCompanyRowClicked(event) {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/admin/company-configuration/display/', encodeURIComponent(event.data.companyId)]);\r\n    }\r\n\r\n    initCompanyGridColumns() {\r\n        this.companyGridCols = [\r\n            {\r\n                headerName: 'Company Id',\r\n                colId: 'id',\r\n                field: 'id',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Company Friendly Code',\r\n                colId: 'companyId',\r\n                field: 'companyId',\r\n            },\r\n            {\r\n                headerName: 'Company Name',\r\n                colId: 'description',\r\n                field: 'description',\r\n            },\r\n            {\r\n                headerName: 'Company Type',\r\n                colId: 'companyType',\r\n                field: 'companyType',\r\n            },\r\n            {\r\n                headerName: 'Legal Entity',\r\n                colId: 'legalEntityCode',\r\n                field: 'legalEntityCode',\r\n            },\r\n            {\r\n                headerName: 'LDC Regions',\r\n                colId: 'ldcRegionCode',\r\n                field: 'ldcRegionCode',\r\n            },\r\n        ];\r\n    }\r\n\r\n    getCompanies() {\r\n        this.configurationService.getCompanyListDetails(this.company).subscribe((companyListData) => {\r\n            if (companyListData) {\r\n                this.companyGridRows = companyListData;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    onCreateFromScratchButtonClicked() {\r\n        this.adminActionsService.createCompanySubject.next();\r\n    }\r\n\r\n    onCreateByCopyingButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/admin/companies/selection']);\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onColumnVisibilityChanged(column: any) {\r\n        if (this.userPreferencesComponent) {\r\n            this.userPreferencesComponent.onChangeColumnVisibility(column);\r\n        }\r\n        this.companyGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    showOrHideColum(event, col: agGrid.ColDef) {\r\n        const cols = this.companyGridCols.filter((colf) => colf.colId === col.colId);\r\n        if (cols.length === 1) {\r\n            cols[0].hide = !(col.hide || false);\r\n\r\n            this.gridColumnApi.setColumnVisible(col.colId, !cols[0].hide);\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onRefreshButtonClicked() {\r\n        this.gridColumnApi.resetColumnState();\r\n        this.companyGridCols.forEach((colf) => {\r\n            colf.hide = !this.gridColumnApi.getColumn(colf.colId).isVisible();\r\n        });\r\n        this.companyGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <div fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             fxLayoutGap.sm=\\\"10\\\"\\r\\n             class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onMainAccountingTabCliked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">Main Accounting</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onDefaultAccountingTabCliked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\GlobalParam_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">Default Account</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onDefaultCostTypeTabCliked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\Profiles_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">Default Cost Type</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <div fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             fxLayoutGap.sm=\\\"10\\\"\\r\\n             class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onOthersTabCliked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">Others</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideMainAccountSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #mainAccountingSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-main-accounting #mainAccountingComponent\\r\\n                                   (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                                   (saveMandatory)=\\\"mainAccountingSideNav.close()\\\"\\r\\n                                   (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-main-accounting>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideDefaultAccountSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #defaultAccountingSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-default-account #defaultAccountComponent\\r\\n                                   (saveMandatory)=\\\"defaultAccountingSideNav.close()\\\"\\r\\n                                   (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                                   (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-default-account>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideDefaultCostTypeSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #defaultCostTypeSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-default-cost-type #defaultCostTypeComponent\\r\\n                                     (saveMandatory)=\\\"defaultCostTypeSideNav.close()\\\"\\r\\n                                     (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                                     (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-default-cost-type>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideOthersSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #othersSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-others #othersComponent\\r\\n                          (saveMandatory)=\\\"othersSideNav.close()\\\"\\r\\n                          (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                          (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-others>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\"","module.exports = \".sidenav {\\n  width: 960px;\\n  top: 56px; }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatSidenav } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { CompanyConfiguration } from '../../../../../shared/entities/company-configuration.entity';\r\nimport { DefaultAccountingSetupResult } from '../../../../../shared/entities/default-accounting-setup-result.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { DefaultAccountComponent } from './default-account/default-account.component';\r\nimport { DefaultCostTypeComponent } from './default-cost-type/default-cost-type.component';\r\nimport { MainAccountingComponent } from './main-accounting/main-accounting.component';\r\nimport { OthersComponent } from './others/others.component';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-tab',\r\n    templateUrl: './accounting-tab.component.html',\r\n    styleUrls: ['./accounting-tab.component.scss'],\r\n})\r\nexport class AccountingTabComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    @ViewChild('mainAccountingComponent') mainAccountingComponent: MainAccountingComponent;\r\n    @ViewChild('defaultAccountComponent') defaultAccountComponent: DefaultAccountComponent;\r\n    @ViewChild('defaultCostTypeComponent') defaultCostTypeComponent: DefaultCostTypeComponent;\r\n    @ViewChild('othersComponent') othersComponent: OthersComponent;\r\n    @ViewChild('mainAccountingSideNav') mainAccountingSideNav: MatSidenav;\r\n    @ViewChild('defaultAccountingSideNav') defaultAccountingSideNav: MatSidenav;\r\n    @ViewChild('defaultCostTypeSideNav') defaultCostTypeSideNav: MatSidenav;\r\n    @ViewChild('othersSideNav') othersSideNav: MatSidenav;\r\n    formComponents: BaseFormComponent[] = [];\r\n    accountingTabFormGroup: FormGroup;\r\n    companyConfigurationRecord: CompanyConfigurationRecord;\r\n    company: string;\r\n    masterData: MasterData[];\r\n    isEdit: boolean;\r\n    hideDefaultAccountSideNav: boolean;\r\n    hideMainAccountSideNav: boolean;\r\n    hideDefaultCostTypeSideNav: boolean;\r\n    hideOthersSideNav: boolean;\r\n    mainAccountingSetupComponent: string = 'MainAccountingComponent';\r\n    defaultAccountSetupComponent: string = 'DefaultAccountComponent';\r\n    defaultCostTypeSetupComponent: string = 'DefaultCostTypeComponent';\r\n    othersTypeComponent: string = 'OthersComponent';\r\n    nominalAccountResult: DefaultAccountingSetupResult;\r\n    costTypeResult: DefaultAccountingSetupResult;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected formBuilder: FormBuilder) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.isSideNavOpened.emit(false);\r\n        this.formComponents.push(\r\n            this.mainAccountingComponent,\r\n            this.defaultCostTypeComponent,\r\n            this.defaultAccountComponent,\r\n            this.othersComponent,\r\n        );\r\n    }\r\n\r\n    sideNavOpened(event: boolean) {\r\n        this.isSideNavOpened.emit(event);\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        this.formComponents.forEach((comp) => {\r\n            if (comp === this.defaultAccountComponent) {\r\n                entity = comp.populateEntity(entity);\r\n                this.nominalAccountResult = entity.defaultAccountingSetup;\r\n            } else if (comp === this.defaultCostTypeComponent) {\r\n                entity = comp.populateEntity(entity);\r\n                this.costTypeResult = entity.defaultAccountingSetup;\r\n            } else {\r\n                entity = comp.populateEntity(entity);\r\n            }\r\n        });\r\n        this.populateAccoutingSetupValues(entity.defaultAccountingSetup);\r\n        return entity;\r\n    }\r\n\r\n    populateAccoutingSetupValues(defaultAccountingSetup: DefaultAccountingSetupResult): DefaultAccountingSetupResult {\r\n        // Binding the cost type value\r\n        defaultAccountingSetup.cashReceivedCostTypeId = this.costTypeResult.cashReceivedCostTypeId;\r\n        defaultAccountingSetup.cashPaidCostTypeId = this.costTypeResult.cashPaidCostTypeId;\r\n        defaultAccountingSetup.purchaseInvoiceCostTypeId = this.costTypeResult.purchaseInvoiceCostTypeId;\r\n        defaultAccountingSetup.salesInvoiceCostTypeId = this.costTypeResult.salesInvoiceCostTypeId;\r\n        defaultAccountingSetup.washoutInvoiceGainsCostTypeId = this.costTypeResult.washoutInvoiceGainsCostTypeId;\r\n        defaultAccountingSetup.washoutInvoiceLossCostTypeId = this.costTypeResult.washoutInvoiceLossCostTypeId;\r\n        defaultAccountingSetup.fxRevalCostTypeId = this.costTypeResult.fxRevalCostTypeId;\r\n        defaultAccountingSetup.yepCostTypeId = this.costTypeResult.yepCostTypeId;\r\n        defaultAccountingSetup.cancellationGainCostTypeId = this.costTypeResult.cancellationGainCostTypeId;\r\n        defaultAccountingSetup.cancellationLossCostTypeId = this.costTypeResult.cancellationLossCostTypeId;\r\n        // Binding the nominal Account Values\r\n        defaultAccountingSetup.accountingSetupId = this.nominalAccountResult.accountingSetupId;\r\n        defaultAccountingSetup.defaultBankAccountId = this.nominalAccountResult.defaultBankAccountId;\r\n        defaultAccountingSetup.salesLedgerControlClientDebtorsId = this.nominalAccountResult.salesLedgerControlClientDebtorsId;\r\n        defaultAccountingSetup.purchaseLedgerControlClientCreditorsId = this.nominalAccountResult.purchaseLedgerControlClientCreditorsId;\r\n        defaultAccountingSetup.vatAccountInputsId = this.nominalAccountResult.vatAccountInputsId;\r\n        defaultAccountingSetup.vatAccountOutputsId = this.nominalAccountResult.vatAccountOutputsId;\r\n        defaultAccountingSetup.fxAccountGainId = this.nominalAccountResult.fxAccountGainId;\r\n        defaultAccountingSetup.fxAccountLossId = this.nominalAccountResult.fxAccountLossId;\r\n        defaultAccountingSetup.fxRevalaccountId = this.nominalAccountResult.fxRevalaccountId;\r\n        defaultAccountingSetup.realisedPhysicalsPayableId = this.nominalAccountResult.realisedPhysicalsPayableId;\r\n        defaultAccountingSetup.realisedPhysicalsReceivableId = this.nominalAccountResult.realisedPhysicalsReceivableId;\r\n        defaultAccountingSetup.suspenseAccountforWashoutSuspenseId = this.nominalAccountResult.suspenseAccountforWashoutSuspenseId;\r\n        defaultAccountingSetup.plClearanceYepAccountId = this.nominalAccountResult.plClearanceYepAccountId;\r\n        defaultAccountingSetup.balanceSheetClearanceYepAccountId = this.nominalAccountResult.balanceSheetClearanceYepAccountId;\r\n        defaultAccountingSetup.bsReserveYepAccountId = this.nominalAccountResult.bsReserveYepAccountId;\r\n        defaultAccountingSetup.yepDepartmentId = this.nominalAccountResult.yepDepartmentId;\r\n        return defaultAccountingSetup;\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: any, isEdit): CompanyConfigurationRecord {\r\n        this.isEdit = isEdit;\r\n        this.companyConfigurationRecord = companyConfigurationRecord;\r\n        this.formComponents.forEach((comp) => {\r\n            companyConfigurationRecord = comp.initForm(companyConfigurationRecord, isEdit);\r\n        });\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    onMainAccountingTabCliked() {\r\n        this.hideDefaultAccountSideNav = true;\r\n        this.hideMainAccountSideNav = false;\r\n        this.mainAccountingComponent.loadAccountingMandatoryFieldSetUpEditor();\r\n        this.isSideNavOpened.emit(true);\r\n        this.mainAccountingSideNav.open();\r\n    }\r\n\r\n    onDefaultAccountingTabCliked() {\r\n        this.hideDefaultAccountSideNav = false;\r\n        this.hideMainAccountSideNav = true;\r\n        this.defaultAccountComponent.loadDefaultAccountFieldSetUpEditor();\r\n        this.isSideNavOpened.emit(true);\r\n        this.defaultAccountingSideNav.open();\r\n    }\r\n\r\n    onDefaultCostTypeTabCliked() {\r\n        this.defaultCostTypeComponent.loadDefaultCostTypeFieldSetUpEditor();\r\n        this.isSideNavOpened.emit(true);\r\n        this.defaultCostTypeSideNav.open();\r\n    }\r\n\r\n    onOthersTabCliked() {\r\n        this.hideOthersSideNav = false;\r\n        this.isSideNavOpened.emit(true);\r\n        this.othersSideNav.open();\r\n    }\r\n\r\n    onDiscardButtonClicked(value) {\r\n        if (this.isEdit) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Discard Changes',\r\n                    text: 'You have some modification pending. Close and lose changes?',\r\n                    okButton: 'Ok',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.closeSideNavs(value.selectedOptionName);\r\n                }\r\n            });\r\n        } else {\r\n            this.closeSideNavs(value.selectedOptionName);\r\n        }\r\n        this.isSideNavOpened.emit(false);\r\n    }\r\n\r\n    closeSideNavs(selectedOptionName: string) {\r\n        if (selectedOptionName === this.mainAccountingSetupComponent) {\r\n            this.mainAccountingSideNav.close();\r\n        }\r\n        if (selectedOptionName === this.defaultAccountSetupComponent) {\r\n            this.defaultAccountingSideNav.close();\r\n        }\r\n        if (selectedOptionName === this.defaultCostTypeSetupComponent) {\r\n            this.defaultCostTypeSideNav.close();\r\n        }\r\n        if (selectedOptionName === this.othersTypeComponent) {\r\n            this.othersSideNav.close();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <h2>\\r\\n        Default Accounting\\r\\n    </h2>\\r\\n    <div ag-grid=\\\"defaultAccountingGridOptions\\\">\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"defaultAccountRowData\\\"\\r\\n                         [columnDefs]=\\\"defaultAccountColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n    <mat-divider></mat-divider>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"ag-grid-angular.ag-theme-material {\\n  margin: 16px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridContextualSearchComponent } from '../../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AccountingSetupFields } from '../../../../../../shared/entities/accounting-setup-fields.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { DefaultAccountingSetupResult } from '../../../../../../shared/entities/default-accounting-setup-result.entity';\r\nimport { DefaultAccountingSetup } from '../../../../../../shared/entities/default-accounting-setup.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { NominalAccount } from '../../../../../../shared/entities/nominal-account.entity';\r\nimport { AccountingFields } from '../../../../../../shared/enums/accounting-fields.enum';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-default-account',\r\n    templateUrl: './default-account.component.html',\r\n    styleUrls: ['./default-account.component.scss'],\r\n})\r\nexport class DefaultAccountComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    addNewLineCtrl = new AtlasFormControl('');\r\n    defaultAccountColumnDefs: agGrid.ColDef[];\r\n    defaultAccountingGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    checkEdit: boolean = false;\r\n    defaultBankId: string = 'defaultBankAccountId';\r\n    dealId: string = 'dealId';\r\n    settlementId: string = 'settlementId';\r\n    nominalAccountSetupData: AccountingSetupFields[];\r\n    defaultAccountRowData: AccountingSetupFields[];\r\n    defaultAccountingSetup: DefaultAccountingSetup;\r\n    accountingSetupResult: DefaultAccountingSetupResult;\r\n    filteredNominalAccountList: NominalAccount[];\r\n    filteredNominalAccountList1: NominalAccount[];\r\n    nominalAccountList: NominalAccount[];\r\n    masterdata: MasterData;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    isCreate: boolean;\r\n    accountingSetupId: number;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        public gridService: AgGridService,\r\n        private snackbarService: SnackbarService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.isCreate = false;\r\n        this.filteredNominalAccountList = this.masterdata.nominalAccounts.map(\r\n            (nominal) => {\r\n                nominal.accountNumber = nominal.accountNumber;\r\n                nominal.mainAccountTitle = nominal.shortDescription;\r\n                return nominal;\r\n            });\r\n        this.filteredNominalAccountList1 = this.filteredNominalAccountList.filter((x) => x.bankAccount === true);\r\n        if (!this.companyId) {\r\n            this.isCreate = true;\r\n            this.checkEdit = true;\r\n            this.getNominalAccountFields();\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.defaultAccountingSetup = companyConfigurationRecord.defaultAccountingSetup;\r\n        this.accountingSetupId = this.defaultAccountingSetup.accountingSetupId;\r\n        this.getNominalAccountFields();\r\n        this.checkEdit = isEdit;\r\n        this.initializeGridColumns();\r\n        this.defaultAccountRowData = this.nominalAccountSetupData;\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.defaultAccountColumnDefs;\r\n        this.defaultAccountingGridOptions = params;\r\n        this.gridApi = this.defaultAccountingGridOptions.api;\r\n        this.gridColumnApi = this.defaultAccountingGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    loadDefaultAccountFieldSetUpEditor() {\r\n        const defaultAccountDataList = this.nominalAccountSetupData;\r\n        this.defaultAccountRowData = [];\r\n        this.defaultAccountRowData = defaultAccountDataList.map((filter) => {\r\n            return {\r\n                id: filter.id,\r\n                label: filter.label,\r\n                value: filter.value,\r\n                result: filter.result,\r\n            };\r\n        });\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'DefaultAccountComponent' });\r\n    }\r\n\r\n    getNominalAccountFields() {\r\n        this.nominalAccountSetupData = [];\r\n        this.nominalAccountSetupData.push(\r\n            {\r\n                id: 'defaultBankAccountId',\r\n                label: 'Default Bank Account',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.defaultBankAccount : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'salesLedgerControlClientDebtorsId',\r\n                label: 'Sales Ledger Control/Client Debtors',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.salesLedgerControlClientDebtors : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'purchaseLedgerControlClientCreditorsId',\r\n                label: 'Purchase Ledger Control/Client Debtors',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.purchaseLedgerControlClientCreditors : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'vatAccountInputs',\r\n                label: 'VAT Account Inputs',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.vatAccountInputs : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'vatAccountOutputs',\r\n                label: 'VAT Account Outputs',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.vatAccountOutputs : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'fxRevalaccountId',\r\n                label: 'FX Reval Account',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.fxRevalaccount : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'fxAccountGain',\r\n                label: 'FX P&L accounts Gains',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.fxAccountGain : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'fxAccountLoss',\r\n                label: 'FX P&L accounts Loss',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.fxAccountLoss : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'suspenseAccountforWashoutSuspenseId',\r\n                label: 'Washout Suspense Account',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.suspenseAccountforWashoutSuspense : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'realisedPhysicalsPayableId',\r\n                label: 'Realised Physicals Payable',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.realisedPhysicalsPayable : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'realisedPhysicalsReceivableId',\r\n                label: 'Realised Physicals Receivable',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.realisedPhysicalsReceivable : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'plClearanceYepAccountId',\r\n                label: 'Nominal Account for P&L Clearance',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.plClearanceYepAccount : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'balanceSheetClearanceYepAccountId',\r\n                label: 'Nominal Account for Balance Sheet Clearance',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.balanceSheetClearanceYepAccount : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'bsReserveYepAccountId',\r\n                label: 'B/S Reserve Account for YEP',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.bsReserveYepAccount : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'dealId',\r\n                label: 'Nominal Account Deal',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.dealNominalAccount : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'settlementId',\r\n                label: 'Nominal Account Settlement',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.settlementNominalAccount : null,\r\n                result: null,\r\n            },\r\n        );\r\n        this.nominalAccountSetupData = this.nominalAccountSetupData.map((filter) => {\r\n            const nominalAccount = this.masterdata.nominalAccounts.find((e) => e.accountNumber === (filter.value));\r\n            return {\r\n                id: filter.id,\r\n                label: filter.label,\r\n                value: filter.value,\r\n                result: (nominalAccount) ? nominalAccount.nominalAccountId : null,\r\n            };\r\n        });\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.defaultAccountColumnDefs = [\r\n            {\r\n                headerName: 'Nominated Accounts',\r\n                colId: 'label',\r\n                field: 'label',\r\n            },\r\n            {\r\n                headerName: 'id',\r\n                colId: 'id',\r\n                field: 'id',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Nominal Account',\r\n                colId: 'value',\r\n                field: 'value',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.checkEdit,\r\n                        },\r\n                        gridId: 'nominalAccountsGrid',\r\n                        options: this.nominalAccountList = params.data.id === this.defaultBankId\r\n                            || params.data.id === this.dealId\r\n                            || params.data.id === this.settlementId ?\r\n                            this.filteredNominalAccountList1 : this.filteredNominalAccountList,\r\n                        displayProperty: 'accountNumber',\r\n                        codeProperty: 'accountNumber',\r\n                        descriptionProperty: 'detailedDescription',\r\n                        valueProperty: 'accountNumber',\r\n                        lightBoxTitle: 'Results for Nominal Accounts',\r\n                        showContextualSearchIcon: this.checkEdit,\r\n                        isRequired: true,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.node.data.value && params.node.data.value !== params.value) {\r\n                        const nominalAccount = this.masterdata.nominalAccounts.find((a) =>\r\n                            a.accountNumber === params.node.data.value);\r\n                        if (nominalAccount) {\r\n                            params.node.setDataValue('accountTitle', nominalAccount.detailedDescription);\r\n                            params.node.setDataValue('result', nominalAccount.nominalAccountId);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'result',\r\n                colId: 'result',\r\n                field: 'result',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Detail Account Title',\r\n                colId: 'accountTitle',\r\n                field: 'accountTitle',\r\n                cellRenderer: this.accountTitleFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (!(rowData.data.value && rowData.data.label)) {\r\n                isValid = false;\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n\r\n    accountTitleFormatter(params) {\r\n        if (params.node.data.value) {\r\n            const selectedAccount = this.masterdata.nominalAccounts.find((account) =>\r\n                account.accountNumber === params.node.data.value);\r\n            params.node.data.accountTitle = (selectedAccount ? selectedAccount.detailedDescription : '');\r\n        }\r\n        return params.node.data.accountTitle;\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (!this.validate()) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Default Account GridData is invalid. Please resolve the errors',\r\n            );\r\n            return;\r\n        }\r\n        this.nominalAccountSetupData = [];\r\n        this.gridApi.forEachNode((rowdata) => {\r\n            const nominalAccountData = new AccountingSetupFields();\r\n            nominalAccountData.id = rowdata.data.id;\r\n            nominalAccountData.label = rowdata.data.label;\r\n            nominalAccountData.value = rowdata.data.value;\r\n            nominalAccountData.result = rowdata.data.result;\r\n            this.nominalAccountSetupData.push(nominalAccountData);\r\n        });\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    getNominalAccountValuesForSave(): DefaultAccountingSetupResult {\r\n        const defaultBankAccount = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.DefaultBankAccountId);\r\n        const salesLedgerContrl = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.SalesLedgerControlClientDebtorsId);\r\n        const purchaseLedgerContrl = this.nominalAccountSetupData.find(\r\n            (e) => e.id === AccountingFields.PurchaseLedgerControlClientCreditorsId);\r\n        const vatInput = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.VATAccountInputs);\r\n        const vatOutput = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.VATAccountOutputs);\r\n        const fxRevalAccount = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.FXRevalaccountId);\r\n        const fxAccountGain = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.FXAccountGain);\r\n        const fxAccountLoss = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.FXAccountLoss);\r\n        const suspenceWashoutAccount = this.nominalAccountSetupData.find(\r\n            (e) => e.id === AccountingFields.SuspenseAccountforWashoutSuspenseId);\r\n        const realizedPayable = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.RealisedPhysicalsPayableId);\r\n        const realizedReceivable = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.RealisedPhysicalsReceivableId);\r\n        const nominalAccountPLClearance = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.PLClearanceYepAccountId);\r\n        const nominalAccountBalanceSheet = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.BalanceSheetClearanceYepAccountId);\r\n        const nominalAccountBSReserveAccount = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.BSReserveYepAccountId);\r\n        const deal = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.DealId);\r\n        const settlement = this.nominalAccountSetupData.find((e) => e.id === AccountingFields.SettlementId);\r\n\r\n        this.accountingSetupResult = new DefaultAccountingSetupResult();\r\n        this.accountingSetupResult.defaultBankAccountId = (defaultBankAccount) ? defaultBankAccount.result : null;\r\n        this.accountingSetupResult.salesLedgerControlClientDebtorsId = (salesLedgerContrl) ? salesLedgerContrl.result : null;\r\n        this.accountingSetupResult.purchaseLedgerControlClientCreditorsId = (purchaseLedgerContrl) ? purchaseLedgerContrl.result : null;\r\n        this.accountingSetupResult.vatAccountInputsId = (vatInput) ? vatInput.result : null;\r\n        this.accountingSetupResult.vatAccountOutputsId = (vatOutput) ? vatOutput.result : null;\r\n        this.accountingSetupResult.fxRevalaccountId = (fxRevalAccount) ? fxRevalAccount.result : null;\r\n        this.accountingSetupResult.fxAccountGainId = (fxAccountGain) ? fxAccountGain.result : null;\r\n        this.accountingSetupResult.fxAccountLossId = (fxAccountLoss) ? fxAccountLoss.result : null;\r\n        this.accountingSetupResult.suspenseAccountforWashoutSuspenseId = (suspenceWashoutAccount) ? suspenceWashoutAccount.result : null;\r\n        this.accountingSetupResult.realisedPhysicalsPayableId = (realizedPayable) ? realizedPayable.result : null;\r\n        this.accountingSetupResult.realisedPhysicalsReceivableId = (realizedReceivable) ? realizedReceivable.result : null;\r\n        this.accountingSetupResult.plClearanceYepAccountId = (nominalAccountPLClearance) ? nominalAccountPLClearance.result : null;\r\n        this.accountingSetupResult.balanceSheetClearanceYepAccountId = (nominalAccountBalanceSheet) ? nominalAccountBalanceSheet.result : null;\r\n        this.accountingSetupResult.bsReserveYepAccountId = (nominalAccountBSReserveAccount) ? nominalAccountBSReserveAccount.result : null;\r\n\r\n        this.accountingSetupResult.dealNominalAccountId = (deal) ? deal.result : null;\r\n        this.accountingSetupResult.settlementNominalAccountId = (settlement) ? settlement.result : null;\r\n        return this.accountingSetupResult;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        if (this.nominalAccountSetupData && this.nominalAccountSetupData.length > 0) {\r\n            this.getNominalAccountValuesForSave();\r\n            companyConfiguration.defaultAccountingSetup = this.accountingSetupResult;\r\n            companyConfiguration.defaultAccountingSetup.accountingSetupId = this.accountingSetupId ? this.accountingSetupId : null;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <h2>\\r\\n        Default Cost Type\\r\\n    </h2>\\r\\n\\r\\n    <div ag-grid=\\\"defaultCostTypeGridOptions\\\">\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"defaultCostTypeRowData\\\"\\r\\n                         [columnDefs]=\\\"defaultCostTypeColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            Save\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"ag-grid-angular.ag-theme-material {\\n  margin: 16px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridContextualSearchComponent } from '../../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AccountingSetupFields } from '../../../../../../shared/entities/accounting-setup-fields.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { DefaultAccountingSetupResult } from '../../../../../../shared/entities/default-accounting-setup-result.entity';\r\nimport { DefaultAccountingSetup } from '../../../../../../shared/entities/default-accounting-setup.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { AccountingFields } from '../../../../../../shared/enums/accounting-fields.enum';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-default-cost-type',\r\n    templateUrl: './default-cost-type.component.html',\r\n    styleUrls: ['./default-cost-type.component.scss'],\r\n})\r\nexport class DefaultCostTypeComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    defaultCostTypeColumnDefs: agGrid.ColDef[];\r\n    defaultCostTypeGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    checkEdit: boolean = false;\r\n    defaultCostTypeRowData: AccountingSetupFields[] = [];\r\n    costTypeSetupData: AccountingSetupFields[];\r\n    defaultAccountingSetup: DefaultAccountingSetup;\r\n    accountingSetupResult: DefaultAccountingSetupResult;\r\n    masterdata: MasterData;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    isCreate: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        public gridService: AgGridService,\r\n        private snackbarService: SnackbarService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.isCreate = false;\r\n        if (!this.companyId) {\r\n            this.isCreate = true;\r\n            this.checkEdit = true;\r\n            this.getCostTypeFields();\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    getCostTypeFields() {\r\n        this.costTypeSetupData = [];\r\n        this.costTypeSetupData.push(\r\n            {\r\n                id: 'cashReceivedCostTypeId',\r\n                label: 'Cash Received',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.cashReceived : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'cashPaidCostTypeId',\r\n                label: 'Cash Paid',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.cashPaid : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'purchaseInvoiceCostTypeId',\r\n                label: 'Purchase Invoice',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.purchaseInvoice : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'salesInvoiceCostTypeId',\r\n                label: 'Sales Invoice',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.salesInvoice : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'washoutInvoiceGainsCostTypeId',\r\n                label: 'Washout Invoice (Gain)',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.washoutInvoiceGains : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'washoutInvoiceLossCostTypeId',\r\n                label: 'Washout Invoice (Loss)',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.washoutInvoiceLoss : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'fxRevalCostTypeId',\r\n                label: 'FX Real',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.fxReval : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'cancellationGainCostTypeId',\r\n                label: 'Cancellation (Gain)',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.cancellationGain : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'cancellationLossCostTypeId',\r\n                label: 'Cancellation (Loss)',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.cancellationLoss : null,\r\n                result: null,\r\n            },\r\n            {\r\n                id: 'yepCostTypeId',\r\n                label: 'Cost Type for YEP',\r\n                value: (!this.isCreate) ? this.defaultAccountingSetup.yepCostType : null,\r\n                result: null,\r\n            },\r\n        );\r\n        this.costTypeSetupData = this.costTypeSetupData.map((filter) => {\r\n            const costType = this.masterdata.costTypes.find((e) => e.costTypeCode === (filter.value));\r\n            return {\r\n                id: filter.id,\r\n                label: filter.label,\r\n                value: filter.value,\r\n                result: (costType) ? costType.costTypeId : null,\r\n            };\r\n        });\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.defaultAccountingSetup = companyConfigurationRecord.defaultAccountingSetup;\r\n        this.getCostTypeFields();\r\n        this.checkEdit = isEdit;\r\n        this.initializeGridColumns();\r\n        this.defaultCostTypeRowData = this.costTypeSetupData;\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.defaultCostTypeColumnDefs;\r\n        this.defaultCostTypeGridOptions = params;\r\n        this.gridApi = this.defaultCostTypeGridOptions.api;\r\n        this.gridColumnApi = this.defaultCostTypeGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.defaultCostTypeColumnDefs = [\r\n            {\r\n                headerName: 'Cost Type Field',\r\n                colId: 'label',\r\n                field: 'label',\r\n            },\r\n            {\r\n                headerName: 'id',\r\n                colId: 'id',\r\n                field: 'id',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Cost types',\r\n                colId: 'value',\r\n                field: 'value',\r\n                cellRendererFramework: AgGridContextualSearchComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        context: {\r\n                            componentParent: this,\r\n                            gridEditable: this.checkEdit,\r\n                        },\r\n                        gridId: 'costTypesGrid',\r\n                        options: this.masterdata.costTypes,\r\n                        displayProperty: 'costTypeCode',\r\n                        codeProperty: 'costTypeCode',\r\n                        descriptionProperty: 'name',\r\n                        valueProperty: 'costTypeCode',\r\n                        lightBoxTitle: 'Results for Cost',\r\n                        showContextualSearchIcon: this.checkEdit,\r\n                        isRequired: true,\r\n                    };\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.node.data.value && params.node.data.value !== params.value) {\r\n                        const costType = this.masterdata.costTypes.find((a) =>\r\n                            a.costTypeCode === params.node.data.value);\r\n                        if (costType) {\r\n                            params.node.setDataValue('costTypeName', costType.name);\r\n                            params.node.setDataValue('result', costType.costTypeId);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'result',\r\n                colId: 'result',\r\n                field: 'result',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Cost Type Name',\r\n                colId: 'costTypeName',\r\n                field: 'costTypeName',\r\n                cellRenderer: this.costTypeFormatter.bind(this),\r\n            },\r\n        ];\r\n    }\r\n\r\n    costTypeFormatter(params) {\r\n        if (params.node.data.value) {\r\n            const selectedCostType = this.masterdata.costTypes.find((costType) =>\r\n                costType.costTypeCode === params.node.data.value);\r\n            params.node.data.costTypeName = (selectedCostType ? selectedCostType.name : '');\r\n        }\r\n        return params.node.data.costTypeName;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'DefaultCostTypeComponent' });\r\n    }\r\n\r\n    loadDefaultCostTypeFieldSetUpEditor() {\r\n        const defaultCostType = this.costTypeSetupData;\r\n        this.defaultCostTypeRowData = [];\r\n        this.defaultCostTypeRowData = defaultCostType.map((filter) => {\r\n            return {\r\n                id: filter.id,\r\n                label: filter.label,\r\n                value: filter.value,\r\n                result: filter.result,\r\n            };\r\n        });\r\n        if (this.gridColumnApi) {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        }\r\n    }\r\n\r\n    validate(): boolean {\r\n        let isValid = true;\r\n        this.gridApi.forEachNode((rowData) => {\r\n            if (!(rowData.data.value && rowData.data.label)) {\r\n                isValid = false;\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (!this.validate()) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Default Costtype GridData is invalid. Please resolve the errors',\r\n            );\r\n            return;\r\n        }\r\n        this.costTypeSetupData = [];\r\n        this.gridApi.forEachNode((rowdata) => {\r\n            const costTypeData = new AccountingSetupFields();\r\n            costTypeData.id = rowdata.data.id;\r\n            costTypeData.label = rowdata.data.label;\r\n            costTypeData.value = rowdata.data.value;\r\n            const costType = this.masterdata.costTypes.find(\r\n                (e) => e.costTypeCode === (rowdata.data.value));\r\n            costTypeData.result = (costType) ? costType.costTypeId : null;\r\n            this.costTypeSetupData.push(costTypeData);\r\n        });\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    getCostTypeValuesForSave(): DefaultAccountingSetupResult {\r\n        const cashReceived = this.costTypeSetupData.find((e) => e.id === AccountingFields.CashReceivedCostTypeId);\r\n        const cashPaid = this.costTypeSetupData.find((e) => e.id === AccountingFields.CashPaidCostTypeId);\r\n        const purchaseInvoice = this.costTypeSetupData.find(\r\n            (e) => e.id === AccountingFields.PurchaseInvoiceCostTypeId);\r\n        const salesInvoice = this.costTypeSetupData.find((e) => e.id === AccountingFields.SalesInvoiceCostTypeId);\r\n        const washoutGain = this.costTypeSetupData.find((e) => e.id === AccountingFields.WashoutInvoiceGainsCostTypeId);\r\n        const washoutLoss = this.costTypeSetupData.find((e) => e.id === AccountingFields.WashoutInvoiceLossCostTypeId);\r\n        const fxReval = this.costTypeSetupData.find((e) => e.id === AccountingFields.FXRevalCostTypeId);\r\n        const yepCostType = this.costTypeSetupData.find((e) => e.id === AccountingFields.YepCostTypeId);\r\n        const cancellationGain = this.costTypeSetupData.find((e) => e.id === AccountingFields.CancellationGainCostTypeId);\r\n        const cancellationLoss = this.costTypeSetupData.find((e) => e.id === AccountingFields.CancellationLossCostTypeId);\r\n\r\n        this.accountingSetupResult = new DefaultAccountingSetupResult();\r\n        this.accountingSetupResult.cashReceivedCostTypeId = (cashReceived) ? cashReceived.result : null;\r\n        this.accountingSetupResult.cashPaidCostTypeId = (cashPaid) ? cashPaid.result : null;\r\n        this.accountingSetupResult.purchaseInvoiceCostTypeId = (purchaseInvoice) ? purchaseInvoice.result : null;\r\n        this.accountingSetupResult.salesInvoiceCostTypeId = (salesInvoice) ? salesInvoice.result : null;\r\n        this.accountingSetupResult.washoutInvoiceGainsCostTypeId = (washoutGain) ? washoutGain.result : null;\r\n        this.accountingSetupResult.washoutInvoiceLossCostTypeId = (washoutLoss) ? washoutLoss.result : null;\r\n        this.accountingSetupResult.fxRevalCostTypeId = (fxReval) ? fxReval.result : null;\r\n        this.accountingSetupResult.yepCostTypeId = (yepCostType) ? yepCostType.result : null;\r\n        this.accountingSetupResult.cancellationGainCostTypeId = (cancellationGain) ? cancellationGain.result : null;\r\n        this.accountingSetupResult.cancellationLossCostTypeId = (cancellationLoss) ? cancellationLoss.result : null;\r\n        return this.accountingSetupResult;\r\n\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        if (this.costTypeSetupData && this.costTypeSetupData.length > 0) {\r\n            this.getCostTypeValuesForSave();\r\n            companyConfiguration.defaultAccountingSetup = this.accountingSetupResult;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <h2>\\r\\n            Main Accounting\\r\\n        </h2>\\r\\n        <h2>\\r\\n            Authorize For Posting By Default\\r\\n            <mat-slide-toggle [formControl]=\\\"authorizeForPostingCtrl\\\"\\r\\n                              [disabled]=\\\"!checkEdit\\\">\\r\\n            </mat-slide-toggle>\\r\\n        </h2>\\r\\n    </div>\\r\\n\\r\\n    <div ag-grid=\\\"mandatoryAccountingGridOptions\\\">\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"mainAccountingRowData\\\"\\r\\n                         [columnDefs]=\\\"mandatoryColumnDefs\\\"\\r\\n                         [pinnedTopRowData]=\\\"pinnedTopRowData\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n    <mat-divider></mat-divider>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"ag-grid-angular.ag-theme-material {\\n  margin: 16px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridCheckboxComponent } from '../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AccountingFieldSetup } from '../../../../../../shared/entities/accounting-field-setup.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { MasterRowApplyComponent } from '../../../master-row-apply/master-row-apply.component';\r\n\r\n@Component({\r\n    selector: 'atlas-main-accounting',\r\n    templateUrl: './main-accounting.component.html',\r\n    styleUrls: ['./main-accounting.component.scss'],\r\n})\r\nexport class MainAccountingComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    authorizeForPostingCtrl = new AtlasFormControl('authorizeForPostingSelection');\r\n    mandatoryColumnDefs: agGrid.ColDef[];\r\n    agGridCols: agGrid.ColDef[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    mandatoryAccountingGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    columnDefs: agGrid.ColDef[];\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    masterdata: MasterData;\r\n    checkEdit: boolean = false;\r\n    company: string;\r\n    mainAccountingData: AccountingFieldSetup[] = [];\r\n    mainAccountingRowData: AccountingFieldSetup[];\r\n    pinnedTopRowData: any;\r\n    columnName: string;\r\n    masterEditField: string = 'Master Row';\r\n    gridContext = {\r\n        gridEditable: true,\r\n        componentParent: this,\r\n    };\r\n    gridComponents = {\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    currentCompany: string;\r\n    companyId: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        public gridService: AgGridService,\r\n        protected configurationService: ConfigurationService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        if (!this.companyId) {\r\n            this.authorizeForPostingCtrl.setValue(false);\r\n            this.checkEdit = true;\r\n            this.getMainAccountingSetup();\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    getMainAccountingSetup() {\r\n        this.configurationService.getMainAccountingSetup()\r\n            .subscribe((mainAccountingData: AccountingFieldSetup[]) => {\r\n                if (mainAccountingData && mainAccountingData.length > 0) {\r\n                    this.mainAccountingData = mainAccountingData;\r\n                }\r\n            });\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.authorizeForPostingCtrl.setValue(companyConfigurationRecord.invoiceSetup.authorizedForPosting);\r\n        this.mainAccountingData = companyConfigurationRecord.mainAccountingSetup;\r\n        this.checkEdit = isEdit;\r\n        this.initializeGridColumns();\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.mandatoryColumnDefs;\r\n        this.columnDefs = params.columnDefs;\r\n        this.mandatoryAccountingGridOptions = params;\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    loadAccountingMandatoryFieldSetUpEditor() {\r\n        const mandatoryDataList = this.mainAccountingData;\r\n        this.mainAccountingRowData = mandatoryDataList.map((filter) => {\r\n            return {\r\n                mainAccountingSetupId: filter.mainAccountingSetupId,\r\n                tableId: filter.tableId,\r\n                fieldId: filter.fieldId,\r\n                fieldName: filter.fieldName,\r\n                friendlyName: filter.friendlyName,\r\n                isMandatory: filter.isMandatory,\r\n                isEditable: filter.isEditable,\r\n            };\r\n        });\r\n        if (this.gridApi) {\r\n            if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.mandatoryAccountingGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.mandatoryColumnDefs = [\r\n            {\r\n                headerName: 'mainAccountingSetupId',\r\n                colId: 'mainAccountingSetupId',\r\n                field: 'mainAccountingSetupId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'tableId',\r\n                colId: 'tableId',\r\n                field: 'tableId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'fieldId',\r\n                colId: 'fieldId',\r\n                field: 'fieldId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Field Name',\r\n                colId: 'fieldName',\r\n                field: 'fieldName',\r\n                hide: true,\r\n                pinnedRowCellRendererFramework: MasterRowApplyComponent,\r\n            },\r\n            {\r\n                headerName: 'Friendly Name',\r\n                colId: 'friendlyName',\r\n                field: 'friendlyName',\r\n                width: 75,\r\n                cellClass: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return 'pinnedRow';\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Mandatory',\r\n                colId: 'isMandatory',\r\n                field: 'isMandatory',\r\n                width: 50,\r\n                pinnedRowCellRendererFramework: AgGridCheckboxComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    disabled: !this.checkEdit,\r\n                },\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        disabled: (params.data.isMandatory === null) || !this.checkEdit,\r\n                    };\r\n                },\r\n                cellClass: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return 'pinnedRow';\r\n                    }\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        this.updateAllRowAsMandatory(params.data);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Editable',\r\n                colId: 'isEditable',\r\n                field: 'isEditable',\r\n                width: 50,\r\n                pinnedRowCellRendererFramework: AgGridCheckboxComponent,\r\n                pinnedRowCellRendererParams: {\r\n                    disabled: !this.checkEdit,\r\n                },\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        disabled: (params.data.isEditable === null) || !this.checkEdit,\r\n                    };\r\n                },\r\n                cellClass: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        return 'pinnedRow';\r\n                    }\r\n                },\r\n                onCellValueChanged: (params) => {\r\n                    if (params.node.rowPinned) {\r\n                        this.updateAllRowAsEditable(params.data);\r\n                    }\r\n                },\r\n            },\r\n        ];\r\n        this.pinnedTopRowData = this.getPinnedTopData();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'MainAccountingComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.mainAccountingData = [];\r\n        this.gridApi.forEachNode((rowdata: agGrid.RowNode) => {\r\n            const mandatoryFieldSetUpRow = new AccountingFieldSetup();\r\n            mandatoryFieldSetUpRow.tableId = rowdata.data.tableId;\r\n            mandatoryFieldSetUpRow.mainAccountingSetupId = rowdata.data.mainAccountingSetupId;\r\n            mandatoryFieldSetUpRow.fieldId = rowdata.data.fieldId;\r\n            mandatoryFieldSetUpRow.fieldName = rowdata.data.fieldName;\r\n            mandatoryFieldSetUpRow.friendlyName = rowdata.data.friendlyName;\r\n            mandatoryFieldSetUpRow.isMandatory = rowdata.data.isMandatory;\r\n            mandatoryFieldSetUpRow.isEditable = rowdata.data.isEditable;\r\n            this.mainAccountingData.push(mandatoryFieldSetUpRow);\r\n        });\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        if (this.mainAccountingData && this.mainAccountingData.length > 0) {\r\n            companyConfiguration.mainAccountingFieldSetup = this.mainAccountingData;\r\n        }\r\n        companyConfiguration.invoiceSetup.authorizedForPosting = this.authorizeForPostingCtrl.value;\r\n        return companyConfiguration;\r\n    }\r\n\r\n    getPinnedTopData() {\r\n        return [\r\n            {\r\n                mainAccountingSetupId: '',\r\n                tableId: '',\r\n                fieldId: '',\r\n                fieldName: '',\r\n                friendlyName: 'Master Row',\r\n                isMandatory: '',\r\n                isEditable: '',\r\n            },\r\n        ];\r\n    }\r\n\r\n    updateAllRowAsMandatory(rowData) {\r\n        this.mandatoryColumnDefs.forEach((x) => {\r\n            this.columnName = x.field;\r\n            if (this.columnName === 'isMandatory') {\r\n                if (rowData[this.columnName] !== this.masterEditField) {\r\n                    this.gridApi.forEachNode((rowNode) => {\r\n                        if (rowNode.data.isMandatory !== null) {\r\n                            rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                        }\r\n                    });\r\n                }\r\n                this.gridColumnApi.resetColumnState();\r\n                this.gridColumnApi.autoSizeAllColumns();\r\n            }\r\n        });\r\n    }\r\n\r\n    updateAllRowAsEditable(rowData) {\r\n        this.mandatoryColumnDefs.forEach((x) => {\r\n            this.columnName = x.field;\r\n            if (this.columnName === 'isEditable') {\r\n                if (rowData[this.columnName] !== this.masterEditField) {\r\n                    this.gridApi.forEachNode((rowNode) => {\r\n                        if (rowNode.data.isEditable !== null) {\r\n                            rowNode.setDataValue(this.columnName, rowData[this.columnName]);\r\n                        }\r\n                    });\r\n                }\r\n                this.gridColumnApi.resetColumnState();\r\n                this.gridColumnApi.autoSizeAllColumns();\r\n            }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card class=\\\"shipment-details\\\">\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h2>Default Department</h2>\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     fxFlex=\\\"35%\\\">\\r\\n                    <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                             isEditable=\\\"true\\\"\\r\\n                                                             [fieldControl]=\\\"deptCntrl\\\"\\r\\n                                                             [options]=\\\"filteredDepartments\\\"\\r\\n                                                             label=\\\"Department\\\"\\r\\n                                                             displayProperty=\\\"description\\\"\\r\\n                                                             [errorMap]=\\\"departmentErrorMap\\\"\\r\\n                                                             [selectProperties]=\\\"['departmentCode','description']\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for Department\\\"\\r\\n                                                             gridId=\\\"departmentsGrid\\\">\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            Save\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { DefaultAccountingSetup } from '../../../../../../shared/entities/default-accounting-setup.entity';\r\nimport { Department } from '../../../../../../shared/entities/department.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-others',\r\n    templateUrl: './others.component.html',\r\n    styleUrls: ['./others.component.scss'],\r\n})\r\nexport class OthersComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    filteredDepartments: Department[];\r\n    defaultAccountingSetup: DefaultAccountingSetup;\r\n    masterdata: any;\r\n    checkEdit: boolean = false;\r\n    isCreate: boolean;\r\n    companyId: string;\r\n    deptCntrl = new AtlasFormControl('deptCntrl');\r\n    departmentErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected route: ActivatedRoute, protected utilService: UtilService ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.isCreate = false;\r\n        if (!this.companyId) {\r\n            this.isCreate = true;\r\n            this.checkEdit = true;\r\n        }\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredDepartments = this.masterdata.departments;\r\n        this.deptCntrl.valueChanges.subscribe((input) => {\r\n            this.filteredDepartments =\r\n                this.utilService.filterListforAutocomplete(\r\n                    input,\r\n                    this.masterdata.departments,\r\n                    ['departmentCode', 'description']);\r\n        });\r\n\r\n        this.setValidators();\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.defaultAccountingSetup = companyConfigurationRecord.defaultAccountingSetup;\r\n        this.deptCntrl.patchValue(companyConfigurationRecord.defaultAccountingSetup.yepDepartment);\r\n        this.checkEdit = isEdit;\r\n        return companyConfigurationRecord;\r\n    }\r\n    onSaveButtonClicked() {\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'OthersComponent' });\r\n    }\r\n\r\n    setValidators() {\r\n        this.deptCntrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.departments,\r\n                    nameof<Department>('description'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        if (this.deptCntrl.value) {\r\n        companyConfiguration.defaultAccountingSetup.yepDepartmentId = this.getDepartmentIdFromCode(this.deptCntrl.value.description);\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n\r\n    getDepartmentIdFromCode(departmentCode: string): number {\r\n        const selectedDepartment = this.masterdata.departments.find(\r\n            (department) => department.description === departmentCode,\r\n        );\r\n        if (selectedDepartment) {\r\n            return selectedDepartment.departmentId;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-sidenav-container>\\r\\n    <mat-sidenav-content>\\r\\n        <form [formGroup]=\\\"companyConfigurationFormGroup\\\">\\r\\n            <atlas-header-form #companyConfigurationHeader></atlas-header-form>\\r\\n            <atlas-company-menu-bar *ngIf=\\\"isMenuBarVisible\\\"\\r\\n                                    #companyManagementMenuBarComponent>\\r\\n            </atlas-company-menu-bar>\\r\\n            <atlas-floating-action-button *ngIf=\\\"!sideNavState\\\"\\r\\n                                          [fabTitle]=\\\"fabTitle\\\"\\r\\n                                          [fabType]=\\\"fabType\\\"\\r\\n                                          [fabActions]=\\\"fabMenuActions\\\"\\r\\n                                          [isParentLoaded]=\\\"!isLoading\\\"\\r\\n                                          [fabActionsDisabled]=\\\"isSaveInProgress\\\"\\r\\n                                          (fabActionClicked)=\\\"onFabActionClicked($event)\\\">\\r\\n            </atlas-floating-action-button>\\r\\n\\r\\n            <div class=\\\"main-container\\\">\\r\\n                <div *ngIf=\\\"isSaveInProgress\\\">\\r\\n                    <mat-card>\\r\\n                        <h2>Loading</h2>\\r\\n                        <div class=\\\"custom-line-title\\\"></div>\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"center center\\\"\\r\\n                             fxLayoutWrap\\r\\n                             fxLayoutGap=\\\"20px\\\">\\r\\n                            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n                        </div>\\r\\n                    </mat-card>\\r\\n                </div>\\r\\n                <main>\\r\\n                    <mat-tab-group dynamicHeight\\r\\n                                   (selectedTabChange)=\\\"getPosition($event)\\\"\\r\\n                                   [(selectedIndex)]=selectedTab\\r\\n                                   class=\\\"bright-tab\\\">\\r\\n                        <mat-tab label=\\\"MAIN\\\">\\r\\n                            <atlas-company-management-main-tab #companyManagementMainTabComponent>\\r\\n                            </atlas-company-management-main-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"PHYSICALS\\\">\\r\\n                            <atlas-physicals-tab #physicalsTabComponent\\r\\n                                                 (isSideNavOpened)=\\\"isSideNavOpened($event)\\\">\\r\\n                            </atlas-physicals-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"INVOICING\\\">\\r\\n                            <atlas-invoice-tab #invoiceTabComponent>\\r\\n                            </atlas-invoice-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"TAX\\\">\\r\\n                            <atlas-tax-tab #taxTabComponent>\\r\\n                            </atlas-tax-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"ACCOUNTING\\\">\\r\\n                            <atlas-accounting-tab #accountingTabComponent\\r\\n                                                  (isSideNavOpened)=\\\"isSideNavOpened($event)\\\">\\r\\n                            </atlas-accounting-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"IT PARAMETERS\\\">\\r\\n                            <atlas-itparameters-tab #itparametersTabComponent>\\r\\n                            </atlas-itparameters-tab>\\r\\n                        </mat-tab>\\r\\n                        <mat-tab label=\\\"INTERFACES\\\">\\r\\n                            <atlas-interface-tab #interfaceTabComponent\\r\\n                                                 (isSideNavOpened)=\\\"isSideNavOpened($event)\\\">\\r\\n                            </atlas-interface-tab>\\r\\n                        </mat-tab>\\r\\n                    </mat-tab-group>\\r\\n                </main>\\r\\n            </div>\\r\\n        </form>\\r\\n    </mat-sidenav-content>\\r\\n</mat-sidenav-container>\\r\\n\"","module.exports = \".menu-bar .menu-bar-action-icon {\\n  margin-right: -393%; }\\n\"","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Subject, Subscription, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport { CompanyTabIndex } from '../../../../admin/entities/company-tab-index';\r\nimport { AdminActionsService } from '../../../../admin/services/admin-actions.service';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FABType } from '../../../../shared/components/floating-action-button/floating-action-button-type.enum';\r\nimport { InvoiceSetupResult } from '../../../../shared/dtos/invoice-setup-result';\r\nimport { AccountingFieldSetup } from '../../../../shared/entities/accounting-field-setup.entity';\r\nimport { AllocationSetUp } from '../../../../shared/entities/allocation-set-up-entity';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../shared/entities/company-configuration.entity';\r\nimport { CompanySetup } from '../../../../shared/entities/company-setup.entity';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { Counterparty } from '../../../../shared/entities/counterparty.entity';\r\nimport { FloatingActionButtonActions } from '../../../../shared/entities/floating-action-buttons-actions.entity';\r\nimport { InvoiceSetup } from '../../../../shared/entities/invoice-Setup.entity';\r\nimport { MandatoryTradeApprovalImageSetup } from '../../../../shared/entities/mandatory-trade-fields';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { RetentionPolicy } from '../../../../shared/entities/retention-policy.entity';\r\nimport { TradeConfiguration } from '../../../../shared/entities/trade-configuration-entity';\r\nimport { Freeze } from '../../../../shared/enums/freeze.enum';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { UserCompanyPrivilegeDto } from '../../../../shared/services/authorization/dtos/user-company-privilege';\r\nimport { CompanyConfigurationRecord } from '../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { IntercoNoIntercoEmails } from '../../../../shared/services/configuration/dtos/interco-no-interco-emails';\r\nimport { InterfaceSetup } from '../../../../shared/services/execution/dtos/interface-setup';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { AccountingTabComponent } from './accounting-tab/accounting-tab.component';\r\nimport { CompanyMenuBarComponent } from './company-menu-bar/company-menu-bar.component';\r\nimport { HeaderFormComponent } from './header-form/header-form.component';\r\nimport { InterfaceTabComponent } from './interface-tab/interface-tab.component';\r\nimport { InvoiceTabComponent } from './invoice-tab/invoice-tab.component';\r\nimport { ItparametersTabComponent } from './itparamters-tab/itparameters-tab.component';\r\nimport { CompanyManagementMainTabComponent } from './main-tab/company-management-main-tab.component';\r\nimport { DefaultBrokerComponent } from './main-tab/default-broker/default-broker.component';\r\nimport { PhysicalsTabComponent } from './physicals-tab/physicals-tab.component';\r\nimport { TaxTabComponent } from './tax-tab/tax-tab.component';\r\n\r\n@Component({\r\n    selector: 'atlas-company-management',\r\n    templateUrl: './company-management.component.html',\r\n    styleUrls: ['./company-management.component.scss'],\r\n})\r\nexport class CompanyManagementComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('companyManagementMainTabComponent') companyManagementMainTabComponent: CompanyManagementMainTabComponent;\r\n    @ViewChild('physicalsTabComponent') physicalsTabComponent: PhysicalsTabComponent;\r\n    @ViewChild('invoiceTabComponent') invoiceTabComponent: InvoiceTabComponent;\r\n    @ViewChild('taxTabComponent') taxTabComponent: TaxTabComponent;\r\n    @ViewChild('accountingTabComponent') accountingTabComponent: AccountingTabComponent;\r\n    @ViewChild('interfaceTabComponent') interfaceTabComponent: InterfaceTabComponent;\r\n    @ViewChild('itparametersTabComponent') itparametersTabComponent: ItparametersTabComponent;\r\n    @ViewChild('companyConfigurationHeader') companyConfigurationHeader: HeaderFormComponent;\r\n    @ViewChild('companyManagementMenuBarComponent') companyManagementMenuBarComponent: CompanyMenuBarComponent;\r\n    @ViewChild('defaultBrokerComponent') defaultBrokerComponent: DefaultBrokerComponent;\r\n\r\n    companyFriendlyCodeCtrl = new AtlasFormControl('CompanyFriendlyCode');\r\n    companyNameCtrl = new AtlasFormControl('CompanyName');\r\n    companyClientCodeCtrl = new AtlasFormControl('CompanyClientCode');\r\n    public selectedTab: number = 0;\r\n    model: CompanyConfiguration;\r\n    subscription: Subscription[] = [];\r\n    company: string;\r\n    currentCompany: string;\r\n    isCopy: boolean = false;\r\n    isEdit: boolean = false;\r\n    isDeleteBtnDisabled: boolean = true;\r\n    companyId: string;\r\n    isFrozen: boolean;\r\n    isCompanyIdRequired: boolean = false;\r\n    offsetLeft: number;\r\n    frozenStatus: boolean;\r\n    companyConfigurationFormGroup: FormGroup;\r\n    destroy$ = new Subject();\r\n    filteredCounterparties: Counterparty[];\r\n    formComponents: BaseFormComponent[] = [];\r\n    masterData: MasterData;\r\n    companySetupMainInformation: CompanySetup;\r\n    companySetupPhysicals: CompanySetup;\r\n    companyConfigurationRecord: CompanyConfigurationRecord;\r\n    companySetup: Company[] = [];\r\n    invoiceSetup: InvoiceSetupResult;\r\n    interfaceSetup: InterfaceSetup;\r\n    tradeSetupData: TradeConfiguration;\r\n    intercoNoIntercoEmailSetupData: IntercoNoIntercoEmails[] = [];\r\n    createCompany: boolean = false;\r\n    copyCompany: boolean = false;\r\n    isUnique: boolean = true;\r\n    allocationSetup: AllocationSetUp[] = [];\r\n    PermissionLevels = PermissionLevels;\r\n    fabTitle: string;\r\n    fabType: FABType;\r\n    isLoading = true;\r\n    editCompanyActionPrivilege: UserCompanyPrivilegeDto = {\r\n        profileId: null,\r\n        privilegeName: 'CompanyConfRead',\r\n        permission: PermissionLevels.ReadWrite,\r\n        privilegeParentLevelOne: 'Administration',\r\n        privilegeParentLevelTwo: null,\r\n    };\r\n    fabMenuActions: FloatingActionButtonActions[] = [];\r\n    mandatoryTradeFields: MandatoryTradeApprovalImageSetup[] = [];\r\n    accountingmandatoryFields: AccountingFieldSetup[] = [];\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    companyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n    tabValue: string;\r\n    isMenuBarVisible: boolean;\r\n    isCopyCompany: boolean;\r\n    isSaveInProgress = false;\r\n    now: moment.Moment;\r\n    sideNavState: boolean;\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private companyManager: CompanyManagerService,\r\n        protected formBuilder: FormBuilder,\r\n        protected configurationService: ConfigurationService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        private cdr: ChangeDetectorRef,\r\n        public dialog: MatDialog,\r\n        private router: Router,\r\n        private titleService: TitleService,\r\n        private authorizationService: AuthorizationService,\r\n        protected adminActionsService: AdminActionsService,\r\n    ) {\r\n\r\n        super(formConfigurationProvider);\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.isCopyCompany = (this.route.snapshot.data.isCopy) ? true : false;\r\n        this.isEdit = (this.route.snapshot.data.isEdit) ? true : false;\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.companyConfigurationFormGroup = this.formBuilder.group({\r\n            companyConfigurationHeader: this.companyConfigurationHeader.getFormGroup(),\r\n            companyManagementMainTabComponent: this.companyManagementMainTabComponent.getFormGroup(),\r\n            physicalsTabComponent: this.physicalsTabComponent.getFormGroup(),\r\n            invoiceTabComponent: this.invoiceTabComponent.getFormGroup(),\r\n            taxTabComponent: this.taxTabComponent.getFormGroup(),\r\n            accountingTabComponent: this.accountingTabComponent.getFormGroup(),\r\n            interfaceTabComponent: this.interfaceTabComponent.getFormGroup(),\r\n            itparametersTabComponent: this.itparametersTabComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.companyConfigurationHeader,\r\n            this.companyManagementMainTabComponent,\r\n            this.physicalsTabComponent,\r\n            this.invoiceTabComponent,\r\n            this.taxTabComponent,\r\n            this.accountingTabComponent,\r\n            this.interfaceTabComponent,\r\n            this.itparametersTabComponent,\r\n        );\r\n\r\n        this.cdr.detectChanges();\r\n        if (!this.isCopyCompany) {\r\n            if (this.companyId) {\r\n                this.initFABActions();\r\n                this.isLoading = false;\r\n                this.viewEditCompanyConfiguration();\r\n            } else {\r\n                this.createFromScratchDialog();\r\n                this.initFABActions();\r\n                this.isLoading = false;\r\n                this.isMenuBarVisible = false;\r\n                this.titleService.setTitle('Company Creation');\r\n            }\r\n        } else {\r\n            this.isMenuBarVisible = false;\r\n            this.titleService.setTitle('Copy Company');\r\n        }\r\n    }\r\n\r\n    createFromScratchDialog() {\r\n        this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Global Master Data',\r\n                text: 'Global master data will be available automatically for the newly created company',\r\n                okButton: 'Ok',\r\n            },\r\n        });\r\n    }\r\n\r\n    isSideNavOpened(value: boolean) {\r\n        this.sideNavState = value;\r\n    }\r\n\r\n    viewEditCompanyConfiguration() {\r\n        if (this.isEdit) {\r\n            this.isMenuBarVisible = false;\r\n            this.tabValue = this.route.snapshot.paramMap.get('tabIndex');\r\n            if (this.tabValue) {\r\n                this.selectedTab = Number(this.tabValue);\r\n            }\r\n        } else {\r\n            this.isMenuBarVisible = true;\r\n        }\r\n        this.loadConfigurationData(this.isEdit, this.companyId);\r\n    }\r\n\r\n    getPosition(event) {\r\n        this.selectedTab = event.index;\r\n        return { offsetLeft: this.offsetLeft };\r\n    }\r\n\r\n    loadConfigurationData(isEdit: boolean, companyId: string) {\r\n        this.companyConfigurationRecord = new CompanyConfigurationRecord();\r\n        this.tabValue = this.route.snapshot.paramMap.get('tabIndex');\r\n        if (this.tabValue) {\r\n            this.selectedTab = Number(this.tabValue);\r\n        }\r\n        this.isSaveInProgress = true;\r\n        this.subscriptions.push(this.configurationService.getCompanyConfigurationDetails(companyId, this.now.year())\r\n            .subscribe((companyConfigurationRecord: CompanyConfigurationRecord) => {\r\n                if (companyConfigurationRecord) {\r\n                    if (this.isMenuBarVisible) {\r\n                        this.frozenStatus = companyConfigurationRecord.companySetup.isFrozen;\r\n                        this.SetFrozenStatus();\r\n                    }\r\n                    this.companyConfigurationRecord = companyConfigurationRecord;\r\n\r\n                    this.formComponents.forEach((comp) => {\r\n                        if (comp) {\r\n                            comp.initForm(this.companyConfigurationRecord, isEdit);\r\n                        }\r\n                    });\r\n                    this.isSaveInProgress = false;\r\n                }\r\n            }));\r\n    }\r\n\r\n    SetFrozenStatus() {\r\n        if (this.companyManagementMenuBarComponent) {\r\n            this.companyManagementMenuBarComponent.freezeValue = this.frozenStatus\r\n                ? Freeze.Unfreeze : Freeze.Freeze;\r\n        }\r\n    }\r\n\r\n    initFABActions() {\r\n        this.fabTitle = 'Company Add/Edit FAB mini';\r\n        this.fabType = FABType.MiniFAB;\r\n\r\n        const actionItemSave: FloatingActionButtonActions = {\r\n            icon: 'save',\r\n            text: 'Save',\r\n            action: 'save',\r\n            disabled: false,\r\n            index: 2,\r\n        };\r\n        const actionItemCancel: FloatingActionButtonActions = {\r\n            icon: 'keyboard_backspace',\r\n            text: 'Cancel',\r\n            action: 'cancel',\r\n            disabled: false,\r\n            index: 3,\r\n        };\r\n\r\n        const actionItemEdit: FloatingActionButtonActions = {\r\n            icon: 'edit',\r\n            text: 'Edit Company',\r\n            action: 'editCompany',\r\n            index: 0,\r\n            disabled: false,\r\n        };\r\n\r\n        const actionItemCreate: FloatingActionButtonActions = {\r\n            icon: 'add',\r\n            text: 'Create Company',\r\n            action: 'createCompany',\r\n            index: 1,\r\n            disabled: false,\r\n        };\r\n        if (this.companyId) {\r\n            if (!this.isEdit) {\r\n                this.fabMenuActions.push(actionItemCreate);\r\n                const editCompanyPrivilegeLevel = this.authorizationService.getPermissionLevel(\r\n                    this.companyId,\r\n                    this.editCompanyActionPrivilege.privilegeName,\r\n                    this.editCompanyActionPrivilege.privilegeParentLevelOne,\r\n                    this.editCompanyActionPrivilege.privilegeParentLevelTwo);\r\n\r\n                const hasEditCompanyPrivilege = (editCompanyPrivilegeLevel >= this.editCompanyActionPrivilege.permission);\r\n                if (hasEditCompanyPrivilege) {\r\n                    this.fabMenuActions.push(actionItemEdit);\r\n                }\r\n            } else {\r\n                this.fabMenuActions.push(actionItemCancel);\r\n                actionItemSave.disabled = this.isSaveInProgress;\r\n                this.fabMenuActions.push(actionItemSave);\r\n            }\r\n        } else {\r\n            this.fabMenuActions.push(actionItemCancel);\r\n            actionItemSave.disabled = this.isSaveInProgress;\r\n            this.fabMenuActions.push(actionItemSave);\r\n        }\r\n    }\r\n\r\n    onFabActionClicked(action: string) {\r\n        switch (action) {\r\n            case 'save': {\r\n                this.onSaveButtonClicked();\r\n                break;\r\n            }\r\n            case 'cancel': {\r\n                this.onDiscardButtonClicked();\r\n                break;\r\n            }\r\n            case 'createCompany': {\r\n                this.onCreateButtonClicked();\r\n                break;\r\n            }\r\n            case 'editCompany': {\r\n                this.onEditButtonClicked();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    onCreateButtonClicked() {\r\n        this.adminActionsService.createCompanySubject.next();\r\n    }\r\n\r\n    onEditButtonClicked() {\r\n        if (this.companyManagementMenuBarComponent.freezeValue === Freeze.Unfreeze) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    text: 'User will not be able to edit configuration for this company anymore',\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else {\r\n            this.adminActionsService.editCompanySubject.next(new CompanyTabIndex(this.companyId, this.selectedTab));\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/companies']);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (!this.companyId) {\r\n            if (!this.companyConfigurationHeader.companyCodeCtrl.valid) {\r\n                this.snackbarService.throwErrorSnackBar(\r\n                    'Company Id is already Used.',\r\n                );\r\n                return;\r\n            }\r\n        }\r\n        this.utilService.updateFormGroupValidity(this.companyManagementMainTabComponent.mainTabFormGroup);\r\n        if (!this.companyManagementMainTabComponent.mainTabFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Main tab is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.utilService.updateFormGroupValidity(this.physicalsTabComponent.mainPhysicalsComponent.physicalsTabMainPhysicalsFormGroup);\r\n        if (!this.physicalsTabComponent.mainPhysicalsComponent.physicalsTabMainPhysicalsFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Physicals tab - Main physicals is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        if (!this.accountingTabComponent.defaultAccountComponent.validate()) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Accounting Tab - Default Account is invalid. Please resolve the errors',\r\n            );\r\n            return;\r\n        }\r\n        if (!this.accountingTabComponent.defaultCostTypeComponent.validate()) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Accounting Tab - Default Cost type is invalid. Please resolve the errors',\r\n            );\r\n            return;\r\n        }\r\n        this.utilService.updateFormGroupValidity(this.interfaceTabComponent.accountingInterfaceComponent.accountingInterfaceFormGroup);\r\n        if (!this.interfaceTabComponent.accountingInterfaceComponent.accountingInterfaceFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Interface tab - Accounting Interface is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.utilService.updateFormGroupValidity(this.interfaceTabComponent.treasurySystemComponent.treasurySystemFormGroup);\r\n        if (!this.interfaceTabComponent.treasurySystemComponent.treasurySystemFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Interface tab - Treasury Interface is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.utilService.updateFormGroupValidity(this.companyConfigurationFormGroup);\r\n        if (!this.companyConfigurationFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        // validate ITParameter Tab details\r\n        // 1-validate accountingparameter details\r\n        if (!this.itparametersTabComponent.accountingParameterComponent.isValidAccountingForm) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'IT Parameter tab form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        // 2-validate tradeparameter details\r\n        if (!this.itparametersTabComponent.tradeParameterComponent.isValidTradeForm) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'IT Parameter tab form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        this.getCompanyConfigurationDetails();\r\n        if (this.companyId) {\r\n            this.updateCompanyConfiguration(this.model);\r\n        } else {\r\n            this.createCompanyConfiguration(this.model);\r\n        }\r\n    }\r\n\r\n    createCompanyConfiguration(createCompanyModel: CompanyConfiguration) {\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Local Master Data, User Privileges and User Accounts',\r\n                // tslint:disable-next-line:max-line-length\r\n                text: 'The new company will be created. Local master data, user priveleges and user accounts should be updated for the new company in the referentials, user profiles and user accounts page',\r\n                okButton: 'Ok',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.isSaveInProgress = true;\r\n                this.subscription.push(this.configurationService.createCompanyConfiguration(createCompanyModel)\r\n                    .pipe(\r\n                        catchError((error) => {\r\n                            return throwError(error);\r\n                        }),\r\n                        finalize(() => {\r\n                            this.isSaveInProgress = false;\r\n                        }),\r\n                    ).subscribe((data) => {\r\n                        const messageText = 'The company ' + createCompanyModel.companyId + ' is successfully created';\r\n                        this.snackbarService.informationSnackBar(messageText);\r\n                        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/companies']);\r\n                    }));\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n    updateCompanyConfiguration(updateCompanyModel: CompanyConfiguration) {\r\n        this.isSaveInProgress = true;\r\n        this.subscriptions.push(this.configurationService.updateCompanyConfiguration(updateCompanyModel)\r\n            .pipe(\r\n                catchError((error) => {\r\n                    return throwError(error);\r\n                }),\r\n                finalize(() => {\r\n                    this.isSaveInProgress = false;\r\n                }),\r\n            ).subscribe((data) => {\r\n                const messageText = 'The company ' + updateCompanyModel.companyId + ' settings are successfully saved';\r\n                this.snackbarService.informationSnackBar(messageText);\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/companies']);\r\n                // tslint:disable-next-line: align\r\n            }, (err) => {\r\n                throw err;\r\n            }));\r\n    }\r\n\r\n    getCompanyConfigurationDetails(): CompanyConfiguration {\r\n        this.model = new CompanyConfiguration();\r\n        this.model.companySetup = new CompanySetup();\r\n        this.model.invoiceSetup = new InvoiceSetup();\r\n        this.companySetupMainInformation = new CompanySetup();\r\n        this.companySetupPhysicals = new CompanySetup();\r\n        this.model.retentionPolicy = new RetentionPolicy();\r\n        this.formComponents.forEach((comp) => {\r\n            if (comp === this.companyManagementMainTabComponent) {\r\n                this.model = comp.populateEntity(this.model);\r\n                if (this.companyManagementMainTabComponent.defaultBrokerComponent\r\n                    && this.companyManagementMainTabComponent.defaultBrokerComponent.bankBrokerId) {\r\n                    this.model.companySetup.defaultBrokerId = this.companyManagementMainTabComponent.defaultBrokerComponent.bankBrokerId;\r\n                }\r\n                this.companySetupMainInformation = this.model.companySetup;\r\n            } else if (comp === this.physicalsTabComponent) {\r\n                this.model = comp.populateEntity(this.model);\r\n                this.companySetupPhysicals = this.model.companySetup;\r\n                this.model.companySetup = this.companySetupMainInformation;\r\n                this.model.companySetup.cropYearFormatId = this.companySetupPhysicals.cropYearFormatId;\r\n                this.model.companySetup.isProvinceEnable = this.physicalsTabComponent.mainPhysicalsComponent.isProvinceActivationToggleChecked;\r\n                this.model.companySetup.defaultBranchId = this.companySetupPhysicals.defaultBranchId;\r\n                this.model.companySetup.defaultProvinceId = this.companySetupPhysicals.defaultProvinceId;\r\n            } else {\r\n                this.model = comp.populateEntity(this.model);\r\n            }\r\n        });\r\n        return this.model;\r\n    }\r\n}\r\n","module.exports = \"<mat-toolbar class=\\\"menu-bar mat-elevation-z6\\\">\\r\\n    <div class=\\\"toolbar-div\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             fxFlex=\\\"4\\\">\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Administration.CompanyConfRead.CompanyConfFreeze',company:currentCompany,level: PermissionLevels.ReadWrite\\\"\\r\\n                    (click)=\\\"onFreezeUnfreezeButtonClicked($event)\\\">{{freezeValue}}</button>\\r\\n            <button mat-button\\r\\n                    *ifAuthorized=\\\"'Administration.CompanyConfRead.CompanyConfDelete',company:currentCompany,level: PermissionLevels.ReadWrite\\\"\\r\\n                    (click)=\\\"onDeleteCompanyButtonClicked()\\\"\\r\\n                    [disabled]=\\\"isDeleteButtonDisabled\\\">Delete</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-toolbar>\"","module.exports = \".menu-bar .menu-bar-action-icon {\\n  margin-right: -393%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { FreezeCompany } from '../../../../../shared/entities/freeze-company.entity';\r\nimport { Freeze } from '../../../../../shared/enums/freeze.enum';\r\nimport { PermissionLevels } from '../../../../../shared/enums/permission-level.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-company-menu-bar',\r\n    templateUrl: './company-menu-bar.component.html',\r\n    styleUrls: ['./company-menu-bar.component.scss'],\r\n})\r\nexport class CompanyMenuBarComponent extends BaseFormComponent implements OnInit {\r\n    currentCompany: string;\r\n    company: string;\r\n    companyId: string;\r\n    public selectedTab: number = 0;\r\n    tabValue: string;\r\n    offsetLeft: number;\r\n    PermissionLevels = PermissionLevels;\r\n    isDeleteButtonDisabled: boolean = true;\r\n    createCompany: boolean = false;\r\n    copyCompany: boolean = false;\r\n    isEdit: boolean = false;\r\n    isCopyCompany: boolean;\r\n    freezeValue: string = '';\r\n    freezeCompany = new FreezeCompany();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private authorizationService: AuthorizationService,\r\n        private securityService: SecurityService,\r\n        protected snackbarService: SnackbarService,\r\n        public dialog: MatDialog,\r\n        private router: Router,\r\n        protected configurationService: ConfigurationService,\r\n        private companyManager: CompanyManagerService,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.isCopyCompany = (this.route.snapshot.data.isCopy) ? true : false;\r\n        this.tabValue = this.route.snapshot.paramMap.get('tabIndex');\r\n        if (!this.isCopyCompany) {\r\n            if (this.companyId) {\r\n                this.checkTransactionDataExistsForCompany(this.companyId);\r\n            }\r\n        }\r\n        if (this.tabValue) {\r\n            this.selectedTab = Number(this.tabValue);\r\n        }\r\n\r\n    }\r\n\r\n    onDeleteCompanyButtonClicked() {\r\n        if (this.currentCompany === this.companyId) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    text: 'You cannot delete a company which you are in. Please access this company from another company and delete',\r\n                    okButton: 'Ok',\r\n                },\r\n            });\r\n        } else {\r\n            this.onDeleteButtonDialog();\r\n        }\r\n    }\r\n\r\n    getPosition(event) {\r\n        this.selectedTab = event.index;\r\n        return { offsetLeft: this.offsetLeft };\r\n    }\r\n\r\n    onFreezeUnfreezeButtonClicked(data) {\r\n        if (this.freezeValue === Freeze.Freeze) {\r\n            this.onFreezeButtonDialog();\r\n        }\r\n        if (this.freezeValue === Freeze.Unfreeze) {\r\n            this.onUnfreezeButtonDialog();\r\n        }\r\n    }\r\n\r\n    onFreezeButtonDialog() {\r\n        const confirmFrozenDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Freeze ' + this.companyId,\r\n                text: 'User won\\'t be able to edit configuration or create transactional data for this \\n company anymore',\r\n                okButton: 'FREEZE COMPANY',\r\n                cancelButton: 'DISCARD',\r\n            },\r\n        });\r\n        confirmFrozenDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.freezeValue = Freeze.Unfreeze;\r\n                this.freezeCompany.isFrozen = Freeze.Frozen;\r\n                this.configurationService.UpdateIsFrozenForCompany(this.companyId, this.freezeCompany).subscribe(() => {\r\n                    const messageText = 'The Company has been successfully frozen';\r\n                    this.snackbarService.informationSnackBar(messageText);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    onUnfreezeButtonDialog() {\r\n        const confirmUnfroezenDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'UnFreeze ' + this.companyId,\r\n                text: 'Users will be able to edit configuration and create transactional data \\nfor this company',\r\n                okButton: 'UNFREEZE COMPANY',\r\n                cancelButton: 'DISCARD',\r\n            },\r\n        });\r\n        confirmUnfroezenDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.freezeValue = Freeze.Freeze;\r\n                this.freezeCompany.isFrozen = Freeze.Unfrozen;\r\n                this.configurationService.UpdateIsFrozenForCompany(this.companyId, this.freezeCompany).subscribe(() => {\r\n                    const messageText = 'The Company has been successfully unfrozen';\r\n                    this.snackbarService.informationSnackBar(messageText);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    onDeleteButtonDialog() {\r\n        const confirmDeletionDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Delete ' + this.companyId,\r\n                text: 'Deleting this company will de-assign all tha Master Data and remove its configuration',\r\n                okButton: 'DELETE COMPANY',\r\n                cancelButton: 'DISCARD',\r\n            },\r\n        });\r\n        confirmDeletionDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                const companyId = this.route.snapshot.paramMap.get('companyId');\r\n                this.configurationService.deleteCompany(companyId).subscribe(() => {\r\n                    const messageText = 'The Company is successfully deleted';\r\n                    this.snackbarService.informationSnackBar(messageText);\r\n                    this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/companies']);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    checkTransactionDataExistsForCompany(companyId: string) {\r\n        this.configurationService.checkTransationExistsByCompanyId(companyId).toPromise().then((data: boolean) => {\r\n            this.isDeleteButtonDisabled = data;\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<header class=\\\"header-background\\\">\\r\\n    <div class=\\\"header-container\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutGap=\\\"15%\\\">\\r\\n                <div fxFlex=\\\"10%\\\">\\r\\n                    <atlas-form-input [isEditable]=\\\"companyCodeCtrl.enabled\\\"\\r\\n                                      [fieldControl]=\\\"companyCodeCtrl\\\"\\r\\n                                      label=\\\"Company Id\\\"\\r\\n                                      [errorMap]=\\\"companyCodeErrorMap\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"15%\\\">\\r\\n                    <atlas-form-input [isEditable]=\\\"companyFriendlyCodeCtrl.enabled\\\"\\r\\n                                      [fieldControl]=\\\"companyFriendlyCodeCtrl\\\"\\r\\n                                      label=\\\"Company Friendly Code\\\"\\r\\n                                      [errorMap]=\\\"companyFriendlyCodeErrorMap\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"15%\\\">\\r\\n                    <atlas-form-input [isEditable]=\\\"companyNameCtrl.enabled\\\"\\r\\n                                      [fieldControl]=\\\"companyNameCtrl\\\"\\r\\n                                      label=\\\"Company Name\\\"\\r\\n                                      [errorMap]=\\\"companyNameErrorMap\\\">\\r\\n                    </atlas-form-input>\\r\\n                </div>\\r\\n            </div>\\r\\n            <br>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start end\\\"\\r\\n                 fxLayoutGap=\\\"5%\\\">\\r\\n                <div fxFlex=\\\"15%\\\">\\r\\n                    <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                             [fieldControl]=\\\"companyClientCodeCtrl\\\"\\r\\n                                                             [options]=\\\"filteredCounterparties\\\"\\r\\n                                                             label=\\\"Company Client Code\\\"\\r\\n                                                             displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                             [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                             [errorMap]=\\\"counterpartyErrorMap\\\"\\r\\n                                                             lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                             gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                             (optionSelected)=\\\"counterpartyCodeSelected($event)\\\">\\r\\n                    </atlas-masterdata-user-preferences-input>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</header>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../shared/entities/company-configuration.entity';\r\nimport { Counterparty } from '../../../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-header-form',\r\n    templateUrl: './header-form.component.html',\r\n    styleUrls: ['./header-form.component.scss'],\r\n})\r\nexport class HeaderFormComponent extends BaseFormComponent implements OnInit {\r\n\r\n    companyFriendlyCodeCtrl = new AtlasFormControl('CompanyFriendlyCode');\r\n    companyNameCtrl = new AtlasFormControl('CompanyName');\r\n    companyClientCodeCtrl = new AtlasFormControl('CompanyClientCode');\r\n    companyCodeCtrl = new AtlasFormControl('CompanyCode');\r\n    companyIdCtrl = new AtlasFormControl('CompanyId');\r\n    isUnique: boolean;\r\n    counterpartyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    companyCodeErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('maxLength', 'Company Id should be of 2 characters maximum')\r\n        .set('notUnique', 'CompanyId is already used');\r\n    companyFriendlyCodeErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('maxLength', 'Company Friendly Code should be of 4 characters maximum');\r\n    companyNameErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('maxLength', 'Company Name should be of 50 characters maximum');\r\n    companyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n    filteredCounterparties: Counterparty[];\r\n    masterData: MasterData;\r\n    model: CompanyConfigurationRecord;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    isCopyCompany: boolean;\r\n    isEdit: boolean;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private companyManager: CompanyManagerService,\r\n        protected formBuilder: FormBuilder,\r\n        protected configurationService: ConfigurationService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService,\r\n        public dialog: MatDialog,\r\n        private companyManagerService: CompanyManagerService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.isCopyCompany = (this.route.snapshot.data.isCopy) ? true : false;\r\n        this.isEdit = (this.route.snapshot.data.isEdit) ? true : false;\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filterCounterparties();\r\n        this.setValidators();\r\n    }\r\n\r\n    initForm(entity: CompanyConfigurationRecord, isEdit): CompanyConfigurationRecord {\r\n        const companyConfiguration = entity;\r\n        this.model = companyConfiguration;\r\n\r\n        if (companyConfiguration) {\r\n            this.companyIdCtrl.setValue(companyConfiguration.companySetup.id);\r\n            this.companyFriendlyCodeCtrl.setValue(companyConfiguration.companySetup.companyFriendlyCode);\r\n            this.companyCodeCtrl.setValue(companyConfiguration.companySetup.companyId);\r\n            this.companyNameCtrl.setValue(companyConfiguration.companySetup.description);\r\n            if (companyConfiguration.companySetup.counterpartyId) {\r\n                this.companyClientCodeCtrl.setValue(this.getCounterpartyCodeFromId(companyConfiguration.companySetup.counterpartyId));\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n        this.companyCodeCtrl.disable();\r\n\r\n        return entity;\r\n    }\r\n\r\n    getCounterpartyId(counterpartyCode: string): number {\r\n        if (counterpartyCode) {\r\n            const counterpartyId = this.masterData.counterparties.find(\r\n                (e) => e.counterpartyCode === counterpartyCode).counterpartyID;\r\n            return counterpartyId;\r\n        }\r\n    }\r\n\r\n    getCounterpartyCodeFromId(counterpartyId: number): string {\r\n        const CounterpartyCode = this.masterData.counterparties.filter(\r\n            (e) => e.counterpartyID === counterpartyId)[0].counterpartyCode;\r\n        return CounterpartyCode;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            companyCodeCtrl: this.companyCodeCtrl,\r\n            companyFriendlyCodeCtrl: this.companyFriendlyCodeCtrl,\r\n            companyNameCtrl: this.companyNameCtrl,\r\n            companyClientCodeCtrl: this.companyClientCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        companyConfiguration.companyId = this.companyCodeCtrl.value;\r\n        if (!this.isCopyCompany && this.companyId) {\r\n            companyConfiguration.companySetup.id = this.companyIdCtrl.value;\r\n        }\r\n        companyConfiguration.companySetup.companyId = this.companyCodeCtrl.value;\r\n        companyConfiguration.companySetup.companyFriendlyCode = this.companyFriendlyCodeCtrl.value;\r\n        companyConfiguration.companySetup.companyName = this.companyNameCtrl.value;\r\n        companyConfiguration.companySetup.counterpartyId = this.getCounterpartyId(this.companyClientCodeCtrl.value);\r\n        return companyConfiguration;\r\n    }\r\n\r\n    setValidators() {\r\n        this.companyCodeCtrl.setValidators(Validators.compose([Validators.required, Validators.maxLength(2)]));\r\n        this.companyFriendlyCodeCtrl.setValidators(Validators.compose([Validators.required, Validators.maxLength(4)]));\r\n        this.companyNameCtrl.setValidators(Validators.compose([Validators.required, Validators.maxLength(50)]));\r\n        this.companyCodeCtrl.valueChanges.subscribe((val) => {\r\n            if (this.companyId) {\r\n                if (this.isCopyCompany) {\r\n                    if (val !== this.companyId) {\r\n                        this.checkUnicityOfCompanyName(val);\r\n                    } else {\r\n                        this.companyCodeCtrl.setErrors({ notUnique: true });\r\n                    }\r\n                }\r\n            } else {\r\n                this.checkUnicityOfCompanyName(val);\r\n            }\r\n        });\r\n    }\r\n\r\n    checkUnicityOfCompanyName(val: string): void {\r\n        if (val) {\r\n            this.companyManagerService.checkCompanyNameExists(val)\r\n                .subscribe((isNotUnique: boolean) => {\r\n                    this.isUnique = !isNotUnique;\r\n                    if (!this.isUnique) {\r\n                        this.companyCodeCtrl.setErrors({ notUnique: true });\r\n                        this.snackbarService.throwErrorSnackBar(\r\n                            'The company already exsists.',\r\n                        );\r\n                    }\r\n                });\r\n        } else {\r\n            this.isUnique = true;\r\n        }\r\n    }\r\n\r\n    filterCounterparties() {\r\n        this.filteredCounterparties = this.masterData.counterparties;\r\n        this.companyClientCodeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCounterparties = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.counterparties,\r\n                ['counterpartyCode', 'description'],\r\n            );\r\n            if (this.companyClientCodeCtrl.valid) {\r\n                this.counterpartyCodeSelected(this.companyClientCodeCtrl.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    counterpartyCodeSelected(value: Counterparty) {\r\n        if (value) {\r\n            const selectedCounterparty = this.masterData.counterparties.find(\r\n                (item) => item.counterpartyCode === value.counterpartyCode,\r\n            );\r\n            if (selectedCounterparty) {\r\n                this.companyClientCodeCtrl.patchValue(selectedCounterparty.counterpartyCode);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"accountingInterfaceFormGroup\\\">\\r\\n        <mat-card class=\\\"trade-capture-card\\\">\\r\\n            <mat-card-title>\\r\\n                Accounting Interface\\r\\n            </mat-card-title>\\r\\n            <mat-card-subtitle class=\\\"mat-toggle\\\"> Interface Active\\r\\n                <mat-slide-toggle [formControl]=\\\"interfaceActiveCtrl\\\"\\r\\n                                  [checked]=\\\"isIntefaceToggleChecked\\\"\\r\\n                                  (change)=\\\"onInterfaceActiveToggleChanged($event)\\\">\\r\\n                </mat-slide-toggle>\\r\\n            </mat-card-subtitle>\\r\\n            <mat-card-content>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start\\\"\\r\\n                     fxLayoutGap=\\\"8px\\\">\\r\\n                    <div fxFlex=\\\"22%\\\">\\r\\n                        <atlas-dropdown-select [isEditable]=\\\"interfaceTargetSystemCtrl.enabled\\\"\\r\\n                                               label=\\\"Accounting Target System\\\"\\r\\n                                               [fieldControl]=\\\"interfaceTargetSystemCtrl\\\"\\r\\n                                               [options]=\\\"filteredInterfaceTypeList\\\"\\r\\n                                               displayProperty=\\\"interfaceType\\\"\\r\\n                                               [selectProperties]=\\\"['interfaceType']\\\"\\r\\n                                               isAutocompleteActivated=\\\"true\\\"\\r\\n                                               [errorMap]=\\\"accountingInterfaceErrorMap\\\"\\r\\n                                               [hasIcon]=\\\"true\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"22%\\\">\\r\\n                        <atlas-form-input [isEditable]=\\\"interfaceCodeCtrl.enabled\\\"\\r\\n                                          [fieldControl]=\\\"interfaceCodeCtrl\\\"\\r\\n                                          label=\\\"Interface Code\\\"\\r\\n                                          [errorMap]=\\\"interfaceCodeErrorMap\\\">\\r\\n                        </atlas-form-input>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </form>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!isEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".mat-toggle {\\n  font-weight: normal; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { InterfaceSetup } from '../../../../../../shared/entities/interface-setup.entity';\r\nimport { InterfaceTypes } from '../../../../../../shared/entities/interface-type.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { InterfaceType } from '../../../../../../shared/enums/interface-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-interface',\r\n    templateUrl: './accounting-interface.component.html',\r\n    styleUrls: ['./accounting-interface.component.scss'],\r\n})\r\nexport class AccountingInterfaceComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    interfaceSetupIdCtrl = new AtlasFormControl('InterfaceSetupId');\r\n    interfaceActiveCtrl = new AtlasFormControl('InterfaceActive');\r\n    interfaceCodeCtrl = new AtlasFormControl('InterfaceCode');\r\n    interfaceTargetSystemCtrl = new AtlasFormControl('InterfaceTargetSystem');\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    @Output() readonly accountingInterfaceStatus = new EventEmitter<boolean>();\r\n    isIntefaceToggleChecked: boolean = false;\r\n    isEdit: boolean;\r\n    masterData: MasterData;\r\n    filteredInterfaceTypeList: InterfaceTypes[];\r\n    companyConfiguration: CompanyConfiguration;\r\n    interfaceSetupList: InterfaceSetup[];\r\n    accountingInterfaceFormGroup: FormGroup;\r\n    interfaceActiveStatus: string;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    interfaceSetup: InterfaceSetup;\r\n    accountingInterfaceErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    interfaceCodeErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('maxLength', 'Interface code should be of 15 characters maximum');\r\n    showHintForToggleActivation: boolean;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected utilService: UtilService,\r\n        protected snackBarService: SnackbarService,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredInterfaceType();\r\n        this.accountingInterfaceStatus.emit(this.isIntefaceToggleChecked);\r\n        this.setValidations();\r\n        if (!this.companyId) {\r\n            this.isEdit = true;\r\n        }\r\n        if (!this.isIntefaceToggleChecked) {\r\n            this.interfaceCodeCtrl.disable();\r\n            this.interfaceTargetSystemCtrl.disable();\r\n        }\r\n        this.setValidators();\r\n    }\r\n\r\n    initForm(companyConfigurationRecord, isEdit) {\r\n        this.isEdit = isEdit;\r\n        this.interfaceSetupList = companyConfigurationRecord.interfaceSetup;\r\n        const accountingInterfaceValue = this.interfaceSetupList.find(\r\n            (e) => e.interfaceTypeId !== InterfaceType.PaymentRequestInterface);\r\n        if (accountingInterfaceValue) {\r\n            this.interfaceSetupIdCtrl.setValue(accountingInterfaceValue.interfaceSetUpId);\r\n            this.interfaceActiveCtrl.setValue(accountingInterfaceValue.isActive);\r\n            this.interfaceCodeCtrl.setValue(accountingInterfaceValue.interfaceCode);\r\n            this.isIntefaceToggleChecked = accountingInterfaceValue.isActive;\r\n            this.accountingInterfaceStatus.emit(this.isIntefaceToggleChecked);\r\n            this.setValidations();\r\n            if (accountingInterfaceValue.interfaceTypeId) {\r\n                this.interfaceTargetSystemCtrl.setValue(this.getInterfaceCodeFromId(accountingInterfaceValue.interfaceTypeId));\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.accountingInterfaceFormGroup.disable();\r\n        } else {\r\n            this.accountingInterfaceFormGroup.enable();\r\n        }\r\n        if (isEdit && !this.isIntefaceToggleChecked) {\r\n            this.interfaceCodeCtrl.disable();\r\n            this.interfaceTargetSystemCtrl.disable();\r\n        }\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    getInterfaceCodeFromId(interfaceId: number) {\r\n        const interfaceCode = this.masterData.interfaceType.find(\r\n            (e) => e.interfaceTypeId === interfaceId);\r\n        if (interfaceCode) {\r\n            return interfaceCode.interfaceType;\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.accountingInterfaceFormGroup = this.formBuilder.group({\r\n            interfaceActiveCtrl: this.interfaceActiveCtrl,\r\n            interfaceTargetSystemCtrl: this.interfaceTargetSystemCtrl,\r\n            interfaceCodeCtrl: this.interfaceCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setValidators() {\r\n        this.interfaceTargetSystemCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.filteredInterfaceTypeList,\r\n                    nameof<InterfaceTypes>('interfaceType'),\r\n                ),\r\n            ]),\r\n        );\r\n        this.interfaceCodeCtrl.setValidators(Validators.compose([Validators.maxLength(15)]));\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'AccountingInterfaceComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.utilService.updateFormGroupValidity(this.accountingInterfaceFormGroup);\r\n        if (!this.accountingInterfaceFormGroup.valid) {\r\n            this.snackBarService.throwErrorSnackBar(\r\n                'Interface tab - Accounting Interface system is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    getAccountingInterfaceValues() {\r\n        this.companyConfiguration = new CompanyConfiguration();\r\n        const accountingInterfaceSystem: InterfaceSetup = new InterfaceSetup();\r\n        accountingInterfaceSystem.interfaceSetUpId = this.interfaceSetupIdCtrl.value === '' ? null : this.interfaceSetupIdCtrl.value;\r\n        accountingInterfaceSystem.interfaceCode = this.interfaceCodeCtrl.value;\r\n        accountingInterfaceSystem.legalEntityCode = '';\r\n        accountingInterfaceSystem.isActive = this.interfaceActiveCtrl.value ? true : false;\r\n        accountingInterfaceSystem.interfaceTypeId = this.interfaceTargetSystemCtrl.value.interfaceTypeId\r\n            ? this.interfaceTargetSystemCtrl.value.interfaceTypeId : this.getInterfaceIdFromCode(this.interfaceTargetSystemCtrl.value);\r\n        this.interfaceSetup = accountingInterfaceSystem;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const CompanyConfigurationEntity = entity;\r\n        CompanyConfigurationEntity.interfaceSetup = [];\r\n        this.getAccountingInterfaceValues();\r\n        CompanyConfigurationEntity.interfaceSetup.push(this.interfaceSetup);\r\n        return CompanyConfigurationEntity;\r\n    }\r\n\r\n    getInterfaceIdFromCode(interfaceCode: string): number {\r\n        const interfaceType = this.masterData.interfaceType.find(\r\n            (e) => e.interfaceType === interfaceCode);\r\n        if (interfaceType) {\r\n            return interfaceType.interfaceTypeId;\r\n        }\r\n\r\n    }\r\n\r\n    onInterfaceActiveToggleChanged(value: MatSlideToggleChange) {\r\n        this.isIntefaceToggleChecked = value.checked;\r\n        this.setValidations();\r\n        this.accountingInterfaceStatus.emit(this.isIntefaceToggleChecked);\r\n    }\r\n\r\n    setValidations() {\r\n        if (!this.isIntefaceToggleChecked) {\r\n            this.interfaceCodeCtrl.disable();\r\n            this.interfaceTargetSystemCtrl.disable();\r\n            this.interfaceTargetSystemCtrl.clearValidators();\r\n            this.interfaceCodeCtrl.clearValidators();\r\n            this.showHintForToggleActivation = false;\r\n        } else {\r\n            this.interfaceCodeCtrl.enable();\r\n            this.interfaceTargetSystemCtrl.enable();\r\n            this.interfaceTargetSystemCtrl.setValidators(Validators.compose([Validators.required]));\r\n            this.interfaceCodeCtrl.setValidators(Validators.compose([Validators.required]));\r\n            this.showHintForToggleActivation = true;\r\n        }\r\n        this.interfaceTargetSystemCtrl.updateValueAndValidity();\r\n        this.interfaceCodeCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    filteredInterfaceType() {\r\n        let interfaceTypeList: InterfaceTypes[] = [];\r\n        this.filteredInterfaceTypeList = this.masterData.interfaceType.filter(\r\n            (e) => e.interfaceTypeId !== InterfaceType.PaymentRequestInterface);\r\n        interfaceTypeList = this.filteredInterfaceTypeList;\r\n        this.interfaceTargetSystemCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredInterfaceTypeList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                interfaceTypeList,\r\n                ['interfaceType', 'interfaceTypeId'],\r\n            );\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <h2>\\r\\n        DMS\\r\\n        <mat-card-subtitle class=\\\"mat-toggle\\\"> Interface Active\\r\\n            <mat-slide-toggle [formControl]=\\\"interfaceActiveCtrl\\\"\\r\\n                              [checked]=\\\"isIntefaceToggleChecked\\\"\\r\\n                              (change)=\\\"onInterfaceActiveToggleChanged($event)\\\">\\r\\n\\r\\n            </mat-slide-toggle>\\r\\n        </mat-card-subtitle>\\r\\n    </h2>\\r\\n\\r\\n    <mat-form-field>\\r\\n        <input matInput\\r\\n               placeholder=\\\"Platform Id\\\"\\r\\n               [formControl]=\\\"platformIdCtrl\\\"\\r\\n               autocomplete=\\\"off\\\">\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n        <input matInput\\r\\n               placeholder=\\\"Platform Label\\\"\\r\\n               [formControl]=\\\"platformLabelCtrl\\\"\\r\\n               autocomplete=\\\"off\\\">\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n        <input matInput\\r\\n               placeholder=\\\"Region Id\\\"\\r\\n               [formControl]=\\\"regionIdCtrl\\\"\\r\\n               autocomplete=\\\"off\\\">\\r\\n    </mat-form-field>\\r\\n    <mat-form-field>\\r\\n        <input matInput\\r\\n               placeholder=\\\"Region Label\\\"\\r\\n               [formControl]=\\\"regionLabelCtrl\\\"\\r\\n               autocomplete=\\\"off\\\">\\r\\n    </mat-form-field>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".mat-toggle {\\n  font-weight: normal; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-dms',\r\n    templateUrl: './dms.component.html',\r\n    styleUrls: ['./dms.component.scss'],\r\n})\r\nexport class DmsComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    @Output() readonly dmsInterfaceStatus = new EventEmitter();\r\n    interfaceActiveCtrl = new AtlasFormControl('InterfaceActive');\r\n    platformIdCtrl = new AtlasFormControl('PlatformId');\r\n    platformLabelCtrl = new AtlasFormControl('PlatformLabel');\r\n    regionIdCtrl = new AtlasFormControl('RegionId');\r\n    regionLabelCtrl = new AtlasFormControl('RegionLabel');\r\n    isIntefaceToggleChecked: boolean;\r\n    checkEdit: boolean;\r\n    interfaceActive: string;\r\n    currentCompany: string;\r\n    companyId: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        if (!this.companyId) {\r\n            this.checkEdit = true;\r\n        }\r\n        this.interfaceActive = (this.isIntefaceToggleChecked) ? 'Active' : 'InActive';\r\n        this.dmsInterfaceStatus.emit(this.isIntefaceToggleChecked);\r\n        if (!this.isIntefaceToggleChecked) {\r\n            this.platformIdCtrl.disable();\r\n            this.platformLabelCtrl.disable();\r\n            this.regionIdCtrl.disable();\r\n            this.regionLabelCtrl.disable();\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord, isEdit) {\r\n        this.checkEdit = isEdit;\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            interfaceActiveCtrl: this.interfaceActiveCtrl,\r\n            platformIdCtrl: this.platformIdCtrl,\r\n            platformLabelCtrl: this.platformLabelCtrl,\r\n            regionIdCtrl: this.regionIdCtrl,\r\n            regionLabelCtrl: this.regionLabelCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'DmsComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    onInterfaceActiveToggleChanged(value: MatSlideToggleChange) {\r\n        this.isIntefaceToggleChecked = value.checked;\r\n        if (!this.isIntefaceToggleChecked) {\r\n            this.platformIdCtrl.disable();\r\n            this.platformLabelCtrl.disable();\r\n            this.regionIdCtrl.disable();\r\n            this.regionLabelCtrl.disable();\r\n        } else {\r\n            this.platformIdCtrl.enable();\r\n            this.platformLabelCtrl.enable();\r\n            this.regionIdCtrl.enable();\r\n            this.regionLabelCtrl.enable();\r\n        }\r\n\r\n        this.dmsInterfaceStatus.emit(this.isIntefaceToggleChecked);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <div fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             fxLayoutGap.sm=\\\"10\\\"\\r\\n             class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onMappingTabCliked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">Mapping</h2>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onAccountingInterfaceTabCliked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\GlobalParam_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">To Accounting Interface </h2>\\r\\n                    <mat-chip selected\\r\\n                              disabled\\r\\n                              matTooltip=\\\"Accounting Interface\\\"\\r\\n                              [ngClass]=\\\"accountingInterfaceStatus == true ? 'mat-approved': 'mat-error'\\\">\\r\\n                        {{accountingStatus}}\\r\\n                    </mat-chip>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card class=\\\"inactive-card\\\"\\r\\n                      matTooltip=\\\"Feature coming soon\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\Profiles_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">To DMS </h2>\\r\\n                    <mat-chip selected\\r\\n                              disabled\\r\\n                              matTooltip=\\\"DMS\\\"\\r\\n                              [ngClass]=\\\"dmsInterfaceStatus == true ? 'mat-approved': 'mat-error'\\\">\\r\\n                        {{dmsStatus}}\\r\\n                    </mat-chip>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onTreasurySystemTabCliked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\GlobalParam_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">To Treasury System</h2>\\r\\n                    <mat-chip selected\\r\\n                              disabled\\r\\n                              matTooltip=\\\"DMS\\\"\\r\\n                              [ngClass]=\\\"treasuryInterfaceStatus == true ? 'mat-approved': 'mat-error'\\\">\\r\\n                        {{treasuryStatus}}\\r\\n                    </mat-chip>\\r\\n                </mat-card-title>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideMappingSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #mappingSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-mapping #mappingComponent\\r\\n                           (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                           (saveMandatory)=\\\"mappingSideNav.close()\\\"\\r\\n                           (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-mapping>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideAccountingInterfaceSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #accountingInterfaceSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-accounting-interface #accountingInterfaceComponent\\r\\n                                        (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                                        (saveMandatory)=\\\"accountingInterfaceSideNav.close()\\\"\\r\\n                                        (accountingInterfaceStatus)=\\\"accountingStatusChanged($event)\\\"\\r\\n                                        (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-accounting-interface>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideDmsSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #dmsSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-dms #dmsComponent\\r\\n                       (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                       (saveMandatory)=\\\"dmsSideNav.close()\\\"\\r\\n                       (dmsInterfaceStatus)=\\\"dmsStatusChanged($event)\\\"\\r\\n                       (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-dms>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideTreasurySystemSideNav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #treasurySystemSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-treasury-system #treasurySystemComponent\\r\\n                                   (discardChanges)=\\\"onDiscardButtonClicked($event)\\\"\\r\\n                                   (saveMandatory)=\\\"treasurySystemSideNav.close()\\\"\\r\\n                                   (treasuryInterfaceStatus)=\\\"treasuryStatusChanged($event)\\\"\\r\\n                                   (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-treasury-system>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\"","module.exports = \".sidenav {\\n  width: 960px;\\n  top: 56px; }\\n\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatSidenav } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { CompanyConfiguration } from '../../../../../shared/entities/company-configuration.entity';\r\nimport { InterfaceSetup } from '../../../../../shared/entities/interface-setup.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { AccountingInterfaceComponent } from './accounting-interface/accounting-interface.component';\r\nimport { DmsComponent } from './dms/dms.component';\r\nimport { MappingComponent } from './mapping/mapping.component';\r\nimport { TreasurySystemComponent } from './treasury-system/treasury-system.component';\r\n\r\n@Component({\r\n    selector: 'atlas-interface-tab',\r\n    templateUrl: './interface-tab.component.html',\r\n    styleUrls: ['./interface-tab.component.scss'],\r\n})\r\nexport class InterfaceTabComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    @ViewChild('accountingInterfaceComponent') accountingInterfaceComponent: AccountingInterfaceComponent;\r\n    @ViewChild('mappingComponent') mappingComponent: MappingComponent;\r\n    @ViewChild('dmsComponent') dmsComponent: DmsComponent;\r\n    @ViewChild('treasurySystemComponent') treasurySystemComponent: TreasurySystemComponent;\r\n    @ViewChild('mappingSideNav') mappingSideNav: MatSidenav;\r\n    @ViewChild('accountingInterfaceSideNav') accountingInterfaceSideNav: MatSidenav;\r\n    @ViewChild('dmsSideNav') dmsSideNav: MatSidenav;\r\n    @ViewChild('treasurySystemSideNav') treasurySystemSideNav: MatSidenav;\r\n    formComponents: BaseFormComponent[] = [];\r\n    interfaceTabFormGroup: FormGroup;\r\n    companyConfigurationRecord: CompanyConfigurationRecord;\r\n    hideMappingSideNav: boolean;\r\n    hideAccountingInterfaceSideNav: boolean;\r\n    hideDmsSideNav: boolean;\r\n    hideTreasurySystemSideNav: boolean;\r\n    isEdit: boolean;\r\n    mappingSetupComponent: string = 'MappingComponent';\r\n    accountingInterfaceSetupComponent: string = 'AccountingInterfaceComponent';\r\n    dmsSetupComponent: string = 'DmsComponent';\r\n    treasurySysteSetupComponent: string = 'TreasurySystemComponent';\r\n    company: string;\r\n    masterData: MasterData[];\r\n    treasuryInterfaceSetup: InterfaceSetup[];\r\n    accountingInterfaceSetup: InterfaceSetup[];\r\n    accountingInterfaceStatus: boolean;\r\n    dmsInterfaceStatus: boolean;\r\n    treasuryInterfaceStatus: boolean;\r\n    accountingStatus: string;\r\n    dmsStatus: string;\r\n    treasuryStatus: string;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected formBuilder: FormBuilder) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.isSideNavOpened.emit(false);\r\n        this.formComponents.push(\r\n            this.mappingComponent,\r\n            this.accountingInterfaceComponent,\r\n            this.dmsComponent,\r\n            this.treasurySystemComponent,\r\n        );\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: any, isEdit): CompanyConfigurationRecord {\r\n        this.isEdit = isEdit;\r\n        this.companyConfigurationRecord = companyConfigurationRecord;\r\n        this.formComponents.forEach((comp) => {\r\n            companyConfigurationRecord = comp.initForm(companyConfigurationRecord, isEdit);\r\n        });\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    sideNavOpened(event: boolean) {\r\n        this.isSideNavOpened.emit(event);\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        this.formComponents.forEach((comp) => {\r\n            if (comp === this.treasurySystemComponent) {\r\n                entity = comp.populateEntity(entity);\r\n                this.treasuryInterfaceSetup = entity.interfaceSetup;\r\n                entity.interfaceSetup = [];\r\n            } else if (comp === this.accountingInterfaceComponent) {\r\n                entity = comp.populateEntity(entity);\r\n                this.accountingInterfaceSetup = entity.interfaceSetup;\r\n                entity.interfaceSetup = [];\r\n            } else {\r\n                entity = comp.populateEntity(entity);\r\n            }\r\n        });\r\n        entity.interfaceSetup.push(this.accountingInterfaceSetup[0], this.treasuryInterfaceSetup[0]);\r\n        return entity;\r\n    }\r\n\r\n    accountingStatusChanged(value: boolean) {\r\n        this.accountingInterfaceStatus = value;\r\n        this.accountingStatus = value ? 'Active' : 'Inactive';\r\n    }\r\n    dmsStatusChanged(value: boolean) {\r\n        this.dmsInterfaceStatus = value;\r\n        this.dmsStatus = value ? 'Active' : 'Inactive';\r\n    }\r\n    treasuryStatusChanged(value: boolean) {\r\n        this.treasuryInterfaceStatus = value;\r\n        this.treasuryStatus = value ? 'Active' : 'Inactive';\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.interfaceTabFormGroup = this.formBuilder.group({\r\n            accountingInterfaceGroup: this.accountingInterfaceComponent.getFormGroup(),\r\n            dmsGroup: this.dmsComponent.getFormGroup(),\r\n            treasurySystemGroup: this.treasurySystemComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onMappingTabCliked() {\r\n        this.hideMappingSideNav = false;\r\n        this.hideAccountingInterfaceSideNav = true;\r\n        this.hideDmsSideNav = true;\r\n        this.isSideNavOpened.emit(true);\r\n        this.mappingComponent.loadDefaultMappingFieldSetUpEditor();\r\n        this.mappingSideNav.open();\r\n    }\r\n\r\n    onAccountingInterfaceTabCliked() {\r\n        this.hideMappingSideNav = true;\r\n        this.hideAccountingInterfaceSideNav = false;\r\n        this.hideDmsSideNav = true;\r\n        this.isSideNavOpened.emit(true);\r\n        this.accountingInterfaceSideNav.open();\r\n    }\r\n\r\n    onDmsTabCliked() {\r\n        this.hideMappingSideNav = true;\r\n        this.hideAccountingInterfaceSideNav = true;\r\n        this.hideDmsSideNav = false;\r\n        this.isSideNavOpened.emit(true);\r\n        this.dmsSideNav.open();\r\n    }\r\n\r\n    onTreasurySystemTabCliked() {\r\n        this.isSideNavOpened.emit(true);\r\n        this.treasurySystemSideNav.open();\r\n    }\r\n\r\n    onDiscardButtonClicked(value) {\r\n        if (this.isEdit) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Discard Changes',\r\n                    text: 'You have some modification pending. Close and lose changes?',\r\n                    okButton: 'Ok',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.closeSideNavs(value.selectedOptionName);\r\n                }\r\n            });\r\n        } else {\r\n            this.closeSideNavs(value.selectedOptionName);\r\n        }\r\n        this.isSideNavOpened.emit(false);\r\n    }\r\n\r\n    closeSideNavs(selectedOptionName: string) {\r\n        if (selectedOptionName === this.mappingSetupComponent) {\r\n            this.mappingSideNav.close();\r\n        }\r\n\r\n        if (selectedOptionName === this.accountingInterfaceSetupComponent) {\r\n            this.accountingInterfaceSideNav.close();\r\n        }\r\n\r\n        if (selectedOptionName === this.dmsSetupComponent) {\r\n            this.dmsSideNav.close();\r\n        }\r\n\r\n        if (selectedOptionName === this.treasurySysteSetupComponent) {\r\n            this.treasurySystemSideNav.close();\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <h2>\\r\\n            Mapping\\r\\n        </h2>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"10px\\\"\\r\\n         class=\\\"add-line-container\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\">\\r\\n            <h6 class=\\\"no-margin\\\">Add new lines:</h6>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\"\\r\\n             fxFlex=\\\"4\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"addNewLineCtrl\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start start\\\">\\r\\n            <button mat-button\\r\\n                    [disabled]=\\\"!checkEdit\\\"\\r\\n                    (click)=\\\"onAddRowButtonClicked(addNewLineCtrl.value)\\\">PROCEED</button>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"mappingGridOptions\\\">\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"mappingRowData\\\"\\r\\n                         [columnDefs]=\\\"mappingColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"ag-grid-angular.ag-theme-material {\\n  margin: 16px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgContextualMenuComponent } from '../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AgContextualMenuAction } from '../../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MappingFields } from '../../../../../../shared/entities/mapping-entity';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-mapping',\r\n    templateUrl: './mapping.component.html',\r\n    styleUrls: ['./mapping.component.scss'],\r\n})\r\nexport class MappingComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    mappingGridContextualMenuActions: AgContextualMenuAction[];\r\n    addNewLineCtrl = new AtlasFormControl('');\r\n    mappingColumnDefs: agGrid.ColDef[];\r\n    mappingGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    checkEdit: boolean;\r\n    mappingSetUpData: MappingFields[] = [];\r\n    mappingRowData: MappingFields[];\r\n\r\n    mappingMenuActions: { [key: string]: string } = {\r\n        deleteUser: 'delete',\r\n    };\r\n    currentCompany: string;\r\n    companyId: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        public gridService: AgGridService,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.populateMappingFieldList();\r\n        this.init();\r\n        if (!this.companyId) {\r\n            this.checkEdit = true;\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord, isEdit) {\r\n        this.checkEdit = isEdit;\r\n        this.initializeGridColumns();\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    init() {\r\n        this.mappingGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.mappingMenuActions.deleteMapping,\r\n                disabled: ((params) => !this.checkEdit),\r\n            },\r\n        ];\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.mappingColumnDefs;\r\n        this.mappingGridOptions = params;\r\n        this.gridApi = this.mappingGridOptions.api;\r\n        this.gridColumnApi = this.mappingGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    loadDefaultMappingFieldSetUpEditor() {\r\n        const defaultMappingDataList = this.mappingSetUpData;\r\n        this.mappingRowData = defaultMappingDataList.map((filter) => {\r\n            return {\r\n                interface: filter.interface,\r\n                parameterName: filter.parameterName,\r\n                initialValue: filter.initialValue,\r\n                mapping: filter.mapping,\r\n            };\r\n        });\r\n        if (this.gridApi) {\r\n            if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n        }\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.mappingColumnDefs = [\r\n            {\r\n                headerName: 'Interface',\r\n                colId: 'interface',\r\n                field: 'interface',\r\n                editable: this.checkEdit,\r\n                width: 100,\r\n            },\r\n            {\r\n                headerName: 'Parameter Name',\r\n                colId: 'parameterName',\r\n                field: 'parameterName',\r\n                editable: this.checkEdit,\r\n                width: 50,\r\n            },\r\n            {\r\n                headerName: 'Initial Value',\r\n                colId: 'initialValue',\r\n                field: 'initialValue',\r\n                editable: this.checkEdit,\r\n                width: 40,\r\n            },\r\n            {\r\n                headerName: 'Mapping',\r\n                colId: 'mapping',\r\n                field: 'mapping',\r\n                editable: this.checkEdit,\r\n                width: 40,\r\n            },\r\n            {\r\n                headerName: ' ',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                        editable: this.checkEdit,\r\n                    },\r\n                    menuActions: this.mappingGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    // mockup data- will be removed and replaced with API call\r\n    populateMappingFieldList() {\r\n        this.mappingSetUpData.push\r\n            ({ interface: 'Accounting', parameterName: 'Doc Type', initialValue: 'Create reversal of Commercial', mapping: 'Regular' },\r\n             { interface: 'Accounting', parameterName: 'Doc Type', initialValue: 'Create reversal of cost invoice', mapping: 'Regular' },\r\n             { interface: 'Accounting', parameterName: 'Doc Type', initialValue: 'Commercial Invoice', mapping: 'Regular' },\r\n             { interface: 'Accounting', parameterName: 'Doc Type', initialValue: 'Commercial Cost', mapping: 'Regular' },\r\n             { interface: 'Accounting', parameterName: 'Doc Type', initialValue: 'Cost Invoice', mapping: 'Cost Invoice' },\r\n             { interface: 'Accounting', parameterName: 'Doc Type', initialValue: 'Washout', mapping: 'Washout' });\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'MappingComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.mappingSetUpData = [];\r\n        this.gridApi.forEachNode((rowdata) => {\r\n            const mappingSetUpRow = new MappingFields();\r\n            mappingSetUpRow.interface = rowdata.data.interface;\r\n            mappingSetUpRow.parameterName = rowdata.data.parameterName;\r\n            mappingSetUpRow.initialValue = rowdata.data.initialValue;\r\n            mappingSetUpRow.mapping = rowdata.data.mapping;\r\n            this.mappingSetUpData.push(mappingSetUpRow);\r\n        });\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        if (this.mappingSetUpData && this.mappingSetUpData.length > 0) {\r\n            companyConfiguration.mappingSetup = this.mappingSetUpData;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n\r\n    onAddRowButtonClicked(numberOfLines: number) {\r\n        for (let count = 1; count <= numberOfLines; count++) {\r\n            const newItem = this.createNewRowData();\r\n            this.gridApi.updateRowData({ add: [newItem] });\r\n        }\r\n        this.addNewLineCtrl.setValue('');\r\n    }\r\n\r\n    createNewRowData() {\r\n        const newData = new MappingFields();\r\n        newData.interface = '';\r\n        newData.parameterName = '';\r\n        newData.initialValue = '';\r\n        newData.mapping = '';\r\n        return newData;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <form [formGroup]=\\\"treasurySystemFormGroup\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-header fxLayoutAlign=\\\"space-between\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2>To Treasury System</h2>\\r\\n                </mat-card-title>\\r\\n                <mat-slide-toggle [formControl]=\\\"interfaceActiveCtrl\\\"\\r\\n                                  [checked]=\\\"isInterfaceActive\\\"\\r\\n                                  (change)=\\\"onInterfaceActiveToggleChanged($event)\\\">\\r\\n                    Interface Active\\r\\n                </mat-slide-toggle>\\r\\n            </mat-card-header>\\r\\n            <mat-card-content>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"start\\\"\\r\\n                     fxLayoutGap=\\\"8px\\\">\\r\\n                    <div fxFlex=\\\"20%\\\">\\r\\n                        <atlas-dropdown-select [isEditable]=\\\"interfaceSystemCtrl.enabled\\\"\\r\\n                                               label=\\\"Interface System\\\"\\r\\n                                               [fieldControl]=\\\"interfaceSystemCtrl\\\"\\r\\n                                               [options]=\\\"filteredInterfaceTypeList\\\"\\r\\n                                               displayProperty=\\\"interfaceType\\\"\\r\\n                                               [selectProperties]=\\\"['interfaceType']\\\"\\r\\n                                               isAutocompleteActivated=\\\"true\\\"\\r\\n                                               [errorMap]=\\\"treasuryInterfaceErrorMap\\\"\\r\\n                                               [hasIcon]=\\\"true\\\">\\r\\n                        </atlas-dropdown-select>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"20%\\\">\\r\\n                        <atlas-form-input [isEditable]=\\\"traxLegalEntityCodeCtrl.enabled\\\"\\r\\n                                          [fieldControl]=\\\"traxLegalEntityCodeCtrl\\\"\\r\\n                                          label=\\\"TRAX Legal Entity Code\\\"\\r\\n                                          [errorMap]=\\\"legalEntityCodeErrorMap\\\">\\r\\n                        </atlas-form-input>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </form>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".mat-toggle {\\n  font-weight: normal; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { InterfaceSetup } from '../../../../../../shared/entities/interface-setup.entity';\r\nimport { InterfaceTypes } from '../../../../../../shared/entities/interface-type.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { InterfaceType } from '../../../../../../shared/enums/interface-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-treasury-system',\r\n    templateUrl: './treasury-system.component.html',\r\n    styleUrls: ['./treasury-system.component.scss'],\r\n})\r\nexport class TreasurySystemComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    @Output() readonly treasuryInterfaceStatus = new EventEmitter<boolean>();\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    interfaceSetupIdCtrl = new AtlasFormControl('InterfaceSetupId');\r\n    interfaceActiveCtrl = new AtlasFormControl('InterfaceActive');\r\n    interfaceSystemCtrl = new AtlasFormControl('InterfaceSystem');\r\n    traxLegalEntityCodeCtrl = new AtlasFormControl('traxLegalEntityCode');\r\n    isInterfaceActive: boolean = false;\r\n    interfaceSetupList: InterfaceSetup[];\r\n    masterData: MasterData;\r\n    filteredInterfaceTypeList: InterfaceTypes[];\r\n    companyConfiguration: CompanyConfiguration;\r\n    treasurySystemFormGroup: FormGroup;\r\n    interfaceSetup: InterfaceSetup;\r\n    checkEdit: boolean;\r\n    interfaceActive: string;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    treasuryInterfaceErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    legalEntityCodeErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected configurationService: ConfigurationService,\r\n        protected snackBarService: SnackbarService,\r\n        protected utilService: UtilService,\r\n        protected formBuilder: FormBuilder) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredInterfaceType();\r\n        if (!this.companyId) {\r\n            this.interfaceActiveCtrl.setValue(false);\r\n            this.checkEdit = true;\r\n        }\r\n        this.interfaceActive = (this.isInterfaceActive) ? 'Active' : 'InActive';\r\n        this.setValidations();\r\n        this.treasuryInterfaceStatus.emit(this.isInterfaceActive);\r\n        if (!this.isInterfaceActive) {\r\n            this.traxLegalEntityCodeCtrl.disable();\r\n            this.interfaceSystemCtrl.disable();\r\n        }\r\n        this.setValidators();\r\n    }\r\n\r\n    filteredInterfaceType() {\r\n        let interfaceTypeList: InterfaceTypes[] = [];\r\n        this.filteredInterfaceTypeList = this.masterData.interfaceType.filter(\r\n            (e) => e.interfaceTypeId !== InterfaceType.AccountingInterface);\r\n        interfaceTypeList = this.filteredInterfaceTypeList;\r\n        this.interfaceSystemCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredInterfaceTypeList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                interfaceTypeList,\r\n                ['interfaceType', 'interfaceTypeId'],\r\n            );\r\n        });\r\n    }\r\n\r\n    initForm(companyConfigurationRecord, isEdit) {\r\n        this.checkEdit = isEdit;\r\n        this.interfaceSetupList = companyConfigurationRecord.interfaceSetup;\r\n        const accountingInterfaceValue = this.interfaceSetupList.find(\r\n            (e) => e.interfaceTypeId === InterfaceType.PaymentRequestInterface);\r\n        if (accountingInterfaceValue) {\r\n            this.interfaceSetupIdCtrl.setValue(accountingInterfaceValue.interfaceSetUpId);\r\n            this.interfaceActiveCtrl.setValue(accountingInterfaceValue.isActive);\r\n            this.traxLegalEntityCodeCtrl.setValue(accountingInterfaceValue.legalEntityCode);\r\n            this.isInterfaceActive = accountingInterfaceValue.isActive;\r\n            this.treasuryInterfaceStatus.emit(this.isInterfaceActive);\r\n            this.setValidations();\r\n            if (accountingInterfaceValue.interfaceTypeId) {\r\n                this.interfaceSystemCtrl.setValue(this.getInterfaceCodeFromId(accountingInterfaceValue.interfaceTypeId));\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.treasurySystemFormGroup.disable();\r\n        } else {\r\n            this.treasurySystemFormGroup.enable();\r\n        }\r\n        if (isEdit && !this.isInterfaceActive) {\r\n            this.interfaceSystemCtrl.disable();\r\n            this.traxLegalEntityCodeCtrl.disable();\r\n        }\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    getInterfaceCodeFromId(interfaceId: number) {\r\n        const interfacType = this.masterData.interfaceType.find(\r\n            (e) => e.interfaceTypeId === interfaceId);\r\n        if (interfacType) {\r\n            return interfacType.interfaceType;\r\n        }\r\n\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.treasurySystemFormGroup = this.formBuilder.group({\r\n            interfaceActiveCtrl: this.interfaceActiveCtrl,\r\n            interfaceSystemCtrl: this.interfaceSystemCtrl,\r\n            traxLegalEntityCodeCtrl: this.traxLegalEntityCodeCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'TreasurySystemComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.utilService.updateFormGroupValidity(this.treasurySystemFormGroup);\r\n        if (!this.treasurySystemFormGroup.valid) {\r\n            this.snackBarService.throwErrorSnackBar(\r\n                'Interface tab - Treasury system is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    getTreasurySystemValues() {\r\n        this.companyConfiguration = new CompanyConfiguration();\r\n        const treasuryInterfaceSystem: InterfaceSetup = new InterfaceSetup();\r\n        treasuryInterfaceSystem.interfaceSetUpId = this.interfaceSetupIdCtrl.value === '' ? null : this.interfaceSetupIdCtrl.value;\r\n        treasuryInterfaceSystem.legalEntityCode = (this.traxLegalEntityCodeCtrl.value) ? this.traxLegalEntityCodeCtrl.value : '';\r\n        treasuryInterfaceSystem.isActive = this.interfaceActiveCtrl.value ? true : false;\r\n        treasuryInterfaceSystem.interfaceTypeId = this.interfaceSystemCtrl.value.interfaceTypeId\r\n            ? this.interfaceSystemCtrl.value.interfaceTypeId : this.getInterfaceIdFromCode(this.interfaceSystemCtrl.value);\r\n        this.interfaceSetup = treasuryInterfaceSystem;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const CompanyConfigurationEntity = entity;\r\n        CompanyConfigurationEntity.interfaceSetup = [];\r\n        this.getTreasurySystemValues();\r\n        CompanyConfigurationEntity.interfaceSetup.push(this.interfaceSetup);\r\n        return CompanyConfigurationEntity;\r\n    }\r\n\r\n    getInterfaceIdFromCode(interfaceCode: string): number {\r\n        const interfaceId = this.masterData.interfaceType.find(\r\n            (e) => e.interfaceType === interfaceCode);\r\n        if (interfaceId) {\r\n            return interfaceId.interfaceTypeId;\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.interfaceSystemCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.filteredInterfaceTypeList,\r\n                    nameof<InterfaceTypes>('interfaceType'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n    }\r\n\r\n    setValidations() {\r\n        if (!this.isInterfaceActive) {\r\n            this.traxLegalEntityCodeCtrl.disable();\r\n            this.interfaceSystemCtrl.disable();\r\n            this.traxLegalEntityCodeCtrl.clearValidators();\r\n            this.interfaceSystemCtrl.clearValidators();\r\n        } else {\r\n            this.traxLegalEntityCodeCtrl.enable();\r\n            this.interfaceSystemCtrl.enable();\r\n            this.traxLegalEntityCodeCtrl.setValidators(Validators.compose([Validators.required]));\r\n            this.interfaceSystemCtrl.setValidators(Validators.compose([Validators.required]));\r\n        }\r\n        this.traxLegalEntityCodeCtrl.updateValueAndValidity();\r\n        this.interfaceSystemCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    onInterfaceActiveToggleChanged(value: MatSlideToggleChange) {\r\n        this.isInterfaceActive = value.checked;\r\n        this.setValidations();\r\n        this.treasuryInterfaceStatus.emit(this.isInterfaceActive);\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start right\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"50%\\\"\\r\\n                 [class.required-field]=\\\"defaultPaymentIDCtrl.isRequired\\\">\\r\\n                <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Default Payment Terms\\\"\\r\\n                           [matAutocomplete]=\\\"paymentTermsTypes\\\"\\r\\n                           [formControl]=\\\"defaultPaymentIDCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [matTooltip]=\\\"'Payment Terms'\\\">\\r\\n                    <mat-autocomplete #paymentTermsTypes=\\\"matAutocomplete\\\"\\r\\n                                      [panelWidth]=\\\"panelSize\\\">\\r\\n                        <mat-option *ngFor=\\\"let paymentTerm of PaymentTermType\\\"\\r\\n                                    [value]=\\\"paymentTerm.paymentTermCode\\\">\\r\\n                            {{paymentTerm.paymentTermCode}}\\r\\n                        </mat-option>\\r\\n                    </mat-autocomplete>\\r\\n                    <mat-error *ngIf=\\\"defaultPaymentIDCtrl.hasError('inDropdownList')\\\">\\r\\n                        Value not in list\\r\\n                    </mat-error>\\r\\n                    <mat-error *ngIf=\\\"defaultPaymentIDCtrl.hasError('required')\\\">\\r\\n                        Required *\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"defaultPaymentIDCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { PaymentTerm } from '../../../../../../shared/entities/payment-term.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-default-payment-terms',\r\n    templateUrl: './default-payment-terms.component.html',\r\n    styleUrls: ['./default-payment-terms.component.scss'],\r\n})\r\n\r\nexport class DefaultPaymentTermsComponent extends BaseFormComponent implements OnInit {\r\n    defaultPaymentIDCtrl = new AtlasFormControl('defaultPaymentIDCtrl');\r\n    masterdata: MasterData = new MasterData();\r\n    PaymentTermType: PaymentTerm[];\r\n    selectedValue = '';\r\n    model: CompanyConfigurationRecord;\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.PaymentTermType = this.masterdata.paymentTerms;\r\n        this.defaultPaymentIDCtrl.valueChanges.subscribe((input) => {\r\n            this.PaymentTermType = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.paymentTerms,\r\n                ['paymentTermCode', 'description'],\r\n            );\r\n        });\r\n        this.setValidators();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            defaultPaymentIDCtrl: this.defaultPaymentIDCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit): any {\r\n        const companyConfiguration = entity;\r\n        this.model = companyConfiguration;\r\n\r\n        if (this.model.invoiceSetup) {\r\n            if (this.model.invoiceSetup.paymentTermCode !== null && this.model.invoiceSetup.paymentTermCode !== '') {\r\n                this.defaultPaymentIDCtrl.setValue(this.model.invoiceSetup.paymentTermCode);\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n\r\n        return entity;\r\n    }\r\n\r\n    setValidators() {\r\n        this.defaultPaymentIDCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterdata.paymentTerms,\r\n                    nameof<PaymentTerm>('paymentTermCode'),\r\n                ),\r\n            ]));\r\n        this.defaultPaymentIDCtrl.setValidators([\r\n            Validators.compose([Validators.required]),\r\n        ]);\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        companyConfiguration.invoiceSetup.paymentTermId = this.masterdata.paymentTerms.find((item) =>\r\n            item.paymentTermCode === this.defaultPaymentIDCtrl.value).paymentTermsId;\r\n\r\n        return companyConfiguration;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"start\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n     fxLayoutGap=\\\"16px\\\"\\r\\n     class=\\\"grid-main-tab\\\">\\r\\n    <atlas-treshold-cost-amount #tresholdCostAmountComponent\\r\\n                                fxFlexOrder.lt-md=\\\"1\\\"\\r\\n                                fxFlex=\\\"49%\\\"></atlas-treshold-cost-amount>\\r\\n    <atlas-default-payment-terms #defaultPaymentTermsComponent\\r\\n                                 fxFlexOrder.lt-md=\\\"2\\\"\\r\\n                                 fxFlex=\\\"49%\\\"></atlas-default-payment-terms>\\r\\n\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { DefaultPaymentTermsComponent } from './default-payment-terms/default-payment-terms.component';\r\nimport { TresholdCostAmountComponent } from './treshold-cost-amount/treshold-cost-amount.component';\r\n\r\n@Component({\r\n    selector: 'atlas-invoice-tab',\r\n    templateUrl: './invoice-tab.component.html',\r\n    styleUrls: ['./invoice-tab.component.scss'],\r\n})\r\nexport class InvoiceTabComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('tresholdCostAmountComponent') tresholdCostAmountComponent: TresholdCostAmountComponent;\r\n    @ViewChild('defaultPaymentTermsComponent') defaultPaymentTermsComponent: DefaultPaymentTermsComponent;\r\n    formComponents: BaseFormComponent[] = [];\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.formComponents.push(\r\n            this.tresholdCostAmountComponent,\r\n            this.defaultPaymentTermsComponent,\r\n        );\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            tresholdCostAmountGroup: this.tresholdCostAmountComponent.getFormGroup(),\r\n            defaultPaymentTermsGroup: this.defaultPaymentTermsComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.initForm(entity, isEdit);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"50%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [textMask]=\\\"{mask:mask}\\\"\\r\\n                           fxFlex=\\\"25%\\\"\\r\\n                           placeholder=\\\"Threshold for Cost vs Estimate\\\"\\r\\n                           [formControl]=\\\"thresholdIDCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { CustomNumberMask } from '../../../../../../shared/numberMask';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-treshold-cost-amount',\r\n    templateUrl: './treshold-cost-amount.component.html',\r\n    styleUrls: ['./treshold-cost-amount.component.scss'],\r\n})\r\n\r\nexport class TresholdCostAmountComponent extends BaseFormComponent implements OnInit {\r\n    thresholdIDCtrl = new AtlasFormControl('thresholdIDCtrl');\r\n    invoiceSetUpId: number;\r\n    model: CompanyConfigurationRecord;\r\n    mask = CustomNumberMask(12, 10, false);\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            thresholdIDCtrl: this.thresholdIDCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit): any {\r\n        const companyConfiguration = entity;\r\n        this.model = companyConfiguration;\r\n\r\n        if (this.model.invoiceSetup) {\r\n            this.thresholdIDCtrl.setValue(this.model.invoiceSetup.thresholdCostAmount);\r\n            this.invoiceSetUpId = this.model.invoiceSetup.invoiceSetupId;\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        companyConfiguration.invoiceSetup.thresholdCostAmount = (this.thresholdIDCtrl.value) ? (this.thresholdIDCtrl.value) : 0.00;\r\n        companyConfiguration.invoiceSetup.thresholdCostAmount = Number(companyConfiguration.invoiceSetup.thresholdCostAmount\r\n            .toString().replace('%', ''));\r\n        companyConfiguration.invoiceSetup.invoiceSetupId = this.invoiceSetUpId;\r\n        return companyConfiguration;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"start\\\">\\r\\n            <h1>Accounting Parameter </h1>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"custom-form\\\"\\r\\n             fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"end start\\\"\\r\\n             [class.isEmpty]=\\\"!yearCtrl.value\\\">\\r\\n            <atlas-year-picker [isEditable]=\\\"checkEdit\\\"\\r\\n                               [disabled]=\\\"!checkEdit\\\"\\r\\n                               label=\\\"Year\\\"\\r\\n                               (yearChanged)=\\\"onChosenYearSelected($event)\\\"\\r\\n                               [fieldControl]=\\\"yearCtrl\\\">\\r\\n            </atlas-year-picker>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start none\\\">\\r\\n        <mat-card fxFlex=\\\"100%\\\">\\r\\n            <div ag-grid=\\\"accountingGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n                <ag-grid-angular style=\\\"height:100%\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"accountingRowData\\\"\\r\\n                                 [columnDefs]=\\\"accountingColumnDefs\\\"\\r\\n                                 [gridOptions]=\\\"accountingGridOptions\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 [suppressNoRowsOverlay]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 enableFilter\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                                 [frameworkComponents]=\\\"gridComponents\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isLoading\\\"\\r\\n                 class=\\\"loading\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { AccountingParameter } from '../../../../../../shared/entities/accounting-parameter.entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { WINDOW } from '../../../../../../shared/entities/window-injection-token';\r\nimport { ItParameterDocumentTypes } from '../../../../../../shared/enums/itparameter-documenttype.enum';\r\nimport { IntegerNumber } from '../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-accounting-parameters',\r\n    templateUrl: './accounting-parameters.component.html',\r\n    styleUrls: ['./accounting-parameters.component.scss'],\r\n})\r\nexport class AccountingParametersComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    accountingColumnDefs: agGrid.ColDef[];\r\n    accountingGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    checkEdit: boolean = false;\r\n    modifiedAccountingSetUpData: AccountingParameter[] = [];\r\n    accountingRowData: AccountingParameter[] = [];\r\n    yearCtrl = new AtlasFormControl('year');\r\n    dailyDefault: moment.Moment;\r\n    now: moment.Moment;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    isValidAccountingForm: boolean = true;\r\n    subscription: Subscription[] = [];\r\n    masterData: MasterData;\r\n    isLoading: boolean;\r\n    requiredString: string = 'Required*';\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n    private readonly nextNumberMessage = 'NextNumber must be greater than previous number';\r\n    private readonly numberNotAvailableMessage = 'Next number cannot be empty';\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService,\r\n        protected configurationService: ConfigurationService,\r\n        private route: ActivatedRoute,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService) {\r\n        super(formConfigurationProvider);\r\n        this.now = this.companyManager.getCurrentCompanyDate();\r\n        this.dailyDefault = this.now.clone().subtract(1, 'days').endOf('day').subtract(1, 'seconds');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.yearCtrl.setValue(this.dailyDefault);\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        if (!this.companyId) {\r\n            this.checkEdit = true;\r\n            // bind description\r\n            this.bindGridValuesForCreateCompany();\r\n        }\r\n    }\r\n\r\n    bindGridValuesForCreateCompany() {\r\n        this.accountingRowData = [];\r\n        if (this.masterData.transactionDocumentType && this.masterData.transactionDocumentType.length > 0) {\r\n            this.masterData.transactionDocumentType.forEach((a) => {\r\n                const item = new AccountingParameter();\r\n                item.transactionDocumentTypeId = a.transactionDocumentTypeId;\r\n                item.description = this.bindDescription(a.transactionDocumentTypeId);\r\n                item.nextNumber = 1;\r\n                item.oldNumber = 1;\r\n                if (item.description) {\r\n                    this.accountingRowData.push(item);\r\n                }\r\n            });\r\n        }\r\n        if (this.gridApi) {\r\n            this.gridApi.sizeColumnsToFit();\r\n        }\r\n        this.initializeGridColumns();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n    initForm(entity: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.checkEdit = isEdit;\r\n        const accountingParameterSetup: AccountingParameter[] = entity.accountingParameters;\r\n        this.initializeGridColumns();\r\n        this.bindDocumentTypeDescription(accountingParameterSetup);\r\n        return entity;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.accountingColumnDefs;\r\n        this.accountingGridOptions = params;\r\n        this.gridApi = this.accountingGridOptions.api;\r\n        this.gridColumnApi = this.accountingGridOptions.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.accountingColumnDefs = [\r\n            {\r\n                headerName: 'Configurable Values',\r\n                colId: 'description',\r\n                field: 'description',\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                colId: 'nextNumber',\r\n                field: 'nextNumber',\r\n                editable: this.checkEdit,\r\n                cellEditor: 'atlasNumeric',\r\n                cellRenderer: this.requiredString,\r\n                cellEditorParams: {\r\n                    displayMask: IntegerNumber(),\r\n                    isRightAligned: true,\r\n                },\r\n                type: 'numericColumn',\r\n                onCellValueChanged: (params) => {\r\n                    const oldNumber = params.data.oldNumber;\r\n                    if (oldNumber) {\r\n                        if (params.data.nextNumber < oldNumber) {\r\n                            params.node.setDataValue('nextNumber', oldNumber);\r\n                            this.snackbarService.throwErrorSnackBar(this.nextNumberMessage);\r\n                        }\r\n                        if (!params.data.nextNumber) {\r\n                            params.node.setDataValue('nextNumber', oldNumber);\r\n                            this.snackbarService.throwErrorSnackBar(this.numberNotAvailableMessage);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Old Number',\r\n                colId: 'oldNumber',\r\n                field: 'oldNumber',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'TransactionDocumentTypeId',\r\n                colId: 'transactionDocumentTypeId',\r\n                field: 'transactionDocumentTypeId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'transactionDocumentTypeCompanySetupId',\r\n                colId: 'transactionDocumentTypeCompanySetupId',\r\n                field: 'transactionDocumentTypeCompanySetupId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Year',\r\n                colId: 'year',\r\n                field: 'year',\r\n                hide: true,\r\n            },\r\n        ];\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfigurationRecord): CompanyConfigurationRecord {\r\n        const companyConfiguration = entity;\r\n        this.modifiedAccountingSetUpData = [];\r\n        this.gridApi.forEachNode((rowdata) => {\r\n            const item = new AccountingParameter();\r\n            if (!rowdata.data.nextNumber || rowdata.data.nextNumber === 0) {\r\n                this.isValidAccountingForm = false;\r\n            }\r\n            item.transactionDocumentTypeId = rowdata.data.transactionDocumentTypeId;\r\n            item.transactionDocumentTypeCompanySetupId = rowdata.data.transactionDocumentTypeCompanySetupId;\r\n            item.nextNumber = rowdata.data.nextNumber;\r\n            item.year = Number(this.yearCtrl.value.year());\r\n            this.modifiedAccountingSetUpData.push(item);\r\n        });\r\n        if (this.modifiedAccountingSetUpData && this.modifiedAccountingSetUpData.length > 0) {\r\n            companyConfiguration.accountingParameters = this.modifiedAccountingSetUpData;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n\r\n    bindDocumentTypeDescription(accountingParameterSetup: AccountingParameter[]) {\r\n        this.accountingRowData = [];\r\n        if (accountingParameterSetup && accountingParameterSetup.length > 0) {\r\n            this.yearCtrl.setValue(moment(new Date(accountingParameterSetup[0].year.toString())));\r\n            accountingParameterSetup.forEach((accountingSetup) => {\r\n                if (accountingSetup.nextNumber) {\r\n                    if (accountingSetup.nextNumber > 0) {\r\n                        accountingSetup.oldNumber = accountingSetup.nextNumber;\r\n                    } else if (accountingSetup.nextNumber === 0) {\r\n                        accountingSetup.oldNumber = 1;\r\n                        accountingSetup.nextNumber = 1;\r\n                    }\r\n                }\r\n                // add desciption for accounting Parameter\r\n                const result = this.bindDescription(accountingSetup.transactionDocumentTypeId);\r\n                if (result) {\r\n                    accountingSetup.description = result;\r\n                }\r\n            });\r\n        }\r\n        // avoid rows which does not have description\r\n        const data: AccountingParameter[] = [];\r\n        accountingParameterSetup.forEach((item) => {\r\n            if (item.description) {\r\n                data.push(item);\r\n            }\r\n        });\r\n        this.accountingRowData = data;\r\n        (this.accountingRowData && this.gridApi) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();\r\n    }\r\n\r\n    bindDescription(value: number): string {\r\n        let result = null;\r\n        switch (value) {\r\n            case ItParameterDocumentTypes.PurchaseInvoice:\r\n                result = 'Next number for Purchase invoice';\r\n                break;\r\n            case ItParameterDocumentTypes.SalesInvoice:\r\n                result = 'Next number for Sales invoice';\r\n                break;\r\n            case ItParameterDocumentTypes.CreditNote:\r\n                result = 'Next number for Credit notes';\r\n                break;\r\n            case ItParameterDocumentTypes.DebitNote:\r\n                result = 'Next number for Debit notes';\r\n                break;\r\n            case ItParameterDocumentTypes.CashPay:\r\n                result = 'Next number for Cash paid';\r\n                break;\r\n            case ItParameterDocumentTypes.CashReceipt:\r\n                result = 'Next number for Cash received';\r\n                break;\r\n            case ItParameterDocumentTypes.TemporaryAdjustment:\r\n                result = 'Next number for Temporary Adjustment';\r\n                break;\r\n            case ItParameterDocumentTypes.MatchingCash:\r\n                result = 'Next number for Matching Cash';\r\n                break;\r\n            case ItParameterDocumentTypes.RegularJournal:\r\n                result = 'Next number for Regular Journal';\r\n                break;\r\n            case ItParameterDocumentTypes.FxDealJournal:\r\n                result = 'Next number for FX Deal Journal';\r\n                break;\r\n            case ItParameterDocumentTypes.YearEndDocument:\r\n                result = 'Next number for Year End Document';\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    onChosenYearSelected(event: any) {\r\n        const selectedValue: Date = event.toDate();\r\n        if (selectedValue) {\r\n            const selectedYear = selectedValue.getFullYear();\r\n            if (selectedYear) {\r\n                this.isLoading = true;\r\n                if (this.companyId) {\r\n                    this.accountingRowData = [];\r\n                    this.subscription.push(this.configurationService.getAccountingParameterDetails(this.companyId, selectedYear)\r\n                        .pipe(\r\n                            finalize(() => {\r\n                                this.isLoading = false;\r\n                            }))\r\n                        .subscribe((accountingParameterDetails: AccountingParameter[]) => {\r\n                            if (accountingParameterDetails && accountingParameterDetails.length > 0) {\r\n                                const accountingParameterSetup: AccountingParameter[] = accountingParameterDetails;\r\n                                this.initializeGridColumns();\r\n                                this.bindDocumentTypeDescription(accountingParameterSetup);\r\n                            } else {\r\n                                this.bindGridValuesForCreateCompany();\r\n                            }\r\n                        }));\r\n                } else {\r\n                    this.bindGridValuesForCreateCompany();\r\n                    this.isLoading = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <h1>\\r\\n            Freeze Parameter\\r\\n        </h1>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"freezeGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"freezeRowData\\\"\\r\\n                         [columnDefs]=\\\"freezeColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                         [frameworkComponents]=\\\"gridComponents\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { FreezeParameter } from '../../../../../../shared/entities/freeze-parameter.entity';\r\nimport { RetentionPolicy } from '../../../../../../shared/entities/retention-policy.entity';\r\nimport { WINDOW } from '../../../../../../shared/entities/window-injection-token';\r\nimport { IntegerNumber } from '../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-freeze-parameters',\r\n    templateUrl: './freeze-parameters.component.html',\r\n    styleUrls: ['./freeze-parameters.component.scss'],\r\n})\r\nexport class FreezeParametersComponent extends BaseFormComponent implements OnInit {\r\n    freezeColumnDefs: agGrid.ColDef[];\r\n    freezeGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    freezeParameter: FreezeParameter[];\r\n    freezeRowData: FreezeParameter[];\r\n    retentionPolicyResult: RetentionPolicy;\r\n    retentionPolicy: RetentionPolicy;\r\n    checkEdit: boolean = false;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    isCreate: boolean;\r\n    dailyFreezeId: string = 'dailyFreezeRetention';\r\n    weeklyFreezeId: string = 'weeklyFreezeRetention';\r\n    monthlyFreezeId: string = 'monthlyFreezeRetention';\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        public gridService: AgGridService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.isCreate = false;\r\n        if (!this.companyId) {\r\n            this.isCreate = true;\r\n            this.checkEdit = true;\r\n            this.loadFreezeData();\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.retentionPolicy = companyConfigurationRecord.retentionPolicy;\r\n        this.checkEdit = isEdit;\r\n        this.loadFreezeData();\r\n        this.initializeGridColumns();\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.freezeColumnDefs;\r\n        this.freezeGridOptions = params;\r\n        this.gridApi = this.freezeGridOptions.api;\r\n        this.gridColumnApi = this.freezeGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.freezeColumnDefs = [\r\n            {\r\n                headerName: 'Configurable Values',\r\n                colId: 'freezeLabel',\r\n                field: 'freezeLabel',\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                colId: 'freezeValue',\r\n                field: 'freezeValue',\r\n                editable: this.checkEdit,\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: IntegerNumber(),\r\n                    isRightAligned: true,\r\n                },\r\n                type: 'numericColumn',\r\n            },\r\n            {\r\n                headerName: 'id',\r\n                colId: 'freezeId',\r\n                field: 'freezeId',\r\n                hide: true,\r\n            },\r\n        ];\r\n    }\r\n\r\n    loadFreezeData() {\r\n        this.freezeParameter = this.freezeRowData = [];\r\n        this.freezeParameter.push(\r\n            {\r\n                freezeId: 'dailyFreezeRetention',\r\n                freezeLabel: 'Daily Freeze Retention',\r\n                freezeValue: (!this.isCreate) ? this.retentionPolicy.dailyFreezeRetention : 0,\r\n            },\r\n            {\r\n                freezeId: 'weeklyFreezeRetention',\r\n                freezeLabel: 'Weekly Freeze Retention',\r\n                freezeValue: (!this.isCreate) ? this.retentionPolicy.weeklyFreezeRetention : 0,\r\n            },\r\n            {\r\n                freezeId: 'monthlyFreezeRetention',\r\n                freezeLabel: 'Monthly Freeze Retention',\r\n                freezeValue: (!this.isCreate) ? this.retentionPolicy.monthlyFreezeRetention : 0,\r\n            },\r\n        );\r\n        this.freezeRowData = this.freezeParameter;\r\n    }\r\n\r\n    getFreezeValuesToSave(): RetentionPolicy {\r\n        const dailyFreeze = this.freezeParameter.find((e) => e.freezeId === this.dailyFreezeId);\r\n        const weeklyFreeze = this.freezeParameter.find((e) => e.freezeId === this.weeklyFreezeId);\r\n        const monthlyFreeze = this.freezeParameter.find((e) => e.freezeId === this.monthlyFreezeId);\r\n        this.retentionPolicyResult = new RetentionPolicy();\r\n        this.retentionPolicyResult.dailyFreezeRetention = (dailyFreeze) ? dailyFreeze.freezeValue : 0;\r\n        this.retentionPolicyResult.weeklyFreezeRetention = (weeklyFreeze) ? weeklyFreeze.freezeValue : 0;\r\n        this.retentionPolicyResult.monthlyFreezeRetention = (monthlyFreeze) ? monthlyFreeze.freezeValue : 0;\r\n        return this.retentionPolicyResult;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        if (this.freezeParameter && this.freezeParameter.length > 0) {\r\n            this.getFreezeValuesToSave();\r\n            companyConfiguration.retentionPolicy.dailyFreezeRetention = this.retentionPolicyResult.dailyFreezeRetention;\r\n            companyConfiguration.retentionPolicy.monthlyFreezeRetention = this.retentionPolicyResult.monthlyFreezeRetention;\r\n            companyConfiguration.retentionPolicy.weeklyFreezeRetention = this.retentionPolicyResult.weeklyFreezeRetention;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\"\\r\\n     fxLayoutGap=\\\"16px\\\">\\r\\n    <div class=\\\"itparameters-card\\\">\\r\\n        <atlas-accounting-parameters #accountingParameterComponent\\r\\n                                     fxFlexOrder.lt-md=\\\"1\\\"></atlas-accounting-parameters>\\r\\n    </div>\\r\\n    <div class=\\\"itparameters-card\\\">\\r\\n        <atlas-trade-parameters #tradeParameterComponent\\r\\n                                fxFlexOrder.lt-md=\\\"2\\\"></atlas-trade-parameters>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\"\\r\\n     fxLayoutGap=\\\"16px\\\">\\r\\n    <div class=\\\"itparameters-card\\\">\\r\\n        <atlas-freeze-parameters #freezeParameterComponent\\r\\n                                 fxFlexOrder.lt-md=\\\"1\\\"></atlas-freeze-parameters>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".itparameters-card {\\n  min-width: 600px;\\n  min-height: 300px;\\n  float: left; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CompanyConfiguration } from '../../../../../shared/entities/company-configuration.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { AccountingParametersComponent } from './accounting-parameters/accounting-parameters.component';\r\nimport { FreezeParametersComponent } from './freeze-parameters/freeze-parameters.component';\r\nimport { TradeParametersComponent } from './trade-parameters/trade-parameters.component';\r\n\r\n@Component({\r\n    selector: 'atlas-itparameters-tab',\r\n    templateUrl: './itparameters-tab.component.html',\r\n    styleUrls: ['./itparameters-tab.component.scss'],\r\n})\r\nexport class ItparametersTabComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('accountingParameterComponent') accountingParameterComponent: AccountingParametersComponent;\r\n    @ViewChild('tradeParameterComponent') tradeParameterComponent: TradeParametersComponent;\r\n    @ViewChild('freezeParameterComponent') freezeParameterComponent: FreezeParametersComponent;\r\n    formComponents: BaseFormComponent[] = [];\r\n    companyConfigurationRecord: CompanyConfigurationRecord;\r\n    masterData: MasterData;\r\n    company: string;\r\n    isEdit: boolean;\r\n    currentCompany: string;\r\n    subscriptions: Subscription[] = [];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected formBuilder: FormBuilder,\r\n        protected configurationService: ConfigurationService) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.formComponents.push(\r\n            this.accountingParameterComponent,\r\n            this.tradeParameterComponent,\r\n            this.freezeParameterComponent,\r\n        );\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit): CompanyConfigurationRecord {\r\n        this.companyConfigurationRecord = companyConfigurationRecord;\r\n        this.formComponents.forEach((comp) => {\r\n            comp.initForm(companyConfigurationRecord, isEdit);\r\n        });\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <h1>\\r\\n            Trade Parameter\\r\\n        </h1>\\r\\n    </div>\\r\\n    <div ag-grid=\\\"tradeGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"tradeRowData\\\"\\r\\n                         [columnDefs]=\\\"tradeColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight\\r\\n                         [frameworkComponents]=\\\"gridComponents\\\">\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { TradeParameter } from '../../../../../../shared/entities/trade-parameter.entity';\r\nimport { WINDOW } from '../../../../../../shared/entities/window-injection-token';\r\nimport { ItParameterDocumentTypes } from '../../../../../../shared/enums/itparameter-documenttype.enum';\r\nimport { IntegerNumber } from '../../../../../../shared/numberMask';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-trade-parameters',\r\n    templateUrl: './trade-parameters.component.html',\r\n    styleUrls: ['./trade-parameters.component.scss'],\r\n})\r\nexport class TradeParametersComponent extends BaseFormComponent implements OnInit {\r\n    tradeColumnDefs: agGrid.ColDef[];\r\n    tradeGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    checkEdit: boolean = false;\r\n    modifiedTradeSetUpData: TradeParameter[] = [];\r\n    tradeRowData: TradeParameter[] = [];\r\n    currentCompany: string;\r\n    companyId: string;\r\n    requiredString: string = 'Required*';\r\n    isValidTradeForm: boolean = true;\r\n    masterData: MasterData;\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n    };\r\n    private readonly nextNumberMessage = 'NextNumber must be greater than previous number';\r\n    private readonly numberNotAvailableMessage = 'Next Number cannot be empty';\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        @Inject(WINDOW) private window: Window,\r\n        public gridService: AgGridService,\r\n        private route: ActivatedRoute,\r\n        protected snackbarService: SnackbarService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        if (!this.companyId) {\r\n            this.checkEdit = true;\r\n            // bind description\r\n            if (this.masterData.contractTypes && this.masterData.contractTypes.length > 0) {\r\n                this.masterData.contractTypes.forEach((a) => {\r\n                    const item = new TradeParameter();\r\n                    item.contractTypeCode = a.enumEntityId;\r\n                    item.description = this.bindDescription(a.enumEntityId);\r\n                    item.nextNumber = 1;\r\n                    item.oldNumber = 1;\r\n                    if (item.description) {\r\n                        this.tradeRowData.push(item);\r\n                    }\r\n                });\r\n            }\r\n            if (this.gridApi) {\r\n                this.gridApi.sizeColumnsToFit();\r\n            }\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    initForm(entity: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.checkEdit = isEdit;\r\n        const tradeNextNumberDetails = entity.tradeParameters;\r\n        if (this.gridApi) {\r\n            this.gridApi.sizeColumnsToFit();\r\n        }\r\n        this.initializeGridColumns();\r\n        this.bindDocumentTypeDescription(tradeNextNumberDetails);\r\n        return entity;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.tradeColumnDefs;\r\n        this.tradeGridOptions = params;\r\n        this.gridApi = this.tradeGridOptions.api;\r\n        this.gridColumnApi = this.tradeGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.tradeColumnDefs = [\r\n            {\r\n                headerName: 'Configurable Values',\r\n                colId: 'description',\r\n                field: 'description',\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                colId: 'nextNumber',\r\n                field: 'nextNumber',\r\n                editable: this.checkEdit,\r\n                cellEditor: 'atlasNumeric',\r\n                cellRenderer: this.requiredString,\r\n                cellEditorParams: {\r\n                    displayMask: IntegerNumber(),\r\n                    isRightAligned: true,\r\n                },\r\n                type: 'numericColumn',\r\n                onCellValueChanged: (params) => {\r\n                    const oldNumber = params.data.oldNumber;\r\n                    if (oldNumber) {\r\n                        if (params.data.nextNumber < oldNumber) {\r\n                            params.node.setDataValue('nextNumber', oldNumber);\r\n                            this.snackbarService.throwErrorSnackBar(this.nextNumberMessage);\r\n                        }\r\n                        if (!params.data.nextNumber) {\r\n                            params.node.setDataValue('nextNumber', oldNumber);\r\n                            this.snackbarService.throwErrorSnackBar(this.numberNotAvailableMessage);\r\n                        }\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Old Number',\r\n                colId: 'oldNumber',\r\n                field: 'oldNumber',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'ContractTypeCode',\r\n                colId: 'contractTypeCode',\r\n                field: 'contractTypeCode',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'contractTypeCompanySetupId',\r\n                colId: 'contractTypeCompanySetupId',\r\n                field: 'contractTypeCompanySetupId',\r\n                hide: true,\r\n            },\r\n        ];\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        this.modifiedTradeSetUpData = [];\r\n        this.gridApi.forEachNode((rowdata: agGrid.RowNode) => {\r\n            const item = new TradeParameter();\r\n            if (!rowdata.data.nextNumber || rowdata.data.nextNumber === 0) {\r\n                this.isValidTradeForm = false;\r\n            }\r\n            item.contractTypeCode = rowdata.data.contractTypeCode;\r\n            item.contractTypeCompanySetupId = rowdata.data.contractTypeCompanySetupId;\r\n            item.nextNumber = rowdata.data.nextNumber;\r\n            this.modifiedTradeSetUpData.push(item);\r\n        });\r\n        if (this.modifiedTradeSetUpData && this.modifiedTradeSetUpData.length > 0) {\r\n            companyConfiguration.tradeParameters = this.modifiedTradeSetUpData;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n\r\n    bindDocumentTypeDescription(tradeNextNumberDetails: TradeParameter[]) {\r\n        if (tradeNextNumberDetails) {\r\n            tradeNextNumberDetails.forEach((tradeSetup) => {\r\n                tradeSetup.oldNumber = tradeSetup.nextNumber;\r\n                // add description for accounting Parameter\r\n                const result = this.bindDescription(tradeSetup.contractTypeCode);\r\n                if (result) {\r\n                    tradeSetup.description = result;\r\n                }\r\n            });\r\n            // avoid rows which does not have description\r\n            const data: TradeParameter[] = [];\r\n            tradeNextNumberDetails.forEach((item) => {\r\n                if (item.description) {\r\n                    data.push(item);\r\n                }\r\n            });\r\n            this.tradeRowData = data;\r\n        }\r\n    }\r\n\r\n    bindDescription(value: number): string {\r\n        let result = null;\r\n        switch (value) {\r\n            case ItParameterDocumentTypes.Purchase:\r\n                result = 'Next number for Purchase Contract';\r\n                break;\r\n            case ItParameterDocumentTypes.Sale:\r\n                result = 'Next number for Sales Contract';\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"start\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n     fxLayoutGap=\\\"16px\\\"\\r\\n     [formGroup]=\\\"mainTabFormGroup\\\">\\r\\n    <atlas-identity #identityComponent\\r\\n                    fxFlexOrder.lt-md=\\\"1\\\"\\r\\n                    fxFlex=\\\"49%\\\"></atlas-identity>\\r\\n    <atlas-location #locationComponent\\r\\n                    fxFlexOrder.lt-md=\\\"2\\\"\\r\\n                    fxFlex=\\\"49%\\\"></atlas-location>\\r\\n</div>\\r\\n<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"start\\\"\\r\\n     fxLayoutAlign.lt-md=\\\"space-around center\\\"\\r\\n     fxLayoutGap=\\\"16px\\\"\\r\\n     [formGroup]=\\\"mainTabFormGroup\\\">\\r\\n    <atlas-details #detailsComponent\\r\\n                   fxFlexOrder.lt-md=\\\"1\\\"\\r\\n                   fxFlex=\\\"49%\\\"></atlas-details>\\r\\n    <atlas-default-broker #defaultBrokerComponent\\r\\n                          fxFlexOrder.lt-md=\\\"2\\\"\\r\\n                          fxFlex=\\\"49%\\\"></atlas-default-broker>\\r\\n</div>\"","module.exports = \"atlas-identity,\\natlas-location,\\natlas-details {\\n  width: 49%; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { DefaultBrokerComponent } from './default-broker/default-broker.component';\r\nimport { DetailsComponent } from './details/details.component';\r\nimport { IdentityComponent } from './identity/identity.component';\r\nimport { LocationComponent } from './location/location.component';\r\n\r\n@Component({\r\n    selector: 'atlas-company-management-main-tab',\r\n    templateUrl: './company-management-main-tab.component.html',\r\n    styleUrls: ['./company-management-main-tab.component.scss'],\r\n})\r\nexport class CompanyManagementMainTabComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('identityComponent') identityComponent: IdentityComponent;\r\n    @ViewChild('locationComponent') locationComponent: LocationComponent;\r\n    @ViewChild('detailsComponent') detailsComponent: DetailsComponent;\r\n    @ViewChild('defaultBrokerComponent') defaultBrokerComponent: DefaultBrokerComponent;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    mainTabFormGroup: FormGroup;\r\n    editMainTab: boolean;\r\n    currentCompany: string;\r\n    companyId: any;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private authorizationService: AuthorizationService,\r\n        private securityService: SecurityService) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.formComponents.push(\r\n            this.identityComponent,\r\n            this.locationComponent,\r\n            this.detailsComponent,\r\n            this.defaultBrokerComponent,\r\n        );\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.currentCompany, 'Administration')\r\n                && this.authorizationService.isPrivilegeAllowed(this.currentCompany, 'CompanyConfRead')) {\r\n                this.editMainTab = this.authorizationService.isPrivilegeAllowed(this.currentCompany, 'CompanyConfEditMain');\r\n            }\r\n        });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.mainTabFormGroup = this.formBuilder.group({\r\n            identityGroup: this.identityComponent.getFormGroup(),\r\n            locationGroup: this.locationComponent.getFormGroup(),\r\n            detailsGroup: this.detailsComponent.getFormGroup(),\r\n            defaultBrokerComponent: this.defaultBrokerComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: any, isEdit): any {\r\n        this.formComponents.forEach((comp) => {\r\n            companyConfigurationRecord = comp.initForm(companyConfigurationRecord, isEdit);\r\n        });\r\n        if (!this.editMainTab) {\r\n            this.mainTabFormGroup.disable();\r\n        }\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card commodity-details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>FX Deal</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"1%\\\">\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-masterdata-user-preferences-input class=\\\"contextual-search-for-control\\\"\\r\\n                                                         isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"defaultBrokerCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCounterparties\\\"\\r\\n                                                         label=\\\"Bank/broker\\\"\\r\\n                                                         displayProperty=\\\"counterpartyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['counterpartyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"brokerErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Counterparty\\\"\\r\\n                                                         gridId=\\\"counterpartiesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"onCounterpartyCodeSelected($event)\\\"\\r\\n                                                         (valueChange)='onCounterpartyValueChanged($event)'>\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\">\\r\\n                <atlas-form-input [fieldControl]=\\\"defaultBrokerDescriptionCtrl\\\"\\r\\n                                  [errorMap]=\\\"brokerDescriptionErrorMap\\\"\\r\\n                                  [required]=\\\"defaultBrokerDescriptionCtrl.isRequired\\\"\\r\\n                                  label=\\\"Bank/broker description\\\">\\r\\n                </atlas-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { Counterparty } from '../../../../../../shared/entities/counterparty.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { BankBrokerContextualDataLoader } from '../../../../../../shared/services/trading/bank-broker-contextual-data-loader';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-default-broker',\r\n    templateUrl: './default-broker.component.html',\r\n    styleUrls: ['./default-broker.component.scss'],\r\n    providers: [BankBrokerContextualDataLoader],\r\n})\r\nexport class DefaultBrokerComponent extends BaseFormComponent implements OnInit {\r\n\r\n    defaultBrokerCtrl = new AtlasFormControl('DefaultBroker');\r\n    defaultBrokerDescriptionCtrl = new AtlasFormControl('DefaultBrokerDescription');\r\n\r\n    formGroup: FormGroup;\r\n    masterdata: MasterData;\r\n    filteredCounterparties: Counterparty[];\r\n    counterparties: Counterparty[];\r\n    bankBrokerId: number;\r\n    brokerDescription: string;\r\n\r\n    brokerErrorMap: Map<string, string> = new Map()\r\n\r\n        .set('inDropdownList', 'Invalid entry. Bank not in the list or not authorized.');\r\n\r\n    brokerDescriptionErrorMap: Map<string, string> = new Map()\r\n        .set('maxLength', 'Maximum length should be 200 characters');\r\n\r\n    constructor(protected route: ActivatedRoute,\r\n        protected utilService: UtilService,\r\n        protected formBuilder: FormBuilder,\r\n        public bankBrokerContextualDataLoader: BankBrokerContextualDataLoader,\r\n        protected formConfigurationProvider: FormConfigurationProviderService) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.defaultBrokerDescriptionCtrl.disable();\r\n        this.bankBrokerContextualDataLoader.getData().subscribe((data) => {\r\n            if (data) {\r\n                this.filteredCounterparties = data;\r\n                this.counterparties = data;\r\n                this.defaultBrokerCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredCounterparties = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        this.counterparties,\r\n                        ['counterpartyCode', 'description'],\r\n                    );\r\n                });\r\n                this.bankValidator();\r\n            }\r\n        });\r\n    }\r\n\r\n    bankValidator() {\r\n        this.defaultBrokerCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.filteredCounterparties,\r\n                    nameof<Counterparty>('counterpartyCode'),\r\n                ),\r\n            ]),\r\n        );\r\n    }\r\n\r\n    onCounterpartyCodeSelected(value: Counterparty) {\r\n        if (value) {\r\n            const selectedCounterparty = this.masterdata.counterparties.find(\r\n                (item) => item.counterpartyCode === value.counterpartyCode,\r\n            );\r\n            if (selectedCounterparty) {\r\n                this.defaultBrokerDescriptionCtrl.patchValue(selectedCounterparty.description);\r\n                this.bankBrokerId = selectedCounterparty.counterpartyID;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    onCounterpartyValueChanged(value) {\r\n        this.defaultBrokerDescriptionCtrl.patchValue(value.description);\r\n    }\r\n\r\n    initForm(entity: CompanyConfigurationRecord, isEdit): CompanyConfigurationRecord {\r\n        const companyConfiguration = entity;\r\n        if (companyConfiguration && companyConfiguration.companySetup) {\r\n            if (companyConfiguration.companySetup.defaultBrokerId) {\r\n                this.defaultBrokerCtrl.setValue(this.getCounterpartyCode(companyConfiguration.companySetup.defaultBrokerId));\r\n                this.defaultBrokerDescriptionCtrl.patchValue(this.brokerDescription);\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    getCounterpartyCode(counterpartyId: number): string {\r\n        const counterparty = this.filteredCounterparties.find(\r\n            (e) => e.counterpartyID === counterpartyId);\r\n        if (counterparty) {\r\n            this.brokerDescription = counterparty.description;\r\n        }\r\n        return counterparty.counterpartyCode;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            defaultBrokerCtrl: this.defaultBrokerCtrl,\r\n            defaultBrokerDescriptionCtrl: this.defaultBrokerDescriptionCtrl,\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"shipment-details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Details</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"35%\\\">\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"quantityCodeforReportingCtrl\\\"\\r\\n                                                         [options]=\\\"filteredWeightUnits\\\"\\r\\n                                                         label=\\\"Quantity Code for Reporting\\\"\\r\\n                                                         displayProperty=\\\"weightCode\\\"\\r\\n                                                         [selectProperties]=\\\"['weightCode', 'description']\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Weight Unit\\\"\\r\\n                                                         gridId=\\\"weightUnitsGrid\\\"\\r\\n                                                         (optionSelected)=\\\"weightCodeSelected($event)\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { WeightUnit } from '../../../../../../shared/entities/weight-unit.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-details',\r\n    templateUrl: './details.component.html',\r\n    styleUrls: ['./details.component.scss'],\r\n})\r\nexport class DetailsComponent extends BaseFormComponent implements OnInit {\r\n    quantityCodeforReportingCtrl = new AtlasFormControl('QuantityCodeforReporting');\r\n    model: CompanyConfigurationRecord;\r\n    masterData: MasterData;\r\n    filteredWeightUnits: WeightUnit[];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        private router: Router) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredWeightUnits = this.masterData.weightUnits;\r\n        this.filterWeightUnits();\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            quantityCodeforReportingCtrl: this.quantityCodeforReportingCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    filterWeightUnits() {\r\n        this.quantityCodeforReportingCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredWeightUnits = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.weightUnits,\r\n                ['weightCode', 'description'],\r\n            );\r\n            if (this.quantityCodeforReportingCtrl.valid) {\r\n                this.weightCodeSelected(this.quantityCodeforReportingCtrl.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    weightCodeSelected(value: WeightUnit) {\r\n        if (value) {\r\n            const selectedWeightUnit = this.masterData.weightUnits.find(\r\n                (weightUnit) => weightUnit.weightCode === value.weightCode,\r\n            );\r\n            if (selectedWeightUnit) {\r\n                this.quantityCodeforReportingCtrl.patchValue(selectedWeightUnit.weightCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord, isEdit) {\r\n        this.model = companyConfigurationRecord;\r\n\r\n        if (this.model.companySetup) {\r\n            this.quantityCodeforReportingCtrl.setValue(this.model.companySetup.weightCode);\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n\r\n        companyConfiguration.companySetup.weightUnitId = this.getWeightUnitIdFromCode(this.quantityCodeforReportingCtrl.value);\r\n\r\n        return companyConfiguration;\r\n    }\r\n\r\n    getWeightUnitIdFromCode(weightUnitCode: string): number {\r\n        const selectedWeightUnit = this.masterData.weightUnits.find(\r\n            (weightUnit) => weightUnit.weightCode === weightUnitCode,\r\n        );\r\n        if (selectedWeightUnit) {\r\n            return selectedWeightUnit.weightUnitId;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card counterparty-details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Identity</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"8px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"22%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Legal Entity\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]='legalEntityCtrl'>\\r\\n                </mat-form-field>\\r\\n                <mat-error *ngIf=\\\"legalEntityCtrl.hasError('maxlength')\\\">\\r\\n                    Legal Entity should be at most 4 characters long\\r\\n                </mat-error>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"23%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Legal Entity Name\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]='legalEntityNameCtrl'>\\r\\n                </mat-form-field>\\r\\n                <mat-error *ngIf=\\\"legalEntityNameCtrl.hasError('maxlength')\\\">\\r\\n                    Legal Entity Name should be at most 50 characters long\\r\\n                </mat-error>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"22%\\\">\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"functionalCcyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredFunctionalCurrencies\\\"\\r\\n                                                         label=\\\"Functional Ccy\\\"\\r\\n                                                         displayProperty=\\\"currencyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Functional Currency\\\"\\r\\n                                                         gridId=\\\"currenciesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"functionalCurrencyCodeSelected($event)\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"22%\\\">\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"statutoryCcyCtrl\\\"\\r\\n                                                         [options]=\\\"filteredStatutoryCurrencies\\\"\\r\\n                                                         label=\\\"Statutory Ccy\\\"\\r\\n                                                         displayProperty=\\\"currencyCode\\\"\\r\\n                                                         [selectProperties]=\\\"['currencyCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"currencyErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Statutory Currency\\\"\\r\\n                                                         gridId=\\\"currenciesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"statutoryCurrencyCodeSelected($event)\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"8px\\\">\\r\\n            <div fxFlex=\\\"22%\\\">\\r\\n                <atlas-dropdown-select [isEditable]=\\\"true\\\"\\r\\n                                       label=\\\"Company Type\\\"\\r\\n                                       [fieldControl]=\\\"companyTypeCtrl\\\"\\r\\n                                       [options]=\\\"filteredCompanyTypeList\\\"\\r\\n                                       displayProperty=\\\"enumEntityValue\\\"\\r\\n                                       [selectProperties]=\\\"['enumEntityValue']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\"\\r\\n                                       [errorMap]=\\\"companyErrorMap\\\"\\r\\n                                       [hasIcon]=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n            </div>\\r\\n\\r\\n            <div fxFlex=\\\"26%\\\">\\r\\n                <atlas-dropdown-select [isEditable]=\\\"true\\\"\\r\\n                                       label=\\\"Company Platform\\\"\\r\\n                                       [fieldControl]=\\\"companyPlatformCtrl\\\"\\r\\n                                       [options]=\\\"filteredCompanyPlatformList\\\"\\r\\n                                       displayProperty=\\\"enumEntityValue\\\"\\r\\n                                       [selectProperties]=\\\"['enumEntityValue']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\"\\r\\n                                       [errorMap]=\\\"companyErrorMap\\\"\\r\\n                                       [hasIcon]=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \".legal-entity-font {\\n  font: 4px; }\\n\\n.mat-error {\\n  font-size: 10px;\\n  margin-top: 40px;\\n  margin-left: -121px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { Currency } from '../../../../../../shared/entities/currency.entity';\r\nimport { EnumEntity } from '../../../../../../shared/entities/enum-entity.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-identity',\r\n    templateUrl: './identity.component.html',\r\n    styleUrls: ['./identity.component.scss'],\r\n})\r\nexport class IdentityComponent extends BaseFormComponent implements OnInit {\r\n    legalEntityCtrl = new AtlasFormControl('LegalEntity');\r\n    legalEntityNameCtrl = new AtlasFormControl('LegalEntityName');\r\n    functionalCcyCtrl = new AtlasFormControl('FunctionalCcy');\r\n    statutoryCcyCtrl = new AtlasFormControl('StatutoryCcy');\r\n    companyTypeCtrl = new AtlasFormControl('CompanyType');\r\n    companyPlatformCtrl = new AtlasFormControl('CompanyPlatform');\r\n    filteredFunctionalCurrencies: Currency[];\r\n    filteredStatutoryCurrencies: Currency[];\r\n    filteredCompanyTypeList: EnumEntity[];\r\n    filteredCompanyPlatformList: EnumEntity[];\r\n    masterData: MasterData;\r\n    masterdataList: string[] = [\r\n        MasterDataProps.CompanyPlatforms,\r\n        MasterDataProps.CompanyTypes,\r\n    ];\r\n    company: string;\r\n    model: CompanyConfigurationRecord;\r\n    currencyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    companyErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    currentCompany: string;\r\n    companyId: string;\r\n    isCopyCompany: boolean;\r\n    isTransactionExists: boolean = false;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        protected configurationService: ConfigurationService,\r\n        protected masterdataService: MasterdataService,\r\n        private router: Router,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.isCopyCompany = (this.route.snapshot.data.isCopy) ? true : false;\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.masterdataService\r\n            .getMasterData(this.masterdataList)\r\n            .subscribe((data) => {\r\n                this.filteredCompanyTypeList = data.companyTypes;\r\n                this.companyTypeCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredCompanyTypeList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        data.companyTypes,\r\n                        ['enumEntityValue'],\r\n                    );\r\n                });\r\n\r\n                this.filteredCompanyPlatformList = data.companyTypes;\r\n                this.companyPlatformCtrl.valueChanges.subscribe((input) => {\r\n                    this.filteredCompanyPlatformList = this.utilService.filterListforAutocomplete(\r\n                        input,\r\n                        data.companyPlatforms,\r\n                        ['enumEntityValue'],\r\n                    );\r\n                });\r\n\r\n                this.setValidators();\r\n            });\r\n        this.filterFunctionalCurrencies();\r\n        this.filterStatutoryCurrencies();\r\n        if (!this.isCopyCompany) {\r\n            if (this.companyId) {\r\n                this.checkTransactionDataExistsForCompany(this.companyId);\r\n            }\r\n        }\r\n        this.setValidators();\r\n    }\r\n\r\n    checkTransactionDataExistsForCompany(companyId: string) {\r\n        this.configurationService.checkTransationExistsByCompanyId(companyId).subscribe((data: boolean) => {\r\n            this.isTransactionExists = data;\r\n        });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            legalEntityCtrl: this.legalEntityCtrl,\r\n            legalEntityNameCtrl: this.legalEntityNameCtrl,\r\n            functionalCcyCtrl: this.functionalCcyCtrl,\r\n            statutoryCcyCtrl: this.statutoryCcyCtrl,\r\n            companyTypeCtrl: this.companyTypeCtrl,\r\n            companyPlatformCtrl: this.companyPlatformCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setLegalEntityValidators() {\r\n        this.legalEntityCtrl.setValidators(Validators.maxLength(4));\r\n        this.legalEntityNameCtrl.setValidators(Validators.maxLength(50));\r\n    }\r\n\r\n    setValidators() {\r\n        this.functionalCcyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n\r\n        this.statutoryCcyCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.currencies,\r\n                    nameof<Currency>('currencyCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n        this.companyTypeCtrl.setValidators(Validators.required);\r\n        this.companyPlatformCtrl.setValidators(Validators.required);\r\n        this.legalEntityCtrl.setValidators(Validators.compose([Validators.maxLength(4)]));\r\n        this.legalEntityNameCtrl.setValidators(Validators.compose([Validators.maxLength(15)]));\r\n    }\r\n\r\n    filterFunctionalCurrencies() {\r\n        this.functionalCcyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredFunctionalCurrencies = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.currencies,\r\n                ['currencyCode', 'description'],\r\n            );\r\n            if (this.functionalCcyCtrl.valid) {\r\n                this.functionalCurrencyCodeSelected(this.functionalCcyCtrl.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    filterStatutoryCurrencies() {\r\n        this.statutoryCcyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredStatutoryCurrencies = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.currencies,\r\n                ['currencyCode', 'description'],\r\n            );\r\n            if (this.statutoryCcyCtrl.valid) {\r\n                this.statutoryCurrencyCodeSelected(this.statutoryCcyCtrl.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    functionalCurrencyCodeSelected(value: Currency) {\r\n        const selectedCurrency = this.masterData.currencies.find(\r\n            (currency) => currency.currencyCode === value.currencyCode,\r\n        );\r\n        if (selectedCurrency) {\r\n            this.functionalCcyCtrl.patchValue(selectedCurrency.currencyCode);\r\n        }\r\n    }\r\n\r\n    statutoryCurrencyCodeSelected(value: Currency) {\r\n        const selectedCurrency = this.masterData.currencies.find(\r\n            (currency) => currency.currencyCode === value.currencyCode,\r\n        );\r\n        if (selectedCurrency) {\r\n            this.statutoryCcyCtrl.patchValue(selectedCurrency.currencyCode);\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord, isEdit) {\r\n        this.model = companyConfigurationRecord;\r\n\r\n        this.legalEntityCtrl.setValue(this.model.companySetup.legalEntity);\r\n        this.legalEntityNameCtrl.setValue(this.model.companySetup.legalEntityCode);\r\n        this.functionalCcyCtrl.setValue(this.model.companySetup.functionalCurrencyCode);\r\n        this.statutoryCcyCtrl.setValue(this.model.companySetup.statutoryCurrencyCode);\r\n        this.companyTypeCtrl.setValue(this.model.companySetup.companyType);\r\n        this.companyPlatformCtrl.setValue(this.model.companySetup.companyPlatform);\r\n\r\n        this.setLegalEntityValidators();\r\n\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n        if (this.isTransactionExists) {\r\n            this.functionalCcyCtrl.disable();\r\n            this.statutoryCcyCtrl.disable();\r\n        }\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n\r\n        companyConfiguration.companySetup.legalEntityCode = this.legalEntityNameCtrl.value;\r\n        companyConfiguration.companySetup.legalEntity = this.legalEntityCtrl.value;\r\n\r\n        companyConfiguration.companySetup.functionalCurrencyCode = this.functionalCcyCtrl.value;\r\n        companyConfiguration.companySetup.statutoryCurrencyCode = this.statutoryCcyCtrl.value;\r\n        companyConfiguration.companySetup.companyTypeId = this.companyTypeCtrl.value.enumEntityValue\r\n            ? this.getCompanyTypeIdFromCode(this.companyTypeCtrl.value.enumEntityValue)\r\n            : this.getCompanyTypeIdFromCode(this.companyTypeCtrl.value);\r\n        companyConfiguration.companySetup.companyPlatformId = (this.companyPlatformCtrl.value.enumEntityValue)\r\n            ? this.getCompanyPlatformFromCode(this.companyPlatformCtrl.value.enumEntityValue)\r\n            : this.getCompanyPlatformFromCode(this.companyPlatformCtrl.value);\r\n        companyConfiguration.companySetup.legalEntity = this.legalEntityCtrl.value;\r\n        companyConfiguration.companySetup.legalEntityCode = this.legalEntityNameCtrl.value;\r\n        return companyConfiguration;\r\n    }\r\n\r\n    getCompanyTypeIdFromCode(companyTypeCode: string): number {\r\n        const selectedCompanyType = this.masterData.companyTypes.find(\r\n            (companyType) => companyType.enumEntityValue === companyTypeCode,\r\n        );\r\n        if (selectedCompanyType) {\r\n            return selectedCompanyType.enumEntityId;\r\n        }\r\n    }\r\n\r\n    getCompanyPlatformFromCode(companyPlatformCode: string): number {\r\n        const selectedCompanyPlatform = this.masterData.companyPlatforms.find(\r\n            (companyPlatform) => companyPlatform.enumEntityValue === companyPlatformCode,\r\n        );\r\n        if (selectedCompanyPlatform) {\r\n            return selectedCompanyPlatform.enumEntityId;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"trade-capture-card commodity-details\\\">\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Location</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"8px\\\">\\r\\n            <div fxFlex=\\\"22%\\\">\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"countryCtrl\\\"\\r\\n                                                         [options]=\\\"filteredCountries\\\"\\r\\n                                                         label=\\\"Country\\\"\\r\\n                                                         displayProperty=\\\"countryCode\\\"\\r\\n                                                         [selectProperties]=\\\"['countryCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"CountryErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for Country\\\"\\r\\n                                                         gridId=\\\"countriesGrid\\\"\\r\\n                                                         (optionSelected)=\\\"countryCodeSelected($event)\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"countryNameCtrl\\\"\\r\\n                              [required]=\\\"countryNameCtrl.isRequired\\\"\\r\\n                              [isEditable]=\\\"isInputField\\\"\\r\\n                              [label]=\\\"'Country Name'\\\">\\r\\n                <mat-error *ngIf=\\\"countryNameCtrl.hasError('required')\\\">\\r\\n                    Required *\\r\\n                </mat-error>\\r\\n            </atlas-form-input>\\r\\n\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"20%\\\">\\r\\n                <div [class.isEmpty]=\\\"!timeZoneCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"timeZoneCtrl.isRequired\\\">\\r\\n\\r\\n                    <atlas-dropdown-select [isEditable]=\\\"timeZoneCtrl.enabled\\\"\\r\\n                                           label=\\\"Time Zone\\\"\\r\\n                                           [fieldControl]=\\\"timeZoneCtrl\\\"\\r\\n                                           [options]=\\\"filteredTimeZoneList\\\"\\r\\n                                           displayProperty=\\\"timeZoneName\\\"\\r\\n                                           [selectProperties]=\\\"['timeZoneName','currentOffset']\\\"\\r\\n                                           isAutocompleteActivated=\\\"true\\\"\\r\\n                                           [errorMap]=\\\"timeZoneErrorMap\\\">\\r\\n                    </atlas-dropdown-select>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"left start\\\"\\r\\n             fxLayoutGap=\\\"8px\\\">\\r\\n            <div fxFlex=\\\"22%\\\">\\r\\n                <atlas-masterdata-user-preferences-input isEditable=\\\"true\\\"\\r\\n                                                         [fieldControl]=\\\"ldcRegionsCtrl\\\"\\r\\n                                                         [options]=\\\"filteredLDCRegions\\\"\\r\\n                                                         label=\\\"LDC Regions\\\"\\r\\n                                                         displayProperty=\\\"ldcRegionCode\\\"\\r\\n                                                         [selectProperties]=\\\"['ldcRegionCode', 'description']\\\"\\r\\n                                                         [errorMap]=\\\"ldcRegionErrorMap\\\"\\r\\n                                                         lightBoxTitle=\\\"Results for LDC Region\\\"\\r\\n                                                         gridId=\\\"ldcRegionsGrid\\\"\\r\\n                                                         (optionSelected)=\\\"ldcRegionCodeSelected($event)\\\">\\r\\n                </atlas-masterdata-user-preferences-input>\\r\\n            </div>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"22%\\\">\\r\\n                <div [class.isEmpty]=\\\"!endOfWeekCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"endOfWeekCtrl.isRequired\\\">\\r\\n                    <atlas-dropdown-select [isEditable]=\\\"endOfWeekCtrl.enabled\\\"\\r\\n                                           label=\\\"End of Week\\\"\\r\\n                                           [fieldControl]=\\\"endOfWeekCtrl\\\"\\r\\n                                           [options]=\\\"filteredWeekDaysList\\\"\\r\\n                                           displayProperty=\\\"enumEntityValue\\\"\\r\\n                                           [selectProperties]=\\\"['enumEntityValue']\\\"\\r\\n                                           isAutocompleteActivated=\\\"true\\\"\\r\\n                                           [errorMap]=\\\"endOfWeekErrorMap\\\">\\r\\n                    </atlas-dropdown-select>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"30%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           [matDatepicker]=\\\"companydatepicker\\\"\\r\\n                           placeholder=\\\"Date of the company\\\"\\r\\n                           [formControl]='companyDateCtrl'\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                    <mat-datepicker-toggle matSuffix\\r\\n                                           [for]=\\\"companydatepicker\\\"></mat-datepicker-toggle>\\r\\n                    <mat-datepicker #companydatepicker></mat-datepicker>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\"","module.exports = \"\"","import { AfterViewInit, Component, Inject, OnInit, Optional } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MAT_DATE_LOCALE, MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { Country } from '../../../../../../shared/entities/country.entity';\r\nimport { EnumEntity } from '../../../../../../shared/entities/enum-entity.entity';\r\nimport { LdcRegion } from '../../../../../../shared/entities/ldc-region.entity';\r\nimport { MasterDataProps } from '../../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { TimeZone } from '../../../../../../shared/entities/time-zone.entity';\r\nimport { WeekDays } from '../../../../../../shared/enums/week-days.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-location',\r\n    templateUrl: './location.component.html',\r\n    styleUrls: ['./location.component.scss'],\r\n})\r\nexport class LocationComponent extends BaseFormComponent implements OnInit, AfterViewInit {\r\n    countryCtrl = new AtlasFormControl('Country');\r\n    countryNameCtrl = new AtlasFormControl('CountryName');\r\n    timeZoneCtrl = new AtlasFormControl('TimeZone');\r\n    ldcRegionsCtrl = new AtlasFormControl('LDCRegions');\r\n    endOfWeekCtrl = new AtlasFormControl('EndofWeek');\r\n    companyDateCtrl = new AtlasFormControl('CompanyDate');\r\n\r\n    isInputField = false;\r\n    model: CompanyConfigurationRecord;\r\n    masterData: MasterData;\r\n    filteredTimeZoneList: TimeZone[];\r\n    filteredLDCRegions: LdcRegion[];\r\n    filteredCountries: Country[];\r\n    filteredWeekDaysList: EnumEntity[];\r\n    totalWeekList: EnumEntity[];\r\n    masterdataList: string[] = [\r\n        MasterDataProps.TimeZones,\r\n    ];\r\n    ldcRegionErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    CountryErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n    timeZoneErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n    CountryNameErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *');\r\n    endOfWeekErrorMap: Map<string, string> = new Map()\r\n        .set('required', 'Required *')\r\n        .set('inDropdownList', 'Invalid entry. Value not in the list.');\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        private route: ActivatedRoute,\r\n        protected masterdataService: MasterdataService,\r\n        private router: Router,\r\n        @Optional() @Inject(MAT_DATE_LOCALE) private dateLocale?: string,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.filteredTimeZoneList = this.masterData.timeZones;\r\n        this.filteredCountries = this.masterData.countries;\r\n        this.filteredLDCRegions = this.masterData.regions;\r\n        this.countryNameCtrl.disable();\r\n        this.getWeekDaysList();\r\n        this.filterLDCRegions();\r\n        this.filterCountries();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.setValidators();\r\n    }\r\n\r\n    getWeekDaysList() {\r\n        this.filteredWeekDaysList = [\r\n            {\r\n                enumEntityId: WeekDays.Monday,\r\n                enumEntityValue: WeekDays[WeekDays.Monday],\r\n            },\r\n            {\r\n                enumEntityId: WeekDays.Tuesday,\r\n                enumEntityValue: WeekDays[WeekDays.Tuesday],\r\n            },\r\n            {\r\n                enumEntityId: WeekDays.Wednesday,\r\n                enumEntityValue: WeekDays[WeekDays.Wednesday],\r\n            },\r\n            {\r\n                enumEntityId: WeekDays.Thursday,\r\n                enumEntityValue: WeekDays[WeekDays.Thursday],\r\n            },\r\n            {\r\n                enumEntityId: WeekDays.Friday,\r\n                enumEntityValue: WeekDays[WeekDays.Friday],\r\n            },\r\n            {\r\n                enumEntityId: WeekDays.Saturday,\r\n                enumEntityValue: WeekDays[WeekDays.Saturday],\r\n            },\r\n            {\r\n                enumEntityId: WeekDays.Sunday,\r\n                enumEntityValue: WeekDays[WeekDays.Sunday],\r\n            },\r\n        ];\r\n        this.totalWeekList = this.filteredWeekDaysList;\r\n    }\r\n\r\n    filterLDCRegions() {\r\n        this.ldcRegionsCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredLDCRegions = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.regions,\r\n                ['regionCode', 'description'],\r\n            );\r\n            if (this.ldcRegionsCtrl.valid) {\r\n                this.ldcRegionCodeSelected(this.ldcRegionsCtrl.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    filterCountries() {\r\n        this.countryCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCountries = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.countries,\r\n                ['countryCode', 'description'],\r\n            );\r\n            if (this.countryCtrl.valid) {\r\n                this.countryCodeSelected(this.countryCtrl.value);\r\n            }\r\n        });\r\n    }\r\n\r\n    ldcRegionCodeSelected(value: LdcRegion) {\r\n        if (value) {\r\n            const selectedRegion = this.masterData.regions.find(\r\n                (region) => region.ldcRegionCode === value.ldcRegionCode,\r\n            );\r\n            if (selectedRegion) {\r\n                this.ldcRegionsCtrl.patchValue(selectedRegion.ldcRegionCode);\r\n            }\r\n        }\r\n    }\r\n\r\n    countryCodeSelected(value: Country) {\r\n        if (value) {\r\n            const selectedCountry = this.masterData.countries.find(\r\n                (country) => country.countryCode === value.countryCode,\r\n            );\r\n            if (selectedCountry) {\r\n                this.countryCtrl.patchValue(selectedCountry.countryCode);\r\n                this.countryNameCtrl.patchValue(selectedCountry.description);\r\n            }\r\n        }\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            countryCtrl: this.countryCtrl,\r\n            countryNameCtrl: this.countryNameCtrl,\r\n            timeZoneCtrl: this.timeZoneCtrl,\r\n            ldcRegionsCtrl: this.ldcRegionsCtrl,\r\n            endOfWeekCtrl: this.endOfWeekCtrl,\r\n            companyDateCtrl: this.companyDateCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setValidators() {\r\n        this.ldcRegionsCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.regions,\r\n                    nameof<LdcRegion>('ldcRegionCode'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n\r\n        this.timeZoneCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.timeZones,\r\n                    nameof<TimeZone>('timeZoneName'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n        this.endOfWeekCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.totalWeekList,\r\n                    nameof<EnumEntity>('enumEntityValue'),\r\n                ), Validators.required,\r\n            ]),\r\n        );\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.model = companyConfigurationRecord;\r\n        if (this.model.companySetup) {\r\n            this.countryCtrl.setValue(this.model.companySetup.countryCode);\r\n            this.countryNameCtrl.setValue(this.model.companySetup.countryDescription);\r\n            this.timeZoneCtrl.setValue(this.model.companySetup.timeZoneName);\r\n            this.ldcRegionsCtrl.setValue(this.model.companySetup.ldcRegionCode);\r\n            this.companyDateCtrl.setValue(this.model.companySetup.activeDate);\r\n        }\r\n        if (this.model.retentionPolicy) {\r\n            this.endOfWeekCtrl.setValue(this.model.retentionPolicy.weekendDay);\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity;\r\n        companyConfiguration.companySetup.countryId = this.getCountryIdFromCode(this.countryCtrl.value);\r\n        const selectedTimeZone = this.timeZoneCtrl.value;\r\n        companyConfiguration.companySetup.timeZone = selectedTimeZone.timeZoneName ? selectedTimeZone.timeZoneName\r\n            : selectedTimeZone;\r\n        companyConfiguration.companySetup.ldcRegionId = this.getLDCRegionIdFromCode(this.ldcRegionsCtrl.value);\r\n        const endOfWeek = this.endOfWeekCtrl.value;\r\n        companyConfiguration.retentionPolicy.weekendDay = (endOfWeek.enumEntityValue) ? (endOfWeek.enumEntityValue)\r\n            : endOfWeek;\r\n        const local = this.dateLocale || moment.locale();\r\n        const companyDate = this.companyDateCtrl.value ? moment(this.companyDateCtrl.value, 'YYYY-MM-DD').toDate() : null;\r\n        companyConfiguration.companySetup.companyDate = (companyDate) ? moment.utc(moment.parseZone(companyDate).format('YYYY-MM-DD')).locale(local).toDate() : null;\r\n\r\n        return companyConfiguration;\r\n    }\r\n\r\n    getCountryIdFromCode(countryCode: string): number {\r\n        const selectedCountry = this.masterData.countries.find(\r\n            (country) => country.countryCode === countryCode,\r\n        );\r\n        if (selectedCountry) {\r\n            return selectedCountry.countryId;\r\n        }\r\n    }\r\n\r\n    getLDCRegionIdFromCode(ldcRegionCode: string): number {\r\n        const selectedLDCRegion = this.masterData.regions.find(\r\n            (ldcRegion) => ldcRegion.ldcRegionCode === ldcRegionCode,\r\n        );\r\n        if (selectedLDCRegion) {\r\n            return selectedLDCRegion.ldcRegionId;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"margin main-container\\\">\\r\\n    <h2>\\r\\n        Allocation Set-Up\\r\\n    </h2>\\r\\n    <div ag-grid=\\\"allocationGridOptions\\\">\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"allocationRowData\\\"\\r\\n                         [columnDefs]=\\\"allocationColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n    <mat-divider></mat-divider>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            Save\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"ag-grid-angular.ag-theme-material {\\n  margin: 0px 16px 0px 16px;\\n  padding: 6px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridCheckboxComponent } from '../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AllocationSetUp } from '../../../../../../shared/entities/allocation-set-up-entity';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-allocation-set-up',\r\n    templateUrl: './allocation-set-up.component.html',\r\n    styleUrls: ['./allocation-set-up.component.scss'],\r\n})\r\n\r\nexport class AllocationSetUpComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    allocationGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    allocationRowData: AllocationSetUp[];\r\n    allocationColumnDefs: agGrid.ColDef[];\r\n    model: CompanyConfigurationRecord;\r\n    modifiedAllocationSetUpData: AllocationSetUp[] = [];\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveAllocation = new EventEmitter();\r\n    checkEdit: boolean;\r\n    private readonly bothBlockingWarningEnabledMessage = 'Both Difference Warning and Difference Blocking can not be true';\r\n    currentCompany: string;\r\n    companyId: string;\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        public gridService: AgGridService,\r\n        protected configurationService: ConfigurationService,\r\n        protected route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected snackbarService: SnackbarService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        if (!this.companyId) {\r\n            this.checkEdit = true;\r\n            this.getAllAllocationFieldsForCreation();\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    getAllAllocationFieldsForCreation() {\r\n        this.configurationService.getAllocationSetUp()\r\n            .subscribe((allocationSetupData) => {\r\n                if (allocationSetupData && allocationSetupData.length > 0) {\r\n                    this.modifiedAllocationSetUpData = allocationSetupData;\r\n                }\r\n            });\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.allocationColumnDefs = [\r\n            {\r\n                headerName: 'allocationFieldSetupId',\r\n                colId: 'allocationFieldSetupId',\r\n                field: 'allocationFieldSetupId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'tradeSetupId',\r\n                colId: 'tradeSetupId',\r\n                field: 'tradeSetupId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'fieldId',\r\n                colId: 'fieldId',\r\n                field: 'fieldId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Field',\r\n                colId: 'friendlyName',\r\n                field: 'friendlyName',\r\n                width: 75,\r\n            },\r\n            {\r\n                headerName: 'Field name',\r\n                colId: 'fieldName',\r\n                field: 'fieldName',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Difference Blocking',\r\n                colId: 'differenceBlocking',\r\n                field: 'differenceBlocking',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: {\r\n                    disabled: !this.checkEdit,\r\n                },\r\n                width: 50,\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.differenceWarning === true &&\r\n                        params.data.differenceBlocking === true) {\r\n                        params.node.setDataValue('differenceBlocking', false);\r\n                        this.snackbarService.throwErrorSnackBar(this.bothBlockingWarningEnabledMessage);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Difference Warning',\r\n                colId: 'differenceWarning',\r\n                field: 'differenceWarning',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: {\r\n                    disabled: !this.checkEdit,\r\n                },\r\n                width: 50,\r\n                onCellValueChanged: (params) => {\r\n                    if (params.data.differenceWarning === true &&\r\n                        params.data.differenceBlocking === true) {\r\n                        params.node.setDataValue('differenceWarning', false);\r\n                        this.snackbarService.throwErrorSnackBar(this.bothBlockingWarningEnabledMessage);\r\n                    }\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.allocationColumnDefs;\r\n        this.allocationGridOptions = params;\r\n        this.gridApi = this.allocationGridOptions.api;\r\n        this.gridColumnApi = this.allocationGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n    }\r\n\r\n    readyAllocationSetUpEditor() {\r\n        const allocationDataList = this.modifiedAllocationSetUpData;\r\n        this.allocationRowData = allocationDataList.map((filter) => {\r\n            return {\r\n                allocationFieldSetupId: filter.allocationFieldSetupId,\r\n                tradeSetupId: filter.tradeSetupId,\r\n                fieldId: filter.fieldId,\r\n                fieldName: filter.fieldName,\r\n                differenceBlocking: filter.differenceBlocking,\r\n                differenceWarning: filter.differenceWarning,\r\n                friendlyName: filter.friendlyName,\r\n            };\r\n        });\r\n        if (this.gridApi) {\r\n            if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.modifiedAllocationSetUpData = companyConfigurationRecord.allocationSetUp;\r\n        this.checkEdit = isEdit;\r\n        this.initializeGridColumns();\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'AllocationSetUpComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.modifiedAllocationSetUpData = [];\r\n        this.gridApi.forEachNode((rowdata) => {\r\n            const allocationSetUpRow = new AllocationSetUp();\r\n            allocationSetUpRow.allocationFieldSetupId = rowdata.data.allocationFieldSetupId;\r\n            allocationSetUpRow.tradeSetupId = rowdata.data.tradeSetupId;\r\n            allocationSetUpRow.fieldId = rowdata.data.fieldId;\r\n            allocationSetUpRow.fieldName = rowdata.data.fieldName;\r\n            allocationSetUpRow.friendlyName = rowdata.data.friendlyName;\r\n            allocationSetUpRow.differenceBlocking = rowdata.data.differenceBlocking;\r\n            allocationSetUpRow.differenceWarning = rowdata.data.differenceWarning;\r\n            this.modifiedAllocationSetUpData.push(allocationSetUpRow);\r\n        });\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveAllocation.emit();\r\n    }\r\n\r\n    populateEntity(entity: any): CompanyConfiguration {\r\n        const companyConfiguration = entity as CompanyConfiguration;\r\n        if (this.modifiedAllocationSetUpData && this.modifiedAllocationSetUpData.length > 0) {\r\n            companyConfiguration.allocationSetUp = this.modifiedAllocationSetUpData;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"margin main-container\\\">\\r\\n    <h2>\\r\\n        Mandatory & Trade Approval and Image set-up\\r\\n    </h2>\\r\\n    <div ag-grid=\\\"mandatoryTradeGridOptions\\\">\\r\\n        <ag-grid-angular class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"mandatoryRowData\\\"\\r\\n                         [columnDefs]=\\\"mandatoryColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         rowSelection=\\\"multiple\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n    <mat-divider></mat-divider>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!checkEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            Save\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"ag-grid-angular.ag-theme-material {\\n  margin: 16px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridCheckboxComponent } from '../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MandatoryTradeApprovalImageSetup } from '../../../../../../shared/entities/mandatory-trade-fields';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { FormConfigurationProviderService } from './../../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-mandatory-trade-approval',\r\n    templateUrl: './mandatory-trade-approval.component.html',\r\n    styleUrls: ['./mandatory-trade-approval.component.scss'],\r\n})\r\nexport class MandatoryTradeApprovalComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    mandatoryTradeGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    mandatoryRowData: MandatoryTradeApprovalImageSetup[];\r\n    mandatoryColumnDefs: agGrid.ColDef[];\r\n    model: CompanyConfigurationRecord;\r\n    modifiedMandatorySetUpData: MandatoryTradeApprovalImageSetup[] = [];\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    checkEdit: boolean;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    departmentId: string = 'DepartmentId';\r\n    traderId: string = 'TraderId';\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        public gridService: AgGridService,\r\n        protected route: ActivatedRoute,\r\n        protected configurationService: ConfigurationService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        if (!this.companyId) {\r\n            this.checkEdit = true;\r\n            this.getAllFieldsForCreation();\r\n            this.initializeGridColumns();\r\n        }\r\n    }\r\n\r\n    getAllFieldsForCreation() {\r\n        this.configurationService.getMandatoryFieldsSetUp()\r\n            .subscribe((mandatoryFieldsData) => {\r\n                if (mandatoryFieldsData && mandatoryFieldsData.length > 0) {\r\n                    this.modifiedMandatorySetUpData = mandatoryFieldsData;\r\n                }\r\n            });\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.mandatoryColumnDefs = [\r\n            {\r\n                headerName: 'tradeSetupId',\r\n                colId: 'tradeSetupId',\r\n                field: 'tradeSetupId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'fieldId',\r\n                colId: 'fieldId',\r\n                field: 'fieldId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'fieldName',\r\n                colId: 'fieldName',\r\n                field: 'fieldName',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Header CardField ',\r\n                colId: 'friendlyName',\r\n                field: 'friendlyName',\r\n                width: 75,\r\n            },\r\n            {\r\n                headerName: 'Mandatory',\r\n                colId: 'mandatory',\r\n                field: 'mandatory',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: (params) => {\r\n                    return {\r\n                        disabled: (params.data.fieldName === this.departmentId) || (params.data.fieldName === this.traderId) || !this.checkEdit,\r\n                    };\r\n                },\r\n                width: 50,\r\n            },\r\n            {\r\n                headerName: 'Unapprove trade upon editing',\r\n                colId: 'unApproval',\r\n                field: 'unApproval',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: {\r\n                    disabled: !this.checkEdit,\r\n                },\r\n                width: 50,\r\n            },\r\n            {\r\n                headerName: 'Copy at image',\r\n                colId: 'isCopy',\r\n                field: 'isCopy',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: {\r\n                    disabled: !this.checkEdit,\r\n                },\r\n                width: 50,\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.mandatoryColumnDefs;\r\n        this.mandatoryTradeGridOptions = params;\r\n        this.gridApi = this.mandatoryTradeGridOptions.api;\r\n        this.gridColumnApi = this.mandatoryTradeGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n    }\r\n\r\n    readyMandatoryFieldSetUpEditor() {\r\n        const mandatoryDataList = this.modifiedMandatorySetUpData;\r\n        this.mandatoryRowData = mandatoryDataList.map((filter) => {\r\n            return {\r\n                tradeSetupId: filter.tradeSetupId,\r\n                fieldId: filter.fieldId,\r\n                fieldName: filter.fieldName,\r\n                mandatory: filter.mandatory,\r\n                unApproval: filter.unApproval,\r\n                isCopy: filter.isCopy,\r\n                friendlyName: filter.friendlyName,\r\n            };\r\n        });\r\n        if (this.gridApi) {\r\n            if (this.gridApi) { this.gridApi.sizeColumnsToFit(); }\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.modifiedMandatorySetUpData = companyConfigurationRecord.mandatoryTradeApprovalImageSetup;\r\n        this.checkEdit = isEdit;\r\n        this.initializeGridColumns();\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'MandatoryTradeApprovalComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.modifiedMandatorySetUpData = [];\r\n        this.gridApi.forEachNode((rowdata) => {\r\n            const mandatoryFieldSetUpRow = new MandatoryTradeApprovalImageSetup();\r\n            mandatoryFieldSetUpRow.tradeSetupId = rowdata.data.tradeSetupId;\r\n            mandatoryFieldSetUpRow.fieldId = rowdata.data.fieldId;\r\n            mandatoryFieldSetUpRow.fieldName = rowdata.data.fieldName;\r\n            mandatoryFieldSetUpRow.friendlyName = rowdata.data.friendlyName;\r\n            mandatoryFieldSetUpRow.mandatory = rowdata.data.mandatory;\r\n            mandatoryFieldSetUpRow.unApproval = rowdata.data.unApproval;\r\n            mandatoryFieldSetUpRow.isCopy = rowdata.data.isCopy;\r\n            this.modifiedMandatorySetUpData.push(mandatoryFieldSetUpRow);\r\n        });\r\n        this.isSideNavOpened.emit(false);\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    populateEntity(entity: any): CompanyConfiguration {\r\n        const companyConfiguration = entity as CompanyConfiguration;\r\n        if (this.modifiedMandatorySetUpData && this.modifiedMandatorySetUpData.length > 0) {\r\n            companyConfiguration.mandatoryTradeApprovalImageSetup = this.modifiedMandatorySetUpData;\r\n        }\r\n        return companyConfiguration;\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"physicalsTabMainPhysicalsFormGroup\\\"\\r\\n     class=\\\"margin\\\">\\r\\n    <h2>Main Physicals</h2>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"start center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\">\\r\\n        <div class=\\\"custom-form\\\"\\r\\n             fxFlex=\\\"20%\\\"\\r\\n             [class.isEmpty]=\\\"!quantityCodeCtrl.value\\\"\\r\\n             [class.required-field]=\\\"quantityCodeCtrl.isRequired\\\">\\r\\n            <mat-form-field>\\r\\n                <h2>Quantity Code</h2>\\r\\n                <input matInput\\r\\n                       [required]=\\\"quantityCodeCtrl.isRequired\\\"\\r\\n                       [matAutocomplete]=\\\"quantityCode\\\"\\r\\n                       [formControl]=\\\"quantityCodeCtrl\\\"\\r\\n                       [matTooltip]=\\\"'Quantity Codes'\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n                <mat-autocomplete #quantityCode=\\\"matAutocomplete\\\"\\r\\n                                  [panelWidth]=\\\"panelSize\\\"\\r\\n                                  [displayWith]=\\\"displayQuantityUnit.bind(this)\\\">\\r\\n                    <mat-option *ngFor=\\\"let qtCode of filteredQuantityCode\\\"\\r\\n                                [value]=\\\"qtCode.weightUnitId\\\">\\r\\n                        {{qtCode.weightCode}} |\\r\\n                        {{qtCode.description}}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"quantityCodeCtrl.hasError('required')\\\">\\r\\n                    Required *\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"quantityCodeCtrl.hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n                <mat-hint *ngIf=\\\"quantityCodeCtrl.isRequired\\\">\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"30%\\\">\\r\\n            <h2>Crop Year Format</h2>\\r\\n            <mat-button-toggle-group [formControl]=\\\"cropYearCtrl\\\">\\r\\n                <mat-button-toggle *ngFor=\\\"let cropYearFormat of cropYearFormats\\\"\\r\\n                                   [value]=\\\"cropYearFormat.enumEntityId\\\">{{cropYearFormat.enumEntityValue}}\\r\\n                </mat-button-toggle>\\r\\n            </mat-button-toggle-group>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <mat-accordion class=\\\"cash-accordion\\\">\\r\\n        <mat-expansion-panel [expanded]=\\\"isPanelExpanded\\\">\\r\\n            <mat-expansion-panel-header [collapsedHeight]=\\\"'35px'\\\"\\r\\n                                        [expandedHeight]=\\\"'35px'\\\"\\r\\n                                        class=\\\"expansion-header\\\">\\r\\n                <mat-panel-title>\\r\\n                    <h2>InterCo Confirmation e-mail</h2>\\r\\n                </mat-panel-title>\\r\\n            </mat-expansion-panel-header>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     fxFlex=\\\"200%\\\">\\r\\n                    <div>\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"InterCo Confirmation e-mail\\\"\\r\\n                                   [matAutocomplete]=\\\"intercoUserList\\\"\\r\\n                                   [formControl]=\\\"intercoEmailCtrl\\\"\\r\\n                                   [matTooltip]=\\\"'InterCo Confirmation e-mail'\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                            <mat-autocomplete #intercoUserList=\\\"matAutocomplete\\\"\\r\\n                                              [panelWidth]=\\\"panelSize\\\">\\r\\n                                <mat-option *ngFor=\\\"let user of filteredIntercoUserList\\\"\\r\\n                                            [value]=\\\"user.email\\\">{{user.email}}\\r\\n                                </mat-option>\\r\\n                            </mat-autocomplete>\\r\\n                            <mat-error *ngIf=\\\"intercoEmailCtrl.hasError('inDropdownList')\\\">\\r\\n                                Value not in list\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between end\\\">\\r\\n                        <button mat-button\\r\\n                                [disabled]=\\\"!isEdit\\\"\\r\\n                                (click)=\\\"onIntercoAddToListClicked()\\\">\\r\\n                            ADD TO LIST\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\">\\r\\n                <div class=\\\"chip-list\\\">\\r\\n                    <atlas-chip-list *ngIf=\\\"interCoChipStringList\\\"\\r\\n                                     [textList]='interCoChipStringList'\\r\\n                                     removable=true\\r\\n                                     disabled=\\\"!isEdit\\\"\\r\\n                                     (removedElement)=\\\"onInterCoRemoveClicked($event)\\\"></atlas-chip-list>\\r\\n                    <div *ngIf=\\\"!interCoChipStringList\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"center center\\\"\\r\\n                             fxLayoutWrap\\r\\n                             fxLayoutGap=\\\"20px\\\">\\r\\n                            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-expansion-panel>\\r\\n    </mat-accordion>\\r\\n\\r\\n    <mat-accordion class=\\\"cash-accordion\\\">\\r\\n        <mat-expansion-panel [expanded]=\\\"isPanelExpanded\\\">\\r\\n            <mat-expansion-panel-header [collapsedHeight]=\\\"'35px'\\\"\\r\\n                                        [expandedHeight]=\\\"'35px'\\\"\\r\\n                                        class=\\\"expansion-header\\\">\\r\\n                <mat-panel-title>\\r\\n                    <h2>No-interCo Confirmation e-mail</h2>\\r\\n                </mat-panel-title>\\r\\n            </mat-expansion-panel-header>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     fxFlex=\\\"200%\\\">\\r\\n                    <div>\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"No-interCo Confirmation e-mail\\\"\\r\\n                                   [matAutocomplete]=\\\"noIntercoUserList\\\"\\r\\n                                   [formControl]=\\\"noIntercoEmailCtrl\\\"\\r\\n                                   [matTooltip]=\\\"'No-interCo Confirmation e-mail'\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                            <mat-autocomplete #noIntercoUserList=\\\"matAutocomplete\\\"\\r\\n                                              [panelWidth]=\\\"panelSize\\\">\\r\\n                                <mat-option *ngFor=\\\"let user of filteredNoIntercoUserList\\\"\\r\\n                                            [value]=\\\"user.email\\\">{{user.email}}\\r\\n                                </mat-option>\\r\\n                            </mat-autocomplete>\\r\\n                            <mat-error *ngIf=\\\"noIntercoEmailCtrl.hasError('inDropdownList')\\\">\\r\\n                                Value not in list\\r\\n                            </mat-error>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"space-between end\\\">\\r\\n                        <button mat-button\\r\\n                                [disabled]=\\\"!isEdit\\\"\\r\\n                                (click)=\\\"onNoIntercoAddToListClicked()\\\">\\r\\n                            ADD TO LIST\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between start\\\">\\r\\n                <div class=\\\"chip-list\\\">\\r\\n                    <atlas-chip-list *ngIf=\\\"noInterCoChipStringList\\\"\\r\\n                                     [textList]='noInterCoChipStringList'\\r\\n                                     removable=true\\r\\n                                     disabled=\\\"!isEdit\\\"\\r\\n                                     (removedElement)=\\\"onNoInterCoRemoveClicked($event)\\\"></atlas-chip-list>\\r\\n                    <div *ngIf=\\\"!noInterCoChipStringList\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"center center\\\"\\r\\n                             fxLayoutWrap\\r\\n                             fxLayoutGap=\\\"20px\\\">\\r\\n                            <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-expansion-panel>\\r\\n    </mat-accordion>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         fxLayoutGap=\\\"16px\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"200%\\\">\\r\\n                <mat-slide-toggle [formControl]=\\\"businessSectorTradingCtrl\\\"\\r\\n                                  (change)=\\\"onBusinessSectorTradingToggleChanged($event)\\\">\\r\\n                    Business Sector Nominal for Trading Operation\\r\\n                </mat-slide-toggle>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"200%\\\">\\r\\n                <mat-slide-toggle [formControl]=\\\"businessSectorPostingCtrl\\\"\\r\\n                                  (change)=\\\"onBusinessSectorPostingToggleChanged($event)\\\">\\r\\n                    Business Sector Nominal for Posting Purpose\\r\\n                </mat-slide-toggle>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-divider></mat-divider>\\r\\n    <mat-card class=\\\"Main-Physicals-Province-Details\\\">\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                Province configuration\\r\\n            </mat-card-title>\\r\\n            <div class='mat-toggle-height'\\r\\n                 fxFlex=\\\"80%\\\"\\r\\n                 fxLayoutAlign=\\\"end start\\\">\\r\\n                Province Activation\\r\\n                <mat-slide-toggle mat-raised-button\\r\\n                                  [checked]=\\\"isProvinceActivationToggleChecked\\\"\\r\\n                                  [formControl]=\\\"provinceActivationCtrl\\\"\\r\\n                                  (change)=\\\"onProvinceActivation($event)\\\">\\r\\n                </mat-slide-toggle>\\r\\n            </div>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div class=\\\"custom-form\\\"\\r\\n                     fxFlex=\\\"50%\\\"\\r\\n                     [class.isEmpty]=\\\"!provinceConfigurationCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"provinceConfigurationCtrl.isRequired\\\"\\r\\n                     [class.isEmpty]=\\\"!branchConfigurationCtrl.value\\\"\\r\\n                     [class.required-field]=\\\"branchConfigurationCtrl.isRequired\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input matInput\\r\\n                               placeholder=\\\"Province\\\"\\r\\n                               [required]=\\\"provinceConfigurationCtrl.isRequired\\\"\\r\\n                               [matAutocomplete]=\\\"provinceControl\\\"\\r\\n                               [formControl]=\\\"provinceConfigurationCtrl\\\"\\r\\n                               [matTooltip]=\\\"'Province for the company'\\\">\\r\\n                        <mat-autocomplete #provinceControl=\\\"matAutocomplete\\\"\\r\\n                                          [panelWidth]=\\\"panelSize\\\"\\r\\n                                          (closed)=\\\"clearDescription()\\\"\\r\\n                                          (optionSelected)=\\\"onProvinceSelected($event.option.value)\\\">\\r\\n                            <mat-option *ngFor=\\\"let item of filteredProvince\\\"\\r\\n                                        [value]=\\\"item.stateCode\\\">\\r\\n                                {{item.stateCode}} | {{item.description}}\\r\\n                            </mat-option>\\r\\n                        </mat-autocomplete>\\r\\n                        <mat-error *ngIf=\\\"provinceConfigurationCtrl.hasError('required')\\\">\\r\\n                            This field is required\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"provinceConfigurationCtrl.hasError('inDropdownList')\\\">\\r\\n                            Value not in list\\r\\n                        </mat-error>\\r\\n                        <mat-hint *ngIf=\\\"provinceConfigurationCtrl.isRequired && provinceConfigurationCtrl.enabled\\\">\\r\\n                            Required *\\r\\n                        </mat-hint>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-button\\r\\n                [disabled]=\\\"!isEdit\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            Save\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".margin {\\n  margin: 16px; }\\n\\ndiv.mat-toggle-height {\\n  height: 9px; }\\n\\n:host ::ng-deep .mat-slide-toggle.mat-checked:not(.mat-disabled) .mat-slide-toggle-bar {\\n  margin-bottom: 9px !important; }\\n\\n:host ::ng-deep.mat-slide-toggle-bar, .mat-slide-toggle-thumb {\\n  margin-bottom: 9px !important; }\\n\\ndiv.margin-bottom {\\n  margin-bottom: 80px; }\\n\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { CompanySetup } from '../../../../../../shared/entities/company-setup.entity';\r\nimport { EnumEntity } from '../../../../../../shared/entities/enum-entity.entity';\r\nimport { IntercoNoIntercoEmailSetup } from '../../../../../../shared/entities/interco-no-interco-email-setup.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { TradeConfiguration } from '../../../../../../shared/entities/trade-configuration-entity';\r\nimport { WeightUnit } from '../../../../../../shared/entities/weight-unit.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { IntercoNoIntercoEmails } from '../../../../../../shared/services/configuration/dtos/interco-no-interco-emails';\r\nimport { IntercoNoIntercoUsers } from '../../../../../../shared/services/configuration/dtos/interco-no-interco-users';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../../shared/services/util.service';\r\nimport { Province } from '../../../../../../shared/entities/province.entity';\r\nimport { Branch } from '../../../../../../shared/entities/branch.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-physicals-main',\r\n    templateUrl: './physicals-main.component.html',\r\n    styleUrls: ['./physicals-main.component.scss'],\r\n})\r\nexport class PhysicalsMainComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly savePhysicals = new EventEmitter();\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    @Output() readonly provinceConfigurationStatus = new EventEmitter<boolean>();\r\n    @Output() readonly branchConfigurationStatus = new EventEmitter<boolean>();\r\n    quantityCodeCtrl = new AtlasFormControl('Quantity');\r\n    cropYearCtrl = new AtlasFormControl('CropYear');\r\n    intercoEmailCtrl = new AtlasFormControl('IntercoEmail');\r\n    noIntercoEmailCtrl = new AtlasFormControl('NoIntercoEmail');\r\n    businessSectorTradingCtrl = new AtlasFormControl('BusinessSectorForTrading');\r\n    businessSectorPostingCtrl = new AtlasFormControl('BusinessSectorForPosting');\r\n    provinceConfigurationCtrl = new AtlasFormControl('ProvinceConfiguration');\r\n    branchConfigurationCtrl = new AtlasFormControl('BranchConfiguration');\r\n    provinceActivationCtrl = new AtlasFormControl('ProvinceActivation');\r\n    model: CompanyConfigurationRecord;\r\n    masterData: MasterData;\r\n    physicalsTabMainPhysicalsFormGroup: FormGroup;\r\n    company: string;\r\n    filteredQuantityCode: WeightUnit[];\r\n    cropYearFormats: EnumEntity[] = [];\r\n    isPanelExpanded: boolean = true;\r\n    weightUnits: WeightUnit[];\r\n    interCoChipStringList: string[] = [];\r\n    noInterCoChipStringList: string[] = [];\r\n    interCoEmailChipStringList: string[] = [];\r\n    noInterCoEmailChipStringList: string[] = [];\r\n    isInterCo: boolean = false;\r\n    isEdit: boolean = false;\r\n    companySetup: CompanySetup;\r\n    companyConfiguration: CompanyConfiguration;\r\n    intercoNoIntercoUsers: IntercoNoIntercoUsers[] = [];\r\n    filteredCropYearFormats: EnumEntity[] = [];\r\n    filteredIntercoUserList: IntercoNoIntercoUsers[] = [];\r\n    filteredNoIntercoUserList: IntercoNoIntercoUsers[] = [];\r\n    companyId: string;\r\n    currentCompany: string;\r\n    isProvinceActivationToggleChecked: boolean = false;\r\n    filteredProvince: Province[];\r\n    filteredBranch: Branch[];\r\n    companyCodeForIL: string = 'il';\r\n\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected utilService: UtilService,\r\n        protected snackbarService: SnackbarService,\r\n        protected masterdataService: MasterdataService,\r\n        protected configurationService: ConfigurationService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.company = (this.companyId) ? this.companyId : this.currentCompany;\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.cropYearFormats = this.masterData.companyCropYearFormats;\r\n        this.filteredQuantityCode = this.masterData.weightUnits;\r\n        this.filteredCropYearFormats = this.masterData.companyCropYearFormats;\r\n        this.quantityCodeCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredQuantityCode = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.weightUnits,\r\n                ['weightCode', 'description'],\r\n            );\r\n        });\r\n\r\n        this.filteredProvince = this.masterData.provinces;\r\n        this.provinceConfigurationCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredProvince = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterData.provinces,\r\n                ['stateCode', 'description'],\r\n            );\r\n        });\r\n\r\n        this.filteredBranch = this.masterData.branches;\r\n\r\n        if (this.companyId) {\r\n            this.getIntercoUsers(this.companyId);\r\n        } else {\r\n            this.isEdit = true;\r\n            this.getIntercoUsers(this.currentCompany);\r\n        }\r\n        this.businessSectorPostingCtrl.disable();\r\n        this.setValidators();\r\n        this.provinceConfigurationStatus.emit(this.isProvinceActivationToggleChecked);\r\n        this.provinceConfigurationCtrl.disable();\r\n        if (this.company && this.company.toLowerCase() === this.companyCodeForIL) {\r\n            this.provinceActivationCtrl.setValue(true);\r\n            this.provinceActivationCtrl.enable();\r\n            this.provinceConfigurationCtrl.enable();\r\n            this.setValidationsForProvinces(true);\r\n        }\r\n        this.branchConfigurationStatus.emit(this.isProvinceActivationToggleChecked);\r\n        if (this.company && this.company.toLowerCase() === this.companyCodeForIL) {\r\n            this.provinceActivationCtrl.setValue(true);\r\n            this.provinceActivationCtrl.enable();\r\n        }\r\n    }\r\n\r\n    onProvinceSelected(provinceCode: string) {\r\n        const selectedProvince = this.masterData.provinces.find(\r\n            (p) => p.stateCode === provinceCode,\r\n        );\r\n        if (selectedProvince) {\r\n            this.provinceConfigurationCtrl.patchValue(\r\n                selectedProvince.stateCode,\r\n            );\r\n        }\r\n    }\r\n\r\n    clearDescription() {\r\n        if (!this.provinceConfigurationCtrl.value) {\r\n            this.provinceConfigurationCtrl.patchValue('');\r\n        }\r\n    }\r\n\r\n    getIntercoUsers(companyId: string) {\r\n        this.subscriptions.push(this.configurationService.getInterCoNoInterCoUsers(companyId)\r\n            .subscribe((data: IntercoNoIntercoUsers[]) => {\r\n                if (data) {\r\n                    this.intercoNoIntercoUsers = data;\r\n                    this.intercoEmailCtrl.valueChanges.subscribe((input) => {\r\n                        this.filteredIntercoUserList = this.utilService.filterListforAutocomplete(\r\n                            input,\r\n                            data,\r\n                            ['email'],\r\n                        );\r\n                    });\r\n\r\n                    this.noIntercoEmailCtrl.valueChanges.subscribe((input) => {\r\n                        this.filteredNoIntercoUserList = this.utilService.filterListforAutocomplete(\r\n                            input,\r\n                            data,\r\n                            ['email'],\r\n                        );\r\n                    });\r\n                }\r\n            }));\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.physicalsTabMainPhysicalsFormGroup = this.formBuilder.group({\r\n            quantityCodeCtrl: this.quantityCodeCtrl,\r\n            cropYearCtrl: this.cropYearCtrl,\r\n            intercoEmailCtrl: this.intercoEmailCtrl,\r\n            noIntercoEmailCtrl: this.noIntercoEmailCtrl,\r\n            businessSectorTradingCtrl: this.businessSectorTradingCtrl,\r\n            businessSectorPostingCtrl: this.businessSectorPostingCtrl,\r\n            provinceConfigurationCtrl: this.provinceConfigurationCtrl,\r\n            provinceActivationCtrl: this.provinceActivationCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setValidators() {\r\n        this.quantityCodeCtrl.setValidators(\r\n            Validators.compose([\r\n                inDropdownListValidator(\r\n                    this.masterData.weightUnits,\r\n                    nameof<WeightUnit>('weightUnitId'),\r\n                ),\r\n            ]));\r\n        this.quantityCodeCtrl.setValidators([\r\n            Validators.compose([Validators.required]),\r\n        ]);\r\n    }\r\n\r\n    onIntercoAddToListClicked() {\r\n        const interCoUserEmailId = this.intercoEmailCtrl.value;\r\n        if (interCoUserEmailId) {\r\n            this.interCoEmailChipStringList.push(interCoUserEmailId);\r\n            this.interCoChipStringList = [];\r\n\r\n            this.interCoEmailChipStringList.forEach((emailId: string) => {\r\n                if (this.interCoChipStringList.filter((item) => item === emailId).length === 0) {\r\n                    this.interCoChipStringList.push(emailId);\r\n                }\r\n            });\r\n            this.intercoEmailCtrl.clearValidators();\r\n            this.intercoEmailCtrl.updateValueAndValidity();\r\n            this.intercoEmailCtrl.setValue('');\r\n        }\r\n    }\r\n\r\n    onInterCoRemoveClicked(value) {\r\n        if (this.isEdit) {\r\n            const index = this.interCoChipStringList.indexOf(value);\r\n            const emailIdIndex = this.interCoEmailChipStringList.indexOf(value);\r\n            if (index > -1) {\r\n                this.interCoChipStringList.splice(index, 1);\r\n            }\r\n            if (emailIdIndex > -1) {\r\n                this.interCoEmailChipStringList.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    onNoInterCoRemoveClicked(value) {\r\n        if (this.isEdit) {\r\n            const index = this.noInterCoChipStringList.indexOf(value);\r\n            const emailIdIndex = this.noInterCoEmailChipStringList.indexOf(value);\r\n            if (index > -1) {\r\n                this.noInterCoChipStringList.splice(index, 1);\r\n            }\r\n            if (emailIdIndex > -1) {\r\n                this.noInterCoEmailChipStringList.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    onNoIntercoAddToListClicked() {\r\n        const noInterCoUserEmailId = this.noIntercoEmailCtrl.value;\r\n        if (noInterCoUserEmailId) {\r\n            this.noInterCoEmailChipStringList.push(noInterCoUserEmailId);\r\n            this.noInterCoChipStringList = [];\r\n\r\n            this.noInterCoEmailChipStringList.forEach((emailId: string) => {\r\n                if (this.noInterCoChipStringList.filter((item) => item === emailId).length === 0) {\r\n                    this.noInterCoChipStringList.push(emailId);\r\n                }\r\n            });\r\n            this.noIntercoEmailCtrl.clearValidators();\r\n            this.noIntercoEmailCtrl.updateValueAndValidity();\r\n            this.noIntercoEmailCtrl.setValue('');\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'PhysicalsMainComponent' });\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.utilService.updateFormGroupValidity(this.physicalsTabMainPhysicalsFormGroup);\r\n        if (!this.physicalsTabMainPhysicalsFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Physicals tab - Main physicals is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        this.getMainPhysicalsDataToSave();\r\n        this.isSideNavOpened.emit(false);\r\n        this.savePhysicals.emit();\r\n    }\r\n\r\n    getMainPhysicalsDataToSave() {\r\n        this.companyConfiguration = new CompanyConfiguration();\r\n        const companySetup = new CompanySetup();\r\n        const tradeConfiguration = new TradeConfiguration();\r\n        const intercoNoIntercoEmailSetup: IntercoNoIntercoEmailSetup[] = new Array<IntercoNoIntercoEmailSetup>();\r\n\r\n        companySetup.cropYearFormatId = this.cropYearCtrl.value;\r\n        tradeConfiguration.companyId = this.company;\r\n        if (this.model && this.model.tradeConfiguration.tradeSetupId) {\r\n            tradeConfiguration.tradeSetupId = this.model.tradeConfiguration.tradeSetupId;\r\n        }\r\n        tradeConfiguration.businessSectorNominalTradingOperation = this.businessSectorTradingCtrl.value ? true : false;\r\n        tradeConfiguration.businessSectorNominalPostingPurpose = this.businessSectorPostingCtrl.value ? true : false;\r\n        tradeConfiguration.weightUnitId = this.quantityCodeCtrl.value;\r\n        if (this.provinceActivationCtrl.value) {\r\n            if (this.provinceConfigurationCtrl.value) {\r\n                const matchedProvince = this.filteredProvince.find((p) =>\r\n                p.stateCode === this.provinceConfigurationCtrl.value);\r\n                if(matchedProvince){\r\n                    companySetup.defaultProvinceId = matchedProvince.provinceId;\r\n                    companySetup.defaultBranchId = this.masterData.branches[0].branchId;\r\n                }\r\n            }\r\n            companySetup.isProvinceEnable = this.provinceActivationCtrl.value;\r\n        }\r\n\r\n        for (let i = 0; i < this.interCoChipStringList.length; i++) {\r\n            const intercoEmail = new IntercoNoIntercoEmailSetup();\r\n            const intercoUser = this.intercoNoIntercoUsers.find((e) => e.email === this.interCoChipStringList[i]);\r\n            if (this.model && this.model.interCoNoInterCoEmailSetup) {\r\n                const intercoConfigId = this.model.interCoNoInterCoEmailSetup.find((d) => d.email === this.interCoChipStringList[i]\r\n                    && d.isInterCo === true);\r\n                if (intercoConfigId) {\r\n                    intercoEmail.configId = intercoConfigId.configId;\r\n                }\r\n            }\r\n            intercoEmail.companyId = this.company;\r\n            intercoEmail.userId = intercoUser.userId;\r\n            intercoEmail.isDeactivated = intercoUser.isDisabled;\r\n            intercoEmail.isInterCo = true;\r\n\r\n            intercoNoIntercoEmailSetup.push(intercoEmail);\r\n        }\r\n\r\n        for (let i = 0; i < this.noInterCoChipStringList.length; i++) {\r\n            const noIntercoEmail = new IntercoNoIntercoEmailSetup();\r\n            const noIntercoUser = this.intercoNoIntercoUsers.find((e) => e.email === this.noInterCoChipStringList[i]);\r\n            if (this.model && this.model.interCoNoInterCoEmailSetup) {\r\n                const noIntercoConfigId = this.model.interCoNoInterCoEmailSetup.find((d) => d.email === this.noInterCoChipStringList[i]\r\n                    && d.isInterCo === false);\r\n                if (noIntercoConfigId) {\r\n                    noIntercoEmail.configId = noIntercoConfigId.configId;\r\n                }\r\n            }\r\n            noIntercoEmail.companyId = this.company;\r\n            noIntercoEmail.userId = noIntercoUser.userId;\r\n            noIntercoEmail.isDeactivated = noIntercoUser.isDisabled;\r\n            noIntercoEmail.isInterCo = false;\r\n\r\n            intercoNoIntercoEmailSetup.push(noIntercoEmail);\r\n        }\r\n\r\n        this.companyConfiguration.companySetup = companySetup;\r\n        this.companyConfiguration.tradeConfiguration = tradeConfiguration;\r\n        this.companyConfiguration.intercoNoIntercoEmailSetup = intercoNoIntercoEmailSetup;\r\n    }\r\n\r\n    displayQuantityUnit(weightUnitId: number): string {\r\n        if (this.masterData.weightUnits && weightUnitId) {\r\n            const selectedUnit = this.masterData.weightUnits.filter(\r\n                (weightUnit) => weightUnit.weightUnitId === weightUnitId,\r\n            );\r\n\r\n            if (selectedUnit.length > 0) {\r\n                return selectedUnit[0].weightCode;\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    validateMainPhysicals(): boolean {\r\n        if (!(this.quantityCodeCtrl.value && this.cropYearCtrl.value\r\n            && this.interCoChipStringList.length > 0 && this.noInterCoChipStringList.length > 0)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    onBusinessSectorTradingToggleChanged(event: MatSlideToggleChange) {\r\n        if (event.checked) {\r\n            this.businessSectorPostingCtrl.enable();\r\n        } else {\r\n            this.businessSectorPostingCtrl.disable();\r\n        }\r\n    }\r\n\r\n    onBusinessSectorPostingToggleChanged(event: MatSlideToggleChange) {\r\n        if (event.checked) {\r\n            this.businessSectorTradingCtrl.disable();\r\n        } else {\r\n            this.businessSectorTradingCtrl.enable();\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: CompanyConfigurationRecord, isEdit: boolean) {\r\n        this.isEdit = isEdit;\r\n        this.model = companyConfigurationRecord;\r\n        if (this.model.tradeConfiguration) {\r\n            this.quantityCodeCtrl.setValue(this.model.tradeConfiguration.weightUnitId);\r\n            this.isProvinceActivationToggleChecked = this.model.companySetup.isProvinceEnable;\r\n\r\n            if(this.isProvinceActivationToggleChecked) {\r\n                this.provinceActivationCtrl.patchValue(this.model.companySetup.isProvinceEnable);\r\n                \r\n                const selectedProvince = this.masterData.provinces.find(\r\n                    (p) => p.provinceId === this.model.companySetup.defaultProvinceId,\r\n                );\r\n                if (selectedProvince) {\r\n                    this.provinceConfigurationCtrl.patchValue(\r\n                        selectedProvince.stateCode,\r\n                    );\r\n                }\r\n            }\r\n            if (this.model.companySetup.cropYearId) {\r\n                this.cropYearCtrl.patchValue(this.model.companySetup.cropYearId);\r\n                this.cropYearCtrl.clearValidators();\r\n                this.cropYearCtrl.updateValueAndValidity();\r\n            }\r\n            if (this.model.interCoNoInterCoEmailSetup) {\r\n                let intercoNoIntercoEmails: IntercoNoIntercoEmails[] = new Array<IntercoNoIntercoEmails>();\r\n                intercoNoIntercoEmails = this.model.interCoNoInterCoEmailSetup.filter((e) => e.isInterCo === true);\r\n                this.interCoChipStringList = [];\r\n                this.interCoEmailChipStringList = [];\r\n                for (let i = 0; i < intercoNoIntercoEmails.length; i++) {\r\n                    const intercoUser = this.intercoNoIntercoUsers.find((e) => e.userId === intercoNoIntercoEmails[i].userId);\r\n                    if (intercoUser) {\r\n                        this.interCoChipStringList.push(intercoUser.email);\r\n                        this.interCoEmailChipStringList.push(intercoUser.email);\r\n                    }\r\n                }\r\n\r\n                let noIntercoNoIntercoEmails: IntercoNoIntercoEmails[] = new Array<IntercoNoIntercoEmails>();\r\n                noIntercoNoIntercoEmails = this.model.interCoNoInterCoEmailSetup.filter((e) => e.isInterCo === false);\r\n                this.noInterCoChipStringList = [];\r\n                this.noInterCoEmailChipStringList = [];\r\n                for (let i = 0; i < noIntercoNoIntercoEmails.length; i++) {\r\n                    const noIntercoUser = this.intercoNoIntercoUsers.find((e) => e.userId === noIntercoNoIntercoEmails[i].userId);\r\n                    if (noIntercoUser) {\r\n                        this.noInterCoChipStringList.push(noIntercoUser.email);\r\n                        this.noInterCoEmailChipStringList.push(noIntercoUser.email);\r\n                    }\r\n                }\r\n            }\r\n            this.businessSectorTradingCtrl.setValue(this.model.tradeConfiguration.businessSectorNominalTradingOperation);\r\n            this.businessSectorPostingCtrl.setValue(this.model.tradeConfiguration.businessSectorNominalPostingPurpose);\r\n\r\n            if (this.interCoChipStringList.length > 0) {\r\n                this.intercoEmailCtrl.clearValidators();\r\n                this.intercoEmailCtrl.updateValueAndValidity();\r\n            }\r\n            if (this.noInterCoChipStringList.length > 0) {\r\n                this.noIntercoEmailCtrl.clearValidators();\r\n                this.noIntercoEmailCtrl.updateValueAndValidity();\r\n            }\r\n\r\n            this.provinceConfigurationStatus.emit(this.isProvinceActivationToggleChecked);\r\n            this.branchConfigurationStatus.emit(this.isProvinceActivationToggleChecked);\r\n        }\r\n\r\n        if (!isEdit) {\r\n            this.businessSectorPostingCtrl.disable();\r\n            this.businessSectorTradingCtrl.disable();\r\n            this.physicalsTabMainPhysicalsFormGroup.disable();\r\n        } else {\r\n            this.physicalsTabMainPhysicalsFormGroup.enable();\r\n            if (this.businessSectorTradingCtrl.value) {\r\n                if (this.businessSectorPostingCtrl.value) {\r\n                    this.businessSectorTradingCtrl.disable();\r\n                    this.businessSectorPostingCtrl.enable();\r\n                } else {\r\n                    this.businessSectorPostingCtrl.enable();\r\n                    this.businessSectorTradingCtrl.enable();\r\n                }\r\n            } else {\r\n                this.businessSectorTradingCtrl.enable();\r\n                this.businessSectorPostingCtrl.disable();\r\n            }\r\n        }\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const CompanyConfigurationEntity = entity;\r\n        this.getMainPhysicalsDataToSave();\r\n        CompanyConfigurationEntity.companySetup = this.companyConfiguration.companySetup;\r\n        CompanyConfigurationEntity.tradeConfiguration = this.companyConfiguration.tradeConfiguration;\r\n        CompanyConfigurationEntity.intercoNoIntercoEmailSetup = this.companyConfiguration.intercoNoIntercoEmailSetup;\r\n        return CompanyConfigurationEntity;\r\n    }\r\n\r\n    onProvinceActivation(value: MatSlideToggleChange) {\r\n        this.isProvinceActivationToggleChecked = value.checked;\r\n        this.setValidationsForProvinces(this.isProvinceActivationToggleChecked);\r\n    }\r\n\r\n    setValidationsForProvinces(value: boolean) {\r\n        if (!value) {\r\n            this.provinceConfigurationCtrl.disable();\r\n            this.provinceConfigurationCtrl.setValidators(null);\r\n        }\r\n        else {\r\n            this.provinceConfigurationCtrl.enable();\r\n            this.provinceConfigurationCtrl.setValidators([Validators.required]);\r\n            this.provinceConfigurationCtrl.setValidators(\r\n                Validators.compose([\r\n                    inDropdownListValidator(\r\n                        this.masterData.provinces,\r\n                        nameof<Province>('stateCode'),\r\n                    ),\r\n                ]),\r\n            );\r\n        }\r\n        this.provinceConfigurationCtrl.updateValueAndValidity();\r\n    }\r\n}","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.sm=\\\"row wrap\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxLayoutAlign.sm=\\\"space-around stretch\\\"\\r\\n         fxLayoutAlign.xs=\\\"center center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         fxLayoutGap.sm=\\\"0\\\"\\r\\n         class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n        <mat-card (click)=\\\"onMainPhysicalsTabCliked()\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Main Physicals</h2>\\r\\n            </mat-card-title>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onMandatoyTradeSetUpTabCliked()\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\GlobalParam_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Mandatory & Trade Approval and Image set-up </h2>\\r\\n            </mat-card-title>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onAllocationSetUpTabCliked()\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Profiles_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Allocation set-up </h2>\\r\\n            </mat-card-title>\\r\\n        </mat-card>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n<div fxLayout=\\\"column\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #mainPhysicalsSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-physicals-main #mainPhysicalsComponent\\r\\n                                  (discardChanges)=\\\"onDiscardClick($event)\\\"\\r\\n                                  (savePhysicals)=\\\"mainPhysicalsSideNav.close()\\\"\\r\\n                                  (isSideNavOpened)=\\\"sideNavOpened($event)\\\"></atlas-physicals-main>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideMandatorySidenav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #mandatoryTradeSetUpSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-mandatory-trade-approval #mandatoryTradeSetUpComponent\\r\\n                                            (saveMandatory)=\\\"mandatoryTradeSetUpSideNav.close()\\\"\\r\\n                                            (discardChanges)=\\\"onDiscardClick($event)\\\"\\r\\n                                            (isSideNavOpened)=\\\"sideNavOpened($event)\\\">\\r\\n            </atlas-mandatory-trade-approval>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"hideAllocationSidenav\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #allocationSetUpSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-allocation-set-up #allocationSetupComponent\\r\\n                                     (saveAllocation)=\\\"allocationSetUpSideNav.close()\\\"\\r\\n                                     (discardChanges)=\\\"onDiscardClick($event)\\\"\\r\\n                                     (isSideNavOpened)=\\\"sideNavOpened($event)\\\"></atlas-allocation-set-up>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\"","module.exports = \".sidenav {\\n  width: 960px;\\n  top: 56px; }\\n\"","import { Component, ElementRef, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog, MatSidenav } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AllocationSetUp } from '../../../../../shared/entities/allocation-set-up-entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { ConfirmationDialogComponent } from './../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { User } from './../../../../../shared/entities/user.entity';\r\nimport { FormConfigurationProviderService } from './../../../../../shared/services/form-configuration-provider.service';\r\nimport { AllocationSetUpComponent } from './allocation-set-up/allocation-set-up.component';\r\nimport { MandatoryTradeApprovalComponent } from './mandatory-trade-approval/mandatory-trade-approval.component';\r\nimport { PhysicalsMainComponent } from './physicals-main/physicals-main.component';\r\n\r\n@Component({\r\n    selector: 'atlas-physicals-tab',\r\n    templateUrl: './physicals-tab.component.html',\r\n    styleUrls: ['./physicals-tab.component.scss'],\r\n})\r\nexport class PhysicalsTabComponent extends BaseFormComponent implements OnInit {\r\n    @Output() readonly isSideNavOpened = new EventEmitter<boolean>();\r\n    @ViewChild('mainPhysicalsComponent') mainPhysicalsComponent: PhysicalsMainComponent;\r\n    @ViewChild('mainPhysicalsSideNav') mainPhysicalsSideNav: MatSidenav;\r\n    @ViewChild('mandatoryTradeSetUpComponent') mandatoryTradeSetUpComponent: MandatoryTradeApprovalComponent;\r\n    @ViewChild('allocationSetupComponent') allocationSetupComponent: AllocationSetUpComponent;\r\n    @ViewChild('allocationSetUpSideNav') allocationSetUpSideNav: MatSidenav;\r\n    @ViewChild('mandatoryTradeSetUpSideNav') mandatoryTradeSetUpSideNav: MatSidenav;\r\n\r\n    formComponents: BaseFormComponent[] = [];\r\n    users: User[] = [];\r\n    isEdit: boolean;\r\n    masterdata: MasterData = new MasterData();\r\n    company: string;\r\n    physicalsMainComponent: string = 'PhysicalsMainComponent';\r\n    allocationSetUpComponent: string = 'AllocationSetUpComponent';\r\n    mandatoryTradeApprovalComponent: string = 'MandatoryTradeApprovalComponent';\r\n    dataList: AllocationSetUp[] = [];\r\n    companyConfigurationRecord: CompanyConfigurationRecord;\r\n    @ViewChild('divAllocate') divAllocate: ElementRef;\r\n    hideAllocationSidenav: boolean;\r\n    hideMandatorySidenav: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected configurationService: ConfigurationService,\r\n        protected formBuilder: FormBuilder) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('companyId');\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.isSideNavOpened.emit(false);\r\n        this.formComponents.push(\r\n            this.mainPhysicalsComponent,\r\n            this.mandatoryTradeSetUpComponent,\r\n            this.allocationSetupComponent,\r\n        );\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            mainPhysicalsGroup: this.mainPhysicalsComponent.getFormGroup(),\r\n            locationGroup: this.mandatoryTradeSetUpComponent.getFormGroup(),\r\n            detailsGroup: this.allocationSetupComponent.getFormGroup(),\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    sideNavOpened(event: boolean) {\r\n        this.isSideNavOpened.emit(event);\r\n    }\r\n\r\n    onMainPhysicalsTabCliked() {\r\n        this.hideAllocationSidenav = true;\r\n        this.hideMandatorySidenav = true;\r\n        this.isSideNavOpened.emit(true);\r\n        this.mainPhysicalsSideNav.open();\r\n    }\r\n\r\n    onAllocationSetUpTabCliked() {\r\n        this.hideAllocationSidenav = false;\r\n        this.hideMandatorySidenav = true;\r\n        this.allocationSetupComponent.readyAllocationSetUpEditor();\r\n        this.isSideNavOpened.emit(true);\r\n        this.allocationSetUpSideNav.open();\r\n    }\r\n\r\n    onMandatoyTradeSetUpTabCliked() {\r\n        this.hideMandatorySidenav = false;\r\n        this.hideAllocationSidenav = true;\r\n        this.mandatoryTradeSetUpComponent.readyMandatoryFieldSetUpEditor();\r\n        this.isSideNavOpened.emit(true);\r\n        this.mandatoryTradeSetUpSideNav.open();\r\n    }\r\n\r\n    onDiscardClick(value) {\r\n        if (this.isEdit) {\r\n            const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Discard Changes',\r\n                    text: 'You have some modification pending. Close and lose changes?',\r\n                    okButton: 'Ok',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n            confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    if (value) {\r\n                        this.closeSideNavs(value.selectedOptionName);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            if (value) {\r\n                this.closeSideNavs(value.selectedOptionName);\r\n            }\r\n        }\r\n        this.isSideNavOpened.emit(false);\r\n    }\r\n\r\n    closeSideNavs(selectedOptionName: string) {\r\n        if (selectedOptionName === this.physicalsMainComponent) {\r\n            this.mainPhysicalsSideNav.close();\r\n        } else if (selectedOptionName === this.allocationSetUpComponent) {\r\n            this.allocationSetUpSideNav.close();\r\n        } else if (selectedOptionName === this.mandatoryTradeApprovalComponent) {\r\n            this.mandatoryTradeSetUpSideNav.close();\r\n        }\r\n    }\r\n\r\n    initForm(companyConfigurationRecord: any, isEdit): any {\r\n        this.isEdit = isEdit;\r\n        this.companyConfigurationRecord = companyConfigurationRecord;\r\n        this.formComponents.forEach((comp) => {\r\n            companyConfigurationRecord = comp.initForm(companyConfigurationRecord, isEdit);\r\n        });\r\n        return companyConfigurationRecord;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header>\\r\\n        <mat-card-title>\\r\\n            <h2>Default Taxes</h2>\\r\\n        </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"75%\\\">\\r\\n                <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                    <mat-select placeholder=\\\"Default Tax for costs Invoicing\\\"\\r\\n                                [formControl]=\\\"taxCostInvoicingCtrl\\\">\\r\\n                        <mat-option *ngFor=\\\"let type of this.taxCosts \\\"\\r\\n                                    [value]=\\\"type.vatCode\\\">{{type.vatCode}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-error *ngIf=\\\"taxCostInvoicingCtrl.hasError('required')\\\">\\r\\n                        Required *\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"taxCostInvoicingCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                    <mat-select placeholder=\\\"Default Tax for goods Invoicing\\\"\\r\\n                                [formControl]=\\\"taxGoodsInvoicingCtrl\\\">\\r\\n                        <mat-option *ngFor=\\\"let type of this.taxGoods \\\"\\r\\n                                    [value]=\\\"type.vatCode\\\">{{type.vatCode}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-error *ngIf=\\\"taxGoodsInvoicingCtrl.hasError('required')\\\">\\r\\n                        Required *\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"taxGoodsInvoicingCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { Vat } from '../../../../../../shared/entities/vat.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-default-taxes',\r\n    templateUrl: './default-taxes.component.html',\r\n    styleUrls: ['./default-taxes.component.scss'],\r\n})\r\nexport class DefaultTaxesComponent extends BaseFormComponent implements OnInit {\r\n    masterdata: MasterData = new MasterData();\r\n    taxCosts: Vat[];\r\n    taxGoods: Vat[];\r\n    taxCostInvoicingCtrl = new AtlasFormControl('taxCostInvoicingCtrl');\r\n    taxGoodsInvoicingCtrl = new AtlasFormControl('taxGoodsInvoicingCtrl');\r\n    model: CompanyConfigurationRecord;\r\n    taxStatus: boolean;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.taxCosts = this.masterdata.vats;\r\n        this.taxGoods = this.masterdata.vats;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            taxCostInvoicingCtrl: this.taxCostInvoicingCtrl,\r\n            taxGoodsInvoicingCtrl: this.taxGoodsInvoicingCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    setValidations(taxStatus: boolean) {\r\n        this.taxStatus = taxStatus;\r\n        if (!this.taxStatus) {\r\n            this.taxCostInvoicingCtrl.disable();\r\n            this.taxGoodsInvoicingCtrl.disable();\r\n            this.taxCostInvoicingCtrl.clearValidators();\r\n            this.taxGoodsInvoicingCtrl.clearValidators();\r\n        } else {\r\n            this.taxCostInvoicingCtrl.enable();\r\n            this.taxGoodsInvoicingCtrl.enable();\r\n            this.taxGoodsInvoicingCtrl.setValidators(Validators.compose([Validators.required]));\r\n            this.taxCostInvoicingCtrl.setValidators(Validators.compose([Validators.required]));\r\n        }\r\n        this.taxGoodsInvoicingCtrl.updateValueAndValidity();\r\n        this.taxCostInvoicingCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    initForm(entity: any, isEdit): any {\r\n        const companyConfiguration = entity;\r\n        this.model = companyConfiguration;\r\n\r\n        if (this.model.invoiceSetup) {\r\n            if (this.model.invoiceSetup.defaultCostVATCode !== null && this.model.invoiceSetup.defaultCostVATCode !== '') {\r\n                this.taxCostInvoicingCtrl.setValue(this.model.invoiceSetup.defaultCostVATCode);\r\n            }\r\n            if (this.model.invoiceSetup.defaultVATCode !== null && this.model.invoiceSetup.defaultVATCode !== '') {\r\n                this.taxGoodsInvoicingCtrl.setValue(this.model.invoiceSetup.defaultVATCode);\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n\r\n        return entity;\r\n    }\r\n    populateEntity(entity: CompanyConfiguration): CompanyConfiguration {\r\n        const companyConfiguration = entity as CompanyConfiguration;\r\n        companyConfiguration.invoiceSetup.defaultCostVATCode = this.taxCostInvoicingCtrl.value;\r\n        companyConfiguration.invoiceSetup.defaultVATCode = this.taxGoodsInvoicingCtrl.value;\r\n        return companyConfiguration;\r\n    }\r\n\r\n}\r\n","module.exports = \"<mat-card>\\r\\n    <mat-card-header fxLayoutAlign=\\\"space-between\\\">\\r\\n        <mat-card-title>\\r\\n            <h2>Tax Configuration</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-slide-toggle [formControl]=\\\"taxActiveCtrl\\\"\\r\\n                          (change)=\\\"toggle($event)\\\"\\r\\n                          mat-raised-button>Tax Active\\r\\n        </mat-slide-toggle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div class=\\\"custom-form\\\"\\r\\n                 fxFlex=\\\"40%\\\">\\r\\n                <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                    <mat-select placeholder=\\\"Tax Type\\\"\\r\\n                                [formControl]=\\\"taxTypeCtrl\\\">\\r\\n                        <mat-option *ngFor=\\\"let type of this.taxTypes \\\"\\r\\n                                    [value]=\\\"type.enumEntityValue\\\">{{type.enumEntityValue}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-error *ngIf=\\\"taxTypeCtrl.hasError('required')\\\">\\r\\n                        Required *\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"taxTypeCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field fxFlex=\\\"50%\\\">\\r\\n                    <mat-select placeholder=\\\"Tax Label\\\"\\r\\n                                [formControl]=\\\"taxLabelCtrl\\\">\\r\\n                        <mat-option *ngFor=\\\"let type of this.taxLabel \\\"\\r\\n                                    [value]=\\\"type.enumEntityValue\\\">{{type.enumEntityValue}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-error *ngIf=\\\"taxLabelCtrl.hasError('required')\\\">\\r\\n                        Required *\\r\\n                    </mat-error>\\r\\n                    <mat-hint *ngIf=\\\"taxLabelCtrl.isRequired\\\">\\r\\n                        Required *\\r\\n                    </mat-hint>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../../../shared/entities/company-configuration.entity';\r\nimport { MasterData } from '../../../../../../shared/entities/masterdata.entity';\r\nimport { TaxType } from '../../../../../../shared/entities/tax-Type.entity';\r\nimport { CompanyConfigurationRecord } from '../../../../../../shared/services/configuration/dtos/company-configuration-record';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { MasterdataService } from '../../../../../../shared/services/http-services/masterdata.service';\r\nimport { UtilService } from '../../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-tax-configuration',\r\n    templateUrl: './tax-configuration.component.html',\r\n    styleUrls: ['./tax-configuration.component.scss'],\r\n})\r\nexport class TaxConfigurationComponent extends BaseFormComponent implements OnInit {\r\n    masterdata: MasterData = new MasterData();\r\n    taxTypes: TaxType[];\r\n    taxLabel: TaxType[];\r\n    taxTypeCtrl = new AtlasFormControl('taxTypeCtrl');\r\n    taxLabelCtrl = new AtlasFormControl('taxLabelCtrl');\r\n    taxActiveCtrl = new AtlasFormControl('taxActiveCtrl');\r\n    @Output() readonly sendTaxActive = new EventEmitter<boolean>();\r\n    model: CompanyConfigurationRecord;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected route: ActivatedRoute,\r\n        protected utilService: UtilService,\r\n        protected masterdataService: MasterdataService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.taxTypes = this.masterdata.taxTypes;\r\n        this.taxLabel = this.masterdata.taxTypes.filter((item) => item.enumEntityValue !== 'Indian GST');\r\n        this.taxActiveCtrl.setValue(false);\r\n        this.sendTaxActive.emit(this.taxActiveCtrl.value);\r\n        this.setValidators();\r\n    }\r\n\r\n    toggle(event: MatSlideToggleChange) {\r\n        this.sendTaxActive.emit(event.checked);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            taxTypeCtrl: this.taxTypeCtrl,\r\n            taxLabelCtrl: this.taxLabelCtrl,\r\n            taxActiveCtrl: this.taxActiveCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: CompanyConfigurationRecord, isEdit): CompanyConfigurationRecord {\r\n        const companyConfiguration = entity;\r\n        this.model = companyConfiguration;\r\n\r\n        if (this.model.invoiceSetup) {\r\n            this.sendTaxActive.emit(this.model.invoiceSetup.vatActive);\r\n            this.taxActiveCtrl.setValue(this.model.invoiceSetup.vatActive);\r\n\r\n            if (this.model.invoiceSetup.taxType !== null && this.model.invoiceSetup.taxType !== '') {\r\n                this.taxTypeCtrl.setValue(this.model.invoiceSetup.taxType);\r\n            }\r\n            if (this.model.invoiceSetup.vatLabel !== null && this.model.invoiceSetup.vatLabel !== '') {\r\n                this.taxLabelCtrl.setValue(this.model.invoiceSetup.vatLabel);\r\n            }\r\n        }\r\n        if (!isEdit) {\r\n            this.formGroup.disable();\r\n        } else {\r\n            this.formGroup.enable();\r\n        }\r\n\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any): CompanyConfiguration {\r\n        const companyConfiguration = entity as CompanyConfiguration;\r\n        companyConfiguration.invoiceSetup.vatActive = this.taxActiveCtrl.value;\r\n        if (this.taxTypeCtrl.value) {\r\n            companyConfiguration.invoiceSetup.taxTypeId = (this.masterdata.taxTypes.find((i) =>\r\n                i.enumEntityValue === this.taxTypeCtrl.value).enumEntityId);\r\n        }\r\n        companyConfiguration.invoiceSetup.vatLabel = this.taxLabelCtrl.value;\r\n        return companyConfiguration;\r\n    }\r\n\r\n    setValidators() {\r\n        this.taxTypeCtrl.setValidators([\r\n            Validators.compose([Validators.required]),\r\n        ]);\r\n        this.taxLabelCtrl.setValidators([\r\n            Validators.compose([Validators.required]),\r\n        ]);\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row wrap\\\"\\r\\n     fxLayoutAlign=\\\"start\\\"\\r\\n     fxLayoutGap=\\\"16px\\\"\\r\\n     class=\\\"grid-main-tab\\\">\\r\\n    <atlas-tax-configuration #taxConfigurationComponent\\r\\n                             (sendTaxActive)=\\\"getData($event)\\\"\\r\\n                             fxFlexOrder.lt-md=\\\"1\\\"\\r\\n                             fxFlex=\\\"49%\\\"></atlas-tax-configuration>\\r\\n    <atlas-default-taxes #defaultTaxesComponent\\r\\n                         [hidden]=\\\"!taxActiveStatus\\\"\\r\\n                         fxFlexOrder.lt-md=\\\"2\\\"\\r\\n                         fxFlex=\\\"49%\\\"></atlas-default-taxes>\\r\\n\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { DefaultTaxesComponent } from './default-taxes/default-taxes.component';\r\nimport { TaxConfigurationComponent } from './tax-configuration/tax-configuration.component';\r\n\r\n@Component({\r\n    selector: 'atlas-tax-tab',\r\n    templateUrl: './tax-tab.component.html',\r\n    styleUrls: ['./tax-tab.component.scss'],\r\n})\r\nexport class TaxTabComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('taxConfigurationComponent') taxConfigurationComponent: TaxConfigurationComponent;\r\n    @ViewChild('defaultTaxesComponent') defaultTaxesComponent: DefaultTaxesComponent;\r\n    taxActiveStatus = true;\r\n    formComponents: BaseFormComponent[] = [];\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.formComponents.push(\r\n            this.taxConfigurationComponent,\r\n            this.defaultTaxesComponent,\r\n        );\r\n    }\r\n\r\n    public getData(value): void {\r\n        this.taxActiveStatus = value;\r\n        this.defaultTaxesComponent.taxStatus = this.taxActiveStatus;\r\n        this.defaultTaxesComponent.setValidations(this.taxActiveStatus);\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            taxConfigurationGroup: this.taxConfigurationComponent.getFormGroup(),\r\n            defaultTaxesGroup: this.defaultTaxesComponent.getFormGroup(),\r\n        });\r\n\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    initForm(entity: any, isEdit): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.initForm(entity, isEdit);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n    populateEntity(entity: any): any {\r\n        this.formComponents.forEach((comp) => {\r\n            entity = comp.populateEntity(entity);\r\n        });\r\n        return entity;\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"company-masterdata-warning-banner\\\">\\r\\n    <mat-card class=\\\"company-masterdata-warning-card\\\">\\r\\n        <div class=\\\"question-circle-icon\\\">\\r\\n            <mat-icon>help_outline</mat-icon>\\r\\n        </div>\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h4>Transactional Data Requirements</h4>\\r\\n            </mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n                You need to copy all Master Data to the new company to be able to copy Transactional\\r\\n                Data\\r\\n            </mat-card-subtitle>\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\">\\r\\n    <mat-card class=\\\"master-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Automatic Master Data Import</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-subtitle>\\r\\n            Following Master Data will be imported automatically\\r\\n        </mat-card-subtitle>\\r\\n        <mat-card-content>\\r\\n            <p>Arbitration</p>\\r\\n            <p>Business Sector</p>\\r\\n            <p>Price Unit</p>\\r\\n            <p>Weight Unit</p>\\r\\n            <p>Commodity</p>\\r\\n            <p>Nominal Account</p>\\r\\n            <p>Cost Type</p>\\r\\n            <p>Contract Term</p>\\r\\n            <p>Payment Term</p>\\r\\n            <p>Port</p>\\r\\n            <p>Profit Centre</p>\\r\\n            <p>Tax</p>\\r\\n            <p>Vessel</p>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"master-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Optional Master Data Import\\r\\n                <mat-slide-toggle [formControl]=\\\"masterDataCtrl\\\"\\r\\n                                  [checked]=\\\"isCounterpartyExist\\\"\\r\\n                                  (change)=\\\"onCounterpartyToggleChange($event)\\\">\\r\\n                </mat-slide-toggle>\\r\\n            </h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-subtitle>\\r\\n            By activating this toggle, you will import following Master Data\\r\\n        </mat-card-subtitle>\\r\\n        <mat-card-content>\\r\\n            <p>MDM category</p>\\r\\n            <p>Account Types</p>\\r\\n            <p>Counterparty</p>\\r\\n            <p>Address</p>\\r\\n            <p>Bank Accounts</p>\\r\\n            <p>Bank Intermediary</p>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \"mat-card.company-masterdata-warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n  mat-card.company-masterdata-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n  mat-card.company-masterdata-warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n  mat-card.company-masterdata-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n  .master-data-card {\\n  min-width: 513px;\\n  height: 450px;\\n  float: left; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CreateCompany } from '../../../../../shared/entities/create-company.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\n\r\n@Component({\r\n    selector: 'atlas-master-data-field',\r\n    templateUrl: './master-data-field.component.html',\r\n    styleUrls: ['./master-data-field.component.scss'],\r\n})\r\nexport class MasterDataFieldComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly isCounterpartyToggleEnabled = new EventEmitter<boolean>();\r\n    masterDataCtrl = new AtlasFormControl('MasterData');\r\n    formComponents: BaseFormComponent[] = [];\r\n    formGroup: FormGroup;\r\n    isCounterpartySelected: boolean = false;\r\n    subscription: Subscription[] = [];\r\n    selectedCompany: string;\r\n    isCounterpartyExist: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        protected configurationService: ConfigurationService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectedCompany = (decodeURIComponent(this.route.snapshot.paramMap.get('companyId')));\r\n        this.subscription.push(this.configurationService.checkCounterypartyExists\r\n            (this.selectedCompany).subscribe((data: boolean) => {\r\n                if (data) {\r\n                    this.isCounterpartyExist = this.isCounterpartySelected = data;\r\n                    this.masterDataCtrl.setValue(this.isCounterpartyExist);\r\n                    this.isCounterpartyToggleEnabled.emit(this.isCounterpartySelected);\r\n                }\r\n            }));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n    populateEntity(entity: CreateCompany): CreateCompany {\r\n        const companyCreation = entity;\r\n        companyCreation.isCounterpartyRequired = this.isCounterpartySelected;\r\n        return companyCreation;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            masterDataCtrl: this.masterDataCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    onCounterpartyToggleChange(value: MatSlideToggleChange) {\r\n        this.isCounterpartySelected = value.checked;\r\n        this.isCounterpartyToggleEnabled.emit(this.isCounterpartySelected);\r\n\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"copy-company-warning-banner\\\">\\r\\n    <mat-card class=\\\"copy-company-warning-card\\\">\\r\\n\\r\\n        <mat-card-header>\\r\\n            <mat-card-title>\\r\\n                <h4>\\r\\n                    <mat-slide-toggle [formControl]=\\\"transactionDataCtrl\\\"\\r\\n                                      (change)=\\\"onTransactionDataToggleChange($event)\\\">\\r\\n                    </mat-slide-toggle> Copy Transactional Data\\r\\n                </h4>\\r\\n\\r\\n            </mat-card-title>\\r\\n            <mat-card-subtitle>\\r\\n                All data from company {{selectedCompany}} will be copied to the new Company\\r\\n            </mat-card-subtitle>\\r\\n        </mat-card-header>\\r\\n    </mat-card>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"space-between\\\">\\r\\n    <mat-card class=\\\"transaction-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Trades</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <p>Physical contracts</p>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"transaction-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Invoices</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <p>Goods</p>\\r\\n            <p>Costs</p>\\r\\n            <p>Washout</p>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"transaction-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Cash</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <p>Simple cash</p>\\r\\n            <p>Cash by picking transaction different client</p>\\r\\n            <p>Cash by picking transaction full or partial payment</p>\\r\\n            <p>Cash by picking transaction different currencey</p>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayout.md=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"stretch\\\">\\r\\n    <mat-card class=\\\"transaction-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Accurals</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <p>Month End</p>\\r\\n            <p>Year End</p>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"transaction-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Journal Entry</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <p>Manual Journal Log</p>\\r\\n            <p>Revaluation Journal Log</p>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"transaction-data-card\\\">\\r\\n        <mat-card-title>\\r\\n            <h2> Others</h2>\\r\\n        </mat-card-title>\\r\\n        <mat-card-content>\\r\\n            <p>Credit Note</p>\\r\\n            <p>Debit Note</p>\\r\\n            <p>Charter</p>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\\r\\n\"","module.exports = \".transaction-data-card {\\n  min-width: 331px;\\n  height: 150px;\\n  float: left; }\\n\\nmat-card.copy-company-warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n\\nmat-card.copy-company-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n\\nmat-card.copy-company-warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n\\nmat-card.copy-company-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatSlideToggleChange } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { CreateCompany } from '../../../../../shared/entities/create-company.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-transaction-data',\r\n    templateUrl: './transaction-data.component.html',\r\n    styleUrls: ['./transaction-data.component.scss'],\r\n})\r\nexport class TransactionDataComponent extends BaseFormComponent implements OnInit {\r\n    transactionDataCtrl = new AtlasFormControl('TransactionDataSelection');\r\n    formComponents: BaseFormComponent[] = [];\r\n    formGroup: FormGroup;\r\n    isTransationalDataSelected: boolean = false;\r\n    selectedCompany: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        protected formBuilder: FormBuilder) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectedCompany = (decodeURIComponent(this.route.snapshot.paramMap.get('companyId')));\r\n    }\r\n\r\n    populateEntity(entity: any): CreateCompany {\r\n        const companyCreation = entity as CreateCompany;\r\n        companyCreation.isTransactionDataSelected = this.isTransationalDataSelected;\r\n        companyCreation.companyToCopy = this.selectedCompany;\r\n        return companyCreation;\r\n    }\r\n\r\n    onTransactionDataToggleChange(value: MatSlideToggleChange) {\r\n        this.isTransationalDataSelected = value.checked;\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            transactionDataCtrl: this.transactionDataCtrl,\r\n        });\r\n        return super.getFormGroup();\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">User Profiles to Copy</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"userGridOptions && userGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"userGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [showExport]=\\\"false\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"userGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"userGridRows\\\"\\r\\n                             [columnDefs]=\\\"userGridCols\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [suppressSizeToFit]=false\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"20\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             (rowSelected)=\\\"onUserAccountRowSelected($event)\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { CompanyUserProfile } from '../../../../../shared/entities/company-user-profile.entity';\r\nimport { CreateCompany } from '../../../../../shared/entities/create-company.entity';\r\nimport { UserAccountList } from '../../../../../shared/entities/user-account.entity';\r\nimport { UserListItemViewModel } from '../../../../../shared/models/user-list-item-view-model';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\n\r\n@Component({\r\n    selector: 'atlas-user-account',\r\n    templateUrl: './user-account.component.html',\r\n    styleUrls: ['./user-account.component.scss'],\r\n})\r\nexport class UserAccountComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @Output() readonly userAccountEvent = new EventEmitter<boolean>();\r\n    users: UserListItemViewModel[];\r\n    userGridRows: UserAccountList[];\r\n    userGridOptions: agGrid.GridOptions = {};\r\n    userGridCols: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    isRowSelected: boolean = false;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    userAccounts: UserAccountList[];\r\n    selectedCompany: string;\r\n    selectedProfileIds: number[] = [];\r\n    selectedAccount: UserAccountList[];\r\n    companyUserProfile: CompanyUserProfile[];\r\n\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n        public route: ActivatedRoute,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.selectedCompany = (decodeURIComponent(this.route.snapshot.paramMap.get('companyId')));\r\n    }\r\n    onGridReady(params) {\r\n        this.userGridOptions = params;\r\n        this.userGridOptions.columnDefs = this.userGridCols;\r\n        this.gridApi = this.userGridOptions.api;\r\n        this.gridColumnApi = this.userGridOptions.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n    onUserAccountRowSelected(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.isRowSelected = selectedRows.length > 0 ? true : false;\r\n        this.userAccountEvent.emit(this.isRowSelected);\r\n        this.selectedAccount = selectedRows;\r\n        this.companyUserProfile = this.selectedAccount;\r\n    }\r\n\r\n    getUserAccounts(account: UserAccountList[]) {\r\n        this.userGridRows = account;\r\n        this.initUserGridColumns();\r\n    }\r\n\r\n    populateEntity(entity: CreateCompany): CreateCompany {\r\n        const companyCreation = entity;\r\n        if (this.companyUserProfile.length > 0) {\r\n            companyCreation.companyUserProfile = this.companyUserProfile;\r\n        }\r\n        return companyCreation;\r\n    }\r\n\r\n    initUserGridColumns() {\r\n        this.userGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.userGridCols = [\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'User Name',\r\n                colId: 'userName',\r\n                field: 'userName',\r\n            },\r\n            {\r\n                headerName: 'First Name',\r\n                colId: 'firstName',\r\n                field: 'firstName',\r\n            },\r\n            {\r\n                headerName: 'Last Name',\r\n                colId: 'lastName',\r\n                field: 'lastName',\r\n            },\r\n            {\r\n                headerName: 'Privileges',\r\n                colId: 'profileName',\r\n                field: 'profileName',\r\n            },\r\n            {\r\n                headerName: 'Email address',\r\n                colId: 'email',\r\n                field: 'email',\r\n            },\r\n            {\r\n                headerName: 'Phone no',\r\n                colId: 'phoneNumber',\r\n                field: 'phoneNumber',\r\n            },\r\n            {\r\n                headerName: 'Company',\r\n                colId: 'company',\r\n                field: 'company',\r\n            },\r\n            {\r\n                headerName: 'Location',\r\n                colId: 'location',\r\n                field: 'location',\r\n            },\r\n            {\r\n                headerName: 'Status',\r\n                colId: 'status',\r\n                field: 'status',\r\n            },\r\n            {\r\n                headerName: 'Manager',\r\n                colId: 'manager',\r\n                field: 'manager',\r\n            },\r\n            {\r\n                headerName: 'User Id',\r\n                colId: 'userId',\r\n                field: 'userId',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'ProfileId',\r\n                colId: 'profileId',\r\n                field: 'profileId',\r\n                hide: true,\r\n            },\r\n\r\n        ];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">User Profiles to Copy</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"UserPrivilegesGridOptions && UserPrivilegesGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"UserPrivilegesGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [showExport]=\\\"false\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"UserPrivilegesGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"profilesGridRows\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [suppressSizeToFit]=false\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (rowSelected)=\\\"onUserPrivilegeRowSelected($event)\\\"\\r\\n                             rowSelection=\\\"multiple\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Profile } from '../../../../../shared/entities/profile.entity';\r\nimport { UserProfileList } from '../../../../../shared/entities/user-profile.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { UserIdentityService } from '../../../../../shared/services/http-services/user-identity.service';\r\n\r\n@Component({\r\n    selector: 'atlas-user-privileges',\r\n    templateUrl: './user-privileges.component.html',\r\n    styleUrls: ['./user-privileges.component.scss'],\r\n})\r\nexport class UserPrivilegesComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n    @Output() readonly userPrivilegeEvent = new EventEmitter<boolean>();\r\n    @Output() readonly userPrivilegeRowChangedEvent = new EventEmitter<boolean>();\r\n    UserPrivilegesGridOptions: agGrid.GridOptions = {};\r\n    profilesGridRows: any[];\r\n    userProfiles: UserProfileList[];\r\n    selectedProfileList: UserProfileList[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    columnDefs: agGrid.ColDef[];\r\n    isRowSelected: boolean = false;\r\n    isRowValueChanged: boolean = false;\r\n    gridApi: agGrid.GridApi;\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    selectedCompany: string;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n        private userIdentityService: UserIdentityService,\r\n        private route: ActivatedRoute,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectedCompany = (decodeURIComponent(this.route.snapshot.paramMap.get('companyId')));\r\n        this.initCompanyCopyGridUserPrivilegesColumns();\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.getUserPrivilegesGridData();\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n    }\r\n\r\n    getUserPrivilegesGridData() {\r\n        this.userIdentityService.getProfileByCompanyId(this.selectedCompany).subscribe((data) => {\r\n            this.userProfiles = data.value;\r\n            this.profilesGridRows = this.userProfiles;\r\n        });\r\n    }\r\n\r\n    onUserPrivilegeRowSelected(event) {\r\n        this.isRowValueChanged = true;\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.isRowSelected = selectedRows.length > 0 ? true : false;\r\n        this.userPrivilegeEvent.emit(this.isRowSelected);\r\n        this.userPrivilegeRowChangedEvent.emit(this.isRowValueChanged);\r\n        this.selectedProfileList = selectedRows;\r\n    }\r\n\r\n    initCompanyCopyGridUserPrivilegesColumns() {\r\n        this.UserPrivilegesGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.columnDefs = [\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: true,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'Name',\r\n                colId: 'name',\r\n                field: 'name',\r\n\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                colId: 'description',\r\n                field: 'description',\r\n\r\n            },\r\n            {\r\n                headerName: 'ProfileId',\r\n                colId: 'profileId',\r\n                field: 'profileId',\r\n                hide: true,\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    onSelectionChanged(event) {\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <div class=\\\"copy-company-warning-banner\\\">\\r\\n        <mat-card class=\\\"copy-company-warning-card\\\">\\r\\n            <div class=\\\"question-circle-icon\\\">\\r\\n                <mat-icon>help_outline</mat-icon>\\r\\n            </div>\\r\\n            <mat-card-header>\\r\\n                <mat-card-title>\\r\\n                    <h4>Company creation by copy</h4>\\r\\n                </mat-card-title>\\r\\n                <mat-card-subtitle>\\r\\n                    start by choosing the company you want to duplicate\\r\\n                </mat-card-subtitle>\\r\\n            </mat-card-header>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between left\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">Companies</h2>\\r\\n            <atlas-ag-grid-user-preferences *ngIf=\\\"companyGridOptions && companyGridOptions.columnDefs\\\"\\r\\n                                            [gridOptions]=\\\"companyGridOptions\\\"\\r\\n                                            [company]=\\\"company\\\"\\r\\n                                            [gridId]=\\\"gridCode\\\"\\r\\n                                            [showExport]=\\\"false\\\"\\r\\n                                            [sharingEnabled]=\\\"hasGridSharing\\\"\\r\\n                                            #userPreferences>\\r\\n            </atlas-ag-grid-user-preferences>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"companyGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"companyGridRows\\\"\\r\\n                             [columnDefs]=\\\"companyGridCols\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             [suppressSizeToFit]=false\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (rowSelected)=\\\"onSelectionChanged($event)\\\"\\r\\n                             rowSelection=\\\"single\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row \\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"row \\\"\\r\\n             fxLayoutAlign=\\\"start \\\">\\r\\n            <button mat-button\\r\\n                    (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                DISCARD\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start \\\">\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"end start \\\">\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onCopySelectedCompanyButtonClicked()\\\"\\r\\n                        [disabled]=\\\"!isCompanySelected\\\">\\r\\n                    COPY SELECTED COMPANY\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"mat-card.copy-company-warning-card.mat-card {\\n  padding: 0 !important;\\n  height: 75px;\\n  display: flex;\\n  align-items: center; }\\n  mat-card.copy-company-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\\n    margin: 0;\\n    padding: 8px 0; }\\n  mat-card.copy-company-warning-card.mat-card mat-card-header.mat-card-header h4 {\\n    margin: 0; }\\n  mat-card.copy-company-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\\n    margin: 0; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgGridUserPreferencesComponent } from '../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\n\r\n@Component({\r\n    selector: 'atlas-company-selection',\r\n    templateUrl: './company-selection.component.html',\r\n    styleUrls: ['./company-selection.component.scss'],\r\n})\r\nexport class CompanySelectionComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n\r\n    company: string;\r\n    selectedCompany: string;\r\n    companyGridCols: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    companyGridOptions: agGrid.GridOptions = {};\r\n    companyGridRows: Company[];\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isCompanySelected: boolean = false;\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected configurationService: ConfigurationService,\r\n        public gridService: AgGridService,\r\n        private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.initCompanyGridColumns();\r\n            this.getCompanies();\r\n            this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        });\r\n\r\n    }\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        params.columnDefs = this.companyGridCols;\r\n        this.companyGridOptions = params;\r\n\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n    getCompanies() {\r\n        this.configurationService.getCompanyListDetails(this.company).subscribe((companyListData) => {\r\n            if (companyListData) {\r\n                this.companyGridRows = companyListData;\r\n            }\r\n        });\r\n    }\r\n\r\n    initCompanyGridColumns() {\r\n        this.companyGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.companyGridCols = [\r\n            {\r\n                headerName: '',\r\n                colId: 'selection',\r\n                headerCheckboxSelection: false,\r\n                checkboxSelection: true,\r\n                minWidth: 40,\r\n                maxWidth: 40,\r\n                pinned: 'left',\r\n            },\r\n            {\r\n                headerName: 'Company Id',\r\n                colId: 'id',\r\n                field: 'id',\r\n                hide: true,\r\n            },\r\n            {\r\n                headerName: 'Company Friendly Code',\r\n                colId: 'companyId',\r\n                field: 'companyId',\r\n            },\r\n            {\r\n                headerName: 'Company Name',\r\n                colId: 'description',\r\n                field: 'description',\r\n            },\r\n            {\r\n                headerName: 'Company Type',\r\n                colId: 'companyType',\r\n                field: 'companyType',\r\n            },\r\n            {\r\n                headerName: 'Legal Entity',\r\n                colId: 'legalEntityCode',\r\n                field: 'legalEntityCode',\r\n            },\r\n            {\r\n                headerName: 'LDC Regions',\r\n                colId: 'ldcRegionCode',\r\n                field: 'ldcRegionCode',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onColumnVisibilityChanged(column: any) {\r\n        if (this.userPreferencesComponent) {\r\n            this.userPreferencesComponent.onChangeColumnVisibility(column);\r\n        }\r\n        this.companyGridOptions.columnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/admin/companies']);\r\n    }\r\n    onCopySelectedCompanyButtonClicked() {\r\n        const selectedRow = this.gridApi.getSelectedRows();\r\n        this.selectedCompany = selectedRow[0].companyId;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n            '/admin/companies/copy', this.selectedCompany]);\r\n    }\r\n    onSelectionChanged(event) {\r\n        const selectedRows = this.gridApi.getSelectedRows();\r\n        this.isCompanySelected = (selectedRows.length > 0) ? true : false;\r\n    }\r\n\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"copyCompanyFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper [linear]\\r\\n                                (selectionChange)=\\\"onStepActionChanged($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Company To Copy</ng-template>\\r\\n                <atlas-company-management #companyManagement></atlas-company-management>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onSummaryViewNextButtonClicked()\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Master Data</ng-template>\\r\\n                <atlas-master-data-field #masterDataField\\r\\n                                         (isCounterpartyToggleEnabled)=\\\"isCounterpartyToggleEnabled($event)\\\">\\r\\n                </atlas-master-data-field>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onPreviousButtonClicked()\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onMasterDataNextButtonClicked()\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Transaction Data</ng-template>\\r\\n                <atlas-transaction-data #transactionData>\\r\\n                </atlas-transaction-data>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onPreviousButtonClicked()\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onNextButtonClicked()\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>User Privileges</ng-template>\\r\\n                <atlas-user-privileges #userPrivileges\\r\\n                                       (userPrivilegeEvent)=\\\"userPrivilegesEvent($event)\\\"\\r\\n                                       (userPrivilegeRowChangedEvent)=\\\"userPrivilegeRowChangedEvent($event)\\\">\\r\\n                </atlas-user-privileges>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onPreviousButtonClicked()\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onUserPrivilegeNextButtonClicked()\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>User Account</ng-template>\\r\\n                <atlas-user-account #userAccounts\\r\\n                                    (userAccountEvent)=\\\"userAccountEvent($event)\\\">\\r\\n                </atlas-user-account>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onPreviousButtonClicked()\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onUserAccountNextButtonClicked()\\\">\\r\\n                                NEXT\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Configuration Details</ng-template>\\r\\n                <atlas-company-management #companyCreation></atlas-company-management>\\r\\n                <div fxLayout=\\\"row \\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"row \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                [disabled]=\\\"isSaveInProgress\\\">\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                        <button mat-button\\r\\n                                (click)=\\\"onPreviousButtonClicked()\\\"\\r\\n                                [disabled]=\\\"isSaveInProgress\\\">\\r\\n                            PREVIOUS\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column \\\"\\r\\n                         fxLayoutAlign=\\\"start \\\">\\r\\n                        <div fxLayout=\\\"row \\\"\\r\\n                             fxLayoutAlign=\\\"end start \\\">\\r\\n                            <button mat-raised-button\\r\\n                                    (click)=\\\"onSaveButtonClicked()\\\"\\r\\n                                    [disabled]=\\\"isSaveInProgress\\\">\\r\\n                                SAVE\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\\r\\n\"","module.exports = \"\"","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AtlasFormControl } from '../../../../shared/entities/atlas-form-control';\r\nimport { CompanyConfiguration } from '../../../../shared/entities/company-configuration.entity';\r\nimport { CreateCompany } from '../../../../shared/entities/create-company.entity';\r\nimport { UserAccountList } from '../../../../shared/entities/user-account.entity';\r\nimport { UserProfileList } from '../../../../shared/entities/user-profile.entity';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../shared/services/http-services/configuration.service';\r\nimport { UserIdentityService } from '../../../../shared/services/http-services/user-identity.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { UtilService } from '../../../../shared/services/util.service';\r\nimport { CompanyManagementComponent } from '../company-management/company-management.component';\r\nimport { InvoiceTabComponent } from '../company-management/invoice-tab/invoice-tab.component';\r\nimport { CompanyManagementMainTabComponent } from '../company-management/main-tab/company-management-main-tab.component';\r\nimport { PhysicalsTabComponent } from '../company-management/physicals-tab/physicals-tab.component';\r\nimport { TaxTabComponent } from '../company-management/tax-tab/tax-tab.component';\r\nimport { MasterDataFieldComponent } from '../company-settings/master-data-field/master-data-field.component';\r\nimport { TransactionDataComponent } from '../company-settings/transaction-data/transaction-data.component';\r\nimport { UserAccountComponent } from '../company-settings/user-account/user-account.component';\r\nimport { UserPrivilegesComponent } from '../company-settings/user-privileges/user-privileges.component';\r\n\r\n@Component({\r\n    selector: 'atlas-copy-company',\r\n    templateUrl: './copy-company.component.html',\r\n    styleUrls: ['./copy-company.component.scss'],\r\n})\r\nexport class CopyCompanyComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('masterDataField') masterDataField: MasterDataFieldComponent;\r\n    @ViewChild('userPrivileges') userPrivileges: UserPrivilegesComponent;\r\n    @ViewChild('userAccounts') userAccounts: UserAccountComponent;\r\n    @ViewChild('transactionData') transactionData: TransactionDataComponent;\r\n    @ViewChild('companyManagement') companyManagement: CompanyManagementComponent;\r\n    @ViewChild('companyCreation') companyCreation: CompanyManagementComponent;\r\n    @ViewChild('companyManagementMainTabComponent') companyManagementMainTabComponent: CompanyManagementMainTabComponent;\r\n    @ViewChild('physicalsTabComponent') physicalsTabComponent: PhysicalsTabComponent;\r\n    @ViewChild('invoiceTabComponent') invoiceTabComponent: InvoiceTabComponent;\r\n    @ViewChild('taxTabComponent') taxTabComponent: TaxTabComponent;\r\n\r\n    transactionDataCtrl = new AtlasFormControl('TransactionDataSelection');\r\n    companyFriendlyCodeCtrl: any;\r\n    companyNameCtrl: any;\r\n    model: CreateCompany;\r\n    currentStep: number = 0;\r\n    isCompanyView: boolean = false;\r\n    isUserPrivilegesSelected: boolean = false;\r\n    isUserPrivilegesRowChanged: boolean = false;\r\n    isUserAccountsSelected: boolean = false;\r\n    copyCompanyFormGroup: FormGroup;\r\n    formComponents: BaseFormComponent[] = [];\r\n    selectedProfileIds: number[] = [];\r\n    subscription: Subscription[] = [];\r\n    userAccountsList: UserAccountList[];\r\n    isCounterpartySelected: boolean;\r\n    CompanyConfiguration: CompanyConfiguration;\r\n    isSaveInProgress: boolean;\r\n    currentCompany: string;\r\n    companyId: string;\r\n    isCopyCompany: boolean;\r\n    isMasterdataNextButtonClicked: boolean = false;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private companyManager: CompanyManagerService,\r\n        protected configurationService: ConfigurationService,\r\n        protected utilService: UtilService,\r\n        protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected formBuilder: FormBuilder,\r\n        private userIdentityService: UserIdentityService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.currentCompany = decodeURIComponent(this.route.snapshot.paramMap.get('company'));\r\n        this.companyId = this.route.snapshot.paramMap.get('companyId');\r\n        this.isCopyCompany = (this.route.snapshot.data.isCopy) ? true : false;\r\n        this.copyCompanyFormGroup = this.formBuilder.group({\r\n            masterDataField: this.masterDataField.getFormGroup(),\r\n            userPrivileges: this.userPrivileges.getFormGroup(),\r\n            userAccounts: this.userAccounts.getFormGroup(),\r\n            transactionData: this.transactionData.getFormGroup(),\r\n            companyConfigurationHeader: this.companyCreation.companyConfigurationHeader.getFormGroup(),\r\n            companyManagementMainTabComponent: this.companyCreation.companyManagementMainTabComponent.getFormGroup(),\r\n            physicalsTabComponent: this.companyCreation.physicalsTabComponent.getFormGroup(),\r\n            invoiceTabComponent: this.companyCreation.invoiceTabComponent.getFormGroup(),\r\n            taxTabComponent: this.companyCreation.taxTabComponent.getFormGroup(),\r\n        });\r\n        this.formComponents.push(\r\n            this.masterDataField,\r\n            this.transactionData,\r\n            this.userPrivileges,\r\n            this.userAccounts,\r\n            this.companyCreation,\r\n        );\r\n        this.companyManagement.loadConfigurationData(false, this.companyId);\r\n        this.companyCreation.loadConfigurationData(true, this.companyId);\r\n\r\n    }\r\n\r\n    onStepActionChanged(event) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    isCounterpartyToggleEnabled(counterpartySelected: boolean) {\r\n        this.isCounterpartySelected = counterpartySelected;\r\n    }\r\n\r\n    userPrivilegesEvent(event) {\r\n        this.isUserPrivilegesSelected = event;\r\n    }\r\n\r\n    userPrivilegeRowChangedEvent(event: boolean) {\r\n        this.isUserPrivilegesRowChanged = event;\r\n    }\r\n\r\n    userAccountEvent(event) {\r\n        this.isUserAccountsSelected = event;\r\n    }\r\n\r\n    onNextButtonClicked() {\r\n        this.stepper.next();\r\n    }\r\n\r\n    onSummaryViewNextButtonClicked() {\r\n        this.stepper.next();\r\n    }\r\n\r\n    onMasterDataNextButtonClicked() {\r\n        if (!this.isMasterdataNextButtonClicked) {\r\n            this.companyCreation.companyConfigurationHeader.companyCodeCtrl.setValue(null);\r\n            this.companyCreation.companyConfigurationHeader.companyCodeCtrl.setErrors({ notUnique: false });\r\n            this.companyCreation.companyConfigurationHeader.companyCodeCtrl.enable();\r\n            this.companyCreation.companyConfigurationHeader.companyFriendlyCodeCtrl.setValue(null);\r\n            this.companyCreation.companyConfigurationHeader.companyClientCodeCtrl.setValue(null);\r\n            this.companyCreation.companyConfigurationHeader.companyNameCtrl.setValue(null);\r\n            this.companyCreation.companyManagementMainTabComponent.identityComponent.formGroup.setValue({\r\n                legalEntityCtrl: '',\r\n                legalEntityNameCtrl: '',\r\n                functionalCcyCtrl: null,\r\n                statutoryCcyCtrl: null,\r\n                companyTypeCtrl: null,\r\n                companyPlatformCtrl: null,\r\n            });\r\n            this.isMasterdataNextButtonClicked = true;\r\n        }\r\n\r\n        if (!this.isCounterpartySelected) {\r\n            this.companyCreation.companyClientCodeCtrl.disable();\r\n            this.transactionData.transactionDataCtrl.setValue(false);\r\n            this.transactionData.transactionDataCtrl.disable();\r\n        } else {\r\n            this.companyCreation.companyClientCodeCtrl.enable();\r\n            this.transactionData.transactionDataCtrl.enable();\r\n        }\r\n        this.stepper.next();\r\n    }\r\n\r\n    onUserPrivilegeNextButtonClicked() {\r\n        if (!this.isUserPrivilegesSelected) {\r\n            this.nextButtonDialog();\r\n            this.userAccounts.getUserAccounts(null);\r\n        } else {\r\n            if (this.isUserPrivilegesRowChanged) {\r\n                this.profileSelected();\r\n                this.stepper.next();\r\n                this.isUserPrivilegesRowChanged = false;\r\n            } else {\r\n                this.stepper.next();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    onUserAccountNextButtonClicked() {\r\n        if (!this.isUserAccountsSelected) {\r\n            this.nextButtonDialog();\r\n        } else {\r\n            this.stepper.next();\r\n        }\r\n    }\r\n\r\n    onPreviousButtonClicked() {\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardButtonDialog();\r\n    }\r\n\r\n    profileSelected() {\r\n        const selectedProfiles = this.userPrivileges.selectedProfileList as UserProfileList[];\r\n        this.selectedProfileIds = [];\r\n        selectedProfiles.forEach((element) => {\r\n            this.selectedProfileIds.push(element.profileId);\r\n        });\r\n        if (this.selectedProfileIds) {\r\n            this.userIdentityService.getUsersByProfileId(this.selectedProfileIds, this.companyId).subscribe((data) => {\r\n                if (data) {\r\n                    this.userAccountsList = data.value;\r\n                    this.userAccounts.getUserAccounts(this.userAccountsList);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        if (!this.companyCreation.companyConfigurationHeader.companyCodeCtrl.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Company Id is already Used.',\r\n            );\r\n            return;\r\n        }\r\n        const mainTabInfo = this.companyCreation.companyManagementMainTabComponent.mainTabFormGroup;\r\n        const mainPhysicalsInfo = this.companyCreation.physicalsTabComponent.mainPhysicalsComponent.physicalsTabMainPhysicalsFormGroup;\r\n        this.utilService.updateFormGroupValidity(mainTabInfo);\r\n        if (!mainTabInfo.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Main tab is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.utilService.updateFormGroupValidity(mainPhysicalsInfo);\r\n        if (!mainPhysicalsInfo.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Physicals tab - Main physicals is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        this.utilService.updateFormGroupValidity(this.copyCompanyFormGroup);\r\n        if (!this.copyCompanyFormGroup.valid) {\r\n            this.snackbarService.throwErrorSnackBar(\r\n                'Form is invalid. Please resolve the errors.',\r\n            );\r\n            return;\r\n        }\r\n        this.getCompanyDetails();\r\n        this.isSaveInProgress = true;\r\n        this.subscription.push(this.configurationService.createCompanyByCopy(this.model)\r\n            .pipe(catchError((error) => {\r\n                return throwError(error);\r\n            }),   finalize(() => {\r\n                this.isSaveInProgress = false;\r\n            }),\r\n            ).subscribe(() => {\r\n                const messageText = 'The company ' + this.model.companyConfiguration.companyId + ' is successfully created';\r\n                this.snackbarService.informationSnackBar(messageText);\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/companies']);\r\n            }));\r\n    }\r\n\r\n    getCompanyDetails() {\r\n        this.model = new CreateCompany();\r\n        this.model.companyId = this.companyCreation.companyFriendlyCodeCtrl.value;\r\n        this.formComponents.forEach((comp) => {\r\n            if (comp === this.companyCreation) {\r\n                this.model.companyConfiguration = this.companyCreation.getCompanyConfigurationDetails();\r\n            } else {\r\n                this.model = comp.populateEntity(this.model);\r\n            }\r\n        });\r\n    }\r\n\r\n    discardButtonDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n                    '/admin/companies']);\r\n            }\r\n        });\r\n    }\r\n\r\n    nextButtonDialog() {\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Next Step',\r\n                text: 'You haven’t selected any data from this Screen. Do you wish to proceed?',\r\n                okButton: 'Proceed',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.stepper.next();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n}\r\n","module.exports = \"\"","module.exports = \"\"","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\n@Component({\r\n    selector: 'atlas-master-row-apply',\r\n    templateUrl: './master-row-apply.component.html',\r\n    styleUrls: ['./master-row-apply.component.scss'],\r\n})\r\nexport class MasterRowApplyComponent implements ICellRendererAngularComp {\r\n    public params: any;\r\n    rowIndex: any;\r\n    pinnedRowData: any;\r\n\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.rowIndex = params.rowIndex;\r\n        this.pinnedRowData = params.data;\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"margin main-container\\\">\\r\\n    <div ag-grid=\\\"interfaceGridOptions\\\"\\r\\n         class=\\\"ag-theme-material pointer-cursor\\\">\\r\\n        <ag-grid-angular style=\\\"height:100%;\\\"\\r\\n                         class=\\\"ag-theme-material\\\"\\r\\n                         [rowData]=\\\"interfaceRowData\\\"\\r\\n                         [columnDefs]=\\\"interfaceColumnDefs\\\"\\r\\n                         domLayout=\\\"autoHeight\\\"\\r\\n                         (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                         [rowHeight]=atlasAgGridParam.rowHeight>\\r\\n        </ag-grid-angular>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { WINDOW } from '../../../..//shared/entities/window-injection-token';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InterfaceSettings } from '../../../../shared/entities/interface-setting.entity';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../shared/services/http-services/configuration.service';\r\n\r\n@Component({\r\n    selector: 'atlas-configuration-interface',\r\n    templateUrl: './configuration-interface.component.html',\r\n    styleUrls: ['./configuration-interface.component.scss'],\r\n})\r\nexport class ConfigurationInterfaceComponent extends BaseFormComponent implements OnInit {\r\n    interfaceGridOptions: agGrid.GridOptions = {};\r\n    interfaceColumnDefs: agGrid.ColDef[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    interfaceRowData: InterfaceSettings[] = [];\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        public gridService: AgGridService,\r\n        @Inject(WINDOW) private window: Window,\r\n        protected route: ActivatedRoute,\r\n        protected configurationService: ConfigurationService,\r\n    ) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initializeGridColumns();\r\n        this.populateRowData();\r\n    }\r\n\r\n    // mockup data- will be removed and replaced with API call\r\n    populateRowData() {\r\n        this.interfaceRowData.push\r\n            ({ interfaceName: 'AccountingInterface', esbUrl: 'https://esb-api-int.ldc.com ', esbUser: 'Test_api ' },\r\n             { interfaceName: 'PaymentRequestInterface', esbUrl: 'https://esb-api-int.ldc.com ', esbUser: 'Test_api ' },\r\n            );\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.interfaceColumnDefs;\r\n        this.interfaceGridOptions = params;\r\n        this.gridApi = this.interfaceGridOptions.api;\r\n        this.gridColumnApi = this.interfaceGridOptions.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.interfaceColumnDefs = [\r\n            {\r\n                headerName: 'Interface Name',\r\n                colId: 'interfaceName',\r\n                field: 'interfaceName',\r\n            },\r\n            {\r\n                headerName: 'Esb_url',\r\n                colId: 'esbUrl',\r\n                field: 'esbUrl',\r\n            },\r\n            {\r\n                headerName: 'Esb_user',\r\n                colId: 'esbUser',\r\n                field: 'esbUser',\r\n            },\r\n        ];\r\n    }\r\n\r\n}\r\n","module.exports = \"<div>\\r\\n    <header class=\\\"header-background charter-detail\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <h2><b>{{functionalObjectName}}</b></h2>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\"\\r\\n                 class=\\\"charter-global-info\\\">\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Created By\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{createdBy}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{creationDate}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field *ngIf=\\\"modifiedBy\\\"\\r\\n                                fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"Modified By\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{modifiedBy ? modifiedBy : ' '}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n                <mat-form-field *ngIf=\\\"modifiedDate\\\"\\r\\n                                fxFlex=\\\"14\\\"\\r\\n                                class=\\\"mat-disabled-field\\\">\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"On\\\"\\r\\n                           disabled\\r\\n                           value=\\\"{{modifiedDate ? modifiedDate : ' '}}\\\"\\r\\n                           autocomplete=\\\"off\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </header>\\r\\n</div>\\r\\n<mat-toolbar class=\\\"menu-bar\\\">\\r\\n    <div class=\\\"toolbar-div\\\">\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <div *ifAuthorized=\\\"'Administration.GlobalParameters.CreateFunctionalObject',company:this.company\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end center\\\"\\r\\n             fxFlex=\\\"20\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <a (click)=\\\"onNewFunctionalClicked()\\\"\\r\\n               matTooltip=\\\"New Functional Object\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">add</mat-icon>\\r\\n            </a>\\r\\n            <a (click)=\\\"onEditFunctionalClicked()\\\"\\r\\n               matTooltip=\\\"Edit the Functional Object\\\"\\r\\n               class=\\\"menu-bar-action-icon\\\">\\r\\n                <mat-icon class=\\\"white-icon\\\">create</mat-icon>\\r\\n            </a>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-toolbar>\\r\\n<div class=\\\"main-container\\\">\\r\\n    <main>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxFlex=\\\"50%\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start left\\\"\\r\\n                     fxFlex=\\\"95\\\"\\r\\n                     class=\\\"\\\">\\r\\n                    <mat-card class=\\\"set-min-height\\\">\\r\\n                        <mat-card-header>\\r\\n                            <mat-card-title>\\r\\n                                <h3><b>Tables</b></h3>\\r\\n                                <h3 class=\\\"left-space\\\"><b>Selected Tables</b></h3>\\r\\n                            </mat-card-title>\\r\\n                        </mat-card-header>\\r\\n                        <mat-divider class=\\\"fill-divider\\\"></mat-divider>\\r\\n                        <mat-card-content>\\r\\n                            <div *ngFor=\\\"let fo of functionalObjects\\\"\\r\\n                                 class=\\\"selectedField\\\">\\r\\n                                <p class=\\\"managelinespace\\\">{{fo.tableName}}</p>\\r\\n                            </div>\\r\\n                        </mat-card-content>\\r\\n                    </mat-card>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxFlex=\\\"50%\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"start left\\\"\\r\\n                     fxFlex=\\\"95\\\"\\r\\n                     class=\\\"\\\">\\r\\n                    <mat-card class=\\\"set-min-height\\\">\\r\\n                        <mat-card-header>\\r\\n                            <mat-card-title>\\r\\n                                <h3><b>Predefined Keys</b></h3>\\r\\n                                <h3 class=\\\"left-space\\\"><b>Selected Keys</b> </h3>\\r\\n                            </mat-card-title>\\r\\n                        </mat-card-header>\\r\\n                        <mat-divider class=\\\"fill-divider\\\"></mat-divider>\\r\\n                        <mat-card-content>\\r\\n                            <ul class=\\\"widgets\\\">\\r\\n                                <li *ngFor=\\\"let item of functionalObjects\\\"\\r\\n                                    class=\\\"managelinespace\\\">\\r\\n                                    <b>{{item.tableName}}</b>\\r\\n                                    <ol class=\\\"selectedField\\\">\\r\\n                                        <li *ngFor=\\\"let data of item.fields\\\">{{data.friendlyName }}</li>\\r\\n                                    </ol>\\r\\n                                </li>\\r\\n                            </ul>\\r\\n                        </mat-card-content>\\r\\n                    </mat-card>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </main>\\r\\n    <div>\\r\\n        <button type=\\\"button\\\"\\r\\n                (click)=\\\"onCancelButtonClicked()\\\"\\r\\n                mat-button>\\r\\n            Cancel\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"::ng-deep ul, ol {\\n  list-style-type: none !important;\\n  padding-bottom: 5px; }\\n\\n::ng-deep.scrollonFo {\\n  overflow-x: auto;\\n  overflow-y: auto; }\\n\\n::ng-deep.managelinespace {\\n  margin: 4px !important;\\n  padding: 3px; }\\n\\n::ng-deep.fill-divider {\\n  border: 1px solid lightgray !important; }\\n\\n::ng-deep.set-min-height {\\n  min-height: 500px !important;\\n  padding: 2 px !important; }\\n\\n::ng-deep.left-space {\\n  margin-left: 15px !important; }\\n\\n.selectedField {\\n  background-color: #0000000d; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { takeUntil, map } from 'rxjs/operators';\r\nimport { IsLocked } from '../../../../../shared/entities/is-locked.entity';\r\nimport { Subject } from 'rxjs';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { UrlManagementService } from '../../../../../shared/services/url-management.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { FunctionalObject } from '../../../../../shared/entities/functional-object.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-functional-object-details',\r\n    templateUrl: './functional-object-details.component.html',\r\n    styleUrls: ['./functional-object-details.component.scss']\r\n})\r\nexport class FunctionalObjectDetailsComponent implements OnInit {\r\n    destroy$ = new Subject();\r\n    functionalObjectId: number;\r\n    company: string;\r\n    creationDate: string;\r\n    createdBy: string;\r\n    modifiedDate: Date;\r\n    modifiedBy: string;\r\n    functionalObjects: any;\r\n    functionalObjectName: string;\r\n\r\n    constructor(private router: Router,\r\n        protected lockService: LockService,\r\n        private urlManagementService: UrlManagementService,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        private configurationService: ConfigurationService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.functionalObjectId = this.route.snapshot.params['functionalObjectId'];\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.configurationService.getFunctionalObjectById(this.functionalObjectId).subscribe((data) => {\r\n            this.functionalObjects = data.tables;\r\n            this.createdBy = data.createdBy;\r\n            this.creationDate = data.createdDateTime.toDateString();\r\n            this.modifiedBy = data.modifiedBy;\r\n            this.modifiedDate = data.modifiedDateTime;\r\n            this.functionalObjectName = data.functionalObjectName;\r\n        });\r\n    }\r\n\r\n    onNewFunctionalClicked() {\r\n        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/admin/global-parameters/functional-object/new']);\r\n    }\r\n\r\n    onEditFunctionalClicked() {\r\n        const functionalObjectId = this.functionalObjectId;\r\n        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/admin/global-parameters/functional-object/edit', functionalObjectId]);\r\n    }\r\n\r\n\r\n    onCancelButtonClicked() {\r\n        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/admin/global-parameters/functional-object/list']);\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <header class=\\\"header-background\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div *ifAuthorized=\\\"'Administration.GlobalParameters.CreateFunctionalObject',company:this.company\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div class=\\\"fob-title\\\">\\r\\n                    <h2>{{title}}</h2>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-evenly center\\\">\\r\\n                <div fxFlex=\\\"30\\\"\\r\\n                     fxFlex.xs=\\\"100\\\"\\r\\n                     fxFlex.sm=\\\"100\\\">\\r\\n                    <mat-form-field>\\r\\n                        <input required\\r\\n                               matInput\\r\\n                               placeholder=\\\"Name\\\"\\r\\n                               aria-label=\\\"Name\\\"\\r\\n                               formControlName=\\\"nameCtrl\\\">\\r\\n                        <mat-error *ngIf=\\\"nameCtrl.hasError('required')\\\">\\r\\n                            Func. object name <strong>required</strong>\\r\\n                        </mat-error>\\r\\n                        <mat-error *ngIf=\\\"nameCtrl.hasError('notUnique')\\\">\\r\\n                            Name already exists\\r\\n                        </mat-error>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </header>\\r\\n\\r\\n    <mat-toolbar class=\\\"menu-bar\\\">\\r\\n        <div class=\\\"toolbar-div\\\">\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\"\\r\\n                 fxFlex=\\\"20\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <a (click)=\\\"onCreateButtonClicked()\\\"\\r\\n                   matTooltip=\\\"Create new functional object\\\"\\r\\n                   class=\\\"menu-bar-action-icon\\\">\\r\\n                    <div class=\\\"white-icon outline-save-icon\\\"></div>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-toolbar>\\r\\n\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-horizontal-stepper linear\\r\\n                                (selectionChange)=\\\"onStepChanged($event)\\\"\\r\\n                                #stepper>\\r\\n            <ng-template matStepperIcon=\\\"edit\\\">\\r\\n                <mat-icon>check</mat-icon>\\r\\n            </ng-template>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Tables</ng-template>\\r\\n\\r\\n                <atlas-picklist originalListHeader=\\\"Available tables\\\"\\r\\n                                pickedListHeader=\\\"Selected tables\\\"\\r\\n                                [options]=\\\"tablesOptions\\\"\\r\\n                                displayWith=\\\"tableName\\\"\\r\\n                                compareWith=\\\"tableId\\\"\\r\\n                                #tablePicklist>\\r\\n                </atlas-picklist>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between start\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                                mat-button>\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onNextButtonClicked()\\\">\\r\\n                            NEXT\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step>\\r\\n                <ng-template matStepLabel>Predefined keys</ng-template>\\r\\n                <atlas-information-banner [title]=\\\"bannerTitle\\\"\\r\\n                                          [description]=\\\"bannerMessage\\\">\\r\\n                </atlas-information-banner>\\r\\n\\r\\n                <div class=\\\"fob-picklist\\\">\\r\\n                    <atlas-picklist *ngFor=\\\"let table of pickedTables\\\"\\r\\n                                    [id]=\\\"table.tableId\\\"\\r\\n                                    [title]=\\\"table.tableName\\\"\\r\\n                                    originalListHeader=\\\"Available keys\\\"\\r\\n                                    pickedListHeader=\\\"Selected keys\\\"\\r\\n                                    [options]=\\\"table.fields\\\"\\r\\n                                    displayWith=\\\"friendlyName\\\"\\r\\n                                    compareWith=\\\"fieldId\\\"\\r\\n                                    #keyPicklist>\\r\\n                    </atlas-picklist>\\r\\n                </div>\\r\\n\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"space-between\\\"\\r\\n                     class=\\\"button-details\\\">\\r\\n                    <button (click)=\\\"onDiscardButtonClicked()\\\"\\r\\n                            mat-button>\\r\\n                        DISCARD\\r\\n                    </button>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"start end\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"end start\\\">\\r\\n                            <button mat-button\\r\\n                                    (click)=\\\"onPreviousButtonClicked()\\\">\\r\\n                                PREVIOUS\\r\\n                            </button>\\r\\n                            <div>\\r\\n                                <button mat-raised-button\\r\\n                                        (click)=\\\"onCreateButtonClicked()\\\">\\r\\n                                    {{(this.functionalObjectId !== undefined) ? 'UPDATE' : 'CREATE'}}\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </div>\\r\\n</form>\"","module.exports = \".fob-title {\\n  max-height: 48px; }\\n\\n.fob-picklist:last-child {\\n  padding-bottom: 32px; }\\n\"","// tslint:disable-next-line:no-submodule-imports\r\nimport { StepperSelectionEvent } from '@angular/cdk/stepper';\r\nimport { Component, HostListener, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog, MatStepper } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { FunctionalObjectNameValidator } from '../../../../admin/validators/functional-object-name.validator';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { PicklistComponent } from '../../../../shared/components/picklist/picklist.component';\r\nimport { ApplicationTable } from '../../../../shared/entities/application-table.entity';\r\nimport { FunctionalObject } from '../../../../shared/entities/functional-object.entity';\r\nimport { ApiCollection } from '../../../../shared/services/common/models';\r\nimport { ConfigurationService } from '../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-functional-object',\r\n    templateUrl: './functional-object.component.html',\r\n    styleUrls: ['./functional-object.component.scss'],\r\n})\r\nexport class FunctionalObjectComponent implements OnInit, OnDestroy {\r\n\r\n    @ViewChild('stepper') stepper: MatStepper;\r\n    @ViewChild('tablePicklist') tablePicklist: PicklistComponent;\r\n    @ViewChildren('keyPicklist') keyPicklist: QueryList<PicklistComponent>;\r\n\r\n    formGroup: FormGroup;\r\n    nameCtrl = new FormControl();\r\n    title: string = 'Create functional object';\r\n    isCreation = true;\r\n    company: string;\r\n    currentStep = 0;\r\n    isAllTableProcessed = false;\r\n    isSave: boolean = false;\r\n    bannerTitle = 'Key selection';\r\n    bannerMessage = 'Tables where no keys are selected will not be saved.';\r\n    functionalObjects: any;\r\n    fields: any[] = [];\r\n    functionalObjectId: number;\r\n    tablesOptions: ApplicationTable[] = []; // To select tables in step 1\r\n    pickedTables: ApplicationTable[] = []; // To select keys in step 2\r\n    pickedKeys: ApplicationTable[] = []; // To store selected keys with table references on submit\r\n    destroy$ = new Subject();\r\n    pickedTablesedit: ApplicationTable[] = [];\r\n    selectedtables: ApplicationTable[] = [];\r\n    rowData: FunctionalObject[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        private configurationService: ConfigurationService,\r\n        private titleService: TitleService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.functionalObjectId = this.route.snapshot.params['functionalObjectId'];\r\n        this.getApplicationTables();\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.initializeForm();\r\n        if (this.functionalObjectId !== undefined) {\r\n            this.title = '';\r\n            this.fillSelectedTabels();\r\n        }\r\n    }\r\n\r\n    fillSelectedTabels() {\r\n        this.configurationService.getFunctionalObjectById(this.functionalObjectId).subscribe((data) => {\r\n            this.nameCtrl.patchValue(data.functionalObjectName);\r\n            this.tablePicklist.pickedOptions = data.tables;\r\n            this.selectedtables = data.tables;\r\n            this.configurationService.getAllApplicationTables()\r\n                .pipe(\r\n                    takeUntil(this.destroy$),\r\n                ).subscribe((appTables: ApplicationTable[]) => {\r\n                    this.tablesOptions = appTables;\r\n                    this.filterTablesItems(this.selectedtables, this.tablesOptions)\r\n                });\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    filterTablesItems(selectedtables: any[], allTables: any[]) {\r\n        selectedtables.forEach((item) => {\r\n            const element = allTables.find((element) => element.tableId === item.tableId);\r\n            if (element) {\r\n                const index = allTables.indexOf(element);\r\n                if (index !== -1) {\r\n                    allTables.splice(index, 1);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.formGroup.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    initializeForm() {\r\n        this.formGroup = this.formBuilder.group({\r\n            nameCtrl: this.nameCtrl,\r\n        });\r\n\r\n        this.setValidators();\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.formGroup.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getApplicationTables() {\r\n        this.configurationService.getAllApplicationTables()\r\n            .pipe(\r\n                takeUntil(this.destroy$),\r\n            ).subscribe((appTables: ApplicationTable[]) => {\r\n                this.tablesOptions = appTables;\r\n            });\r\n    }\r\n\r\n    setValidators() {\r\n        this.nameCtrl.setValidators(Validators.required);\r\n        this.nameCtrl.setAsyncValidators(\r\n            FunctionalObjectNameValidator.createValidator(this.configurationService, (this.functionalObjectId) ? this.functionalObjectId : 0));\r\n    }\r\n\r\n    navigateToList() {\r\n        this.router.navigate([`/${this.company}/admin/global-parameters/functional-object/list`]);\r\n    }\r\n\r\n    onNextButtonClicked() {\r\n        this.isSave = true;\r\n        this.pickedTables = this.tablePicklist.getPickedItems();\r\n\r\n        if (this.pickedTables.length < 1) {\r\n            this.snackbarService.throwErrorSnackBar('Please select at least one table.');\r\n            return;\r\n        }\r\n\r\n        this.stepper.next();\r\n        this.pickedTables.forEach((pickedTable) => {\r\n            pickedTable.fields = [];\r\n            this.configurationService.getApplicationTableById(pickedTable.tableId)\r\n                .pipe(\r\n                    takeUntil(this.destroy$),\r\n                )\r\n                .subscribe((table: ApplicationTable) => {\r\n                    const index = this.pickedTables.findIndex((appTable) => appTable.tableId === table.tableId);\r\n                    if (index > -1) {\r\n                        this.pickedTables[index].fields = table.fields;\r\n                    }\r\n                    if (this.functionalObjectId !== undefined) {\r\n                        this.getSelectedKeys();\r\n                    }\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n    getSelectedKeys() {\r\n        this.keyPicklist.forEach((selectedkeyTables) => {\r\n            this.configurationService.getFunctionalObjectById(this.functionalObjectId).subscribe((dataTables) => {\r\n                dataTables.tables.forEach((dataFields) => {\r\n                    const index = dataTables.tables.findIndex((appTable) => appTable.tableId === selectedkeyTables.id);\r\n                    if (index > -1) {\r\n                        selectedkeyTables.pickedOptions = dataTables.tables[index].fields;\r\n                        dataTables.tables[index].fields.forEach((item) => {\r\n                            const element = selectedkeyTables.options.find((element) => element.fieldId === item.fieldId);\r\n                            if (element) {\r\n                                const index = selectedkeyTables.options.indexOf(element);\r\n                                if (index !== -1) {\r\n                                    selectedkeyTables.options.splice(index, 1);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    getPickedKeys(): number {\r\n        let keyCount = 0;\r\n        this.pickedKeys = [];\r\n        this.keyPicklist.toArray().forEach((list) => {\r\n            const keys = list.getPickedItems();\r\n            if (keys || keys.length > 0) {\r\n                keyCount += keys.length;\r\n\r\n                const table = new ApplicationTable();\r\n                table.tableId = list.id as number;\r\n                table.fields = keys;\r\n\r\n                this.pickedKeys.push(table);\r\n            }\r\n        });\r\n\r\n        return keyCount;\r\n    }\r\n\r\n    onCreateButtonClicked() {\r\n        this.configurationService.getFunctionalObjects().subscribe((functionalObj: ApiCollection<FunctionalObject>) => {\r\n            this.functionalObjects = functionalObj.value;\r\n            this.rowData = this.functionalObjects;\r\n\r\n            const existingData = this.rowData.find((data) => data.functionalObjectName === this.nameCtrl.value)\r\n            if (existingData) {\r\n                this.snackbarService.throwErrorSnackBar('Name already exists');\r\n            }\r\n            else {\r\n                this.isSave = true;\r\n                const count = this.getPickedKeys();\r\n\r\n                if (count === 0) {\r\n                    this.snackbarService.throwErrorSnackBar('Please select at least one key.');\r\n                    return;\r\n                }\r\n\r\n                if (count > 10) {\r\n                    this.snackbarService.throwErrorSnackBar('Only 10 or fewer predefined keys can be selected.');\r\n                    return;\r\n                }\r\n\r\n                if (!this.formGroup.valid) {\r\n                    this.snackbarService.throwErrorSnackBar('Form is invalid. Please check the errors.');\r\n                    return;\r\n                }\r\n                if (this.functionalObjectId !== undefined) {\r\n                    //call edit here\r\n                    this.configurationService.editFunctionalObject(this.functionalObjectId, this.nameCtrl.value, this.pickedKeys)\r\n                        .subscribe(() => {\r\n                            this.snackbarService.informationSnackBar('Functional object has been successfully updated.');\r\n                            this.navigateToList();\r\n                        });\r\n                } else {\r\n                    //call create here\r\n                    this.configurationService.createFunctionalObject(this.nameCtrl.value, this.pickedKeys)\r\n                        .subscribe(() => {\r\n                            this.snackbarService.informationSnackBar('Functional object has been successfully created.');\r\n                            this.navigateToList();\r\n                        });\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.navigateToList();\r\n            }\r\n        });\r\n    }\r\n\r\n    onPreviousButtonClicked() {\r\n        this.isSave = true;\r\n        this.stepper.previous();\r\n    }\r\n\r\n    onStepChanged(event: StepperSelectionEvent) {\r\n        this.currentStep = event.selectedIndex;\r\n    }\r\n\r\n    onRemoveInformationBannerClicked() {\r\n        this.isAllTableProcessed = !this.isAllTableProcessed;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","module.exports = \"<mat-toolbar matToolbarHighlight\\r\\n             class=\\\"fixedNavMenuOpen fixedNavSubMenu\\\">\\r\\n    <span class=\\\"fill-space\\\"></span>\\r\\n    <button mat-raised-button\\r\\n            class=\\\"fab-text-button\\\"\\r\\n            color=\\\"accent\\\"\\r\\n            (click)=\\\"onCreateFuncObjectButtonClicked()\\\"\\r\\n            *ifAuthorized=\\\"'Administration.GlobalParameters.CreateFunctionalObject',company:this.company\\\">\\r\\n        <mat-icon class=\\\"mdc-fab__icon material-icons\\\">add</mat-icon>\\r\\n        Create Func. Object\\r\\n    </button>\\r\\n</mat-toolbar>\\r\\n\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"center center\\\"\\r\\n     fxLayoutWrap\\r\\n     *ngIf=\\\"isLoading\\\"\\r\\n     class=\\\"loading\\\">\\r\\n    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n</div>\\r\\n<div class=\\\"main-container\\\"\\r\\n     [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\">\\r\\n    <h2>Objects search</h2>\\r\\n    <mat-card class=\\\"search-card\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <mat-form-field>\\r\\n                <input matInput\\r\\n                       [formControl]=\\\"nameCtrl\\\"\\r\\n                       placeholder=\\\"Functional Object Name\\\"\\r\\n                       (keydown.enter)=\\\"onFilterButtonClicked()\\\"\\r\\n                       autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n            <button mat-raised-button\\r\\n                    class=\\\"heroGradient\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\"\\r\\n                          (click)=\\\"onFilterButtonClicked()\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"no-margin\\\">{{ rowData.length }} Functional Object{{ rowData.length > 0 ? 's' : ''}} found</h2>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"agGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"rowData\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             enableColResize=true\\r\\n                             pagination=true\\r\\n                             paginationPageSize=10\\r\\n                             enableSorting=true\\r\\n                             domLayout=autoHeight\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             (rowClicked)=\\\"onRowClicked($event)\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".search-card {\\n  margin-bottom: 24px; }\\n\"","import { Component, HostListener, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { AgGridUserPreferencesComponent } from './../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { AtlasAgGridParam } from './../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { FunctionalObject } from './../../../../../shared/entities/functional-object.entity';\r\nimport { ColumnConfigurationProperties } from './../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { WINDOW } from './../../../../../shared/entities/window-injection-token';\r\nimport { ApiCollection } from './../../../../../shared/services/common/models';\r\nimport { ConfigurationService } from './../../../../../shared/services/http-services/configuration.service';\r\nimport { TitleService } from './../../../../../shared/services/title.service';\r\nimport { UiService } from './../../../../../shared/services/ui.service';\r\nimport { UrlManagementService } from './../../../../../shared/services/url-management.service';\r\n\r\n@Component({\r\n    selector: 'atlas-functional-objects-list',\r\n    templateUrl: './functional-objects-list.component.html',\r\n    styleUrls: ['./functional-objects-list.component.scss'],\r\n})\r\nexport class FunctionalObjectsListComponent implements OnInit {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    columnDefs: agGrid.ColDef[] = [\r\n        {\r\n            headerName: 'Name',\r\n            field: 'functionalObjectName',\r\n            colId: 'functionalObjectName',\r\n            width: 300,\r\n            minWidth: 300,\r\n            maxWidth: 300,\r\n        },\r\n        {\r\n            headerName: 'Tables',\r\n            colId: 'tables',\r\n            valueGetter: this.tableValueGetter,\r\n            width: 700,\r\n            minWidth: 700,\r\n            maxWidth: 700,\r\n        },\r\n    ];\r\n    rowData: FunctionalObject[] = [];\r\n    functionalObjects: FunctionalObject[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = true;\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    company: string;\r\n\r\n    nameCtrl: FormControl;\r\n\r\n    constructor(private uiService: UiService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private configurationService: ConfigurationService,\r\n        private urlManagementService: UrlManagementService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.initSearchForm();\r\n        this.loadData();\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.nameCtrl.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    initSearchForm() {\r\n        this.nameCtrl = new FormControl();\r\n    }\r\n\r\n    loadData() {\r\n        this.configurationService.getFunctionalObjects().subscribe((functionalObj: ApiCollection<FunctionalObject>) => {\r\n            this.functionalObjects = functionalObj.value;\r\n            this.rowData = this.functionalObjects;\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.columnDefs;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        this.agGridColumnApi.autoSizeAllColumns();\r\n        this.window.onresize = () => {\r\n            this.agGridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onCreateFuncObjectButtonClicked() {\r\n        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/admin/global-parameters/functional-object/new']);\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n    }\r\n\r\n    tableValueGetter(params: agGrid.ValueGetterParams) {\r\n        const col: FunctionalObject = params.data;\r\n        return col.tables ? col.tables.map((table) => table.tableName).join(', ') : '';\r\n    }\r\n\r\n    onFilterButtonClicked() {\r\n        this.rowData = this.functionalObjects\r\n            .filter((obj) => {\r\n                return obj.functionalObjectName\r\n                    ? (obj.functionalObjectName.toLowerCase().indexOf(\r\n                        this.nameCtrl.value ? this.nameCtrl.value.toLowerCase() : '') > -1)\r\n                    : false;\r\n            });\r\n    }\r\n\r\n    onRowClicked(event) {\r\n        const functionalObjectId = event.data.functionalObjectId;\r\n        this.router.navigate(['/' + this.urlManagementService.getCurrentCompanyId() + '/admin/global-parameters/functional-object/details', functionalObjectId]);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <h1>Global Parameters Panel</h1>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"start stretch\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n        <mat-card (click)=\\\"onNavigateButtonClicked('/admin/global-parameters/functional-object/list')\\\"\\r\\n                  class=\\\"active-card\\\"\\r\\n                  *ifAuthorized=\\\"'Administration.GlobalParameters.CreateFunctionalObject',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Functional Object</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Query and create functional objects</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card (click)=\\\"onPrivilegeNavigationClicked()\\\"\\r\\n                  class=\\\"active-card\\\"\\r\\n                  *ngIf=\\\"isPrivilege || isAdmin\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">List Configuration</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Configure List & Search and Contextual Search</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card (click)=\\\"onNavigateButtonClicked('/admin/global-parameters/lock-management/list')\\\"\\r\\n                  class=\\\"active-card\\\"\\r\\n                  *ifAuthorized=\\\"'Administration.GlobalParameters.AccessLock',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Lock Management</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Manage Locked Entities</p>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"start stretch\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Global It Settings</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Manage main details of the application</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/admin/global-parameters/configuration-interface')\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Interface</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Build and monitor interfaces</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">IDD & Translation</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Manage translations and data dictionary</p>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthorizationService } from '../../../core/services/authorization.service';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-global-parameters',\r\n    templateUrl: './global-parameters.component.html',\r\n    styleUrls: ['./global-parameters.component.scss'],\r\n})\r\nexport class GlobalParametersComponent implements OnInit {\r\n    company: string;\r\n    isPrivilege: boolean = false;\r\n    isAdmin: boolean = false;\r\n    isContextualPrivilege: boolean = false;\r\n\r\n    constructor(private route: ActivatedRoute,\r\n        private titleService: TitleService,\r\n        protected securityService: SecurityService, private authorizationService: AuthorizationService,\r\n        private router: Router) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Administration')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'GlobalParameters') &&\r\n                this.authorizationService.isPrivilegeAllowed(this.company, 'ContextualSearchConfig') ||\r\n                (this.authorizationService.isPrivilegeAllowed(this.company, 'ListConfig'))) {\r\n                this.isPrivilege = true;\r\n            }\r\n            if (this.authorizationService.isAdministrator(this.company)) {\r\n                this.isAdmin = true;\r\n            }\r\n\r\n            if (this.authorizationService.isPrivilegeAllowed(this.company, 'Administration')\r\n                && this.authorizationService.isPrivilegeAllowed(this.company, 'GlobalParameters')) {\r\n                if (this.authorizationService.isPrivilegeAllowed(this.company, 'ContextualSearchConfig')\r\n                    && !this.authorizationService.isPrivilegeAllowed(this.company, 'ListConfig')) {\r\n                    this.isContextualPrivilege = true;\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    onNavigateButtonClicked(route: string) {\r\n        this.router.navigate(['/' + this.company + route]);\r\n    }\r\n\r\n    onPrivilegeNavigationClicked() {\r\n        if (this.isContextualPrivilege) {\r\n            this.router.navigate(['/' + this.company + '/admin/global-parameters/grid-configuration/contextual/display']);\r\n        } else {\r\n            this.router.navigate(['/' + this.company + '/admin/global-parameters/grid-configuration/list/display']);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<atlas-grid-configuration></atlas-grid-configuration>\\r\\n\\r\\n<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between start\\\">\\r\\n\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxFlex=\\\"28%\\\"\\r\\n         fxLayoutAlign=\\\"start left\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\">\\r\\n            <atlas-list-view [configurationTypeId]=\\\"configurationTypeId\\\"\\r\\n                             #contextualView></atlas-list-view>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxFlex=\\\"70%\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\">\\r\\n            <atlas-contextual-view-details #contextualViewDetailsComponent></atlas-contextual-view-details>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"isEditMode\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                    DISCARD\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start end\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"end start\\\">\\r\\n                    <button mat-raised-button\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onSaveButtonClick()\\\">\\r\\n                        SAVE\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationType } from '../../../../../shared/enums/configuration-type.enum';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { ContextualViewDetailsComponent } from './details/contextual-view-details.component';\r\n\r\n@Component({\r\n    selector: 'atlas-contextual-search',\r\n    templateUrl: './contextual-search.component.html',\r\n    styleUrls: ['./contextual-search.component.scss']\r\n})\r\nexport class ContextualSearchComponent extends BaseFormComponent implements OnInit {\r\n\r\n    @ViewChild('contextualViewDetailsComponent') contextualViewDetailsComponent: ContextualViewDetailsComponent;\r\n    isSave: boolean;\r\n    isEditMode: boolean = false;\r\n    formComponents: BaseFormComponent[] = [];\r\n    configurationTypeId: number;\r\n    gridId: number;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.configurationTypeId = ConfigurationType.Contextual;\r\n\r\n        if (this.route.snapshot.url.length > 0 && this.route.snapshot.url[3].path.toString() === 'edit') {\r\n            this.isEditMode = true;\r\n        }\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.gridId = Number(this.route.snapshot.paramMap.get('gridId'));\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                    + '/admin/global-parameters/grid-configuration/contextual/display', this.gridId]);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSaveButtonClick() {\r\n        this.contextualViewDetailsComponent.onSaveButtonClicked();\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"mat-elevation-z1 padding-small\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n\\r\\n        <div class=\\\"toolbar-div menu-bar\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <h2>{{viewName}}</h2>\\r\\n            </div>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\"\\r\\n                 fxFlex=\\\"20\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n\\r\\n                <a matTooltip=\\\"Save\\\"\\r\\n                   *ngIf=\\\"isEditMode\\\"\\r\\n                   class=\\\"menu-bar-action-icon\\\">\\r\\n                    <mat-icon class=\\\"white-icon margin-top\\\"\\r\\n                              (click)=\\\"onSaveButtonClicked()\\\">save</mat-icon>\\r\\n                </a>\\r\\n\\r\\n                <a matTooltip=\\\"Edit\\\"\\r\\n                   *ngIf=\\\"!isEditMode\\\"\\r\\n                   class=\\\"menu-bar-action-icon\\\">\\r\\n                    <mat-icon class=\\\"white-icon margin-top\\\"\\r\\n                              (click)=\\\"onEditClicked()\\\">edit</mat-icon>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start end\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"createdByCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"Created By\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"creationDateCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"On\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"lastAmendedByCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"Last Amended By\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"modifiedDateCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"On\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div style=\\\"width: 100%; height:100%\\\">\\r\\n        <div ag-grid=\\\"charterGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"contextualGridRows\\\"\\r\\n                             [columnDefs]=\\\"contextualViewGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"center center\\\"\\r\\n     fxLayoutWrap\\r\\n     *ngIf=\\\"isLoading\\\"\\r\\n     class=\\\"loading\\\">\\r\\n    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n</div>\"","module.exports = \".margin-top {\\n  margin-top: 5px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { GridConfigurationProperties } from '../../../../../../shared/entities/grid-configuration.entity';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { ColumnConfigurationProperties } from '../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { AgGridCheckboxComponent } from '../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { CellEditorNumericComponent } from '../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { AllNumberMask } from '../../../../../../shared/numberMask';\r\nimport { ConfigurationType } from '../../../../../../shared/enums/configuration-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-contextual-view-details',\r\n    templateUrl: './contextual-view-details.component.html',\r\n    styleUrls: ['./contextual-view-details.component.scss']\r\n})\r\nexport class ContextualViewDetailsComponent implements OnInit {\r\n\r\n    createdByCtrl = new AtlasFormControl('CreatedBy');\r\n    creationDateCtrl = new AtlasFormControl('CreationDate');\r\n    lastAmendedByCtrl = new AtlasFormControl('LastAmendedBy');\r\n    modifiedDateCtrl = new AtlasFormControl('ModifiedDate');\r\n    isLoading: boolean = true;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    contextualViewGridColumns: agGrid.ColDef[];\r\n    contextualViewGridOptions: agGrid.GridOptions = {};\r\n    gridId: number;\r\n    viewName: string;\r\n    gridConfiguration: GridConfigurationProperties;\r\n    gridColumnsList: ColumnConfigurationProperties[];\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    gridComponents = {\r\n        atlasNumeric: CellEditorNumericComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    isEditMode: boolean = false;\r\n    pageIsValid: boolean = true;\r\n    contextualGridRows: ColumnConfigurationProperties[];\r\n    friendlyNameColumn: string = 'friendlyName';\r\n    columnOrder: string = 'sortOrderIndex';\r\n    sortOrderIndexes: number[] = [];\r\n    isDuplicateOrder: boolean = false;\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        public gridService: AgGridService,\r\n        private configurationService: ConfigurationService,\r\n        protected snackbarService: SnackbarService,\r\n        protected companyManager: CompanyManagerService,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.gridId = Number(this.route.snapshot.paramMap.get('gridId'));\r\n\r\n        if (this.route.snapshot.url.length > 0 && this.route.snapshot.url[3].path.toString() === 'edit') {\r\n            this.isEditMode = true;\r\n        }\r\n\r\n        this.gridContext.gridEditable = this.isEditMode ? true : false;\r\n        this.initializeGridColumns();\r\n\r\n        if (this.gridId === 0) {\r\n            this.getDefaultGridColumnConfiguration();\r\n        }\r\n        else {\r\n            this.getGridColumnConfiguration();\r\n        }\r\n\r\n\r\n        this.createdByCtrl.disable();\r\n        this.creationDateCtrl.disable();\r\n        this.lastAmendedByCtrl.disable();\r\n        this.modifiedDateCtrl.disable();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.contextualViewGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.contextualViewGridColumns = [\r\n            {\r\n                headerName: 'Field Name',\r\n                field: 'fieldName',\r\n                colId: 'fieldName',\r\n                hide: false,\r\n                sort: 'asc',\r\n                cellStyle: { 'background-color': 'rgba(0, 0, 0, 0.10)' }\r\n            },\r\n            {\r\n                headerName: 'Friendly Name',\r\n                field: 'friendlyName',\r\n                colId: 'friendlyName',\r\n                hide: false,\r\n                editable: this.isEditMode,\r\n                cellRenderer: this.requiredCell,\r\n            },\r\n            {\r\n                headerName: 'Is a Column',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: {\r\n                    disabled: !this.isEditMode,\r\n                },\r\n                colId: 'isVisible',\r\n                field: 'isVisible',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Order',\r\n                colId: 'sortOrderIndex',\r\n                field: 'sortOrderIndex',\r\n                suppressToolPanel: true,\r\n                // lockPosition: true,\r\n                editable: this.isEditMode,\r\n                cellRenderer: this.requiredCell,\r\n                cellEditor: 'atlasNumeric',\r\n                cellEditorParams: {\r\n                    displayMask: AllNumberMask(),\r\n                },\r\n            },\r\n        ];\r\n    };\r\n\r\n    getGridColumnConfiguration() {\r\n\r\n        this.configurationService.getGridColumnConfigurationByGridId(this.gridId)\r\n            .subscribe((data: GridConfigurationProperties) => {\r\n                if (data) {\r\n                    this.gridConfiguration = data;\r\n                    this.contextualGridRows = data.columns;\r\n                    this.viewName = data.name;\r\n                    this.createdByCtrl.patchValue(data.createdBy);\r\n                    this.creationDateCtrl.patchValue(data.createdDateTime.toDateString());\r\n                    this.lastAmendedByCtrl.patchValue(data.modifiedBy);\r\n                    if (data.modifiedDateTime) {\r\n                        this.modifiedDateCtrl.patchValue(data.modifiedDateTime.toDateString());\r\n                    }\r\n                }\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    getDefaultGridColumnConfiguration() {\r\n        this.configurationService.getGridConfigByConfigurationTypeId(ConfigurationType.Contextual)\r\n            .subscribe((data) => {\r\n                const gridViewList = data.value;\r\n                this.gridId = gridViewList[0].gridId;\r\n                this.getGridColumnConfiguration();\r\n            });\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.contextualViewGridColumns;\r\n        this.contextualViewGridOptions = params;\r\n        this.gridColumnApi = this.contextualViewGridOptions.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onEditClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n            + '/admin/global-parameters/grid-configuration/contextual/edit', this.gridId]);\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.isDuplicateOrder = false;\r\n        this.checkDuplicateOrder(this.gridConfiguration);\r\n        if (!this.isDuplicateOrder) {\r\n            if (this.pageIsValid) {\r\n                this.configurationService.updateGridColumnConfiguration(this.gridConfiguration)\r\n                    .subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Configuration Updated');\r\n                        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                            + '/admin/global-parameters/grid-configuration/contextual/display', this.gridId]);\r\n                    },\r\n                        (err) => {\r\n                            throw err;\r\n                        });\r\n\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar('Please resolve errors');\r\n            }\r\n        }\r\n    }\r\n\r\n    checkDuplicateOrder(gridData) {\r\n        this.sortOrderIndexes = [];\r\n        gridData.columns.forEach((element) => {\r\n            const sortOrderExists = this.sortOrderIndexes.find((s) => s === element.sortOrderIndex);\r\n            if (sortOrderExists) {\r\n                this.isDuplicateOrder = true;\r\n                this.snackbarService.throwErrorSnackBar('Duplicate Order Sequence');\r\n                return;\r\n            }\r\n            else {\r\n                this.sortOrderIndexes.push(element.sortOrderIndex);\r\n            }\r\n        });\r\n    }\r\n\r\n    isGridEditable(): boolean {\r\n        if (!this.isEditMode) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n        }\r\n        if (params.colDef.colId === 'amount') {\r\n            const indexOf = params.value.toString().indexOf('.');\r\n            if (indexOf !== -1) {\r\n                const remainingLength = params.value.toString().length - indexOf;\r\n                if (remainingLength > 3) {\r\n                    return params.value.toString().substr(0, indexOf + 3);\r\n                }\r\n            }\r\n            return params.value;\r\n        }\r\n\r\n        return params.value;\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n            if (params.colDef) {\r\n                const columnChanged: string = params.colDef.field;\r\n                if (columnChanged === this.friendlyNameColumn) {\r\n                    if (params.newValue === '') {\r\n                        this.pageIsValid = false;\r\n                        this.snackbarService.throwErrorSnackBar('Friendly Name is required.');\r\n                    }\r\n                    else {\r\n                        this.pageIsValid = true;\r\n                    }\r\n                }\r\n                if (columnChanged === this.columnOrder) {\r\n                    if (!params.newValue) {\r\n                        this.pageIsValid = false;\r\n                        this.snackbarService.throwErrorSnackBar('Order is required.');\r\n                    }\r\n                    else {\r\n                        this.pageIsValid = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module.exports = \"<div *ngIf=\\\"isAdmin\\\"\\r\\n     matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav mat-tab-nav-bar\\r\\n             matToolbarHighlight>\\r\\n            <div *ngFor=\\\"let routeLink of routeLinks\\\">\\r\\n                <a mat-tab-link\\r\\n                   [routerLink]=\\\"routeLink.link\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLink)\\\">\\r\\n                    {{ routeLink.label }}\\r\\n                </a>\\r\\n            </div>\\r\\n        </nav>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"!isAdmin\\\"\\r\\n     matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav mat-tab-nav-bar\\r\\n             matToolbarHighlight>\\r\\n            <div *ngFor=\\\"let routeLink of routeLinks\\\">\\r\\n                <a mat-tab-link\\r\\n                   *ifAuthorized=\\\"routeLink.privilege,company:this.company\\\"\\r\\n                   [routerLink]=\\\"routeLink.link\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLink)\\\">\\r\\n                    {{ routeLink.label }}\\r\\n                </a>\\r\\n            </div>\\r\\n        </nav>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".header-tab {\\n  margin-bottom: 40px; }\\n\\n.menu-header {\\n  background-color: #53c234;\\n  color: white; }\\n\\n.menu-header mat-icon {\\n    color: white; }\\n\\n.mat-menu-content {\\n  padding-top: 0 !important; }\\n\\n.floating-menu {\\n  top: -1px; }\\n\\n.dark-tab .mat-tab-nav-bar {\\n  border-bottom: 0; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ConfigurationType } from '../../../../shared/enums/configuration-type.enum';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\n\r\n@Component({\r\n    selector: 'atlas-grid-configuration',\r\n    templateUrl: './grid-configuration.component.html',\r\n    styleUrls: ['./grid-configuration.component.scss']\r\n})\r\n\r\nexport class GridConfigurationComponent implements OnInit {\r\n    routeLinks = [\r\n        {\r\n            label: 'Lists',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/admin/global-parameters/grid-configuration/list/display',\r\n            index: 0,\r\n            title: 'List Configuration',\r\n            privilege: 'Administration.GlobalParameters.ListConfig',\r\n        },\r\n        {\r\n            label: 'Contextual Search',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/admin/global-parameters/grid-configuration/contextual/display',\r\n            index: 1,\r\n            title: 'List Configuration',\r\n            privilege: 'Administration.GlobalParameters.ContextualSearchConfig',\r\n        },\r\n    ];\r\n\r\n    activeLinkIndex = -1;\r\n    gridType: number;\r\n    isViewMode: boolean;\r\n    isEditMode: boolean;\r\n    company: string;\r\n    isAdmin: boolean = false;\r\n\r\n    constructor(private router: Router,\r\n        private companyManager: CompanyManagerService,\r\n        private route: ActivatedRoute,\r\n        protected securityService: SecurityService, private authorizationService: AuthorizationService,\r\n        private titleService: TitleService) {\r\n        this.activeLinkIndex = this.routeLinks.indexOf(this.routeLinks.find((tab) => this.router.url.includes(tab.link)));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.titleService.setTitle('List Configuration');\r\n        this.isViewMode = true;\r\n        this.isEditMode = false;\r\n\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            if (this.authorizationService.isAdministrator(this.company)) {\r\n                this.isAdmin = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    onSelectedIndexChanged = (tabChangeEvent: number): void => {\r\n        this.setGridType(tabChangeEvent);\r\n    }\r\n\r\n    setGridType(tabIndex: number) {\r\n        this.gridType = (tabIndex === 0 ? ConfigurationType.List : ConfigurationType.Contextual);\r\n    }\r\n\r\n    isActive(routeLink: any) {\r\n        if (this.activeLinkIndex === routeLink.index) {\r\n            this.titleService.setTitle(this.routeLinks[this.activeLinkIndex].title);\r\n        }\r\n        return this.activeLinkIndex === routeLink.index;\r\n    }\r\n}\r\n","module.exports = \"<mat-card class=\\\"mat-elevation-z1 padding-small\\\">\\r\\n    <div class=\\\"header-content\\\">\\r\\n\\r\\n        <div class=\\\"toolbar-div menu-bar\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <h2>{{viewName}}</h2>\\r\\n            </div>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\"\\r\\n                 fxFlex=\\\"20\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n\\r\\n                <a matTooltip=\\\"Save\\\"\\r\\n                   *ngIf=\\\"isEditMode\\\"\\r\\n                   class=\\\"menu-bar-action-icon\\\">\\r\\n                    <mat-icon class=\\\"white-icon margin-top\\\"\\r\\n                              (click)=\\\"onSaveButtonClicked()\\\">save</mat-icon>\\r\\n                </a>\\r\\n\\r\\n                <a matTooltip=\\\"Edit\\\"\\r\\n                   *ngIf=\\\"!isEditMode\\\"\\r\\n                   class=\\\"menu-bar-action-icon\\\">\\r\\n                    <mat-icon class=\\\"white-icon margin-top\\\"\\r\\n                              (click)=\\\"onEditClicked()\\\">edit</mat-icon>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start end\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"createdByCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"Created By\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"creationDateCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"On\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"lastAmendedByCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"Last Amended By\\\">\\r\\n            </atlas-form-input>\\r\\n            <atlas-form-input fxFlex=\\\"20%\\\"\\r\\n                              [fieldControl]=\\\"modifiedDateCtrl\\\"\\r\\n                              [isEditable]=\\\"true\\\"\\r\\n                              label=\\\"On\\\">\\r\\n            </atlas-form-input>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div style=\\\"width: 100%; height:100%\\\">\\r\\n        <div ag-grid=\\\"charterGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"listGridRows\\\"\\r\\n                             [columnDefs]=\\\"listViewGridColumns\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (cellValueChanged)=\\\"onCellValueChanged($event)\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"true\\\"\\r\\n                             enableFilter>\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </div>\\r\\n</mat-card>\\r\\n<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"center center\\\"\\r\\n     fxLayoutWrap\\r\\n     *ngIf=\\\"isLoading\\\"\\r\\n     class=\\\"loading\\\">\\r\\n    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n</div>\"","module.exports = \".margin-top {\\n  margin-top: 5px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AtlasFormControl } from '../../../../../../shared/entities/atlas-form-control';\r\nimport { AgGridService } from '../../../../../../shared/services/ag-grid.service';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { GridConfigurationProperties } from '../../../../../../shared/entities/grid-configuration.entity';\r\nimport { ConfigurationService } from '../../../../../../shared/services/http-services/configuration.service';\r\nimport { ColumnConfigurationProperties } from '../../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { AgGridCheckboxComponent } from '../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { CompanyManagerService } from '../../../../../../core/services/company-manager.service';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { BaseFormComponent } from '../../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../../shared/services/form-configuration-provider.service';\r\nimport { SnackbarService } from '../../../../../../shared/services/snackbar.service';\r\nimport { ConfigurationType } from '../../../../../../shared/enums/configuration-type.enum';\r\n\r\n@Component({\r\n    selector: 'atlas-list-view-details',\r\n    templateUrl: './list-view-details.component.html',\r\n    styleUrls: ['./list-view-details.component.scss']\r\n})\r\nexport class ListViewDetailsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    createdByCtrl = new AtlasFormControl('CreatedBy');\r\n    creationDateCtrl = new AtlasFormControl('CreationDate');\r\n    lastAmendedByCtrl = new AtlasFormControl('LastAmendedBy');\r\n    modifiedDateCtrl = new AtlasFormControl('ModifiedDate');\r\n    isLoading: boolean = true;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    gridId: number;\r\n    viewName: string;\r\n    gridContext = {\r\n        gridEditable: true,\r\n    };\r\n    gridConfiguration: GridConfigurationProperties;\r\n    isEditMode: boolean = false;\r\n    pageIsValid: boolean = true;\r\n    listViewGridColumns: agGrid.ColDef[];\r\n    listViewGridOptions: agGrid.GridOptions = {};\r\n    listGridRows: ColumnConfigurationProperties[];\r\n    friendlyNameColumn: string = 'friendlyName';\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected router: Router,\r\n        public gridService: AgGridService,\r\n        private configurationService: ConfigurationService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected snackbarService: SnackbarService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.gridId = Number(this.route.snapshot.paramMap.get('gridId'));\r\n        if (this.route.snapshot.url.length > 0 && this.route.snapshot.url[3].path.toString() === 'edit') {\r\n            this.isEditMode = true;\r\n        }\r\n\r\n        this.gridContext.gridEditable = this.isEditMode ? true : false;\r\n        this.initializeGridColumns();\r\n\r\n        if (this.gridId === 0) {\r\n            this.getDefaultGridColumnConfiguration();\r\n        }\r\n        else {\r\n            this.getGridColumnConfiguration();\r\n        }\r\n\r\n        this.createdByCtrl.disable();\r\n        this.creationDateCtrl.disable();\r\n        this.lastAmendedByCtrl.disable();\r\n        this.modifiedDateCtrl.disable();\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.listViewGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.listViewGridColumns = [\r\n            {\r\n                headerName: 'Field Name',\r\n                field: 'fieldName',\r\n                colId: 'fieldName',\r\n                hide: false,\r\n                sort: 'asc',\r\n                cellStyle: { 'background-color': 'rgba(0, 0, 0, 0.10)' }\r\n            },\r\n            {\r\n                headerName: 'Data Type',\r\n                field: 'filterType',\r\n                colId: 'filterType',\r\n                hide: false,\r\n                cellStyle: { 'background-color': 'rgba(0, 0, 0, 0.10)' }\r\n            },\r\n            {\r\n                headerName: 'Friendly Name',\r\n                field: 'friendlyName',\r\n                colId: 'friendlyName',\r\n                hide: false,\r\n                editable: this.isEditMode,\r\n                cellRenderer: this.requiredCell,\r\n            },\r\n            {\r\n                headerName: 'Data Size',\r\n                field: 'size',\r\n                colId: 'size',\r\n                hide: false,\r\n                cellStyle: { 'background-color': 'rgba(0, 0, 0, 0.10)' }\r\n            },\r\n            {\r\n                headerName: 'Linked Table',\r\n                field: 'groupName',\r\n                colId: 'groupName',\r\n                hide: false,\r\n                cellStyle: { 'background-color': 'rgba(0, 0, 0, 0.10)' }\r\n            },\r\n            {\r\n                headerName: 'Is a Filter',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: {\r\n                    disabled: !this.isEditMode,\r\n                },\r\n                field: 'isFilterable',\r\n                colId: 'isFilterable',\r\n                hide: false,\r\n            },\r\n            {\r\n                headerName: 'Is a Result',\r\n                cellRendererFramework: AgGridCheckboxComponent,\r\n                cellRendererParams: {\r\n                    disabled: !this.isEditMode,\r\n                },\r\n                colId: 'isVisible',\r\n                field: 'isVisible',\r\n                hide: false,\r\n            },\r\n        ];\r\n    };\r\n\r\n\r\n    getGridColumnConfiguration() {\r\n        this.configurationService.getGridColumnConfigurationByGridId(this.gridId)\r\n            .subscribe((data: GridConfigurationProperties) => {\r\n                if (data) {\r\n                    this.gridConfiguration = data;\r\n                    this.listGridRows = data.columns;\r\n                    this.viewName = data.name;\r\n                    this.createdByCtrl.patchValue(data.createdBy);\r\n                    this.creationDateCtrl.patchValue(data.createdDateTime.toDateString());\r\n                    this.lastAmendedByCtrl.patchValue(data.modifiedBy);\r\n                    if (data.modifiedDateTime) {\r\n                        this.modifiedDateCtrl.patchValue(data.modifiedDateTime.toDateString());\r\n                    }\r\n                }\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    getDefaultGridColumnConfiguration() {\r\n        this.configurationService.getGridConfigByConfigurationTypeId(ConfigurationType.List)\r\n            .subscribe((data) => {\r\n                const gridViewList = data.value;\r\n                this.gridId = gridViewList[0].gridId;\r\n                this.getGridColumnConfiguration();\r\n            });\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        params.columnDefs = this.listViewGridColumns;\r\n        this.listViewGridOptions = params;\r\n        this.gridColumnApi = this.listViewGridOptions.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n    }\r\n\r\n    onEditClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n            + '/admin/global-parameters/grid-configuration/list/edit', this.gridId]);\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n\r\n        if (this.pageIsValid) {\r\n\r\n            this.configurationService.updateGridColumnConfiguration(this.gridConfiguration).subscribe(\r\n                () => {\r\n                    this.snackbarService.informationSnackBar('Configuration Updated');\r\n                    this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                        + '/admin/global-parameters/grid-configuration/list/display', this.gridId]);\r\n                },\r\n                (err) => {\r\n                    throw err;\r\n                });\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('Please resolve errors');\r\n        }\r\n    }\r\n\r\n    isGridEditable(params) {\r\n        return params.context.gridEditable;\r\n    }\r\n\r\n    requiredCell(params) {\r\n        if (!params.value || params.value === '') {\r\n            return '<div class=\\'document-cell-value-required\\'>Required*</div>';\r\n        }\r\n        if (params.colDef.colId === 'amount') {\r\n            const indexOf = params.value.toString().indexOf('.');\r\n            if (indexOf !== -1) {\r\n                const remainingLength = params.value.toString().length - indexOf;\r\n                if (remainingLength > 3) {\r\n                    return params.value.toString().substr(0, indexOf + 3);\r\n                }\r\n            }\r\n            return params.value;\r\n        }\r\n\r\n        return params.value;\r\n    }\r\n\r\n    onCellValueChanged(params) {\r\n        if (params.oldValue !== params.newValue) {\r\n            params.node.data.isDirty = true;\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n            if (params.colDef) {\r\n                const columnChanged: string = params.colDef.field;\r\n                if (columnChanged === this.friendlyNameColumn) {\r\n                    if (params.newValue === '') {\r\n                        this.pageIsValid = false;\r\n                        this.snackbarService.throwErrorSnackBar('Friendly Name is required.');\r\n                    }\r\n                    else {\r\n                        this.pageIsValid = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","module.exports = \"<atlas-grid-configuration></atlas-grid-configuration>\\r\\n\\r\\n<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"space-between start\\\">\\r\\n\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxFlex=\\\"28%\\\"\\r\\n         fxLayoutAlign=\\\"start left\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\">\\r\\n            <atlas-list-view [configurationTypeId]=\\\"configurationTypeId\\\"\\r\\n                             #listView></atlas-list-view>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"column\\\"\\r\\n         fxFlex=\\\"70%\\\">\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start left\\\">\\r\\n            <atlas-list-view-details #listViewDetailsComponent></atlas-list-view-details>\\r\\n        </div>\\r\\n        <div *ngIf=\\\"isEditMode\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start start\\\">\\r\\n                <button mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n                    DISCARD\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start end\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"end start\\\">\\r\\n                    <button mat-raised-button\\r\\n                            type=\\\"button\\\"\\r\\n                            (click)=\\\"onSaveButtonClick()\\\">\\r\\n                        SAVE\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".menu-bar-action-icon {\\n  cursor: pointer;\\n  background-color: #81cf5c;\\n  border-radius: 50%;\\n  width: 40px;\\n  height: 40px;\\n  text-align: center; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { GridConfigurationProperties } from '../../../../../shared/entities/grid-configuration.entity';\r\nimport { MatDialog } from '@angular/material';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { ConfirmationDialogComponent } from '../../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ListViewDetailsComponent } from './details/list-view-details.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationType } from '../../../../../shared/enums/configuration-type.enum';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-list-search',\r\n    templateUrl: './list-search.component.html',\r\n    styleUrls: ['./list-search.component.scss']\r\n})\r\nexport class ListAndSearchComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('listViewDetailsComponent') listViewDetailsComponent: ListViewDetailsComponent;\r\n    isSave: boolean;\r\n    isEditMode: boolean = false;\r\n    configurationTypeId: number;\r\n    gridId: number;\r\n\r\n    constructor(\r\n        protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected router: Router,\r\n        protected companyManager: CompanyManagerService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n\r\n        this.configurationTypeId = ConfigurationType.List;\r\n\r\n        if (this.route.snapshot.url.length > 0 && this.route.snapshot.url[3].path.toString() === 'edit') {\r\n            this.isEditMode = true;\r\n        };\r\n    }\r\n\r\n    onViewSectedForGridConfiguration(gridView: GridConfigurationProperties) {\r\n\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDiscardDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'Discard Changes',\r\n                text: 'You have some modification pending. Close and lose changes?',\r\n                okButton: 'Ok',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDiscardDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.gridId = Number(this.route.snapshot.paramMap.get('gridId'));\r\n                this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                    + '/admin/global-parameters/grid-configuration/list/display', this.gridId]);\r\n            }\r\n        });\r\n    }\r\n\r\n    onSaveButtonClick() {\r\n        this.listViewDetailsComponent.onSaveButtonClicked();\r\n    }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start none\\\"\\r\\n             class=\\\"search\\\">\\r\\n            <form class=\\\"large-form\\\"\\r\\n                  fxFlex=\\\"100%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input matInput\\r\\n                           placeholder=\\\"View Name\\\"\\r\\n                           (keydown.enter)=\\\"onSearchButtonClicked()\\\"\\r\\n                           [formControl]=\\\"searchedValueCtrl\\\"\\r\\n                           autocomplete=\\\"off\\\" />\\r\\n                </mat-form-field>\\r\\n            </form>\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onSearchButtonClicked()\\\"\\r\\n                    class=\\\"heroGradient\\\"\\r\\n                    id=\\\"search-button\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <mat-card class=\\\"mat-card-height\\\">\\r\\n        <mat-card-content>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"center start\\\">\\r\\n                <mat-nav-list *ngFor=\\\"let group of groupedData\\\">\\r\\n                    <mat-divider></mat-divider>\\r\\n                    <h2 class=\\\"heading-margin\\\">\\r\\n                        {{group.group}}\\r\\n                    </h2>\\r\\n                    <div *ngFor=\\\"let gridView of group.children\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxFlex=\\\"100%\\\">\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutAlign=\\\"left start\\\">\\r\\n                                <mat-list-item (click)=\\\"onOpenGridConfiguration(gridView)\\\">\\r\\n                                    <div fxLayout=\\\"row\\\"\\r\\n                                         fxLayoutAlign=\\\"left start\\\">\\r\\n                                        {{ gridView.name }}\\r\\n                                    </div>\\r\\n                                </mat-list-item>\\r\\n                                <mat-divider></mat-divider>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-nav-list>\\r\\n                <mat-nav-list *ngIf=\\\"isListEmpty\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxFlex=\\\"100%\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                             fxLayoutAlign=\\\"left start\\\">\\r\\n                            <span>No Rows To Show</span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-nav-list>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n</div>\"","module.exports = \".mat-card-height {\\n  max-height: 600px;\\n  overflow-y: auto; }\\n\\n.heading-margin {\\n  margin: 10px !important; }\\n\"","import { Component, OnInit, OnDestroy, AfterViewInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { GridConfigurationProperties } from '../../../../../shared/entities/grid-configuration.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { from, Subject, Observable } from 'rxjs';\r\nimport { map, mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ConfigurationType } from '../../../../../shared/enums/configuration-type.enum';\r\nimport { Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\n\r\n@Component({\r\n    selector: 'atlas-list-view',\r\n    templateUrl: './list-view.component.html',\r\n    styleUrls: ['./list-view.component.scss']\r\n})\r\nexport class ListViewComponent implements OnInit, OnDestroy {\r\n\r\n    @Output() readonly viewSelected = new EventEmitter<GridConfigurationProperties>();\r\n    @Input() configurationTypeId: number;\r\n\r\n    gridViewList: GridConfigurationProperties[];\r\n    filteredGridViewList: GridConfigurationProperties[];\r\n    searchedValueCtrl = new AtlasFormControl('searchedValueCtrl');\r\n    destroy$ = new Subject();\r\n    searchForm: FormGroup;\r\n    searchTerm: string;\r\n    isListEmpty: boolean = false;\r\n    isLoading: boolean = true;\r\n    groupedData: any;\r\n\r\n    constructor(private configurationService: ConfigurationService,\r\n        protected router: Router,\r\n        private formBuilder: FormBuilder,\r\n        protected companyManager: CompanyManagerService,\r\n    ) {\r\n\r\n        this.searchForm = this.formBuilder.group({\r\n            searchedValueCtrl: this.searchedValueCtrl,\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getAllGridViews(this.configurationTypeId);\r\n    }\r\n\r\n    onOpenGridConfiguration(gridView: GridConfigurationProperties) {\r\n        if (gridView.configurationTypeId == ConfigurationType.List) {\r\n\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                + '/admin/global-parameters/grid-configuration/list/display', gridView.gridId]);\r\n        }\r\n        else if (gridView.configurationTypeId == ConfigurationType.Contextual) {\r\n\r\n            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                + '/admin/global-parameters/grid-configuration/contextual/display', gridView.gridId]);\r\n        }\r\n    }\r\n\r\n    getAllGridViews(configurationTypeId: number) {\r\n        this.configurationService.getGridConfigByConfigurationTypeId(configurationTypeId)\r\n            .subscribe((data) => {\r\n                this.gridViewList = data.value.map((gridView) => {\r\n                    return gridView;\r\n                });\r\n                this.filteredGridViewList = this.gridViewList;\r\n                this.groupedData = Object.values(this.groupByName(this.filteredGridViewList)).sort(this.compare);\r\n                if (this.filteredGridViewList.length === 0) {\r\n                    this.isListEmpty = true;\r\n                }\r\n                else {\r\n                    this.isListEmpty = false;\r\n                }\r\n\r\n                this.isLoading = false;\r\n            });\r\n\r\n\r\n    }\r\n\r\n    compare(a, b) {\r\n        const genreA = a.group.toUpperCase();\r\n        const genreB = b.group.toUpperCase();\r\n\r\n        let comparison = 0;\r\n        if (genreA > genreB) {\r\n            comparison = 1;\r\n        } else if (genreA < genreB) {\r\n            comparison = -1;\r\n        }\r\n        return comparison;\r\n    }\r\n\r\n    groupByName(rawData): any {\r\n        let data = rawData.reduce((r, e) => {\r\n            // get first letter of name of current element\r\n            let group = e.name[0];\r\n            // if there is no property in accumulator with this letter create it\r\n            if (!r[group]) r[group] = { group, children: [e] }\r\n            // if there is push current element to children array for that letter\r\n            else r[group].children.push(e);\r\n            // return accumulator\r\n            return r;\r\n        }, {})\r\n\r\n        return data;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    onSearchButtonClicked() {\r\n        this.searchTerm = this.searchForm.get('searchedValueCtrl').value.toUpperCase();\r\n        if (!this.searchTerm) {\r\n            this.filteredGridViewList = this.gridViewList;\r\n            this.groupedData = Object.values(this.groupByName(this.filteredGridViewList)).sort(this.compare);\r\n        }\r\n        else {\r\n            this.filteredGridViewList = this.gridViewList.filter(grid => grid.name.toUpperCase().includes(this.searchTerm));\r\n            this.groupedData = Object.values(this.groupByName(this.filteredGridViewList)).sort(this.compare);\r\n        }\r\n\r\n        if (this.filteredGridViewList.length === 0) {\r\n            this.isListEmpty = true;\r\n        }\r\n        else {\r\n            this.isListEmpty = false;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\"\\r\\n     fxLayoutAlign=\\\"center center\\\"\\r\\n     fxLayoutWrap\\r\\n     *ngIf=\\\"isLoading\\\"\\r\\n     class=\\\"loading\\\">\\r\\n    <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n</div>\\r\\n<div class=\\\"main-container\\\"\\r\\n     [ngClass]=\\\"{'hidden-during-loading':isLoading}\\\">\\r\\n    <h2>Locks search</h2>\\r\\n\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between center\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"atlas-grid-card-header\\\">\\r\\n            <h2 class=\\\"no-margin\\\">{{ rowData.length }} Lock{{ rowData.length > 0 ? 's' : ''}} found</h2>\\r\\n\\r\\n            <button mat-raised-button\\r\\n                    (click)=\\\"onRefreshButtonClick()\\\">\\r\\n                Refresh\\r\\n            </button>\\r\\n        </div>\\r\\n        <div ag-grid=\\\"agGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height: 100%\\\">\\r\\n            <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"rowData\\\"\\r\\n                             [columnDefs]=\\\"columnDefs\\\"\\r\\n                             enableColResize=true\\r\\n                             pagination=true\\r\\n                             paginationPageSize=10\\r\\n                             enableSorting=true\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             (columnVisible)=\\\"onColumnVisibilityChanged($event)\\\"\\r\\n                             enableFilter\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n    <div fxLayout=\\\"row \\\"\\r\\n         fxLayoutAlign=\\\"space-between center\\\"\\r\\n         class=\\\"button-details\\\">\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start start \\\">\\r\\n            <button mat-button\\r\\n                    fxFlexOffset=\\\"20%\\\">\\r\\n                Discard\\r\\n            </button>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"column \\\"\\r\\n             fxLayoutAlign=\\\"start end \\\">\\r\\n            <div fxLayout=\\\"row \\\"\\r\\n                 fxLayoutAlign=\\\"end start \\\"\\r\\n                 fxFlexOffset=\\\"20%\\\">\\r\\n                <button mat-raised-button\\r\\n                        (click)=\\\"onDeleteButtonClick()\\\">\\r\\n                    Delete\\r\\n                </button>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".search-card {\\n  margin-bottom: 24px; }\\n\"","import { Component, Inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { AgGridUserPreferencesComponent } from './../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component';\r\nimport { AtlasAgGridParam } from './../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { ColumnConfigurationProperties } from './../../../../../shared/entities/grid-column-configuration.entity';\r\nimport { LockFunctionalContext } from './../../../../../shared/entities/lock-functional-context.entity';\r\nimport { Lock } from './../../../../../shared/entities/lock.entity';\r\nimport { WINDOW } from './../../../../../shared/entities/window-injection-token';\r\nimport { ApiCollection } from './../../../../../shared/services/common/models';\r\nimport { ConfigurationService } from './../../../../../shared/services/http-services/configuration.service';\r\nimport { LockService } from './../../../../../shared/services/http-services/lock.service';\r\nimport { TitleService } from './../../../../../shared/services/title.service';\r\nimport { UiService } from './../../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-lock-management-list',\r\n    templateUrl: './lock-management-list.component.html',\r\n    styleUrls: ['./lock-management-list.component.scss'],\r\n})\r\nexport class LockManagementListComponent implements OnInit, OnDestroy {\r\n    @ViewChild('userPreferences') userPreferencesComponent: AgGridUserPreferencesComponent;\r\n\r\n    agGridOptions: agGrid.GridOptions = {};\r\n    columnDefs: agGrid.ColDef[] = [\r\n        {\r\n            headerName: 'Company',\r\n            field: 'companyId',\r\n            colId: 'companyId',\r\n            headerCheckboxSelection: true,\r\n            checkboxSelection: true,\r\n        },\r\n        {\r\n            headerName: 'Owner',\r\n            field: 'lockOwner',\r\n            colId: 'lockOwner',\r\n        },\r\n        {\r\n            headerName: 'Session',\r\n            field: 'applicationSessionId',\r\n            colId: 'applicationSessionId',\r\n        },\r\n        {\r\n            headerName: 'Type',\r\n            field: 'resourceType',\r\n            colId: 'resourceType',\r\n        },\r\n        {\r\n            headerName: 'Code',\r\n            field: 'resourceCode',\r\n            colId: 'resourceCode',\r\n        },\r\n        {\r\n            headerName: 'Tech. Id',\r\n            field: 'resourceId',\r\n            colId: 'resourceId',\r\n        },\r\n        {\r\n            headerName: 'Action',\r\n            field: 'functionalContext',\r\n            colId: 'functionalContext',\r\n            valueFormatter: this.lockFunctionalContextFormatter,\r\n        },\r\n        {\r\n            headerName: 'Acquisition Time',\r\n            field: 'lockAcquisitionDateTime',\r\n            colId: 'lockAcquisitionDateTime',\r\n        },\r\n    ];\r\n    rowData: Lock[] = [];\r\n    selectedLocks: Lock[] = [];\r\n    locks: Lock[] = [];\r\n    agGridApi: agGrid.GridApi;\r\n    agGridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    isLoading = true;\r\n    columnConfiguration: ColumnConfigurationProperties[] = [];\r\n    company: string;\r\n    destroy$ = new Subject();\r\n\r\n    nameCtrl: FormControl;\r\n\r\n    constructor(private uiService: UiService,\r\n        @Inject(WINDOW) private window: Window,\r\n        private configurationService: ConfigurationService,\r\n        private lockService: LockService,\r\n        private companyManagerService: CompanyManagerService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n    ) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.initSearchForm();\r\n        this.loadData();\r\n    }\r\n\r\n    lockFunctionalContextFormatter(params) {\r\n        return LockFunctionalContext[params.value].toString();\r\n    }\r\n\r\n    initSearchForm() {\r\n        this.nameCtrl = new FormControl();\r\n    }\r\n\r\n    loadData() {\r\n\r\n        this.lockService.getLockList().pipe(\r\n            takeUntil(this.destroy$),\r\n        ).subscribe((lock: ApiCollection<Lock>) => {\r\n            this.locks = lock.value;\r\n            this.rowData = this.locks;\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.agGridOptions = params;\r\n        this.agGridOptions.columnDefs = this.columnDefs;\r\n        this.agGridApi = this.agGridOptions.api;\r\n        this.agGridColumnApi = this.agGridOptions.columnApi;\r\n        if (this.agGridApi) { this.agGridApi.sizeColumnsToFit(); }\r\n        this.window.onresize = () => {\r\n            if (this.agGridApi) { this.agGridApi.sizeColumnsToFit(); }\r\n        };\r\n    }\r\n\r\n    onCreateFuncObjectButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManagerService.getCurrentCompanyId() + '/admin/global-parameters/functional-object/new']);\r\n    }\r\n\r\n    onColumnVisibilityChanged(col) {\r\n        this.userPreferencesComponent.onChangeColumnVisibility(col);\r\n    }\r\n\r\n    onDeleteButtonClick() {\r\n        this.selectedLocks = this.agGridApi.getSelectedRows();\r\n        if (this.selectedLocks && this.selectedLocks.length > 0) {\r\n            const ids: number[] = new Array<number>();\r\n            this.selectedLocks.forEach((l) => { ids.push(l.lockId); });\r\n            this.lockService.deleteLocks(ids).pipe(\r\n                takeUntil(this.destroy$),\r\n            ).subscribe(() => { this.loadData(); });\r\n        }\r\n    }\r\n\r\n    onRefreshButtonClick() {\r\n        this.loadData();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <h2 class=\\\"heading\\\">\\r\\n        Date Format\\r\\n    </h2>\\r\\n    <div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\"\\r\\n             fxFlex=\\\"200%\\\">\\r\\n            <mat-form-field fxFlex=\\\"90%\\\"\\r\\n                            class=\\\"content-height\\\">\\r\\n                <mat-select [value]='dateFormatSelected'\\r\\n                            placeholder=\\\"Date Format\\\"\\r\\n                            (selectionChange)='onDateFormatChanged($event)'>\\r\\n                    <mat-option *ngFor=\\\"let dateFormat of dateFormatList\\\"\\r\\n                                [value]=\\\"dateFormat.enumEntityId\\\">\\r\\n                        {{ dateFormat.enumEntityValue }}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-raised-button\\r\\n                [disabled]=\\\"false\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".content-height {\\n  height: 500px; }\\n\\n.heading {\\n  height: 35px; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { DateFormat } from '../../../../../shared/entities/date-format.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { UserPreferenceResult } from '../../../../../shared/entities/user-preference-result.entity';\r\nimport { UserPreferencesSetup } from '../../../../../shared/entities/user-preferences-setup.entity';\r\nimport { UserPreferences } from '../../../../../shared/entities/user-preferences.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-date-format',\r\n    templateUrl: './date-format.component.html',\r\n    styleUrls: ['./date-format.component.scss'],\r\n})\r\nexport class DateFormatComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    company: string;\r\n    dateFormatList: DateFormat[];\r\n    isUserPreferenceExist: boolean = false;\r\n    dateFormatSelected: number;\r\n    subscription: Subscription[] = [];\r\n    userPreferenceSetUp: UserPreferencesSetup;\r\n    userPreferenceDetails: UserPreferences;\r\n    userId: number;\r\n    masterData: MasterData = new MasterData();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected configurationService: ConfigurationService,\r\n        private authorizationService: AuthorizationService,\r\n        protected snackbarService: SnackbarService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.userId = this.authorizationService.getCurrentUser().userId;\r\n        this.getUserPreference();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.dateFormatList = this.masterData.dateFormatPreference;\r\n    }\r\n\r\n    onDateFormatChanged(data) {\r\n        this.userPreferenceDetails = new UserPreferences();\r\n        this.userPreferenceSetUp = new UserPreferencesSetup();\r\n        this.userPreferenceSetUp.userId = Number(this.userId);\r\n        this.userPreferenceSetUp.dateFormatId = data.value;\r\n        this.userPreferenceDetails.userPreferencesSetup = this.userPreferenceSetUp;\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.saveUserPreference();\r\n        this.saveMandatory.emit();\r\n    }\r\n\r\n    saveUserPreference() {\r\n        this.subscription.push(this.configurationService.getUserPreference(this.userId).subscribe((data: UserPreferenceResult[]) => {\r\n            if (data && data.length > 0) {\r\n                this.subscription.push(this.configurationService.updateUserPreference\r\n                    (this.userPreferenceDetails).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Date format succesfully updated');\r\n                    }));\r\n            } else {\r\n                this.subscription.push(this.configurationService.createUserPreference\r\n                    (this.userPreferenceDetails).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Date format succesfully created');\r\n                    }));\r\n            }\r\n        }));\r\n    }\r\n\r\n    getUserPreference() {\r\n        this.subscription.push(this.configurationService.getUserPreference(this.userId).subscribe((data: UserPreferenceResult[]) => {\r\n            if (data && data.length > 0) {\r\n                this.isUserPreferenceExist = true;\r\n                const dateFormat = data[0].dateFormat;\r\n                const dateFormatItem = this.dateFormatList.find((x) => x.enumEntityValue === dateFormat);\r\n                this.dateFormatSelected = dateFormatItem.enumEntityId;\r\n            }\r\n        }));\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'DateFormatComponent' });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\">\\r\\n    <h2 class=\\\"heading\\\">\\r\\n        Language\\r\\n    </h2>\\r\\n    <div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"end\\\"\\r\\n             fxFlex=\\\"200%\\\">\\r\\n            <mat-form-field fxFlex=\\\"90%\\\"\\r\\n                            class=\\\"content-height\\\">\\r\\n                <mat-select [value]='languageSelected'\\r\\n                            placeholder=\\\"Favourite Language\\\"\\r\\n                            (selectionChange)='onLanguageChanged($event)'>\\r\\n                    <mat-option *ngFor=\\\"let language of languageList\\\"\\r\\n                                [value]=\\\"language.enumEntityId\\\">\\r\\n                        {{ language.enumEntityValue }}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n                <mat-hint>\\r\\n                    Changes the languages of the templates\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n        <button mat-button\\r\\n                (click)=\\\"onDiscardButtonClicked()\\\">\\r\\n            DISCARD\\r\\n        </button>\\r\\n        <button mat-raised-button\\r\\n                [disabled]=\\\"false\\\"\\r\\n                (click)=\\\"onSaveButtonClicked()\\\">\\r\\n            SAVE\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".content-height {\\n  height: 500px; }\\n\\n.heading {\\n  height: 35px; }\\n\"","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthorizationService } from '../../../../../core/services/authorization.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { Language } from '../../../../../shared/entities/language.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { UserPreferenceResult } from '../../../../../shared/entities/user-preference-result.entity';\r\nimport { UserPreferencesSetup } from '../../../../../shared/entities/user-preferences-setup.entity';\r\nimport { UserPreferences } from '../../../../../shared/entities/user-preferences.entity';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { ConfigurationService } from '../../../../../shared/services/http-services/configuration.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'atlas-language',\r\n    templateUrl: './language.component.html',\r\n    styleUrls: ['./language.component.scss'],\r\n})\r\nexport class LanguageComponent extends BaseFormComponent implements OnInit, OnDestroy {\r\n    @Output() readonly discardChanges = new EventEmitter<any>();\r\n    @Output() readonly saveMandatory = new EventEmitter();\r\n    company: string;\r\n    languageList: Language[];\r\n    subscription: Subscription[] = [];\r\n    userPreferencesSetup: UserPreferencesSetup;\r\n    userPreferenceDetails: UserPreferences;\r\n    languageSelected: number;\r\n    isUserPreferencesEditable: boolean;\r\n    userId: number;\r\n    isUserPreferenceExist: boolean = false;\r\n    userPreferenceResult: UserPreferenceResult;\r\n    masterData: MasterData = new MasterData();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        private authorizationService: AuthorizationService,\r\n        protected configurationService: ConfigurationService,\r\n        protected snackbarService: SnackbarService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.userId = this.authorizationService.getCurrentUser().userId;\r\n        this.getUserPreference();\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        this.languageList = this.masterData.languagePreference;\r\n    }\r\n\r\n    onLanguageChanged(data) {\r\n        this.userPreferenceDetails = new UserPreferences();\r\n        this.userPreferencesSetup = new UserPreferencesSetup();\r\n        this.userPreferencesSetup.userId = Number(this.userId);\r\n        this.userPreferencesSetup.favouriteLanguageId = data.value;\r\n        this.userPreferenceDetails.userPreferencesSetup = this.userPreferencesSetup;\r\n    }\r\n\r\n    onSaveButtonClicked() {\r\n        this.saveMandatory.emit();\r\n        this.saveUserPreference();\r\n    }\r\n\r\n    onDiscardButtonClicked() {\r\n        this.discardChanges.emit({ selectedOptionName: 'LanguageComponent' });\r\n    }\r\n\r\n    saveUserPreference() {\r\n        this.subscription.push(this.configurationService.getUserPreference(this.userId).subscribe((data: UserPreferenceResult[]) => {\r\n            if (data && data.length > 0) {\r\n                this.subscription.push(this.configurationService.updateUserPreference\r\n                    (this.userPreferenceDetails).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Favourite language succesfully updated');\r\n                    }));\r\n            } else {\r\n                this.subscription.push(this.configurationService.createUserPreference\r\n                    (this.userPreferenceDetails).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Favourite language succesfully created');\r\n                    }));\r\n            }\r\n        }));\r\n    }\r\n\r\n    getUserPreference() {\r\n        this.subscription.push(this.configurationService.getUserPreference(this.userId).subscribe((data: UserPreferenceResult[]) => {\r\n            if (data && data.length > 0) {\r\n                this.isUserPreferenceExist = true;\r\n                const favouriteLanguage = data[0].favouriteLanguage;\r\n                const languageItem = this.languageList.find((x) => x.enumEntityValue === favouriteLanguage);\r\n                if (languageItem) {\r\n                    this.languageSelected = languageItem.enumEntityId;\r\n                }\r\n\r\n            }\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscription.forEach((subscription) => {\r\n            if (subscription) {\r\n                subscription.unsubscribe();\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"space-between start\\\">\\r\\n\\r\\n        <div fxLayout.xs=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"space-between\\\"\\r\\n             fxLayoutGap=\\\"10px\\\"\\r\\n             fxLayoutGap.sm=\\\"10\\\"\\r\\n             class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onLanguageTabClicked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\"> Language</h2>\\r\\n                </mat-card-title>\\r\\n                <p class=\\\"no-margin\\\">Customize the language of Atlas V2 application</p>\\r\\n            </mat-card>\\r\\n\\r\\n            <mat-card class=\\\"active-card\\\"\\r\\n                      (click)=\\\"onDateFormatTabClicked()\\\">\\r\\n                <img mat-card-image\\r\\n                     src=\\\".\\\\assets\\\\img\\\\GlobalParam_small.jpg\\\">\\r\\n                <mat-card-title>\\r\\n                    <h2 class=\\\"no-margin\\\">Date format</h2>\\r\\n                </mat-card-title>\\r\\n                <p class=\\\"no-margin\\\">Adapt the date format to your needs\\r\\n                </p>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\"\\r\\n     [hidden]=\\\"false\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #languageSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-language #languageComponent\\r\\n                            (saveMandatory)=\\\"languageSideNav.close()\\\"\\r\\n                            (discardChanges)=\\\"onDiscardButtonClicked($event)\\\">\\r\\n            </atlas-language>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\\r\\n\\r\\n<div fxLayout=\\\"column\\\">\\r\\n    <mat-sidenav-container>\\r\\n        <mat-sidenav #dateFormatSideNav\\r\\n                     class=\\\"sidenav\\\"\\r\\n                     mode=\\\"over\\\"\\r\\n                     position=\\\"end\\\"\\r\\n                     disableClose\\r\\n                     [fixedTopGap]=\\\"56\\\"\\r\\n                     [fixedInViewport]=\\\"true\\\">\\r\\n            <atlas-date-format #dateFormatComponent\\r\\n                               (saveMandatory)=\\\"dateFormatSideNav.close()\\\"\\r\\n                               (discardChanges)=\\\"onDiscardButtonClicked($event)\\\">\\r\\n            </atlas-date-format>\\r\\n        </mat-sidenav>\\r\\n    </mat-sidenav-container>\\r\\n</div>\"","module.exports = \".sidenav {\\n  width: 350px;\\n  top: 56px; }\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSidenav } from '@angular/material';\r\nimport { BaseFormComponent } from '../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { FormConfigurationProviderService } from '../../../../shared/services/form-configuration-provider.service';\r\nimport { DateFormatComponent } from './date-format/date-format.component';\r\nimport { LanguageComponent } from './language/language.component';\r\n\r\n@Component({\r\n    selector: 'atlas-user-preferences',\r\n    templateUrl: './user-preferences.component.html',\r\n    styleUrls: ['./user-preferences.component.scss'],\r\n})\r\nexport class UserPreferencesComponent extends BaseFormComponent implements OnInit {\r\n    @ViewChild('languageSideNav') languageSideNav: MatSidenav;\r\n    @ViewChild('dateFormatSideNav') dateFormatSideNav: MatSidenav;\r\n    @ViewChild('languageComponent') languageComponent: LanguageComponent;\r\n    @ViewChild('dateFormatComponent') dateFormatComponent: DateFormatComponent;\r\n    languagePreferenceComponent: string = 'LanguageComponent';\r\n    dateFormatPreferenceComponent: string = 'DateFormatComponent';\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n    ) { super(formConfigurationProvider); }\r\n\r\n    ngOnInit() {\r\n    }\r\n    onLanguageTabClicked() {\r\n        this.languageSideNav.open();\r\n    }\r\n    onDateFormatTabClicked() {\r\n        this.dateFormatSideNav.open();\r\n    }\r\n    onDiscardButtonClicked(value) {\r\n        if (value.selectedOptionName === this.languagePreferenceComponent) {\r\n            this.languageSideNav.close();\r\n        }\r\n        if (value.selectedOptionName === this.dateFormatPreferenceComponent) {\r\n            this.dateFormatSideNav.close();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <h1>Administration Panel</h1>\\r\\n    <div fxLayout=\\\"row wrap\\\"\\r\\n         fxLayoutAlign=\\\"start stretch\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         class=\\\"hub-menu-panel\\\"\\r\\n         [hidden]=\\\"isLoading\\\">\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"navigate('/admin/companies')\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Companies_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\"> Company Configuration</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Manage all your companies and their associated templates</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"navigate('/admin/global-parameters')\\\"\\r\\n                  *ifAuthorized=\\\"'Administration.GlobalParameters',company:this.company\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\GlobalParam_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Global Parameters</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Your Environments, Decimals, Translations and Interface Parameters are waiting for you\\r\\n            </p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"navigate('/admin/profiles')\\\"\\r\\n                  *ifAuthorized=\\\"'Administration.Profiles',company:this.company\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Profiles_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Profiles</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Create and Edit Atlas privileges thanks to the associated profiles</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"navigate('/admin/users')\\\"\\r\\n                  *ifAuthorized=\\\"'Administration.Users',company:this.company\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\Users_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\"> Users</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Help your users accessing functionalities dedicated to their work through user\\r\\n                management</p>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.sm=\\\"row wrap\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign=\\\"space-between stretch\\\"\\r\\n         fxLayoutAlign.sm=\\\"space-around stretch\\\"\\r\\n         fxLayoutAlign.xs=\\\"center center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         fxLayoutGap.sm=\\\"0\\\"\\r\\n         class=\\\"hub-menu-panel\\\"\\r\\n         [hidden]=\\\"isLoading\\\">\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  (click)=\\\"navigate('/admin/operations')\\\">\\r\\n            <img mat-card-image\\r\\n                 src=\\\".\\\\assets\\\\img\\\\GlobalParam_small.jpg\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Operations</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\"> Interfaces\\r\\n            </p>\\r\\n        </mat-card>\\r\\n\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isLoading\\\">\\r\\n        <mat-card>\\r\\n            <h2>Loading</h2>\\r\\n            <div class=\\\"custom-line-title\\\"></div>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 fxLayoutGap=\\\"20px\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SecurityService } from '../../../shared/services/security.service';\r\nimport { TitleService } from '../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atr-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n    company: string;\r\n    isLoading = true;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private titleService: TitleService) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.titleService.setTitle('Admin');\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.isLoading = false;\r\n        });\r\n    }\r\n\r\n    navigate(route: string) {\r\n        this.router.navigate(['/' + this.company + route]);\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\"interfaceBuilderFormGroup\\\">\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <div>\\r\\n            <mat-card class=\\\"flex-item-marge\\\"\\r\\n                      fxFlex=\\\"calc(60% - 16px)\\\"\\r\\n                      fxFlex.lt-md=\\\"80%\\\">\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\"\\r\\n                         class=\\\"top-margin\\\">\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"start\\\"\\r\\n                             fxFlex=\\\"25%\\\">\\r\\n                            <h1>Select an interface</h1>\\r\\n                            <div class=\\\"custom-form\\\"\\r\\n                                 fxLayoutGap=\\\"2%\\\"\\r\\n                                 [class.required-field]=\\\"interfaceCtrl.isRequired\\\"\\r\\n                                 [class.isEmpty]=\\\"!interfaceCtrl.value\\\"\\r\\n                                 fxLayoutAlign=\\\"start\\\">\\r\\n                                <mat-form-field fxFlex=\\\"80%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Interface\\\"\\r\\n                                           [required]=\\\"interfaceCtrl.isRequired\\\"\\r\\n                                           [matAutocomplete]=\\\"interfaceTypes\\\"\\r\\n                                           [formControl]=\\\"interfaceCtrl\\\"\\r\\n                                           autocomplete=\\\"off\\\"\\r\\n                                           [matTooltip]=\\\"'Interface Type'\\\"\\r\\n                                           (change)=\\\"clearFieldValues()\\\">\\r\\n                                    <mat-autocomplete #interfaceTypes=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                                      (optionSelected)=\\\"onInterfaceTypeSelected($event.option.value)\\\"\\r\\n                                                      [displayWith]=\\\"displayInterfaceType.bind(this)\\\">\\r\\n                                        <mat-option *ngFor=\\\"let interfaceType of filteredInterfaceTypes\\\"\\r\\n                                                    [value]=\\\"interfaceType.interfaceTypeId\\\">\\r\\n                                            {{interfaceType.interfaceType}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                    <mat-error *ngIf=\\\"interfaceCtrl.hasError('required')\\\">\\r\\n                                        This field is required\\r\\n                                    </mat-error>\\r\\n                                    <mat-error *ngIf=\\\"interfaceCtrl.hasError('inDropdownList')\\\">\\r\\n                                        Value not in list\\r\\n                                    </mat-error>\\r\\n                                    <mat-hint *ngIf=\\\"interfaceCtrl.isRequired && interfaceCtrl.enabled\\\">\\r\\n                                        Required *\\r\\n                                    </mat-hint>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"start\\\"\\r\\n                             fxFlex=\\\"25%\\\">\\r\\n                            <h1>Select an object type</h1>\\r\\n                            <div class=\\\"custom-form\\\"\\r\\n                                 fxLayoutGap=\\\"2%\\\"\\r\\n                                 [class.required-field]=\\\"objectTypeCtrl.isRequired\\\"\\r\\n                                 [class.isEmpty]=\\\"!objectTypeCtrl.value\\\"\\r\\n                                 fxLayoutAlign=\\\"start\\\">\\r\\n                                <mat-form-field fxFlex=\\\"80%\\\">\\r\\n                                    <input matInput\\r\\n                                           placeholder=\\\"Object Type\\\"\\r\\n                                           [required]=\\\"objectTypeCtrl.isRequired\\\"\\r\\n                                           [matAutocomplete]=\\\"objectType\\\"\\r\\n                                           [formControl]=\\\"objectTypeCtrl\\\"\\r\\n                                           autocomplete=\\\"off\\\"\\r\\n                                           [matTooltip]=\\\"'Object Type'\\\"\\r\\n                                           (change)=\\\"clearFieldValues()\\\">\\r\\n                                    <mat-autocomplete #objectType=\\\"matAutocomplete\\\"\\r\\n                                                      [panelWidth]=\\\"panelSize\\\"\\r\\n                                                      [displayWith]=\\\"displayObjectType.bind(this)\\\">\\r\\n                                        <mat-option *ngFor=\\\"let type of objectTypes\\\"\\r\\n                                                    [value]=\\\"type.interfaceObjectTypeId\\\">\\r\\n                                            {{type.objectType}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-autocomplete>\\r\\n                                    <mat-error *ngIf=\\\"objectTypeCtrl.hasError('required')\\\">\\r\\n                                        This field is required\\r\\n                                    </mat-error>\\r\\n                                    <mat-error *ngIf=\\\"objectTypeCtrl.hasError('inDropdownList')\\\">\\r\\n                                        Value not in list\\r\\n                                    </mat-error>\\r\\n                                    <mat-hint *ngIf=\\\"objectTypeCtrl.isRequired && objectTypeCtrl.enabled\\\">\\r\\n                                        Required *\\r\\n                                    </mat-hint>\\r\\n                                </mat-form-field>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div fxLayout=\\\"column\\\"\\r\\n                             fxLayoutAlign=\\\"start\\\"\\r\\n                             fxFlex=\\\"25%\\\">\\r\\n                            <h1>Select parameters</h1>\\r\\n                            <div fxLayout=\\\"row\\\"\\r\\n                                 fxLayoutGap=\\\"2%\\\">\\r\\n                                <div class=\\\"custom-form\\\"\\r\\n                                     fxFlex=\\\"70%\\\"\\r\\n                                     [class.required-field]=\\\"docIdCtrl.isRequired\\\"\\r\\n                                     fxLayoutAlign=\\\"start\\\">\\r\\n                                    <mat-form-field>\\r\\n                                        <input matInput\\r\\n                                               placeholder=\\\"Document ID\\\"\\r\\n                                               autocomplete=\\\"off\\\"\\r\\n                                               [formControl]=\\\"docIdCtrl\\\"\\r\\n                                               (change)=\\\"clearFieldValues()\\\">\\r\\n                                        <mat-error *ngIf=\\\"docIdCtrl.hasError('required')\\\">\\r\\n                                            This field is required\\r\\n                                        </mat-error>\\r\\n                                        <mat-hint *ngIf=\\\"docIdCtrl.isRequired\\\">\\r\\n                                            Required *\\r\\n                                        </mat-hint>\\r\\n                                    </mat-form-field>\\r\\n                                </div>\\r\\n                                <div class=\\\"custom-form\\\"\\r\\n                                     fxLayoutGap=\\\"2%\\\"\\r\\n                                     [class.required-field]=\\\"companyCtrl.isRequired\\\"\\r\\n                                     [class.isEmpty]=\\\"!companyCtrl.value\\\"\\r\\n                                     fxLayoutAlign=\\\"start\\\">\\r\\n                                    <mat-form-field fxFlex=\\\"80%\\\">\\r\\n                                        <input matInput\\r\\n                                               placeholder=\\\"Company\\\"\\r\\n                                               [required]=\\\"companyCtrl.isRequired\\\"\\r\\n                                               [matAutocomplete]=\\\"company\\\"\\r\\n                                               [formControl]=\\\"companyCtrl\\\"\\r\\n                                               autocomplete=\\\"off\\\"\\r\\n                                               [matTooltip]=\\\"'Company'\\\"\\r\\n                                               (change)=\\\"clearFieldValues()\\\">\\r\\n                                        <mat-autocomplete #company=\\\"matAutocomplete\\\"\\r\\n                                                          [panelWidth]=\\\"panelSize\\\"\\r\\n                                                          [displayWith]=\\\"displayCompany.bind(this)\\\">\\r\\n                                            <mat-option *ngFor=\\\"let company of filteredCompanies\\\"\\r\\n                                                        [value]=\\\"company.id\\\">\\r\\n                                                {{company.companyId}}\\r\\n                                            </mat-option>\\r\\n                                        </mat-autocomplete>\\r\\n                                        <mat-error *ngIf=\\\"companyCtrl.hasError('required')\\\">\\r\\n                                            This field is required\\r\\n                                        </mat-error>\\r\\n                                        <mat-error *ngIf=\\\"companyCtrl.hasError('inDropdownList')\\\">\\r\\n                                            Value not in list\\r\\n                                        </mat-error>\\r\\n                                        <mat-hint *ngIf=\\\"companyCtrl.isRequired && companyCtrl.enabled\\\">\\r\\n                                            Required *\\r\\n                                        </mat-hint>\\r\\n                                    </mat-form-field>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"end center\\\">\\r\\n                        <button mat-raised-button\\r\\n                                (click)=\\\"onGenerateButtonClicked()\\\">\\r\\n                            GENERATE\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n        <div>\\r\\n            <mat-card class=\\\"flex-item-marge\\\"\\r\\n                      fxFlex=\\\"calc(60% - 16px)\\\"\\r\\n                      fxFlex.lt-md=\\\"80%\\\">\\r\\n                <mat-card-content>\\r\\n                    <div fxLayout=\\\"row\\\"\\r\\n                         fxLayoutAlign=\\\"start\\\"\\r\\n                         class=\\\"top-margin\\\">\\r\\n                        <mat-form-field fxFlex=\\\"100%\\\">\\r\\n                            <textarea matInput\\r\\n                                      rows=\\\"10\\\"\\r\\n                                      [formControl]=\\\"messageCtrl\\\"\\r\\n                                      class=\\\"fxDeal-input-fields\\\"></textarea>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { InterfaceObjectTypes } from '../../../../../shared/entities/interface-object-type.entity';\r\nimport { InterfaceTypes } from '../../../../../shared/entities/interface-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { InterfaceObjectType } from '../../../../../shared/enums/interface-object-type.enum';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { InterfaceService } from '../../../../../shared/services/http-services/interface.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { nameof, UtilService } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'atlas-interface-builder-details',\r\n    templateUrl: './interface-builder-details.component.html',\r\n    styleUrls: ['./interface-builder-details.component.scss'],\r\n})\r\n\r\nexport class InterfaceBuilderDetailsComponent extends BaseFormComponent implements OnInit {\r\n    interfaceCtrl = new AtlasFormControl('reportStyleTypes');\r\n    objectTypeCtrl = new AtlasFormControl('objectTypeCtrl');\r\n    docIdCtrl = new AtlasFormControl('docIdCtrl');\r\n    companyCtrl = new AtlasFormControl('companyCtrl');\r\n    messageCtrl = new AtlasFormControl('messageCtrl');\r\n\r\n    filteredInterfaceTypes: InterfaceTypes[];\r\n    filteredInterfaceObjectTypes: InterfaceObjectTypes[];\r\n    filteredCompanies: Company[];\r\n    masterdata: MasterData;\r\n    objectTypes: InterfaceObjectTypes[];\r\n    interfaceBuilderFormGroup: FormGroup;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        protected formBuilder: FormBuilder,\r\n        protected utilService: UtilService,\r\n        protected companyManager: CompanyManagerService,\r\n        private interfaceService: InterfaceService,\r\n        private snackbarService: SnackbarService,\r\n        protected route: ActivatedRoute) {\r\n        super(formConfigurationProvider);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.interfaceBuilderFormGroup = this.formBuilder.group({\r\n            interfaceCtrl: this.interfaceCtrl,\r\n            objectTypeCtrl: this.objectTypeCtrl,\r\n            docIdCtrl: this.docIdCtrl,\r\n            companyCtrl: this.companyCtrl,\r\n        });\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.filteredInterfaceTypes = this.masterdata.interfaceType;\r\n        this.filteredCompanies = this.masterdata.companies;\r\n\r\n        this.interfaceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredInterfaceTypes = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.interfaceType,\r\n                ['interfaceType'],\r\n            );\r\n        });\r\n\r\n        this.companyCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredCompanies = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.companies,\r\n                ['companyId'],\r\n            );\r\n        });\r\n        this.setValidators();\r\n    }\r\n\r\n    bindObjectTypes(interfaceTypeId: number) {\r\n        this.objectTypes = [];\r\n        this.objectTypeCtrl.setValue(null);\r\n        this.objectTypeCtrl.clearValidators();\r\n        this.objectTypeCtrl.updateValueAndValidity();\r\n\r\n        this.filteredInterfaceObjectTypes = this.masterdata.interfaceObjectType;\r\n\r\n        this.interfaceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredInterfaceObjectTypes = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                this.masterdata.interfaceObjectType,\r\n                ['objectType'],\r\n            );\r\n        });\r\n\r\n        if (interfaceTypeId) {\r\n            this.objectTypes =\r\n                this.filteredInterfaceObjectTypes.filter((objectType) => objectType.interfaceTypeId === interfaceTypeId);\r\n        }\r\n\r\n        if (this.objectTypes && this.objectTypes.length >> 0) {\r\n            this.objectTypeCtrl.setValidators(Validators.required);\r\n            this.objectTypeCtrl.setValidators(\r\n                inDropdownListValidator(\r\n                    this.objectTypes,\r\n                    nameof<InterfaceObjectTypes>('interfaceObjectTypeId'),\r\n                ),\r\n            );\r\n        }\r\n    }\r\n\r\n    setValidators() {\r\n        this.interfaceCtrl.setValidators(Validators.required);\r\n        this.interfaceCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.interfaceType,\r\n                nameof<InterfaceTypes>('interfaceTypeId'),\r\n            ),\r\n        );\r\n        this.objectTypeCtrl.setValidators(Validators.required);\r\n        this.docIdCtrl.setValidators(Validators.required);\r\n        this.companyCtrl.setValidators(Validators.required);\r\n        this.companyCtrl.setValidators(\r\n            inDropdownListValidator(\r\n                this.masterdata.companies,\r\n                nameof<Company>('id'),\r\n            ),\r\n        );\r\n    }\r\n\r\n    onInterfaceTypeSelected(event: any) {\r\n        this.bindObjectTypes(event);\r\n    }\r\n\r\n    onGenerateButtonClicked() {\r\n        if (this.interfaceBuilderFormGroup.valid) {\r\n            let isValidDocId: boolean = true;\r\n            if (this.objectTypeCtrl.value === InterfaceObjectType.Accruals) {\r\n                const docRef: string = this.docIdCtrl.value;\r\n                if (!docRef.includes('_')) {\r\n                    isValidDocId = false;\r\n                    this.snackbarService.informationSnackBar('Please Provide Valid Accrual Document ID');\r\n                }\r\n            }\r\n            if (isValidDocId) {\r\n                const companySelected: string = this.masterdata.companies.find((id) => id.id === this.companyCtrl.value).companyId;\r\n                this.interfaceService.checkDocumentIdExists(companySelected, this.docIdCtrl.value, this.objectTypeCtrl.value).subscribe((exists: boolean) => {\r\n                    if (exists) {\r\n                        this.interfaceService.getMessage(this.interfaceCtrl.value, this.objectTypeCtrl.value, this.docIdCtrl.value, companySelected).\r\n                            subscribe((message: string) => {\r\n                                if (message !== null) {\r\n                                    this.messageCtrl.setValue(message);\r\n                                } else {\r\n                                    this.messageCtrl.setValue('CSV/Xml format is Invalid');\r\n                                }\r\n                            });\r\n                    } else {\r\n                        this.snackbarService.informationSnackBar('Document not existing');\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors..');\r\n        }\r\n    }\r\n\r\n    displayInterfaceType(interfaceTypeId: number): string {\r\n        if (interfaceTypeId) {\r\n            const selectedPeriod = this.filteredInterfaceTypes.find(\r\n                (interfaceType) => interfaceType.interfaceTypeId === interfaceTypeId,\r\n            );\r\n\r\n            if (selectedPeriod) {\r\n                return selectedPeriod.interfaceType;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    displayObjectType(objectTypeId: number): string {\r\n        if (objectTypeId) {\r\n            const selectedPeriod = this.objectTypes.find(\r\n                (objectType) => objectType.interfaceObjectTypeId === objectTypeId,\r\n            );\r\n\r\n            if (selectedPeriod) {\r\n                return selectedPeriod.objectType;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    displayCompany(id: number): string {\r\n        if (id) {\r\n            const selectedPeriod = this.filteredCompanies.find(\r\n                (companies) => companies.id === id,\r\n            );\r\n\r\n            if (selectedPeriod) {\r\n                return selectedPeriod.companyId;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    clearFieldValues() {\r\n        this.messageCtrl.reset();\r\n    }\r\n}\r\n","module.exports = \"<button mat-raised-button\\r\\n        class=\\\"button interface-message\\\"\\r\\n        (click)=\\\"onMessageButtonClicked()\\\"\\r\\n        [disabled]=\\\"disabled\\\">\\r\\n    Message\\r\\n</button>\\r\\n\\r\\n\"","module.exports = \".interface-message {\\n  margin: 0;\\n  height: 83%;\\n  font-size: 11px; }\\n\\n.interface-message span.mat-button-wrapper, button.mat-raised-button span {\\n  line-height: 23px !important; }\\n\"","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from 'ag-grid-angular';\r\n\r\n@Component({\r\n    selector: 'atlas-ag-grid-button',\r\n    templateUrl: './ag-grid-button.component.html',\r\n    styleUrls: ['./ag-grid-button.component.scss'],\r\n})\r\nexport class AgGridButtonComponent implements ICellRendererAngularComp {\r\n    disabled: boolean;\r\n    public params: any;\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n        this.disabled = false;\r\n        this.disabled = this.params.disabled;\r\n    }\r\n\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n\r\n    onMessageButtonClicked() {\r\n        if (this.params.data.message) {\r\n            this.params.context.componentParent.methodFromParent(this.params.data.message);\r\n        } else if (this.params.data.error) {\r\n            this.params.context.componentParent.methodFromParent(this.params.data.error);\r\n        }\r\n    }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card>\\r\\n        <mat-card-content>\\r\\n            <h2 class=\\\"atlas-grid-card-title\\\">{{interfaceName}} {{ businessObject }} detail</h2>\\r\\n            <div ag-grid=\\\"interfaceMonitoringDetailsGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height:100%\\\">\\r\\n                <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"interfaceMonitoringDetailsRowData\\\"\\r\\n                                 [gridOptions]=\\\"interfaceMonitoringDetailsGridOptions\\\"\\r\\n                                 [columnDefs]=\\\"interfaceMonitoringDetailsColumnDefs\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 [enableFilter]=\\\"true\\\"\\r\\n                                 [enableColResize]=\\\"false\\\"\\r\\n                                 [headerHeight]=\\\"atlasAgGridParam.headerHeight\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n\\r\\n    <div fxLayout=\\\"column\\\">\\r\\n        <mat-sidenav-container>\\r\\n            <mat-sidenav #sidenav\\r\\n            class=\\\"side-nav-screen side-nav-reassignscreen\\\"\\r\\n            position=\\\"end\\\"\\r\\n            disableClose\\r\\n            mode=\\\"over\\\"\\r\\n            [fixedTopGap]=\\\"56\\\"\\r\\n            [fixedInViewport]=\\\"true\\\"\\r\\n            [(opened)]=\\\"sideNavOpened\\\">\\r\\n           \\r\\n            <div class=\\\"atr-sidenav-margin\\\">\\r\\n                <h1>Error Message</h1>\\r\\n                <p>{{message}}</p>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                        fxLayoutAlign=\\\"space-between center\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                            fxLayoutAlign=\\\"start start\\\">\\r\\n                        <button mat-button\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"onDiscardButtonClick()\\\">\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                            fxLayoutAlign=\\\"start end\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                                fxLayoutAlign=\\\"end start\\\">\\r\\n                            <button mat-raised-button\\r\\n                                    type=\\\"button\\\"\\r\\n                                    (click)=\\\"onSideNavSaveButtonClick()\\\">\\r\\n                                SAVE\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-sidenav>\\r\\n        </mat-sidenav-container>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".atr-sidenav-margin {\\n  margin: 16px; }\\n\\n.side-nav-screen {\\n  width: 50%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { AtlasTranslationService } from '../../../../../core/services/atlas-translation.service';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { InterfaceMonitoringDetails } from '../../../../../shared/entities/interface-monitoring-details.entity';\r\nimport { InterfaceMonitoringSummary } from '../../../../../shared/entities/interface-monitoring-summary.entity';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { AuditService } from '../../../../../shared/services/http-services/audit.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { AgGridButtonComponent } from '../../interface-monitoring/ag-grid-button/ag-grid-button.component';\r\n\r\n@Component({\r\n    selector: 'atlas-interface-monitoring-details',\r\n    templateUrl: './interface-monitoring-details.component.html',\r\n    styleUrls: ['./interface-monitoring-details.component.scss'],\r\n})\r\nexport class InterfaceMonitoringDetailsComponent extends BaseFormComponent implements OnInit {\r\n\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    interfaceMonitoringDetailsColumnDefs: agGrid.ColDef[];\r\n    interfaceMonitoringDetailsGridOptions: agGrid.GridOptions = {};\r\n    interfaceMonitoringDetailsRowData: InterfaceMonitoringDetails[] = [];\r\n    interfaceName: string = '';\r\n    businessObject: string = '';\r\n    sideNavOpened: boolean = false;\r\n    message: string;\r\n    eventId: number;\r\n    company: string;\r\n    gridContext = {\r\n        componentParent: this,\r\n    };\r\n    disableMessageButton: boolean;\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        public gridService: AgGridService,\r\n        protected auditService: AuditService,\r\n        private route: ActivatedRoute,\r\n        protected uiService: UiService,\r\n        private atlasTranslationService: AtlasTranslationService) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.eventId = this.route.snapshot.queryParams['eventId'];\r\n        this.interfaceName = this.route.snapshot.queryParams.interface;\r\n        this.businessObject = this.route.snapshot.queryParams.businessObject;\r\n        this.initializeGridColumns();\r\n        this.getDetailsOfEvent(this.eventId);\r\n        this.disableMessageButton = false;\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = this.interfaceMonitoringDetailsGridOptions.api;\r\n        this.gridColumnApi = this.interfaceMonitoringDetailsGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.interfaceMonitoringDetailsGridOptions);\r\n        this.interfaceMonitoringDetailsGridOptions.columnDefs = this.interfaceMonitoringDetailsColumnDefs;\r\n        this.atlasTranslationService.translateGridOptionsColDefs(this.interfaceMonitoringDetailsGridOptions)\r\n            .subscribe(() => this.gridApi.refreshHeader());\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridService.sizeColumns(params);\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.interfaceMonitoringDetailsGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.interfaceMonitoringDetailsColumnDefs = [\r\n            {\r\n                colId: 'Action',\r\n                field: 'action',\r\n            },\r\n            {\r\n                colId: 'Message',\r\n                field: 'message',\r\n                cellRendererFramework: AgGridButtonComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                colId: 'Result Code',\r\n                field: 'resultCode',\r\n            },\r\n            {\r\n                colId: 'Result Message',\r\n                field: 'resultMessage',\r\n            },\r\n            {\r\n                colId: 'Created Date Time',\r\n                field: 'createdDateTime',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getDetailsOfEvent(eventId: number) {\r\n        const getDetailsSubscription = this.auditService.getEventDetails(eventId, this.company).\r\n            subscribe((data) => {\r\n                if (data) {\r\n                    this.interfaceMonitoringDetailsRowData = data.value;\r\n                }\r\n            });\r\n        this.subscriptions.push(getDetailsSubscription);\r\n    }\r\n\r\n    methodFromParent(message: string) {\r\n        this.sideNavOpened = true;\r\n        this.message = message;\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        this.sideNavOpened = false;\r\n    }\r\n\r\n    onSideNavSaveButtonClick() {\r\n        this.sideNavOpened = false;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxLayoutAlign=\\\"start none\\\">\\r\\n    <mat-card-content>            \\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxFlex=\\\"25%\\\">\\r\\n                <atlas-dropdown-select fxFlex=\\\"40%\\\"\\r\\n                                       [isEditable]=\\\"interfaceCtrl.enabled\\\"\\r\\n                                       label=\\\"Interface\\\"\\r\\n                                       [fieldControl]=\\\"interfaceCtrl\\\"\\r\\n                                       [options]=\\\"filteredInterfaceTypeList\\\"\\r\\n                                       displayProperty=\\\"interfaceType\\\"\\r\\n                                       [selectProperties]=\\\"['interfaceType']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxFlex=\\\"25%\\\">\\r\\n                <atlas-dropdown-select fxFlex=\\\"40%\\\"\\r\\n                                       [isEditable]=\\\"statusCtrl.enabled\\\"\\r\\n                                       label=\\\"Status\\\"\\r\\n                                       [fieldControl]=\\\"statusCtrl\\\"\\r\\n                                       [options]=\\\"filteredInterfaceStatusList\\\"\\r\\n                                       displayProperty=\\\"status\\\"\\r\\n                                       [selectProperties]=\\\"['status']\\\"\\r\\n                                       isAutocompleteActivated=\\\"true\\\">\\r\\n                </atlas-dropdown-select>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"start\\\"\\r\\n             fxLayoutGap=\\\"16px\\\">\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxLayoutGap=\\\"25%\\\">\\r\\n\\r\\n                <atlas-date-picker fxFlex=\\\"40%\\\"\\r\\n                                   [errorMap]=\\\"fromDateErrorMap\\\"\\r\\n                                   label=\\\"Date From (Status date)\\\"\\r\\n                                   [fieldControl]=\\\"fromDateCtrl\\\"\\r\\n                                   [isEditable]=\\\"fromDateCtrl.enabled\\\"\\r\\n                                   (dateChanged)=\\\"onDateSelectionChanged()\\\">\\r\\n                </atlas-date-picker>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxLayoutGap=\\\"25%\\\">\\r\\n\\r\\n                <atlas-date-picker fxFlex=\\\"40%\\\"\\r\\n                                   [errorMap]=\\\"toDateErrorMap\\\"\\r\\n                                   label=\\\"Date To (Status date)\\\"\\r\\n                                   [fieldControl]=\\\"toDateCtrl\\\"\\r\\n                                   [isEditable]=\\\"toDateCtrl.enabled\\\"\\r\\n                                   (dateChanged)=\\\"onDateSelectionChanged()\\\">\\r\\n                </atlas-date-picker>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"column\\\"\\r\\n                 fxLayoutAlign=\\\"start\\\"\\r\\n                 fxLayoutGap=\\\"25%\\\">\\r\\n                <mat-form-field>\\r\\n                    <input fxFlex=\\\"40%\\\"\\r\\n                           matInput\\r\\n                           placeholder=\\\"Business ID\\\"\\r\\n                           autocomplete=\\\"off\\\"\\r\\n                           [formControl]='businessIdCtrl'>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <button mat-raised-button                    \\r\\n                    class=\\\"heroGradient\\\"                    \\r\\n                    (click)=\\\"onSearchButtonClick()\\\">\\r\\n                <mat-icon aria-label=\\\"Search\\\"\\r\\n                          class=\\\"search-icon\\\">search</mat-icon>\\r\\n            </button>\\r\\n        </div>            \\r\\n    </mat-card-content>\\r\\n    <mat-card-subtitle class=\\\"mat-toggle\\\"> Interface Status\\r\\n        <mat-slide-toggle [formControl]=\\\"interfaceStatusCtrl\\\">\\r\\n        </mat-slide-toggle>\\r\\n    </mat-card-subtitle>\\r\\n    <mat-card>\\r\\n        <div ag-grid=\\\"interfaceMonitoringSummaryGridOptions\\\"\\r\\n             class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n             style=\\\"width: 100%; height:100%\\\">\\r\\n            <ag-grid-angular style=\\\" height:100%;\\\"\\r\\n                             class=\\\"ag-theme-material\\\"\\r\\n                             [rowData]=\\\"interfaceMonitoringSummaryRowData\\\"\\r\\n                             [gridOptions]=\\\"interfaceMonitoringSummaryGridOptions\\\"\\r\\n                             [columnDefs]=\\\"interfaceMonitoringSummaryColumnDefs\\\"\\r\\n                             domLayout=\\\"autoHeight\\\"\\r\\n                             [pagination]=\\\"true\\\"\\r\\n                             (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                             [paginationPageSize]=\\\"10\\\"\\r\\n                             [enableSorting]=\\\"true\\\"\\r\\n                             [enableFilter]=\\\"true\\\"\\r\\n                             [enableColResize]=\\\"false\\\"\\r\\n                             [headerHeight]=\\\"atlasAgGridParam.headerHeight\\\"\\r\\n                             [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n            </ag-grid-angular>\\r\\n        </div>\\r\\n    </mat-card>\\r\\n\\r\\n    <div fxLayout=\\\"column\\\">\\r\\n        <mat-sidenav-container>\\r\\n            <mat-sidenav #sidenav\\r\\n            class=\\\"side-nav-screen side-nav-reassignscreen\\\"\\r\\n            position=\\\"end\\\"\\r\\n            disableClose\\r\\n            mode=\\\"over\\\"\\r\\n            [fixedTopGap]=\\\"56\\\"\\r\\n            [fixedInViewport]=\\\"true\\\"\\r\\n            [(opened)]=\\\"sideNavOpened\\\">\\r\\n           \\r\\n            <div class=\\\"atr-sidenav-margin\\\">\\r\\n                <h1>Error Message</h1>\\r\\n                <p>{{message}}</p>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                        fxLayoutAlign=\\\"space-between center\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                            fxLayoutAlign=\\\"start start\\\">\\r\\n                        <button mat-button\\r\\n                                type=\\\"button\\\"\\r\\n                                (click)=\\\"onDiscardButtonClick()\\\">\\r\\n                            DISCARD\\r\\n                        </button>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                            fxLayoutAlign=\\\"start end\\\">\\r\\n                        <div fxLayout=\\\"row\\\"\\r\\n                                fxLayoutAlign=\\\"end start\\\">\\r\\n                            <button mat-raised-button\\r\\n                                    type=\\\"button\\\"\\r\\n                                    (click)=\\\"onSideNavSaveButtonClick()\\\">\\r\\n                                SAVE\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </mat-sidenav>\\r\\n        </mat-sidenav-container>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".atr-sidenav-margin {\\n  margin: 16px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators} from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport * as _moment from 'moment';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { AtlasTranslationService } from '../../../../../core/services/atlas-translation.service';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { BaseFormComponent } from '../../../../../shared/components/base-form-component/base-form-component.component';\r\nimport { AgContextualMenuAction } from '../../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { AtlasFormControl } from '../../../../../shared/entities/atlas-form-control';\r\nimport { InterfaceMonitoringSummary } from '../../../../../shared/entities/interface-monitoring-summary.entity';\r\nimport { InterfaceTypes } from '../../../../../shared/entities/interface-type.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { TransactionDetail } from '../../../../../shared/entities/transaction-detail.entity';\r\nimport { InterfaceStatus } from '../../../../../shared/enums/interface-status.enum';\r\nimport { InterfaceType } from '../../../../../shared/enums/interface-type.enum';\r\nimport { AgGridService } from '../../../../../shared/services/ag-grid.service';\r\nimport { ApiCollection } from '../../../../../shared/services/common/models';\r\nimport { CashRecord } from '../../../../../shared/services/execution/dtos/cash-record';\r\nimport { FormConfigurationProviderService } from '../../../../../shared/services/form-configuration-provider.service';\r\nimport { AccountingInterfaceService } from '../../../../../shared/services/http-services/accounting-interface.service';\r\nimport { AuditService } from '../../../../../shared/services/http-services/audit.service';\r\nimport { PaymentRequestInterfaceService } from '../../../../../shared/services/http-services/payment-request-interface.service';\r\nimport { PaymentRequestInterfaceError } from '../../../../../shared/services/Interface/dto/payment-request-interface-error';\r\nimport { UpdateInterfaceError } from '../../../../../shared/services/Interface/dto/update-interface-error';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { UtilService } from '../../../../../shared/services/util.service';\r\nimport { AgGridButtonComponent } from '../../interface-monitoring/ag-grid-button/ag-grid-button.component';\r\nimport { dateTwoBeforeDateOne } from '../../../../../shared/validators/date-validators.validator';\r\n\r\nconst moment = _moment;\r\n@Component({\r\n    selector: 'atlas-interface-monitoring-summary',\r\n    templateUrl: './interface-monitoring-summary.component.html',\r\n    styleUrls: ['./interface-monitoring-summary.component.scss'],\r\n})\r\nexport class InterfaceMonitoringSummaryComponent extends BaseFormComponent implements OnInit {\r\n    interfaceCtrl = new AtlasFormControl('Interface');\r\n    fromDateCtrl = new AtlasFormControl('DateFrom');\r\n    toDateCtrl = new AtlasFormControl('DateTo');\r\n    businessIdCtrl = new AtlasFormControl('BusinessId');\r\n    interfaceStatusCtrl = new AtlasFormControl('InterfaceStatus');\r\n    statusCtrl = new AtlasFormControl('Status');\r\n    interfaceMonitoringGridContextualMenuActions: AgContextualMenuAction[];\r\n    masterData: MasterData;\r\n    filteredInterfaceTypeList: InterfaceTypes[];\r\n    filteredInterfaceStatusList: InterfaceStatus[];\r\n    interfaceMonitoringSummaryColumnDefs: agGrid.ColDef[];\r\n    interfaceMonitoringSummaryGridOptions: agGrid.GridOptions = {};\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    interfaceMonitoringMenuActions: { [key: string]: string } = {\r\n        resend: 'resend',\r\n        detail: 'detail',\r\n    };\r\n    interfaceMonitoringSummarySetUpData: InterfaceMonitoringSummary[] = [];\r\n    interfaceMonitoringSummaryRowData: InterfaceMonitoringSummary[] = [];\r\n    filteredInterfaceMontitoringSummaryData: InterfaceMonitoringSummary[] = [];\r\n    company: string;\r\n    isLoading: boolean;\r\n    sideNavOpened: boolean = false;\r\n    message: string;\r\n    disableMessageButton: boolean;\r\n    fromDateErrorMap: Map<string, string> = new Map();\r\n    toDateErrorMap: Map<string, string> = new Map();\r\n\r\n    constructor(protected formConfigurationProvider: FormConfigurationProviderService,\r\n        private route: ActivatedRoute,\r\n        protected utilService: UtilService,\r\n        protected auditService: AuditService,\r\n        public gridService: AgGridService,\r\n        protected formBuilder: FormBuilder,\r\n        private atlasTranslationService: AtlasTranslationService,\r\n        protected uiService: UiService,\r\n        protected companyManager: CompanyManagerService,\r\n        private snackbarService: SnackbarService,\r\n        private accountingInterfaceService: AccountingInterfaceService,\r\n        private paymentRequestInterfaceService: PaymentRequestInterfaceService,\r\n        protected router: Router) {\r\n        super(formConfigurationProvider);\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.toDateErrorMap\r\n            .set('isDateBeforeValid', 'Cannot be before From date');\r\n        this.fromDateErrorMap\r\n            .set('isDateBeforeValid', 'Cannot be after To date');\r\n    }\r\n\r\n    gridContext = {\r\n        componentParent: this,\r\n    };\r\n\r\n    ngOnInit() {\r\n        this.masterData = this.route.snapshot.data.masterdata;\r\n        const currentDate = moment(this.companyManager.getCurrentCompanyDate());\r\n        this.fromDateCtrl.setValue(currentDate);\r\n        this.toDateCtrl.setValue(currentDate);\r\n        this.filteredInterfaceType();\r\n        this.filteredInterfaceStatus();\r\n        this.init();\r\n        this.initializeGridColumns();\r\n        this.loadData();\r\n        this.setValidators();\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        this.disableMessageButton = false;\r\n    }\r\n\r\n    init() {\r\n        this.interfaceMonitoringGridContextualMenuActions = [\r\n            {\r\n                icon: 'delete',\r\n                text: 'Details',\r\n                action: this.interfaceMonitoringMenuActions.detail,\r\n            },\r\n            {\r\n                icon: 'file_copy',\r\n                text: 'Resend',\r\n                action: this.interfaceMonitoringMenuActions.resend,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, model: InterfaceMonitoringSummary) {\r\n        switch (action) {\r\n            case this.interfaceMonitoringMenuActions.detail:\r\n                this.navigateToDetailsPage(model);\r\n                break;\r\n            case this.interfaceMonitoringMenuActions.resend:\r\n                this.resendInterfaceMessage(model);\r\n                break;\r\n            default: this.assertUnreachable(action);\r\n        }\r\n    }\r\n\r\n    assertUnreachable(x): never {\r\n        throw new Error('Unknown action');\r\n    }\r\n\r\n    navigateToDetailsPage(model: InterfaceMonitoringSummary) {\r\n        this.router.navigate(['/' + this.company + '/admin/operations/interface-monitoring/details'],\r\n                             {\r\n                queryParams: {\r\n                    eventId: model.eventId,\r\n                    interface: model.interface,\r\n                    businessObject: model.businessObject,\r\n                },\r\n                skipLocationChange: true,\r\n            });\r\n    }\r\n\r\n    getFormGroup() {\r\n        this.formGroup = this.formBuilder.group({\r\n            interfaceCtrl: this.interfaceCtrl,\r\n            statusCtrl: this.statusCtrl,\r\n            fromDateCtrl: this.fromDateCtrl,\r\n            toDateCtrl: this.toDateCtrl,\r\n            businessIdCtrl: this.businessIdCtrl,\r\n            interfaceStatusCtrl: this.interfaceStatusCtrl,\r\n        });\r\n        this.setValidators();\r\n        return super.getFormGroup();\r\n    }\r\n\r\n    filteredInterfaceType() {\r\n        let interfaceTypeList: InterfaceTypes[] = [];\r\n        this.filteredInterfaceTypeList = this.masterData.interfaceType;\r\n        interfaceTypeList = this.filteredInterfaceTypeList;\r\n        this.interfaceCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredInterfaceTypeList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                interfaceTypeList,\r\n                ['interfaceType', 'interfaceTypeId'],\r\n            );\r\n        });\r\n    }\r\n\r\n    filteredInterfaceStatus() {\r\n        let interfaceStatusList: InterfaceStatus[] = [];\r\n        this.filteredInterfaceStatusList = this.masterData.interfaceStatus;\r\n        interfaceStatusList = this.filteredInterfaceStatusList;\r\n        this.statusCtrl.valueChanges.subscribe((input) => {\r\n            this.filteredInterfaceStatusList = this.utilService.filterListforAutocomplete(\r\n                input,\r\n                interfaceStatusList,\r\n                ['status', 'interfaceStatusId'],\r\n            );\r\n        });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = this.interfaceMonitoringSummaryGridOptions.api;\r\n        this.gridColumnApi = this.interfaceMonitoringSummaryGridOptions.columnApi;\r\n        this.gridService.sizeColumns(this.interfaceMonitoringSummaryGridOptions);\r\n        this.interfaceMonitoringSummaryGridOptions.columnDefs = this.interfaceMonitoringSummaryColumnDefs;\r\n        this.atlasTranslationService.translateGridOptionsColDefs(this.interfaceMonitoringSummaryGridOptions)\r\n            .subscribe(() => this.gridApi.refreshHeader());\r\n    }\r\n\r\n    onGridSizeChanged(params) {\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridService.sizeColumns(params);\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.interfaceMonitoringSummaryGridOptions = {\r\n            context: this.gridContext,\r\n        };\r\n        this.interfaceMonitoringSummaryColumnDefs = [\r\n            {\r\n                colId: 'Interface',\r\n                field: 'interface',\r\n\r\n            },\r\n            {\r\n                colId: 'Company',\r\n                field: 'companyId',\r\n\r\n            },\r\n            {\r\n                colId: 'Business Id',\r\n                field: 'documentReference',\r\n\r\n            },\r\n            {\r\n                colId: 'Business Object',\r\n                field: 'businessObject',\r\n\r\n            },\r\n            {\r\n                colId: 'Status',\r\n                field: 'status',\r\n\r\n            },\r\n            {\r\n                colId: 'Status Date',\r\n                field: 'statusDateTime',\r\n                valueFormatter: this.uiService.dateFormatter,\r\n\r\n            },\r\n            {\r\n                colId: 'Error',\r\n                field: 'error',\r\n                cellRendererFramework: AgGridButtonComponent,\r\n                cellRendererParams: (params) => {\r\n                    context: {\r\n                        componentParent: this;\r\n                    }\r\n                    if ((params.data.status.indexOf('Transmit') !== -1) || (params.data.status === InterfaceStatus.Rejected)\r\n                    || ((params.data.status === InterfaceStatus.Error) && (params.data.status === InterfaceStatus.NotPosted))) {\r\n                        return {\r\n                            disabled: this.disableMessageButton,\r\n                        };\r\n                    }\r\n                },\r\n\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    menuActions: this.interfaceMonitoringGridContextualMenuActions,\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n    loadData() {\r\n        this.auditService.getEvents().subscribe((data: ApiCollection<InterfaceMonitoringSummary>) => {\r\n            if (data) {\r\n                this.interfaceMonitoringSummaryRowData = data.value;\r\n            }\r\n        });\r\n    }\r\n\r\n    methodFromParent(message: string) {\r\n        this.sideNavOpened = true;\r\n        this.message = message;\r\n    }\r\n\r\n    onDiscardButtonClick() {\r\n        this.sideNavOpened = false;\r\n    }\r\n\r\n    onSideNavSaveButtonClick() {\r\n        this.sideNavOpened = false;\r\n    }\r\n    setValidators() {\r\n    if (this.toDateCtrl.value || this.fromDateCtrl.value) {\r\n        this.toDateCtrl.setValidators(Validators.compose(\r\n            [dateTwoBeforeDateOne(this.fromDateCtrl.value, this.toDateCtrl.value, true)]));\r\n        this.fromDateCtrl.setValidators(Validators.compose(\r\n            [dateTwoBeforeDateOne(this.fromDateCtrl.value, this.toDateCtrl.value, true)]));\r\n        }\r\n    }\r\n\r\n    onDateSelectionChanged() {\r\n        this.fromDateCtrl.clearValidators();\r\n        this.toDateCtrl.clearValidators();\r\n        this.setValidators();\r\n    }\r\n\r\n    onSearchButtonClick() {\r\n        this.interfaceMonitoringSummaryRowData = [];\r\n        const selectedInterfaceType = (this.interfaceCtrl.value) ? (this.interfaceCtrl.value.interfaceTypeId)\r\n        : this.interfaceCtrl.value ;\r\n        const selectedInterfaceStatus = (this.statusCtrl.value) ? (this.statusCtrl.value.interfaceStatusId)\r\n            : this.statusCtrl.value;\r\n        this.auditService.getSearchEvents(selectedInterfaceType, selectedInterfaceStatus,\r\n                                          this.fromDateCtrl.value, this.toDateCtrl.value, this.businessIdCtrl.value)\r\n                                          .pipe(\r\n                                            finalize(() => {\r\n                                                this.isLoading = false;\r\n                                            })).\r\n                    subscribe((data: ApiCollection<InterfaceMonitoringSummary>) => {\r\n                    if (data) {\r\n                        this.initializeGridColumns();\r\n                        this.filteredInterfaceMontitoringSummaryData = data.value;\r\n                        this.interfaceMonitoringSummaryRowData = this.filteredInterfaceMontitoringSummaryData;\r\n                    }\r\n                });\r\n            }\r\n\r\n    resendInterfaceMessage(model: InterfaceMonitoringSummary) {\r\n        if (model) {\r\n            if (model.interface === InterfaceType[InterfaceType.AccountingInterface]) {\r\n                this.auditService.getTransactionDoumentDetailsByAccountingId(model.sourceId, model.companyId).subscribe(\r\n                    (data: TransactionDetail) => {\r\n                    if (data) {\r\n                        const updateInterfaceError: UpdateInterfaceError[] = [];\r\n                        const interfaceData: UpdateInterfaceError = new UpdateInterfaceError();\r\n                        interfaceData.documentReference = model.documentReference;\r\n                        interfaceData.accountingId = model.sourceId;\r\n                        interfaceData.transactionDocumentId = data.transactionDocumentId;\r\n                        interfaceData.transactionDocumentTypeId = data.transactionDocumentTypeId;\r\n                        updateInterfaceError.push(interfaceData);\r\n\r\n                        this.accountingInterfaceService.updateAccountingErrorStatus(updateInterfaceError,\r\n                                                                                    InterfaceStatus[InterfaceStatus.InterfaceReady])\r\n                        .subscribe((result) => {\r\n                            if (result) {\r\n                                this.snackbarService.informationSnackBar('Document successfully sent to accounting interface');\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            } else if (model.interface === InterfaceType[InterfaceType.PaymentRequestInterface]) {\r\n                this.auditService.getCashDetailsByCashId(model.sourceId, model.companyId).subscribe(\r\n                    (data: CashRecord) => {\r\n                    if (data) {\r\n                        const interfaceData: PaymentRequestInterfaceError = new PaymentRequestInterfaceError();\r\n                        interfaceData.documentReference = model.documentReference;\r\n                        interfaceData.cashId = model.sourceId;\r\n                        interfaceData.transactionDocumentId = data.transactionDocumentId;\r\n\r\n                        this.paymentRequestInterfaceService.updatePaymentRequestErrorStatus(interfaceData,\r\n                                                                                            InterfaceStatus[InterfaceStatus.InterfaceReady])\r\n                        .subscribe((result) => {\r\n                            if (result) {\r\n                                this.snackbarService.informationSnackBar('Document successfully sent to accounting interface');\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"main-container hub-menu\\\">\\r\\n    <h1>Interfaces</h1>\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayout.xs=\\\"column\\\"\\r\\n         fxLayoutAlign.xs=\\\"center center\\\"\\r\\n         fxLayoutGap=\\\"16px\\\"\\r\\n         fxLayoutGap.sm=\\\"0\\\"\\r\\n         class=\\\"hub-menu-panel\\\">\\r\\n\\r\\n        <mat-card class=\\\"active-card\\\"\\r\\n                  *ifAuthorized=\\\"'Administration.Operations.InterfaceMonitoring',company:this.company\\\"\\r\\n                  (click)=\\\"onNavigateButtonClicked('/admin/operations/interface-monitoring')\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Interface Monitoring</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Interface Monitoring</p>\\r\\n        </mat-card>\\r\\n\\r\\n        <mat-card (click)=\\\"onNavigateButtonClicked('/admin/operations/interface-builder/details')\\\"\\r\\n                  class=\\\"active-card\\\"\\r\\n                  *ifAuthorized=\\\"'Administration.Operations.InterfaceBuilder',company:this.company\\\">\\r\\n            <mat-card-title>\\r\\n                <h2 class=\\\"no-margin\\\">Interface Builder</h2>\\r\\n            </mat-card-title>\\r\\n            <p class=\\\"no-margin\\\">Interface Builder</p>\\r\\n        </mat-card>\\r\\n\\r\\n    </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'atlas-operations',\r\n    templateUrl: './operations.component.html',\r\n    styleUrls: ['./operations.component.scss']\r\n})\r\nexport class OperationsComponent implements OnInit {\r\n    company: string;\r\n    constructor(private router: Router,\r\n        private route: ActivatedRoute, ) { }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n    }\r\n\r\n    onNavigateButtonClicked(route: string) {\r\n        this.router.navigate(['/' + this.company + route]);\r\n    }\r\n}\r\n","module.exports = \"<mat-divider></mat-divider>\\r\\n<div class=\\\"privileges-section\\\">\\r\\n    <h2>\\r\\n        <mat-icon class=\\\"title-icon\\\">swap_horiz</mat-icon>{{privilege.privilege.description}}\\r\\n    </h2>\\r\\n    <div class=\\\"privileges-table\\\">\\r\\n        <div class=\\\"privilege-level level-two-header\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <div fxFlex=\\\"50%\\\"\\r\\n                 fxFlex.xs=\\\"50%\\\"\\r\\n                 fxFlex.sm=\\\"50%\\\">\\r\\n                <div>{{privilege.privilege.displayName}}</div>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 fxFlex.xs=\\\"25%\\\"\\r\\n                 fxFlex.sm=\\\"25%\\\">\\r\\n                <mat-checkbox [checked]=\\\"isSelected(privilege,PermissionLevels.Read)\\\"\\r\\n                              (change)=\\\"privilegePermissionChange(privilege, PermissionLevels.Read)\\\"></mat-checkbox>\\r\\n                Read\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 fxFlex.xs=\\\"25%\\\"\\r\\n                 fxFlex.sm=\\\"25%\\\">\\r\\n                <mat-checkbox [checked]=\\\"isSelected(privilege,PermissionLevels.ReadWrite)\\\"\\r\\n                              (change)=\\\"privilegePermissionChange(privilege, PermissionLevels.ReadWrite)\\\">\\r\\n                </mat-checkbox>\\r\\n                ReadWrite\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"privilege-level level-three-header\\\"\\r\\n             *ngIf=\\\"privilege.children.length > 0\\\"\\r\\n             fxLayout=\\\"row\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\"\\r\\n             fxLayoutGap=\\\"10px\\\">\\r\\n            <div fxFlex=\\\"50%\\\"\\r\\n                 fxFlex.xs=\\\"50%\\\"\\r\\n                 fxFlex.sm=\\\"50%\\\">\\r\\n                {{PrivilegeTypes[0]}}\\r\\n            </div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 fxFlex.xs=\\\"25%\\\"\\r\\n                 fxFlex.sm=\\\"25%\\\"></div>\\r\\n            <div fxFlex=\\\"25%\\\"\\r\\n                 fxFlex.xs=\\\"25%\\\"\\r\\n                 fxFlex.sm=\\\"25%\\\">\\r\\n                <mat-checkbox [checked]=\\\"allActionsHaveWrite\\\"\\r\\n                              (change)=\\\"selectAllActions()\\\"></mat-checkbox>\\r\\n                Authorized\\r\\n            </div>\\r\\n        </div>\\r\\n        <div *ngFor=\\\"let action of actionPrivileges\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 class=\\\"privilege-level\\\"\\r\\n                 fxLayoutAlign=\\\"none center\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"50%\\\"\\r\\n                     fxFlex.xs=\\\"50%\\\"\\r\\n                     fxFlex.sm=\\\"50%\\\">\\r\\n                    <div>{{action.privilege.displayName}}</div>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"25%\\\"\\r\\n                     fxFlex.xs=\\\"25%\\\"\\r\\n                     fxFlex.sm=\\\"25%\\\"></div>\\r\\n                <div fxFlex=\\\"25%\\\"\\r\\n                     fxFlex.xs=\\\"25%\\\"\\r\\n                     fxFlex.sm=\\\"25%\\\">\\r\\n                    <mat-checkbox [checked]=\\\"isSelected(action,PermissionLevels.ReadWrite)\\\"\\r\\n                                  (change)=\\\"privilegePermissionChange(action,PermissionLevels.ReadWrite)\\\">\\r\\n                    </mat-checkbox>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"privilege-level level-three-header\\\"\\r\\n             *ngIf=\\\"exceptionPrivileges.length > 0\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"none center\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"50%\\\"\\r\\n                     fxFlex.xs=\\\"50%\\\"\\r\\n                     fxFlex.sm=\\\"50%\\\">\\r\\n                    {{PrivilegeTypes[1]}}\\r\\n                </div>\\r\\n                <div fxFlex=\\\"25%\\\"\\r\\n                     fxFlex.xs=\\\"25%\\\"\\r\\n                     fxFlex.sm=\\\"25%\\\">\\r\\n                    <mat-checkbox [checked]=\\\"allExceptionsHaveRead\\\"\\r\\n                                  (change)=\\\"selectAllExceptions(PermissionLevels.Read)\\\"></mat-checkbox>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"25%\\\"\\r\\n                     fxFlex.xs=\\\"25%\\\"\\r\\n                     fxFlex.sm=\\\"25%\\\">\\r\\n                    <mat-checkbox [checked]=\\\"allExceptionsHaveWrite\\\"\\r\\n                                  (change)=\\\"selectAllExceptions(PermissionLevels.ReadWrite)\\\"></mat-checkbox>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div *ngFor=\\\"let exception of exceptionPrivileges\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 class=\\\"privilege-level\\\"\\r\\n                 fxLayoutAlign=\\\"none center\\\"\\r\\n                 fxLayoutGap=\\\"10px\\\">\\r\\n                <div fxFlex=\\\"50%\\\"\\r\\n                     fxFlex.xs=\\\"50%\\\"\\r\\n                     fxFlex.sm=\\\"50%\\\">\\r\\n                    <div>{{exception.privilege.displayName}}</div>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"25%\\\"\\r\\n                     fxFlex.xs=\\\"25%\\\"\\r\\n                     fxFlex.sm=\\\"25%\\\">\\r\\n                    <mat-checkbox [checked]=\\\"isSelected(exception,PermissionLevels.Read)\\\"\\r\\n                                  (change)=\\\"privilegePermissionChange(exception,PermissionLevels.Read)\\\"></mat-checkbox>\\r\\n                </div>\\r\\n                <div fxFlex=\\\"25%\\\"\\r\\n                     fxFlex.xs=\\\"25%\\\"\\r\\n                     fxFlex.sm=\\\"25%\\\">\\r\\n                    <mat-checkbox [checked]=\\\"isSelected(exception,PermissionLevels.ReadWrite)\\\"\\r\\n                                  (change)=\\\"privilegePermissionChange(exception,PermissionLevels.ReadWrite)\\\">\\r\\n                    </mat-checkbox>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".privilege-level {\\n  height: 40px;\\n  line-height: 40px;\\n  padding-left: 2%; }\\n  .privilege-level.level-two-header {\\n    border-bottom: solid 3px #185b9d; }\\n  .privilege-level.level-three-header {\\n    border-bottom: solid 3px #52C234; }\\n  .privileges-section {\\n  margin-bottom: 16px;\\n  padding-top: 16px; }\\n  .privileges-table {\\n  margin: auto;\\n  width: 50%;\\n  max-width: 559px;\\n  box-shadow: 0 2px 1px -1px rgba(0, 0, 0, 0.12), 0 1px 1px 0 rgba(0, 0, 0, 0.14), 0 1px 3px 0 rgba(0, 0, 0, 0.2); }\\n  @media screen and (max-width: 1023px) {\\n  .privileges-table {\\n    margin: auto;\\n    width: 100%; } }\\n  .title-icon {\\n  vertical-align: sub; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { PrivilegeNode } from '../../../../shared/entities/privilege-node.entity';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { PrivilegeTypes } from '../../../../shared/enums/privilege-type.enum';\r\n\r\n@Component({\r\n    selector: 'atr-privilege-tree',\r\n    templateUrl: './privilege-tree.component.html',\r\n    styleUrls: ['./privilege-tree.component.scss'],\r\n})\r\nexport class PrivilegeTreeComponent implements OnInit {\r\n    PrivilegeTypes = PrivilegeTypes;\r\n    PermissionLevels = PermissionLevels;\r\n\r\n    @Input() form: FormGroup = null;\r\n    @Input() privilege: PrivilegeNode = null; // level 2 privilege with its children\r\n\r\n    actionPrivileges: PrivilegeNode[] = [];\r\n    exceptionPrivileges: PrivilegeNode[] = [];\r\n\r\n    allActionsHaveWrite: boolean = false;\r\n    allExceptionsHaveRead: boolean = false;\r\n    allExceptionsHaveWrite: boolean = false;\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        this.privilege.children.forEach((priv) => {\r\n            if (priv.privilege.type === PrivilegeTypes.Action) {\r\n                this.actionPrivileges.push(priv);\r\n            }\r\n            if (priv.privilege.type === PrivilegeTypes.Exception) {\r\n                this.exceptionPrivileges.push(priv);\r\n            }\r\n        });\r\n        this.doAllActionsHaveWrite();\r\n    }\r\n\r\n    isSelected(privilege: PrivilegeNode, permission: PermissionLevels) {\r\n        return (privilege.getPermission() === permission);\r\n    }\r\n\r\n    privilegePermissionChange(privilege: PrivilegeNode, permission: PermissionLevels) {\r\n        if (privilege.privilege.type === PrivilegeTypes.Exception && permission === PermissionLevels.Read\r\n            && this.allExceptionsHaveWrite) {\r\n            this.allExceptionsHaveWrite = false;\r\n        }\r\n        if (privilege.privilege.type === PrivilegeTypes.Exception && permission === PermissionLevels.ReadWrite\r\n            && this.allExceptionsHaveRead) {\r\n            this.allExceptionsHaveRead = false;\r\n        }\r\n\r\n        const oldPermission = privilege.getPermission();\r\n        privilege.privilege.permission = (oldPermission === permission) ? PermissionLevels.None : permission;\r\n        this.doAllActionsHaveWrite();\r\n    }\r\n\r\n    selectAllActions() {\r\n        this.allActionsHaveWrite = !this.allActionsHaveWrite;\r\n        if (this.allActionsHaveWrite) {\r\n            this.setMultiplePrivilegePermission(this.actionPrivileges, PermissionLevels.ReadWrite);\r\n        } else {\r\n            this.setMultiplePrivilegePermission(this.actionPrivileges, PermissionLevels.None);\r\n        }\r\n    }\r\n\r\n    selectAllExceptions(permission: PermissionLevels) {\r\n        if ((permission === PermissionLevels.Read && this.allExceptionsHaveRead) ||\r\n            (permission === PermissionLevels.ReadWrite && this.allExceptionsHaveWrite)) {\r\n\r\n            this.setMultiplePrivilegePermission(this.exceptionPrivileges, PermissionLevels.None);\r\n            this.allExceptionsHaveRead = false;\r\n            this.allExceptionsHaveWrite = false;\r\n\r\n        } else {\r\n            this.setMultiplePrivilegePermission(this.exceptionPrivileges, permission);\r\n\r\n            // If click on Read\r\n            if (permission === PermissionLevels.Read) {\r\n                this.allExceptionsHaveRead = true;\r\n                this.allExceptionsHaveWrite = false;\r\n            } else {\r\n                this.allExceptionsHaveWrite = true;\r\n                this.allExceptionsHaveRead = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMultiplePrivilegePermission(list: PrivilegeNode[], permission: PermissionLevels) {\r\n        list.forEach((priv) => {\r\n            priv.privilege.permission = permission;\r\n        });\r\n    }\r\n\r\n    doAllActionsHaveWrite() {\r\n        this.allActionsHaveWrite = this.actionPrivileges.every((action) => action.privilege.permission === PermissionLevels.ReadWrite);\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { AgContextualMenuComponent } from '../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { Profile } from '../../../../../shared/entities/profile.entity';\r\nimport { ProfilesListComponent } from '../profiles-list.component';\r\n\r\n@Component({\r\n    selector: 'atlas-profiles-list-contextual-menu',\r\n    templateUrl: './../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component.html',\r\n    styleUrls: ['./../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component.scss']\r\n})\r\nexport class ProfilesListContextualMenuComponent extends AgContextualMenuComponent {\r\n\r\n    componentParent: ProfilesListComponent;\r\n    profile: Profile;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    agInit(params: any) {\r\n        this.params = params;\r\n        this.menuActions = params.menuActions;\r\n        this.profile = params.data;\r\n        this.componentParent = this.params.context.componentParent;\r\n\r\n        this.filterOptionsForAdmin();\r\n    }\r\n\r\n    filterOptionsForAdmin() {\r\n        if (this.profile.name == 'Administrator') {\r\n            this.menuActions = this.menuActions.filter((action) => action.action == this.componentParent.profileMenuActions.copyProfile);\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<atlas-admin-stepper hasAddButton=true\\r\\n                     (buttonClicked)=\\\"onNewProfileButtonClicked()\\\"\\r\\n                     [buttonText]=\\\"'New Profile'\\\"></atlas-admin-stepper>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <div>\\r\\n                <mat-card-title class=\\\"atlas-grid-card-title\\\">\\r\\n                    <h2>Profiles</h2>\\r\\n                </mat-card-title>\\r\\n            </div>\\r\\n            <span class=\\\"space\\\"></span>\\r\\n            <div>\\r\\n                <button mat-icon-button\\r\\n                        [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n                    <i class=\\\"material-icons\\\">more_vert</i>\\r\\n                </button>\\r\\n                <mat-menu #menu1=\\\"matMenu\\\">\\r\\n                    <button mat-menu-item\\r\\n                            [matMenuTriggerFor]=\\\"exportMenu\\\"\\r\\n                            (mouseover)=\\\"OnExportButton()\\\">\\r\\n                        <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n                    </button>\\r\\n                </mat-menu>\\r\\n                <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n                    <button mat-menu-item\\r\\n                            (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                        <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n                    </button>\\r\\n                    <button mat-menu-item\\r\\n                            (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                        <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n                    </button>\\r\\n                </mat-menu>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <mat-card-content>\\r\\n            <div ag-grid=\\\"profilesGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"profilesGridRows\\\"\\r\\n                                 [columnDefs]=\\\"profilesGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (cellClicked)=\\\"onProfileCellClicked($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</div>\\r\\n\"","module.exports = \".space {\\n  flex: 0.3 0.3 auto; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { Profile } from '../../../../shared/entities/profile.entity';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { UserIdentityService } from '../../../../shared/services/http-services/user-identity.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { ProfilesListContextualMenuComponent } from './contextual-menu/profiles-list-contextual-menu.component';\r\n\r\n@Component({\r\n    selector: 'atlas-profiles-list',\r\n    templateUrl: './profiles-list.component.html',\r\n    styleUrls: ['./profiles-list.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class ProfilesListComponent implements OnInit, OnDestroy {\r\n\r\n    profiles: Profile[];\r\n\r\n    profileMenuActions: { [key: string]: string } = {\r\n        copyProfile: 'copy',\r\n        deleteProfile: 'delete',\r\n    };\r\n\r\n    profileGridContextualMenuActions: AgContextualMenuAction[];\r\n    profileGridContextualMenuActionsForAdmin: AgContextualMenuAction[];\r\n    profilesGridOptions: agGrid.GridOptions = {} as agGrid.GridOptions;\r\n    profilesGridCols: agGrid.ColDef[];\r\n    profilesGridRows: any[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    userActiveDirectoryName: string;\r\n    company: string;\r\n    screenName: string = 'Profile';\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private userIdentityService: UserIdentityService,\r\n        private companyManagerService: CompanyManagerService,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        protected lockService: LockService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService) {\r\n\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.init();\r\n            this.getProfiles();\r\n            this.initProfilesGridColumns();\r\n            this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        });\r\n\r\n        // this.profilesGridOptions.getRowHeight = (params) => {\r\n        //     return 30;\r\n        // };\r\n    }\r\n\r\n    init() {\r\n        this.profileGridContextualMenuActions = [\r\n            {\r\n                icon: 'content_copy',\r\n                text: 'Copy',\r\n                action: this.profileMenuActions.copyProfile,\r\n            },\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.profileMenuActions.deleteProfile,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getProfiles() {\r\n        this.userIdentityService.getAllProfiles().subscribe((data) => {\r\n\r\n            this.profiles = data.value;\r\n            this.profilesGridRows = this.profiles;\r\n        });\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n    OnExportButton() {\r\n    }\r\n    onExportButtonClickedAsExcel() {\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        let params = {\r\n            fileName: todayDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        let params = {\r\n            fileName: todayDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n    initProfilesGridColumns() {\r\n        this.profilesGridCols = [\r\n            {\r\n                headerName: 'Name',\r\n                colId: 'name',\r\n                field: 'name',\r\n            },\r\n            {\r\n                headerName: 'Description',\r\n                colId: 'description',\r\n                field: 'description',\r\n            },\r\n            {\r\n                headerName: 'NumberOfUsers',\r\n                colId: 'numberOfUsers',\r\n                field: 'numberOfUsers',\r\n            },\r\n            {\r\n                headerName: '',\r\n                colId: 'additionalActions',\r\n                cellRendererFramework: ProfilesListContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    menuActions: this.profileGridContextualMenuActions,\r\n                },\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    handleAction(action: string, profile: Profile) {\r\n        switch (action) {\r\n            case this.profileMenuActions.copyProfile:\r\n                this.router.navigate(['/' + this.companyManagerService.getCurrentCompanyId() +\r\n                    '/admin/profiles/copy/', encodeURIComponent(String(profile.profileId))]);\r\n                break;\r\n            case this.profileMenuActions.deleteProfile:\r\n                this.deleteProfile(profile);\r\n                break;\r\n            default: // throw Action not recognized exception\r\n                break;\r\n        }\r\n    }\r\n\r\n    onNewProfileButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManagerService.getCurrentCompanyId() + '/admin/profiles/new']);\r\n    }\r\n\r\n    deleteProfile(profile: Profile) {\r\n        if (profile.name === 'Administrator') {\r\n            this.snackbarService.throwErrorSnackBar('You cannot delete this profile');\r\n            return;\r\n        }\r\n\r\n        if (profile.numberOfUsers > 0) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Profile Deletion',\r\n                    text: profile.numberOfUsers + ' users are currently using this profile. ' +\r\n                        'You need to totally unassign the profile before deleting it.',\r\n                    cancelButton: 'Got it !',\r\n                },\r\n            });\r\n        } else {\r\n            this.lockService.isLockedUserProfile(profile.profileId).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                if (lock.isLocked) {\r\n                    this.dialog.open(ConfirmationDialogComponent, {\r\n                        data: {\r\n                            title: 'Lock',\r\n                            text: lock.message,\r\n                            okButton: 'Got it',\r\n                        },\r\n                    });\r\n                } else {\r\n                    this.startLockRefresh(profile.profileId, profile.name);\r\n                    this.lockService.lockUserProfile(profile.profileId, LockFunctionalContext.UserProfileDeletion).pipe(takeUntil(this.destroy$)).subscribe((lockState) => {\r\n                        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Profile Deletion',\r\n                                text: 'Deleting a profile is permanent. You can create it again, but all its permissions will be gone.',\r\n                                okButton: 'Delete anyway',\r\n                                cancelButton: 'Cancel',\r\n                            },\r\n                        });\r\n                        confirmDialog.afterClosed().subscribe((answer) => {\r\n                            this.stopLockRefresh();\r\n                            if (answer) {\r\n                                this.userIdentityService.deleteProfile(profile.profileId).subscribe(() => {\r\n                                    this.snackbarService.informationSnackBar('Profile Deleted');\r\n                                    this.getProfiles();\r\n                                });\r\n                            }\r\n                            this.lockService.unlockUserProfile(profile.profileId, LockFunctionalContext.UserProfileDeletion).pipe(takeUntil(this.destroy$)).subscribe();\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onProfileCellClicked(event) {\r\n        if (event.column.colDef.colId !== 'additionalActions') {\r\n            this.router.navigate(['/' + this.companyManagerService.getCurrentCompanyId() +\r\n                '/admin/profiles/edit/', encodeURIComponent(String(event.data.profileId))]);\r\n        }\r\n    }\r\n\r\n    startLockRefresh(profileId: number, profileName: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'User Profile';\r\n        resourceInformation.resourceId = profileId;\r\n        resourceInformation.resourceCode = profileName;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../../../core/services/company-manager.service';\r\nimport { LockService } from '../../../../../shared/services/http-services/lock.service';\r\nimport { UserIdentityService } from '../../../../../shared/services/http-services/user-identity.service';\r\nimport { SecurityService } from '../../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../../shared/services/ui.service';\r\nimport { ProfilesManagementComponent } from '../profiles-management.component';\r\n\r\n@Component({\r\n    selector: 'atlas-profiles-copy',\r\n    templateUrl: './../profiles-management.component.html',\r\n    styleUrls: ['./../profiles-management.component.scss'],\r\n})\r\nexport class ProfilesCopyComponent extends ProfilesManagementComponent {\r\n    title: string = 'Profile Copy';\r\n    isCopy: boolean = true;\r\n    constructor(protected securityService: SecurityService,\r\n        protected userIdentityService: UserIdentityService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        protected fb: FormBuilder,\r\n        protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected uiService: UiService,\r\n        protected lockService: LockService,\r\n        protected titleService: TitleService,\r\n    ) {\r\n        super(\r\n            securityService,\r\n            userIdentityService,\r\n            companyManager,\r\n            route,\r\n            router,\r\n            fb,\r\n            snackbarService,\r\n            dialog,\r\n            uiService,\r\n            lockService,\r\n            titleService);\r\n    }\r\n\r\n    checkProfileNotAdmin() {\r\n        // You can copy the admin profile\r\n    }\r\n\r\n    prepareProfileForCopy() {\r\n        this.model.profileId = null;\r\n        this.model.name = '';\r\n        this.model.description = '';\r\n    }\r\n\r\n}\r\n","module.exports = \"<atlas-admin-stepper></atlas-admin-stepper>\\r\\n<form (ngSubmit)=\\\"onValidateButtonClicked()\\\"\\r\\n      (keydown.enter)=\\\"$event.preventDefault()\\\"\\r\\n      [formGroup]=\\\"profileForm\\\">\\r\\n    <header class=\\\"header-background\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <h2 class=\\\"no-margin\\\"\\r\\n                [class.header-title]=\\\"!isCreation\\\">\\r\\n                {{title}}\\r\\n            </h2>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxFlex=\\\"100\\\"\\r\\n                     fxLayoutAlign=\\\"none center\\\"\\r\\n                     fxLayoutGap=\\\"10px\\\"\\r\\n                     class=\\\"profile-card-general-info\\\">\\r\\n                    <div fxFlex=\\\"25\\\"\\r\\n                         fxFlex.xs=\\\"100\\\"\\r\\n                         fxFlex.sm=\\\"100\\\"\\r\\n                         class=\\\"custom-form\\\"\\r\\n                         [class.isEmpty]=\\\"!profileNameCtrl.value\\\"\\r\\n                         [class.required-field]=\\\"true\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input required\\r\\n                                   matInput\\r\\n                                   placeholder=\\\"Profile Name\\\"\\r\\n                                   aria-label=\\\"Profile Name\\\"\\r\\n                                   formControlName=\\\"profileNameCtrl\\\">\\r\\n                            <mat-error *ngIf=\\\"profileNameCtrl.hasError('required')\\\">\\r\\n                                Profile Name <strong>required</strong>\\r\\n                            </mat-error>\\r\\n                            <mat-hint>\\r\\n                                Required *\\r\\n                            </mat-hint>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"50\\\"\\r\\n                         fxFlex.xs=\\\"100\\\"\\r\\n                         fxFlex.sm=\\\"100\\\"\\r\\n                         class=\\\"custom-form\\\"\\r\\n                         [class.isEmpty]=\\\"!profileDescriptionCtrl.value\\\"\\r\\n                         [class.required-field]=\\\"true\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input required\\r\\n                                   matInput\\r\\n                                   placeholder=\\\"Profile Description\\\"\\r\\n                                   aria-label=\\\"Profile Description\\\"\\r\\n                                   formControlName=\\\"profileDescriptionCtrl\\\">\\r\\n                            <mat-error *ngIf=\\\"profileDescriptionCtrl.hasError('required')\\\">\\r\\n                                Profile Description <strong>required</strong>\\r\\n                            </mat-error>\\r\\n                            <mat-hint>\\r\\n                                Required *\\r\\n                            </mat-hint>\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"metadata-text\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"none start\\\">\\r\\n                    <div fxFlex=\\\"20%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\"\\r\\n                         fxFlex.sm=\\\"100%\\\"\\r\\n                         *ngIf=\\\"model.createdBy || model.createdDateTime\\\">\\r\\n                        Created by {{ model.createdBy }} on\\r\\n                        <atr-date-label [date]=\\\"model.createdDateTime\\\"></atr-date-label>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"100%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\"\\r\\n                         fxFlex.sm=\\\"100%\\\"\\r\\n                         *ngIf=\\\"model.modifiedDateTime || model.modifiedBy\\\">\\r\\n                        Last Updated by {{ model.modifiedBy }} on\\r\\n                        <atr-date-label [date]=\\\"model.modifiedDateTime\\\"></atr-date-label>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </header>\\r\\n\\r\\n    <mat-toolbar class=\\\"menu-bar\\\">\\r\\n        <div class=\\\"toolbar-div\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxFlex=\\\"40\\\">\\r\\n                <button mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onCopyProfileButtonClicked()\\\"\\r\\n                        *ngIf=\\\"!isCopy\\\">\\r\\n                    Copy Profile\\r\\n                </button>\\r\\n                <button mat-button\\r\\n                        type=\\\"button\\\"\\r\\n                        (click)=\\\"onDeleteButtonClicked()\\\"\\r\\n                        *ngIf=\\\"!isCreation\\\">\\r\\n                    Delete\\r\\n                </button>\\r\\n            </div>\\r\\n\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\"\\r\\n                 fxFlex=\\\"20\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n\\r\\n                <a (click)=\\\"onValidateButtonClicked()\\\"\\r\\n                   matTooltip=\\\"Save the profile\\\"\\r\\n                   class=\\\"menu-bar-action-icon\\\">\\r\\n                    <div class=\\\"white-icon outline-save-icon\\\"></div>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-toolbar>\\r\\n\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-card class=\\\"authorized-area-card\\\">\\r\\n            <mat-card-title>\\r\\n                <h2>Authorized Areas</h2>\\r\\n            </mat-card-title>\\r\\n            <mat-card-content>\\r\\n                <mat-form-field>\\r\\n                    <mat-chip-list multiple>\\r\\n                        <mat-chip *ngFor=\\\"let priv of privilegeTree\\\"\\r\\n                                  [selectable]=\\\"true\\\"\\r\\n                                  [selected]=\\\"isSelected(priv)\\\"\\r\\n                                  (click)=\\\"selectPrivilege(priv)\\\">\\r\\n                            <atlas-privilege-level1-icon matListIcon\\r\\n                                                         [privilegeLevel1Name]=\\\"priv.privilege.name\\\">\\r\\n                            </atlas-privilege-level1-icon>\\r\\n                            {{priv.privilege.displayName}}\\r\\n                        </mat-chip>\\r\\n                    </mat-chip-list>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <div *ngFor=\\\"let priv of privilegeTree\\\">\\r\\n                    <div *ngIf=\\\"isSelected(priv)\\\">\\r\\n                        <div *ngFor=\\\"let child of priv.children\\\">\\r\\n                            <atr-privilege-tree [form]=\\\"profileForm\\\"\\r\\n                                                [privilege]=\\\"child\\\"></atr-privilege-tree>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n        <div class=\\\"btn-container\\\">\\r\\n            <!--<button type=\\\"button\\\" *ngIf=\\\"isCreation\\\" (click)=\\\"revert()\\\" mat-button [disabled]=\\\"userForm.pristine\\\">Cancel</button>-->\\r\\n\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start start\\\">\\r\\n                <button type=\\\"button\\\"\\r\\n                        *ngIf=\\\"!isCreation\\\"\\r\\n                        (click)=\\\"onDeleteButtonClicked()\\\"\\r\\n                        mat-button>\\r\\n                    Delete\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button type=\\\"button\\\"\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\"\\r\\n                        mat-button>\\r\\n                    Cancel\\r\\n                </button>\\r\\n                <button type=\\\"submit\\\"\\r\\n                        mat-raised-button>\\r\\n                    Save\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</form>\"","module.exports = \".elevated-container {\\n  height: 100%; }\\n\\n.profile-card-general-info {\\n  font-size: 14px; }\\n\\n.btn-container {\\n  margin: 8px 0; }\\n\\nbutton.mat-button {\\n  margin-left: 0 !important; }\\n\\nbutton.mat-raised-button {\\n  margin-right: 0 !important; }\\n\\n.header-title {\\n  padding-top: 14px; }\\n\\natlas-privilege-level1-icon {\\n  line-height: initial; }\\n\"","import { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { PrivilegeNode } from '../../../../shared/entities/privilege-node.entity';\r\nimport { Privilege } from '../../../../shared/entities/privilege.entity';\r\nimport { ProfilePrivilege } from '../../../../shared/entities/profile-privilege.entity';\r\nimport { Profile } from '../../../../shared/entities/profile.entity';\r\nimport { PermissionLevels } from '../../../../shared/enums/permission-level.enum';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { UserIdentityService } from '../../../../shared/services/http-services/user-identity.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\n\r\n@Component({\r\n    selector: 'atlas-profiles-management',\r\n    templateUrl: './profiles-management.component.html',\r\n    styleUrls: ['./profiles-management.component.scss'],\r\n})\r\nexport class ProfilesManagementComponent implements OnInit, OnDestroy {\r\n    isCreation: boolean = true;\r\n    isCopy: boolean = false;\r\n    isSave: boolean = false;\r\n    title: string = 'Profile Creation';\r\n\r\n    model: Profile;\r\n\r\n    profileForm: FormGroup;\r\n    profileNameCtrl: FormControl;\r\n    profileDescriptionCtrl: FormControl;\r\n\r\n    privileges: Privilege[];\r\n    privilegeTree: PrivilegeNode[];\r\n    unstructuredTree: PrivilegeNode[];\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n\r\n    constructor(\r\n        protected securityService: SecurityService,\r\n        protected userIdentityService: UserIdentityService,\r\n        protected companyManager: CompanyManagerService,\r\n        protected route: ActivatedRoute,\r\n        protected router: Router,\r\n        protected fb: FormBuilder,\r\n        protected snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        protected uiService: UiService,\r\n        protected lockService: LockService,\r\n        protected titleService: TitleService,\r\n    ) {\r\n        this.model = new Profile();\r\n        this.profileNameCtrl = new FormControl({ value: null, disabled: false }, [Validators.required]);\r\n        this.profileDescriptionCtrl = new FormControl({ value: null, disabled: false }, [Validators.required]);\r\n        this.profileForm = this.fb.group({\r\n            profileNameCtrl: this.profileNameCtrl,\r\n            profileDescriptionCtrl: this.profileDescriptionCtrl,\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.securityService.isSecurityReady().pipe(\r\n            mergeMap(() => {\r\n                return this.route.data;\r\n            }))\r\n            .subscribe((data) => {\r\n                this.isCreation = data.isCreation;\r\n                if (this.isCreation) {\r\n                    this.titleService.setTitle(this.route.snapshot.data.title);\r\n                }\r\n                this.getData();\r\n            });\r\n    }\r\n\r\n    initForm() {\r\n        this.profileNameCtrl.patchValue(this.model.name);\r\n        this.profileDescriptionCtrl.patchValue(this.model.description);\r\n        this.initializePrivileges();\r\n    }\r\n\r\n    initializePrivileges() {\r\n        this.model.privileges.forEach((priv) => {\r\n            const res = this.privileges.filter((pr) => pr.privilegeId === priv.privilegeId)[0];\r\n            res.permission = priv.permission;\r\n        });\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.profileForm.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\r\n        if (this.profileForm.dirty) {\r\n            $event.returnValue = true;\r\n        }\r\n    }\r\n\r\n    getData() {\r\n\r\n        this.userIdentityService.getAllPrivileges().subscribe((data) => {\r\n            this.privileges = data.value;\r\n            this.privilegeTree = this.buildPrivilegeTree(this.privileges);\r\n            if (!this.isCreation) {\r\n                this.title = '';\r\n            }\r\n            const id = +this.route.snapshot.paramMap.get('profileId');\r\n            if (id) {\r\n\r\n                if (!this.isCreation) {\r\n                    this.lockService.lockUserProfile(id, LockFunctionalContext.UserProfileEdition).pipe(takeUntil(this.destroy$)).subscribe(\r\n                        (data) => { },\r\n                        (err) => {\r\n                            this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'Lock',\r\n                                    text: err.error.detail,\r\n                                    okButton: 'Got it',\r\n                                },\r\n                            });\r\n                            this.goToPrivilegesList();\r\n                        });\r\n                }\r\n\r\n                this.userIdentityService.getProfile(id).subscribe((result) => {\r\n                    this.model = result;\r\n                    this.titleService.setTitle(this.model.name + '- Profile Edition');\r\n                    this.checkProfileNotAdmin();\r\n                    this.prepareProfileForCopy();\r\n                    this.initForm();\r\n                    if (!this.isCreation) {\r\n                        this.startLockRefresh(this.model.profileId, this.model.name);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    checkProfileNotAdmin() {\r\n        if (this.model.name === 'Administrator') {\r\n            this.snackbarService.throwErrorSnackBar('You cannot edit this profile');\r\n            this.goToPrivilegesList();\r\n        }\r\n    }\r\n\r\n    prepareProfileForCopy() {\r\n        // defined in components that inherit management\r\n    }\r\n\r\n    buildPrivilegeTree(privilegeList: Privilege[]) {\r\n\r\n        this.unstructuredTree = [];\r\n\r\n        const tree: PrivilegeNode[] = [];\r\n        const nodes = {};\r\n        privilegeList.forEach((priv) => {\r\n            const node = new PrivilegeNode();\r\n            node.privilege = priv;\r\n            node.children = [];\r\n            node.privilege.permission = PermissionLevels.None;\r\n            nodes[node.getId()] = node;\r\n\r\n            this.unstructuredTree.push(node);\r\n        });\r\n\r\n        privilegeList.forEach((priv) => {\r\n            if (priv.parentId != null) {\r\n                nodes[priv.parentId].children.push(nodes[priv.privilegeId]);\r\n            } else {\r\n                tree.push(nodes[priv.privilegeId]);\r\n            }\r\n        });\r\n\r\n        return tree;\r\n    }\r\n\r\n    isSelected(privilege: PrivilegeNode) {\r\n        return (privilege.getPermission() > PermissionLevels.None);\r\n    }\r\n\r\n    selectPrivilege(privilege: PrivilegeNode) {\r\n        this.isSave = true;\r\n        if (privilege.getPermission() > PermissionLevels.None) {\r\n            privilege.privilege.permission = PermissionLevels.None;\r\n            privilege.children.forEach((priv) => {\r\n                priv.privilege.permission = PermissionLevels.None;\r\n            });\r\n        } else {\r\n            privilege.privilege.permission = PermissionLevels.ReadWrite;\r\n            privilege.children.forEach((priv) => {\r\n                priv.privilege.permission = PermissionLevels.Read;\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    onCopyProfileButtonClicked() {\r\n        this.isSave = true;\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/profiles/copy/' + this.model.profileId]);\r\n    }\r\n\r\n    onValidateButtonClicked() {\r\n        this.isSave = true;\r\n        if (this.profileForm.valid) {\r\n            let isValid = false; // att least one level 2 and 1 level 1 has to be good\r\n\r\n            const profilePrivileges: ProfilePrivilege[] = [];\r\n            this.unstructuredTree.forEach((node) => {\r\n                if (node.getPermission() > PermissionLevels.None) {\r\n                    isValid = (node.getLevel() > PermissionLevels.None) || (isValid);\r\n\r\n                    profilePrivileges.push({\r\n                        privilegeId: node.getId(),\r\n                        permission: node.getPermission(),\r\n\r\n                    } as ProfilePrivilege);\r\n                }\r\n            });\r\n\r\n            if (isValid && profilePrivileges.length > 0) {\r\n                this.model.name = this.profileNameCtrl.value;\r\n                this.model.description = this.profileDescriptionCtrl.value;\r\n                this.model.privileges = profilePrivileges;\r\n\r\n                if (this.isCreation) {\r\n                    this.userIdentityService.saveProfile(this.model).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Profile Created');\r\n                        this.goToPrivilegesList();\r\n                    });\r\n                } else {\r\n                    this.userIdentityService.updateProfile(this.model).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Profile Updated');\r\n                        this.goToPrivilegesList();\r\n                    });\r\n                }\r\n            } else {\r\n                this.snackbarService.throwErrorSnackBar('The form is not valid. Please check at least one privilege is selected.');\r\n            }\r\n        } else {\r\n            this.snackbarService.throwErrorSnackBar('The form is not valid. Please fix the errors.');\r\n        }\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.isSave = true;\r\n        this.goToPrivilegesList();\r\n    }\r\n\r\n    goToPrivilegesList() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/profiles']);\r\n    }\r\n\r\n    onDeleteButtonClicked() {\r\n        this.isSave = true;\r\n        if (this.model.numberOfUsers > 0) {\r\n            this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Profile Deletion',\r\n                    text: this.model.numberOfUsers + ' users are currently using this profile. You need to totally unassign the profile before deleting it.',\r\n                    cancelButton: 'Got it !',\r\n                },\r\n            });\r\n        } else {\r\n            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                data: {\r\n                    title: 'Profile Deletion',\r\n                    text: 'Deleting a profile is permanent. You can create it again, but all its permissions will be gone.',\r\n                    okButton: 'Delete anyway',\r\n                    cancelButton: 'Cancel',\r\n                },\r\n            });\r\n            confirmDialog.afterClosed().subscribe((answer) => {\r\n                if (answer) {\r\n                    this.userIdentityService.deleteProfile(this.model.profileId).subscribe(() => {\r\n                        this.snackbarService.informationSnackBar('Profile Deleted');\r\n                        this.goToPrivilegesList();\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    startLockRefresh(profileId: number, profileName: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'User Profile';\r\n        resourceInformation.resourceId = profileId;\r\n        resourceInformation.resourceCode = profileName;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div matToolbarHighlight\\r\\n     class=\\\"dark-tab header-tab mat-elevation-z6\\\">\\r\\n    <div class=\\\"header-tab-container\\\">\\r\\n        <nav mat-tab-nav-bar\\r\\n             matToolbarHighlight>\\r\\n            <div *ngFor=\\\"let routeLink of routeLinks\\\">\\r\\n                <a mat-tab-link\\r\\n                   *ifAuthorized=\\\"routeLink.privilege, company:this.company\\\"\\r\\n                   [routerLink]=\\\"routeLink.link\\\"\\r\\n                   routerLinkActive\\r\\n                   #rla=\\\"routerLinkActive\\\"\\r\\n                   [active]=\\\"isActive(routeLink)\\\">\\r\\n                    {{ routeLink.label }}\\r\\n                </a>\\r\\n            </div>\\r\\n            <a mat-tab-link\\r\\n               [matMenuTriggerFor]=\\\"reports\\\">\\r\\n                Reports\\r\\n            </a>\\r\\n\\r\\n            <mat-menu #reports=\\\"matMenu\\\"\\r\\n                      [overlapTrigger]=\\\"false\\\"\\r\\n                      xPosition=\\\"after\\\">\\r\\n                <span *ngFor=\\\"let item of filteredTemplates\\\">\\r\\n                    <button mat-button\\r\\n                            (click)=\\\"OnReportClick(item)\\\">\\r\\n                        {{item.name}}\\r\\n                    </button>\\r\\n                </span>\\r\\n            </mat-menu>\\r\\n        </nav>\\r\\n        <span class=\\\"fill-space\\\"></span>\\r\\n        <!-- Add FAB extanded if needed -->\\r\\n        <button *ngIf=\\\"hasAddButton\\\"\\r\\n                (click)=\\\"onAddButtonClicked()\\\"\\r\\n                mat-raised-button\\r\\n                class=\\\"fab-text-button\\\"\\r\\n                color=\\\"accent\\\">\\r\\n            <mat-icon class=\\\"mdc-fab__icon material-icons\\\">add</mat-icon>\\r\\n            {{ buttonText }}\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".header-tab {\\n  margin-bottom: 0;\\n  position: relative;\\n  z-index: 1; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { GenericReportViewerComponent } from '../../../shared/components/generic-report-viewer/generic-report-viewer.component';\r\nimport { PhysicalDocumentTemplate } from '../../../shared/entities/document-template.entity';\r\nimport { DocumentService } from '../../../shared/services/http-services/document.service';\r\n\r\n@Component({\r\n    selector: 'atlas-admin-stepper',\r\n    templateUrl: './stepper.component.html',\r\n    styleUrls: ['./stepper.component.scss'],\r\n})\r\nexport class StepperComponent implements OnInit {\r\n    routeLinks = [\r\n        {\r\n            label: 'USER MANAGEMENT',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/admin/users',\r\n            index: 0,\r\n            privilege: 'Administration.Users',\r\n        },\r\n        {\r\n            label: 'PROFILE MANAGEMENT',\r\n            link: '/' + this.companyManager.getCurrentCompanyId() + '/admin/profiles',\r\n            index: 1,\r\n            privilege: 'Administration.Profiles',\r\n        },\r\n    ];\r\n    activeLinkIndex = -1;\r\n    @Input() hasAddButton: boolean = false;\r\n    @Input() buttonText: string = '';\r\n    @Output() readonly buttonClicked = new EventEmitter<void>();\r\n    company: string;\r\n    filteredTemplates: PhysicalDocumentTemplate[] = new Array<PhysicalDocumentTemplate>();\r\n\r\n    constructor(private router: Router, private companyManager: CompanyManagerService, private route: ActivatedRoute,\r\n        protected dialog: MatDialog,\r\n        protected documentService: DocumentService) {\r\n        this.activeLinkIndex = this.routeLinks.indexOf(this.routeLinks.find((tab) => this.router.url.includes(tab.link)));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.paramMap.get('company');\r\n        const documentType = 76;\r\n        this.documentService.getTemplates(documentType, 'Users').subscribe((templates) => {\r\n            this.filteredTemplates = templates.value;\r\n        });\r\n    }\r\n\r\n    isActive(routeLink: any) {\r\n        return this.activeLinkIndex === routeLink.index;\r\n    }\r\n\r\n    OnReportClick(data: any) {\r\n\r\n        const openTradepnlReportDialog = this.dialog.open(GenericReportViewerComponent, {\r\n            data:\r\n            {\r\n                reportName: data.name,\r\n                reportPath: data.path,\r\n            },\r\n            width: '90%',\r\n            height: '90%',\r\n        });\r\n\r\n    }\r\n    onAddButtonClicked(): void {\r\n        this.buttonClicked.emit();\r\n    }\r\n}\r\n","module.exports = \"<atlas-admin-stepper hasAddButton=true\\r\\n                     (buttonClicked)=\\\"onNewUserButtonClicked()\\\"\\r\\n                     [buttonText]=\\\"'New User'\\\"></atlas-admin-stepper>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <mat-card>\\r\\n        <div fxLayout=\\\"row\\\">\\r\\n            <div>\\r\\n                <mat-card-title class=\\\"atlas-grid-card-title\\\">\\r\\n                    <h2>Users</h2>\\r\\n                </mat-card-title>\\r\\n            </div>\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n            <div>\\r\\n                <button mat-icon-button\\r\\n                        [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n                    <i class=\\\"material-icons\\\">more_vert</i>\\r\\n                </button>\\r\\n                <mat-menu #menu1=\\\"matMenu\\\">\\r\\n                    <button mat-menu-item\\r\\n                            [matMenuTriggerFor]=\\\"exportMenu\\\"\\r\\n                            (mouseover)=\\\"OnExportButton()\\\">\\r\\n                        <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n                    </button>\\r\\n                </mat-menu>\\r\\n                <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n                    <button mat-menu-item\\r\\n                            (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                        <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n                    </button>\\r\\n                    <button mat-menu-item\\r\\n                            (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                        <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n                    </button>\\r\\n                </mat-menu>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <mat-card-content>\\r\\n            <div ag-grid=\\\"userGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"userGridRows\\\"\\r\\n                                 [columnDefs]=\\\"userGridCols\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"true\\\"\\r\\n                                 [paginationPageSize]=\\\"10\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (cellClicked)=\\\"onUserCellClicked($event)\\\"\\r\\n                                 enableFilter\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n        </mat-card-content>\\r\\n    </mat-card>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { DatePipe } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { IsLocked } from '../../../../shared/entities/is-locked.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { UserListItemViewModel } from '../../../../shared/models/user-list-item-view-model';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { UserIdentityService } from '../../../../shared/services/http-services/user-identity.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-user-list',\r\n    templateUrl: './user-list.component.html',\r\n    styleUrls: ['./user-list.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class UserListComponent implements OnInit, OnDestroy {\r\n    isLoading = true;\r\n    users: UserListItemViewModel[];\r\n\r\n    userMenuActions: { [key: string]: string } = {\r\n        toggleUser: 'toggle',\r\n        deleteUser: 'delete',\r\n    };\r\n\r\n    userGridContextualMenuActions: AgContextualMenuAction[];\r\n    userGridOptions: agGrid.GridOptions = {} as agGrid.GridOptions;\r\n    userGridCols: agGrid.ColDef[];\r\n    userGridRows: UserListItemViewModel[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    userActiveDirectoryName: string;\r\n    company: string;\r\n    screenName: string = 'UserManagement';\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private userIdentityService: UserIdentityService,\r\n        private companyManager: CompanyManagerService,\r\n        protected dialog: MatDialog,\r\n        private snackbarService: SnackbarService,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        protected lockService: LockService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,) {\r\n\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.titleService.setTitle(this.route.snapshot.data.title);\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.init();\r\n            this.getUsers();\r\n            this.initUserGridColumns();\r\n        });\r\n\r\n        // this.userGridOptions.getRowHeight = (params) => {\r\n        //     return 30;\r\n        // };\r\n\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n    }\r\n\r\n    init() {\r\n        this.userGridContextualMenuActions = [\r\n            // {\r\n            // \ticon: \"lock_open\",\r\n            // \ttext: \"Toggle User Activation\",\r\n            // \taction: this.userMenuActions.deactivateUser\r\n            // },\r\n            {\r\n                icon: 'delete',\r\n                text: 'Delete',\r\n                action: this.userMenuActions.deleteUser,\r\n            },\r\n        ];\r\n    }\r\n\r\n    getUsers() {\r\n        this.userIdentityService.getAllUsers().subscribe((data) => {\r\n            this.users = data.value.map((user) => {\r\n                return new UserListItemViewModel(user);\r\n            });\r\n\r\n            this.userGridRows = this.users;\r\n        });\r\n\r\n    }\r\n    OnExportButton() {\r\n    }\r\n    onExportButtonClickedAsExcel() {\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n    initUserGridColumns() {\r\n        this.userGridCols = [\r\n            {\r\n                headerName: 'SAM Account Name',\r\n                colId: 'samAccountName',\r\n                field: 'samAccountName',\r\n            },\r\n            {\r\n                headerName: 'User Principal Name',\r\n                colId: 'userPrincipalName',\r\n                field: 'userPrincipalName',\r\n            },\r\n            {\r\n                headerName: 'First Name',\r\n                colId: 'firstName',\r\n                field: 'firstName',\r\n            },\r\n            {\r\n                headerName: 'Last Name',\r\n                colId: 'lastName',\r\n                field: 'lastName',\r\n            },\r\n            {\r\n                headerName: 'Email address',\r\n                colId: 'email',\r\n                field: 'email',\r\n            },\r\n            {\r\n                headerName: 'Phone n°',\r\n                colId: 'phoneNumber',\r\n                field: 'phoneNumber',\r\n            },\r\n            {\r\n                headerName: 'Location',\r\n                colId: 'location',\r\n                field: 'location',\r\n            },\r\n            {\r\n                headerName: 'Activated',\r\n                colId: 'isActivated',\r\n                field: 'isActivated',\r\n            },\r\n            {\r\n                headerName: '',\r\n                colId: 'additionalActions',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    menuActions: this.userGridContextualMenuActions,\r\n\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                maxWidth: 80,\r\n            },\r\n        ];\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    handleAction(action: string, user: UserListItemViewModel) {\r\n        switch (action) {\r\n            case this.userMenuActions.toggleUser:\r\n                break;\r\n            case this.userMenuActions.deleteUser:\r\n\r\n                this.lockService.isLockedUserAccount(user.id).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n                    if (lock.isLocked) {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: lock.message,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                    } else {\r\n                        this.lockService.lockUserAccount(user.id, LockFunctionalContext.UserAccountDeletion).pipe(takeUntil(this.destroy$)).subscribe((lockState) => {\r\n                            this.startLockRefresh(user.id, user.samAccountName);\r\n                            const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                                data: {\r\n                                    title: 'User Deletion',\r\n                                    text: 'Deleting a user is permanent. You can create it again, but all his/her permissions will be gone.',\r\n                                    okButton: 'Delete anyway',\r\n                                    cancelButton: 'Cancel',\r\n                                },\r\n                            });\r\n                            confirmDialog.afterClosed().subscribe((answer) => {\r\n                                this.stopLockRefresh();\r\n                                if (answer) {\r\n                                    this.userIdentityService.deleteUser(user.id).subscribe(() => {\r\n                                        this.snackbarService.informationSnackBar('User Deleted');\r\n                                        this.getUsers();\r\n                                    });\r\n                                }\r\n                                this.lockService.unlockUserAccount(user.id, LockFunctionalContext.UserAccountDeletion).pipe(takeUntil(this.destroy$)).subscribe();\r\n                            });\r\n                        });\r\n\r\n                    }\r\n                });\r\n                break;\r\n            default: // throw Action not recognized exception\r\n                break;\r\n        }\r\n    }\r\n\r\n    onNewUserButtonClicked() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/users/new/']);\r\n    }\r\n\r\n    onUserCellClicked(event) {\r\n        this.lockService.isLockedUserAccount(event.data.id).pipe(takeUntil(this.destroy$)).subscribe((lock: IsLocked) => {\r\n            if (lock.isLocked) {\r\n                this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Lock',\r\n                        text: lock.message,\r\n                        okButton: 'Got it',\r\n                    },\r\n                });\r\n            } else {\r\n                if (event.column.colDef.colId !== 'additionalActions') {\r\n                    this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +\r\n                        '/admin/users/edit/', encodeURIComponent(event.data.userPrincipalName)]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    startLockRefresh(userId: number, samAccountName: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'User Account';\r\n        resourceInformation.resourceId = userId;\r\n        resourceInformation.resourceCode = samAccountName;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<input type=\\\"text\\\"\\r\\n       matInput\\r\\n       [(ngModel)]=\\\"selectedDepartement\\\"\\r\\n       [matAutocomplete]=\\\"autocomplete\\\">\\r\\n<mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                  (optionSelected)=\\\"selectionChanged($event);\\\">\\r\\n    <mat-option [value]=\\\"allDepartmentsOption\\\">\\r\\n        <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n            All\\r\\n        </mat-checkbox>\\r\\n    </mat-option>\\r\\n    <mat-option *ngFor=\\\"let object of allDepartment\\\"\\r\\n                [value]=\\\"object\\\">\\r\\n        <mat-checkbox [checked]=\\\"isSelected(object)\\\">\\r\\n            <span>{{ object[codeProperty] }}</span>\\r\\n            <span> | </span>\\r\\n            <span>{{ object[displayProperty] }}</span>\\r\\n        </mat-checkbox>\\r\\n    </mat-option>\\r\\n</mat-autocomplete>\\r\\n\"","module.exports = \"\"","import { Component } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { AgRendererComponent } from 'ag-grid-angular';\r\nimport { IAfterGuiAttachedParams } from 'ag-grid-community';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\n\r\n@Component({\r\n    selector: 'atlas-ag-grid-department',\r\n    templateUrl: './ag-grid-department.component.html',\r\n    styleUrls: ['./ag-grid-department.component.scss'],\r\n})\r\n\r\nexport class AgGridDepartmentComponent implements AgRendererComponent {\r\n\r\n    constructor(private masterDataService: MasterdataService) { }\r\n\r\n    allSelected = true;\r\n    isSelectedValue: boolean;\r\n    displayValue = true;\r\n    valueProperty: string = 'departmentId';\r\n    codeProperty: string = 'departmentCode';\r\n    displayProperty: string = 'description';\r\n\r\n    allDepartmentsOption: Department = {\r\n        departmentId: 0,\r\n        departmentCode: 'All',\r\n        description: 'All',\r\n        profitCenterId: 0,\r\n        companyId: 0,\r\n        companyCode: null,\r\n    };\r\n\r\n    departement = new FormControl();\r\n    selectedDepartement: string;\r\n    companyId: string;\r\n    masterData: MasterData = new MasterData();\r\n    allDepartment: Department[];\r\n\r\n    selectedValues: Department[];\r\n\r\n    private params: any;\r\n\r\n    agInit(params: any): void {\r\n        this.params = params;\r\n    }\r\n\r\n    afterGuiAttached(params?: IAfterGuiAttachedParams): void {\r\n    }\r\n\r\n    refresh(params: any): boolean {\r\n        return false;\r\n    }\r\n\r\n    selectionChanged(event: any): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allDepartmentsOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.allDepartment.length;\r\n        }\r\n        this.params.data.departments = this.selectedValues.map((o) => o);\r\n\r\n        this.params.data.allDepartments = this.allSelected;\r\n\r\n        this.selectedDepartement = this.selectedValues.length === this.allDepartment.length ? 'All' : (this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n    }\r\n\r\n    deselect(value) {\r\n        const index = this.selectedValues.indexOf(this.selectedValues.find((x) => x.departmentId === value.departmentId));\r\n        this.selectedValues.splice(index, 1);\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.allDepartment.map((o) => o) : [];\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.selectedValues = this.params.value.map((o) => o);\r\n        this.companyId = this.params.data.companyId;\r\n        this.allSelected = this.params.data.allDepartments;\r\n        this.masterDataService.getMasterData([MasterDataProps.Departments], this.companyId).subscribe((masterData: MasterData) => {\r\n            this.allDepartment = masterData.departments;\r\n            this.initView();\r\n        });\r\n    }\r\n\r\n    initView() {\r\n        if (this.allSelected) { this.selectedDepartement = 'All'; this.selectedValues = this.allDepartment.map((o) => o); } else {\r\n            this.selectedValues.forEach((element) => {\r\n                if (element.description == null) {\r\n                    element.description = this.allDepartment.find((x) => x.departmentId === element.departmentId).description.trim();\r\n                }\r\n            });\r\n            this.selectedDepartement = (this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n    }\r\n\r\n    isSelected(object: any) {\r\n        this.isSelectedValue = false;\r\n        if (this.allSelected) {\r\n            return true;\r\n        }\r\n        this.selectedValues.forEach((element) => {\r\n            if (element.departmentId === object.departmentId) {\r\n                if (this.isSelectedValue === false) {\r\n                    this.isSelectedValue = true;\r\n                }\r\n\r\n            }\r\n        });\r\n        return this.isSelectedValue;\r\n    }\r\n\r\n}\r\n","module.exports = \"<h1 mat-dialog-title\\r\\n    style=\\\"text-transform: uppercase;\\\">Copy Privileges</h1>\\r\\n<mat-dialog-content>\\r\\n\\t<div fxLayout=\\\"row\\\"\\r\\n\\t     fxLayoutAlign=\\\"none start\\\"\\r\\n\\t     fxLayoutWrap\\r\\n\\t     fxLayoutGap=\\\"10px\\\">\\r\\n\\t\\t<div fxFlex=\\\"100%\\\"\\r\\n\\t\\t     fxFlex.xs=\\\"100%\\\"\\r\\n\\t\\t     fxFlex.sm=\\\"100%\\\">\\r\\n\\t\\t\\t<p>Whose privileges do you want to copy ?</p>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div fxLayout=\\\"column\\\"\\r\\n\\t     fxLayoutAlign=\\\"none center\\\"\\r\\n\\t     fxLayoutWrap\\r\\n\\t     fxLayoutGap=\\\"10px\\\">\\r\\n\\t\\t<form [formGroup]=\\\"userForm\\\">\\r\\n\\t\\t\\t<input formControlName=\\\"userCtrl\\\"\\r\\n\\t\\t\\t       placeholder=\\\"Select User\\\"\\r\\n\\t\\t\\t       required\\r\\n\\t\\t\\t       matInput\\r\\n\\t\\t\\t       [matAutocomplete]=\\\"User.autocomplete\\\">\\r\\n\\t\\t\\t<atlas-api-collection-autocomplete-dropdown #User=\\\"apiCollectionAutocompleteDropdown\\\"\\r\\n\\t\\t\\t                                            [apiCollection]=\\\"filteredUsers\\\"\\r\\n\\t\\t\\t                                            displayProperty=\\\"displayName\\\">\\r\\n\\t\\t\\t</atlas-api-collection-autocomplete-dropdown>\\r\\n\\t\\t\\t<mat-error *ngIf=\\\"userCtrl.hasError('inDropdownList')\\\">\\r\\n\\t\\t\\t\\tIncorrect value\\r\\n\\t\\t\\t</mat-error>\\r\\n\\t\\t</form>\\r\\n\\t</div>\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions style=\\\"margin-top:20px; text-align: right; display: block;\\\">\\r\\n\\t<span class=\\\"fill-space\\\"></span>\\r\\n\\t<button mat-button\\r\\n\\t        (click)=\\\"onCloseCancel()\\\">Cancel</button>\\r\\n\\t<button mat-raised-button\\r\\n\\t        (click)=\\\"onCloseConfirm()\\\">Import</button>\\r\\n</mat-dialog-actions>\\r\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { debounceTime, switchMap } from 'rxjs/operators';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { User } from '../../../../../shared/entities/user.entity';\r\nimport { ApiCollection } from '../../../../../shared/services/common/models';\r\nimport { UserIdentityService } from '../../../../../shared/services/http-services/user-identity.service';\r\n\r\n@Component({\r\n\tselector: \"atlas-copy-privileges-dialog\",\r\n\ttemplateUrl: \"./copy-privileges-dialog.component.html\",\r\n\tstyleUrls: [\"./copy-privileges-dialog.component.scss\"],\r\n})\r\nexport class CopyPrivilegesDialogComponent implements OnInit {\r\n\tfilteredUsers: Observable<ApiCollection<User>>;\r\n\tuserForm: FormGroup;\r\n\tuserCtrl: FormControl;\r\n\r\n\tconstructor(\r\n\t\tpublic thisDialogRef: MatDialogRef<CopyPrivilegesDialogComponent>,\r\n\t\tpublic userIdentityService: UserIdentityService,\r\n\t\tprivate fb: FormBuilder,\r\n\t) {\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.userCtrl = new FormControl();\r\n\t\tthis.userForm = this.fb.group({\r\n\t\t\tuserCtrl: this.userCtrl,\r\n\t\t});\r\n\t\tthis.filteredUsers = this.userCtrl\r\n\t\t\t.valueChanges\r\n\t\t\t.pipe(\r\n\t\t\t\tdebounceTime(300),\r\n\t\t\t\tswitchMap((value) => value.length > 2\r\n\t\t\t\t\t? this.userIdentityService.searchUserByName(value)\r\n\t\t\t\t\t: []));\r\n\t}\r\n\r\n\tonCloseConfirm() {\r\n\t\tlet user = this.userCtrl.value as User;\r\n\t\tif (user.userId) {\r\n\t\t\tthis.thisDialogRef.close(user);\r\n\t\t} else {\r\n\t\t\tthis.userCtrl.setErrors({ 'inDropdownList': true });\r\n\t\t}\r\n\t}\r\n\r\n\tonCloseCancel() {\r\n\t\tthis.thisDialogRef.close(null);\r\n\t}\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"custom-form\\\"\\r\\n         [class.isEmpty]=\\\"!formCtrl.value\\\"\\r\\n         [class.required-field]=\\\"true\\\">\\r\\n        <mat-form-field>\\r\\n            <input #input\\r\\n                   required\\r\\n                   matInput\\r\\n                   [matAutocomplete]=\\\"autocomplete\\\"\\r\\n                   [placeholder]=\\\"placeholder\\\"\\r\\n                   formControlName=\\\"formCtrl\\\"\\r\\n                   (focus)=\\\"clearValueEvent()\\\"\\r\\n                   (focusout)=\\\"setValueEvent($event, autocomplete)\\\"\\r\\n                   (click)=\\\"openAutocompletePanel()\\\">\\r\\n            <mat-icon class=\\\"bookmark-icon\\\"\\r\\n                      matSuffix>bookmark</mat-icon>\\r\\n            <mat-autocomplete #autocomplete=\\\"matAutocomplete\\\"\\r\\n                              (optionSelected)=\\\"selectionChanged($event); input.value=''\\\">\\r\\n                <mat-option *ngIf=\\\"allDepartmentsOption.departmentId.toString().startsWith(input.value)\\\"\\r\\n                            [value]=\\\"allDepartmentsOption\\\">\\r\\n                    <mat-checkbox [checked]=\\\"allSelected\\\">\\r\\n                        All\\r\\n                    </mat-checkbox>\\r\\n                </mat-option>\\r\\n                <mat-option *ngFor=\\\"let object of filteredObjects\\\"\\r\\n                            [value]=\\\"object\\\">\\r\\n\\r\\n                    <mat-checkbox [checked]=\\\"allSelected ? true : isSelected(object)\\\">\\r\\n                        <span *ngIf=\\\"displayCode\\\">{{ object[codeProperty] }}</span>\\r\\n                        <span *ngIf=\\\"object[codeProperty] !== null && displayCode\\\"> | </span>\\r\\n                        <span>{{ object[displayProperty] }}</span>\\r\\n                    </mat-checkbox>\\r\\n                </mat-option>\\r\\n            </mat-autocomplete>\\r\\n            <mat-error *ngIf=\\\"formCtrl.hasError('required')\\\">\\r\\n                Department is required\\r\\n            </mat-error>\\r\\n            <mat-hint>\\r\\n                Required *\\r\\n            </mat-hint>\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</div>\"","module.exports = \".optionAll {\\n  border-bottom-color: black; }\\n\"","import { Component, Input } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material';\r\nimport { SelectMultipleAutocompleteComponent } from '../../../../../../shared/components/select-multiple-autocomplete/select-multiple-autocomplete.component';\r\nimport { Department } from '../../../../../../shared/entities/department.entity';\r\n\r\n@Component({\r\n    selector: 'atlas-department-dropdown',\r\n    templateUrl: './department-dropdown.component.html',\r\n    styleUrls: ['./department-dropdown.component.scss'],\r\n})\r\nexport class DepartmentDropdownComponent extends SelectMultipleAutocompleteComponent {\r\n\r\n    @Input() objects: Department[] = [];\r\n    @Input() allSelected = true;\r\n    displayCode = true;\r\n    valueProperty: string = 'departmentId';\r\n    codeProperty: string = 'departmentCode';\r\n    displayProperty: string = 'description';\r\n    placeholder: string = 'Department';\r\n    allDepartmentsOption: Department = {\r\n        departmentId: 0,\r\n        departmentCode: 'All',\r\n        description: 'All',\r\n        profitCenterId: 0,\r\n        companyId: 0,\r\n        companyCode: null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.allSelected) {\r\n            this.selectedValues = this.objects.map((o) => o);\r\n        }\r\n        this.initForm();\r\n    }\r\n\r\n    selectionChanged(event: MatAutocompleteSelectedEvent): void {\r\n        if (!event.option) { return; }\r\n        const object = event.option.value;\r\n\r\n        if (object === this.allDepartmentsOption) {\r\n            this.allSelected = !this.allSelected;\r\n            this.resetSelected();\r\n        } else {\r\n            if (!this.isSelected(object)) {\r\n                this.selectedValues.push(object);\r\n            } else {\r\n                this.deselect(object);\r\n            }\r\n            this.allSelected = this.selectedValues.length === this.objects.length;\r\n        }\r\n    }\r\n\r\n    setValue() {\r\n        if (this.allSelected) {\r\n            this.formCtrl.setValue(this.allDepartmentsOption.description);\r\n        } else {\r\n            this.formCtrl.setValue(this.selectedValues.map((s) => s[this.displayProperty].trim()).sort().join(', '));\r\n        }\r\n    }\r\n\r\n    resetSelected() {\r\n        this.selectedValues = this.allSelected ? this.objects.map((o) => o) : [];\r\n    }\r\n}\r\n","module.exports = \"<div [formGroup]=\\\"permissionForm\\\"\\r\\n     fxLayout=\\\"column\\\"\\r\\n     fxFlex=\\\"100%\\\">\\r\\n    <div fxLayout=\\\"row\\\"\\r\\n         fxLayoutAlign=\\\"none center\\\"\\r\\n         fxLayoutGap=\\\"10px\\\"\\r\\n         class=\\\"atr-user-configuration\\\">\\r\\n        <div fxFlex=\\\"25%\\\"\\r\\n             fxFlex.xs=\\\"100%\\\"\\r\\n             class=\\\"custom-form\\\"\\r\\n             [class.isEmpty]=\\\"!companyCtrl.value\\\"\\r\\n             [class.required-field]=\\\"true\\\">\\r\\n            <mat-form-field>\\r\\n                <input required\\r\\n                       matInput\\r\\n                       [matAutocomplete]=\\\"company\\\"\\r\\n                       autocomplete=\\\"off\\\"\\r\\n                       placeholder=\\\"Company\\\"\\r\\n                       formControlName=\\\"companyCtrl\\\">\\r\\n                <mat-autocomplete #company=\\\"matAutocomplete\\\">\\r\\n                    <mat-option *ngFor=\\\"let company of filteredCompanies\\\"\\r\\n                                [value]=\\\"company.companyId\\\">{{company.companyId}}</mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"permissionForm.get('companyCtrl').hasError('required')\\\">\\r\\n                    Company is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"permissionForm.get('companyCtrl').hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n                <mat-hint>\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"25%\\\"\\r\\n             fxFlex.xs=\\\"100%\\\"\\r\\n             class=\\\"custom-form\\\"\\r\\n             [class.isEmpty]=\\\"!profileCtrl.value\\\"\\r\\n             [class.required-field]=\\\"true\\\">\\r\\n            <mat-form-field>\\r\\n                <input required\\r\\n                       matInput\\r\\n                       [matAutocomplete]=\\\"profile\\\"\\r\\n                       placeholder=\\\"Profile\\\"\\r\\n                       formControlName=\\\"profileCtrl\\\">\\r\\n                <mat-autocomplete #profile=\\\"matAutocomplete\\\">\\r\\n                    <mat-option *ngFor=\\\"let profile of filteredProfiles\\\"\\r\\n                                [value]=\\\"profile.name\\\">{{profile.name}}</mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"permissionForm.get('profileCtrl').hasError('required')\\\">\\r\\n                    Profile is required\\r\\n                </mat-error>\\r\\n                <mat-error *ngIf=\\\"permissionForm.get('profileCtrl').hasError('inDropdownList')\\\">\\r\\n                    Value not in list\\r\\n                </mat-error>\\r\\n                <mat-hint>\\r\\n                    Required *\\r\\n                </mat-hint>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"25%\\\"\\r\\n             fxFlex.xs=\\\"100%\\\">\\r\\n            <atlas-multiple-autocomplete-dropdown #multipleAutocompleteDropdownComponent\\r\\n                                                  [options]=\\\"departments\\\"\\r\\n                                                  [selectedOptions]=\\\"permission.departments\\\"\\r\\n                                                  [allOptionsElement]=\\\"allOptionsElement\\\"\\r\\n                                                  [allSelected]=\\\"permission.allDepartments\\\"\\r\\n                                                  displayCode=\\\"true\\\"\\r\\n                                                  codeProperty='departmentCode'\\r\\n                                                  displayProperty='description'\\r\\n                                                  placeholder='Department *'\\r\\n                                                  placeholderFilter='Department Name'\\r\\n                                                  elementName='Department'\\r\\n                                                  [fieldCtrl]=\\\"fieldCtrl\\\">\\r\\n            </atlas-multiple-autocomplete-dropdown>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"10%\\\"\\r\\n             fxFlex.xs=\\\"100%\\\">\\r\\n            <mat-checkbox formControlName=\\\"traderCtrl\\\">Trader</mat-checkbox>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"15%\\\"\\r\\n             fxFlex.xs=\\\"100%\\\">\\r\\n\\r\\n            <mat-checkbox formControlName=\\\"charterManagerCtrl\\\">Charter Manager</mat-checkbox>\\r\\n\\r\\n        </div>\\r\\n        <div fxFlex=\\\"25%\\\"\\r\\n             fxFlex.xs=\\\"100%\\\">\\r\\n            <button type=\\\"button\\\"\\r\\n                    *ngIf='isNew'\\r\\n                    mat-button\\r\\n                    class=\\\"add-privileges-button\\\"\\r\\n                    (click)=\\\"addPermission()\\\">ADD</button>\\r\\n            <a mat-icon-button\\r\\n               *ngIf='!isNew'\\r\\n               (click)=\\\"removePermission()\\\">\\r\\n                <mat-icon>close</mat-icon>\\r\\n            </a>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \".add-privileges-button {\\n  float: right; }\\n\"","import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { MultipleAutocompleteDropdownComponent } from '../../../../../shared/components/multiple-autocomplete-dropdown/multiple-autocomplete-dropdown.component';\r\nimport { inDropdownListValidator } from '../../../../../shared/directives/autocomplete-dropdown.directive';\r\nimport { Company } from '../../../../../shared/entities/company.entity';\r\nimport { Department } from '../../../../../shared/entities/department.entity';\r\nimport { MasterDataProps } from '../../../../../shared/entities/masterdata-props.entity';\r\nimport { MasterData } from '../../../../../shared/entities/masterdata.entity';\r\nimport { Profile } from '../../../../../shared/entities/profile.entity';\r\nimport { UserPermission } from '../../../../../shared/entities/user-permission.entity';\r\nimport { MasterdataService } from '../../../../../shared/services/http-services/masterdata.service';\r\nimport { SnackbarService } from '../../../../../shared/services/snackbar.service';\r\nimport { nameof } from '../../../../../shared/services/util.service';\r\n\r\n@Component({\r\n    selector: 'permission-line',\r\n    templateUrl: './permission-line.component.html',\r\n    styleUrls: ['./permission-line.component.scss'],\r\n})\r\nexport class PermissionLineComponent implements OnInit {\r\n\r\n    @Input() companies: Company[] = [];\r\n    @Input() profiles: Profile[] = [];\r\n\r\n    @Input() permission: UserPermission = new UserPermission();\r\n    @Input() permissionList: UserPermission[] = [];\r\n    @Input() isNew = false;\r\n    @Input() isTrader = false;\r\n    @Input() isCharterManager = false;\r\n    @Input() gridApi: agGrid.GridApi;\r\n    @ViewChild('multipleAutocompleteDropdownComponent') multipleAutocompleteDropdownComponent: MultipleAutocompleteDropdownComponent;\r\n    @Output() readonly removePermissionEvent = new EventEmitter();\r\n\r\n    // New component Input\r\n    allOptionsElement: Department = {\r\n        departmentId: 0,\r\n        departmentCode: 'All',\r\n        description: 'All',\r\n        profitCenterId: 0,\r\n        companyId: 0,\r\n        companyCode: null,\r\n    };\r\n\r\n    fieldCtrl: FormControl;\r\n\r\n    public permissionForm: FormGroup;\r\n    companyCtrl: FormControl;\r\n    profileCtrl: FormControl;\r\n    departmentCtrl: FormControl;\r\n    allDepartmentsCtrl: FormControl;\r\n    filteredCompanies: Company[];\r\n    filteredProfiles: any[];\r\n    traderCtrl: FormControl;\r\n    charterManagerCtrl: FormControl;\r\n    departments: Department[] = [];\r\n\r\n    constructor(private snackBarService: SnackbarService,\r\n        private masterDataService: MasterdataService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.fieldCtrl = new FormControl('', [Validators.required]);\r\n        this.initForm();\r\n        this.initDepartments(true);\r\n    }\r\n\r\n    initDepartments(isLoad = false) {\r\n        if (this.permission.companyId != null) {\r\n            this.masterDataService.getMasterData(\r\n                [MasterDataProps.Departments],\r\n                this.permission.companyId).subscribe((masterData: MasterData) => {\r\n                    this.departments = masterData.departments;\r\n                    this.multipleAutocompleteDropdownComponent.options = this.departments;\r\n                    this.multipleAutocompleteDropdownComponent.optionsChanged();\r\n                    if (isLoad) {\r\n                        this.multipleAutocompleteDropdownComponent.selectedOptions = this.permission.departments;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    initForm() {\r\n        this.companyCtrl = new FormControl({ value: this.permission.companyId, disabled: !this.isNew }, [Validators.required]);\r\n        this.profileCtrl = new FormControl({ value: this.permission.profileName }, [Validators.required]);\r\n        this.departmentCtrl = new FormControl();\r\n        this.allDepartmentsCtrl = new FormControl();\r\n        this.traderCtrl = new FormControl();\r\n        this.charterManagerCtrl = new FormControl();\r\n        this.addValidators();\r\n\r\n        this.permissionForm = new FormGroup({\r\n            companyCtrl: this.companyCtrl,\r\n            profileCtrl: this.profileCtrl,\r\n            allDepartmentsCtrl: this.allDepartmentsCtrl,\r\n            departmentCtrl: this.departmentCtrl,\r\n            traderCtrl: this.traderCtrl,\r\n            charterManagerCtrl: this.charterManagerCtrl,\r\n        });\r\n\r\n        this.permissionForm.patchValue({\r\n            companyCtrl: this.permission.companyId,\r\n            profileCtrl: this.permission.profileName,\r\n            traderCtrl: this.permission.isTrader,\r\n            charterManagerCtrl: this.permission.isCharterManager,\r\n        });\r\n        this.initAutocomplete();\r\n        this.companyCtrl.valueChanges.subscribe((company) => {\r\n            this.filteredCompanies = this.getAvailableCompanies().filter((c: Company) => c.companyId.startsWith(company));\r\n            this.permission.companyId = company;\r\n            this.initDepartments();\r\n        });\r\n        this.profileCtrl.valueChanges.subscribe((profile) => {\r\n            this.filteredProfiles = this.profiles.filter((p: any) => p.name.startsWith(profile));\r\n        });\r\n    }\r\n\r\n    addValidators() {\r\n        this.companyCtrl.setValidators(Validators.compose([Validators.required,\r\n        inDropdownListValidator(this.companies, nameof<Company>('companyId'))]));\r\n        this.profileCtrl.setValidators(Validators.compose([Validators.required,\r\n        inDropdownListValidator(this.profiles, nameof<Profile>('name'))]));\r\n    }\r\n\r\n    initAutocomplete() {\r\n        this.filteredCompanies = this.getAvailableCompanies(this.permission.companyId);\r\n        this.filteredProfiles = this.profiles\r\n            .filter((p) => this.profileCtrl.value == null || p.name.startsWith(this.profileCtrl.value));\r\n        this.isTrader = this.isTrader;\r\n        this.isCharterManager = this.isCharterManager;\r\n    }\r\n\r\n    getAvailableCompanies(company: string = ''): Company[] {\r\n        const companiesUsed = this.permissionList.map((p) => p.companyId).filter((c) => c !== company);\r\n        return this.companies.filter((c) => companiesUsed.indexOf(c.companyId) === -1);\r\n    }\r\n\r\n    addPermission() {\r\n        if ((this.multipleAutocompleteDropdownComponent.selectedOptions.length > 0 ||\r\n            this.multipleAutocompleteDropdownComponent.allSelected) && this.permissionForm.valid\r\n            && this.getAvailableCompanies().filter((c) => c.companyId === this.companyCtrl.value).length > 0) {\r\n            const newPermission = new UserPermission();\r\n            newPermission.companyId = this.companyCtrl.value;\r\n            newPermission.profileName = this.profileCtrl.value;\r\n            newPermission.allDepartments = this.multipleAutocompleteDropdownComponent.allSelected;\r\n\r\n            if (this.multipleAutocompleteDropdownComponent.allSelected) {\r\n                newPermission.departments = this.departments;\r\n            } else {\r\n                newPermission.departments = this.multipleAutocompleteDropdownComponent.getSelectedOptions();\r\n            }\r\n\r\n            const profileSelected = this.profiles.find((profile) => profile.name === newPermission.profileName);\r\n            newPermission.profileId = profileSelected ? profileSelected.profileId : null;\r\n\r\n            newPermission.isTrader = this.traderCtrl.value ? true : false;\r\n            newPermission.isCharterManager = this.charterManagerCtrl.value ? true : false;\r\n\r\n            this.permissionList.push(newPermission);\r\n\r\n            this.multipleAutocompleteDropdownComponent.resetComponent();\r\n\r\n            this.permissionForm.reset();\r\n            this.initAutocomplete();\r\n\r\n            this.gridApi.updateRowData({ add: [newPermission] });\r\n        } else {\r\n            this.snackBarService.throwErrorSnackBar('This permission is not valid');\r\n        }\r\n    }\r\n\r\n    removePermission() {\r\n        this.removePermissionEvent.emit(this.companyCtrl.value);\r\n    }\r\n}\r\n","module.exports = \"<form [formGroup]=\\\" userForm\\\">\\r\\n    <header class=\\\"header-background\\\">\\r\\n        <div class=\\\"header-content\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div class=\\\"atlas-user-card-username\\\">{{model.displayName}}</div>\\r\\n                <mat-chip-list class=\\\"chip-list\\\">\\r\\n                    <mat-chip selected\\r\\n                              disabled\\r\\n                              *ngIf=\\\"model.email\\\">\\r\\n                        <mat-icon class=\\\"atlas-user-card-icon-font\\\">email</mat-icon>{{model.email}}\\r\\n                    </mat-chip>\\r\\n                    <mat-chip selected\\r\\n                              disabled\\r\\n                              *ngIf=\\\"model.phoneNumber\\\">\\r\\n                        <mat-icon class=\\\"atlas-user-card-icon-font\\\">phone</mat-icon>{{model.phoneNumber}}\\r\\n                    </mat-chip>\\r\\n                    <mat-chip selected\\r\\n                              disabled\\r\\n                              *ngIf=\\\"model.userId\\\">\\r\\n                        <mat-icon class=\\\"atlas-user-card-icon-font\\\">person</mat-icon>{{model.samAccountName}}\\r\\n                    </mat-chip>\\r\\n                    <mat-chip selected\\r\\n                              disabled\\r\\n                              *ngIf=\\\"model.location\\\">\\r\\n                        <mat-icon class=\\\"atlas-user-card-icon-font\\\">place</mat-icon>\\r\\n                        {{model.location}}\\r\\n                    </mat-chip>\\r\\n                </mat-chip-list>\\r\\n            </div>\\r\\n            <div class=\\\"metadata-text\\\">\\r\\n                <div fxLayout=\\\"column\\\"\\r\\n                     fxLayoutAlign=\\\"none start\\\">\\r\\n                    <div fxFlex=\\\"20%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\"\\r\\n                         fxFlex.sm=\\\"100%\\\"\\r\\n                         *ngIf=\\\"model.createdBy || model.createdDateTime\\\">\\r\\n                        Created by {{ model.createdBy }} on\\r\\n                        <atr-date-label [date]=\\\"model.createdDateTime\\\"></atr-date-label>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"100%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\"\\r\\n                         fxFlex.sm=\\\"100%\\\"\\r\\n                         *ngIf=\\\"model.modifiedDateTime || model.modifiedBy\\\">\\r\\n                        Last Updated {{ model.modifiedBy ? 'by ' + model.modifiedBy : '' }}\\r\\n                        {{ model.modifiedDateTime ? 'on' : '' }}\\r\\n                        <atr-date-label *ngIf=\\\"model.modifiedDateTime\\\"\\r\\n                                        [date]=\\\"model.modifiedDateTime\\\"></atr-date-label>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"100%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\"\\r\\n                         fxFlex.sm=\\\"100%\\\"\\r\\n                         *ngIf=\\\"model.lastConnectionDateTime\\\">\\r\\n                        Last Date Accessed on\\r\\n                        <atr-date-label [date]=\\\"model.lastConnectionDateTime\\\"></atr-date-label>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </header>\\r\\n\\r\\n\\r\\n    <mat-toolbar class=\\\"menu-bar\\\">\\r\\n        <div class=\\\"toolbar-div\\\">\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"start center\\\"\\r\\n                 fxFlex=\\\"40\\\">\\r\\n                <button mat-button\\r\\n                        (click)=\\\"onCopyUserPermissionsButtonClicked($event)\\\">\\r\\n                    Copy Privileges\\r\\n                </button>\\r\\n                <button mat-button\\r\\n                        *ngIf=\\\"!isCreation\\\"\\r\\n                        (click)=\\\"onDeleteButtonClicked()\\\">\\r\\n                    Delete\\r\\n                </button>\\r\\n            </div>\\r\\n\\r\\n            <span class=\\\"fill-space\\\"></span>\\r\\n\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"end center\\\"\\r\\n                 fxFlex=\\\"20\\\"\\r\\n                 fxLayoutGap=\\\"16px\\\">\\r\\n                <div *ngIf=\\\"!isCreation\\\"\\r\\n                     class=\\\"toggle active-user\\\">\\r\\n                    <span class=\\\"atlas-toggle-span\\\">\\r\\n                        {{\\r\\n userForm.get('isUserDisabledCtrl').value ? 'Active' :\\r\\n                        'Inactive'\\r\\n                        }} User\\r\\n                    </span>\\r\\n                    <mat-slide-toggle formControlName=\\\"isUserDisabledCtrl\\\">\\r\\n                    </mat-slide-toggle>\\r\\n                </div>\\r\\n                <a (click)=\\\"onValidateButtonClicked()\\\"\\r\\n                   matTooltip=\\\"Save the user\\\"\\r\\n                   class=\\\"menu-bar-action-icon\\\">\\r\\n                    <div class=\\\"white-icon outline-save-icon\\\"></div>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </mat-toolbar>\\r\\n\\r\\n    <div class=\\\"main-container\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-title>\\r\\n                <h2>\\r\\n                    Configuration\\r\\n                </h2>\\r\\n            </mat-card-title>\\r\\n            <mat-card-content>\\r\\n                <div fxLayout=\\\"row\\\"\\r\\n                     fxLayoutAlign=\\\"none center\\\"\\r\\n                     fxLayoutGap=\\\"10px\\\">\\r\\n                    <div fxFlex=\\\"25%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   value={{model.companyRole}}\\r\\n                                   readonly\\r\\n                                   placeholder=\\\"Company Role\\\"\\r\\n                                   aria-label=\\\"Company Role\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"25%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   value={{model.managerSamAccountName}}\\r\\n                                   readonly\\r\\n                                   placeholder=\\\"Manager\\\"\\r\\n                                   aria-label=\\\"Manager\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n\\r\\n                    <div fxFlex=\\\"25%\\\"\\r\\n                         fxFlex.xs=\\\"100%\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput\\r\\n                                   placeholder=\\\"Favorite Language\\\"\\r\\n                                   aria-label=\\\"Favorite Language\\\"\\r\\n                                   formControlName=\\\"favoriteLanguageCtrl\\\"\\r\\n                                   autocomplete=\\\"off\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n\\r\\n        </mat-card>\\r\\n        <mat-card>\\r\\n            <mat-card-title>\\r\\n                <h2>\\r\\n                    Privileges\\r\\n                </h2>\\r\\n            </mat-card-title>\\r\\n            <mat-card-content>\\r\\n                <permission-line #permissionLineComponent\\r\\n                                 [companies]=\\\"filteredCompanies\\\"\\r\\n                                 [profiles]=\\\"profiles\\\"\\r\\n                                 [departments]=\\\"masterData.departments\\\"\\r\\n                                 [isNew]=true\\r\\n                                 [(permissionList)]=\\\"model.permissions\\\"\\r\\n                                 [(gridApi)]=\\\"gridApi\\\"></permission-line>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n        <mat-card class=\\\"granted-privileges-card\\\">\\r\\n            <div fxLayout=\\\"row\\\">\\r\\n                <div>\\r\\n                    <mat-card-title>\\r\\n                        <h2 class=\\\"atlas-grid-card-title\\\">\\r\\n                            Granted Privileges\\r\\n                        </h2>\\r\\n                    </mat-card-title>\\r\\n                </div>\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <div>\\r\\n                    <button mat-icon-button\\r\\n                            [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n                        <i class=\\\"material-icons\\\">more_vert</i>\\r\\n                    </button>\\r\\n                    <mat-menu #menu1=\\\"matMenu\\\">\\r\\n                        <button mat-menu-item\\r\\n                                [matMenuTriggerFor]=\\\"exportMenu\\\"\\r\\n                                (mouseover)=\\\"OnExportButton()\\\">\\r\\n                            <mat-icon>import_export</mat-icon><span>Export</span>\\r\\n                        </button>\\r\\n                    </mat-menu>\\r\\n                    <mat-menu #exportMenu=\\\"matMenu\\\">\\r\\n                        <button mat-menu-item\\r\\n                                (click)=\\\"onExportButtonClickedAsExcel()\\\">\\r\\n                            <mat-icon>import_export</mat-icon><span>Export as Excel</span>\\r\\n                        </button>\\r\\n                        <button mat-menu-item\\r\\n                                (click)=\\\"onExportButtonClickedAsCSV()\\\">\\r\\n                            <mat-icon>import_export</mat-icon><span>Export as CSV</span>\\r\\n                        </button>\\r\\n                    </mat-menu>\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n\\r\\n\\r\\n            <mat-card-content>\\r\\n                <div ag-grid=\\\"charterGridOptions\\\"\\r\\n                     class=\\\"ag-theme-material pointer-cursor atr-grid\\\">\\r\\n                    <ag-grid-angular style=\\\" height:100%; width:100%;\\\"\\r\\n                                     class=\\\"ag-theme-material atr-grid\\\"\\r\\n                                     [rowData]=\\\"model.permissions\\\"\\r\\n                                     [columnDefs]=\\\"userGridCols\\\"\\r\\n                                     [enableColResize]=\\\"false\\\"\\r\\n                                     [enableSorting]=\\\"false\\\"\\r\\n                                     [pagination]=\\\"false\\\"\\r\\n                                     [paginationPageSize]=\\\"10\\\"\\r\\n                                     [context]=\\\"gridContext\\\"\\r\\n                                     [frameworkComponents]=\\\"gridComponents\\\"\\r\\n                                     [singleClickEdit]=true\\r\\n                                     [stopEditingWhenGridLosesFocus]=\\\"true\\\"\\r\\n                                     domLayout=autoHeight\\r\\n                                     (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                     [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\">\\r\\n                    </ag-grid-angular>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n\\r\\n        <div class=\\\"btn-container\\\">\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start start\\\">\\r\\n                <button type=\\\"button\\\"\\r\\n                        *ngIf=\\\"!isCreation\\\"\\r\\n                        (click)=\\\"onCancelButtonClicked()\\\"\\r\\n                        mat-button>\\r\\n                    Cancel\\r\\n                </button>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"50\\\"\\r\\n                 fxLayout=\\\"row\\\"\\r\\n                 fxAlignLayout=\\\"start end\\\">\\r\\n                <span class=\\\"fill-space\\\"></span>\\r\\n                <button type=\\\"button\\\"\\r\\n                        mat-raised-button\\r\\n                        (click)=\\\"onValidateButtonClicked()\\\">\\r\\n                    SAVE\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <atlas-lock-interval [resourcesInformation]=\\\"resourcesInformation\\\">\\r\\n    </atlas-lock-interval>\\r\\n</form>\"","module.exports = \".ag-theme-material .ag-header {\\n  color: #928D8F !important;\\n  font-family: 12px Roboto !important; }\\n\\n.atlas-user-card-icon-font {\\n  font-size: 16px;\\n  line-height: 24px;\\n  text-align: center; }\\n\\n.atlas-user-card-username {\\n  font-size: 20px;\\n  margin: 8px 0; }\\n\\n.ag-header-row {\\n  border-top-style: none !important; }\\n\\n.atlas-toggle-span {\\n  padding-right: 6px;\\n  font-size: 16px; }\\n\\nbutton.mat-button {\\n  margin-left: 0 !important; }\\n\\nbutton.mat-raised-button {\\n  margin-right: 0 !important; }\\n\\n.btn-container {\\n  margin: 8px 0; }\\n\"","import { DatePipe } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { Subject } from 'rxjs';\r\nimport { mergeMap, takeUntil } from 'rxjs/operators';\r\nimport { AuthorizationService } from '../../../../core/services/authorization.service';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AgContextualMenuComponent } from '../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component';\r\nimport { CellEditorSelectComponent } from '../../../../shared/components/cell-editor-select/cell-editor-select.component';\r\nimport { ConfirmationDialogComponent } from '../../../../shared/components/confirmation-dialog/confirmation-dialog.component';\r\nimport { AgContextualMenuAction } from '../../../../shared/entities/ag-contextual-menu-action.entity';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { Company } from '../../../../shared/entities/company.entity';\r\nimport { Department } from '../../../../shared/entities/department.entity';\r\nimport { DirectoryUser } from '../../../../shared/entities/directory-user.entity';\r\nimport { LockFunctionalContext } from '../../../../shared/entities/lock-functional-context.entity';\r\nimport { LockResourceInformation } from '../../../../shared/entities/lock-resource-information.entity';\r\nimport { MasterData } from '../../../../shared/entities/masterdata.entity';\r\nimport { Profile } from '../../../../shared/entities/profile.entity';\r\nimport { UserPermission } from '../../../../shared/entities/user-permission.entity';\r\nimport { User } from '../../../../shared/entities/user.entity';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { LockService } from '../../../../shared/services/http-services/lock.service';\r\nimport { UserIdentityService } from '../../../../shared/services/http-services/user-identity.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { SnackbarService } from '../../../../shared/services/snackbar.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\nimport { UiService } from '../../../../shared/services/ui.service';\r\nimport { AgGridCheckboxComponent } from './../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component';\r\nimport { AgGridMultipleAutocompleteDepartmentComponent } from './../../../../shared/components/ag-grid/ag-grid-multiple-autocomplete-department/ag-grid-multiple-autocomplete-department.component';\r\nimport { CopyPrivilegesDialogComponent } from './copy-privileges-dialog/copy-privileges-dialog.component';\r\nimport { PermissionLineComponent } from './permission-line/permission-line.component';\r\n\r\n@Component({\r\n    selector: 'atlas-user-manage',\r\n    templateUrl: './user-manage.component.html',\r\n    styleUrls: ['./user-manage.component.scss'],\r\n    providers: [DatePipe],\r\n})\r\nexport class UserManageComponent implements OnInit, OnDestroy {\r\n    isCreation = false;\r\n    submitLabel: string;\r\n    isSave: boolean = false;\r\n    title: string;\r\n    userForm: FormGroup;\r\n    favoriteLanguageCtrl: FormControl;\r\n\r\n    isUserDisabledCtrl: FormControl;\r\n    savingInProgress = false;\r\n    masterData: MasterData = new MasterData();\r\n    filteredCompanies: Company[];\r\n    @ViewChildren('permissionLineComponent') permissionLineComponents: QueryList<PermissionLineComponent>;\r\n\r\n    userInitials: string;\r\n    profiles: Profile[] = [];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n    gridContext: UserManageComponent;\r\n    checkExportedFormat: boolean = false;\r\n    gridComponents = {\r\n        atrSelect: CellEditorSelectComponent,\r\n        atlasCheckbox: AgGridCheckboxComponent,\r\n    };\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n    model: User;\r\n    userGridCols: agGrid.ColDef[];\r\n    userGridContextualMenuActions: AgContextualMenuAction[];\r\n    userMenuActions: { [key: string]: string } = {\r\n        deleteUser: 'delete',\r\n    };\r\n    userActiveDirectoryName: string;\r\n    company: string;\r\n    masterdata: any = [];\r\n    screenName: string = 'UserEdition';\r\n    destroy$ = new Subject();\r\n    resourcesInformation: LockResourceInformation[] = new Array<LockResourceInformation>();\r\n\r\n    constructor(private userIdentityService: UserIdentityService,\r\n        private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private fb: FormBuilder,\r\n        private companyManager: CompanyManagerService,\r\n        private snackbarService: SnackbarService,\r\n        protected dialog: MatDialog,\r\n        private uiService: UiService,\r\n        private datePipe: DatePipe,\r\n        private authorizationService: AuthorizationService,\r\n        protected lockService: LockService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService,\r\n    ) {\r\n        this.model = new User();\r\n        this.model.userPrincipalName = decodeURIComponent(this.route.snapshot.paramMap.get('userId'));\r\n\r\n        this.favoriteLanguageCtrl = new FormControl();\r\n        this.isUserDisabledCtrl = new FormControl({ value: false });\r\n        this.userForm = this.fb.group({\r\n\r\n            favoriteLanguageCtrl: this.favoriteLanguageCtrl,\r\n            isUserDisabledCtrl: this.isUserDisabledCtrl,\r\n        });\r\n        this.userActiveDirectoryName = this.authorizationService.getCurrentUser().samAccountName;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.company = this.route.snapshot.params['company'];\r\n        this.masterdata = this.route.snapshot.data.masterdata;\r\n        this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        this.securityService.isSecurityReady().pipe(\r\n            mergeMap(() => {\r\n                return this.route.data;\r\n            }))\r\n            .subscribe((data) => {\r\n                this.userGridContextualMenuActions = [\r\n                    {\r\n                        icon: 'delete',\r\n                        text: 'Delete',\r\n                        action: this.userMenuActions.deleteUser,\r\n                    },\r\n                ];\r\n                this.isCreation = data.isCreation;\r\n                this.getData();\r\n            });\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.userForm.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getData() {\r\n        this.masterData = this.route.snapshot.data['masterdata'] as MasterData;\r\n        this.filteredCompanies = this.masterData.companies;\r\n        this.getUser();\r\n    }\r\n\r\n    getUser() {\r\n        if (this.isCreation === true) {\r\n            this.titleService.setTitle(this.route.snapshot.data.title);\r\n            this.userIdentityService.getDirectoryUserById(this.model.userPrincipalName)\r\n                .subscribe((data) => {\r\n                    this.model = this.mapToUser(data);\r\n                    this.initView();\r\n                });\r\n        } else {\r\n\r\n            this.userIdentityService.getUserByUpn(this.model.userPrincipalName).subscribe((data) => {\r\n                this.model = data;\r\n                this.titleService.setTitle(this.model.displayName + '- User Edition');\r\n                this.startLockRefresh(this.model.userId, this.model.samAccountName);\r\n                this.lockService.lockUserAccount(this.model.userId, LockFunctionalContext.UserAccountEdition).pipe(takeUntil(this.destroy$)).subscribe(\r\n                    (data) => { },\r\n                    (err) => {\r\n                        this.dialog.open(ConfirmationDialogComponent, {\r\n                            data: {\r\n                                title: 'Lock',\r\n                                text: err.error.detail,\r\n                                okButton: 'Got it',\r\n                            },\r\n                        });\r\n                        this.goToUserList();\r\n                    });\r\n                this.initView();\r\n            });\r\n        }\r\n    }\r\n\r\n    initView() {\r\n        this.userIdentityService.getAllProfiles().subscribe((data) => {\r\n            this.profiles = data.value;\r\n            this.permissionLineComponents.forEach((plc) => {\r\n                plc.permissionList = this.model.permissions;\r\n                plc.profiles = this.profiles;\r\n                plc.initAutocomplete();\r\n                plc.addValidators();\r\n                this.initUserGridColumns();\r\n            });\r\n        });\r\n\r\n        if (this.model.firstName !== null && this.model.lastName !== null) {\r\n            this.userInitials = (this.model.firstName.substr(0, 1) + this.model.lastName.substr(0, 2)).toUpperCase();\r\n        }\r\n        this.favoriteLanguageCtrl.patchValue(this.model.favoriteLanguage);\r\n\r\n        this.isUserDisabledCtrl.patchValue(!this.model.isDisabled);\r\n        this.title = this.isCreation === true ? 'User Creation' : 'Edit User';\r\n        this.submitLabel = this.isCreation === true ? 'CREATE USER' : 'SAVE';\r\n    }\r\n\r\n    onCancelButtonClicked() {\r\n        this.isSave = true;\r\n        this.goToUserList();\r\n    }\r\n\r\n    goToUserList() {\r\n        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/admin/users']);\r\n    }\r\n\r\n    onValidateButtonClicked() {\r\n        this.isSave = true;\r\n        this.savingInProgress = true;\r\n        let isValidForm = true;\r\n        if (!this.userForm.valid) {\r\n            this.snackbarService.throwErrorSnackBar('Please fix errors before saving');\r\n            this.savingInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this.model.permissions.forEach((element) => {\r\n            if (isValidForm && ((!element.departments) || element.departments.length === 0) && !element.allDepartments) {\r\n\r\n                isValidForm = false;\r\n            }\r\n        });\r\n\r\n        if (!isValidForm) {\r\n            this.snackbarService.throwErrorSnackBar('This permission is not valid');\r\n            this.savingInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this.model.favoriteLanguage = this.favoriteLanguageCtrl.value;\r\n\r\n        this.model.isDisabled = !this.isUserDisabledCtrl.value;\r\n        this.model.permissions = this.getUpdatedPermissionsFromForm();\r\n\r\n        if (this.isCreation) {\r\n            this.userIdentityService.createUser(this.model)\r\n                .subscribe(\r\n                    () => {\r\n                        this.snackbarService.informationSnackBar('User has been created successfully.');\r\n                        this.goToUserList();\r\n                    },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    },\r\n                    () => {\r\n                        this.savingInProgress = false;\r\n                    });\r\n        } else {\r\n            this.userIdentityService.updateUser(this.model)\r\n                .subscribe(\r\n                    () => {\r\n                        this.snackbarService.informationSnackBar('User has been updated successfully.');\r\n                        this.goToUserList();\r\n                    },\r\n                    (error) => {\r\n                        console.error(error);\r\n                        this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');\r\n                    },\r\n                    () => {\r\n                        this.savingInProgress = false;\r\n                    });\r\n        }\r\n    }\r\n\r\n    mapToUser(directoryUser: DirectoryUser): User {\r\n        const user = new User();\r\n        user.firstName = directoryUser.firstName;\r\n        user.lastName = directoryUser.lastName;\r\n        user.displayName = directoryUser.displayName;\r\n        if (!user.displayName && user.lastName !== null && user.firstName !== null) {\r\n            user.displayName = user.firstName + ' ' + user.lastName;\r\n        }\r\n        user.userPrincipalName = directoryUser.userPrincipalName;\r\n        user.email = directoryUser.emailAddress;\r\n        user.phoneNumber = directoryUser.phoneNumber ? directoryUser.phoneNumber : '';\r\n        user.location = directoryUser.location ? directoryUser.location : '';\r\n        user.userPrincipalName = directoryUser.userPrincipalName;\r\n        user.samAccountName = directoryUser.samAccountName;\r\n        user.azureObjectIdentifier = directoryUser.userId;\r\n        user.favoriteLanguage = directoryUser.preferredLanguage ? directoryUser.preferredLanguage : '';\r\n        user.managerSamAccountName = directoryUser.managerSamAccountName;\r\n        user.companyRole = directoryUser.companyRole;\r\n        return user;\r\n    }\r\n\r\n    removePermission(companyId: string) {\r\n        this.model.permissions = this.model.permissions.filter((p) => p.companyId !== companyId);\r\n        this.permissionLineComponents.filter((plc) => plc.isNew === true).forEach((plc) => {\r\n            plc.permissionList = this.model.permissions;\r\n            plc.initAutocomplete();\r\n        });\r\n    }\r\n\r\n    getUpdatedPermissionsFromForm(): UserPermission[] {\r\n        this.model.permissions.forEach((plc) => {\r\n            const selectedProfile = this.profiles.find((p) => p.name === plc.profileName);\r\n            plc.profileId = selectedProfile ? selectedProfile.profileId : null;\r\n        });\r\n        return this.model.permissions;\r\n    }\r\n\r\n    onCopyUserPermissionsButtonClicked(event: Event) {\r\n        const copyPrivilegesDialog = this.dialog.open(CopyPrivilegesDialogComponent, {\r\n            width: '560px',\r\n        });\r\n        copyPrivilegesDialog.afterClosed().subscribe((user: User) => {\r\n            if (user) {\r\n                this.userIdentityService.getUserById(user.userId).subscribe((data) => {\r\n                    this.model.permissions = data.permissions;\r\n                });\r\n            }\r\n        });\r\n        event.stopPropagation();\r\n    }\r\n\r\n    onDeleteButtonClicked() {\r\n        this.isSave = true;\r\n        const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n            data: {\r\n                title: 'User Deletion',\r\n                text: 'Deleting a user is permanent. You can create it again, but all his/her permissions will be gone.',\r\n                okButton: 'Delete anyway',\r\n                cancelButton: 'Cancel',\r\n            },\r\n        });\r\n        confirmDialog.afterClosed().subscribe((answer) => {\r\n            if (answer) {\r\n                this.userIdentityService.deleteUser(this.model.userId).subscribe(() => {\r\n                    this.snackbarService.informationSnackBar('User Deleted');\r\n                    this.goToUserList();\r\n                });\r\n            }\r\n        });\r\n    }\r\n    OnExportButton() {\r\n        const filteredDepartments: Department[] = this.masterdata.departments;\r\n        if (!this.checkExportedFormat) {\r\n            this.gridApi.forEachNode((node) => {\r\n                if (!node.data.allDepartments) {\r\n                    if (filteredDepartments && node.data.departments[0].departmentId) {\r\n                        node.data.departments = filteredDepartments\r\n                            .find((dept) => dept.departmentId === node.data.departments[0].departmentId).description;\r\n                    }\r\n                } else {\r\n                    node.data.departments = 'All';\r\n                }\r\n\r\n            });\r\n            this.checkExportedFormat = true;\r\n        }\r\n    }\r\n    onExportButtonClickedAsExcel() {\r\n        this.isSave = true;\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + '.xlsx',\r\n        };\r\n        this.gridApi.exportDataAsExcel(params);\r\n    }\r\n    onExportButtonClickedAsCSV() {\r\n        this.isSave = true;\r\n        const now = new Date();\r\n        const todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();\r\n        const params = {\r\n            fileName: todayDate + '_' + this.company + '_' + this.screenName + '_' + this.userActiveDirectoryName + '.csv',\r\n        };\r\n        this.gridApi.exportDataAsCsv(params);\r\n    }\r\n    initUserGridColumns() {\r\n        this.userGridCols = [\r\n            {\r\n                headerName: 'Company',\r\n                field: 'companyId',\r\n            },\r\n            {\r\n                headerName: 'Profile',\r\n                field: 'profileName',\r\n                cellEditor: 'agRichSelectCellEditor',\r\n                editable: true,\r\n                cellEditorParams: {\r\n                    values: this.profiles.map((profile) => profile.name),\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Departments',\r\n                field: 'departments',\r\n                cellRendererFramework: AgGridMultipleAutocompleteDepartmentComponent,\r\n                cellRendererParams: {\r\n                    isRequired: true,\r\n                    allOptionsElement: {\r\n                        departmentId: 0,\r\n                        departmentCode: 'All',\r\n                        description: 'All',\r\n                        profitCenterId: 0,\r\n                    },\r\n                    displayCode: true,\r\n                    codeProperty: 'departmentCode',\r\n                    displayProperty: 'description',\r\n                    placeholder: null,\r\n                    placeholderFilter: 'Department Name',\r\n                    elementName: 'Department',\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Trader',\r\n                colId: 'isTrader',\r\n                field: 'isTrader',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    params: this.gridContext,\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Charter Manager',\r\n                colId: 'isCharterManager',\r\n                field: 'isCharterManager',\r\n                cellRenderer: 'atlasCheckbox',\r\n                cellRendererParams: {\r\n                    params: this.gridContext,\r\n                },\r\n            },\r\n            {\r\n                headerName: '',\r\n                cellRendererFramework: AgContextualMenuComponent,\r\n                cellRendererParams: {\r\n                    context: {\r\n                        componentParent: this,\r\n                    },\r\n                    menuActions: this.userGridContextualMenuActions,\r\n\r\n                },\r\n                cellClass: 'ag-contextual-menu',\r\n                width: 92,\r\n            },\r\n\r\n        ];\r\n\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n        this.gridApi.doLayout();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n            this.gridApi.doLayout();\r\n        };\r\n    }\r\n\r\n    departmentFormatter(params) {\r\n        if (params.data.allDepartments) {\r\n            return 'All';\r\n        } else {\r\n            return params.data.departments.map((x) => x.description);\r\n        }\r\n    }\r\n\r\n    handleAction(action: string, user: UserPermission) {\r\n        switch (action) {\r\n            case this.userMenuActions.deleteUser:\r\n                const confirmDialog = this.dialog.open(ConfirmationDialogComponent, {\r\n                    data: {\r\n                        title: 'Permission Deletion',\r\n                        text: 'Are you sure you want to delete this permission?',\r\n                        okButton: 'Delete anyway',\r\n                        cancelButton: 'Cancel',\r\n                    },\r\n                });\r\n                confirmDialog.afterClosed().subscribe((answer) => {\r\n                    if (answer) {\r\n                        this.removePermission(user.companyId);\r\n                    }\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    startLockRefresh(userId: number, samAccountName: string) {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n        const resourceInformation = new LockResourceInformation();\r\n        resourceInformation.resourceType = 'User Account';\r\n        resourceInformation.resourceId = userId;\r\n        resourceInformation.resourceCode = samAccountName;\r\n        resourceInformation.needRefresh = true;\r\n        this.resourcesInformation.push(resourceInformation);\r\n    }\r\n\r\n    stopLockRefresh() {\r\n        this.resourcesInformation = new Array<LockResourceInformation>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.stopLockRefresh();\r\n        this.lockService.cleanSessionLocks().pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n            this.destroy$.next();\r\n            this.destroy$.complete();\r\n        });\r\n    }\r\n\r\n}\r\n","module.exports = \".custom-line-footer {\\r\\n\\tmargin-top: 50px;\\r\\n\\tmargin-left: 50px;\\r\\n}\\r\\n\\r\\nmat-card {\\r\\n\\tbackground-color: #52C234;\\r\\n}\\r\\n\\r\\n.atr-user-card-body {\\r\\n\\tcolor: white;\\r\\n}\\r\\n\\r\\nbutton,\\r\\n.mat-button[disabled][disabled] {\\r\\n\\tcolor: white;\\r\\n}\\r\\n\\r\\nbutton.search {\\r\\n\\tborder: 1px solid white;\\r\\n\\tborder-radius: 5px;\\r\\n\\tcolor: white;\\r\\n}\\r\\n\"","module.exports = \"<atlas-admin-stepper></atlas-admin-stepper>\\r\\n\\r\\n<div class=\\\"main-container\\\">\\r\\n    <div class=\\\"elevated-container mat-elevation-z1 container-custom\\\">\\r\\n        <form [formGroup]=\\\"userForm\\\">\\r\\n            <mat-card class=\\\"atr-card-header\\\">\\r\\n                <mat-card-title>User Creation</mat-card-title>\\r\\n                <mat-card-content class=\\\"atr-user-card\\\">\\r\\n                    <div fxLayout=\\\"column\\\"\\r\\n                         fxLayoutAlign=\\\"none center\\\"\\r\\n                         fxLayoutWrap\\r\\n                         fxLayoutGap=\\\"20px\\\">\\r\\n                        <div fxFlex=\\\"50%\\\"\\r\\n                             fxFlex.xs=\\\"100%\\\"\\r\\n                             fxFlex.sm=\\\"100%\\\"\\r\\n                             class=\\\"custom-form\\\"\\r\\n                             [class.isEmpty]=\\\"!userIdCtrl.value\\\"\\r\\n                             [class.required-field]=\\\"true\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input required\\r\\n                                       matInput\\r\\n                                       placeholder=\\\"Username\\\"\\r\\n                                       formControlName=\\\"userIdCtrl\\\" />\\r\\n                                <mat-error *ngIf=\\\"userIdCtrl.hasError('required')\\\">\\r\\n                                    Username is Required\\r\\n                                </mat-error>\\r\\n                                <mat-hint>\\r\\n                                    Required *\\r\\n                                </mat-hint>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"50%\\\"\\r\\n                             fxFlex.xs=\\\"100%\\\"\\r\\n                             fxFlex.sm=\\\"100%\\\">\\r\\n                            <button type=\\\"submit\\\"\\r\\n                                    class=\\\"search\\\"\\r\\n                                    mat-button\\r\\n                                    [disabled]=\\\"!userForm.valid\\\"\\r\\n                                    (click)=\\\"getDirectoryUsers()\\\">SEARCH IN ACTIVE DIRECTORY</button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </mat-card-content>\\r\\n            </mat-card>\\r\\n        </form>\\r\\n        <div fxLayout=\\\"column\\\"\\r\\n             fxLayoutAlign=\\\"none center\\\"\\r\\n             fxLayoutWrap\\r\\n             fxLayoutGap=\\\"20px\\\"\\r\\n             class=\\\"user-creation-result\\\">\\r\\n            <div *ngIf=\\\"directoryUsers && !isSearchInProgress\\\"\\r\\n                 fxFlexAlign=\\\"start\\\"\\r\\n                 fxFlexOffset=\\\"10\\\"\\r\\n                 fxFlex=\\\"80\\\"\\r\\n                 fxFlex.xs=\\\"100%\\\"\\r\\n                 fxFlex.sm=\\\"100%\\\">\\r\\n                <h3>{{ directoryUsers.length }} {{ directoryUsers.length > 1 ? 'Results' : 'Result'}} for \\\"{{\\r\\n                    searchTerm }}\\\"</h3>\\r\\n            </div>\\r\\n            <div *ngIf=\\\"directoryUsers && !isSearchInProgress\\\"\\r\\n                 fxFlex=\\\"100%\\\"\\r\\n                 fxFlex.xs=\\\"100%\\\"\\r\\n                 fxFlex.sm=\\\"100%\\\"\\r\\n                 ag-grid=\\\"userGridOptions\\\"\\r\\n                 class=\\\"ag-theme-material pointer-cursor\\\"\\r\\n                 style=\\\"width: 100%; height: 100%\\\">\\r\\n                <ag-grid-angular style=\\\" height: 100%;\\\"\\r\\n                                 class=\\\"ag-theme-material\\\"\\r\\n                                 [rowData]=\\\"userGridRows\\\"\\r\\n                                 [columnDefs]=\\\"userGridColumns\\\"\\r\\n                                 [enableColResize]=\\\"true\\\"\\r\\n                                 [pagination]=\\\"false\\\"\\r\\n                                 [enableSorting]=\\\"true\\\"\\r\\n                                 domLayout=\\\"autoHeight\\\"\\r\\n                                 (gridReady)=\\\"onGridReady($event)\\\"\\r\\n                                 (columnVisible)=\\\"onAddOrDeleteColumn($event)\\\"\\r\\n                                 (rowClicked)=\\\"onUserRowClicked($event)\\\"\\r\\n                                 [rowHeight]=\\\"atlasAgGridParam.rowHeight\\\"\\r\\n                                 enableFilter>\\r\\n                </ag-grid-angular>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"center center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 *ngIf=\\\"isSearchInProgress\\\">\\r\\n                <mat-spinner color=\\\"accent\\\"></mat-spinner>\\r\\n            </div>\\r\\n            <div fxLayout=\\\"row\\\"\\r\\n                 fxLayoutAlign=\\\"space-between center\\\"\\r\\n                 fxLayoutWrap\\r\\n                 class=\\\"no-search-results\\\"\\r\\n                 *ngIf=\\\"directoryUsers?.length === 0\\\">\\r\\n                <p>No result has been found.</p>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as agGrid from 'ag-grid-community';\r\nimport { CompanyManagerService } from '../../../../core/services/company-manager.service';\r\nimport { AtlasAgGridParam } from '../../../../shared/entities/atlas-ag-grid-param.entity';\r\nimport { DirectoryUser } from '../../../../shared/entities/directory-user.entity';\r\nimport { AgGridService } from '../../../../shared/services/ag-grid.service';\r\nimport { UserIdentityService } from '../../../../shared/services/http-services/user-identity.service';\r\nimport { SecurityService } from '../../../../shared/services/security.service';\r\nimport { TitleService } from '../../../../shared/services/title.service';\r\n\r\n@Component({\r\n    selector: 'atlas-user-search',\r\n    templateUrl: './user-search.component.html',\r\n    styleUrls: ['./user-search.component.css'],\r\n})\r\nexport class UserSearchComponent implements OnInit {\r\n    directoryUsers: DirectoryUser[];\r\n    isSearchInProgress: boolean;\r\n    isSave: boolean = false;\r\n    searchTerm: string;\r\n\r\n    userGridOptions: agGrid.GridOptions = {} as agGrid.GridOptions;\r\n    userGridColumns: agGrid.ColDef[];\r\n    userGridRows: DirectoryUser[];\r\n    gridApi: agGrid.GridApi;\r\n    gridColumnApi: agGrid.ColumnApi;\r\n\r\n    userForm: FormGroup;\r\n    userIdCtrl: FormControl;\r\n\r\n    atlasAgGridParam: AtlasAgGridParam;\r\n\r\n    constructor(private securityService: SecurityService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private fb: FormBuilder,\r\n        private userIdentityService: UserIdentityService,\r\n        private companyManager: CompanyManagerService,\r\n        public gridService: AgGridService,\r\n        private titleService: TitleService) {\r\n        this.initializeFormControls();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.securityService.isSecurityReady().subscribe(() => {\r\n            this.init();\r\n            this.titleService.setTitle(this.route.snapshot.data.title);\r\n            this.initializeGridColumns();\r\n            this.atlasAgGridParam = this.gridService.getAgGridParam();\r\n        });\r\n    }\r\n\r\n    initializeFormControls() {\r\n        this.userIdCtrl = new FormControl('', [Validators.required, Validators.minLength(3)]);\r\n        this.userForm = this.fb.group({\r\n            userIdCtrl: this.userIdCtrl,\r\n        });\r\n    }\r\n\r\n    init() {\r\n        this.userGridOptions.getRowHeight = (params) => {\r\n            return 30;\r\n        };\r\n    }\r\n\r\n    initializeGridColumns() {\r\n        this.userGridColumns = [\r\n            {\r\n                headerName: 'SAM Account Name',\r\n                field: 'samAccountName',\r\n            },\r\n            {\r\n                headerName: 'User Principal Name',\r\n                field: 'userPrincipalName',\r\n            },\r\n            {\r\n                headerName: 'First Name',\r\n                field: 'firstName',\r\n            },\r\n            {\r\n                headerName: 'Last Name',\r\n                field: 'lastName',\r\n            },\r\n            {\r\n                headerName: 'Email address',\r\n                field: 'emailAddress',\r\n            },\r\n            {\r\n                headerName: 'Phone n°',\r\n                field: 'phoneNumber',\r\n            },\r\n            {\r\n                headerName: 'Location',\r\n                field: 'location',\r\n            },\r\n        ];\r\n    }\r\n\r\n    canDeactivate() {\r\n        if (this.userForm.dirty && this.isSave === false) {\r\n            return window.confirm('Leave an unsave form? \\nYour changes won\\'t be applied!');\r\n        }\r\n        return true;\r\n    }\r\n\r\n    getDirectoryUsers() {\r\n        this.isSave = true;\r\n        this.searchTerm = this.userIdCtrl.value;\r\n        if (!this.searchTerm || this.searchTerm.length < 3) {\r\n            return;\r\n        }\r\n\r\n        this.isSearchInProgress = true;\r\n        this.userIdentityService.getDirectoryUsers(this.searchTerm)\r\n            .subscribe((data) => {\r\n                this.directoryUsers = data.value;\r\n                this.userGridRows = this.directoryUsers;\r\n                this.isSearchInProgress = false;\r\n            });\r\n    }\r\n\r\n    onGridReady(params) {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n\r\n        this.gridColumnApi.autoSizeAllColumns();\r\n\r\n        window.onresize = () => {\r\n            this.gridColumnApi.autoSizeAllColumns();\r\n        };\r\n    }\r\n\r\n    public onUserRowClicked(event) {\r\n        const data: DirectoryUser = event.data;\r\n        this.userIdentityService.getUserByUpn(data.userPrincipalName)\r\n            .subscribe((user) => {\r\n                if (user) {\r\n                    this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                        + '/admin/users/edit/', encodeURIComponent(data.userPrincipalName)]);\r\n                } else {\r\n                    this.router.navigate(['/' + this.companyManager.getCurrentCompanyId()\r\n                        + '/admin/users/new/', encodeURIComponent(data.userPrincipalName)]);\r\n                }\r\n            });\r\n    }\r\n}\r\n","export class CompanyTabIndex {\r\n    companyId: string;\r\n    tabIndex: number;\r\n\r\n    constructor(companyId: string, tabIndex: number = 0) {\r\n        this.companyId = companyId;\r\n        this.tabIndex = tabIndex;\r\n    }\r\n}\r\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ConfigurationService } from '../../shared/services/http-services/configuration.service';\r\n\r\nexport class FunctionalObjectNameValidator {\r\n    static createValidator(configurationService: ConfigurationService, id: number) {\r\n        return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\r\n            if (control.value) {\r\n                return configurationService.checkFunctionalObjectExists(control.value, id).pipe(\r\n                    map((res) => {\r\n                        return res ? { notUnique: true } : null;\r\n                    }),\r\n                );\r\n            }\r\n            return of(null);\r\n        };\r\n\r\n    }\r\n}\r\n","export class AccountingFieldSetup {\r\n    mainAccountingSetupId: number;\r\n    fieldId: number;\r\n    fieldName: string;\r\n    friendlyName: string;\r\n    isMandatory?: boolean;\r\n    isEditable?: boolean;\r\n    tableId: number;\r\n}\r\n","export class AccountingParameter {\r\n    transactionDocumentTypeCompanySetupId: number;\r\n    description: string;\r\n    transactionDocumentTypeId: number;\r\n    nextNumber: number;\r\n    year: number;\r\n    oldNumber: number;\r\n}\r\n","export class AccountingSetupFields {\r\n    id: string;\r\n    label: string;\r\n    value: string;\r\n    result: number;\r\n}\r\n","export class AllocationSetUp {\r\n    allocationFieldSetupId: number;\r\n    tradeSetupId: number;\r\n    fieldId: number;\r\n    fieldName: string;\r\n    differenceBlocking: boolean;\r\n    differenceWarning: boolean;\r\n    friendlyName: string;\r\n}\r\n","import { ApplicationField } from './application-field.entity';\r\n\r\nexport class ApplicationTable {\r\n    tableId: number;\r\n    tableName: string;\r\n    description: string;\r\n    fields: ApplicationField[];\r\n\r\n    constructor() {\r\n        this.fields = [];\r\n    }\r\n}\r\n","import { AccountingFieldSetup } from './accounting-field-setup.entity';\r\nimport { AccountingParameter } from './accounting-parameter.entity';\r\nimport { AllocationSetUp } from './allocation-set-up-entity';\r\nimport { CompanySetup } from './company-setup.entity';\r\nimport { DefaultAccountingSetupResult } from './default-accounting-setup-result.entity';\r\nimport { IntercoNoIntercoEmailSetup } from './interco-no-interco-email-setup.entity';\r\nimport { InterfaceSetup } from './interface-setup.entity';\r\nimport { InvoiceSetup } from './invoice-Setup.entity';\r\nimport { MandatoryTradeApprovalImageSetup } from './mandatory-trade-fields';\r\nimport { MappingFields } from './mapping-entity';\r\nimport { RetentionPolicy } from './retention-policy.entity';\r\nimport { TradeConfiguration } from './trade-configuration-entity';\r\nimport { TradeParameter } from './trade-parameter.entity';\r\n\r\nexport class CompanyConfiguration {\r\n    companyId: string;\r\n    companySetup: CompanySetup;\r\n    interfaceSetup: InterfaceSetup[];\r\n    invoiceSetup: InvoiceSetup;\r\n    tradeConfiguration: TradeConfiguration;\r\n    intercoNoIntercoEmailSetup: IntercoNoIntercoEmailSetup[];\r\n    allocationSetUp: AllocationSetUp[];\r\n    mandatoryTradeApprovalImageSetup: MandatoryTradeApprovalImageSetup[];\r\n    mainAccountingFieldSetup: AccountingFieldSetup[];\r\n    defaultAccountingSetup: DefaultAccountingSetupResult;\r\n    mappingSetup: MappingFields[];\r\n    accountingParameters: AccountingParameter[];\r\n    tradeParameters: TradeParameter[];\r\n    retentionPolicy: RetentionPolicy;\r\n}\r\n","export class CompanySetup {\r\n    id: number;\r\n    companyName: string;\r\n    companyId: string;\r\n    companyFriendlyCode: string;\r\n    companyTypeId: number;\r\n    legalEntityCode: string;\r\n    legalEntity: string;\r\n    functionalCurrencyCode: string;\r\n    statutoryCurrencyCode: string;\r\n    companyPlatformId: number;\r\n    countryId: number;\r\n    timeZone: string;\r\n    ldcRegionId: number;\r\n    weightUnitId: number;\r\n    counterpartyId: number;\r\n    companyDate: Date;\r\n    cropYearFormatId: number;\r\n    defaultBrokerId: number;\r\n    defaultProvinceId: number;\r\n    defaultBranchId: number;\r\n    isProvinceEnable: boolean;\r\n}\r\n","import { CompanyConfiguration } from './company-configuration.entity';\r\nimport { CompanyUserProfile } from './company-user-profile.entity';\r\n\r\nexport class CreateCompany {\r\n    companyId: string;\r\n    companyToCopy: string;\r\n    isCounterpartyRequired: boolean;\r\n    isTransactionDataSelected: boolean;\r\n    companyConfiguration: CompanyConfiguration;\r\n    companyUserProfile: CompanyUserProfile[];\r\n}\r\n","export class DefaultAccountingSetupResult {\r\n    accountingSetupId: number;\r\n    cashReceivedCostTypeId: number;\r\n    cashPaidCostTypeId: number;\r\n    purchaseInvoiceCostTypeId: number;\r\n    salesInvoiceCostTypeId: number;\r\n    washoutInvoiceGainsCostTypeId: number;\r\n    washoutInvoiceLossCostTypeId: number;\r\n    fxRevalCostTypeId: number;\r\n    defaultBankAccountId: number;\r\n    salesLedgerControlClientDebtorsId: number;\r\n    purchaseLedgerControlClientCreditorsId: number;\r\n    fxRevalaccountId: number;\r\n    suspenseAccountforWashoutSuspenseId: number;\r\n    realisedPhysicalsPayableId: number;\r\n    realisedPhysicalsReceivableId: number;\r\n    vatAccountInputsId: number;\r\n    vatAccountOutputsId: number;\r\n    fxAccountGainId: number;\r\n    fxAccountLossId: number;\r\n    plClearanceYepAccountId: number;\r\n    balanceSheetClearanceYepAccountId: number;\r\n    bsReserveYepAccountId: number;\r\n    yepCostTypeId: number;\r\n    dealNominalAccountId: number;\r\n    settlementNominalAccountId: number;\r\n    cancellationGainCostTypeId: number;\r\n    cancellationLossCostTypeId: number;\r\n    yepDepartmentId: number;\r\n}\r\n","export class FreezeCompany {\r\n    isFrozen: number;\r\n}\r\n","export class IntercoNoIntercoEmailSetup {\r\n    configId: number;\r\n    companyId: string;\r\n    userId: number;\r\n    isDeactivated: boolean;\r\n    isInterCo: boolean;\r\n}\r\n","export class InterfaceSetup {\r\n    interfaceSetUpId?: number;\r\n    isActive: boolean;\r\n    interfaceTypeId: number;\r\n    legalEntityCode: string;\r\n    interfaceCode: string;\r\n    countryId: number;\r\n}\r\n","export class InvoiceSetup {\r\n    invoiceSetupId: number;\r\n    vatActive: boolean;\r\n    vatLabel: string;\r\n    defaultVATCode: string;\r\n    tolerancePercentage: number;\r\n    authorizedForPosting: boolean;\r\n    companyId: string;\r\n    paymentTermId: number;\r\n    thresholdCostAmount: number;\r\n    defaultCostVATCode: string;\r\n    taxTypeId: number;\r\n}\r\n","export enum LockFunctionalContext {\r\n    TradeEdit = 100,\r\n    RelativeTradeEdit = 101,\r\n    TradeApproval = 102,\r\n    TradeSplit = 103,\r\n    TradeTranche = 104,\r\n    RelativeTradeSplit = 105,\r\n    RelativeTradeTranche = 106,\r\n    TradeAssignment = 107,\r\n    TradeDeassignment = 108,\r\n    BulkEdition = 109,\r\n    BulkApproval = 110,\r\n    TradeReassignment = 111,\r\n    TradeMerge = 112,\r\n    TradeBulkClosure = 113,\r\n    FxDeal = 114,\r\n    CharterEdit = 200,\r\n    CharterDeletion = 201,\r\n    CharterBulkClosure = 202,\r\n    ContractInvoicing = 300,\r\n    CostInvoicing = 301,\r\n    GoodsAndCostsInvoicing = 302,\r\n    WashoutInvoicing = 303,\r\n    ReversalInvoicing = 304,\r\n    Allocation = 400,\r\n    RelativeAllocation = 401,\r\n    Deallocation = 402,\r\n    BulkAllocation = 403,\r\n    BulkDeallocation = 404,\r\n    RelativeDeallocation = 403,\r\n    CostMatrixEdition = 500,\r\n    CostMatrixDeletion = 501,\r\n    MasterDataEdition = 600,\r\n    UserAccountEdition = 700,\r\n    UserAccountDeletion = 701,\r\n    UserProfileEdition = 800,\r\n    UserProfileDeletion = 801,\r\n    AccountingDocumentEdition = 900,\r\n    AccountingDocumentAuthorizeForPosting = 901,\r\n    AccountingDocumentReversal = 902,\r\n    CashDocumentEdition = 1000,\r\n    CashDocumentDeletion = 1001,\r\n}\r\n","export class MandatoryTradeApprovalImageSetup {\r\n    tradeSetupId: number;\r\n    fieldId: number;\r\n    fieldName: string;\r\n    mandatory: boolean;\r\n    unApproval: boolean;\r\n    isCopy: boolean;\r\n    friendlyName: string;\r\n}\r\n","export class MappingFields {\r\n    interface: string;\r\n    parameterName: string;\r\n    initialValue: string;\r\n    mapping: string;\r\n}\r\n","import { Privilege } from './privilege.entity';\r\n\r\nexport class PrivilegeNode {\r\n    privilege: Privilege;\r\n    children: PrivilegeNode[];\r\n\r\n    getPermission() {\r\n        return this.privilege.permission;\r\n    }\r\n\r\n    getId() {\r\n        return this.privilege.privilegeId;\r\n    }\r\n\r\n    getLevel() {\r\n        return this.privilege.level;\r\n    }\r\n\r\n    getParentId() {\r\n        return this.privilege.parentId;\r\n    }\r\n}\r\n","import { ProfilePrivilege } from './profile-privilege.entity';\r\n\r\nexport class Profile {\r\n    profileId: number;\r\n    name: string;\r\n    description: string;\r\n    isDisabled: boolean;\r\n    createdDateTime: Date;\r\n    createdBy: string;\r\n    modifiedDateTime: Date;\r\n    modifiedBy: string;\r\n    numberOfUsers: number;\r\n    privileges: ProfilePrivilege[];\r\n}\r\n","export class RetentionPolicy {\r\n    weekendDay: string;\r\n    dailyFreezeRetention: number;\r\n    weeklyFreezeRetention: number;\r\n    monthlyFreezeRetention: number;\r\n}\r\n","export class TradeParameter {\r\n    description: string;\r\n    contractTypeCode: number;\r\n    nextNumber: number;\r\n    contractTypeCompanySetupId: number;\r\n    oldNumber: number;\r\n}\r\n","import { Department } from './department.entity';\r\n\r\nexport class UserPermission {\r\n    companyId: string;\r\n    profileId: number;\r\n    allDepartments = true;\r\n    departments: Department[] = [];\r\n    isTrader: boolean;\r\n    isCharterManager: boolean;\r\n    profileName: string;\r\n\r\n    constructor(companyId = '',\r\n        profileId = null,\r\n        allDepartments = true,\r\n        departments: Department[] = [],\r\n        isTrader = false,\r\n        isCharterManager = false) {\r\n        this.companyId = companyId;\r\n        this.profileId = profileId;\r\n        this.allDepartments = allDepartments;\r\n        this.departments = departments;\r\n        this.isTrader = isTrader;\r\n        this.isCharterManager = isCharterManager;\r\n    }\r\n}","export class UserPreferencesSetup {\r\n    userId: number;\r\n    dateFormatId: number;\r\n    favouriteLanguageId: number;\r\n}\r\n","import { UserPreferencesSetup } from './user-preferences-setup.entity';\r\n\r\nexport class UserPreferences {\r\n    userPreferencesSetup: UserPreferencesSetup;\r\n}\r\n","export enum AccountingFields {\r\n    DefaultBankAccountId = 'defaultBankAccountId',\r\n    SalesLedgerControlClientDebtorsId = 'salesLedgerControlClientDebtorsId',\r\n    PurchaseLedgerControlClientCreditorsId = 'purchaseLedgerControlClientCreditorsId',\r\n    VATAccountInputs = 'vatAccountInputs',\r\n    VATAccountOutputs = 'vatAccountOutputs',\r\n    FXRevalaccountId = 'fxRevalaccountId',\r\n    FXAccountGain = 'fxAccountGain',\r\n    FXAccountLoss = 'fxAccountLoss',\r\n    SuspenseAccountforWashoutSuspenseId = 'suspenseAccountforWashoutSuspenseId',\r\n    RealisedPhysicalsPayableId = 'realisedPhysicalsPayableId',\r\n    RealisedPhysicalsReceivableId = 'realisedPhysicalsReceivableId',\r\n    CashReceivedCostTypeId = 'cashReceivedCostTypeId',\r\n    CashPaidCostTypeId = 'cashPaidCostTypeId',\r\n    PurchaseInvoiceCostTypeId = 'purchaseInvoiceCostTypeId',\r\n    SalesInvoiceCostTypeId = 'salesInvoiceCostTypeId',\r\n    WashoutInvoiceGainsCostTypeId = 'washoutInvoiceGainsCostTypeId',\r\n    WashoutInvoiceLossCostTypeId = 'washoutInvoiceLossCostTypeId',\r\n    FXRevalCostTypeId = 'fxRevalCostTypeId',\r\n    PLClearanceYepAccountId = 'plClearanceYepAccountId',\r\n    BalanceSheetClearanceYepAccountId = 'balanceSheetClearanceYepAccountId',\r\n    BSReserveYepAccountId = 'bsReserveYepAccountId',\r\n    YepCostTypeId = 'yepCostTypeId',\r\n    DealId = 'dealId',\r\n    SettlementId = 'settlementId',\r\n    CancellationGainCostTypeId = 'cancellationGainCostTypeId',\r\n    CancellationLossCostTypeId = 'cancellationLossCostTypeId',\r\n}\r\n","export enum ConfigurationType {\r\n    List = 1,\r\n    Contextual = 2,\r\n}","export enum Freeze {\r\n    Freeze = 'Freeze', Unfreeze = 'Unfreeze',\r\n    Frozen = 1, Unfrozen = 0,\r\n}\r\n","export enum InterfaceObjectType {\r\n    CommercialInvoices = 1,\r\n    JournalEntry = 2,\r\n    Accruals = 3,\r\n    AccountingPayments = 4,\r\n    PaymentOrder = 5,\r\n}\r\n","export enum ItParameterDocumentTypes {\r\n    Purchase = 0,\r\n    Sale = 1,\r\n    Cost = 2,\r\n    OtherSettlement = 3,\r\n    Reversal = 4,\r\n    GoodsAndCost = 5,\r\n    PurchaseInvoice = 1,\r\n    SalesInvoice = 2,\r\n    CreditNote = 3,\r\n    DebitNote = 4,\r\n    CashPay = 5,\r\n    CashReceipt = 6,\r\n    TemporaryAdjustment = 7,\r\n    MatchingCash = 8,\r\n    RegularJournal = 9,\r\n    FxDealJournal = 10,\r\n    YearEndDocument = 11,\r\n}\r\n","export enum PrivilegeTypes {\r\n\tAction = 0,\r\n\tException = 1\r\n}\r\n","export enum WeekDays {\r\n    Monday = 1,\r\n    Tuesday = 2,\r\n    Wednesday = 3,\r\n    Thursday = 4,\r\n    Friday = 5,\r\n    Saturday = 6,\r\n    Sunday = 7,\r\n}\r\n","import { User } from \"../entities/user.entity\";\r\n\r\nexport class UserListItemViewModel  {\r\n\tid: number;\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\temail: string;\r\n\tphoneNumber: string;\r\n\tlocation: string;\r\n\tuserPrincipalName: string;\r\n\tsamAccountName: string;\r\n\tisActivated: string;\r\n\r\n\tconstructor(user: User) {\r\n\t\tthis.id = user.userId;\r\n\t\tthis.firstName = user.firstName;\r\n\t\tthis.lastName = user.lastName;\r\n\t\tthis.email = user.email;\r\n\t\tthis.phoneNumber = user.phoneNumber;\r\n\t\tthis.location = user.location;\r\n\t\tthis.userPrincipalName = user.userPrincipalName;\r\n\t\tthis.samAccountName = user.samAccountName;\r\n\t\tthis.isActivated = (user.isDisabled) ? \"No\" : \"Yes\";\r\n\t}\r\n}\r\n","import { PaymentRequestInterfaceError } from './payment-request-interface-error';\r\n\r\nexport class PaymentRequestInterfaceCommand {\r\n    paymentInterfaceError: PaymentRequestInterfaceError;\r\n    paymentInterfaceStatus: string;\r\n}\r\n","export class PaymentRequestInterfaceError {\r\n    documentReference: string;\r\n    transactionDocumentId: number;\r\n    cashId: number;\r\n}\r\n","export class UpdateInterfaceError {\r\n    documentReference: string;\r\n    transactionDocumentId: number;\r\n    accountingId: number;\r\n    transactionDocumentTypeId: number;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport * as moment from 'moment';\r\nimport { AuthorizationService } from '../../core/services/authorization.service';\r\nimport { SecurityService } from '../../shared/services/security.service';\r\nimport { ConfigurationService } from './http-services/configuration.service';\r\n\r\n@Injectable()\r\nexport class CustomDateAdapter extends MomentDateAdapter {\r\n    // this is the default date set to the system\r\n    customDateFormat: string = undefined;\r\n    constructor(private securityService: SecurityService,\r\n        protected configurationService: ConfigurationService,\r\n        private authorizationService: AuthorizationService) {\r\n        super('en-US');\r\n    }\r\n\r\n    public format(date: moment.Moment, displayFormat: string): string {\r\n        if (!this.customDateFormat) {\r\n            this.getdateFormat();\r\n        }\r\n        return date.locale('en-US').format(this.customDateFormat);\r\n    }\r\n\r\n    getdateFormat() {\r\n        this.customDateFormat = this.authorizationService.getUserDateFormat();\r\n    }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { HttpRequestOptions } from '../../entities/http-services/http-request-options.entity';\r\nimport { InterfaceMonitoringDetails } from '../../entities/interface-monitoring-details.entity';\r\nimport { InterfaceMonitoringSummary } from '../../entities/interface-monitoring-summary.entity';\r\nimport { TransactionDetail } from '../../entities/transaction-detail.entity';\r\nimport { ApiCollection, ApiPaginatedCollection } from '../common/models';\r\nimport { DateConverterService } from '../date-converter.service';\r\nimport { CashRecord } from '../execution/dtos/cash-record';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuditService extends HttpBaseService {\r\n    private readonly EventsControllerUrl = 'events';\r\n    constructor(protected http: HttpClient,\r\n        private dateConverter: DateConverterService) {\r\n        super(http);\r\n    }\r\n\r\ngetEvents(): Observable < ApiCollection < InterfaceMonitoringSummary >> {\r\n        return this.get < ApiCollection<InterfaceMonitoringSummary>>(\r\n            `${environment.auditServiceLink}/${this.EventsControllerUrl}`);\r\n    }\r\n    getSearchEvents(interfaceType?: number, status?: string, fromDate?: Date, toDate?: Date, businessId?: string,\r\n        ): Observable<ApiCollection<InterfaceMonitoringSummary>> {\r\n\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        let queryParameters = new HttpParams();\r\n        if (interfaceType) {\r\n            queryParameters = queryParameters.set('interfaceType', interfaceType.toString());\r\n        }\r\n        if (status) {\r\n            queryParameters = queryParameters.set('interfaceStatus', status.toString());\r\n        }\r\n        if (fromDate) {\r\n            queryParameters = queryParameters.set(\r\n                'fromDate',\r\n                this.dateConverter.dateToStringConverter(fromDate));\r\n        }\r\n        if (toDate) {\r\n            queryParameters = queryParameters.set(\r\n                'toDate',\r\n                this.dateConverter.dateToStringConverter(toDate));\r\n        }\r\n        if (businessId) {\r\n            queryParameters = queryParameters.set('documentReference', businessId.toString());\r\n        }\r\n        options.params = queryParameters;\r\n        return this.get<ApiPaginatedCollection<InterfaceMonitoringSummary>>(\r\n            `${environment.auditServiceLink}/${this.EventsControllerUrl}/search`,\r\n            options,\r\n        );\r\n    }\r\n\r\n    getTransactionDoumentDetailsByAccountingId(accountingId: number, company: string): Observable<TransactionDetail> {\r\n        return this.get <TransactionDetail>(\r\n            `${environment.auditServiceLink}/${this.EventsControllerUrl}/${encodeURIComponent(String(company))}/transactiondetail/${encodeURIComponent(String(accountingId))}`);\r\n    }\r\n\r\n    getCashDetailsByCashId(cashId: number, company: string): Observable<CashRecord> {\r\n        return this.get <CashRecord>(\r\n            `${environment.auditServiceLink}/${this.EventsControllerUrl}/${encodeURIComponent(String(company))}/cashdetail/${encodeURIComponent(String(cashId))}`);\r\n    }\r\n\r\ngetEventDetails(eventId: number, company: string): Observable < ApiPaginatedCollection < InterfaceMonitoringDetails >> {\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        const queryParameters = new HttpParams();\r\n\r\n        options.params = queryParameters;\r\n\r\n        return this.get<ApiPaginatedCollection<InterfaceMonitoringDetails>>(\r\n            `${environment.auditServiceLink}/${this.EventsControllerUrl}/${encodeURIComponent(String(company))}/eventhistorybyid/${encodeURIComponent(String(eventId))}`,\r\n            options,\r\n        );\r\n    }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { HttpRequestOptions } from '../../entities/http-services/http-request-options.entity';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class InterfaceService extends HttpBaseService {\r\n    private readonly BuilderControllerUrl = 'builder';\r\n    constructor(\r\n        http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    getMessage(interfaceTypeId: number, objectTypeId: number, docId: string, company: string): Observable<string> {\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        options.headers = this.defaultHttpHeaders;\r\n\r\n        let queryParameters = new HttpParams();\r\n        if (interfaceTypeId) {\r\n            queryParameters = queryParameters.set('interfaceTypeId', interfaceTypeId as any);\r\n        }\r\n        if (objectTypeId) {\r\n            queryParameters = queryParameters.set('objectTypeId', objectTypeId as any);\r\n        }\r\n        if (docId) {\r\n            queryParameters = queryParameters.set('docId', docId.toString());\r\n        }\r\n        options.params = queryParameters;\r\n        return this.get<string>(\r\n            `${environment.interfaceServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.BuilderControllerUrl}`, options);\r\n    }\r\n\r\n    public checkDocumentIdExists(company: string, docId: string, objectTypeId: number): Observable<any> {\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n        options.headers = this.defaultHttpHeaders;\r\n\r\n        let queryParameters = new HttpParams();\r\n        if (docId) {\r\n            queryParameters = queryParameters.set('docId', docId as any);\r\n        }\r\n        if (objectTypeId) {\r\n            queryParameters = queryParameters.set('objectTypeId', objectTypeId as any);\r\n        }\r\n        options.params = queryParameters;\r\n        return this.get<boolean>(\r\n            `${environment.interfaceServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.BuilderControllerUrl}/checkdocumentreferenceexists`, options);\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment.dev';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { AccountingInterfaceError } from '../Interface/dto/accounting-interface-error';\r\nimport { PaymentRequestInterfaceCommand } from '../Interface/dto/payment-request-interface-command';\r\nimport { PaymentRequestInterfaceError } from '../Interface/dto/payment-request-interface-error';\r\nimport { UpdateInterfaceError } from '../Interface/dto/update-interface-error';\r\nimport { UpdateInterfaceStatusCommand } from '../Interface/dto/update-interface-status-command';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PaymentRequestInterfaceService  extends HttpBaseService {\r\n\r\n    private readonly paymentRequestInterfaceControllerUrl = 'paymentrequest';\r\n\r\n  constructor(http: HttpClient,\r\n    private companyManager: CompanyManagerService) {\r\n        super(http);\r\n    }\r\n\r\n    // Update interface status\r\n    updatePaymentRequestErrorStatus(interfaceError: PaymentRequestInterfaceError, interfaceStatus: string):\r\n     Observable<PaymentRequestInterfaceError> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        const command = this.mapToUpdateInterfaceStatusCommand(interfaceError, interfaceStatus);\r\n        return this.post<PaymentRequestInterfaceError>(\r\n            `${environment.paymentRequestInterfaceServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.paymentRequestInterfaceControllerUrl}/updatestatusofpaymenterror`,\r\n            command);\r\n    }\r\n\r\n    private mapToUpdateInterfaceStatusCommand(interfaceError: PaymentRequestInterfaceError,\r\n        interfaceStatus: string): PaymentRequestInterfaceCommand {\r\n        const command = new PaymentRequestInterfaceCommand();\r\n        command.paymentInterfaceError = interfaceError;\r\n        command.paymentInterfaceStatus = interfaceStatus;\r\n        return command;\r\n    }\r\n}\r\n"],"sourceRoot":""}